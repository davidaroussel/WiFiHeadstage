
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020a0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050acc  08020bb0  08020bb0  00021bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807167c  0807167c  00073294  2**0
                  CONTENTS
  4 .ARM          00000008  0807167c  0807167c  0007267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08071684  08071684  00073294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08071684  08071684  00072684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08071688  08071688  00072688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0807168c  00073000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013e0c  20000294  08071920  00073294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200140a0  08071920  000740a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00073294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038344  00000000  00000000  000732c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a12e  00000000  00000000  000ab608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002960  00000000  00000000  000b5738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002082  00000000  00000000  000b8098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b61a  00000000  00000000  000ba11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042ca2  00000000  00000000  000e5734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89e0  00000000  00000000  001283d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e0db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b844  00000000  00000000  001e0dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001ec640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000294 	.word	0x20000294
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020b94 	.word	0x08020b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000298 	.word	0x20000298
 80001dc:	08020b94 	.word	0x08020b94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <SPI_SEND_RECV>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t size) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	70fb      	strb	r3, [r7, #3]
	uint16_t Size = size;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	827b      	strh	r3, [r7, #18]

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d003      	beq.n	8000ef2 <SPI_SEND_RECV+0x2a>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->pRxBuffPtr = (uint8_t *)rx_ptr;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount = Size;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8a7a      	ldrh	r2, [r7, #18]
 8000f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
	hspi->RxXferSize = Size;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	8a7a      	ldrh	r2, [r7, #18]
 8000f08:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->pTxBuffPtr = (uint8_t *)tx_ptr;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount = Size;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8a7a      	ldrh	r2, [r7, #18]
 8000f14:	86da      	strh	r2, [r3, #54]	@ 0x36
	hspi->TxXferSize = Size;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8a7a      	ldrh	r2, [r7, #18]
 8000f1a:	869a      	strh	r2, [r3, #52]	@ 0x34

	/* Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->TxISR = NULL;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	2b40      	cmp	r3, #64	@ 0x40
 8000f34:	d007      	beq.n	8000f46 <SPI_SEND_RECV+0x7e>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f44:	601a      	str	r2, [r3, #0]
	}

	// RESET CS_PIN
	if (hspi->Instance == SPI3) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a3c      	ldr	r2, [pc, #240]	@ (800103c <SPI_SEND_RECV+0x174>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d104      	bne.n	8000f5a <SPI_SEND_RECV+0x92>
		RHS_SPI_CS_Port->BSRR = (uint32_t)RHS_SPI_CS_Pin << 16U;
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <SPI_SEND_RECV+0x178>)
 8000f52:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	e04d      	b.n	8000ff6 <SPI_SEND_RECV+0x12e>
	} else if (hspi->Instance == SPI4) {
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a39      	ldr	r2, [pc, #228]	@ (8001044 <SPI_SEND_RECV+0x17c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d148      	bne.n	8000ff6 <SPI_SEND_RECV+0x12e>
		RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 8000f64:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <SPI_SEND_RECV+0x180>)
 8000f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f6a:	619a      	str	r2, [r3, #24]
	}

	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8000f6c:	e043      	b.n	8000ff6 <SPI_SEND_RECV+0x12e>
		/* Check TXE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d11b      	bne.n	8000fb4 <SPI_SEND_RECV+0xec>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d016      	beq.n	8000fb4 <SPI_SEND_RECV+0xec>
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d113      	bne.n	8000fb4 <SPI_SEND_RECV+0xec>
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	1c9a      	adds	r2, r3, #2
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	631a      	str	r2, [r3, #48]	@ 0x30
			hspi->TxXferCount--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	86da      	strh	r2, [r3, #54]	@ 0x36
			/* Next Data is a reception (Rx). Tx not allowed */
			txallowed = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
		}

		/* Check RXNE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d119      	bne.n	8000ff6 <SPI_SEND_RECV+0x12e>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d014      	beq.n	8000ff6 <SPI_SEND_RECV+0x12e>
			*((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	801a      	strh	r2, [r3, #0]
			hspi->pRxBuffPtr += sizeof(uint16_t);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fde:	1c9a      	adds	r2, r3, #2
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
			hspi->RxXferCount--;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
			/* Next Data is a Transmission (Tx). Tx is allowed */
			txallowed = 1U;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1b6      	bne.n	8000f6e <SPI_SEND_RECV+0xa6>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001004:	b29b      	uxth	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1b1      	bne.n	8000f6e <SPI_SEND_RECV+0xa6>
		}
	}

	// SET CS_PIN
	if (hspi->Instance == SPI3){
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <SPI_SEND_RECV+0x174>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d103      	bne.n	800101c <SPI_SEND_RECV+0x154>
		RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <SPI_SEND_RECV+0x178>)
 8001016:	2204      	movs	r2, #4
 8001018:	619a      	str	r2, [r3, #24]
	} else if (hspi->Instance == SPI4) {
		RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
	}
}
 800101a:	e008      	b.n	800102e <SPI_SEND_RECV+0x166>
	} else if (hspi->Instance == SPI4) {
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <SPI_SEND_RECV+0x17c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d103      	bne.n	800102e <SPI_SEND_RECV+0x166>
		RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <SPI_SEND_RECV+0x180>)
 8001028:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40003c00 	.word	0x40003c00
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40013400 	.word	0x40013400
 8001048:	40020400 	.word	0x40020400

0800104c <TIM2_IRQHandler>:
TIM_HandleTypeDef htim2;
osSemaphoreId samplingSemaphore;
bool TIMER_FLAG = false;

// TIM2 Interrupt Handler
void TIM2_IRQHandler(void) {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <TIM2_IRQHandler+0x2c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d107      	bne.n	800106e <TIM2_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <TIM2_IRQHandler+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0201 	mvn.w	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
        TIMER_FLAG = true;
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <TIM2_IRQHandler+0x30>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    }
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200003c8 	.word	0x200003c8
 800107c:	20000414 	.word	0x20000414

08001080 <Timer2_Init>:


void Timer2_Init(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();  // Enable TIM2 clock
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <Timer2_Init+0x94>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <Timer2_Init+0x94>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <Timer2_Init+0x94>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

	uint32_t system_clock = 100000000; // Assume 100 MHz system clock
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <Timer2_Init+0x98>)
 80010a4:	617b      	str	r3, [r7, #20]
	uint32_t target_frequency = TIMER_FREQUENCY;  // Desired frequency
 80010a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80010aa:	613b      	str	r3, [r7, #16]
	uint32_t prescaler = 9;
 80010ac:	2309      	movs	r3, #9
 80010ae:	60fb      	str	r3, [r7, #12]
	uint32_t period = 999;  // Keep period small for high frequencies
 80010b0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80010b4:	60bb      	str	r3, [r7, #8]

	printf("System Clock: %lu Hz \r\n", system_clock);
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	4818      	ldr	r0, [pc, #96]	@ (800111c <Timer2_Init+0x9c>)
 80010ba:	f01d fddb 	bl	801ec74 <iprintf>
	printf("Target Timer Frequency: %d Hz \r\n", target_frequency);
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	4817      	ldr	r0, [pc, #92]	@ (8001120 <Timer2_Init+0xa0>)
 80010c2:	f01d fdd7 	bl	801ec74 <iprintf>
	printf("Calculated Prescaler: %lu \r\n", prescaler);
 80010c6:	68f9      	ldr	r1, [r7, #12]
 80010c8:	4816      	ldr	r0, [pc, #88]	@ (8001124 <Timer2_Init+0xa4>)
 80010ca:	f01d fdd3 	bl	801ec74 <iprintf>
	printf("Calculated Period: %lu \r\n", period);
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4815      	ldr	r0, [pc, #84]	@ (8001128 <Timer2_Init+0xa8>)
 80010d2:	f01d fdcf 	bl	801ec74 <iprintf>

	// Initialize the timer
	htim2.Instance = TIM2;
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <Timer2_Init+0xac>)
 80010d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010dc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = prescaler;
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <Timer2_Init+0xac>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <Timer2_Init+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = period;
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <Timer2_Init+0xac>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <Timer2_Init+0xac>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Init(&htim2);
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <Timer2_Init+0xac>)
 80010f8:	f008 fa90 	bl	800961c <HAL_TIM_Base_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	201c      	movs	r0, #28
 8001102:	f005 fef0 	bl	8006ee6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001106:	201c      	movs	r0, #28
 8001108:	f005 ff09 	bl	8006f1e <HAL_NVIC_EnableIRQ>
}
 800110c:	bf00      	nop
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	05f5e100 	.word	0x05f5e100
 800111c:	08020bb0 	.word	0x08020bb0
 8001120:	08020bc8 	.word	0x08020bc8
 8001124:	08020bec 	.word	0x08020bec
 8001128:	08020c0c 	.word	0x08020c0c
 800112c:	200003c8 	.word	0x200003c8

08001130 <StartSampling>:


void StartSampling(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    printf("Starting Sampling at %d Hz...\r\n", TIMER_FREQUENCY);
 8001134:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <StartSampling+0x18>)
 800113a:	f01d fd9b 	bl	801ec74 <iprintf>
    HAL_TIM_Base_Start_IT(&htim2);  // Start timer with interrupt
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <StartSampling+0x1c>)
 8001140:	f008 fac6 	bl	80096d0 <HAL_TIM_Base_Start_IT>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08020c28 	.word	0x08020c28
 800114c:	200003c8 	.word	0x200003c8

08001150 <StopSampling>:

void StopSampling(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    printf("Stopping Sampling...\r\n");
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <StopSampling+0x14>)
 8001156:	f01d fdfd 	bl	801ed54 <puts>
    HAL_TIM_Base_Stop_IT(&htim2);  // Stop timer
 800115a:	4803      	ldr	r0, [pc, #12]	@ (8001168 <StopSampling+0x18>)
 800115c:	f008 fb1a 	bl	8009794 <HAL_TIM_Base_Stop_IT>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08020c48 	.word	0x08020c48
 8001168:	200003c8 	.word	0x200003c8

0800116c <start_app_task>:




void start_app_task(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8001170:	2200      	movs	r2, #0
 8001172:	210c      	movs	r1, #12
 8001174:	2014      	movs	r0, #20
 8001176:	f00b ffe5 	bl	800d144 <xQueueGenericCreate>
 800117a:	4603      	mov	r3, r0
 800117c:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <start_app_task+0x5c>)
 800117e:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <start_app_task+0x5c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <start_app_task+0x22>
  		printf("booboo Queue \r\n");
 8001188:	4810      	ldr	r0, [pc, #64]	@ (80011cc <start_app_task+0x60>)
 800118a:	f01d fde3 	bl	801ed54 <puts>
  	}

  	//	INIT_UPD();

	TASK_RHD_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <start_app_task+0x5c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f85e 	bl	8001254 <TASK_RHD_SPI_COMMUNICATION_INIT>

  	Timer2_Init();
 8001198:	f7ff ff72 	bl	8001080 <Timer2_Init>

	INIT_INTAN();
 800119c:	f000 f81a 	bl	80011d4 <INIT_INTAN>

	INIT_TCP();
 80011a0:	f000 f8d2 	bl	8001348 <INIT_TCP>

  	while (!TCP_Connected){
 80011a4:	e002      	b.n	80011ac <start_app_task+0x40>
  		HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f005 fd7a 	bl	8006ca0 <HAL_Delay>
  	while (!TCP_Connected){
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <start_app_task+0x64>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f5      	bne.n	80011a6 <start_app_task+0x3a>
  	}

  	WIFI_MENU_INIT((void*) spi_to_wifi_queue);
 80011ba:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <start_app_task+0x5c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f986 	bl	80014d0 <WIFI_MENU_INIT>



//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200002b0 	.word	0x200002b0
 80011cc:	08020c60 	.word	0x08020c60
 80011d0:	200003c0 	.word	0x200003c0

080011d4 <INIT_INTAN>:
osThreadId sampleTaskHandle;
extern osSemaphoreId samplingSemaphore;
extern uint32_t global_counter;


void INIT_INTAN(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
	SPI_HandleTypeDef *hspi;

	printf("Init RHD \r\n");
 80011da:	481a      	ldr	r0, [pc, #104]	@ (8001244 <INIT_INTAN+0x70>)
 80011dc:	f01d fdba 	bl	801ed54 <puts>
	hspi = &hspi4;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <INIT_INTAN+0x74>)
 80011e2:	607b      	str	r3, [r7, #4]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);  //Activate SPI
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011f2:	601a      	str	r2, [r3, #0]
	hspi->Instance->CR1 |= SPI_CR1_DFF; 		//Activating the 16bit data mode
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001202:	601a      	str	r2, [r3, #0]
	INIT_RHD(hspi);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fdcf 	bl	8001da8 <INIT_RHD>


	printf("Init RHS \r\n");
 800120a:	4810      	ldr	r0, [pc, #64]	@ (800124c <INIT_INTAN+0x78>)
 800120c:	f01d fda2 	bl	801ed54 <puts>
	hspi = &hspi3;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <INIT_INTAN+0x7c>)
 8001212:	607b      	str	r3, [r7, #4]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001222:	601a      	str	r2, [r3, #0]
	hspi->Instance->CR1 |= SPI_CR1_DFF;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001232:	601a      	str	r2, [r3, #0]
	INIT_RHS(hspi);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f002 fceb 	bl	8003c10 <INIT_RHS>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08020c70 	.word	0x08020c70
 8001248:	20000a20 	.word	0x20000a20
 800124c:	08020c7c 	.word	0x08020c7c
 8001250:	200009c8 	.word	0x200009c8

08001254 <TASK_RHD_SPI_COMMUNICATION_INIT>:
//    samplingEnabled = false;
//}



void TASK_RHD_SPI_COMMUNICATION_INIT (void *arg) {
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	printf("Starting RHD Task \r\n");
 800125c:	4812      	ldr	r0, [pc, #72]	@ (80012a8 <TASK_RHD_SPI_COMMUNICATION_INIT+0x54>)
 800125e:	f01d fd79 	bl	801ed54 <puts>
	 // Create Binary Semaphore
	osSemaphoreDef(SamplingSem);
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
	samplingSemaphore = osSemaphoreCreate(osSemaphore(SamplingSem), 1);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f00b fbb0 	bl	800c9d2 <osSemaphoreCreate>
 8001272:	4603      	mov	r3, r0
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <TASK_RHD_SPI_COMMUNICATION_INIT+0x58>)
 8001276:	6013      	str	r3, [r2, #0]

	// Create Task
	osThreadDef(RHD64_SPI_handle, Intan_Sampling_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 10);
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <TASK_RHD_SPI_COMMUNICATION_INIT+0x5c>)
 800127a:	f107 0408 	add.w	r4, r7, #8
 800127e:	461d      	mov	r5, r3
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	6023      	str	r3, [r4, #0]
	if (osThreadCreate(osThread(RHD64_SPI_handle), (void *)arg) == NULL) {
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f00b faaf 	bl	800c7f2 <osThreadCreate>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <TASK_RHD_SPI_COMMUNICATION_INIT+0x4c>
		printf("Error creating SPI task \r\n");
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <TASK_RHD_SPI_COMMUNICATION_INIT+0x60>)
 800129c:	f01d fd5a 	bl	801ed54 <puts>
	}
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}
 80012a8:	08020c88 	.word	0x08020c88
 80012ac:	20000410 	.word	0x20000410
 80012b0:	08020ccc 	.word	0x08020ccc
 80012b4:	08020c9c 	.word	0x08020c9c

080012b8 <Intan_Sampling_task_entry>:


void Intan_Sampling_task_entry(void const *arg) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
	SPI_HandleTypeDef *hspi;
	hspi = &hspi3;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <Intan_Sampling_task_entry+0x38>)
 80012c6:	60bb      	str	r3, [r7, #8]
    while(1) {
        if (TIMER_FLAG) {
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <Intan_Sampling_task_entry+0x3c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00b      	beq.n	80012e8 <Intan_Sampling_task_entry+0x30>
			// Start processing when the flag is raised
			RHS2116_Convert_Register(hspi);
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f002 fc39 	bl	8003b48 <RHS2116_Convert_Register>
			global_counter +=1;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <Intan_Sampling_task_entry+0x40>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <Intan_Sampling_task_entry+0x40>)
 80012de:	6013      	str	r3, [r2, #0]
			TIMER_FLAG = false;
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <Intan_Sampling_task_entry+0x3c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e7ef      	b.n	80012c8 <Intan_Sampling_task_entry+0x10>
        }
        else{
        	vTaskDelay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f00c ffeb 	bl	800e2c4 <vTaskDelay>
        if (TIMER_FLAG) {
 80012ee:	e7eb      	b.n	80012c8 <Intan_Sampling_task_entry+0x10>
 80012f0:	200009c8 	.word	0x200009c8
 80012f4:	20000414 	.word	0x20000414
 80012f8:	200003c4 	.word	0x200003c4

080012fc <tcp_connected>:
extern bool TCP_Connected;
int res = -1;
err_t err;


err_t tcp_connected(void *arg, struct tcp_pcb *tpcb, err_t err) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4613      	mov	r3, r2
 8001308:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <tcp_connected+0x26>
        printf("TCP connection established successfully.\r\n");
 8001312:	480a      	ldr	r0, [pc, #40]	@ (800133c <tcp_connected+0x40>)
 8001314:	f01d fd1e 	bl	801ed54 <puts>
        TCP_Connected = true;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <tcp_connected+0x44>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
        return ERR_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e007      	b.n	8001332 <tcp_connected+0x36>
    } else {
        printf("TCP connection error: %d\n", err);
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	4619      	mov	r1, r3
 8001328:	4806      	ldr	r0, [pc, #24]	@ (8001344 <tcp_connected+0x48>)
 800132a:	f01d fca3 	bl	801ec74 <iprintf>
        return err;
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08020cf0 	.word	0x08020cf0
 8001340:	200003c0 	.word	0x200003c0
 8001344:	08020d1c 	.word	0x08020d1c

08001348 <INIT_TCP>:

int INIT_TCP(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    res = ipaddr_aton(ip_str_server, &server_addr);
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <INIT_TCP+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4926      	ldr	r1, [pc, #152]	@ (80013ec <INIT_TCP+0xa4>)
 8001352:	4618      	mov	r0, r3
 8001354:	f01b fc80 	bl	801cc58 <ip4addr_aton>
 8001358:	4603      	mov	r3, r0
 800135a:	4a25      	ldr	r2, [pc, #148]	@ (80013f0 <INIT_TCP+0xa8>)
 800135c:	6013      	str	r3, [r2, #0]
    if (res == 0) {
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <INIT_TCP+0xa8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d108      	bne.n	8001378 <INIT_TCP+0x30>
        printf("Failed to convert IP address: %s\n", ip_str_server);
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <INIT_TCP+0xa0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	4821      	ldr	r0, [pc, #132]	@ (80013f4 <INIT_TCP+0xac>)
 800136e:	f01d fc81 	bl	801ec74 <iprintf>
        return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e035      	b.n	80013e4 <INIT_TCP+0x9c>
    }

    tpcb = tcp_new();
 8001378:	f012 fd38 	bl	8013dec <tcp_new>
 800137c:	4603      	mov	r3, r0
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <INIT_TCP+0xb0>)
 8001380:	6013      	str	r3, [r2, #0]
    if (tpcb == NULL) {
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <INIT_TCP+0xb0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <INIT_TCP+0x4e>
        printf("Failed to create TCP PCB\n");
 800138a:	481c      	ldr	r0, [pc, #112]	@ (80013fc <INIT_TCP+0xb4>)
 800138c:	f01d fce2 	bl	801ed54 <puts>
        return -2;
 8001390:	f06f 0301 	mvn.w	r3, #1
 8001394:	e026      	b.n	80013e4 <INIT_TCP+0x9c>
    }

    tcp_arg(tpcb, NULL);
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <INIT_TCP+0xb0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f012 fd2d 	bl	8013dfc <tcp_arg>
    err = tcp_connect(tpcb, &server_addr, TCP_SERVER_PORT_DEFAULT, tcp_connected);
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <INIT_TCP+0xb0>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <INIT_TCP+0xb8>)
 80013a8:	f241 3289 	movw	r2, #5001	@ 0x1389
 80013ac:	490f      	ldr	r1, [pc, #60]	@ (80013ec <INIT_TCP+0xa4>)
 80013ae:	f011 fddf 	bl	8012f70 <tcp_connect>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <INIT_TCP+0xbc>)
 80013b8:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <INIT_TCP+0xbc>)
 80013bc:	f993 3000 	ldrsb.w	r3, [r3]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00e      	beq.n	80013e2 <INIT_TCP+0x9a>
        printf("TCP connection failed with error %d\n", err);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <INIT_TCP+0xbc>)
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	4619      	mov	r1, r3
 80013cc:	480e      	ldr	r0, [pc, #56]	@ (8001408 <INIT_TCP+0xc0>)
 80013ce:	f01d fc51 	bl	801ec74 <iprintf>
        tcp_close(tpcb);
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <INIT_TCP+0xb0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f011 fbe2 	bl	8012ba0 <tcp_close>
        return -3;
 80013dc:	f06f 0302 	mvn.w	r3, #2
 80013e0:	e000      	b.n	80013e4 <INIT_TCP+0x9c>
    }

    return ERR_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000418 	.word	0x20000418
 80013f0:	20000004 	.word	0x20000004
 80013f4:	08020d38 	.word	0x08020d38
 80013f8:	200002b8 	.word	0x200002b8
 80013fc:	08020d5c 	.word	0x08020d5c
 8001400:	080012fd 	.word	0x080012fd
 8001404:	2000041c 	.word	0x2000041c
 8001408:	08020d78 	.word	0x08020d78

0800140c <TCP_TRANSMIT_task_entry>:
}




void TCP_TRANSMIT_task_entry(void const *arg) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    struct pbuf *p = NULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
    spi_to_tcp_t tcp_message = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
    uint32_t counter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
    int BUFFER_SIZE = 1024;
 8001428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142c:	61fb      	str	r3, [r7, #28]

    tcp_message.message_lenght = BUFFER_SIZE * 2;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	617b      	str	r3, [r7, #20]

    while (1) {
    	if (xQueueReceive((QueueHandle_t)arg, (void *)&tcp_message, (TickType_t)1) == pdPASS) {
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2201      	movs	r2, #1
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f00c f939 	bl	800d6b4 <xQueueReceive>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d138      	bne.n	80014ba <TCP_TRANSMIT_task_entry+0xae>
//        	printf("TCP SEND %i \r\n", counter);
        	if (p == NULL){
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10d      	bne.n	800146a <TCP_TRANSMIT_task_entry+0x5e>
				p = pbuf_alloc(PBUF_TRANSPORT, BUFFER_SIZE*2, PBUF_RAM);
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	b29b      	uxth	r3, r3
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800145a:	4619      	mov	r1, r3
 800145c:	2036      	movs	r0, #54	@ 0x36
 800145e:	f010 fa69 	bl	8011934 <pbuf_alloc>
 8001462:	6278      	str	r0, [r7, #36]	@ 0x24
				printf("p is NULL \r\n");
 8001464:	4817      	ldr	r0, [pc, #92]	@ (80014c4 <TCP_TRANSMIT_task_entry+0xb8>)
 8001466:	f01d fc75 	bl	801ed54 <puts>
			}
        	counter ++;
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	3301      	adds	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
			//printf("%u \r\n", counter);
			//pbuf_take_at(p, counter, 2, SPI_DMA_BUFFER_SIZE);
			pbuf_take_at(p, (const void *)tcp_message.buffer, BUFFER_SIZE*2, 0);
 8001470:	6939      	ldr	r1, [r7, #16]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	b29b      	uxth	r3, r3
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	2300      	movs	r3, #0
 800147c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800147e:	f011 f887 	bl	8012590 <pbuf_take_at>
//            for (int i = 0; i < p->len/2; i++) {
//                printf("%04X ", ((uint16_t *)p->payload)[i]); // Assuming you want to print in hexadecimal format
//            }

            // Send data over the existing TCP connection
            err_t send_err = tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <TCP_TRANSMIT_task_entry+0xbc>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	895a      	ldrh	r2, [r3, #10]
 800148e:	2301      	movs	r3, #1
 8001490:	f015 fb7e 	bl	8016b90 <tcp_write>
 8001494:	4603      	mov	r3, r0
 8001496:	76fb      	strb	r3, [r7, #27]
            if (send_err != ERR_OK) {
 8001498:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <TCP_TRANSMIT_task_entry+0xa2>
                printf("Error sending data over TCP: %d\r\n", send_err);
 80014a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4809      	ldr	r0, [pc, #36]	@ (80014cc <TCP_TRANSMIT_task_entry+0xc0>)
 80014a8:	f01d fbe4 	bl	801ec74 <iprintf>
 80014ac:	e7c2      	b.n	8001434 <TCP_TRANSMIT_task_entry+0x28>
                // Handle the error appropriately
            } else {
                // Flush the data to ensure it's sent immediately
                tcp_output(tpcb);
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <TCP_TRANSMIT_task_entry+0xbc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f016 f9b4 	bl	8017820 <tcp_output>
 80014b8:	e7bc      	b.n	8001434 <TCP_TRANSMIT_task_entry+0x28>
//            p = NULL;

			// RESET FULL_TASK_Scope_Pin
//            FULL_TASK_SCOPE_Port->BSRR = (uint32_t)FULL_TASK_SCOPE_Pin << 16U;
        } else {
            vTaskDelay(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f00c ff02 	bl	800e2c4 <vTaskDelay>
    	if (xQueueReceive((QueueHandle_t)arg, (void *)&tcp_message, (TickType_t)1) == pdPASS) {
 80014c0:	e7b8      	b.n	8001434 <TCP_TRANSMIT_task_entry+0x28>
 80014c2:	bf00      	nop
 80014c4:	08020de0 	.word	0x08020de0
 80014c8:	200002b8 	.word	0x200002b8
 80014cc:	08020dec 	.word	0x08020dec

080014d0 <WIFI_MENU_INIT>:
extern ip_addr_t server_addr;
extern TaskHandle_t samplingTaskHandle;
extern TIM_HandleTypeDef htim2;
extern volatile uint8_t sampling_enabled;
extern uint32_t global_counter;
void WIFI_MENU_INIT(void *arg) {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

    osThreadDef(wifi_menu_handle, wifi_menu_start, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <WIFI_MENU_INIT+0x38>)
 80014da:	f107 040c 	add.w	r4, r7, #12
 80014de:	461d      	mov	r5, r3
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	6023      	str	r3, [r4, #0]

    if (osThreadCreate(osThread(wifi_menu_handle), (void *) arg) == NULL) {
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00b f97f 	bl	800c7f2 <osThreadCreate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <WIFI_MENU_INIT+0x30>
        printf("Error creating TCP task\r\n");
 80014fa:	4804      	ldr	r0, [pc, #16]	@ (800150c <WIFI_MENU_INIT+0x3c>)
 80014fc:	f01d fc2a 	bl	801ed54 <puts>
    }
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	08020e40 	.word	0x08020e40
 800150c:	08020e10 	.word	0x08020e10

08001510 <wifi_menu_start>:


void wifi_menu_start(void const *arg) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    // Set up callback function to receive data
    printf("Waiting \r\n");
 8001518:	4806      	ldr	r0, [pc, #24]	@ (8001534 <wifi_menu_start+0x24>)
 800151a:	f01d fc1b 	bl	801ed54 <puts>
    tcp_recv(tpcb, wifi_menu_recv_callback);  // Set the receive callback only once
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <wifi_menu_start+0x28>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4906      	ldr	r1, [pc, #24]	@ (800153c <wifi_menu_start+0x2c>)
 8001524:	4618      	mov	r0, r3
 8001526:	f012 fc7b 	bl	8013e20 <tcp_recv>

    while (1) {
        osDelay(1000);  // Some delay to keep the thread alive (replace as needed)
 800152a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800152e:	f00b f993 	bl	800c858 <osDelay>
 8001532:	e7fa      	b.n	800152a <wifi_menu_start+0x1a>
 8001534:	08020e54 	.word	0x08020e54
 8001538:	200002b8 	.word	0x200002b8
 800153c:	08001541 	.word	0x08001541

08001540 <wifi_menu_recv_callback>:

// Function prototype
static err_t send_response(struct tcp_pcb *pcb, const char *message, size_t length);

// Callback function
static err_t wifi_menu_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 8001546:	af00      	add	r7, sp, #0
 8001548:	f507 745e 	add.w	r4, r7, #888	@ 0x378
 800154c:	f5a4 745b 	sub.w	r4, r4, #876	@ 0x36c
 8001550:	6020      	str	r0, [r4, #0]
 8001552:	f507 705e 	add.w	r0, r7, #888	@ 0x378
 8001556:	f5a0 705c 	sub.w	r0, r0, #880	@ 0x370
 800155a:	6001      	str	r1, [r0, #0]
 800155c:	f507 715e 	add.w	r1, r7, #888	@ 0x378
 8001560:	f5a1 715d 	sub.w	r1, r1, #884	@ 0x374
 8001564:	600a      	str	r2, [r1, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800156c:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8001570:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK || p == NULL) {
 8001572:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001576:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800157a:	f993 3000 	ldrsb.w	r3, [r3]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <wifi_menu_recv_callback+0x50>
 8001582:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001586:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10c      	bne.n	80015aa <wifi_menu_recv_callback+0x6a>
        printf("Connection closed or error occurred\n");
 8001590:	48c5      	ldr	r0, [pc, #788]	@ (80018a8 <wifi_menu_recv_callback+0x368>)
 8001592:	f01d fbdf 	bl	801ed54 <puts>
        tcp_close(pcb);
 8001596:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800159a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	f011 fafe 	bl	8012ba0 <tcp_close>
        return ERR_ABRT;
 80015a4:	f06f 030c 	mvn.w	r3, #12
 80015a8:	e21b      	b.n	80019e2 <wifi_menu_recv_callback+0x4a2>
    }

    // Process the received data
    char *data = (char *)p->payload;
 80015aa:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80015ae:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
    if (p->len < 1) {
 80015ba:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80015be:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	895b      	ldrh	r3, [r3, #10]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <wifi_menu_recv_callback+0xa4>
        printf("Received empty or invalid data\r\n");
 80015ca:	48b8      	ldr	r0, [pc, #736]	@ (80018ac <wifi_menu_recv_callback+0x36c>)
 80015cc:	f01d fbc2 	bl	801ed54 <puts>
        pbuf_free(p);
 80015d0:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80015d4:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f010 fc93 	bl	8011f04 <pbuf_free>
        return ERR_VAL;
 80015de:	f06f 0305 	mvn.w	r3, #5
 80015e2:	e1fe      	b.n	80019e2 <wifi_menu_recv_callback+0x4a2>
    }

    // Handle Intan configuration mode
    if (intan_config_mode) {
 80015e4:	4bb2      	ldr	r3, [pc, #712]	@ (80018b0 <wifi_menu_recv_callback+0x370>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d063      	beq.n	80016b4 <wifi_menu_recv_callback+0x174>
        if (p->len < 2) {
 80015ec:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80015f0:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	895b      	ldrh	r3, [r3, #10]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d80a      	bhi.n	8001612 <wifi_menu_recv_callback+0xd2>
            printf("Error: Expected 2 bytes for configuration choices, received %d byte(s)\r\n", p->len);
 80015fc:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001600:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	895b      	ldrh	r3, [r3, #10]
 8001608:	4619      	mov	r1, r3
 800160a:	48aa      	ldr	r0, [pc, #680]	@ (80018b4 <wifi_menu_recv_callback+0x374>)
 800160c:	f01d fb32 	bl	801ec74 <iprintf>
 8001610:	e044      	b.n	800169c <wifi_menu_recv_callback+0x15c>
        } else {
            char high_pass = data[0];
 8001612:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f887 3368 	strb.w	r3, [r7, #872]	@ 0x368
            char low_pass = data[1];
 800161c:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367

            if (((high_pass >= '0' && high_pass <= '9') || (high_pass >= 'A' && high_pass <= 'M')) &&
 8001626:	f897 3368 	ldrb.w	r3, [r7, #872]	@ 0x368
 800162a:	2b2f      	cmp	r3, #47	@ 0x2f
 800162c:	d903      	bls.n	8001636 <wifi_menu_recv_callback+0xf6>
 800162e:	f897 3368 	ldrb.w	r3, [r7, #872]	@ 0x368
 8001632:	2b39      	cmp	r3, #57	@ 0x39
 8001634:	d907      	bls.n	8001646 <wifi_menu_recv_callback+0x106>
 8001636:	f897 3368 	ldrb.w	r3, [r7, #872]	@ 0x368
 800163a:	2b40      	cmp	r3, #64	@ 0x40
 800163c:	d926      	bls.n	800168c <wifi_menu_recv_callback+0x14c>
 800163e:	f897 3368 	ldrb.w	r3, [r7, #872]	@ 0x368
 8001642:	2b4d      	cmp	r3, #77	@ 0x4d
 8001644:	d822      	bhi.n	800168c <wifi_menu_recv_callback+0x14c>
 8001646:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 800164a:	2b2f      	cmp	r3, #47	@ 0x2f
 800164c:	d903      	bls.n	8001656 <wifi_menu_recv_callback+0x116>
                ((low_pass >= '0' && low_pass <= '9') || (low_pass >= 'A' && low_pass <= 'H'))) {
 800164e:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 8001652:	2b39      	cmp	r3, #57	@ 0x39
 8001654:	d907      	bls.n	8001666 <wifi_menu_recv_callback+0x126>
 8001656:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 800165a:	2b40      	cmp	r3, #64	@ 0x40
 800165c:	d916      	bls.n	800168c <wifi_menu_recv_callback+0x14c>
 800165e:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 8001662:	2b48      	cmp	r3, #72	@ 0x48
 8001664:	d812      	bhi.n	800168c <wifi_menu_recv_callback+0x14c>
                printf("Configuration choices received:\r\n");
 8001666:	4894      	ldr	r0, [pc, #592]	@ (80018b8 <wifi_menu_recv_callback+0x378>)
 8001668:	f01d fb74 	bl	801ed54 <puts>
                printf("High-pass filter: %c\r\n", high_pass);
 800166c:	f897 3368 	ldrb.w	r3, [r7, #872]	@ 0x368
 8001670:	4619      	mov	r1, r3
 8001672:	4892      	ldr	r0, [pc, #584]	@ (80018bc <wifi_menu_recv_callback+0x37c>)
 8001674:	f01d fafe 	bl	801ec74 <iprintf>
                printf("Low-pass filter: %c\r\n", low_pass);
 8001678:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 800167c:	4619      	mov	r1, r3
 800167e:	4890      	ldr	r0, [pc, #576]	@ (80018c0 <wifi_menu_recv_callback+0x380>)
 8001680:	f01d faf8 	bl	801ec74 <iprintf>
                printf("Applying configuration...\r\n");
 8001684:	488f      	ldr	r0, [pc, #572]	@ (80018c4 <wifi_menu_recv_callback+0x384>)
 8001686:	f01d fb65 	bl	801ed54 <puts>
 800168a:	e007      	b.n	800169c <wifi_menu_recv_callback+0x15c>
                // TODO: Apply the configuration
            } else {
                printf("Invalid configuration choices received: High-pass=%c, Low-pass=%c\r\n", high_pass, low_pass);
 800168c:	f897 3368 	ldrb.w	r3, [r7, #872]	@ 0x368
 8001690:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 8001694:	4619      	mov	r1, r3
 8001696:	488c      	ldr	r0, [pc, #560]	@ (80018c8 <wifi_menu_recv_callback+0x388>)
 8001698:	f01d faec 	bl	801ec74 <iprintf>
            }
        }

        intan_config_mode = 0;  // Exit Intan configuration mode
 800169c:	4b84      	ldr	r3, [pc, #528]	@ (80018b0 <wifi_menu_recv_callback+0x370>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
        pbuf_free(p);
 80016a2:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80016a6:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f010 fc2a 	bl	8011f04 <pbuf_free>
        return ERR_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e196      	b.n	80019e2 <wifi_menu_recv_callback+0x4a2>

    else {
    	//    	data[p->len] = '\0';  // Ensure the received data is null-terminated

    	// Print each byte of data to ensure it captures all received content
        osDelay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f00b f8cf 	bl	800c858 <osDelay>

        printf("Received data (length: %d): ", p->len);
 80016ba:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80016be:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	895b      	ldrh	r3, [r3, #10]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4880      	ldr	r0, [pc, #512]	@ (80018cc <wifi_menu_recv_callback+0x38c>)
 80016ca:	f01d fad3 	bl	801ec74 <iprintf>
//        for(int i = 0; i<p->len; i++){
//        	printf("%c", data[i]);  // Print character by character
//        }
		printf("%c", data[0]);  // Print character by character
 80016ce:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f01d fadf 	bl	801ec98 <putchar>

        printf("\r\n");
 80016da:	487d      	ldr	r0, [pc, #500]	@ (80018d0 <wifi_menu_recv_callback+0x390>)
 80016dc:	f01d fb3a 	bl	801ed54 <puts>
    }


    switch (data[0]) {
 80016e0:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3b30      	subs	r3, #48	@ 0x30
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	f200 816e 	bhi.w	80019ca <wifi_menu_recv_callback+0x48a>
 80016ee:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <wifi_menu_recv_callback+0x1b4>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001741 	.word	0x08001741
 80016f8:	0800177f 	.word	0x0800177f
 80016fc:	08001799 	.word	0x08001799
 8001700:	080017d1 	.word	0x080017d1
 8001704:	08001803 	.word	0x08001803
 8001708:	08001847 	.word	0x08001847
 800170c:	080019cb 	.word	0x080019cb
 8001710:	080019cb 	.word	0x080019cb
 8001714:	080019cb 	.word	0x080019cb
 8001718:	080019cb 	.word	0x080019cb
 800171c:	080019cb 	.word	0x080019cb
 8001720:	080019cb 	.word	0x080019cb
 8001724:	080019cb 	.word	0x080019cb
 8001728:	080019cb 	.word	0x080019cb
 800172c:	080019cb 	.word	0x080019cb
 8001730:	080019cb 	.word	0x080019cb
 8001734:	080019cb 	.word	0x080019cb
 8001738:	0800190d 	.word	0x0800190d
 800173c:	080019b3 	.word	0x080019b3
        case '0':
            printf("Executing Get Menu task\r\n");
 8001740:	4864      	ldr	r0, [pc, #400]	@ (80018d4 <wifi_menu_recv_callback+0x394>)
 8001742:	f01d fb07 	bl	801ed54 <puts>
            char menu[] = "*******************************************\r\n"
 8001746:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800174a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800174e:	4a62      	ldr	r2, [pc, #392]	@ (80018d8 <wifi_menu_recv_callback+0x398>)
 8001750:	4618      	mov	r0, r3
 8001752:	4611      	mov	r1, r2
 8001754:	f240 13c3 	movw	r3, #451	@ 0x1c3
 8001758:	461a      	mov	r2, r3
 800175a:	f01d fcb2 	bl	801f0c2 <memcpy>
                          "* 4- Configure Sampling Frequency         *\r\n"
                          "* 5- Configure Intan Chip Cutoff          *\r\n"
                          "* A- Start Intan Sampling                 *\r\n"
                          "* B- Stop Intan Sampling                  *\r\n"
                          "*******************************************\r\n";
            send_response(pcb, menu, strlen(menu));  // Send menu
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd9c 	bl	80002a0 <strlen>
 8001768:	4602      	mov	r2, r0
 800176a:	f107 0110 	add.w	r1, r7, #16
 800176e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001772:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	f000 f94a 	bl	8001a10 <send_response>
            break;
 800177c:	e129      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        case '1':
            printf("Executing Get Headstage ID task\r\n");
 800177e:	4857      	ldr	r0, [pc, #348]	@ (80018dc <wifi_menu_recv_callback+0x39c>)
 8001780:	f01d fae8 	bl	801ed54 <puts>
            send_response(pcb, DEVICE_ID, strlen(DEVICE_ID));  // Send DEVICE_ID
 8001784:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001788:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 800178c:	2216      	movs	r2, #22
 800178e:	4954      	ldr	r1, [pc, #336]	@ (80018e0 <wifi_menu_recv_callback+0x3a0>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f000 f93d 	bl	8001a10 <send_response>
            break;
 8001796:	e11c      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        case '2':
            printf("Executing Verify Intan Chip task\r\n");
 8001798:	4852      	ldr	r0, [pc, #328]	@ (80018e4 <wifi_menu_recv_callback+0x3a4>)
 800179a:	f01d fadb 	bl	801ed54 <puts>
            char response[] = "INTAN FAKE";
 800179e:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <wifi_menu_recv_callback+0x3a8>)
 80017a0:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 80017a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a6:	c303      	stmia	r3!, {r0, r1}
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	3302      	adds	r3, #2
 80017ac:	0c12      	lsrs	r2, r2, #16
 80017ae:	701a      	strb	r2, [r3, #0]
            send_response(pcb, response, strlen(response));  // Intan Config
 80017b0:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fd73 	bl	80002a0 <strlen>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 80017c0:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80017c4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	f000 f921 	bl	8001a10 <send_response>
            break;
 80017ce:	e100      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        case '3':
            if (p->len < 2) {
 80017d0:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80017d4:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	895b      	ldrh	r3, [r3, #10]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d803      	bhi.n	80017e8 <wifi_menu_recv_callback+0x2a8>
            	printf("Invalid data length for Configure Number of Channels\r\n");
 80017e0:	4842      	ldr	r0, [pc, #264]	@ (80018ec <wifi_menu_recv_callback+0x3ac>)
 80017e2:	f01d fab7 	bl	801ed54 <puts>
                break;
 80017e6:	e0f4      	b.n	80019d2 <wifi_menu_recv_callback+0x492>
            }
            uint8_t num_channels = data[1];
 80017e8:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80017ec:	3301      	adds	r3, #1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f887 3369 	strb.w	r3, [r7, #873]	@ 0x369
            printf("Configuring number of channels to: %d\r\n", num_channels);
 80017f4:	f897 3369 	ldrb.w	r3, [r7, #873]	@ 0x369
 80017f8:	4619      	mov	r1, r3
 80017fa:	483d      	ldr	r0, [pc, #244]	@ (80018f0 <wifi_menu_recv_callback+0x3b0>)
 80017fc:	f01d fa3a 	bl	801ec74 <iprintf>
            // Further processing
            break;
 8001800:	e0e7      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        case '4':
            if (p->len < 2) {
 8001802:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001806:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	895b      	ldrh	r3, [r3, #10]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d803      	bhi.n	800181a <wifi_menu_recv_callback+0x2da>
                printf("Invalid data length for Configure Sampling Frequency\r\n");
 8001812:	4838      	ldr	r0, [pc, #224]	@ (80018f4 <wifi_menu_recv_callback+0x3b4>)
 8001814:	f01d fa9e 	bl	801ed54 <puts>
                break;
 8001818:	e0db      	b.n	80019d2 <wifi_menu_recv_callback+0x492>
            }
            uint16_t sample_freq = (data[1] << 8) | data[2];
 800181a:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 800181e:	3301      	adds	r3, #1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 800182a:	3302      	adds	r3, #2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	f8a7 336a 	strh.w	r3, [r7, #874]	@ 0x36a
            printf("Configuring sampling frequency to: %d Hz\r\n", sample_freq);
 8001838:	f8b7 336a 	ldrh.w	r3, [r7, #874]	@ 0x36a
 800183c:	4619      	mov	r1, r3
 800183e:	482e      	ldr	r0, [pc, #184]	@ (80018f8 <wifi_menu_recv_callback+0x3b8>)
 8001840:	f01d fa18 	bl	801ec74 <iprintf>
            // Further processing
            break;
 8001844:	e0c5      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        case '5':

            if (p->len < 1) {
 8001846:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800184a:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	895b      	ldrh	r3, [r3, #10]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <wifi_menu_recv_callback+0x31e>
            	printf("Invalid data length for Intan Configuration\r\n");
 8001856:	4829      	ldr	r0, [pc, #164]	@ (80018fc <wifi_menu_recv_callback+0x3bc>)
 8001858:	f01d fa7c 	bl	801ed54 <puts>
                break;
 800185c:	e0b9      	b.n	80019d2 <wifi_menu_recv_callback+0x492>
            }
            printf("Executing Configure Intan Chip task\r\n");
 800185e:	4828      	ldr	r0, [pc, #160]	@ (8001900 <wifi_menu_recv_callback+0x3c0>)
 8001860:	f01d fa78 	bl	801ed54 <puts>
            char config[] = "Please select the proper configuration\r\n"
 8001864:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001868:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800186c:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <wifi_menu_recv_callback+0x3c4>)
 800186e:	4618      	mov	r0, r3
 8001870:	4611      	mov	r1, r2
 8001872:	f240 334b 	movw	r3, #843	@ 0x34b
 8001876:	461a      	mov	r2, r3
 8001878:	f01d fc23 	bl	801f0c2 <memcpy>
            				              "I- 1.0 Hz\r\n"
            				              "J- 0.75 Hz\r\n"
            				              "K- 0.5 Hz\r\n"
            				              "L- 0.3 Hz\r\n"
            				              "M- 0.25 Hz\r\n";
            send_response(pcb, config, strlen(config));  // Intan Config
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fd0d 	bl	80002a0 <strlen>
 8001886:	4602      	mov	r2, r0
 8001888:	f107 0110 	add.w	r1, r7, #16
 800188c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001890:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	f000 f8bb 	bl	8001a10 <send_response>

			printf("Waiting for configuration choices...\r\n");
 800189a:	481b      	ldr	r0, [pc, #108]	@ (8001908 <wifi_menu_recv_callback+0x3c8>)
 800189c:	f01d fa5a 	bl	801ed54 <puts>
			intan_config_mode = 1;  // Enter Intan configuration mode
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <wifi_menu_recv_callback+0x370>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
			break;
 80018a6:	e094      	b.n	80019d2 <wifi_menu_recv_callback+0x492>
 80018a8:	08020e60 	.word	0x08020e60
 80018ac:	08020e84 	.word	0x08020e84
 80018b0:	20000420 	.word	0x20000420
 80018b4:	08020ea4 	.word	0x08020ea4
 80018b8:	08020ef0 	.word	0x08020ef0
 80018bc:	08020f14 	.word	0x08020f14
 80018c0:	08020f2c 	.word	0x08020f2c
 80018c4:	08020f44 	.word	0x08020f44
 80018c8:	08020f60 	.word	0x08020f60
 80018cc:	08020fa4 	.word	0x08020fa4
 80018d0:	08020fc4 	.word	0x08020fc4
 80018d4:	08020fc8 	.word	0x08020fc8
 80018d8:	0802124c 	.word	0x0802124c
 80018dc:	08020fe4 	.word	0x08020fe4
 80018e0:	08021008 	.word	0x08021008
 80018e4:	08021020 	.word	0x08021020
 80018e8:	08021410 	.word	0x08021410
 80018ec:	08021044 	.word	0x08021044
 80018f0:	0802107c 	.word	0x0802107c
 80018f4:	080210a4 	.word	0x080210a4
 80018f8:	080210dc 	.word	0x080210dc
 80018fc:	08021108 	.word	0x08021108
 8001900:	08021138 	.word	0x08021138
 8001904:	0802141c 	.word	0x0802141c
 8001908:	08021160 	.word	0x08021160
        case 'A':
			char *channels = (char *)malloc((p->len - 1) * sizeof(char));
 800190c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001910:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	895b      	ldrh	r3, [r3, #10]
 8001918:	3b01      	subs	r3, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f01c fb1c 	bl	801df58 <malloc>
 8001920:	4603      	mov	r3, r0
 8001922:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
			if (channels == NULL) {
 8001926:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <wifi_menu_recv_callback+0x3fa>
				printf("Memory allocation failed for channels array\n");
 800192e:	482f      	ldr	r0, [pc, #188]	@ (80019ec <wifi_menu_recv_callback+0x4ac>)
 8001930:	f01d fa10 	bl	801ed54 <puts>
				return ERR_MEM;  // Return error code for memory allocation failure
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	e053      	b.n	80019e2 <wifi_menu_recv_callback+0x4a2>
			}

			printf("Channels : [ ");
 800193a:	482d      	ldr	r0, [pc, #180]	@ (80019f0 <wifi_menu_recv_callback+0x4b0>)
 800193c:	f01d f99a 	bl	801ec74 <iprintf>
			for (int i = 1; i < p->len; i++) {
 8001940:	2301      	movs	r3, #1
 8001942:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001946:	e01c      	b.n	8001982 <wifi_menu_recv_callback+0x442>
				channels[i - 1] = data[i];
 8001948:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800194c:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001950:	441a      	add	r2, r3
 8001952:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001956:	3b01      	subs	r3, #1
 8001958:	f8d7 136c 	ldr.w	r1, [r7, #876]	@ 0x36c
 800195c:	440b      	add	r3, r1
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	701a      	strb	r2, [r3, #0]
				printf("%d ", channels[i - 1]);
 8001962:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001966:	3b01      	subs	r3, #1
 8001968:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	4820      	ldr	r0, [pc, #128]	@ (80019f4 <wifi_menu_recv_callback+0x4b4>)
 8001974:	f01d f97e 	bl	801ec74 <iprintf>
			for (int i = 1; i < p->len; i++) {
 8001978:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800197c:	3301      	adds	r3, #1
 800197e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001982:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001986:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	895b      	ldrh	r3, [r3, #10]
 800198e:	461a      	mov	r2, r3
 8001990:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001994:	4293      	cmp	r3, r2
 8001996:	dbd7      	blt.n	8001948 <wifi_menu_recv_callback+0x408>
			}
			printf("] \r\n");
 8001998:	4817      	ldr	r0, [pc, #92]	@ (80019f8 <wifi_menu_recv_callback+0x4b8>)
 800199a:	f01d f9db 	bl	801ed54 <puts>


			free(channels);
 800199e:	f8d7 036c 	ldr.w	r0, [r7, #876]	@ 0x36c
 80019a2:	f01c fae1 	bl	801df68 <free>

			printf("Executing Start Intan Sampling task\r\n");
 80019a6:	4815      	ldr	r0, [pc, #84]	@ (80019fc <wifi_menu_recv_callback+0x4bc>)
 80019a8:	f01d f9d4 	bl	801ed54 <puts>
			StartSampling();
 80019ac:	f7ff fbc0 	bl	8001130 <StartSampling>

			break;
 80019b0:	e00f      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        case 'B':
        	StopSampling();
 80019b2:	f7ff fbcd 	bl	8001150 <StopSampling>
        	printf("Global Counter %d \r\n", global_counter);
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <wifi_menu_recv_callback+0x4c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4811      	ldr	r0, [pc, #68]	@ (8001a04 <wifi_menu_recv_callback+0x4c4>)
 80019be:	f01d f959 	bl	801ec74 <iprintf>
            printf("Executing Stop Intan Sampling task\r\n");
 80019c2:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <wifi_menu_recv_callback+0x4c8>)
 80019c4:	f01d f9c6 	bl	801ed54 <puts>
            break;
 80019c8:	e003      	b.n	80019d2 <wifi_menu_recv_callback+0x492>

        default:
            printf("Unknown command received\r\n");
 80019ca:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <wifi_menu_recv_callback+0x4cc>)
 80019cc:	f01d f9c2 	bl	801ed54 <puts>
            break;
 80019d0:	bf00      	nop
    }
    // Free the received buffer
    pbuf_free(p);
 80019d2:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80019d6:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f010 fa92 	bl	8011f04 <pbuf_free>

    // Keep the connection alive
    return ERR_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	f507 775f 	add.w	r7, r7, #892	@ 0x37c
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	08021188 	.word	0x08021188
 80019f0:	080211b4 	.word	0x080211b4
 80019f4:	080211c4 	.word	0x080211c4
 80019f8:	080211c8 	.word	0x080211c8
 80019fc:	080211cc 	.word	0x080211cc
 8001a00:	200003c4 	.word	0x200003c4
 8001a04:	080211f4 	.word	0x080211f4
 8001a08:	0802120c 	.word	0x0802120c
 8001a0c:	08021230 	.word	0x08021230

08001a10 <send_response>:

// Function to send response over TCP
static err_t send_response(struct tcp_pcb *pcb, const char *message, size_t length) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
    struct pbuf *response_buf = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001a24:	4619      	mov	r1, r3
 8001a26:	2036      	movs	r0, #54	@ 0x36
 8001a28:	f00f ff84 	bl	8011934 <pbuf_alloc>
 8001a2c:	6178      	str	r0, [r7, #20]
    if (response_buf != NULL) {
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d028      	beq.n	8001a86 <send_response+0x76>
        pbuf_take(response_buf, message, length);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	6978      	ldr	r0, [r7, #20]
 8001a3e:	f010 fd15 	bl	801246c <pbuf_take>

        err_t send_err = tcp_write(pcb, response_buf->payload, response_buf->len, TCP_WRITE_FLAG_COPY);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	895a      	ldrh	r2, [r3, #10]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f015 f89f 	bl	8016b90 <tcp_write>
 8001a52:	4603      	mov	r3, r0
 8001a54:	74fb      	strb	r3, [r7, #19]
        if (send_err != ERR_OK) {
 8001a56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <send_response+0x66>
            printf("Error sending data over TCP: %d\r\n", send_err);
 8001a5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <send_response+0x88>)
 8001a66:	f01d f905 	bl	801ec74 <iprintf>
            pbuf_free(response_buf);  // Free buffer on error
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f010 fa4a 	bl	8011f04 <pbuf_free>
            return send_err;
 8001a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a74:	e00c      	b.n	8001a90 <send_response+0x80>
        } else {
            tcp_output(pcb);  // Flush the data to ensure it's sent immediately
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f015 fed2 	bl	8017820 <tcp_output>
        }

        pbuf_free(response_buf);  // Free the response buffer after sending
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f010 fa41 	bl	8011f04 <pbuf_free>
    } else {
        printf("Error allocating pbuf for message\r\n");
        return ERR_MEM;  // Return memory error if allocation fails
    }

    return ERR_OK;  // Success
 8001a82:	2300      	movs	r3, #0
 8001a84:	e004      	b.n	8001a90 <send_response+0x80>
        printf("Error allocating pbuf for message\r\n");
 8001a86:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <send_response+0x8c>)
 8001a88:	f01d f964 	bl	801ed54 <puts>
        return ERR_MEM;  // Return memory error if allocation fails
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	08021768 	.word	0x08021768
 8001a9c:	0802178c 	.word	0x0802178c

08001aa0 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	3301      	adds	r3, #1
 8001aae:	4a11      	ldr	r2, [pc, #68]	@ (8001af4 <from_hex+0x54>)
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <from_hex+0x24>
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	3b30      	subs	r3, #48	@ 0x30
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e011      	b.n	8001ae8 <from_hex+0x48>
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	3301      	adds	r3, #1
 8001acc:	4a09      	ldr	r2, [pc, #36]	@ (8001af4 <from_hex+0x54>)
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <from_hex+0x40>
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3320      	adds	r3, #32
 8001ade:	e000      	b.n	8001ae2 <from_hex+0x42>
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	3b57      	subs	r3, #87	@ 0x57
 8001ae6:	b2db      	uxtb	r3, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	08071323 	.word	0x08071323

08001af8 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b095      	sub	sp, #84	@ 0x54
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int i = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (strlen(str) > 64) {
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fbc9 	bl	80002a0 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b40      	cmp	r3, #64	@ 0x40
 8001b12:	d947      	bls.n	8001ba4 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e056      	b.n	8001bc6 <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8001b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b25      	cmp	r3, #37	@ 0x25
 8001b1e:	d128      	bne.n	8001b72 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8001b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b22:	3301      	adds	r3, #1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d039      	beq.n	8001b9e <url_decode+0xa6>
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d034      	beq.n	8001b9e <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 8001b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b36:	3301      	adds	r3, #1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ffb0 	bl	8001aa0 <from_hex>
 8001b40:	4603      	mov	r3, r0
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	b25c      	sxtb	r4, r3
 8001b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b48:	3302      	adds	r3, #2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ffa7 	bl	8001aa0 <from_hex>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	4323      	orrs	r3, r4
 8001b58:	b259      	sxtb	r1, r3
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	3350      	adds	r3, #80	@ 0x50
 8001b64:	443b      	add	r3, r7
 8001b66:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 8001b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b70:	e015      	b.n	8001b9e <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 8001b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b2b      	cmp	r3, #43	@ 0x2b
 8001b78:	d108      	bne.n	8001b8c <url_decode+0x94>
      rstr[i++]  = ' ';
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001b80:	3350      	adds	r3, #80	@ 0x50
 8001b82:	443b      	add	r3, r7
 8001b84:	2220      	movs	r2, #32
 8001b86:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001b8a:	e008      	b.n	8001b9e <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001b92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b94:	7812      	ldrb	r2, [r2, #0]
 8001b96:	3350      	adds	r3, #80	@ 0x50
 8001b98:	443b      	add	r3, r7
 8001b9a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (*pstr) {
 8001ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1b5      	bne.n	8001b18 <url_decode+0x20>
  }
  rstr[i] = '\0';
 8001bac:	f107 0208 	add.w	r2, r7, #8
 8001bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f01d fa77 	bl	801f0b2 <strcpy>
  return SL_STATUS_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3754      	adds	r7, #84	@ 0x54
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
	...

08001bd0 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <wifi_autoconnexion_init+0x28>)
 8001bd8:	1d3c      	adds	r4, r7, #4
 8001bda:	461d      	mov	r5, r3
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00a fe02 	bl	800c7f2 <osThreadCreate>

}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	080217c4 	.word	0x080217c4

08001bfc <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b097      	sub	sp, #92	@ 0x5c
 8001c00:	af08      	add	r7, sp, #32
 8001c02:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 8001c04:	2303      	movs	r3, #3
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 8001c08:	4b58      	ldr	r3, [pc, #352]	@ (8001d6c <wifi_station_connect_task_entry+0x170>)
 8001c0a:	f107 0418 	add.w	r4, r7, #24
 8001c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 8001c14:	4b56      	ldr	r3, [pc, #344]	@ (8001d70 <wifi_station_connect_task_entry+0x174>)
 8001c16:	f107 0408 	add.w	r4, r7, #8
 8001c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30

  if (num_params == 3) {
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	f040 8096 	bne.w	8001d5c <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	4950      	ldr	r1, [pc, #320]	@ (8001d74 <wifi_station_connect_task_entry+0x178>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fad3 	bl	80001e0 <strcmp>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d114      	bne.n	8001c6a <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff58 	bl	8001af8 <url_decode>
      ssid_length = strlen(pc_value[0]);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fb28 	bl	80002a0 <strlen>
 8001c50:	4603      	mov	r3, r0
 8001c52:	637b      	str	r3, [r7, #52]	@ 0x34
      memset(wlan_ssid, 0, 32);
 8001c54:	2220      	movs	r2, #32
 8001c56:	2100      	movs	r1, #0
 8001c58:	4847      	ldr	r0, [pc, #284]	@ (8001d78 <wifi_station_connect_task_entry+0x17c>)
 8001c5a:	f01d f975 	bl	801ef48 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c62:	4619      	mov	r1, r3
 8001c64:	4844      	ldr	r0, [pc, #272]	@ (8001d78 <wifi_station_connect_task_entry+0x17c>)
 8001c66:	f01d f989 	bl	801ef7c <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4943      	ldr	r1, [pc, #268]	@ (8001d7c <wifi_station_connect_task_entry+0x180>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fab6 	bl	80001e0 <strcmp>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d114      	bne.n	8001ca4 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff3b 	bl	8001af8 <url_decode>
      passkey_length = strlen(pc_value[1]);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fb0b 	bl	80002a0 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	633b      	str	r3, [r7, #48]	@ 0x30
      memset(wlan_passkey, 0, 64);
 8001c8e:	2240      	movs	r2, #64	@ 0x40
 8001c90:	2100      	movs	r1, #0
 8001c92:	483b      	ldr	r0, [pc, #236]	@ (8001d80 <wifi_station_connect_task_entry+0x184>)
 8001c94:	f01d f958 	bl	801ef48 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4838      	ldr	r0, [pc, #224]	@ (8001d80 <wifi_station_connect_task_entry+0x184>)
 8001ca0:	f01d f96c 	bl	801ef7c <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	4937      	ldr	r1, [pc, #220]	@ (8001d84 <wifi_station_connect_task_entry+0x188>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fa99 	bl	80001e0 <strcmp>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12e      	bne.n	8001d12 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff1e 	bl	8001af8 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4932      	ldr	r1, [pc, #200]	@ (8001d88 <wifi_station_connect_task_entry+0x18c>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fa8d 	bl	80001e0 <strcmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <wifi_station_connect_task_entry+0xe0>
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	492f      	ldr	r1, [pc, #188]	@ (8001d8c <wifi_station_connect_task_entry+0x190>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fa85 	bl	80001e0 <strcmp>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d103      	bne.n	8001ce4 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <wifi_station_connect_task_entry+0x194>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e016      	b.n	8001d12 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	492b      	ldr	r1, [pc, #172]	@ (8001d94 <wifi_station_connect_task_entry+0x198>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fa79 	bl	80001e0 <strcmp>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 8001cf4:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <wifi_station_connect_task_entry+0x194>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e00a      	b.n	8001d12 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4926      	ldr	r1, [pc, #152]	@ (8001d98 <wifi_station_connect_task_entry+0x19c>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fa6d 	bl	80001e0 <strcmp>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <wifi_station_connect_task_entry+0x194>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <wifi_station_connect_task_entry+0x1a0>)
 8001d14:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d120      	bne.n	8001d62 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8001d20:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d22:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <wifi_station_connect_task_entry+0x194>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	9006      	str	r0, [sp, #24]
 8001d2e:	2000      	movs	r0, #0
 8001d30:	9005      	str	r0, [sp, #20]
 8001d32:	9204      	str	r2, [sp, #16]
 8001d34:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <wifi_station_connect_task_entry+0x184>)
 8001d36:	9203      	str	r2, [sp, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	9202      	str	r2, [sp, #8]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	9201      	str	r2, [sp, #4]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <wifi_station_connect_task_entry+0x17c>)
 8001d48:	f008 fcf2 	bl	800a730 <sl_wfx_send_join_command>
 8001d4c:	62b8      	str	r0, [r7, #40]	@ 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8001d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8001d54:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <wifi_station_connect_task_entry+0x1a4>)
 8001d56:	f01c fffd 	bl	801ed54 <puts>
 8001d5a:	e002      	b.n	8001d62 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8001d5c:	4811      	ldr	r0, [pc, #68]	@ (8001da4 <wifi_station_connect_task_entry+0x1a8>)
 8001d5e:	f01c fff9 	bl	801ed54 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f00a fd6c 	bl	800c840 <osThreadTerminate>
 8001d68:	e7fb      	b.n	8001d62 <wifi_station_connect_task_entry+0x166>
 8001d6a:	bf00      	nop
 8001d6c:	08021840 	.word	0x08021840
 8001d70:	0802186c 	.word	0x0802186c
 8001d74:	080217d8 	.word	0x080217d8
 8001d78:	2000000c 	.word	0x2000000c
 8001d7c:	080217e0 	.word	0x080217e0
 8001d80:	20000030 	.word	0x20000030
 8001d84:	080217e4 	.word	0x080217e4
 8001d88:	080217ec 	.word	0x080217ec
 8001d8c:	080217f4 	.word	0x080217f4
 8001d90:	20000071 	.word	0x20000071
 8001d94:	080217f8 	.word	0x080217f8
 8001d98:	080217fc 	.word	0x080217fc
 8001d9c:	20000424 	.word	0x20000424
 8001da0:	08021804 	.word	0x08021804
 8001da4:	08021820 	.word	0x08021820

08001da8 <INIT_RHD>:
 *      Author: david
 */

#include "Intan_utils.h"

void INIT_RHD(SPI_HandleTypeDef *hspi){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	@ 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	uint16_t tx_vector;
	uint16_t rx_vector[1];
	uint8_t data_size = 1; //Number of Bytes to send
 8001db0:	2301      	movs	r3, #1
 8001db2:	77fb      	strb	r3, [r7, #31]
	uint8_t reg_address;
	uint8_t reg_value;
	uint16_t formated_value;
	uint8_t bit_shifting = 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	const char *rhd_versions[] = {"RHD2132", "RHD2216", "RHD2164"};
 8001dba:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <INIT_RHD+0x30>)
 8001dbc:	f107 0308 	add.w	r3, r7, #8
 8001dc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *rhd_detected = rhd_versions[2];
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <INIT_RHD+0x34>)
 8001dcc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dd0:	619a      	str	r2, [r3, #24]

	for (int i = 0; i<9 ; i++){
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd6:	e011      	b.n	8001dfc <INIT_RHD+0x54>
 8001dd8:	08021a24 	.word	0x08021a24
 8001ddc:	40020400 	.word	0x40020400
		// Register 63 for DUMMY READ on BOOT
		tx_vector = 0b1111111100000000;
 8001de0:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001de4:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	f107 0214 	add.w	r2, r7, #20
 8001dec:	f107 0118 	add.w	r1, r7, #24
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff f869 	bl	8000ec8 <SPI_SEND_RECV>
	for (int i = 0; i<9 ; i++){
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	3301      	adds	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	ddee      	ble.n	8001de0 <INIT_RHD+0x38>

	}

	// Register 0 - ADC config.
	reg_address = 0b10000000;
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11011110;
 8001e06:	23de      	movs	r3, #222	@ 0xde
 8001e08:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001e0a:	7fbb      	ldrb	r3, [r7, #30]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	7f7b      	ldrb	r3, [r7, #29]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	f107 0214 	add.w	r2, r7, #20
 8001e22:	f107 0118 	add.w	r1, r7, #24
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f84e 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 1 - Supply sensor & ADC buffer bias current
	reg_address = 0b10000001;
 8001e2c:	2381      	movs	r3, #129	@ 0x81
 8001e2e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00100000; //(ADC BUFFER BIAS AT 32)
 8001e30:	2320      	movs	r3, #32
 8001e32:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001e34:	7fbb      	ldrb	r3, [r7, #30]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	7f7b      	ldrb	r3, [r7, #29]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	f107 0214 	add.w	r2, r7, #20
 8001e4c:	f107 0118 	add.w	r1, r7, #24
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff f839 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 2 - MUX bias current
	reg_address = 0b10000010;
 8001e56:	2382      	movs	r3, #130	@ 0x82
 8001e58:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101000; //(MUX BIAS AT 40)
 8001e5a:	2328      	movs	r3, #40	@ 0x28
 8001e5c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001e5e:	7fbb      	ldrb	r3, [r7, #30]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	7f7b      	ldrb	r3, [r7, #29]
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001e70:	7ffb      	ldrb	r3, [r7, #31]
 8001e72:	f107 0214 	add.w	r2, r7, #20
 8001e76:	f107 0118 	add.w	r1, r7, #24
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff f824 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	reg_address = 0b10000011;
 8001e80:	2383      	movs	r3, #131	@ 0x83
 8001e82:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000010;
 8001e84:	2302      	movs	r3, #2
 8001e86:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001e88:	7fbb      	ldrb	r3, [r7, #30]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	7f7b      	ldrb	r3, [r7, #29]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	f107 0214 	add.w	r2, r7, #20
 8001ea0:	f107 0118 	add.w	r1, r7, #24
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff f80f 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 4 - ADC output format & DSP offset removal
	reg_address = 0b10000100;
 8001eaa:	2384      	movs	r3, #132	@ 0x84
 8001eac:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11010110;
 8001eae:	23d6      	movs	r3, #214	@ 0xd6
 8001eb0:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001eb2:	7fbb      	ldrb	r3, [r7, #30]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	7f7b      	ldrb	r3, [r7, #29]
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001ec4:	7ffb      	ldrb	r3, [r7, #31]
 8001ec6:	f107 0214 	add.w	r2, r7, #20
 8001eca:	f107 0118 	add.w	r1, r7, #24
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fffa 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 5 - Impedance check control
	reg_address = 0b10000101;
 8001ed4:	2385      	movs	r3, #133	@ 0x85
 8001ed6:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001edc:	7fbb      	ldrb	r3, [r7, #30]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	7f7b      	ldrb	r3, [r7, #29]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	f107 0214 	add.w	r2, r7, #20
 8001ef4:	f107 0118 	add.w	r1, r7, #24
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7fe ffe5 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 6 - Impedance check DAC [unchanged]
	reg_address = 0b10000110;
 8001efe:	2386      	movs	r3, #134	@ 0x86
 8001f00:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001f02:	2300      	movs	r3, #0
 8001f04:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001f06:	7fbb      	ldrb	r3, [r7, #30]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	7f7b      	ldrb	r3, [r7, #29]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001f18:	7ffb      	ldrb	r3, [r7, #31]
 8001f1a:	f107 0214 	add.w	r2, r7, #20
 8001f1e:	f107 0118 	add.w	r1, r7, #24
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe ffd0 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 7 - Impedance check amplifier select [unchanged]
	reg_address = 0b10000111;
 8001f28:	2387      	movs	r3, #135	@ 0x87
 8001f2a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001f30:	7fbb      	ldrb	r3, [r7, #30]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001f42:	7ffb      	ldrb	r3, [r7, #31]
 8001f44:	f107 0214 	add.w	r2, r7, #20
 8001f48:	f107 0118 	add.w	r1, r7, #24
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe ffbb 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	reg_address = 0b10001000;
 8001f52:	2388      	movs	r3, #136	@ 0x88
 8001f54:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00011110;
 8001f56:	231e      	movs	r3, #30
 8001f58:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001f5a:	7fbb      	ldrb	r3, [r7, #30]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	7f7b      	ldrb	r3, [r7, #29]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
 8001f6e:	f107 0214 	add.w	r2, r7, #20
 8001f72:	f107 0118 	add.w	r1, r7, #24
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe ffa6 	bl	8000ec8 <SPI_SEND_RECV>

	// 	Reg. 9 -> 5
	reg_address = 0b10001001;
 8001f7c:	2389      	movs	r3, #137	@ 0x89
 8001f7e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000101;
 8001f80:	2305      	movs	r3, #5
 8001f82:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001f84:	7fbb      	ldrb	r3, [r7, #30]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	7f7b      	ldrb	r3, [r7, #29]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001f96:	7ffb      	ldrb	r3, [r7, #31]
 8001f98:	f107 0214 	add.w	r2, r7, #20
 8001f9c:	f107 0118 	add.w	r1, r7, #24
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe ff91 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 10 -> 43
	reg_address = 0b10001010;
 8001fa6:	238a      	movs	r3, #138	@ 0x8a
 8001fa8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101011;
 8001faa:	232b      	movs	r3, #43	@ 0x2b
 8001fac:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001fae:	7fbb      	ldrb	r3, [r7, #30]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	7f7b      	ldrb	r3, [r7, #29]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
 8001fc2:	f107 0214 	add.w	r2, r7, #20
 8001fc6:	f107 0118 	add.w	r1, r7, #24
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe ff7c 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 11 -> 6
	reg_address = 0b10001011;
 8001fd0:	238b      	movs	r3, #139	@ 0x8b
 8001fd2:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000110;
 8001fd4:	2306      	movs	r3, #6
 8001fd6:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001fd8:	7fbb      	ldrb	r3, [r7, #30]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	7f7b      	ldrb	r3, [r7, #29]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	f107 0214 	add.w	r2, r7, #20
 8001ff0:	f107 0118 	add.w	r1, r7, #24
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe ff67 	bl	8000ec8 <SPI_SEND_RECV>

	// 	Reg. 12 -> 54
	reg_address = 0b10001100;
 8001ffa:	238c      	movs	r3, #140	@ 0x8c
 8001ffc:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00110110;
 8001ffe:	2336      	movs	r3, #54	@ 0x36
 8002000:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002002:	7fbb      	ldrb	r3, [r7, #30]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7f7b      	ldrb	r3, [r7, #29]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002014:	7ffb      	ldrb	r3, [r7, #31]
 8002016:	f107 0214 	add.w	r2, r7, #20
 800201a:	f107 0118 	add.w	r1, r7, #24
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe ff52 	bl	8000ec8 <SPI_SEND_RECV>

	// 	Reg. 13 -> 0
	reg_address = 0b10001101;
 8002024:	238d      	movs	r3, #141	@ 0x8d
 8002026:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002028:	2300      	movs	r3, #0
 800202a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800202c:	7fbb      	ldrb	r3, [r7, #30]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	7f7b      	ldrb	r3, [r7, #29]
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	b29b      	uxth	r3, r3
 800203c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	f107 0214 	add.w	r2, r7, #20
 8002044:	f107 0118 	add.w	r1, r7, #24
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe ff3d 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	reg_address = 0b10001110;
 800204e:	238e      	movs	r3, #142	@ 0x8e
 8002050:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002052:	23ff      	movs	r3, #255	@ 0xff
 8002054:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002056:	7fbb      	ldrb	r3, [r7, #30]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	7f7b      	ldrb	r3, [r7, #29]
 800205e:	b21b      	sxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b21b      	sxth	r3, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002068:	7ffb      	ldrb	r3, [r7, #31]
 800206a:	f107 0214 	add.w	r2, r7, #20
 800206e:	f107 0118 	add.w	r1, r7, #24
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe ff28 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 15
	reg_address = 0b10001111;
 8002078:	238f      	movs	r3, #143	@ 0x8f
 800207a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 800207c:	23ff      	movs	r3, #255	@ 0xff
 800207e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002080:	7fbb      	ldrb	r3, [r7, #30]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	b21a      	sxth	r2, r3
 8002086:	7f7b      	ldrb	r3, [r7, #29]
 8002088:	b21b      	sxth	r3, r3
 800208a:	4313      	orrs	r3, r2
 800208c:	b21b      	sxth	r3, r3
 800208e:	b29b      	uxth	r3, r3
 8002090:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	f107 0214 	add.w	r2, r7, #20
 8002098:	f107 0118 	add.w	r1, r7, #24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7fe ff13 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 16
	reg_address = 0b10010000;
 80020a2:	2390      	movs	r3, #144	@ 0x90
 80020a4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80020a6:	23ff      	movs	r3, #255	@ 0xff
 80020a8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80020aa:	7fbb      	ldrb	r3, [r7, #30]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	7f7b      	ldrb	r3, [r7, #29]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80020bc:	7ffb      	ldrb	r3, [r7, #31]
 80020be:	f107 0214 	add.w	r2, r7, #20
 80020c2:	f107 0118 	add.w	r1, r7, #24
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fefe 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 17
	reg_address = 0b10010001;
 80020cc:	2391      	movs	r3, #145	@ 0x91
 80020ce:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80020d0:	23ff      	movs	r3, #255	@ 0xff
 80020d2:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80020d4:	7fbb      	ldrb	r3, [r7, #30]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	7f7b      	ldrb	r3, [r7, #29]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	f107 0214 	add.w	r2, r7, #20
 80020ec:	f107 0118 	add.w	r1, r7, #24
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe fee9 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 18
	reg_address = 0b10010010;
 80020f6:	2392      	movs	r3, #146	@ 0x92
 80020f8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80020fa:	23ff      	movs	r3, #255	@ 0xff
 80020fc:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80020fe:	7fbb      	ldrb	r3, [r7, #30]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	7f7b      	ldrb	r3, [r7, #29]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b21b      	sxth	r3, r3
 800210c:	b29b      	uxth	r3, r3
 800210e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	f107 0214 	add.w	r2, r7, #20
 8002116:	f107 0118 	add.w	r1, r7, #24
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fed4 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 19
	reg_address = 0b10010011;
 8002120:	2393      	movs	r3, #147	@ 0x93
 8002122:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002124:	23ff      	movs	r3, #255	@ 0xff
 8002126:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002128:	7fbb      	ldrb	r3, [r7, #30]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	b21a      	sxth	r2, r3
 800212e:	7f7b      	ldrb	r3, [r7, #29]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
 8002136:	b29b      	uxth	r3, r3
 8002138:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	f107 0214 	add.w	r2, r7, #20
 8002140:	f107 0118 	add.w	r1, r7, #24
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe febf 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 20
	reg_address = 0b10010100;
 800214a:	2394      	movs	r3, #148	@ 0x94
 800214c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 800214e:	23ff      	movs	r3, #255	@ 0xff
 8002150:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002152:	7fbb      	ldrb	r3, [r7, #30]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b21a      	sxth	r2, r3
 8002158:	7f7b      	ldrb	r3, [r7, #29]
 800215a:	b21b      	sxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b21b      	sxth	r3, r3
 8002160:	b29b      	uxth	r3, r3
 8002162:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002164:	7ffb      	ldrb	r3, [r7, #31]
 8002166:	f107 0214 	add.w	r2, r7, #20
 800216a:	f107 0118 	add.w	r1, r7, #24
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe feaa 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 21
	reg_address = 0b10010101;
 8002174:	2395      	movs	r3, #149	@ 0x95
 8002176:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002178:	23ff      	movs	r3, #255	@ 0xff
 800217a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800217c:	7fbb      	ldrb	r3, [r7, #30]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	7f7b      	ldrb	r3, [r7, #29]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21b      	sxth	r3, r3
 800218a:	b29b      	uxth	r3, r3
 800218c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	f107 0214 	add.w	r2, r7, #20
 8002194:	f107 0118 	add.w	r1, r7, #24
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fe95 	bl	8000ec8 <SPI_SEND_RECV>

	// Calibrate ADC
	HAL_Delay(100);
 800219e:	2064      	movs	r0, #100	@ 0x64
 80021a0:	f004 fd7e 	bl	8006ca0 <HAL_Delay>
	reg_address = 0b01010101;
 80021a4:	2355      	movs	r3, #85	@ 0x55
 80021a6:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80021a8:	2300      	movs	r3, #0
 80021aa:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80021ac:	7fbb      	ldrb	r3, [r7, #30]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	7f7b      	ldrb	r3, [r7, #29]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80021be:	7ffb      	ldrb	r3, [r7, #31]
 80021c0:	f107 0214 	add.w	r2, r7, #20
 80021c4:	f107 0118 	add.w	r1, r7, #24
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe fe7d 	bl	8000ec8 <SPI_SEND_RECV>

	for (int i = 0; i<9 ; i++){
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
 80021d2:	e017      	b.n	8002204 <INIT_RHD+0x45c>
		// Register 63 for DUMMY READ on BOOT
		reg_address = 0b11111111;
 80021d4:	23ff      	movs	r3, #255	@ 0xff
 80021d6:	77bb      	strb	r3, [r7, #30]
		reg_value = 0b00000000;
 80021d8:	2300      	movs	r3, #0
 80021da:	777b      	strb	r3, [r7, #29]
		tx_vector = (reg_address << 8) | reg_value;
 80021dc:	7fbb      	ldrb	r3, [r7, #30]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	7f7b      	ldrb	r3, [r7, #29]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	f107 0214 	add.w	r2, r7, #20
 80021f4:	f107 0118 	add.w	r1, r7, #24
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7fe fe65 	bl	8000ec8 <SPI_SEND_RECV>
	for (int i = 0; i<9 ; i++){
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	3301      	adds	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2b08      	cmp	r3, #8
 8002208:	dde4      	ble.n	80021d4 <INIT_RHD+0x42c>

	}

	//Read Register 59 MISO MARKER
	reg_address = 0b11111011;
 800220a:	23fb      	movs	r3, #251	@ 0xfb
 800220c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800220e:	2300      	movs	r3, #0
 8002210:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002212:	7fbb      	ldrb	r3, [r7, #30]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b21a      	sxth	r2, r3
 8002218:	7f7b      	ldrb	r3, [r7, #29]
 800221a:	b21b      	sxth	r3, r3
 800221c:	4313      	orrs	r3, r2
 800221e:	b21b      	sxth	r3, r3
 8002220:	b29b      	uxth	r3, r3
 8002222:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002224:	7ffb      	ldrb	r3, [r7, #31]
 8002226:	f107 0214 	add.w	r2, r7, #20
 800222a:	f107 0118 	add.w	r1, r7, #24
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fe4a 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002234:	8abb      	ldrh	r3, [r7, #20]
 8002236:	461a      	mov	r2, r3
 8002238:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002242:	23ff      	movs	r3, #255	@ 0xff
 8002244:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002246:	2300      	movs	r3, #0
 8002248:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800224a:	7fbb      	ldrb	r3, [r7, #30]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	b21a      	sxth	r2, r3
 8002250:	7f7b      	ldrb	r3, [r7, #29]
 8002252:	b21b      	sxth	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b21b      	sxth	r3, r3
 8002258:	b29b      	uxth	r3, r3
 800225a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800225c:	7ffb      	ldrb	r3, [r7, #31]
 800225e:	f107 0214 	add.w	r2, r7, #20
 8002262:	f107 0118 	add.w	r1, r7, #24
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fe2e 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 800226c:	8abb      	ldrh	r3, [r7, #20]
 800226e:	461a      	mov	r2, r3
 8002270:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 800227a:	23ff      	movs	r3, #255	@ 0xff
 800227c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800227e:	2300      	movs	r3, #0
 8002280:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002282:	7fbb      	ldrb	r3, [r7, #30]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	b21a      	sxth	r2, r3
 8002288:	7f7b      	ldrb	r3, [r7, #29]
 800228a:	b21b      	sxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b21b      	sxth	r3, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002294:	7ffb      	ldrb	r3, [r7, #31]
 8002296:	f107 0214 	add.w	r2, r7, #20
 800229a:	f107 0118 	add.w	r1, r7, #24
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fe12 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80022a4:	8abb      	ldrh	r3, [r7, #20]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - MISO MARKER :   %c - 0x%04X \r\n", (int)formated_value, formated_value);
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
 80022b4:	8b7a      	ldrh	r2, [r7, #26]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4899      	ldr	r0, [pc, #612]	@ (8002520 <INIT_RHD+0x778>)
 80022ba:	f01c fcdb 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 80022be:	4899      	ldr	r0, [pc, #612]	@ (8002524 <INIT_RHD+0x77c>)
 80022c0:	f01c fd48 	bl	801ed54 <puts>

	if (formated_value == 0x00){
 80022c4:	8b7b      	ldrh	r3, [r7, #26]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <INIT_RHD+0x534>
		bit_shifting = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		printf("Shifting Bit to 0 \r\n");
 80022d0:	4895      	ldr	r0, [pc, #596]	@ (8002528 <INIT_RHD+0x780>)
 80022d2:	f01c fd3f 	bl	801ed54 <puts>
		printf("------------------------------------------------  \r\n");
 80022d6:	4893      	ldr	r0, [pc, #588]	@ (8002524 <INIT_RHD+0x77c>)
 80022d8:	f01c fd3c 	bl	801ed54 <puts>
	}

	//Read Register 40
	reg_address = 0b11101000;
 80022dc:	23e8      	movs	r3, #232	@ 0xe8
 80022de:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80022e0:	2300      	movs	r3, #0
 80022e2:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80022e4:	7fbb      	ldrb	r3, [r7, #30]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	7f7b      	ldrb	r3, [r7, #29]
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	833b      	strh	r3, [r7, #24]
 	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
 80022f8:	f107 0214 	add.w	r2, r7, #20
 80022fc:	f107 0118 	add.w	r1, r7, #24
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe fde1 	bl	8000ec8 <SPI_SEND_RECV>

	//Read Register 41
	reg_address = 0b11101001;
 8002306:	23e9      	movs	r3, #233	@ 0xe9
 8002308:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800230a:	2300      	movs	r3, #0
 800230c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800230e:	7fbb      	ldrb	r3, [r7, #30]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21a      	sxth	r2, r3
 8002314:	7f7b      	ldrb	r3, [r7, #29]
 8002316:	b21b      	sxth	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b21b      	sxth	r3, r3
 800231c:	b29b      	uxth	r3, r3
 800231e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);;
 8002320:	7ffb      	ldrb	r3, [r7, #31]
 8002322:	f107 0214 	add.w	r2, r7, #20
 8002326:	f107 0118 	add.w	r1, r7, #24
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fdcc 	bl	8000ec8 <SPI_SEND_RECV>

	//Read Register 42
	reg_address = 0b11101010;
 8002330:	23ea      	movs	r3, #234	@ 0xea
 8002332:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002334:	2300      	movs	r3, #0
 8002336:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002338:	7fbb      	ldrb	r3, [r7, #30]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	7f7b      	ldrb	r3, [r7, #29]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b21b      	sxth	r3, r3
 8002346:	b29b      	uxth	r3, r3
 8002348:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	f107 0214 	add.w	r2, r7, #20
 8002350:	f107 0118 	add.w	r1, r7, #24
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe fdb7 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 800235a:	8abb      	ldrh	r3, [r7, #20]
 800235c:	461a      	mov	r2, r3
 800235e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be I :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002368:	8b7b      	ldrh	r3, [r7, #26]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	8b7b      	ldrh	r3, [r7, #26]
 8002370:	461a      	mov	r2, r3
 8002372:	486e      	ldr	r0, [pc, #440]	@ (800252c <INIT_RHD+0x784>)
 8002374:	f01c fc7e 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002378:	486a      	ldr	r0, [pc, #424]	@ (8002524 <INIT_RHD+0x77c>)
 800237a:	f01c fceb 	bl	801ed54 <puts>

	//Read Register 43
	reg_address = 0b11101011;
 800237e:	23eb      	movs	r3, #235	@ 0xeb
 8002380:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002382:	2300      	movs	r3, #0
 8002384:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002386:	7fbb      	ldrb	r3, [r7, #30]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21b      	sxth	r3, r3
 8002394:	b29b      	uxth	r3, r3
 8002396:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002398:	7ffb      	ldrb	r3, [r7, #31]
 800239a:	f107 0214 	add.w	r2, r7, #20
 800239e:	f107 0118 	add.w	r1, r7, #24
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fd90 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80023a8:	8abb      	ldrh	r3, [r7, #20]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 80023b6:	8b7b      	ldrh	r3, [r7, #26]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	8b7b      	ldrh	r3, [r7, #26]
 80023be:	461a      	mov	r2, r3
 80023c0:	485b      	ldr	r0, [pc, #364]	@ (8002530 <INIT_RHD+0x788>)
 80023c2:	f01c fc57 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 80023c6:	4857      	ldr	r0, [pc, #348]	@ (8002524 <INIT_RHD+0x77c>)
 80023c8:	f01c fcc4 	bl	801ed54 <puts>

	//Read Register 44
	reg_address = 0b11101100;
 80023cc:	23ec      	movs	r3, #236	@ 0xec
 80023ce:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80023d0:	2300      	movs	r3, #0
 80023d2:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80023d4:	7fbb      	ldrb	r3, [r7, #30]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21a      	sxth	r2, r3
 80023da:	7f7b      	ldrb	r3, [r7, #29]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
 80023e8:	f107 0214 	add.w	r2, r7, #20
 80023ec:	f107 0118 	add.w	r1, r7, #24
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7fe fd69 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80023f6:	8abb      	ldrh	r3, [r7, #20]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be T :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002404:	8b7b      	ldrh	r3, [r7, #26]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	8b7b      	ldrh	r3, [r7, #26]
 800240c:	461a      	mov	r2, r3
 800240e:	4849      	ldr	r0, [pc, #292]	@ (8002534 <INIT_RHD+0x78c>)
 8002410:	f01c fc30 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002414:	4843      	ldr	r0, [pc, #268]	@ (8002524 <INIT_RHD+0x77c>)
 8002416:	f01c fc9d 	bl	801ed54 <puts>


	//Read Register 63
	reg_address = 0b11111111;
 800241a:	23ff      	movs	r3, #255	@ 0xff
 800241c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800241e:	2300      	movs	r3, #0
 8002420:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002422:	7fbb      	ldrb	r3, [r7, #30]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	7f7b      	ldrb	r3, [r7, #29]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b21b      	sxth	r3, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002434:	7ffb      	ldrb	r3, [r7, #31]
 8002436:	f107 0214 	add.w	r2, r7, #20
 800243a:	f107 0118 	add.w	r1, r7, #24
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fd42 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002444:	8abb      	ldrh	r3, [r7, #20]
 8002446:	461a      	mov	r2, r3
 8002448:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be A :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002452:	8b7b      	ldrh	r3, [r7, #26]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	8b7b      	ldrh	r3, [r7, #26]
 800245a:	461a      	mov	r2, r3
 800245c:	4836      	ldr	r0, [pc, #216]	@ (8002538 <INIT_RHD+0x790>)
 800245e:	f01c fc09 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002462:	4830      	ldr	r0, [pc, #192]	@ (8002524 <INIT_RHD+0x77c>)
 8002464:	f01c fc76 	bl	801ed54 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002468:	23ff      	movs	r3, #255	@ 0xff
 800246a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800246c:	2300      	movs	r3, #0
 800246e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002470:	7fbb      	ldrb	r3, [r7, #30]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	b21a      	sxth	r2, r3
 8002476:	7f7b      	ldrb	r3, [r7, #29]
 8002478:	b21b      	sxth	r3, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	b21b      	sxth	r3, r3
 800247e:	b29b      	uxth	r3, r3
 8002480:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002482:	7ffb      	ldrb	r3, [r7, #31]
 8002484:	f107 0214 	add.w	r2, r7, #20
 8002488:	f107 0118 	add.w	r1, r7, #24
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe fd1b 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002492:	8abb      	ldrh	r3, [r7, #20]
 8002494:	461a      	mov	r2, r3
 8002496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 80024a0:	8b7b      	ldrh	r3, [r7, #26]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	8b7b      	ldrh	r3, [r7, #26]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4821      	ldr	r0, [pc, #132]	@ (8002530 <INIT_RHD+0x788>)
 80024ac:	f01c fbe2 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 80024b0:	481c      	ldr	r0, [pc, #112]	@ (8002524 <INIT_RHD+0x77c>)
 80024b2:	f01c fc4f 	bl	801ed54 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 80024b6:	23ff      	movs	r3, #255	@ 0xff
 80024b8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80024ba:	2300      	movs	r3, #0
 80024bc:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80024be:	7fbb      	ldrb	r3, [r7, #30]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	7f7b      	ldrb	r3, [r7, #29]
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
 80024d2:	f107 0214 	add.w	r2, r7, #20
 80024d6:	f107 0118 	add.w	r1, r7, #24
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fcf4 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80024e0:	8abb      	ldrh	r3, [r7, #20]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	837b      	strh	r3, [r7, #26]

	if (formated_value == 0x01){
 80024ee:	8b7b      	ldrh	r3, [r7, #26]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d102      	bne.n	80024fa <INIT_RHD+0x752>
		rhd_detected = rhd_versions[0];
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024f8:	e004      	b.n	8002504 <INIT_RHD+0x75c>
	}
	else if (formated_value == 0x02){
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d101      	bne.n	8002504 <INIT_RHD+0x75c>
		rhd_detected = rhd_versions[1];
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	printf("Char Receiving Data - CHIP ID : %s - 0x%04X \r\n", rhd_detected, formated_value);
 8002504:	8b7b      	ldrh	r3, [r7, #26]
 8002506:	461a      	mov	r2, r3
 8002508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <INIT_RHD+0x794>)
 800250c:	f01c fbb2 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002510:	4804      	ldr	r0, [pc, #16]	@ (8002524 <INIT_RHD+0x77c>)
 8002512:	f01c fc1f 	bl	801ed54 <puts>

 }
 8002516:	bf00      	nop
 8002518:	3730      	adds	r7, #48	@ 0x30
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	0802187c 	.word	0x0802187c
 8002524:	080218b4 	.word	0x080218b4
 8002528:	080218e8 	.word	0x080218e8
 800252c:	080218fc 	.word	0x080218fc
 8002530:	08021934 	.word	0x08021934
 8002534:	0802196c 	.word	0x0802196c
 8002538:	080219a4 	.word	0x080219a4
 800253c:	080219dc 	.word	0x080219dc

08002540 <binary_string>:
uint8_t reg_address;
uint8_t cmd_selector;
uint16_t lsb_value;


char* binary_string(uint32_t value) {
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    static char buffer[40];  // 32 bits + 7 spaces + null terminator
    int index = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

    for (int i = 31; i >= 0; i--) {
 800254c:	231f      	movs	r3, #31
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	e021      	b.n	8002596 <binary_string+0x56>
        buffer[index++] = (value & (1 << i)) ? '1' : '0';
 8002552:	2201      	movs	r2, #1
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <binary_string+0x28>
 8002564:	2131      	movs	r1, #49	@ 0x31
 8002566:	e000      	b.n	800256a <binary_string+0x2a>
 8002568:	2130      	movs	r1, #48	@ 0x30
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	4a10      	ldr	r2, [pc, #64]	@ (80025b4 <binary_string+0x74>)
 8002572:	54d1      	strb	r1, [r2, r3]
        if (i % 8 == 0 && i != 0) {
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	2b00      	cmp	r3, #0
 800257c:	d108      	bne.n	8002590 <binary_string+0x50>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <binary_string+0x50>
            buffer[index++] = ' ';
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60fa      	str	r2, [r7, #12]
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <binary_string+0x74>)
 800258c:	2120      	movs	r1, #32
 800258e:	54d1      	strb	r1, [r2, r3]
    for (int i = 31; i >= 0; i--) {
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3b01      	subs	r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	dada      	bge.n	8002552 <binary_string+0x12>
        }
    }
    buffer[index] = '\0';
 800259c:	4a05      	ldr	r2, [pc, #20]	@ (80025b4 <binary_string+0x74>)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4413      	add	r3, r2
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

    return buffer;
 80025a6:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <binary_string+0x74>)
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20000654 	.word	0x20000654

080025b8 <print_debug_binary>:

void print_debug_binary(uint16_t *rx_vector){
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	if (PRINT_DEBUG_BINARY){
		printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
		printf("------------------------------------------------  \r\n");
	}
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <print_configuration>:

void print_configuration(uint16_t tx_vector, uint8_t reg_address, uint16_t lsb_value) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b092      	sub	sp, #72	@ 0x48
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	80fb      	strh	r3, [r7, #6]
 80025d6:	460b      	mov	r3, r1
 80025d8:	717b      	strb	r3, [r7, #5]
 80025da:	4613      	mov	r3, r2
 80025dc:	807b      	strh	r3, [r7, #2]
    uint8_t cmd_selector = tx_vector >> 8; // Extract the upper 8 bits for command selector
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const char *cmd_type = "Unknown";
 80025e8:	4b63      	ldr	r3, [pc, #396]	@ (8002778 <print_configuration+0x1ac>)
 80025ea:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((cmd_selector & 0b11000000) == CONVERT_CMD) {
 80025ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80025f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <print_configuration+0x32>
        cmd_type = "CONVERT";
 80025f8:	4b60      	ldr	r3, [pc, #384]	@ (800277c <print_configuration+0x1b0>)
 80025fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80025fc:	e017      	b.n	800262e <print_configuration+0x62>
    } else if ((cmd_selector & 0b11000000) == WRITE_CMD) {
 80025fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002602:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002606:	2b80      	cmp	r3, #128	@ 0x80
 8002608:	d102      	bne.n	8002610 <print_configuration+0x44>
        cmd_type = "WRITE";
 800260a:	4b5d      	ldr	r3, [pc, #372]	@ (8002780 <print_configuration+0x1b4>)
 800260c:	643b      	str	r3, [r7, #64]	@ 0x40
 800260e:	e00e      	b.n	800262e <print_configuration+0x62>
    } else if ((cmd_selector & 0b11000000) == READ_CMD) {
 8002610:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002614:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002618:	2bc0      	cmp	r3, #192	@ 0xc0
 800261a:	d102      	bne.n	8002622 <print_configuration+0x56>
        cmd_type = "READ";
 800261c:	4b59      	ldr	r3, [pc, #356]	@ (8002784 <print_configuration+0x1b8>)
 800261e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002620:	e005      	b.n	800262e <print_configuration+0x62>
    } else if (cmd_selector == CLEAR_CMD) {
 8002622:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002626:	2b6a      	cmp	r3, #106	@ 0x6a
 8002628:	d101      	bne.n	800262e <print_configuration+0x62>
        cmd_type = "CLEAR";
 800262a:	4b57      	ldr	r3, [pc, #348]	@ (8002788 <print_configuration+0x1bc>)
 800262c:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    char flag_info[50] = "";
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	222e      	movs	r2, #46	@ 0x2e
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f01c fc84 	bl	801ef48 <memset>
    if (cmd_selector & 0b00100000) { // U_FLAG
 8002640:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <print_configuration+0xa2>
        strcat(flag_info, "U_FLAG");
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd fe25 	bl	80002a0 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	4413      	add	r3, r2
 8002660:	4a4a      	ldr	r2, [pc, #296]	@ (800278c <print_configuration+0x1c0>)
 8002662:	6810      	ldr	r0, [r2, #0]
 8002664:	6018      	str	r0, [r3, #0]
 8002666:	8891      	ldrh	r1, [r2, #4]
 8002668:	7992      	ldrb	r2, [r2, #6]
 800266a:	8099      	strh	r1, [r3, #4]
 800266c:	719a      	strb	r2, [r3, #6]
    }
    if (cmd_selector & 0b00010000) { // M_FLAG
 800266e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d020      	beq.n	80026bc <print_configuration+0xf0>
        if (flag_info[0]) strcat(flag_info, " | ");
 800267a:	7b3b      	ldrb	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <print_configuration+0xce>
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fe0b 	bl	80002a0 <strlen>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	4413      	add	r3, r2
 8002694:	4a3e      	ldr	r2, [pc, #248]	@ (8002790 <print_configuration+0x1c4>)
 8002696:	6810      	ldr	r0, [r2, #0]
 8002698:	6018      	str	r0, [r3, #0]
        strcat(flag_info, "M_FLAG");
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd fdfe 	bl	80002a0 <strlen>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	4413      	add	r3, r2
 80026ae:	4a39      	ldr	r2, [pc, #228]	@ (8002794 <print_configuration+0x1c8>)
 80026b0:	6810      	ldr	r0, [r2, #0]
 80026b2:	6018      	str	r0, [r3, #0]
 80026b4:	8891      	ldrh	r1, [r2, #4]
 80026b6:	7992      	ldrb	r2, [r2, #6]
 80026b8:	8099      	strh	r1, [r3, #4]
 80026ba:	719a      	strb	r2, [r3, #6]
    }
    if (cmd_selector & 0b00001000) { // D_FLAG
 80026bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <print_configuration+0x13e>
        if (flag_info[0]) strcat(flag_info, " | ");
 80026c8:	7b3b      	ldrb	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <print_configuration+0x11c>
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fde4 	bl	80002a0 <strlen>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4413      	add	r3, r2
 80026e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002790 <print_configuration+0x1c4>)
 80026e4:	6810      	ldr	r0, [r2, #0]
 80026e6:	6018      	str	r0, [r3, #0]
        strcat(flag_info, "D_FLAG");
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fdd7 	bl	80002a0 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4413      	add	r3, r2
 80026fc:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <print_configuration+0x1cc>)
 80026fe:	6810      	ldr	r0, [r2, #0]
 8002700:	6018      	str	r0, [r3, #0]
 8002702:	8891      	ldrh	r1, [r2, #4]
 8002704:	7992      	ldrb	r2, [r2, #6]
 8002706:	8099      	strh	r1, [r3, #4]
 8002708:	719a      	strb	r2, [r3, #6]
    }
    if (cmd_selector & 0b00000100) { // H_FLAG
 800270a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d020      	beq.n	8002758 <print_configuration+0x18c>
        if (flag_info[0]) strcat(flag_info, " | ");
 8002716:	7b3b      	ldrb	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <print_configuration+0x16a>
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fdbd 	bl	80002a0 <strlen>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4413      	add	r3, r2
 8002730:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <print_configuration+0x1c4>)
 8002732:	6810      	ldr	r0, [r2, #0]
 8002734:	6018      	str	r0, [r3, #0]
        strcat(flag_info, "H_FLAG");
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd fdb0 	bl	80002a0 <strlen>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4413      	add	r3, r2
 800274a:	4a14      	ldr	r2, [pc, #80]	@ (800279c <print_configuration+0x1d0>)
 800274c:	6810      	ldr	r0, [r2, #0]
 800274e:	6018      	str	r0, [r3, #0]
 8002750:	8891      	ldrh	r1, [r2, #4]
 8002752:	7992      	ldrb	r2, [r2, #6]
 8002754:	8099      	strh	r1, [r3, #4]
 8002756:	719a      	strb	r2, [r3, #6]
    }
    if (flag_info[0] == '\0') {
 8002758:	7b3b      	ldrb	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <print_configuration+0x1a2>
        strcpy(flag_info, "None");
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	4a0f      	ldr	r2, [pc, #60]	@ (80027a0 <print_configuration+0x1d4>)
 8002764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002768:	6018      	str	r0, [r3, #0]
 800276a:	3304      	adds	r3, #4
 800276c:	7019      	strb	r1, [r3, #0]
    if (PRINT_COMMAND_INFO){
    	printf("Command: %s | Register: %d | LSB : 0x%04X | Flags: %s \r\n", cmd_type, reg_address, lsb_value, flag_info);
		printf("------------------------------------------------  \r\n");
    }

}
 800276e:	bf00      	nop
 8002770:	3748      	adds	r7, #72	@ 0x48
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	08021a30 	.word	0x08021a30
 800277c:	08021a38 	.word	0x08021a38
 8002780:	08021a40 	.word	0x08021a40
 8002784:	08021a48 	.word	0x08021a48
 8002788:	08021a50 	.word	0x08021a50
 800278c:	08021a58 	.word	0x08021a58
 8002790:	08021a60 	.word	0x08021a60
 8002794:	08021a64 	.word	0x08021a64
 8002798:	08021a6c 	.word	0x08021a6c
 800279c:	08021a74 	.word	0x08021a74
 80027a0:	08021a7c 	.word	0x08021a7c

080027a4 <RHS2116_Read_Register>:


void RHS2116_Read_Register(SPI_HandleTypeDef *hspi, uint8_t Register){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	70fb      	strb	r3, [r7, #3]
	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 80027b0:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <RHS2116_Read_Register+0x6c>)
 80027b2:	22c0      	movs	r2, #192	@ 0xc0
 80027b4:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80027b6:	4a17      	ldr	r2, [pc, #92]	@ (8002814 <RHS2116_Read_Register+0x70>)
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b0000000000000000;
 80027bc:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <RHS2116_Read_Register+0x74>)
 80027be:	2200      	movs	r2, #0
 80027c0:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80027c2:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <RHS2116_Read_Register+0x6c>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <RHS2116_Read_Register+0x70>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <RHS2116_Read_Register+0x78>)
 80027d8:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80027da:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <RHS2116_Read_Register+0x74>)
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <RHS2116_Read_Register+0x78>)
 80027e0:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80027e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <RHS2116_Read_Register+0x7c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <RHS2116_Read_Register+0x80>)
 80027e8:	490c      	ldr	r1, [pc, #48]	@ (800281c <RHS2116_Read_Register+0x78>)
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fb6c 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <RHS2116_Read_Register+0x80>)
 80027f2:	f7ff fee1 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <RHS2116_Read_Register+0x78>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	4a06      	ldr	r2, [pc, #24]	@ (8002814 <RHS2116_Read_Register+0x70>)
 80027fc:	7811      	ldrb	r1, [r2, #0]
 80027fe:	4a06      	ldr	r2, [pc, #24]	@ (8002818 <RHS2116_Read_Register+0x74>)
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fee2 	bl	80025cc <print_configuration>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000651 	.word	0x20000651
 8002814:	20000650 	.word	0x20000650
 8002818:	20000652 	.word	0x20000652
 800281c:	20000648 	.word	0x20000648
 8002820:	20000008 	.word	0x20000008
 8002824:	2000064c 	.word	0x2000064c

08002828 <RHS2116_Clear_Command>:


void RHS2116_Clear_Command(SPI_HandleTypeDef *hspi){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	// Clear Command
	cmd_selector = CLEAR_CMD;
 8002830:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <RHS2116_Clear_Command+0x68>)
 8002832:	226a      	movs	r2, #106	@ 0x6a
 8002834:	701a      	strb	r2, [r3, #0]
	reg_address = 0b00000000;
 8002836:	4b17      	ldr	r3, [pc, #92]	@ (8002894 <RHS2116_Clear_Command+0x6c>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 800283c:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <RHS2116_Clear_Command+0x70>)
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <RHS2116_Clear_Command+0x68>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	b21a      	sxth	r2, r3
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <RHS2116_Clear_Command+0x6c>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <RHS2116_Clear_Command+0x74>)
 8002858:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800285a:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <RHS2116_Clear_Command+0x70>)
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <RHS2116_Clear_Command+0x74>)
 8002860:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <RHS2116_Clear_Command+0x78>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <RHS2116_Clear_Command+0x7c>)
 8002868:	490c      	ldr	r1, [pc, #48]	@ (800289c <RHS2116_Clear_Command+0x74>)
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fb2c 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <RHS2116_Clear_Command+0x7c>)
 8002872:	f7ff fea1 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <RHS2116_Clear_Command+0x74>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	4a06      	ldr	r2, [pc, #24]	@ (8002894 <RHS2116_Clear_Command+0x6c>)
 800287c:	7811      	ldrb	r1, [r2, #0]
 800287e:	4a06      	ldr	r2, [pc, #24]	@ (8002898 <RHS2116_Clear_Command+0x70>)
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fea2 	bl	80025cc <print_configuration>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000651 	.word	0x20000651
 8002894:	20000650 	.word	0x20000650
 8002898:	20000652 	.word	0x20000652
 800289c:	20000648 	.word	0x20000648
 80028a0:	20000008 	.word	0x20000008
 80028a4:	2000064c 	.word	0x2000064c

080028a8 <RHS2116_Disable_Stim>:


void RHS2116_Disable_Stim(SPI_HandleTypeDef *hspi, uint8_t Register){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
	// Register 32 - Write Disable Stim A
	// Register 33 - Write Disable Stim B
	cmd_selector = WRITE_CMD;
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <RHS2116_Disable_Stim+0x6c>)
 80028b6:	2280      	movs	r2, #128	@ 0x80
 80028b8:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <RHS2116_Disable_Stim+0x70>)
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b0000000000000000;
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <RHS2116_Disable_Stim+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <RHS2116_Disable_Stim+0x6c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	b21a      	sxth	r2, r3
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <RHS2116_Disable_Stim+0x70>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	4313      	orrs	r3, r2
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	b29a      	uxth	r2, r3
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <RHS2116_Disable_Stim+0x78>)
 80028dc:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80028de:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <RHS2116_Disable_Stim+0x74>)
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <RHS2116_Disable_Stim+0x78>)
 80028e4:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <RHS2116_Disable_Stim+0x7c>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002928 <RHS2116_Disable_Stim+0x80>)
 80028ec:	490c      	ldr	r1, [pc, #48]	@ (8002920 <RHS2116_Disable_Stim+0x78>)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe faea 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <RHS2116_Disable_Stim+0x80>)
 80028f6:	f7ff fe5f 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <RHS2116_Disable_Stim+0x78>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <RHS2116_Disable_Stim+0x70>)
 8002900:	7811      	ldrb	r1, [r2, #0]
 8002902:	4a06      	ldr	r2, [pc, #24]	@ (800291c <RHS2116_Disable_Stim+0x74>)
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fe60 	bl	80025cc <print_configuration>
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000651 	.word	0x20000651
 8002918:	20000650 	.word	0x20000650
 800291c:	20000652 	.word	0x20000652
 8002920:	20000648 	.word	0x20000648
 8002924:	20000008 	.word	0x20000008
 8002928:	2000064c 	.word	0x2000064c

0800292c <RHS2116_PowerUp_DCCouple_LowGain_Amp>:
	print_debug_binary(rx_vector);
	print_configuration(tx_vector[0], reg_address, lsb_value);
}


void RHS2116_PowerUp_DCCouple_LowGain_Amp(SPI_HandleTypeDef *hspi, uint8_t Register){
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
	// Register 38 - Power Up DC-couple low-gain amplifiers
	cmd_selector = WRITE_CMD;
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x70>)
 800293a:	2280      	movs	r2, #128	@ 0x80
 800293c:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 800293e:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x74>)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b1111111111111111;
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x78>)
 8002946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800294a:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x70>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	b21a      	sxth	r2, r3
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x74>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b21b      	sxth	r3, r3
 800295a:	4313      	orrs	r3, r2
 800295c:	b21b      	sxth	r3, r3
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 8002962:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x78>)
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 800296a:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800296c:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x80>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x84>)
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fe faa7 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800297a:	480d      	ldr	r0, [pc, #52]	@ (80029b0 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x84>)
 800297c:	f7ff fe1c 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x7c>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	4a06      	ldr	r2, [pc, #24]	@ (80029a0 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x74>)
 8002986:	7811      	ldrb	r1, [r2, #0]
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <RHS2116_PowerUp_DCCouple_LowGain_Amp+0x78>)
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe1d 	bl	80025cc <print_configuration>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000651 	.word	0x20000651
 80029a0:	20000650 	.word	0x20000650
 80029a4:	20000652 	.word	0x20000652
 80029a8:	20000648 	.word	0x20000648
 80029ac:	20000008 	.word	0x20000008
 80029b0:	2000064c 	.word	0x2000064c

080029b4 <RHS2116_Configure_ADC_Sampling_Rate>:


void RHS2116_Configure_ADC_Sampling_Rate(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t adc_buffer_bias, uint8_t mux_bias){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	461a      	mov	r2, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	70fb      	strb	r3, [r7, #3]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70bb      	strb	r3, [r7, #2]
 80029ca:	4613      	mov	r3, r2
 80029cc:	707b      	strb	r3, [r7, #1]
	// Register 0 - Configure the ADC and analog MUX for a total ADC sampling rate of... EXEMPLE : 480 kS/s ( 16 × 30 kS/s)
	cmd_selector = WRITE_CMD;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <RHS2116_Configure_ADC_Sampling_Rate+0x88>)
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80029d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a40 <RHS2116_Configure_ADC_Sampling_Rate+0x8c>)
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	7013      	strb	r3, [r2, #0]
	lsb_value = (adc_buffer_bias << 6) | mux_bias;
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	b21a      	sxth	r2, r3
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <RHS2116_Configure_ADC_Sampling_Rate+0x90>)
 80029ec:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <RHS2116_Configure_ADC_Sampling_Rate+0x88>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <RHS2116_Configure_ADC_Sampling_Rate+0x8c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 8002a04:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002a06:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <RHS2116_Configure_ADC_Sampling_Rate+0x90>)
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 8002a0c:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <RHS2116_Configure_ADC_Sampling_Rate+0x98>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4a0f      	ldr	r2, [pc, #60]	@ (8002a50 <RHS2116_Configure_ADC_Sampling_Rate+0x9c>)
 8002a14:	490c      	ldr	r1, [pc, #48]	@ (8002a48 <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fa56 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002a1c:	480c      	ldr	r0, [pc, #48]	@ (8002a50 <RHS2116_Configure_ADC_Sampling_Rate+0x9c>)
 8002a1e:	f7ff fdcb 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <RHS2116_Configure_ADC_Sampling_Rate+0x94>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	4a06      	ldr	r2, [pc, #24]	@ (8002a40 <RHS2116_Configure_ADC_Sampling_Rate+0x8c>)
 8002a28:	7811      	ldrb	r1, [r2, #0]
 8002a2a:	4a06      	ldr	r2, [pc, #24]	@ (8002a44 <RHS2116_Configure_ADC_Sampling_Rate+0x90>)
 8002a2c:	8812      	ldrh	r2, [r2, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fdcc 	bl	80025cc <print_configuration>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000651 	.word	0x20000651
 8002a40:	20000650 	.word	0x20000650
 8002a44:	20000652 	.word	0x20000652
 8002a48:	20000648 	.word	0x20000648
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	2000064c 	.word	0x2000064c

08002a54 <RHS2116_ADCFormat_DSPSetting_AuxOutput>:


void RHS2116_ADCFormat_DSPSetting_AuxOutput(SPI_HandleTypeDef *hspi, uint8_t Register,
		uint8_t DSPcutoffFreq, uint8_t DSPenable, uint8_t ABSmode, uint8_t TWOScomp, uint8_t weakMISO,
		uint8_t digout1_HiZ, uint8_t digout1, uint8_t digout2_HiZ, uint8_t digout2, uint8_t digoutOD){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	461a      	mov	r2, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	70fb      	strb	r3, [r7, #3]
 8002a66:	460b      	mov	r3, r1
 8002a68:	70bb      	strb	r3, [r7, #2]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	707b      	strb	r3, [r7, #1]

	// Register 1 - Set all auxiliary digital outputs to a high-impedance state. Set DSP high-pass filter to 4.665 Hz.
	// IN EXEMPLE : 0x051A --> 0bxxx 0 0 1 0 1 0 0 0 1 1010
	cmd_selector = WRITE_CMD;
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe0>)
 8002a70:	2280      	movs	r2, #128	@ 0x80
 8002a72:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002a74:	4a30      	ldr	r2, [pc, #192]	@ (8002b38 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe4>)
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	7013      	strb	r3, [r2, #0]
	lsb_value = (digoutOD << 12) | (digout2 << 11)    | (digout2_HiZ << 10)
 8002a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a7e:	031b      	lsls	r3, r3, #12
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a86:	02db      	lsls	r3, r3, #11
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b21a      	sxth	r2, r3
			  | (digout1 << 9)   | (digout1_HiZ << 8) | (weakMISO << 7)
 8002a9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	7f3b      	ldrb	r3, [r7, #28]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	7e3b      	ldrb	r3, [r7, #24]
 8002ab2:	01db      	lsls	r3, r3, #7
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b21a      	sxth	r2, r3
			  | (TWOScomp << 6)  | (ABSmode << 5)  | (DSPenable << 4) | DSPcutoffFreq;
 8002aba:	7d3b      	ldrb	r3, [r7, #20]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	7c3b      	ldrb	r3, [r7, #16]
 8002ac6:	015b      	lsls	r3, r3, #5
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	787b      	ldrb	r3, [r7, #1]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b21a      	sxth	r2, r3
 8002ad8:	78bb      	ldrb	r3, [r7, #2]
 8002ada:	b21b      	sxth	r3, r3
 8002adc:	4313      	orrs	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	b29a      	uxth	r2, r3
	lsb_value = (digoutOD << 12) | (digout2 << 11)    | (digout2_HiZ << 10)
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe8>)
 8002ae4:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002ae6:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe0>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	b21a      	sxth	r2, r3
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe4>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b21b      	sxth	r3, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 8002afc:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002afe:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe8>)
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 8002b04:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xf0>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xf4>)
 8002b0c:	490c      	ldr	r1, [pc, #48]	@ (8002b40 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe f9da 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002b14:	480c      	ldr	r0, [pc, #48]	@ (8002b48 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xf4>)
 8002b16:	f7ff fd4f 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xec>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	4a06      	ldr	r2, [pc, #24]	@ (8002b38 <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe4>)
 8002b20:	7811      	ldrb	r1, [r2, #0]
 8002b22:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <RHS2116_ADCFormat_DSPSetting_AuxOutput+0xe8>)
 8002b24:	8812      	ldrh	r2, [r2, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fd50 	bl	80025cc <print_configuration>


}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000651 	.word	0x20000651
 8002b38:	20000650 	.word	0x20000650
 8002b3c:	20000652 	.word	0x20000652
 8002b40:	20000648 	.word	0x20000648
 8002b44:	20000008 	.word	0x20000008
 8002b48:	2000064c 	.word	0x2000064c

08002b4c <RHS2116_Impedance_Check_Control>:


void RHS2116_Impedance_Check_Control(SPI_HandleTypeDef *hspi, uint8_t Register,
									uint8_t Zcheck_en, uint8_t Zcheck_scale, uint8_t Zcheck_load,
									uint8_t Zcheck_DAC_power, uint8_t Zcheck_select){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	70fb      	strb	r3, [r7, #3]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70bb      	strb	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	707b      	strb	r3, [r7, #1]
	// Register 2 - Power up DAC used for impedance testing, but disable impedance testing for now.
	// IN EXEMPLE : 0x0040 --> 0bxx 000000 x 1 0 00 xx 0
	cmd_selector = WRITE_CMD;
 8002b66:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <RHS2116_Impedance_Check_Control+0xa8>)
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002b6c:	4a22      	ldr	r2, [pc, #136]	@ (8002bf8 <RHS2116_Impedance_Check_Control+0xac>)
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	7013      	strb	r3, [r2, #0]
	lsb_value = (Zcheck_select << 8)  | (Zcheck_DAC_power << 6)  | (Zcheck_load << 5)  | (Zcheck_scale << 4) | Zcheck_en;
 8002b72:	7e3b      	ldrb	r3, [r7, #24]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	7d3b      	ldrb	r3, [r7, #20]
 8002b7a:	019b      	lsls	r3, r3, #6
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	7c3b      	ldrb	r3, [r7, #16]
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	78bb      	ldrb	r3, [r7, #2]
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <RHS2116_Impedance_Check_Control+0xb0>)
 8002ba2:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <RHS2116_Impedance_Check_Control+0xa8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	b21a      	sxth	r2, r3
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <RHS2116_Impedance_Check_Control+0xac>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <RHS2116_Impedance_Check_Control+0xb4>)
 8002bba:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <RHS2116_Impedance_Check_Control+0xb0>)
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <RHS2116_Impedance_Check_Control+0xb4>)
 8002bc2:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <RHS2116_Impedance_Check_Control+0xb8>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c08 <RHS2116_Impedance_Check_Control+0xbc>)
 8002bca:	490d      	ldr	r1, [pc, #52]	@ (8002c00 <RHS2116_Impedance_Check_Control+0xb4>)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7fe f97b 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002bd2:	480d      	ldr	r0, [pc, #52]	@ (8002c08 <RHS2116_Impedance_Check_Control+0xbc>)
 8002bd4:	f7ff fcf0 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <RHS2116_Impedance_Check_Control+0xb4>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	4a06      	ldr	r2, [pc, #24]	@ (8002bf8 <RHS2116_Impedance_Check_Control+0xac>)
 8002bde:	7811      	ldrb	r1, [r2, #0]
 8002be0:	4a06      	ldr	r2, [pc, #24]	@ (8002bfc <RHS2116_Impedance_Check_Control+0xb0>)
 8002be2:	8812      	ldrh	r2, [r2, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fcf1 	bl	80025cc <print_configuration>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000651 	.word	0x20000651
 8002bf8:	20000650 	.word	0x20000650
 8002bfc:	20000652 	.word	0x20000652
 8002c00:	20000648 	.word	0x20000648
 8002c04:	20000008 	.word	0x20000008
 8002c08:	2000064c 	.word	0x2000064c

08002c0c <RHS2116_Impedence_Check_DAC>:


void RHS2116_Impedence_Check_DAC(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t Zcheck_DAC){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	70bb      	strb	r3, [r7, #2]
	// Register 3 - Initialize impedance check DAC to midrange value
	// IN EXEMPLE : 0x0080 --> 0bxxxxxxxx 10000000
	cmd_selector = WRITE_CMD;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <RHS2116_Impedence_Check_DAC+0x74>)
 8002c1e:	2280      	movs	r2, #128	@ 0x80
 8002c20:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002c22:	4a18      	ldr	r2, [pc, #96]	@ (8002c84 <RHS2116_Impedence_Check_DAC+0x78>)
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	7013      	strb	r3, [r2, #0]
	lsb_value = Zcheck_DAC;
 8002c28:	78bb      	ldrb	r3, [r7, #2]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <RHS2116_Impedence_Check_DAC+0x7c>)
 8002c2e:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002c30:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <RHS2116_Impedence_Check_DAC+0x74>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	b21a      	sxth	r2, r3
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <RHS2116_Impedence_Check_DAC+0x78>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <RHS2116_Impedence_Check_DAC+0x80>)
 8002c46:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <RHS2116_Impedence_Check_DAC+0x7c>)
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <RHS2116_Impedence_Check_DAC+0x80>)
 8002c4e:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <RHS2116_Impedence_Check_DAC+0x84>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	@ (8002c94 <RHS2116_Impedence_Check_DAC+0x88>)
 8002c56:	490d      	ldr	r1, [pc, #52]	@ (8002c8c <RHS2116_Impedence_Check_DAC+0x80>)
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe f935 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002c5e:	480d      	ldr	r0, [pc, #52]	@ (8002c94 <RHS2116_Impedence_Check_DAC+0x88>)
 8002c60:	f7ff fcaa 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <RHS2116_Impedence_Check_DAC+0x80>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	4a06      	ldr	r2, [pc, #24]	@ (8002c84 <RHS2116_Impedence_Check_DAC+0x78>)
 8002c6a:	7811      	ldrb	r1, [r2, #0]
 8002c6c:	4a06      	ldr	r2, [pc, #24]	@ (8002c88 <RHS2116_Impedence_Check_DAC+0x7c>)
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fcab 	bl	80025cc <print_configuration>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000651 	.word	0x20000651
 8002c84:	20000650 	.word	0x20000650
 8002c88:	20000652 	.word	0x20000652
 8002c8c:	20000648 	.word	0x20000648
 8002c90:	20000008 	.word	0x20000008
 8002c94:	2000064c 	.word	0x2000064c

08002c98 <RHS2116_Amplifier_Bandwidth_Select_Upper>:


void RHS2116_Amplifier_Bandwidth_Select_Upper(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t RH_sel1, uint8_t RH_sel2){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	70fb      	strb	r3, [r7, #3]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70bb      	strb	r3, [r7, #2]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	707b      	strb	r3, [r7, #1]
	// Register 4 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0016 --> 0bxxxxx 00000 010110

	// Register 5 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0017 --> 0bxxxxx 00000 010111
	cmd_selector = WRITE_CMD;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x88>)
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d24 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x8c>)
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	7013      	strb	r3, [r2, #0]
	lsb_value = (RH_sel2 << 6) | RH_sel1;
 8002cbe:	787b      	ldrb	r3, [r7, #1]
 8002cc0:	019b      	lsls	r3, r3, #6
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	78bb      	ldrb	r3, [r7, #2]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x90>)
 8002cd0:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002cd2:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x88>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x8c>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 8002ce8:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x90>)
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 8002cf0:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x98>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d34 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x9c>)
 8002cf8:	490c      	ldr	r1, [pc, #48]	@ (8002d2c <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe f8e4 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002d00:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x9c>)
 8002d02:	f7ff fc59 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <RHS2116_Amplifier_Bandwidth_Select_Upper+0x94>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	4a06      	ldr	r2, [pc, #24]	@ (8002d24 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x8c>)
 8002d0c:	7811      	ldrb	r1, [r2, #0]
 8002d0e:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <RHS2116_Amplifier_Bandwidth_Select_Upper+0x90>)
 8002d10:	8812      	ldrh	r2, [r2, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fc5a 	bl	80025cc <print_configuration>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000651 	.word	0x20000651
 8002d24:	20000650 	.word	0x20000650
 8002d28:	20000652 	.word	0x20000652
 8002d2c:	20000648 	.word	0x20000648
 8002d30:	20000008 	.word	0x20000008
 8002d34:	2000064c 	.word	0x2000064c

08002d38 <RHS2116_Amplifier_Bandwidth_Select_Lower>:


void RHS2116_Amplifier_Bandwidth_Select_Lower(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t RL_sel1, uint8_t RL_sel2, uint8_t RL_sel3){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	70fb      	strb	r3, [r7, #3]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70bb      	strb	r3, [r7, #2]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	707b      	strb	r3, [r7, #1]
	// Register 6 - Set lower cutoff frequency of AC-coupled high-gain amplifiers to 5 Hz
	// IN EXEMPLE : 0x00A8 --> 0bxx 0 000001 0101000
	cmd_selector = WRITE_CMD;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <RHS2116_Amplifier_Bandwidth_Select_Lower+0x94>)
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x98>)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	7013      	strb	r3, [r2, #0]
	lsb_value = (RL_sel3 << 13) | (RL_sel2 << 7) | RL_sel1;
 8002d5e:	7c3b      	ldrb	r3, [r7, #16]
 8002d60:	035b      	lsls	r3, r3, #13
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	01db      	lsls	r3, r3, #7
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	78bb      	ldrb	r3, [r7, #2]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x9c>)
 8002d7a:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <RHS2116_Amplifier_Bandwidth_Select_Lower+0x94>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	b21a      	sxth	r2, r3
 8002d84:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x98>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 8002d92:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd4 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x9c>)
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 8002d9a:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa4>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa8>)
 8002da2:	490d      	ldr	r1, [pc, #52]	@ (8002dd8 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fe f88f 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002daa:	480d      	ldr	r0, [pc, #52]	@ (8002de0 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa8>)
 8002dac:	f7ff fc04 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <RHS2116_Amplifier_Bandwidth_Select_Lower+0xa0>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	4a06      	ldr	r2, [pc, #24]	@ (8002dd0 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x98>)
 8002db6:	7811      	ldrb	r1, [r2, #0]
 8002db8:	4a06      	ldr	r2, [pc, #24]	@ (8002dd4 <RHS2116_Amplifier_Bandwidth_Select_Lower+0x9c>)
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fc05 	bl	80025cc <print_configuration>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000651 	.word	0x20000651
 8002dd0:	20000650 	.word	0x20000650
 8002dd4:	20000652 	.word	0x20000652
 8002dd8:	20000648 	.word	0x20000648
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	2000064c 	.word	0x2000064c

08002de4 <RHS2116_Amplifier_Power_Up>:

void  RHS2116_Amplifier_Power_Up(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t AC_amp_power){
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
 8002df0:	4613      	mov	r3, r2
 8002df2:	803b      	strh	r3, [r7, #0]
	// Register 8 - Power up all AC-coupled high-gain amplifiers.
	// IN EXEMPLE : 0xFFFF
	cmd_selector = WRITE_CMD;
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <RHS2116_Amplifier_Power_Up+0x70>)
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002dfa:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <RHS2116_Amplifier_Power_Up+0x74>)
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	7013      	strb	r3, [r2, #0]
	lsb_value = AC_amp_power;
 8002e00:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <RHS2116_Amplifier_Power_Up+0x78>)
 8002e02:	883b      	ldrh	r3, [r7, #0]
 8002e04:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002e06:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <RHS2116_Amplifier_Power_Up+0x70>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b21a      	sxth	r2, r3
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <RHS2116_Amplifier_Power_Up+0x74>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <RHS2116_Amplifier_Power_Up+0x7c>)
 8002e1c:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <RHS2116_Amplifier_Power_Up+0x78>)
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <RHS2116_Amplifier_Power_Up+0x7c>)
 8002e24:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <RHS2116_Amplifier_Power_Up+0x80>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e68 <RHS2116_Amplifier_Power_Up+0x84>)
 8002e2c:	490c      	ldr	r1, [pc, #48]	@ (8002e60 <RHS2116_Amplifier_Power_Up+0x7c>)
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe f84a 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002e34:	480c      	ldr	r0, [pc, #48]	@ (8002e68 <RHS2116_Amplifier_Power_Up+0x84>)
 8002e36:	f7ff fbbf 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <RHS2116_Amplifier_Power_Up+0x7c>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	4a06      	ldr	r2, [pc, #24]	@ (8002e58 <RHS2116_Amplifier_Power_Up+0x74>)
 8002e40:	7811      	ldrb	r1, [r2, #0]
 8002e42:	4a06      	ldr	r2, [pc, #24]	@ (8002e5c <RHS2116_Amplifier_Power_Up+0x78>)
 8002e44:	8812      	ldrh	r2, [r2, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fbc0 	bl	80025cc <print_configuration>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000651 	.word	0x20000651
 8002e58:	20000650 	.word	0x20000650
 8002e5c:	20000652 	.word	0x20000652
 8002e60:	20000648 	.word	0x20000648
 8002e64:	20000008 	.word	0x20000008
 8002e68:	2000064c 	.word	0x2000064c

08002e6c <RHS2116_Fast_Settle>:

void RHS2116_Fast_Settle(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t amp_fast_settle){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	803b      	strh	r3, [r7, #0]
	// Register 10 - Turn off fast settle function on all channels. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <RHS2116_Fast_Settle+0x80>)
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002e82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <RHS2116_Fast_Settle+0x84>)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	7013      	strb	r3, [r2, #0]
	lsb_value = amp_fast_settle;
 8002e88:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef4 <RHS2116_Fast_Settle+0x88>)
 8002e8a:	883b      	ldrh	r3, [r7, #0]
 8002e8c:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002e8e:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <RHS2116_Fast_Settle+0x80>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b21a      	sxth	r2, r3
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <RHS2116_Fast_Settle+0x84>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <RHS2116_Fast_Settle+0x8c>)
 8002ea4:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <RHS2116_Fast_Settle+0x8c>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <RHS2116_Fast_Settle+0x8c>)
 8002eb2:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <RHS2116_Fast_Settle+0x88>)
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <RHS2116_Fast_Settle+0x8c>)
 8002eba:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <RHS2116_Fast_Settle+0x90>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f00 <RHS2116_Fast_Settle+0x94>)
 8002ec2:	490d      	ldr	r1, [pc, #52]	@ (8002ef8 <RHS2116_Fast_Settle+0x8c>)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fd ffff 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002eca:	480d      	ldr	r0, [pc, #52]	@ (8002f00 <RHS2116_Fast_Settle+0x94>)
 8002ecc:	f7ff fb74 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002ed0:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <RHS2116_Fast_Settle+0x8c>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	4a06      	ldr	r2, [pc, #24]	@ (8002ef0 <RHS2116_Fast_Settle+0x84>)
 8002ed6:	7811      	ldrb	r1, [r2, #0]
 8002ed8:	4a06      	ldr	r2, [pc, #24]	@ (8002ef4 <RHS2116_Fast_Settle+0x88>)
 8002eda:	8812      	ldrh	r2, [r2, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fb75 	bl	80025cc <print_configuration>

}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000651 	.word	0x20000651
 8002ef0:	20000650 	.word	0x20000650
 8002ef4:	20000652 	.word	0x20000652
 8002ef8:	20000648 	.word	0x20000648
 8002efc:	20000008 	.word	0x20000008
 8002f00:	2000064c 	.word	0x2000064c

08002f04 <RHS2116_Amplifier_Lower_Cutoff>:


void RHS2116_Amplifier_Lower_Cutoff(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t amp_fL_select){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
 8002f10:	4613      	mov	r3, r2
 8002f12:	803b      	strh	r3, [r7, #0]
	// Register 12 - Set all amplifiers to the lower cutoff frequency set by Register 6. Bits in this register can be set to zero during and immediately following stimulation
	// pulses to rapidly recover from stimulation artifacts. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0xFFFF --> 0xFFFF
	cmd_selector = WRITE_CMD;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <RHS2116_Amplifier_Lower_Cutoff+0x84>)
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	7013      	strb	r3, [r2, #0]
	lsb_value = amp_fL_select;
 8002f20:	4a1a      	ldr	r2, [pc, #104]	@ (8002f8c <RHS2116_Amplifier_Lower_Cutoff+0x88>)
 8002f22:	883b      	ldrh	r3, [r7, #0]
 8002f24:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002f26:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <RHS2116_Amplifier_Lower_Cutoff+0x80>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	b21a      	sxth	r2, r3
 8002f2e:	4b16      	ldr	r3, [pc, #88]	@ (8002f88 <RHS2116_Amplifier_Lower_Cutoff+0x84>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8002f3c:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 8002f3e:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8002f4a:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <RHS2116_Amplifier_Lower_Cutoff+0x88>)
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8002f52:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <RHS2116_Amplifier_Lower_Cutoff+0x90>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	@ (8002f98 <RHS2116_Amplifier_Lower_Cutoff+0x94>)
 8002f5a:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd ffb3 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8002f62:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <RHS2116_Amplifier_Lower_Cutoff+0x94>)
 8002f64:	f7ff fb28 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8002f68:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <RHS2116_Amplifier_Lower_Cutoff+0x8c>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	4a06      	ldr	r2, [pc, #24]	@ (8002f88 <RHS2116_Amplifier_Lower_Cutoff+0x84>)
 8002f6e:	7811      	ldrb	r1, [r2, #0]
 8002f70:	4a06      	ldr	r2, [pc, #24]	@ (8002f8c <RHS2116_Amplifier_Lower_Cutoff+0x88>)
 8002f72:	8812      	ldrh	r2, [r2, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fb29 	bl	80025cc <print_configuration>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000651 	.word	0x20000651
 8002f88:	20000650 	.word	0x20000650
 8002f8c:	20000652 	.word	0x20000652
 8002f90:	20000648 	.word	0x20000648
 8002f94:	20000008 	.word	0x20000008
 8002f98:	2000064c 	.word	0x2000064c

08002f9c <RHS2116_Stimulation_Step_Size>:


void RHS2116_Stimulation_Step_Size(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t step_sel1, uint8_t step_sel2, uint8_t step_sel3){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	70fb      	strb	r3, [r7, #3]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70bb      	strb	r3, [r7, #2]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	707b      	strb	r3, [r7, #1]
	// Register 34 - Set up a stimulation step size of 1 µA, giving us a stimulation range of ±255 µA on each channel.
	//IN EXEMPLE : 0x00E2 --> Obx 00 000001 1100010
	cmd_selector = WRITE_CMD;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <RHS2116_Stimulation_Step_Size+0x94>)
 8002fb8:	2280      	movs	r2, #128	@ 0x80
 8002fba:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <RHS2116_Stimulation_Step_Size+0x98>)
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	7013      	strb	r3, [r2, #0]
	lsb_value = (step_sel3 << 13) | (step_sel2 << 7) | (step_sel1);
 8002fc2:	7c3b      	ldrb	r3, [r7, #16]
 8002fc4:	035b      	lsls	r3, r3, #13
 8002fc6:	b21a      	sxth	r2, r3
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	01db      	lsls	r3, r3, #7
 8002fcc:	b21b      	sxth	r3, r3
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	b21a      	sxth	r2, r3
 8002fd2:	78bb      	ldrb	r3, [r7, #2]
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b21b      	sxth	r3, r3
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <RHS2116_Stimulation_Step_Size+0x9c>)
 8002fde:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8002fe0:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <RHS2116_Stimulation_Step_Size+0x94>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <RHS2116_Stimulation_Step_Size+0x98>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b21b      	sxth	r3, r3
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <RHS2116_Stimulation_Step_Size+0xa0>)
 8002ff6:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8003038 <RHS2116_Stimulation_Step_Size+0x9c>)
 8002ffa:	881a      	ldrh	r2, [r3, #0]
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <RHS2116_Stimulation_Step_Size+0xa0>)
 8002ffe:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <RHS2116_Stimulation_Step_Size+0xa4>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4a0f      	ldr	r2, [pc, #60]	@ (8003044 <RHS2116_Stimulation_Step_Size+0xa8>)
 8003006:	490d      	ldr	r1, [pc, #52]	@ (800303c <RHS2116_Stimulation_Step_Size+0xa0>)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fd ff5d 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800300e:	480d      	ldr	r0, [pc, #52]	@ (8003044 <RHS2116_Stimulation_Step_Size+0xa8>)
 8003010:	f7ff fad2 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003014:	4b09      	ldr	r3, [pc, #36]	@ (800303c <RHS2116_Stimulation_Step_Size+0xa0>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	4a06      	ldr	r2, [pc, #24]	@ (8003034 <RHS2116_Stimulation_Step_Size+0x98>)
 800301a:	7811      	ldrb	r1, [r2, #0]
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <RHS2116_Stimulation_Step_Size+0x9c>)
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fad3 	bl	80025cc <print_configuration>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000651 	.word	0x20000651
 8003034:	20000650 	.word	0x20000650
 8003038:	20000652 	.word	0x20000652
 800303c:	20000648 	.word	0x20000648
 8003040:	20000008 	.word	0x20000008
 8003044:	2000064c 	.word	0x2000064c

08003048 <RHS2116_Stimulation_Bias>:

void RHS2116_Stimulation_Bias(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t stim_nbias, uint8_t stim_pbias){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	70fb      	strb	r3, [r7, #3]
 800305a:	460b      	mov	r3, r1
 800305c:	70bb      	strb	r3, [r7, #2]
 800305e:	4613      	mov	r3, r2
 8003060:	707b      	strb	r3, [r7, #1]
	// Register 35 - Set stimulation bias voltages appropriate for a 1 µA step size.
	//IN EXEMPLE : 0x00AA --> Obxxxxxxxx 1010 1010
	cmd_selector = WRITE_CMD;
 8003062:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <RHS2116_Stimulation_Bias+0x88>)
 8003064:	2280      	movs	r2, #128	@ 0x80
 8003066:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8003068:	4a1a      	ldr	r2, [pc, #104]	@ (80030d4 <RHS2116_Stimulation_Bias+0x8c>)
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	7013      	strb	r3, [r2, #0]
	lsb_value = (stim_pbias << 4) | (stim_nbias);
 800306e:	787b      	ldrb	r3, [r7, #1]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	b21a      	sxth	r2, r3
 8003074:	78bb      	ldrb	r3, [r7, #2]
 8003076:	b21b      	sxth	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	b21b      	sxth	r3, r3
 800307c:	b29a      	uxth	r2, r3
 800307e:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <RHS2116_Stimulation_Bias+0x90>)
 8003080:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <RHS2116_Stimulation_Bias+0x88>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <RHS2116_Stimulation_Bias+0x8c>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21b      	sxth	r3, r3
 8003094:	b29a      	uxth	r2, r3
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <RHS2116_Stimulation_Bias+0x94>)
 8003098:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <RHS2116_Stimulation_Bias+0x90>)
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	4b0f      	ldr	r3, [pc, #60]	@ (80030dc <RHS2116_Stimulation_Bias+0x94>)
 80030a0:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80030a2:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <RHS2116_Stimulation_Bias+0x98>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4a0f      	ldr	r2, [pc, #60]	@ (80030e4 <RHS2116_Stimulation_Bias+0x9c>)
 80030a8:	490c      	ldr	r1, [pc, #48]	@ (80030dc <RHS2116_Stimulation_Bias+0x94>)
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd ff0c 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80030b0:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <RHS2116_Stimulation_Bias+0x9c>)
 80030b2:	f7ff fa81 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <RHS2116_Stimulation_Bias+0x94>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	4a06      	ldr	r2, [pc, #24]	@ (80030d4 <RHS2116_Stimulation_Bias+0x8c>)
 80030bc:	7811      	ldrb	r1, [r2, #0]
 80030be:	4a06      	ldr	r2, [pc, #24]	@ (80030d8 <RHS2116_Stimulation_Bias+0x90>)
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fa82 	bl	80025cc <print_configuration>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000651 	.word	0x20000651
 80030d4:	20000650 	.word	0x20000650
 80030d8:	20000652 	.word	0x20000652
 80030dc:	20000648 	.word	0x20000648
 80030e0:	20000008 	.word	0x20000008
 80030e4:	2000064c 	.word	0x2000064c

080030e8 <RHS2116_Voltage_Charge_Recovery>:

void RHS2116_Voltage_Charge_Recovery(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t charge_recovery_DAC){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
 80030f4:	4613      	mov	r3, r2
 80030f6:	70bb      	strb	r3, [r7, #2]
	// Register 36 - Set current-limited charge recovery target voltage to zero.
	//IN EXEMPLE : 0x0080 --> Obxxxxxxxx 10000000
	cmd_selector = WRITE_CMD;
 80030f8:	4b18      	ldr	r3, [pc, #96]	@ (800315c <RHS2116_Voltage_Charge_Recovery+0x74>)
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80030fe:	4a18      	ldr	r2, [pc, #96]	@ (8003160 <RHS2116_Voltage_Charge_Recovery+0x78>)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	7013      	strb	r3, [r2, #0]
	lsb_value = charge_recovery_DAC;
 8003104:	78bb      	ldrb	r3, [r7, #2]
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <RHS2116_Voltage_Charge_Recovery+0x7c>)
 800310a:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800310c:	4b13      	ldr	r3, [pc, #76]	@ (800315c <RHS2116_Voltage_Charge_Recovery+0x74>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	b21a      	sxth	r2, r3
 8003114:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <RHS2116_Voltage_Charge_Recovery+0x78>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b21b      	sxth	r3, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	b21b      	sxth	r3, r3
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <RHS2116_Voltage_Charge_Recovery+0x80>)
 8003122:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <RHS2116_Voltage_Charge_Recovery+0x7c>)
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <RHS2116_Voltage_Charge_Recovery+0x80>)
 800312a:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <RHS2116_Voltage_Charge_Recovery+0x84>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	@ (8003170 <RHS2116_Voltage_Charge_Recovery+0x88>)
 8003132:	490d      	ldr	r1, [pc, #52]	@ (8003168 <RHS2116_Voltage_Charge_Recovery+0x80>)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fd fec7 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800313a:	480d      	ldr	r0, [pc, #52]	@ (8003170 <RHS2116_Voltage_Charge_Recovery+0x88>)
 800313c:	f7ff fa3c 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <RHS2116_Voltage_Charge_Recovery+0x80>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <RHS2116_Voltage_Charge_Recovery+0x78>)
 8003146:	7811      	ldrb	r1, [r2, #0]
 8003148:	4a06      	ldr	r2, [pc, #24]	@ (8003164 <RHS2116_Voltage_Charge_Recovery+0x7c>)
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fa3d 	bl	80025cc <print_configuration>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000651 	.word	0x20000651
 8003160:	20000650 	.word	0x20000650
 8003164:	20000652 	.word	0x20000652
 8003168:	20000648 	.word	0x20000648
 800316c:	20000008 	.word	0x20000008
 8003170:	2000064c 	.word	0x2000064c

08003174 <RHS2116_Current_Charge_Recovery>:

void RHS2116_Current_Charge_Recovery(SPI_HandleTypeDef *hspi, uint8_t Register, uint8_t Imax_sel1, uint8_t Imax_sel2, uint8_t Imax_sel3){
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	70fb      	strb	r3, [r7, #3]
 8003186:	460b      	mov	r3, r1
 8003188:	70bb      	strb	r3, [r7, #2]
 800318a:	4613      	mov	r3, r2
 800318c:	707b      	strb	r3, [r7, #1]
	// Register 37 - Set charge recovery current limit to 1 nA.
	//IN EXEMPLE : 0x4F00 --> Obx 10 011110 0000000
	cmd_selector = WRITE_CMD;
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <RHS2116_Current_Charge_Recovery+0x94>)
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8003194:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <RHS2116_Current_Charge_Recovery+0x98>)
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	7013      	strb	r3, [r2, #0]
	lsb_value = (Imax_sel3 << 13) | (Imax_sel2 << 7) | (Imax_sel1);
 800319a:	7c3b      	ldrb	r3, [r7, #16]
 800319c:	035b      	lsls	r3, r3, #13
 800319e:	b21a      	sxth	r2, r3
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	01db      	lsls	r3, r3, #7
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	78bb      	ldrb	r3, [r7, #2]
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <RHS2116_Current_Charge_Recovery+0x9c>)
 80031b6:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80031b8:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <RHS2116_Current_Charge_Recovery+0x94>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	b21a      	sxth	r2, r3
 80031c0:	4b12      	ldr	r3, [pc, #72]	@ (800320c <RHS2116_Current_Charge_Recovery+0x98>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b21b      	sxth	r3, r3
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <RHS2116_Current_Charge_Recovery+0xa0>)
 80031ce:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <RHS2116_Current_Charge_Recovery+0x9c>)
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <RHS2116_Current_Charge_Recovery+0xa0>)
 80031d6:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <RHS2116_Current_Charge_Recovery+0xa4>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4a0f      	ldr	r2, [pc, #60]	@ (800321c <RHS2116_Current_Charge_Recovery+0xa8>)
 80031de:	490d      	ldr	r1, [pc, #52]	@ (8003214 <RHS2116_Current_Charge_Recovery+0xa0>)
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fd fe71 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80031e6:	480d      	ldr	r0, [pc, #52]	@ (800321c <RHS2116_Current_Charge_Recovery+0xa8>)
 80031e8:	f7ff f9e6 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <RHS2116_Current_Charge_Recovery+0xa0>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	4a06      	ldr	r2, [pc, #24]	@ (800320c <RHS2116_Current_Charge_Recovery+0x98>)
 80031f2:	7811      	ldrb	r1, [r2, #0]
 80031f4:	4a06      	ldr	r2, [pc, #24]	@ (8003210 <RHS2116_Current_Charge_Recovery+0x9c>)
 80031f6:	8812      	ldrh	r2, [r2, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f9e7 	bl	80025cc <print_configuration>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000651 	.word	0x20000651
 800320c:	20000650 	.word	0x20000650
 8003210:	20000652 	.word	0x20000652
 8003214:	20000648 	.word	0x20000648
 8003218:	20000008 	.word	0x20000008
 800321c:	2000064c 	.word	0x2000064c

08003220 <RHS2116_Stimulation_Turn_ON_OFF>:

void RHS2116_Stimulation_Turn_ON_OFF(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t stim_status){
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
 800322c:	4613      	mov	r3, r2
 800322e:	803b      	strh	r3, [r7, #0]
	// Register 42 - Turn all stimulators off. (This command does not take effect until the U flag is asserted since Register 42 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <RHS2116_Stimulation_Turn_ON_OFF+0x80>)
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8003236:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <RHS2116_Stimulation_Turn_ON_OFF+0x84>)
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	7013      	strb	r3, [r2, #0]
	lsb_value = stim_status;
 800323c:	4a1a      	ldr	r2, [pc, #104]	@ (80032a8 <RHS2116_Stimulation_Turn_ON_OFF+0x88>)
 800323e:	883b      	ldrh	r3, [r7, #0]
 8003240:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <RHS2116_Stimulation_Turn_ON_OFF+0x80>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	b21a      	sxth	r2, r3
 800324a:	4b16      	ldr	r3, [pc, #88]	@ (80032a4 <RHS2116_Stimulation_Turn_ON_OFF+0x84>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b21b      	sxth	r3, r3
 8003250:	4313      	orrs	r3, r2
 8003252:	b21b      	sxth	r3, r3
 8003254:	b29a      	uxth	r2, r3
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <RHS2116_Stimulation_Turn_ON_OFF+0x8c>)
 8003258:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <RHS2116_Stimulation_Turn_ON_OFF+0x8c>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003262:	b29a      	uxth	r2, r3
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <RHS2116_Stimulation_Turn_ON_OFF+0x8c>)
 8003266:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <RHS2116_Stimulation_Turn_ON_OFF+0x88>)
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <RHS2116_Stimulation_Turn_ON_OFF+0x8c>)
 800326e:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003270:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <RHS2116_Stimulation_Turn_ON_OFF+0x90>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4a0f      	ldr	r2, [pc, #60]	@ (80032b4 <RHS2116_Stimulation_Turn_ON_OFF+0x94>)
 8003276:	490d      	ldr	r1, [pc, #52]	@ (80032ac <RHS2116_Stimulation_Turn_ON_OFF+0x8c>)
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fd fe25 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800327e:	480d      	ldr	r0, [pc, #52]	@ (80032b4 <RHS2116_Stimulation_Turn_ON_OFF+0x94>)
 8003280:	f7ff f99a 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <RHS2116_Stimulation_Turn_ON_OFF+0x8c>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	4a06      	ldr	r2, [pc, #24]	@ (80032a4 <RHS2116_Stimulation_Turn_ON_OFF+0x84>)
 800328a:	7811      	ldrb	r1, [r2, #0]
 800328c:	4a06      	ldr	r2, [pc, #24]	@ (80032a8 <RHS2116_Stimulation_Turn_ON_OFF+0x88>)
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f99b 	bl	80025cc <print_configuration>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000651 	.word	0x20000651
 80032a4:	20000650 	.word	0x20000650
 80032a8:	20000652 	.word	0x20000652
 80032ac:	20000648 	.word	0x20000648
 80032b0:	20000008 	.word	0x20000008
 80032b4:	2000064c 	.word	0x2000064c

080032b8 <RHS2116_Stimulator_Polarity>:

void RHS2116_Stimulator_Polarity(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t stim_pol){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	803b      	strh	r3, [r7, #0]
	// Register 44 - Set all stimulators to negative polarity. (This command does not take effect until the U flag is asserted since Register 44 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <RHS2116_Stimulator_Polarity+0x80>)
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80032ce:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <RHS2116_Stimulator_Polarity+0x84>)
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	7013      	strb	r3, [r2, #0]
	lsb_value = stim_pol;
 80032d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003340 <RHS2116_Stimulator_Polarity+0x88>)
 80032d6:	883b      	ldrh	r3, [r7, #0]
 80032d8:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <RHS2116_Stimulator_Polarity+0x80>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	b21a      	sxth	r2, r3
 80032e2:	4b16      	ldr	r3, [pc, #88]	@ (800333c <RHS2116_Stimulator_Polarity+0x84>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <RHS2116_Stimulator_Polarity+0x8c>)
 80032f0:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 80032f2:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <RHS2116_Stimulator_Polarity+0x8c>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <RHS2116_Stimulator_Polarity+0x8c>)
 80032fe:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <RHS2116_Stimulator_Polarity+0x88>)
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <RHS2116_Stimulator_Polarity+0x8c>)
 8003306:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <RHS2116_Stimulator_Polarity+0x90>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <RHS2116_Stimulator_Polarity+0x94>)
 800330e:	490d      	ldr	r1, [pc, #52]	@ (8003344 <RHS2116_Stimulator_Polarity+0x8c>)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd fdd9 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003316:	480d      	ldr	r0, [pc, #52]	@ (800334c <RHS2116_Stimulator_Polarity+0x94>)
 8003318:	f7ff f94e 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <RHS2116_Stimulator_Polarity+0x8c>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	4a06      	ldr	r2, [pc, #24]	@ (800333c <RHS2116_Stimulator_Polarity+0x84>)
 8003322:	7811      	ldrb	r1, [r2, #0]
 8003324:	4a06      	ldr	r2, [pc, #24]	@ (8003340 <RHS2116_Stimulator_Polarity+0x88>)
 8003326:	8812      	ldrh	r2, [r2, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f94f 	bl	80025cc <print_configuration>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000651 	.word	0x20000651
 800333c:	20000650 	.word	0x20000650
 8003340:	20000652 	.word	0x20000652
 8003344:	20000648 	.word	0x20000648
 8003348:	20000008 	.word	0x20000008
 800334c:	2000064c 	.word	0x2000064c

08003350 <RHS2116_Charge_Recovery_Switches>:

void RHS2116_Charge_Recovery_Switches(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t charge_recovery_switch){
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	4613      	mov	r3, r2
 800335e:	803b      	strh	r3, [r7, #0]
	// Register 46 - Open all charge recovery switches. (This command does not take effect until the U flag is asserted since Register 46 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8003360:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <RHS2116_Charge_Recovery_Switches+0x80>)
 8003362:	2280      	movs	r2, #128	@ 0x80
 8003364:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8003366:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <RHS2116_Charge_Recovery_Switches+0x84>)
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	7013      	strb	r3, [r2, #0]
	lsb_value = charge_recovery_switch;
 800336c:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <RHS2116_Charge_Recovery_Switches+0x88>)
 800336e:	883b      	ldrh	r3, [r7, #0]
 8003370:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003372:	4b17      	ldr	r3, [pc, #92]	@ (80033d0 <RHS2116_Charge_Recovery_Switches+0x80>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b21a      	sxth	r2, r3
 800337a:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <RHS2116_Charge_Recovery_Switches+0x84>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b21b      	sxth	r3, r3
 8003380:	4313      	orrs	r3, r2
 8003382:	b21b      	sxth	r3, r3
 8003384:	b29a      	uxth	r2, r3
 8003386:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <RHS2116_Charge_Recovery_Switches+0x8c>)
 8003388:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 800338a:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <RHS2116_Charge_Recovery_Switches+0x8c>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <RHS2116_Charge_Recovery_Switches+0x8c>)
 8003396:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8003398:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <RHS2116_Charge_Recovery_Switches+0x88>)
 800339a:	881a      	ldrh	r2, [r3, #0]
 800339c:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <RHS2116_Charge_Recovery_Switches+0x8c>)
 800339e:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80033a0:	4b0f      	ldr	r3, [pc, #60]	@ (80033e0 <RHS2116_Charge_Recovery_Switches+0x90>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4a0f      	ldr	r2, [pc, #60]	@ (80033e4 <RHS2116_Charge_Recovery_Switches+0x94>)
 80033a6:	490d      	ldr	r1, [pc, #52]	@ (80033dc <RHS2116_Charge_Recovery_Switches+0x8c>)
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7fd fd8d 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80033ae:	480d      	ldr	r0, [pc, #52]	@ (80033e4 <RHS2116_Charge_Recovery_Switches+0x94>)
 80033b0:	f7ff f902 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <RHS2116_Charge_Recovery_Switches+0x8c>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	4a06      	ldr	r2, [pc, #24]	@ (80033d4 <RHS2116_Charge_Recovery_Switches+0x84>)
 80033ba:	7811      	ldrb	r1, [r2, #0]
 80033bc:	4a06      	ldr	r2, [pc, #24]	@ (80033d8 <RHS2116_Charge_Recovery_Switches+0x88>)
 80033be:	8812      	ldrh	r2, [r2, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f903 	bl	80025cc <print_configuration>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000651 	.word	0x20000651
 80033d4:	20000650 	.word	0x20000650
 80033d8:	20000652 	.word	0x20000652
 80033dc:	20000648 	.word	0x20000648
 80033e0:	20000008 	.word	0x20000008
 80033e4:	2000064c 	.word	0x2000064c

080033e8 <RHS2116_Current_Limited_Charge_Recovery>:

void RHS2116_Current_Limited_Charge_Recovery(SPI_HandleTypeDef *hspi, uint8_t Register, uint16_t CL_charge_recovery_enable){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
 80033f4:	4613      	mov	r3, r2
 80033f6:	803b      	strh	r3, [r7, #0]
	// Register 48 - Disable all current-limited charge recovery circuits. (This command does not take effect until the U flag is asserted since Register 48 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <RHS2116_Current_Limited_Charge_Recovery+0x80>)
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <RHS2116_Current_Limited_Charge_Recovery+0x84>)
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	7013      	strb	r3, [r2, #0]
	lsb_value = CL_charge_recovery_enable;
 8003404:	4a1a      	ldr	r2, [pc, #104]	@ (8003470 <RHS2116_Current_Limited_Charge_Recovery+0x88>)
 8003406:	883b      	ldrh	r3, [r7, #0]
 8003408:	8013      	strh	r3, [r2, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800340a:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <RHS2116_Current_Limited_Charge_Recovery+0x80>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b21a      	sxth	r2, r3
 8003412:	4b16      	ldr	r3, [pc, #88]	@ (800346c <RHS2116_Current_Limited_Charge_Recovery+0x84>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b21b      	sxth	r3, r3
 8003418:	4313      	orrs	r3, r2
 800341a:	b21b      	sxth	r3, r3
 800341c:	b29a      	uxth	r2, r3
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <RHS2116_Current_Limited_Charge_Recovery+0x8c>)
 8003420:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 8003422:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <RHS2116_Current_Limited_Charge_Recovery+0x8c>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <RHS2116_Current_Limited_Charge_Recovery+0x8c>)
 800342e:	801a      	strh	r2, [r3, #0]
	tx_vector[1] =  lsb_value;
 8003430:	4b0f      	ldr	r3, [pc, #60]	@ (8003470 <RHS2116_Current_Limited_Charge_Recovery+0x88>)
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <RHS2116_Current_Limited_Charge_Recovery+0x8c>)
 8003436:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003438:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <RHS2116_Current_Limited_Charge_Recovery+0x90>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4a0f      	ldr	r2, [pc, #60]	@ (800347c <RHS2116_Current_Limited_Charge_Recovery+0x94>)
 800343e:	490d      	ldr	r1, [pc, #52]	@ (8003474 <RHS2116_Current_Limited_Charge_Recovery+0x8c>)
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fd41 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003446:	480d      	ldr	r0, [pc, #52]	@ (800347c <RHS2116_Current_Limited_Charge_Recovery+0x94>)
 8003448:	f7ff f8b6 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <RHS2116_Current_Limited_Charge_Recovery+0x8c>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	4a06      	ldr	r2, [pc, #24]	@ (800346c <RHS2116_Current_Limited_Charge_Recovery+0x84>)
 8003452:	7811      	ldrb	r1, [r2, #0]
 8003454:	4a06      	ldr	r2, [pc, #24]	@ (8003470 <RHS2116_Current_Limited_Charge_Recovery+0x88>)
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f8b7 	bl	80025cc <print_configuration>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000651 	.word	0x20000651
 800346c:	20000650 	.word	0x20000650
 8003470:	20000652 	.word	0x20000652
 8003474:	20000648 	.word	0x20000648
 8003478:	20000008 	.word	0x20000008
 800347c:	2000064c 	.word	0x2000064c

08003480 <RHS2116_Negative_Stimulation_Current_Magnitude>:

void RHS2116_Negative_Stimulation_Current_Magnitude(SPI_HandleTypeDef *hspi, uint8_t negative_current_trim, uint8_t negative_current_magnitude){
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b08c      	sub	sp, #48	@ 0x30
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
 800348c:	4613      	mov	r3, r2
 800348e:	70bb      	strb	r3, [r7, #2]
	// Write to registers 64-79, setting the negative stimulation current magnitudes to zero and the current
	// trims to the center point. (These commands do not take effect until the U flag is asserted since Registers 64-79 are triggered registers.)
	// Register 64
	//IN EXEMPLE : 0x8000 --> 0b1000000000000000
	uint16_t register_addresses[] = {
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <RHS2116_Negative_Stimulation_Current_Magnitude+0xc0>)
 8003492:	f107 040c 	add.w	r4, r7, #12
 8003496:	461d      	mov	r5, r3
 8003498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		REGISTER_64, REGISTER_65, REGISTER_66, REGISTER_67, REGISTER_68, REGISTER_69,
		REGISTER_70, REGISTER_71, REGISTER_72, REGISTER_73, REGISTER_74, REGISTER_75,
		REGISTER_76, REGISTER_77, REGISTER_78, REGISTER_79
	};

	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a8:	e042      	b.n	8003530 <RHS2116_Negative_Stimulation_Current_Magnitude+0xb0>
	    reg_address = register_addresses[i];
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	3330      	adds	r3, #48	@ 0x30
 80034b0:	443b      	add	r3, r7
 80034b2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <RHS2116_Negative_Stimulation_Current_Magnitude+0xc4>)
 80034ba:	701a      	strb	r2, [r3, #0]
	    cmd_selector = WRITE_CMD;
 80034bc:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <RHS2116_Negative_Stimulation_Current_Magnitude+0xc8>)
 80034be:	2280      	movs	r2, #128	@ 0x80
 80034c0:	701a      	strb	r2, [r3, #0]
	    lsb_value = (negative_current_trim << 8) | negative_current_magnitude;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	b21a      	sxth	r2, r3
 80034c8:	78bb      	ldrb	r3, [r7, #2]
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <RHS2116_Negative_Stimulation_Current_Magnitude+0xcc>)
 80034d4:	801a      	strh	r2, [r3, #0]
	    tx_vector[0] = (cmd_selector << 8) | reg_address;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <RHS2116_Negative_Stimulation_Current_Magnitude+0xc8>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	b21a      	sxth	r2, r3
 80034de:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <RHS2116_Negative_Stimulation_Current_Magnitude+0xc4>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd0>)
 80034ec:	801a      	strh	r2, [r3, #0]
	    tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd0>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd0>)
 80034fa:	801a      	strh	r2, [r3, #0]
	    tx_vector[1] = lsb_value;
 80034fc:	4b13      	ldr	r3, [pc, #76]	@ (800354c <RHS2116_Negative_Stimulation_Current_Magnitude+0xcc>)
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd0>)
 8003502:	805a      	strh	r2, [r3, #2]
	    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd8>)
 800350a:	4911      	ldr	r1, [pc, #68]	@ (8003550 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd0>)
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fd fcdb 	bl	8000ec8 <SPI_SEND_RECV>
	    print_debug_binary(rx_vector);
 8003512:	4811      	ldr	r0, [pc, #68]	@ (8003558 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd8>)
 8003514:	f7ff f850 	bl	80025b8 <print_debug_binary>
	    print_configuration(tx_vector[0], reg_address, lsb_value);
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <RHS2116_Negative_Stimulation_Current_Magnitude+0xd0>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <RHS2116_Negative_Stimulation_Current_Magnitude+0xc4>)
 800351e:	7811      	ldrb	r1, [r2, #0]
 8003520:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <RHS2116_Negative_Stimulation_Current_Magnitude+0xcc>)
 8003522:	8812      	ldrh	r2, [r2, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff f851 	bl	80025cc <print_configuration>
	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 800352a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352c:	3301      	adds	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003532:	2b0f      	cmp	r3, #15
 8003534:	d9b9      	bls.n	80034aa <RHS2116_Negative_Stimulation_Current_Magnitude+0x2a>
	}
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3730      	adds	r7, #48	@ 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	08021a84 	.word	0x08021a84
 8003544:	20000650 	.word	0x20000650
 8003548:	20000651 	.word	0x20000651
 800354c:	20000652 	.word	0x20000652
 8003550:	20000648 	.word	0x20000648
 8003554:	20000008 	.word	0x20000008
 8003558:	2000064c 	.word	0x2000064c

0800355c <RHS2116_Positive_Stimulation_Current_Magnitude>:

void RHS2116_Positive_Stimulation_Current_Magnitude(SPI_HandleTypeDef *hspi, uint8_t positive_current_trim, uint8_t positive_current_magnitude){
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b08c      	sub	sp, #48	@ 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
 8003568:	4613      	mov	r3, r2
 800356a:	70bb      	strb	r3, [r7, #2]
	// Write to registers 96-111, setting the positive stimulation current magnitudes to zero and the current
	// trims to the center point. (These commands do not take effect until the U flag is asserted since Registers 96-111 are triggered registers.)
	//IN EXEMPLE : 0x8000 --> 0b1000000000000000
	uint16_t register_addresses[] = {
 800356c:	4b2b      	ldr	r3, [pc, #172]	@ (800361c <RHS2116_Positive_Stimulation_Current_Magnitude+0xc0>)
 800356e:	f107 040c 	add.w	r4, r7, #12
 8003572:	461d      	mov	r5, r3
 8003574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003578:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800357c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		REGISTER_96,  REGISTER_97,  REGISTER_98,  REGISTER_99,  REGISTER_100, REGISTER_101,
		REGISTER_102, REGISTER_103, REGISTER_104, REGISTER_105, REGISTER_106, REGISTER_107,
		REGISTER_108, REGISTER_109, REGISTER_110, REGISTER_111
	};

	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 8003580:	2300      	movs	r3, #0
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003584:	e042      	b.n	800360c <RHS2116_Positive_Stimulation_Current_Magnitude+0xb0>
	    reg_address = register_addresses[i];
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	3330      	adds	r3, #48	@ 0x30
 800358c:	443b      	add	r3, r7
 800358e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <RHS2116_Positive_Stimulation_Current_Magnitude+0xc4>)
 8003596:	701a      	strb	r2, [r3, #0]
	    cmd_selector = WRITE_CMD;
 8003598:	4b22      	ldr	r3, [pc, #136]	@ (8003624 <RHS2116_Positive_Stimulation_Current_Magnitude+0xc8>)
 800359a:	2280      	movs	r2, #128	@ 0x80
 800359c:	701a      	strb	r2, [r3, #0]
	    lsb_value = (positive_current_trim << 8) | positive_current_magnitude;
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	78bb      	ldrb	r3, [r7, #2]
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b21b      	sxth	r3, r3
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <RHS2116_Positive_Stimulation_Current_Magnitude+0xcc>)
 80035b0:	801a      	strh	r2, [r3, #0]
	    tx_vector[0] = (cmd_selector << 8) | reg_address;
 80035b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <RHS2116_Positive_Stimulation_Current_Magnitude+0xc8>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <RHS2116_Positive_Stimulation_Current_Magnitude+0xc4>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b21b      	sxth	r3, r3
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b19      	ldr	r3, [pc, #100]	@ (800362c <RHS2116_Positive_Stimulation_Current_Magnitude+0xd0>)
 80035c8:	801a      	strh	r2, [r3, #0]
	    tx_vector[0] |= (1 << U_FLAG); // TRIGGERING U_FLAG
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <RHS2116_Positive_Stimulation_Current_Magnitude+0xd0>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	4b15      	ldr	r3, [pc, #84]	@ (800362c <RHS2116_Positive_Stimulation_Current_Magnitude+0xd0>)
 80035d6:	801a      	strh	r2, [r3, #0]
	    tx_vector[1] = lsb_value;
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <RHS2116_Positive_Stimulation_Current_Magnitude+0xcc>)
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	4b13      	ldr	r3, [pc, #76]	@ (800362c <RHS2116_Positive_Stimulation_Current_Magnitude+0xd0>)
 80035de:	805a      	strh	r2, [r3, #2]
	    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <RHS2116_Positive_Stimulation_Current_Magnitude+0xd4>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4a13      	ldr	r2, [pc, #76]	@ (8003634 <RHS2116_Positive_Stimulation_Current_Magnitude+0xd8>)
 80035e6:	4911      	ldr	r1, [pc, #68]	@ (800362c <RHS2116_Positive_Stimulation_Current_Magnitude+0xd0>)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd fc6d 	bl	8000ec8 <SPI_SEND_RECV>
	    print_debug_binary(rx_vector);
 80035ee:	4811      	ldr	r0, [pc, #68]	@ (8003634 <RHS2116_Positive_Stimulation_Current_Magnitude+0xd8>)
 80035f0:	f7fe ffe2 	bl	80025b8 <print_debug_binary>
	    print_configuration(tx_vector[0], reg_address, lsb_value);
 80035f4:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <RHS2116_Positive_Stimulation_Current_Magnitude+0xd0>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	4a09      	ldr	r2, [pc, #36]	@ (8003620 <RHS2116_Positive_Stimulation_Current_Magnitude+0xc4>)
 80035fa:	7811      	ldrb	r1, [r2, #0]
 80035fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <RHS2116_Positive_Stimulation_Current_Magnitude+0xcc>)
 80035fe:	8812      	ldrh	r2, [r2, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe ffe3 	bl	80025cc <print_configuration>
	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 8003606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003608:	3301      	adds	r3, #1
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d9b9      	bls.n	8003586 <RHS2116_Positive_Stimulation_Current_Magnitude+0x2a>
	}
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	3730      	adds	r7, #48	@ 0x30
 8003618:	46bd      	mov	sp, r7
 800361a:	bdb0      	pop	{r4, r5, r7, pc}
 800361c:	08021aa4 	.word	0x08021aa4
 8003620:	20000650 	.word	0x20000650
 8003624:	20000651 	.word	0x20000651
 8003628:	20000652 	.word	0x20000652
 800362c:	20000648 	.word	0x20000648
 8003630:	20000008 	.word	0x20000008
 8003634:	2000064c 	.word	0x2000064c

08003638 <RHS2116_Read_INTAN>:

void RHS2116_Read_INTAN(SPI_HandleTypeDef *hspi){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	// Register 251 - Read I and N
	cmd_selector = READ_CMD;
 8003640:	4b86      	ldr	r3, [pc, #536]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 8003642:	22c0      	movs	r2, #192	@ 0xc0
 8003644:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_251;
 8003646:	4b86      	ldr	r3, [pc, #536]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 8003648:	22fb      	movs	r2, #251	@ 0xfb
 800364a:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 800364c:	4b85      	ldr	r3, [pc, #532]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 800364e:	2200      	movs	r2, #0
 8003650:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003652:	4b82      	ldr	r3, [pc, #520]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b21a      	sxth	r2, r3
 800365a:	4b81      	ldr	r3, [pc, #516]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b21b      	sxth	r3, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	b21b      	sxth	r3, r3
 8003664:	b29a      	uxth	r2, r3
 8003666:	4b80      	ldr	r3, [pc, #512]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003668:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800366a:	4b7e      	ldr	r3, [pc, #504]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	4b7e      	ldr	r3, [pc, #504]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003670:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003672:	4b7e      	ldr	r3, [pc, #504]	@ (800386c <RHS2116_Read_INTAN+0x234>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	4a7e      	ldr	r2, [pc, #504]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003678:	497b      	ldr	r1, [pc, #492]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fc24 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003680:	487b      	ldr	r0, [pc, #492]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003682:	f7fe ff99 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003686:	4b78      	ldr	r3, [pc, #480]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	4a75      	ldr	r2, [pc, #468]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 800368c:	7811      	ldrb	r1, [r2, #0]
 800368e:	4a75      	ldr	r2, [pc, #468]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe ff9a 	bl	80025cc <print_configuration>

	// Register 252 - Read T and A
	cmd_selector = READ_CMD;
 8003698:	4b70      	ldr	r3, [pc, #448]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 800369a:	22c0      	movs	r2, #192	@ 0xc0
 800369c:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_252;
 800369e:	4b70      	ldr	r3, [pc, #448]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80036a0:	22fc      	movs	r2, #252	@ 0xfc
 80036a2:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80036a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80036aa:	4b6c      	ldr	r3, [pc, #432]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b21b      	sxth	r3, r3
 80036b8:	4313      	orrs	r3, r2
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	b29a      	uxth	r2, r3
 80036be:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 80036c0:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80036c2:	4b68      	ldr	r3, [pc, #416]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	4b68      	ldr	r3, [pc, #416]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 80036c8:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80036ca:	4b68      	ldr	r3, [pc, #416]	@ (800386c <RHS2116_Read_INTAN+0x234>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	4a68      	ldr	r2, [pc, #416]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 80036d0:	4965      	ldr	r1, [pc, #404]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fbf8 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80036d8:	4865      	ldr	r0, [pc, #404]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 80036da:	f7fe ff6d 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80036de:	4b62      	ldr	r3, [pc, #392]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80036e4:	7811      	ldrb	r1, [r2, #0]
 80036e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 80036e8:	8812      	ldrh	r2, [r2, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe ff6e 	bl	80025cc <print_configuration>

	// Register 253 - Read N and 0
	cmd_selector = READ_CMD;
 80036f0:	4b5a      	ldr	r3, [pc, #360]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 80036f2:	22c0      	movs	r2, #192	@ 0xc0
 80036f4:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_253;
 80036f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80036f8:	22fd      	movs	r2, #253	@ 0xfd
 80036fa:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80036fc:	4b59      	ldr	r3, [pc, #356]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003702:	4b56      	ldr	r3, [pc, #344]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	b21a      	sxth	r2, r3
 800370a:	4b55      	ldr	r3, [pc, #340]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b21b      	sxth	r3, r3
 8003714:	b29a      	uxth	r2, r3
 8003716:	4b54      	ldr	r3, [pc, #336]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003718:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800371a:	4b52      	ldr	r3, [pc, #328]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	4b52      	ldr	r3, [pc, #328]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003720:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003722:	4b52      	ldr	r3, [pc, #328]	@ (800386c <RHS2116_Read_INTAN+0x234>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	4a52      	ldr	r2, [pc, #328]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003728:	494f      	ldr	r1, [pc, #316]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fbcc 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003730:	484f      	ldr	r0, [pc, #316]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003732:	f7fe ff41 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003736:	4b4c      	ldr	r3, [pc, #304]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	4a49      	ldr	r2, [pc, #292]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 800373c:	7811      	ldrb	r1, [r2, #0]
 800373e:	4a49      	ldr	r2, [pc, #292]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 8003740:	8812      	ldrh	r2, [r2, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe ff42 	bl	80025cc <print_configuration>
	printf("Should be I and N:  %c   %c\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8003748:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 800374a:	885b      	ldrh	r3, [r3, #2]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	b29b      	uxth	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4a47      	ldr	r2, [pc, #284]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003754:	8852      	ldrh	r2, [r2, #2]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	4619      	mov	r1, r3
 800375a:	4846      	ldr	r0, [pc, #280]	@ (8003874 <RHS2116_Read_INTAN+0x23c>)
 800375c:	f01b fa8a 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8003760:	4845      	ldr	r0, [pc, #276]	@ (8003878 <RHS2116_Read_INTAN+0x240>)
 8003762:	f01b faf7 	bl	801ed54 <puts>

	// Register 255 - Read Number of Channel and Die Revision (Read Dummy)
	cmd_selector = READ_CMD;
 8003766:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 8003768:	22c0      	movs	r2, #192	@ 0xc0
 800376a:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 800376c:	4b3c      	ldr	r3, [pc, #240]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 800376e:	22ff      	movs	r2, #255	@ 0xff
 8003770:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8003772:	4b3c      	ldr	r3, [pc, #240]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 8003774:	2200      	movs	r2, #0
 8003776:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003778:	4b38      	ldr	r3, [pc, #224]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	b21a      	sxth	r2, r3
 8003780:	4b37      	ldr	r3, [pc, #220]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b21b      	sxth	r3, r3
 8003786:	4313      	orrs	r3, r2
 8003788:	b21b      	sxth	r3, r3
 800378a:	b29a      	uxth	r2, r3
 800378c:	4b36      	ldr	r3, [pc, #216]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 800378e:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8003790:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003796:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003798:	4b34      	ldr	r3, [pc, #208]	@ (800386c <RHS2116_Read_INTAN+0x234>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4a34      	ldr	r2, [pc, #208]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 800379e:	4932      	ldr	r1, [pc, #200]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fd fb91 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80037a6:	4832      	ldr	r0, [pc, #200]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 80037a8:	f7fe ff06 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80037ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80037b2:	7811      	ldrb	r1, [r2, #0]
 80037b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 80037b6:	8812      	ldrh	r2, [r2, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe ff07 	bl	80025cc <print_configuration>
	printf("Should be T and A:  %c   %c\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 80037be:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 80037c0:	885b      	ldrh	r3, [r3, #2]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4a29      	ldr	r2, [pc, #164]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 80037ca:	8852      	ldrh	r2, [r2, #2]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	482a      	ldr	r0, [pc, #168]	@ (800387c <RHS2116_Read_INTAN+0x244>)
 80037d2:	f01b fa4f 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 80037d6:	4828      	ldr	r0, [pc, #160]	@ (8003878 <RHS2116_Read_INTAN+0x240>)
 80037d8:	f01b fabc 	bl	801ed54 <puts>

	// Register 255 - Read Number of Channel and Die Revision (Read Dummy)
	cmd_selector = READ_CMD;
 80037dc:	4b1f      	ldr	r3, [pc, #124]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 80037de:	22c0      	movs	r2, #192	@ 0xc0
 80037e0:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 80037e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80037e4:	22ff      	movs	r2, #255	@ 0xff
 80037e6:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80037e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80037ee:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <RHS2116_Read_INTAN+0x224>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	b21a      	sxth	r2, r3
 80037f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b21b      	sxth	r3, r3
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003804:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8003806:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 800380c:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800380e:	4b17      	ldr	r3, [pc, #92]	@ (800386c <RHS2116_Read_INTAN+0x234>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003814:	4914      	ldr	r1, [pc, #80]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fb56 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 800381c:	4814      	ldr	r0, [pc, #80]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 800381e:	f7fe fecb 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003822:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <RHS2116_Read_INTAN+0x230>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	4a0e      	ldr	r2, [pc, #56]	@ (8003860 <RHS2116_Read_INTAN+0x228>)
 8003828:	7811      	ldrb	r1, [r2, #0]
 800382a:	4a0e      	ldr	r2, [pc, #56]	@ (8003864 <RHS2116_Read_INTAN+0x22c>)
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fecc 	bl	80025cc <print_configuration>
	printf("Should be N and 0:  %c   %01X\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8003834:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003836:	885b      	ldrh	r3, [r3, #2]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	b29b      	uxth	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	4a0c      	ldr	r2, [pc, #48]	@ (8003870 <RHS2116_Read_INTAN+0x238>)
 8003840:	8852      	ldrh	r2, [r2, #2]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	4619      	mov	r1, r3
 8003846:	480e      	ldr	r0, [pc, #56]	@ (8003880 <RHS2116_Read_INTAN+0x248>)
 8003848:	f01b fa14 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 800384c:	480a      	ldr	r0, [pc, #40]	@ (8003878 <RHS2116_Read_INTAN+0x240>)
 800384e:	f01b fa81 	bl	801ed54 <puts>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000651 	.word	0x20000651
 8003860:	20000650 	.word	0x20000650
 8003864:	20000652 	.word	0x20000652
 8003868:	20000648 	.word	0x20000648
 800386c:	20000008 	.word	0x20000008
 8003870:	2000064c 	.word	0x2000064c
 8003874:	08021ac4 	.word	0x08021ac4
 8003878:	08021ae4 	.word	0x08021ae4
 800387c:	08021b18 	.word	0x08021b18
 8003880:	08021b38 	.word	0x08021b38

08003884 <RHS2116_Read_NumChannel_DieRevision>:

uint16_t RHS2116_Read_NumChannel_DieRevision(SPI_HandleTypeDef *hspi, uint8_t Register){
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
	// Register 254 - Read Number of Channel and Die Revision
	cmd_selector = READ_CMD;
 8003890:	4b50      	ldr	r3, [pc, #320]	@ (80039d4 <RHS2116_Read_NumChannel_DieRevision+0x150>)
 8003892:	22c0      	movs	r2, #192	@ 0xc0
 8003894:	701a      	strb	r2, [r3, #0]
	reg_address = Register;
 8003896:	4a50      	ldr	r2, [pc, #320]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	7013      	strb	r3, [r2, #0]
	lsb_value = 0b0000000000000000;
 800389c:	4b4f      	ldr	r3, [pc, #316]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 800389e:	2200      	movs	r2, #0
 80038a0:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80038a2:	4b4c      	ldr	r3, [pc, #304]	@ (80039d4 <RHS2116_Read_NumChannel_DieRevision+0x150>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	b21a      	sxth	r2, r3
 80038aa:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b21b      	sxth	r3, r3
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4b4a      	ldr	r3, [pc, #296]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 80038b8:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80038ba:	4b48      	ldr	r3, [pc, #288]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	4b48      	ldr	r3, [pc, #288]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 80038c0:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80038c2:	4b48      	ldr	r3, [pc, #288]	@ (80039e4 <RHS2116_Read_NumChannel_DieRevision+0x160>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4a48      	ldr	r2, [pc, #288]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 80038c8:	4945      	ldr	r1, [pc, #276]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fafc 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80038d0:	4845      	ldr	r0, [pc, #276]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 80038d2:	f7fe fe71 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80038d6:	4b42      	ldr	r3, [pc, #264]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	4a3f      	ldr	r2, [pc, #252]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 80038dc:	7811      	ldrb	r1, [r2, #0]
 80038de:	4a3f      	ldr	r2, [pc, #252]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fe72 	bl	80025cc <print_configuration>

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 80038e8:	4b3a      	ldr	r3, [pc, #232]	@ (80039d4 <RHS2116_Read_NumChannel_DieRevision+0x150>)
 80038ea:	22c0      	movs	r2, #192	@ 0xc0
 80038ec:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 80038ee:	4b3a      	ldr	r3, [pc, #232]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 80038f0:	22ff      	movs	r2, #255	@ 0xff
 80038f2:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80038f4:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80038fa:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <RHS2116_Read_NumChannel_DieRevision+0x150>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	b21a      	sxth	r2, r3
 8003902:	4b35      	ldr	r3, [pc, #212]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b21b      	sxth	r3, r3
 8003908:	4313      	orrs	r3, r2
 800390a:	b21b      	sxth	r3, r3
 800390c:	b29a      	uxth	r2, r3
 800390e:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003910:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8003912:	4b32      	ldr	r3, [pc, #200]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	4b32      	ldr	r3, [pc, #200]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003918:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800391a:	4b32      	ldr	r3, [pc, #200]	@ (80039e4 <RHS2116_Read_NumChannel_DieRevision+0x160>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	4a32      	ldr	r2, [pc, #200]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 8003920:	492f      	ldr	r1, [pc, #188]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fad0 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003928:	482f      	ldr	r0, [pc, #188]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 800392a:	f7fe fe45 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 800392e:	4b2c      	ldr	r3, [pc, #176]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	4a29      	ldr	r2, [pc, #164]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 8003934:	7811      	ldrb	r1, [r2, #0]
 8003936:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fe46 	bl	80025cc <print_configuration>

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8003940:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <RHS2116_Read_NumChannel_DieRevision+0x150>)
 8003942:	22c0      	movs	r2, #192	@ 0xc0
 8003944:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_255;
 8003946:	4b24      	ldr	r3, [pc, #144]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 8003948:	22ff      	movs	r2, #255	@ 0xff
 800394a:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 800394c:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 800394e:	2200      	movs	r2, #0
 8003950:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003952:	4b20      	ldr	r3, [pc, #128]	@ (80039d4 <RHS2116_Read_NumChannel_DieRevision+0x150>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	b21a      	sxth	r2, r3
 800395a:	4b1f      	ldr	r3, [pc, #124]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	b21b      	sxth	r3, r3
 8003960:	4313      	orrs	r3, r2
 8003962:	b21b      	sxth	r3, r3
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003968:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800396a:	4b1c      	ldr	r3, [pc, #112]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	4b1c      	ldr	r3, [pc, #112]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003970:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003972:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <RHS2116_Read_NumChannel_DieRevision+0x160>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	4a1c      	ldr	r2, [pc, #112]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 8003978:	4919      	ldr	r1, [pc, #100]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd faa4 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003980:	4819      	ldr	r0, [pc, #100]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 8003982:	f7fe fe19 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003986:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <RHS2116_Read_NumChannel_DieRevision+0x15c>)
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	4a13      	ldr	r2, [pc, #76]	@ (80039d8 <RHS2116_Read_NumChannel_DieRevision+0x154>)
 800398c:	7811      	ldrb	r1, [r2, #0]
 800398e:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <RHS2116_Read_NumChannel_DieRevision+0x158>)
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fe1a 	bl	80025cc <print_configuration>

    // Combine values into a 16-bit return value
    uint8_t die_revision = (rx_vector[1] >> 8) & 0xFF;
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 800399a:	885b      	ldrh	r3, [r3, #2]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	b29b      	uxth	r3, r3
 80039a0:	73fb      	strb	r3, [r7, #15]
    uint8_t num_channels = rx_vector[1] & 0xFF;
 80039a2:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <RHS2116_Read_NumChannel_DieRevision+0x164>)
 80039a4:	885b      	ldrh	r3, [r3, #2]
 80039a6:	73bb      	strb	r3, [r7, #14]

    printf("Die Revision : %d | #channel: %d\r\n", die_revision, num_channels);
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	7bba      	ldrb	r2, [r7, #14]
 80039ac:	4619      	mov	r1, r3
 80039ae:	480f      	ldr	r0, [pc, #60]	@ (80039ec <RHS2116_Read_NumChannel_DieRevision+0x168>)
 80039b0:	f01b f960 	bl	801ec74 <iprintf>
    printf("------------------------------------------------  \r\n");
 80039b4:	480e      	ldr	r0, [pc, #56]	@ (80039f0 <RHS2116_Read_NumChannel_DieRevision+0x16c>)
 80039b6:	f01b f9cd 	bl	801ed54 <puts>

    return ((uint16_t)die_revision << 8) | num_channels;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	b21a      	sxth	r2, r3
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	b21b      	sxth	r3, r3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b21b      	sxth	r3, r3
 80039c8:	b29b      	uxth	r3, r3
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000651 	.word	0x20000651
 80039d8:	20000650 	.word	0x20000650
 80039dc:	20000652 	.word	0x20000652
 80039e0:	20000648 	.word	0x20000648
 80039e4:	20000008 	.word	0x20000008
 80039e8:	2000064c 	.word	0x2000064c
 80039ec:	08021b58 	.word	0x08021b58
 80039f0:	08021ae4 	.word	0x08021ae4

080039f4 <RHS2116_Read_Chip_ID>:

uint8_t RHS2116_Read_Chip_ID(SPI_HandleTypeDef *hspi, uint8_t Register){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
    // Register 255 - Read Dummy
    cmd_selector = READ_CMD;
 8003a00:	4b49      	ldr	r3, [pc, #292]	@ (8003b28 <RHS2116_Read_Chip_ID+0x134>)
 8003a02:	22c0      	movs	r2, #192	@ 0xc0
 8003a04:	701a      	strb	r2, [r3, #0]
    reg_address = Register;
 8003a06:	4a49      	ldr	r2, [pc, #292]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	7013      	strb	r3, [r2, #0]
    lsb_value = 0b0000000000000000;
 8003a0c:	4b48      	ldr	r3, [pc, #288]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
    tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003a12:	4b45      	ldr	r3, [pc, #276]	@ (8003b28 <RHS2116_Read_Chip_ID+0x134>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b21a      	sxth	r2, r3
 8003a1a:	4b44      	ldr	r3, [pc, #272]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b21b      	sxth	r3, r3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a28:	801a      	strh	r2, [r3, #0]
    tx_vector[1] = lsb_value;
 8003a2a:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	4b41      	ldr	r3, [pc, #260]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a30:	805a      	strh	r2, [r3, #2]
    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003a32:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <RHS2116_Read_Chip_ID+0x144>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	4a41      	ldr	r2, [pc, #260]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003a38:	493e      	ldr	r1, [pc, #248]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fa44 	bl	8000ec8 <SPI_SEND_RECV>
    print_debug_binary(rx_vector);
 8003a40:	483e      	ldr	r0, [pc, #248]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003a42:	f7fe fdb9 	bl	80025b8 <print_debug_binary>
    print_configuration(tx_vector[0], reg_address, lsb_value);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	4a38      	ldr	r2, [pc, #224]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003a4c:	7811      	ldrb	r1, [r2, #0]
 8003a4e:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003a50:	8812      	ldrh	r2, [r2, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fdba 	bl	80025cc <print_configuration>

    // Register 255 - Read Dummy
    cmd_selector = READ_CMD;
 8003a58:	4b33      	ldr	r3, [pc, #204]	@ (8003b28 <RHS2116_Read_Chip_ID+0x134>)
 8003a5a:	22c0      	movs	r2, #192	@ 0xc0
 8003a5c:	701a      	strb	r2, [r3, #0]
    reg_address = Register;
 8003a5e:	4a33      	ldr	r2, [pc, #204]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	7013      	strb	r3, [r2, #0]
    lsb_value = 0b0000000000000000;
 8003a64:	4b32      	ldr	r3, [pc, #200]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	801a      	strh	r2, [r3, #0]
    tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b28 <RHS2116_Read_Chip_ID+0x134>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	b21a      	sxth	r2, r3
 8003a72:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b21b      	sxth	r3, r3
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a80:	801a      	strh	r2, [r3, #0]
    tx_vector[1] = lsb_value;
 8003a82:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a88:	805a      	strh	r2, [r3, #2]
    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <RHS2116_Read_Chip_ID+0x144>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003a90:	4928      	ldr	r1, [pc, #160]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fa18 	bl	8000ec8 <SPI_SEND_RECV>
    print_debug_binary(rx_vector);
 8003a98:	4828      	ldr	r0, [pc, #160]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003a9a:	f7fe fd8d 	bl	80025b8 <print_debug_binary>
    print_configuration(tx_vector[0], reg_address, lsb_value);
 8003a9e:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	4a22      	ldr	r2, [pc, #136]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003aa4:	7811      	ldrb	r1, [r2, #0]
 8003aa6:	4a22      	ldr	r2, [pc, #136]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003aa8:	8812      	ldrh	r2, [r2, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fd8e 	bl	80025cc <print_configuration>

    // Register 255 - Read Dummy
    cmd_selector = READ_CMD;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <RHS2116_Read_Chip_ID+0x134>)
 8003ab2:	22c0      	movs	r2, #192	@ 0xc0
 8003ab4:	701a      	strb	r2, [r3, #0]
    reg_address = Register;
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	7013      	strb	r3, [r2, #0]
    lsb_value = 0b0000000000000000;
 8003abc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
    tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8003ac2:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <RHS2116_Read_Chip_ID+0x134>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	b21a      	sxth	r2, r3
 8003aca:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	4b17      	ldr	r3, [pc, #92]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003ad8:	801a      	strh	r2, [r3, #0]
    tx_vector[1] = lsb_value;
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003ae0:	805a      	strh	r2, [r3, #2]
    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003ae2:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <RHS2116_Read_Chip_ID+0x144>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003ae8:	4912      	ldr	r1, [pc, #72]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd f9ec 	bl	8000ec8 <SPI_SEND_RECV>
    print_debug_binary(rx_vector);
 8003af0:	4812      	ldr	r0, [pc, #72]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003af2:	f7fe fd61 	bl	80025b8 <print_debug_binary>
    print_configuration(tx_vector[0], reg_address, lsb_value);
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <RHS2116_Read_Chip_ID+0x140>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	@ (8003b2c <RHS2116_Read_Chip_ID+0x138>)
 8003afc:	7811      	ldrb	r1, [r2, #0]
 8003afe:	4a0c      	ldr	r2, [pc, #48]	@ (8003b30 <RHS2116_Read_Chip_ID+0x13c>)
 8003b00:	8812      	ldrh	r2, [r2, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fd62 	bl	80025cc <print_configuration>

    // Extract Chip ID (lower 8 bits)
    uint8_t chip_id = rx_vector[1] & 0xFF;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <RHS2116_Read_Chip_ID+0x148>)
 8003b0a:	885b      	ldrh	r3, [r3, #2]
 8003b0c:	73fb      	strb	r3, [r7, #15]

    printf("Char Receiving Data - CHIP ID : %d \r\n", chip_id);
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	4619      	mov	r1, r3
 8003b12:	480b      	ldr	r0, [pc, #44]	@ (8003b40 <RHS2116_Read_Chip_ID+0x14c>)
 8003b14:	f01b f8ae 	bl	801ec74 <iprintf>
    printf("------------------------------------------------  \r\n");
 8003b18:	480a      	ldr	r0, [pc, #40]	@ (8003b44 <RHS2116_Read_Chip_ID+0x150>)
 8003b1a:	f01b f91b 	bl	801ed54 <puts>

    return chip_id;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000651 	.word	0x20000651
 8003b2c:	20000650 	.word	0x20000650
 8003b30:	20000652 	.word	0x20000652
 8003b34:	20000648 	.word	0x20000648
 8003b38:	20000008 	.word	0x20000008
 8003b3c:	2000064c 	.word	0x2000064c
 8003b40:	08021b7c 	.word	0x08021b7c
 8003b44:	08021ae4 	.word	0x08021ae4

08003b48 <RHS2116_Convert_Register>:


void RHS2116_Convert_Register(SPI_HandleTypeDef *hspi){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	for (int loop = 0 ; loop < 1; loop ++){
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e048      	b.n	8003be8 <RHS2116_Convert_Register+0xa0>
		// Register 0
		cmd_selector = CONVERT_CMD;
 8003b56:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <RHS2116_Convert_Register+0xb0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
		reg_address = REGISTER_0;
 8003b5c:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <RHS2116_Convert_Register+0xb4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
		lsb_value = 0b0000000000000000;
 8003b62:	4b27      	ldr	r3, [pc, #156]	@ (8003c00 <RHS2116_Convert_Register+0xb8>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	801a      	strh	r2, [r3, #0]
		tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8003b68:	4b23      	ldr	r3, [pc, #140]	@ (8003bf8 <RHS2116_Convert_Register+0xb0>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <RHS2116_Convert_Register+0xb4>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b21b      	sxth	r3, r3
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <RHS2116_Convert_Register+0xbc>)
 8003b7e:	801a      	strh	r2, [r3, #0]
		tx_vector[1] = lsb_value;
 8003b80:	4b1f      	ldr	r3, [pc, #124]	@ (8003c00 <RHS2116_Convert_Register+0xb8>)
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <RHS2116_Convert_Register+0xbc>)
 8003b86:	805a      	strh	r2, [r3, #2]
		SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003b88:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <RHS2116_Convert_Register+0xc0>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c0c <RHS2116_Convert_Register+0xc4>)
 8003b8e:	491d      	ldr	r1, [pc, #116]	@ (8003c04 <RHS2116_Convert_Register+0xbc>)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fd f999 	bl	8000ec8 <SPI_SEND_RECV>
	//	print_debug_binary(rx_vector);
	//	print_configuration(tx_vector[0], reg_address, lsb_value);
	//	printf("For CH %u Receiving Data : 0x%04X%04X | %s\r\n", REGISTER_0, rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");

		for (int i = 1; i<15; i++){
 8003b96:	2301      	movs	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	e01f      	b.n	8003bdc <RHS2116_Convert_Register+0x94>
			reg_address = REGISTER_63;
 8003b9c:	4b17      	ldr	r3, [pc, #92]	@ (8003bfc <RHS2116_Convert_Register+0xb4>)
 8003b9e:	223f      	movs	r2, #63	@ 0x3f
 8003ba0:	701a      	strb	r2, [r3, #0]
			lsb_value = 0b0000000000000000;
 8003ba2:	4b17      	ldr	r3, [pc, #92]	@ (8003c00 <RHS2116_Convert_Register+0xb8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
			tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8003ba8:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <RHS2116_Convert_Register+0xb0>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	b21a      	sxth	r2, r3
 8003bb0:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <RHS2116_Convert_Register+0xb4>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b21b      	sxth	r3, r3
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	b21b      	sxth	r3, r3
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b11      	ldr	r3, [pc, #68]	@ (8003c04 <RHS2116_Convert_Register+0xbc>)
 8003bbe:	801a      	strh	r2, [r3, #0]
			tx_vector[1] = lsb_value;
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <RHS2116_Convert_Register+0xb8>)
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <RHS2116_Convert_Register+0xbc>)
 8003bc6:	805a      	strh	r2, [r3, #2]
			SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <RHS2116_Convert_Register+0xc0>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8003c0c <RHS2116_Convert_Register+0xc4>)
 8003bce:	490d      	ldr	r1, [pc, #52]	@ (8003c04 <RHS2116_Convert_Register+0xbc>)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fd f979 	bl	8000ec8 <SPI_SEND_RECV>
		for (int i = 1; i<15; i++){
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b0e      	cmp	r3, #14
 8003be0:	dddc      	ble.n	8003b9c <RHS2116_Convert_Register+0x54>
	for (int loop = 0 ; loop < 1; loop ++){
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	ddb3      	ble.n	8003b56 <RHS2116_Convert_Register+0xe>
	//		print_configuration(tx_vector[0], reg_address, lsb_value);
	//		printf("For CH %u Receiving Data : 0x%04X%04X | %s\r\n", i, rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//		printf("------------------------------------------------  \r\n");
		}
	}
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000651 	.word	0x20000651
 8003bfc:	20000650 	.word	0x20000650
 8003c00:	20000652 	.word	0x20000652
 8003c04:	20000648 	.word	0x20000648
 8003c08:	20000008 	.word	0x20000008
 8003c0c:	2000064c 	.word	0x2000064c

08003c10 <INIT_RHS>:


void INIT_RHS(SPI_HandleTypeDef *hspi){
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b09a      	sub	sp, #104	@ 0x68
 8003c14:	af08      	add	r7, sp, #32
 8003c16:	6078      	str	r0, [r7, #4]

	//SET CS_PIN
	RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 8003c18:	4bcd      	ldr	r3, [pc, #820]	@ (8003f50 <INIT_RHS+0x340>)
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	619a      	str	r2, [r3, #24]

	RHS2116_Read_Register(hspi, REGISTER_255);
 8003c1e:	21ff      	movs	r1, #255	@ 0xff
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fe fdbf 	bl	80027a4 <RHS2116_Read_Register>
	RHS2116_Disable_Stim(hspi, REGISTER_32);
 8003c26:	2120      	movs	r1, #32
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fe fe3d 	bl	80028a8 <RHS2116_Disable_Stim>
	RHS2116_Disable_Stim(hspi, REGISTER_33);
 8003c2e:	2121      	movs	r1, #33	@ 0x21
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fe fe39 	bl	80028a8 <RHS2116_Disable_Stim>
	RHS2116_PowerUp_DCCouple_LowGain_Amp(hspi, REGISTER_38);
 8003c36:	2126      	movs	r1, #38	@ 0x26
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe fe77 	bl	800292c <RHS2116_PowerUp_DCCouple_LowGain_Amp>
	RHS2116_Clear_Command(hspi);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe fdf2 	bl	8002828 <RHS2116_Clear_Command>
	RHS2116_Configure_ADC_Sampling_Rate(hspi, REGISTER_0, 32, 40);
 8003c44:	2328      	movs	r3, #40	@ 0x28
 8003c46:	2220      	movs	r2, #32
 8003c48:	2100      	movs	r1, #0
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe feb2 	bl	80029b4 <RHS2116_Configure_ADC_Sampling_Rate>

	// Register 1 - Set all auxiliary digital outputs to a high-impedance state. Set DSP high-pass filter to 4.665 Hz.
	// IN EXEMPLE : 0x051A --> 0bxxx 0 0 1 0 1 0 0 0 1 1010
	uint8_t DSPcutoffFreq = 0b1010;
 8003c50:	230a      	movs	r3, #10
 8003c52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t DSPenable = 0b1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint8_t ABSmode = 0b0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t TWOScomp = 0b0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t weakMISO = 0b0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t digout1_HiZ = 0b1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	uint8_t digout1 = 0b0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	uint8_t digout2_HiZ = 0b1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	uint8_t digout2 = 0b0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t digoutOD = 0b0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	RHS2116_ADCFormat_DSPSetting_AuxOutput(hspi, REGISTER_1,
 8003c8c:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 8003c90:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003c94:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003c98:	9307      	str	r3, [sp, #28]
 8003c9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003c9e:	9306      	str	r3, [sp, #24]
 8003ca0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003caa:	9304      	str	r3, [sp, #16]
 8003cac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003cb6:	9302      	str	r3, [sp, #8]
 8003cb8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fe fec3 	bl	8002a54 <RHS2116_ADCFormat_DSPSetting_AuxOutput>
											DSPcutoffFreq, DSPenable,ABSmode, TWOScomp,weakMISO,
											digout1_HiZ, digout1, digout2_HiZ, digout2, digoutOD);
	// Register 2 - Power up DAC used for impedance testing, but disable impedance testing for now.
	// IN EXEMPLE : 0x0040 --> 0bxx 000000 x 1 0 00 xx 0
	uint8_t Zcheck_en = 0b0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t Zcheck_scale = 0b00;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t Zcheck_load = 0b0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t Zcheck_DAC_power = 0b1;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint8_t Zcheck_select = 0b000000;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	RHS2116_Impedance_Check_Control(hspi, REGISTER_2, Zcheck_en, Zcheck_scale, Zcheck_load, Zcheck_DAC_power, Zcheck_select);
 8003cec:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003cf0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003cf4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003cf8:	9302      	str	r3, [sp, #8]
 8003cfa:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	460b      	mov	r3, r1
 8003d08:	2102      	movs	r1, #2
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe ff1e 	bl	8002b4c <RHS2116_Impedance_Check_Control>

	// Register 3 - Initialize impedance check DAC to midrange value
	// IN EXEMPLE : 0x0080 --> 0bxxxxxxxx 10000000
	uint8_t Zcheck_DAC = 0b10000000;
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	RHS2116_Impedence_Check_DAC(hspi, REGISTER_3, Zcheck_DAC);
 8003d16:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2103      	movs	r1, #3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe ff74 	bl	8002c0c <RHS2116_Impedence_Check_DAC>

	// Register 4 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0016 --> 0bxxxxx 00000 010110
	uint8_t RH1_sel1  = 0b010110;
 8003d24:	2316      	movs	r3, #22
 8003d26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t RH1_sel2  = 0b00000;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	RHS2116_Amplifier_Bandwidth_Select_Upper(hspi, REGISTER_4, RH1_sel1, RH1_sel2);
 8003d30:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003d34:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003d38:	2104      	movs	r1, #4
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe ffac 	bl	8002c98 <RHS2116_Amplifier_Bandwidth_Select_Upper>

	// Register 5 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0017 --> 0bxxxxx 00000 010111
	uint8_t RH2_sel1  = 0b010111;
 8003d40:	2317      	movs	r3, #23
 8003d42:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t RH2_sel2  = 0b00000;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	RHS2116_Amplifier_Bandwidth_Select_Upper(hspi, REGISTER_5, RH2_sel1, RH2_sel2);
 8003d4c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003d50:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8003d54:	2105      	movs	r1, #5
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe ff9e 	bl	8002c98 <RHS2116_Amplifier_Bandwidth_Select_Upper>

	// Register 6 - Set lower cutoff frequency of AC-coupled high-gain amplifiers to 5 Hz
	// IN EXEMPLE : 0x00A8 --> 0bxx 0 000001 0101000
	uint8_t RL_Asel1  = 0b0101000;
 8003d5c:	2328      	movs	r3, #40	@ 0x28
 8003d5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t RL_Asel2  = 0b000001;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t RL_Asel3  = 0b0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	RHS2116_Amplifier_Bandwidth_Select_Lower(hspi, REGISTER_6, RL_Asel1, RL_Asel2, RL_Asel3);
 8003d6e:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8003d72:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003d76:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	2106      	movs	r1, #6
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fe ffd9 	bl	8002d38 <RHS2116_Amplifier_Bandwidth_Select_Lower>

	// Register 7 - Set alternate lower cutoff frequency (to be used for stimulation artifact recovery) to 1000 Hz
	// IN EXEMPLE : 0x000A --> 0bxx 0 000000 0001010
	uint8_t RL_Bsel1  = 0b0001010;
 8003d86:	230a      	movs	r3, #10
 8003d88:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	uint8_t RL_Bsel2  = 0b000000;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t RL_Bsel3  = 0b0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	RHS2116_Amplifier_Bandwidth_Select_Lower(hspi, REGISTER_7, RL_Bsel1, RL_Bsel2, RL_Bsel3);
 8003d98:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003d9c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003da0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	460b      	mov	r3, r1
 8003da8:	2107      	movs	r1, #7
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe ffc4 	bl	8002d38 <RHS2116_Amplifier_Bandwidth_Select_Lower>

	// Register 8 - Power up all AC-coupled high-gain amplifiers.
	// IN EXEMPLE : 0xFFFF
	uint16_t AC_amp_power  = 0b1111111111111111;
 8003db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003db4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	RHS2116_Amplifier_Power_Up(hspi, REGISTER_8, AC_amp_power);
 8003db6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003db8:	461a      	mov	r2, r3
 8003dba:	2108      	movs	r1, #8
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff f811 	bl	8002de4 <RHS2116_Amplifier_Power_Up>

	// Register 10 - Turn off fast settle function on all channels. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0x0000
	uint16_t amp_fast_settle  = 0b0000000000000000;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
	RHS2116_Fast_Settle(hspi, REGISTER_10, amp_fast_settle);
 8003dc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003dc8:	461a      	mov	r2, r3
 8003dca:	210a      	movs	r1, #10
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff f84d 	bl	8002e6c <RHS2116_Fast_Settle>

	// Register 12 - Set all amplifiers to the lower cutoff frequency set by Register 6. Bits in this register can be set to zero during and immediately following stimulation
	// pulses to rapidly recover from stimulation artifacts. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0xFFFF --> 0xFFFF
	uint16_t amp_fL_select  = 0b1111111111111111;
 8003dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dd6:	853b      	strh	r3, [r7, #40]	@ 0x28
	RHS2116_Amplifier_Lower_Cutoff(hspi, REGISTER_12, amp_fL_select);
 8003dd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003dda:	461a      	mov	r2, r3
 8003ddc:	210c      	movs	r1, #12
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff f890 	bl	8002f04 <RHS2116_Amplifier_Lower_Cutoff>

	// Register 34 - Set up a stimulation step size of 1 µA, giving us a stimulation range of ±255 µA on each channel.
	//IN EXEMPLE : 0x00E2 --> Obx 00 000001 1100010
	uint8_t step_sel1 = 0b1100010;
 8003de4:	2362      	movs	r3, #98	@ 0x62
 8003de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t step_sel2 = 0b000001;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t step_sel3 = 0b00;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	RHS2116_Stimulation_Step_Size(hspi, REGISTER_34, step_sel1, step_sel2, step_sel3);
 8003df6:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8003dfa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003dfe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	460b      	mov	r3, r1
 8003e06:	2122      	movs	r1, #34	@ 0x22
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff f8c7 	bl	8002f9c <RHS2116_Stimulation_Step_Size>

	// Register 35 - Set stimulation bias voltages appropriate for a 1 µA step size.
	//IN EXEMPLE : 0x00AA --> Obxxxxxxxx 1010 1010
	uint8_t stim_nbias = 0b1010;
 8003e0e:	230a      	movs	r3, #10
 8003e10:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stim_pbias = 0b1010;
 8003e14:	230a      	movs	r3, #10
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	RHS2116_Stimulation_Bias(hspi, REGISTER_35, stim_nbias, stim_pbias);
 8003e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003e22:	2123      	movs	r1, #35	@ 0x23
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff f90f 	bl	8003048 <RHS2116_Stimulation_Bias>

	// Register 36 - Set current-limited charge recovery target voltage to zero.
	//IN EXEMPLE : 0x0080 --> Obxxxxxxxx 10000000
	uint8_t charge_recovery_DAC = 0b10000000;
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	RHS2116_Voltage_Charge_Recovery(hspi, REGISTER_36, charge_recovery_DAC);
 8003e30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003e34:	461a      	mov	r2, r3
 8003e36:	2124      	movs	r1, #36	@ 0x24
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff f955 	bl	80030e8 <RHS2116_Voltage_Charge_Recovery>

	// Register 37 - Set charge recovery current limit to 1 nA.
	//IN EXEMPLE : 0x4F00 --> Obx 10 011110 0000000
	uint8_t Imax_sel1 = 0b0000000;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t Imax_sel2 = 0b011110;
 8003e44:	231e      	movs	r3, #30
 8003e46:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t Imax_sel3 = 0b10;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	77fb      	strb	r3, [r7, #31]
	RHS2116_Current_Charge_Recovery(hspi, REGISTER_37, Imax_sel1, Imax_sel2, Imax_sel3);
 8003e4e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003e52:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	2125      	movs	r1, #37	@ 0x25
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff f988 	bl	8003174 <RHS2116_Current_Charge_Recovery>

	// Register 42 - Turn all stimulators off. (This command does not take effect until the U flag is asserted since Register 42 is a triggered register.)
	//IN EXEMPLE : 0x0000
	uint16_t stim_status = 0x0000;
 8003e64:	2300      	movs	r3, #0
 8003e66:	83bb      	strh	r3, [r7, #28]
	RHS2116_Stimulation_Turn_ON_OFF(hspi, REGISTER_42, stim_status);
 8003e68:	8bbb      	ldrh	r3, [r7, #28]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	212a      	movs	r1, #42	@ 0x2a
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff f9d6 	bl	8003220 <RHS2116_Stimulation_Turn_ON_OFF>

	// Register 44 - Set all stimulators to negative polarity. (This command does not take effect until the U flag is asserted since Register 44 is a triggered register.)
	//IN EXEMPLE : 0x0000
	uint16_t stim_pol = 0x0000;
 8003e74:	2300      	movs	r3, #0
 8003e76:	837b      	strh	r3, [r7, #26]
	RHS2116_Stimulator_Polarity(hspi, REGISTER_44, stim_pol);
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	212c      	movs	r1, #44	@ 0x2c
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fa1a 	bl	80032b8 <RHS2116_Stimulator_Polarity>

	// Register 46 - Open all charge recovery switches. (This command does not take effect until the U flag is asserted since Register 46 is a triggered register.)
	//IN EXEMPLE : 0x0000
	uint16_t charge_recovery_switch = 0x0000;
 8003e84:	2300      	movs	r3, #0
 8003e86:	833b      	strh	r3, [r7, #24]
	RHS2116_Charge_Recovery_Switches(hspi, REGISTER_46, charge_recovery_switch);
 8003e88:	8b3b      	ldrh	r3, [r7, #24]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	212e      	movs	r1, #46	@ 0x2e
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fa5e 	bl	8003350 <RHS2116_Charge_Recovery_Switches>

	// Register 48 - Disable all current-limited charge recovery circuits. (This command does not take effect until the U flag is asserted since Register 48 is a triggered register.)
	//IN EXEMPLE : 0x0000
	uint16_t CL_charge_recovery_enable = 0x0000;
 8003e94:	2300      	movs	r3, #0
 8003e96:	82fb      	strh	r3, [r7, #22]
	RHS2116_Current_Limited_Charge_Recovery(hspi, REGISTER_48, CL_charge_recovery_enable);
 8003e98:	8afb      	ldrh	r3, [r7, #22]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2130      	movs	r1, #48	@ 0x30
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff faa2 	bl	80033e8 <RHS2116_Current_Limited_Charge_Recovery>

	// Write to registers 64-79, setting the negative stimulation current magnitudes to zero and the current
	// trims to the center point. (These commands do not take effect until the U flag is asserted since Registers 64-79 are triggered registers.)
	//IN EXEMPLE : 0x8000 --> 0b1000000000000000
	// Define the common values for negative current trim and magnitude
	uint8_t negative_current_trim = 0b10000000;
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	757b      	strb	r3, [r7, #21]
	uint8_t negative_current_magnitude = 0b00000000;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	753b      	strb	r3, [r7, #20]
	RHS2116_Negative_Stimulation_Current_Magnitude(hspi, negative_current_trim, negative_current_magnitude);
 8003eac:	7d3a      	ldrb	r2, [r7, #20]
 8003eae:	7d7b      	ldrb	r3, [r7, #21]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fae4 	bl	8003480 <RHS2116_Negative_Stimulation_Current_Magnitude>

	// Write to registers 96-111, setting the negative stimulation current magnitudes to zero and the current
	// trims to the center point. (These commands do not take effect until the U flag is asserted since Registers 96-111 are triggered registers.)
	//IN EXEMPLE : 0x8000 --> 0b1000000000000000
	// Define the common values for negative current trim and magnitude
	uint8_t positive_current_trim = 0b10000000;
 8003eb8:	2380      	movs	r3, #128	@ 0x80
 8003eba:	74fb      	strb	r3, [r7, #19]
	uint8_t positive_current_magnitude = 0b00000000;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74bb      	strb	r3, [r7, #18]
	RHS2116_Positive_Stimulation_Current_Magnitude(hspi, positive_current_trim, positive_current_magnitude);
 8003ec0:	7cba      	ldrb	r2, [r7, #18]
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fb48 	bl	800355c <RHS2116_Positive_Stimulation_Current_Magnitude>

	// Should Return ascii character INTAN
	RHS2116_Read_INTAN(hspi);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fbb3 	bl	8003638 <RHS2116_Read_INTAN>

	// Should Return Number Of channels and Die Revision of the chip
	uint16_t result = RHS2116_Read_NumChannel_DieRevision(hspi, REGISTER_254);
 8003ed2:	21fe      	movs	r1, #254	@ 0xfe
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fcd5 	bl	8003884 <RHS2116_Read_NumChannel_DieRevision>
 8003eda:	4603      	mov	r3, r0
 8003edc:	823b      	strh	r3, [r7, #16]
	uint8_t die_revision = (result >> 8) & 0xFF;
 8003ede:	8a3b      	ldrh	r3, [r7, #16]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	73fb      	strb	r3, [r7, #15]
	uint8_t num_channels = result & 0xFF;
 8003ee6:	8a3b      	ldrh	r3, [r7, #16]
 8003ee8:	73bb      	strb	r3, [r7, #14]
	printf("Extracted: Die Revision : %d | Num Channels : %d \r\n", die_revision, num_channels);
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	7bba      	ldrb	r2, [r7, #14]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4818      	ldr	r0, [pc, #96]	@ (8003f54 <INIT_RHS+0x344>)
 8003ef2:	f01a febf 	bl	801ec74 <iprintf>

	// Should Return Chip ID
	uint8_t chip_id = RHS2116_Read_Chip_ID(hspi, REGISTER_255);
 8003ef6:	21ff      	movs	r1, #255	@ 0xff
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fd7b 	bl	80039f4 <RHS2116_Read_Chip_ID>
 8003efe:	4603      	mov	r3, r0
 8003f00:	737b      	strb	r3, [r7, #13]
	printf("Extracted CHIP ID: %d \r\n", chip_id);
 8003f02:	7b7b      	ldrb	r3, [r7, #13]
 8003f04:	4619      	mov	r1, r3
 8003f06:	4814      	ldr	r0, [pc, #80]	@ (8003f58 <INIT_RHS+0x348>)
 8003f08:	f01a feb4 	bl	801ec74 <iprintf>

	// Register 0
	cmd_selector = CONVERT_CMD;
 8003f0c:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <INIT_RHS+0x34c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_0;
 8003f12:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <INIT_RHS+0x350>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8003f18:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <INIT_RHS+0x354>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <INIT_RHS+0x34c>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	b21a      	sxth	r2, r3
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <INIT_RHS+0x350>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <INIT_RHS+0x358>)
 8003f34:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <INIT_RHS+0x354>)
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <INIT_RHS+0x358>)
 8003f3c:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <INIT_RHS+0x35c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	4a0b      	ldr	r2, [pc, #44]	@ (8003f70 <INIT_RHS+0x360>)
 8003f44:	4908      	ldr	r1, [pc, #32]	@ (8003f68 <INIT_RHS+0x358>)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fc ffbe 	bl	8000ec8 <SPI_SEND_RECV>
 8003f4c:	e012      	b.n	8003f74 <INIT_RHS+0x364>
 8003f4e:	bf00      	nop
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	08021ba4 	.word	0x08021ba4
 8003f58:	08021bd8 	.word	0x08021bd8
 8003f5c:	20000651 	.word	0x20000651
 8003f60:	20000650 	.word	0x20000650
 8003f64:	20000652 	.word	0x20000652
 8003f68:	20000648 	.word	0x20000648
 8003f6c:	20000008 	.word	0x20000008
 8003f70:	2000064c 	.word	0x2000064c
	print_debug_binary(rx_vector);
 8003f74:	489c      	ldr	r0, [pc, #624]	@ (80041e8 <INIT_RHS+0x5d8>)
 8003f76:	f7fe fb1f 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80041ec <INIT_RHS+0x5dc>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	4a9c      	ldr	r2, [pc, #624]	@ (80041f0 <INIT_RHS+0x5e0>)
 8003f80:	7811      	ldrb	r1, [r2, #0]
 8003f82:	4a9c      	ldr	r2, [pc, #624]	@ (80041f4 <INIT_RHS+0x5e4>)
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fb20 	bl	80025cc <print_configuration>
//	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");


	// Register 0
	cmd_selector = CONVERT_CMD;
 8003f8c:	4b9a      	ldr	r3, [pc, #616]	@ (80041f8 <INIT_RHS+0x5e8>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 8003f92:	4b97      	ldr	r3, [pc, #604]	@ (80041f0 <INIT_RHS+0x5e0>)
 8003f94:	223f      	movs	r2, #63	@ 0x3f
 8003f96:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8003f98:	4b96      	ldr	r3, [pc, #600]	@ (80041f4 <INIT_RHS+0x5e4>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8003f9e:	4b96      	ldr	r3, [pc, #600]	@ (80041f8 <INIT_RHS+0x5e8>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	031b      	lsls	r3, r3, #12
 8003fa4:	b21a      	sxth	r2, r3
 8003fa6:	4b92      	ldr	r3, [pc, #584]	@ (80041f0 <INIT_RHS+0x5e0>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b21b      	sxth	r3, r3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b21b      	sxth	r3, r3
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80041ec <INIT_RHS+0x5dc>)
 8003fb4:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << D_FLAG);
 8003fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80041ec <INIT_RHS+0x5dc>)
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	4b8a      	ldr	r3, [pc, #552]	@ (80041ec <INIT_RHS+0x5dc>)
 8003fc2:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 8003fc4:	4b8b      	ldr	r3, [pc, #556]	@ (80041f4 <INIT_RHS+0x5e4>)
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <INIT_RHS+0x5dc>)
 8003fca:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8003fcc:	4b8b      	ldr	r3, [pc, #556]	@ (80041fc <INIT_RHS+0x5ec>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4a85      	ldr	r2, [pc, #532]	@ (80041e8 <INIT_RHS+0x5d8>)
 8003fd2:	4986      	ldr	r1, [pc, #536]	@ (80041ec <INIT_RHS+0x5dc>)
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fc ff77 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8003fda:	4883      	ldr	r0, [pc, #524]	@ (80041e8 <INIT_RHS+0x5d8>)
 8003fdc:	f7fe faec 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8003fe0:	4b82      	ldr	r3, [pc, #520]	@ (80041ec <INIT_RHS+0x5dc>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	4a82      	ldr	r2, [pc, #520]	@ (80041f0 <INIT_RHS+0x5e0>)
 8003fe6:	7811      	ldrb	r1, [r2, #0]
 8003fe8:	4a82      	ldr	r2, [pc, #520]	@ (80041f4 <INIT_RHS+0x5e4>)
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe faed 	bl	80025cc <print_configuration>
//	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");


	// Register 0
	cmd_selector = CONVERT_CMD;
 8003ff2:	4b81      	ldr	r3, [pc, #516]	@ (80041f8 <INIT_RHS+0x5e8>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 8003ff8:	4b7d      	ldr	r3, [pc, #500]	@ (80041f0 <INIT_RHS+0x5e0>)
 8003ffa:	223f      	movs	r2, #63	@ 0x3f
 8003ffc:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8003ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80041f4 <INIT_RHS+0x5e4>)
 8004000:	2200      	movs	r2, #0
 8004002:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8004004:	4b7c      	ldr	r3, [pc, #496]	@ (80041f8 <INIT_RHS+0x5e8>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	031b      	lsls	r3, r3, #12
 800400a:	b21a      	sxth	r2, r3
 800400c:	4b78      	ldr	r3, [pc, #480]	@ (80041f0 <INIT_RHS+0x5e0>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b21b      	sxth	r3, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	b21b      	sxth	r3, r3
 8004016:	b29a      	uxth	r2, r3
 8004018:	4b74      	ldr	r3, [pc, #464]	@ (80041ec <INIT_RHS+0x5dc>)
 800401a:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800401c:	4b75      	ldr	r3, [pc, #468]	@ (80041f4 <INIT_RHS+0x5e4>)
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	4b72      	ldr	r3, [pc, #456]	@ (80041ec <INIT_RHS+0x5dc>)
 8004022:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8004024:	4b75      	ldr	r3, [pc, #468]	@ (80041fc <INIT_RHS+0x5ec>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4a6f      	ldr	r2, [pc, #444]	@ (80041e8 <INIT_RHS+0x5d8>)
 800402a:	4970      	ldr	r1, [pc, #448]	@ (80041ec <INIT_RHS+0x5dc>)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc ff4b 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8004032:	486d      	ldr	r0, [pc, #436]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004034:	f7fe fac0 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8004038:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <INIT_RHS+0x5dc>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	4a6c      	ldr	r2, [pc, #432]	@ (80041f0 <INIT_RHS+0x5e0>)
 800403e:	7811      	ldrb	r1, [r2, #0]
 8004040:	4a6c      	ldr	r2, [pc, #432]	@ (80041f4 <INIT_RHS+0x5e4>)
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fac1 	bl	80025cc <print_configuration>
	printf("Receiving Data - Should be 16bits on MSB: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 800404a:	4b67      	ldr	r3, [pc, #412]	@ (80041e8 <INIT_RHS+0x5d8>)
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461c      	mov	r4, r3
 8004050:	4b65      	ldr	r3, [pc, #404]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004052:	885b      	ldrh	r3, [r3, #2]
 8004054:	461d      	mov	r5, r3
 8004056:	4b64      	ldr	r3, [pc, #400]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	4a62      	ldr	r2, [pc, #392]	@ (80041e8 <INIT_RHS+0x5d8>)
 800405e:	8852      	ldrh	r2, [r2, #2]
 8004060:	4313      	orrs	r3, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fa6c 	bl	8002540 <binary_string>
 8004068:	4603      	mov	r3, r0
 800406a:	462a      	mov	r2, r5
 800406c:	4621      	mov	r1, r4
 800406e:	4864      	ldr	r0, [pc, #400]	@ (8004200 <INIT_RHS+0x5f0>)
 8004070:	f01a fe00 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8004074:	4863      	ldr	r0, [pc, #396]	@ (8004204 <INIT_RHS+0x5f4>)
 8004076:	f01a fe6d 	bl	801ed54 <puts>

	// Register 0
	cmd_selector = CONVERT_CMD;
 800407a:	4b5f      	ldr	r3, [pc, #380]	@ (80041f8 <INIT_RHS+0x5e8>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 8004080:	4b5b      	ldr	r3, [pc, #364]	@ (80041f0 <INIT_RHS+0x5e0>)
 8004082:	223f      	movs	r2, #63	@ 0x3f
 8004084:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 8004086:	4b5b      	ldr	r3, [pc, #364]	@ (80041f4 <INIT_RHS+0x5e4>)
 8004088:	2200      	movs	r2, #0
 800408a:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 800408c:	4b5a      	ldr	r3, [pc, #360]	@ (80041f8 <INIT_RHS+0x5e8>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	031b      	lsls	r3, r3, #12
 8004092:	b21a      	sxth	r2, r3
 8004094:	4b56      	ldr	r3, [pc, #344]	@ (80041f0 <INIT_RHS+0x5e0>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b21b      	sxth	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	b21b      	sxth	r3, r3
 800409e:	b29a      	uxth	r2, r3
 80040a0:	4b52      	ldr	r3, [pc, #328]	@ (80041ec <INIT_RHS+0x5dc>)
 80040a2:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << D_FLAG);
 80040a4:	4b51      	ldr	r3, [pc, #324]	@ (80041ec <INIT_RHS+0x5dc>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b4f      	ldr	r3, [pc, #316]	@ (80041ec <INIT_RHS+0x5dc>)
 80040b0:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80040b2:	4b50      	ldr	r3, [pc, #320]	@ (80041f4 <INIT_RHS+0x5e4>)
 80040b4:	881a      	ldrh	r2, [r3, #0]
 80040b6:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <INIT_RHS+0x5dc>)
 80040b8:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80040ba:	4b50      	ldr	r3, [pc, #320]	@ (80041fc <INIT_RHS+0x5ec>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	4a4a      	ldr	r2, [pc, #296]	@ (80041e8 <INIT_RHS+0x5d8>)
 80040c0:	494a      	ldr	r1, [pc, #296]	@ (80041ec <INIT_RHS+0x5dc>)
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc ff00 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 80040c8:	4847      	ldr	r0, [pc, #284]	@ (80041e8 <INIT_RHS+0x5d8>)
 80040ca:	f7fe fa75 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <INIT_RHS+0x5dc>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	4a47      	ldr	r2, [pc, #284]	@ (80041f0 <INIT_RHS+0x5e0>)
 80040d4:	7811      	ldrb	r1, [r2, #0]
 80040d6:	4a47      	ldr	r2, [pc, #284]	@ (80041f4 <INIT_RHS+0x5e4>)
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fa76 	bl	80025cc <print_configuration>
	printf("Receiving Data - Should be 10bits on LSB: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 80040e0:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <INIT_RHS+0x5d8>)
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	461c      	mov	r4, r3
 80040e6:	4b40      	ldr	r3, [pc, #256]	@ (80041e8 <INIT_RHS+0x5d8>)
 80040e8:	885b      	ldrh	r3, [r3, #2]
 80040ea:	461d      	mov	r5, r3
 80040ec:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <INIT_RHS+0x5d8>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	4a3d      	ldr	r2, [pc, #244]	@ (80041e8 <INIT_RHS+0x5d8>)
 80040f4:	8852      	ldrh	r2, [r2, #2]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fa21 	bl	8002540 <binary_string>
 80040fe:	4603      	mov	r3, r0
 8004100:	462a      	mov	r2, r5
 8004102:	4621      	mov	r1, r4
 8004104:	4840      	ldr	r0, [pc, #256]	@ (8004208 <INIT_RHS+0x5f8>)
 8004106:	f01a fdb5 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 800410a:	483e      	ldr	r0, [pc, #248]	@ (8004204 <INIT_RHS+0x5f4>)
 800410c:	f01a fe22 	bl	801ed54 <puts>

	// Register 0
	cmd_selector = CONVERT_CMD;
 8004110:	4b39      	ldr	r3, [pc, #228]	@ (80041f8 <INIT_RHS+0x5e8>)
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 8004116:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <INIT_RHS+0x5e0>)
 8004118:	223f      	movs	r2, #63	@ 0x3f
 800411a:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <INIT_RHS+0x5e4>)
 800411e:	2200      	movs	r2, #0
 8004120:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 8004122:	4b35      	ldr	r3, [pc, #212]	@ (80041f8 <INIT_RHS+0x5e8>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	031b      	lsls	r3, r3, #12
 8004128:	b21a      	sxth	r2, r3
 800412a:	4b31      	ldr	r3, [pc, #196]	@ (80041f0 <INIT_RHS+0x5e0>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b21b      	sxth	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b21b      	sxth	r3, r3
 8004134:	b29a      	uxth	r2, r3
 8004136:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <INIT_RHS+0x5dc>)
 8004138:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 800413a:	4b2e      	ldr	r3, [pc, #184]	@ (80041f4 <INIT_RHS+0x5e4>)
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	4b2b      	ldr	r3, [pc, #172]	@ (80041ec <INIT_RHS+0x5dc>)
 8004140:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8004142:	4b2e      	ldr	r3, [pc, #184]	@ (80041fc <INIT_RHS+0x5ec>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004148:	4928      	ldr	r1, [pc, #160]	@ (80041ec <INIT_RHS+0x5dc>)
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc febc 	bl	8000ec8 <SPI_SEND_RECV>
	print_debug_binary(rx_vector);
 8004150:	4825      	ldr	r0, [pc, #148]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004152:	f7fe fa31 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <INIT_RHS+0x5dc>)
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	4a25      	ldr	r2, [pc, #148]	@ (80041f0 <INIT_RHS+0x5e0>)
 800415c:	7811      	ldrb	r1, [r2, #0]
 800415e:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <INIT_RHS+0x5e4>)
 8004160:	8812      	ldrh	r2, [r2, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fa32 	bl	80025cc <print_configuration>
	printf("Receiving Data - Should be 16bits on MSB: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 8004168:	4b1f      	ldr	r3, [pc, #124]	@ (80041e8 <INIT_RHS+0x5d8>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	461c      	mov	r4, r3
 800416e:	4b1e      	ldr	r3, [pc, #120]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004170:	885b      	ldrh	r3, [r3, #2]
 8004172:	461d      	mov	r5, r3
 8004174:	4b1c      	ldr	r3, [pc, #112]	@ (80041e8 <INIT_RHS+0x5d8>)
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	4a1b      	ldr	r2, [pc, #108]	@ (80041e8 <INIT_RHS+0x5d8>)
 800417c:	8852      	ldrh	r2, [r2, #2]
 800417e:	4313      	orrs	r3, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe f9dd 	bl	8002540 <binary_string>
 8004186:	4603      	mov	r3, r0
 8004188:	462a      	mov	r2, r5
 800418a:	4621      	mov	r1, r4
 800418c:	481c      	ldr	r0, [pc, #112]	@ (8004200 <INIT_RHS+0x5f0>)
 800418e:	f01a fd71 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 8004192:	481c      	ldr	r0, [pc, #112]	@ (8004204 <INIT_RHS+0x5f4>)
 8004194:	f01a fdde 	bl	801ed54 <puts>

	// Register 0
	cmd_selector = CONVERT_CMD;
 8004198:	4b17      	ldr	r3, [pc, #92]	@ (80041f8 <INIT_RHS+0x5e8>)
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
	reg_address = REGISTER_63;
 800419e:	4b14      	ldr	r3, [pc, #80]	@ (80041f0 <INIT_RHS+0x5e0>)
 80041a0:	223f      	movs	r2, #63	@ 0x3f
 80041a2:	701a      	strb	r2, [r3, #0]
	lsb_value = 0b0000000000000000;
 80041a4:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <INIT_RHS+0x5e4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	801a      	strh	r2, [r3, #0]
	tx_vector[0] = (cmd_selector << 12) | (reg_address);
 80041aa:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <INIT_RHS+0x5e8>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	031b      	lsls	r3, r3, #12
 80041b0:	b21a      	sxth	r2, r3
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <INIT_RHS+0x5e0>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b21b      	sxth	r3, r3
 80041bc:	b29a      	uxth	r2, r3
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <INIT_RHS+0x5dc>)
 80041c0:	801a      	strh	r2, [r3, #0]
	tx_vector[0] |= (1 << D_FLAG);
 80041c2:	4b0a      	ldr	r3, [pc, #40]	@ (80041ec <INIT_RHS+0x5dc>)
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <INIT_RHS+0x5dc>)
 80041ce:	801a      	strh	r2, [r3, #0]
	tx_vector[1] = lsb_value;
 80041d0:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <INIT_RHS+0x5e4>)
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <INIT_RHS+0x5dc>)
 80041d6:	805a      	strh	r2, [r3, #2]
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80041d8:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <INIT_RHS+0x5ec>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4a02      	ldr	r2, [pc, #8]	@ (80041e8 <INIT_RHS+0x5d8>)
 80041de:	4903      	ldr	r1, [pc, #12]	@ (80041ec <INIT_RHS+0x5dc>)
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fc fe71 	bl	8000ec8 <SPI_SEND_RECV>
 80041e6:	e011      	b.n	800420c <INIT_RHS+0x5fc>
 80041e8:	2000064c 	.word	0x2000064c
 80041ec:	20000648 	.word	0x20000648
 80041f0:	20000650 	.word	0x20000650
 80041f4:	20000652 	.word	0x20000652
 80041f8:	20000651 	.word	0x20000651
 80041fc:	20000008 	.word	0x20000008
 8004200:	08021bf4 	.word	0x08021bf4
 8004204:	08021ae4 	.word	0x08021ae4
 8004208:	08021c30 	.word	0x08021c30
	print_debug_binary(rx_vector);
 800420c:	4815      	ldr	r0, [pc, #84]	@ (8004264 <INIT_RHS+0x654>)
 800420e:	f7fe f9d3 	bl	80025b8 <print_debug_binary>
	print_configuration(tx_vector[0], reg_address, lsb_value);
 8004212:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <INIT_RHS+0x658>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <INIT_RHS+0x65c>)
 8004218:	7811      	ldrb	r1, [r2, #0]
 800421a:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <INIT_RHS+0x660>)
 800421c:	8812      	ldrh	r2, [r2, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe f9d4 	bl	80025cc <print_configuration>
	printf("Receiving Data - Should be 10bits on LSB: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
 8004224:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <INIT_RHS+0x654>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	461c      	mov	r4, r3
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <INIT_RHS+0x654>)
 800422c:	885b      	ldrh	r3, [r3, #2]
 800422e:	461d      	mov	r5, r3
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <INIT_RHS+0x654>)
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <INIT_RHS+0x654>)
 8004238:	8852      	ldrh	r2, [r2, #2]
 800423a:	4313      	orrs	r3, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe f97f 	bl	8002540 <binary_string>
 8004242:	4603      	mov	r3, r0
 8004244:	462a      	mov	r2, r5
 8004246:	4621      	mov	r1, r4
 8004248:	480a      	ldr	r0, [pc, #40]	@ (8004274 <INIT_RHS+0x664>)
 800424a:	f01a fd13 	bl	801ec74 <iprintf>
	printf("------------------------------------------------  \r\n");
 800424e:	480a      	ldr	r0, [pc, #40]	@ (8004278 <INIT_RHS+0x668>)
 8004250:	f01a fd80 	bl	801ed54 <puts>

	RHS2116_Convert_Register(hspi);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fc77 	bl	8003b48 <RHS2116_Convert_Register>

}
 800425a:	bf00      	nop
 800425c:	3748      	adds	r7, #72	@ 0x48
 800425e:	46bd      	mov	sp, r7
 8004260:	bdb0      	pop	{r4, r5, r7, pc}
 8004262:	bf00      	nop
 8004264:	2000064c 	.word	0x2000064c
 8004268:	20000648 	.word	0x20000648
 800426c:	20000650 	.word	0x20000650
 8004270:	20000652 	.word	0x20000652
 8004274:	08021c30 	.word	0x08021c30
 8004278:	08021ae4 	.word	0x08021ae4

0800427c <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <dhcpclient_set_link_state+0x28>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8004290:	e002      	b.n	8004298 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8004292:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <dhcpclient_set_link_state+0x28>)
 8004294:	2205      	movs	r2, #5
 8004296:	701a      	strb	r2, [r3, #0]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	2000067c 	.word	0x2000067c

080042a8 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 80042b4:	4b9a      	ldr	r3, [pc, #616]	@ (8004520 <dhcpclient_start+0x278>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	f000 811f 	beq.w	80044fe <dhcpclient_start+0x256>
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	f300 8125 	bgt.w	8004510 <dhcpclient_start+0x268>
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d002      	beq.n	80042d0 <dhcpclient_start+0x28>
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d012      	beq.n	80042f4 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 80042ce:	e11f      	b.n	8004510 <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2200      	movs	r2, #0
 80042d4:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 80042e2:	4a90      	ldr	r2, [pc, #576]	@ (8004524 <dhcpclient_start+0x27c>)
 80042e4:	2100      	movs	r1, #0
 80042e6:	69f8      	ldr	r0, [r7, #28]
 80042e8:	f00b fedc 	bl	80100a4 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 80042ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004520 <dhcpclient_start+0x278>)
 80042ee:	2202      	movs	r2, #2
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e110      	b.n	8004516 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 80042f4:	69f8      	ldr	r0, [r7, #28]
 80042f6:	f016 ffa1 	bl	801b23c <dhcp_supplied_address>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d018      	beq.n	8004332 <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8004300:	4b87      	ldr	r3, [pc, #540]	@ (8004520 <dhcpclient_start+0x278>)
 8004302:	2203      	movs	r2, #3
 8004304:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <dhcpclient_start+0x280>)
 8004308:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 800430a:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 800430c:	4b86      	ldr	r3, [pc, #536]	@ (8004528 <dhcpclient_start+0x280>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8004312:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8004314:	4b84      	ldr	r3, [pc, #528]	@ (8004528 <dhcpclient_start+0x280>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 800431a:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 800431c:	4b82      	ldr	r3, [pc, #520]	@ (8004528 <dhcpclient_start+0x280>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	4603      	mov	r3, r0
 8004326:	4881      	ldr	r0, [pc, #516]	@ (800452c <dhcpclient_start+0x284>)
 8004328:	f01a fca4 	bl	801ec74 <iprintf>
          start_app_task();
 800432c:	f7fc ff1e 	bl	800116c <start_app_task>
      break;
 8004330:	e0f0      	b.n	8004514 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	799b      	ldrb	r3, [r3, #6]
 800433c:	2b04      	cmp	r3, #4
 800433e:	f240 80e9 	bls.w	8004514 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8004342:	4b77      	ldr	r3, [pc, #476]	@ (8004520 <dhcpclient_start+0x278>)
 8004344:	2204      	movs	r2, #4
 8004346:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8004348:	2200      	movs	r2, #0
 800434a:	4979      	ldr	r1, [pc, #484]	@ (8004530 <dhcpclient_start+0x288>)
 800434c:	69f8      	ldr	r0, [r7, #28]
 800434e:	f00b fea9 	bl	80100a4 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8004352:	4b78      	ldr	r3, [pc, #480]	@ (8004534 <dhcpclient_start+0x28c>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	061a      	lsls	r2, r3, #24
 8004358:	4b77      	ldr	r3, [pc, #476]	@ (8004538 <dhcpclient_start+0x290>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	4b76      	ldr	r3, [pc, #472]	@ (800453c <dhcpclient_start+0x294>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	4313      	orrs	r3, r2
 8004368:	4a75      	ldr	r2, [pc, #468]	@ (8004540 <dhcpclient_start+0x298>)
 800436a:	7812      	ldrb	r2, [r2, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	061a      	lsls	r2, r3, #24
 8004370:	4b70      	ldr	r3, [pc, #448]	@ (8004534 <dhcpclient_start+0x28c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	0619      	lsls	r1, r3, #24
 8004376:	4b70      	ldr	r3, [pc, #448]	@ (8004538 <dhcpclient_start+0x290>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	4319      	orrs	r1, r3
 800437e:	4b6f      	ldr	r3, [pc, #444]	@ (800453c <dhcpclient_start+0x294>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	430b      	orrs	r3, r1
 8004386:	496e      	ldr	r1, [pc, #440]	@ (8004540 <dhcpclient_start+0x298>)
 8004388:	7809      	ldrb	r1, [r1, #0]
 800438a:	430b      	orrs	r3, r1
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004392:	431a      	orrs	r2, r3
 8004394:	4b67      	ldr	r3, [pc, #412]	@ (8004534 <dhcpclient_start+0x28c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	0619      	lsls	r1, r3, #24
 800439a:	4b67      	ldr	r3, [pc, #412]	@ (8004538 <dhcpclient_start+0x290>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	4319      	orrs	r1, r3
 80043a2:	4b66      	ldr	r3, [pc, #408]	@ (800453c <dhcpclient_start+0x294>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	430b      	orrs	r3, r1
 80043aa:	4965      	ldr	r1, [pc, #404]	@ (8004540 <dhcpclient_start+0x298>)
 80043ac:	7809      	ldrb	r1, [r1, #0]
 80043ae:	430b      	orrs	r3, r1
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80043b6:	431a      	orrs	r2, r3
 80043b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004534 <dhcpclient_start+0x28c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	0619      	lsls	r1, r3, #24
 80043be:	4b5e      	ldr	r3, [pc, #376]	@ (8004538 <dhcpclient_start+0x290>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	4319      	orrs	r1, r3
 80043c6:	4b5d      	ldr	r3, [pc, #372]	@ (800453c <dhcpclient_start+0x294>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	430b      	orrs	r3, r1
 80043ce:	495c      	ldr	r1, [pc, #368]	@ (8004540 <dhcpclient_start+0x298>)
 80043d0:	7809      	ldrb	r1, [r1, #0]
 80043d2:	430b      	orrs	r3, r1
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 80043da:	4b5a      	ldr	r3, [pc, #360]	@ (8004544 <dhcpclient_start+0x29c>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	061a      	lsls	r2, r3, #24
 80043e0:	4b59      	ldr	r3, [pc, #356]	@ (8004548 <dhcpclient_start+0x2a0>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	4b58      	ldr	r3, [pc, #352]	@ (800454c <dhcpclient_start+0x2a4>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	4313      	orrs	r3, r2
 80043f0:	4a57      	ldr	r2, [pc, #348]	@ (8004550 <dhcpclient_start+0x2a8>)
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	061a      	lsls	r2, r3, #24
 80043f8:	4b52      	ldr	r3, [pc, #328]	@ (8004544 <dhcpclient_start+0x29c>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	0619      	lsls	r1, r3, #24
 80043fe:	4b52      	ldr	r3, [pc, #328]	@ (8004548 <dhcpclient_start+0x2a0>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	4319      	orrs	r1, r3
 8004406:	4b51      	ldr	r3, [pc, #324]	@ (800454c <dhcpclient_start+0x2a4>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	430b      	orrs	r3, r1
 800440e:	4950      	ldr	r1, [pc, #320]	@ (8004550 <dhcpclient_start+0x2a8>)
 8004410:	7809      	ldrb	r1, [r1, #0]
 8004412:	430b      	orrs	r3, r1
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800441a:	431a      	orrs	r2, r3
 800441c:	4b49      	ldr	r3, [pc, #292]	@ (8004544 <dhcpclient_start+0x29c>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	0619      	lsls	r1, r3, #24
 8004422:	4b49      	ldr	r3, [pc, #292]	@ (8004548 <dhcpclient_start+0x2a0>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	4319      	orrs	r1, r3
 800442a:	4b48      	ldr	r3, [pc, #288]	@ (800454c <dhcpclient_start+0x2a4>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	430b      	orrs	r3, r1
 8004432:	4947      	ldr	r1, [pc, #284]	@ (8004550 <dhcpclient_start+0x2a8>)
 8004434:	7809      	ldrb	r1, [r1, #0]
 8004436:	430b      	orrs	r3, r1
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800443e:	431a      	orrs	r2, r3
 8004440:	4b40      	ldr	r3, [pc, #256]	@ (8004544 <dhcpclient_start+0x29c>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	0619      	lsls	r1, r3, #24
 8004446:	4b40      	ldr	r3, [pc, #256]	@ (8004548 <dhcpclient_start+0x2a0>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	4319      	orrs	r1, r3
 800444e:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <dhcpclient_start+0x2a4>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	430b      	orrs	r3, r1
 8004456:	493e      	ldr	r1, [pc, #248]	@ (8004550 <dhcpclient_start+0x2a8>)
 8004458:	7809      	ldrb	r1, [r1, #0]
 800445a:	430b      	orrs	r3, r1
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8004462:	4b3c      	ldr	r3, [pc, #240]	@ (8004554 <dhcpclient_start+0x2ac>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	061a      	lsls	r2, r3, #24
 8004468:	4b3b      	ldr	r3, [pc, #236]	@ (8004558 <dhcpclient_start+0x2b0>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	431a      	orrs	r2, r3
 8004470:	4b3a      	ldr	r3, [pc, #232]	@ (800455c <dhcpclient_start+0x2b4>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	4313      	orrs	r3, r2
 8004478:	4a39      	ldr	r2, [pc, #228]	@ (8004560 <dhcpclient_start+0x2b8>)
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	061a      	lsls	r2, r3, #24
 8004480:	4b34      	ldr	r3, [pc, #208]	@ (8004554 <dhcpclient_start+0x2ac>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	0619      	lsls	r1, r3, #24
 8004486:	4b34      	ldr	r3, [pc, #208]	@ (8004558 <dhcpclient_start+0x2b0>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	4319      	orrs	r1, r3
 800448e:	4b33      	ldr	r3, [pc, #204]	@ (800455c <dhcpclient_start+0x2b4>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	430b      	orrs	r3, r1
 8004496:	4932      	ldr	r1, [pc, #200]	@ (8004560 <dhcpclient_start+0x2b8>)
 8004498:	7809      	ldrb	r1, [r1, #0]
 800449a:	430b      	orrs	r3, r1
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80044a2:	431a      	orrs	r2, r3
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <dhcpclient_start+0x2ac>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	0619      	lsls	r1, r3, #24
 80044aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004558 <dhcpclient_start+0x2b0>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	4319      	orrs	r1, r3
 80044b2:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <dhcpclient_start+0x2b4>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	430b      	orrs	r3, r1
 80044ba:	4929      	ldr	r1, [pc, #164]	@ (8004560 <dhcpclient_start+0x2b8>)
 80044bc:	7809      	ldrb	r1, [r1, #0]
 80044be:	430b      	orrs	r3, r1
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80044c6:	431a      	orrs	r2, r3
 80044c8:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <dhcpclient_start+0x2ac>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	0619      	lsls	r1, r3, #24
 80044ce:	4b22      	ldr	r3, [pc, #136]	@ (8004558 <dhcpclient_start+0x2b0>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	4319      	orrs	r1, r3
 80044d6:	4b21      	ldr	r3, [pc, #132]	@ (800455c <dhcpclient_start+0x2b4>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	430b      	orrs	r3, r1
 80044de:	4920      	ldr	r1, [pc, #128]	@ (8004560 <dhcpclient_start+0x2b8>)
 80044e0:	7809      	ldrb	r1, [r1, #0]
 80044e2:	430b      	orrs	r3, r1
 80044e4:	0e1b      	lsrs	r3, r3, #24
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	f107 0210 	add.w	r2, r7, #16
 80044f2:	f107 0114 	add.w	r1, r7, #20
 80044f6:	69f8      	ldr	r0, [r7, #28]
 80044f8:	f00d f804 	bl	8011504 <netif_set_addr>
      break;
 80044fc:	e00a      	b.n	8004514 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 80044fe:	2200      	movs	r2, #0
 8004500:	490b      	ldr	r1, [pc, #44]	@ (8004530 <dhcpclient_start+0x288>)
 8004502:	69f8      	ldr	r0, [r7, #28]
 8004504:	f00b fdce 	bl	80100a4 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <dhcpclient_start+0x278>)
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
    break;
 800450e:	e002      	b.n	8004516 <dhcpclient_start+0x26e>
    default: break;
 8004510:	bf00      	nop
 8004512:	e000      	b.n	8004516 <dhcpclient_start+0x26e>
      break;
 8004514:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8004516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800451a:	f009 fed3 	bl	800e2c4 <vTaskDelay>
    switch (dhcp_state)
 800451e:	e6c9      	b.n	80042b4 <dhcpclient_start+0xc>
 8004520:	2000067c 	.word	0x2000067c
 8004524:	08019c39 	.word	0x08019c39
 8004528:	200008d8 	.word	0x200008d8
 800452c:	08021c6c 	.word	0x08021c6c
 8004530:	0801a6ed 	.word	0x0801a6ed
 8004534:	2000009c 	.word	0x2000009c
 8004538:	2000009d 	.word	0x2000009d
 800453c:	2000097a 	.word	0x2000097a
 8004540:	2000009e 	.word	0x2000009e
 8004544:	2000009f 	.word	0x2000009f
 8004548:	200000a0 	.word	0x200000a0
 800454c:	200000a1 	.word	0x200000a1
 8004550:	2000097b 	.word	0x2000097b
 8004554:	2000097c 	.word	0x2000097c
 8004558:	2000097d 	.word	0x2000097d
 800455c:	2000097e 	.word	0x2000097e
 8004560:	2000097f 	.word	0x2000097f

08004564 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e08a      	b.n	8004688 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8004572:	494b      	ldr	r1, [pc, #300]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d17b      	bne.n	8004682 <dhcpserver_remove_mac+0x11e>
 800458a:	4945      	ldr	r1, [pc, #276]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	440b      	add	r3, r1
 8004598:	3301      	adds	r3, #1
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d16e      	bne.n	8004682 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 80045a4:	493e      	ldr	r1, [pc, #248]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	440b      	add	r3, r1
 80045b2:	3302      	adds	r3, #2
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	789b      	ldrb	r3, [r3, #2]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d161      	bne.n	8004682 <dhcpserver_remove_mac+0x11e>
 80045be:	4938      	ldr	r1, [pc, #224]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	440b      	add	r3, r1
 80045cc:	3303      	adds	r3, #3
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	78db      	ldrb	r3, [r3, #3]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d154      	bne.n	8004682 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 80045d8:	4931      	ldr	r1, [pc, #196]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	440b      	add	r3, r1
 80045e6:	3304      	adds	r3, #4
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d147      	bne.n	8004682 <dhcpserver_remove_mac+0x11e>
 80045f2:	492b      	ldr	r1, [pc, #172]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	3305      	adds	r3, #5
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	795b      	ldrb	r3, [r3, #5]
 8004608:	429a      	cmp	r2, r3
 800460a:	d13a      	bne.n	8004682 <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 800460c:	4924      	ldr	r1, [pc, #144]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	440b      	add	r3, r1
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 800461e:	4920      	ldr	r1, [pc, #128]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	440b      	add	r3, r1
 800462c:	3301      	adds	r3, #1
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8004632:	491b      	ldr	r1, [pc, #108]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	440b      	add	r3, r1
 8004640:	3302      	adds	r3, #2
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8004646:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	440b      	add	r3, r1
 8004654:	3303      	adds	r3, #3
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 800465a:	4911      	ldr	r1, [pc, #68]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4613      	mov	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4413      	add	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	440b      	add	r3, r1
 8004668:	3304      	adds	r3, #4
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 800466e:	490c      	ldr	r1, [pc, #48]	@ (80046a0 <dhcpserver_remove_mac+0x13c>)
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	440b      	add	r3, r1
 800467c:	3305      	adds	r3, #5
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b07      	cmp	r3, #7
 800468c:	f67f af71 	bls.w	8004572 <dhcpserver_remove_mac+0xe>
    }
  }
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000684 	.word	0x20000684

080046a4 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff59 	bl	8004564 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e08b      	b.n	80047d0 <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	494a      	ldr	r1, [pc, #296]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 80046bc:	4613      	mov	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	440b      	add	r3, r1
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d17e      	bne.n	80047ca <dhcpserver_save_mac+0x126>
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	4945      	ldr	r1, [pc, #276]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	440b      	add	r3, r1
 80046da:	3301      	adds	r3, #1
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d173      	bne.n	80047ca <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	493f      	ldr	r1, [pc, #252]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 80046e6:	4613      	mov	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	440b      	add	r3, r1
 80046f0:	3302      	adds	r3, #2
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d168      	bne.n	80047ca <dhcpserver_save_mac+0x126>
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	493a      	ldr	r1, [pc, #232]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	440b      	add	r3, r1
 8004706:	3303      	adds	r3, #3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d15d      	bne.n	80047ca <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	4934      	ldr	r1, [pc, #208]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	440b      	add	r3, r1
 800471c:	3304      	adds	r3, #4
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d152      	bne.n	80047ca <dhcpserver_save_mac+0x126>
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	492f      	ldr	r1, [pc, #188]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	440b      	add	r3, r1
 8004732:	3305      	adds	r3, #5
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d147      	bne.n	80047ca <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7818      	ldrb	r0, [r3, #0]
 8004740:	4928      	ldr	r1, [pc, #160]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 8004742:	4613      	mov	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	440b      	add	r3, r1
 800474c:	4602      	mov	r2, r0
 800474e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7858      	ldrb	r0, [r3, #1]
 8004756:	4923      	ldr	r1, [pc, #140]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	440b      	add	r3, r1
 8004762:	3301      	adds	r3, #1
 8004764:	4602      	mov	r2, r0
 8004766:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7898      	ldrb	r0, [r3, #2]
 800476e:	491d      	ldr	r1, [pc, #116]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 8004770:	4613      	mov	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	4413      	add	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	440b      	add	r3, r1
 800477a:	3302      	adds	r3, #2
 800477c:	4602      	mov	r2, r0
 800477e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	78d8      	ldrb	r0, [r3, #3]
 8004786:	4917      	ldr	r1, [pc, #92]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 8004788:	4613      	mov	r3, r2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	3303      	adds	r3, #3
 8004794:	4602      	mov	r2, r0
 8004796:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7918      	ldrb	r0, [r3, #4]
 800479e:	4911      	ldr	r1, [pc, #68]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	440b      	add	r3, r1
 80047aa:	3304      	adds	r3, #4
 80047ac:	4602      	mov	r2, r0
 80047ae:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 80047b0:	7bfa      	ldrb	r2, [r7, #15]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7958      	ldrb	r0, [r3, #5]
 80047b6:	490b      	ldr	r1, [pc, #44]	@ (80047e4 <dhcpserver_save_mac+0x140>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	440b      	add	r3, r1
 80047c2:	3305      	adds	r3, #5
 80047c4:	4602      	mov	r2, r0
 80047c6:	701a      	strb	r2, [r3, #0]
      break;
 80047c8:	e007      	b.n	80047da <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3301      	adds	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b07      	cmp	r3, #7
 80047d4:	f67f af70 	bls.w	80046b8 <dhcpserver_save_mac+0x14>
    }
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000684 	.word	0x20000684

080047e8 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e060      	b.n	80048bc <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 80047fa:	4935      	ldr	r1, [pc, #212]	@ (80048d0 <dhcpserver_get_ip+0xe8>)
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	440b      	add	r3, r1
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d151      	bne.n	80048b6 <dhcpserver_get_ip+0xce>
 8004812:	492f      	ldr	r1, [pc, #188]	@ (80048d0 <dhcpserver_get_ip+0xe8>)
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	440b      	add	r3, r1
 8004820:	3301      	adds	r3, #1
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	429a      	cmp	r2, r3
 800482a:	d144      	bne.n	80048b6 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 800482c:	4928      	ldr	r1, [pc, #160]	@ (80048d0 <dhcpserver_get_ip+0xe8>)
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	440b      	add	r3, r1
 800483a:	3302      	adds	r3, #2
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	789b      	ldrb	r3, [r3, #2]
 8004842:	429a      	cmp	r2, r3
 8004844:	d137      	bne.n	80048b6 <dhcpserver_get_ip+0xce>
 8004846:	4922      	ldr	r1, [pc, #136]	@ (80048d0 <dhcpserver_get_ip+0xe8>)
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	440b      	add	r3, r1
 8004854:	3303      	adds	r3, #3
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	78db      	ldrb	r3, [r3, #3]
 800485c:	429a      	cmp	r2, r3
 800485e:	d12a      	bne.n	80048b6 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8004860:	491b      	ldr	r1, [pc, #108]	@ (80048d0 <dhcpserver_get_ip+0xe8>)
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4613      	mov	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	440b      	add	r3, r1
 800486e:	3304      	adds	r3, #4
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	791b      	ldrb	r3, [r3, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d11d      	bne.n	80048b6 <dhcpserver_get_ip+0xce>
 800487a:	4915      	ldr	r1, [pc, #84]	@ (80048d0 <dhcpserver_get_ip+0xe8>)
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	440b      	add	r3, r1
 8004888:	3305      	adds	r3, #5
 800488a:	781a      	ldrb	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	795b      	ldrb	r3, [r3, #5]
 8004890:	429a      	cmp	r2, r3
 8004892:	d110      	bne.n	80048b6 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	330a      	adds	r3, #10
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	4a0e      	ldr	r2, [pc, #56]	@ (80048d4 <dhcpserver_get_ip+0xec>)
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	441a      	add	r2, r3
 80048a0:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <dhcpserver_get_ip+0xf0>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	441a      	add	r2, r3
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <dhcpserver_get_ip+0xf4>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	4413      	add	r3, r2
 80048b0:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	e006      	b.n	80048c4 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b07      	cmp	r3, #7
 80048c0:	d99b      	bls.n	80047fa <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 80048c2:	68bb      	ldr	r3, [r7, #8]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20000684 	.word	0x20000684
 80048d4:	200000a2 	.word	0x200000a2
 80048d8:	200000a3 	.word	0x200000a3
 80048dc:	200000a4 	.word	0x200000a4

080048e0 <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	e03d      	b.n	8004968 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 80048ec:	4923      	ldr	r1, [pc, #140]	@ (800497c <dhcpserver_clear_stored_mac+0x9c>)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	440b      	add	r3, r1
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 80048fe:	491f      	ldr	r1, [pc, #124]	@ (800497c <dhcpserver_clear_stored_mac+0x9c>)
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	440b      	add	r3, r1
 800490c:	3301      	adds	r3, #1
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8004912:	491a      	ldr	r1, [pc, #104]	@ (800497c <dhcpserver_clear_stored_mac+0x9c>)
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	440b      	add	r3, r1
 8004920:	3302      	adds	r3, #2
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8004926:	4915      	ldr	r1, [pc, #84]	@ (800497c <dhcpserver_clear_stored_mac+0x9c>)
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	440b      	add	r3, r1
 8004934:	3303      	adds	r3, #3
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 800493a:	4910      	ldr	r1, [pc, #64]	@ (800497c <dhcpserver_clear_stored_mac+0x9c>)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	440b      	add	r3, r1
 8004948:	3304      	adds	r3, #4
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 800494e:	490b      	ldr	r1, [pc, #44]	@ (800497c <dhcpserver_clear_stored_mac+0x9c>)
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	440b      	add	r3, r1
 800495c:	3305      	adds	r3, #5
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3301      	adds	r3, #1
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b07      	cmp	r3, #7
 800496c:	d9be      	bls.n	80048ec <dhcpserver_clear_stored_mac+0xc>
  }
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000684 	.word	0x20000684

08004980 <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 800498a:	23f0      	movs	r3, #240	@ 0xf0
 800498c:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 800498e:	2332      	movs	r3, #50	@ 0x32
 8004990:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 800499a:	e036      	b.n	8004a0a <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f00d fe90 	bl	80126c8 <pbuf_get_at>
 80049a8:	4603      	mov	r3, r0
 80049aa:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 80049ac:	7c7a      	ldrb	r2, [r7, #17]
 80049ae:	7c3b      	ldrb	r3, [r7, #16]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d11b      	bne.n	80049ec <dhcpserver_find_requested_ip+0x6c>
      index++;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3301      	adds	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f00d fe81 	bl	80126c8 <pbuf_get_at>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73fb      	strb	r3, [r7, #15]
      index++;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3301      	adds	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f00d fc98 	bl	8012310 <pbuf_copy_partial>
      index += size;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
      found = 1;
 80049e8:	2301      	movs	r3, #1
 80049ea:	827b      	strh	r3, [r7, #18]
    }
    index++;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	3301      	adds	r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4619      	mov	r1, r3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f00d fe65 	bl	80126c8 <pbuf_get_at>
 80049fe:	4603      	mov	r3, r0
 8004a00:	3301      	adds	r3, #1
 8004a02:	461a      	mov	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4413      	add	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8004a0a:	7c7b      	ldrb	r3, [r7, #17]
 8004a0c:	2bff      	cmp	r3, #255	@ 0xff
 8004a0e:	d005      	beq.n	8004a1c <dhcpserver_find_requested_ip+0x9c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	891b      	ldrh	r3, [r3, #8]
 8004a14:	461a      	mov	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d3bf      	bcc.n	800499c <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 8004a1c:	8a7b      	ldrh	r3, [r7, #18]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	@ 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t i;
  uint8_t flags = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t client_requested_addr = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 85b8 	beq.w	80055c6 <dhcpserver_fn+0xb9e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	891b      	ldrh	r3, [r3, #8]
 8004a5a:	2bf0      	cmp	r3, #240	@ 0xf0
 8004a5c:	f240 85b3 	bls.w	80055c6 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 8004a60:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8004a64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a68:	2036      	movs	r0, #54	@ 0x36
 8004a6a:	f00c ff63 	bl	8011934 <pbuf_alloc>
 8004a6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 85a9 	beq.w	80055ca <dhcpserver_fn+0xba2>
 8004a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7a:	891b      	ldrh	r3, [r3, #8]
 8004a7c:	2bef      	cmp	r3, #239	@ 0xef
 8004a7e:	f240 85a4 	bls.w	80055ca <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a86:	f00d fb71 	bl	801216c <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a8e:	e014      	b.n	8004aba <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	331c      	adds	r3, #28
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f00d fe14 	bl	80126c8 <pbuf_get_at>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    ethaddr.addr[i] = val;
 8004aa6:	f107 021c 	add.w	r2, r7, #28
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	4413      	add	r3, r2
 8004aae:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004ab2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d9e7      	bls.n	8004a90 <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 8004ac0:	f107 031c 	add.w	r3, r7, #28
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fded 	bl	80046a4 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8004aca:	f107 031c 	add.w	r3, r7, #28
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fe8a 	bl	80047e8 <dhcpserver_get_ip>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8577 	beq.w	80055ce <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 8004ae0:	f107 021c 	add.w	r2, r7, #28
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f016 ff18 	bl	801b920 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 8004af0:	21f2      	movs	r1, #242	@ 0xf2
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f00d fde8 	bl	80126c8 <pbuf_get_at>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  switch (val) {
 8004afe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d004      	beq.n	8004b10 <dhcpserver_fn+0xe8>
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	f000 826a 	beq.w	8004fe0 <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8004b0c:	f000 bd62 	b.w	80055d4 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8004b10:	2202      	movs	r2, #2
 8004b12:	2100      	movs	r1, #0
 8004b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b16:	f00d fe10 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2108      	movs	r1, #8
 8004b1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b20:	f00d fe0b 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8004b24:	2200      	movs	r2, #0
 8004b26:	210a      	movs	r1, #10
 8004b28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b2a:	f00d fe06 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	2110      	movs	r1, #16
 8004b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b38:	f00d fdff 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	2111      	movs	r1, #17
 8004b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b48:	f00d fdf7 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	2112      	movs	r1, #18
 8004b56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b58:	f00d fdef 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	0e1b      	lsrs	r3, r3, #24
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	2113      	movs	r1, #19
 8004b66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b68:	f00d fde7 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2114      	movs	r1, #20
 8004b70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b72:	f00d fde2 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8004b76:	2200      	movs	r2, #0
 8004b78:	2115      	movs	r1, #21
 8004b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b7c:	f00d fddd 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2116      	movs	r1, #22
 8004b84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b86:	f00d fdd8 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2117      	movs	r1, #23
 8004b8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b90:	f00d fdd3 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8004b94:	2263      	movs	r2, #99	@ 0x63
 8004b96:	21ec      	movs	r1, #236	@ 0xec
 8004b98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b9a:	f00d fdce 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8004b9e:	2282      	movs	r2, #130	@ 0x82
 8004ba0:	21ed      	movs	r1, #237	@ 0xed
 8004ba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ba4:	f00d fdc9 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8004ba8:	2253      	movs	r2, #83	@ 0x53
 8004baa:	21ee      	movs	r1, #238	@ 0xee
 8004bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bae:	f00d fdc4 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8004bb2:	2263      	movs	r2, #99	@ 0x63
 8004bb4:	21ef      	movs	r1, #239	@ 0xef
 8004bb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bb8:	f00d fdbf 	bl	801273a <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8004bbc:	23f0      	movs	r3, #240	@ 0xf0
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2235      	movs	r2, #53	@ 0x35
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bca:	f00d fdb6 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bde:	f00d fdac 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	3301      	adds	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2202      	movs	r2, #2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bf2:	f00d fda2 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2201      	movs	r2, #1
 8004c02:	4619      	mov	r1, r3
 8004c04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c06:	f00d fd98 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2204      	movs	r2, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c1a:	f00d fd8e 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	3301      	adds	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8004c24:	4ba8      	ldr	r3, [pc, #672]	@ (8004ec8 <dhcpserver_fn+0x4a0>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	061a      	lsls	r2, r3, #24
 8004c2a:	4ba8      	ldr	r3, [pc, #672]	@ (8004ecc <dhcpserver_fn+0x4a4>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	4ba7      	ldr	r3, [pc, #668]	@ (8004ed0 <dhcpserver_fn+0x4a8>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ed4 <dhcpserver_fn+0x4ac>)
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	061a      	lsls	r2, r3, #24
 8004c42:	4ba1      	ldr	r3, [pc, #644]	@ (8004ec8 <dhcpserver_fn+0x4a0>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	0619      	lsls	r1, r3, #24
 8004c48:	4ba0      	ldr	r3, [pc, #640]	@ (8004ecc <dhcpserver_fn+0x4a4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	4319      	orrs	r1, r3
 8004c50:	4b9f      	ldr	r3, [pc, #636]	@ (8004ed0 <dhcpserver_fn+0x4a8>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	499e      	ldr	r1, [pc, #632]	@ (8004ed4 <dhcpserver_fn+0x4ac>)
 8004c5a:	7809      	ldrb	r1, [r1, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c64:	431a      	orrs	r2, r3
 8004c66:	4b98      	ldr	r3, [pc, #608]	@ (8004ec8 <dhcpserver_fn+0x4a0>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	0619      	lsls	r1, r3, #24
 8004c6c:	4b97      	ldr	r3, [pc, #604]	@ (8004ecc <dhcpserver_fn+0x4a4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	4319      	orrs	r1, r3
 8004c74:	4b96      	ldr	r3, [pc, #600]	@ (8004ed0 <dhcpserver_fn+0x4a8>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	4995      	ldr	r1, [pc, #596]	@ (8004ed4 <dhcpserver_fn+0x4ac>)
 8004c7e:	7809      	ldrb	r1, [r1, #0]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ec8 <dhcpserver_fn+0x4a0>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	0619      	lsls	r1, r3, #24
 8004c90:	4b8e      	ldr	r3, [pc, #568]	@ (8004ecc <dhcpserver_fn+0x4a4>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	4319      	orrs	r1, r3
 8004c98:	4b8d      	ldr	r3, [pc, #564]	@ (8004ed0 <dhcpserver_fn+0x4a8>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	498c      	ldr	r1, [pc, #560]	@ (8004ed4 <dhcpserver_fn+0x4ac>)
 8004ca2:	7809      	ldrb	r1, [r1, #0]
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	0e1b      	lsrs	r3, r3, #24
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cb8:	f00d fd3f 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	b299      	uxth	r1, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cce:	f00d fd34 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	b299      	uxth	r1, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ce4:	f00d fd29 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3303      	adds	r3, #3
 8004cee:	b299      	uxth	r1, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	0e1b      	lsrs	r3, r3, #24
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cfa:	f00d fd1e 	bl	801273a <pbuf_put_at>
      options_offset += 4;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	3304      	adds	r3, #4
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2203      	movs	r2, #3
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d0e:	f00d fd14 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	3301      	adds	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d22:	f00d fd0a 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	3301      	adds	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed8 <dhcpserver_fn+0x4b0>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	061a      	lsls	r2, r3, #24
 8004d32:	4b6a      	ldr	r3, [pc, #424]	@ (8004edc <dhcpserver_fn+0x4b4>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	4b69      	ldr	r3, [pc, #420]	@ (8004ee0 <dhcpserver_fn+0x4b8>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	4313      	orrs	r3, r2
 8004d42:	4a68      	ldr	r2, [pc, #416]	@ (8004ee4 <dhcpserver_fn+0x4bc>)
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	061a      	lsls	r2, r3, #24
 8004d4a:	4b63      	ldr	r3, [pc, #396]	@ (8004ed8 <dhcpserver_fn+0x4b0>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	0619      	lsls	r1, r3, #24
 8004d50:	4b62      	ldr	r3, [pc, #392]	@ (8004edc <dhcpserver_fn+0x4b4>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	4319      	orrs	r1, r3
 8004d58:	4b61      	ldr	r3, [pc, #388]	@ (8004ee0 <dhcpserver_fn+0x4b8>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	4960      	ldr	r1, [pc, #384]	@ (8004ee4 <dhcpserver_fn+0x4bc>)
 8004d62:	7809      	ldrb	r1, [r1, #0]
 8004d64:	430b      	orrs	r3, r1
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed8 <dhcpserver_fn+0x4b0>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	0619      	lsls	r1, r3, #24
 8004d74:	4b59      	ldr	r3, [pc, #356]	@ (8004edc <dhcpserver_fn+0x4b4>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	4319      	orrs	r1, r3
 8004d7c:	4b58      	ldr	r3, [pc, #352]	@ (8004ee0 <dhcpserver_fn+0x4b8>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	430b      	orrs	r3, r1
 8004d84:	4957      	ldr	r1, [pc, #348]	@ (8004ee4 <dhcpserver_fn+0x4bc>)
 8004d86:	7809      	ldrb	r1, [r1, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d90:	431a      	orrs	r2, r3
 8004d92:	4b51      	ldr	r3, [pc, #324]	@ (8004ed8 <dhcpserver_fn+0x4b0>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	0619      	lsls	r1, r3, #24
 8004d98:	4b50      	ldr	r3, [pc, #320]	@ (8004edc <dhcpserver_fn+0x4b4>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	041b      	lsls	r3, r3, #16
 8004d9e:	4319      	orrs	r1, r3
 8004da0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ee0 <dhcpserver_fn+0x4b8>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	430b      	orrs	r3, r1
 8004da8:	494e      	ldr	r1, [pc, #312]	@ (8004ee4 <dhcpserver_fn+0x4bc>)
 8004daa:	7809      	ldrb	r1, [r1, #0]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	0e1b      	lsrs	r3, r3, #24
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dc0:	f00d fcbb 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	b299      	uxth	r1, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dd6:	f00d fcb0 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3302      	adds	r3, #2
 8004de0:	b299      	uxth	r1, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dec:	f00d fca5 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3303      	adds	r3, #3
 8004df6:	b299      	uxth	r1, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	0e1b      	lsrs	r3, r3, #24
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e02:	f00d fc9a 	bl	801273a <pbuf_put_at>
      options_offset += 4;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	3304      	adds	r3, #4
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2233      	movs	r2, #51	@ 0x33
 8004e12:	4619      	mov	r1, r3
 8004e14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e16:	f00d fc90 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2204      	movs	r2, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e2a:	f00d fc86 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	3301      	adds	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e3e:	f00d fc7c 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e50:	f00d fc73 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3302      	adds	r3, #2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2251      	movs	r2, #81	@ 0x51
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e62:	f00d fc6a 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3303      	adds	r3, #3
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	4619      	mov	r1, r3
 8004e72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e74:	f00d fc61 	bl	801273a <pbuf_put_at>
      options_offset += 4;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2236      	movs	r2, #54	@ 0x36
 8004e84:	4619      	mov	r1, r3
 8004e86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e88:	f00d fc57 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	3301      	adds	r3, #1
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2204      	movs	r2, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e9c:	f00d fc4d 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <dhcpserver_fn+0x4b0>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	061a      	lsls	r2, r3, #24
 8004eac:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <dhcpserver_fn+0x4b4>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <dhcpserver_fn+0x4b8>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <dhcpserver_fn+0x4bc>)
 8004ebe:	7812      	ldrb	r2, [r2, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	061a      	lsls	r2, r3, #24
 8004ec4:	e010      	b.n	8004ee8 <dhcpserver_fn+0x4c0>
 8004ec6:	bf00      	nop
 8004ec8:	200000a6 	.word	0x200000a6
 8004ecc:	200000a7 	.word	0x200000a7
 8004ed0:	200000a8 	.word	0x200000a8
 8004ed4:	20000980 	.word	0x20000980
 8004ed8:	200000a2 	.word	0x200000a2
 8004edc:	200000a3 	.word	0x200000a3
 8004ee0:	200000a4 	.word	0x200000a4
 8004ee4:	200000a5 	.word	0x200000a5
 8004ee8:	4b54      	ldr	r3, [pc, #336]	@ (800503c <dhcpserver_fn+0x614>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	0619      	lsls	r1, r3, #24
 8004eee:	4b54      	ldr	r3, [pc, #336]	@ (8005040 <dhcpserver_fn+0x618>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	4319      	orrs	r1, r3
 8004ef6:	4b53      	ldr	r3, [pc, #332]	@ (8005044 <dhcpserver_fn+0x61c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	430b      	orrs	r3, r1
 8004efe:	4952      	ldr	r1, [pc, #328]	@ (8005048 <dhcpserver_fn+0x620>)
 8004f00:	7809      	ldrb	r1, [r1, #0]
 8004f02:	430b      	orrs	r3, r1
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800503c <dhcpserver_fn+0x614>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	0619      	lsls	r1, r3, #24
 8004f12:	4b4b      	ldr	r3, [pc, #300]	@ (8005040 <dhcpserver_fn+0x618>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	4319      	orrs	r1, r3
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005044 <dhcpserver_fn+0x61c>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	430b      	orrs	r3, r1
 8004f22:	4949      	ldr	r1, [pc, #292]	@ (8005048 <dhcpserver_fn+0x620>)
 8004f24:	7809      	ldrb	r1, [r1, #0]
 8004f26:	430b      	orrs	r3, r1
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	4b42      	ldr	r3, [pc, #264]	@ (800503c <dhcpserver_fn+0x614>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	0619      	lsls	r1, r3, #24
 8004f36:	4b42      	ldr	r3, [pc, #264]	@ (8005040 <dhcpserver_fn+0x618>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	4319      	orrs	r1, r3
 8004f3e:	4b41      	ldr	r3, [pc, #260]	@ (8005044 <dhcpserver_fn+0x61c>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	430b      	orrs	r3, r1
 8004f46:	4940      	ldr	r1, [pc, #256]	@ (8005048 <dhcpserver_fn+0x620>)
 8004f48:	7809      	ldrb	r1, [r1, #0]
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	0e1b      	lsrs	r3, r3, #24
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f5e:	f00d fbec 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3301      	adds	r3, #1
 8004f68:	b299      	uxth	r1, r3
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f74:	f00d fbe1 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	b299      	uxth	r1, r3
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f8a:	f00d fbd6 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3303      	adds	r3, #3
 8004f94:	b299      	uxth	r1, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	0e1b      	lsrs	r3, r3, #24
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fa0:	f00d fbcb 	bl	801273a <pbuf_put_at>
      options_offset += 4;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	22ff      	movs	r2, #255	@ 0xff
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fb4:	f00d fbc1 	bl	801273a <pbuf_put_at>
      options_offset++;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	3301      	adds	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fc6:	f00c fe17 	bl	8011bf8 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8004fca:	4b20      	ldr	r3, [pc, #128]	@ (800504c <dhcpserver_fn+0x624>)
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	f107 0214 	add.w	r2, r7, #20
 8004fd2:	2344      	movs	r3, #68	@ 0x44
 8004fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fd6:	f013 ff1b 	bl	8018e10 <udp_sendto>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
      break;
 8004fde:	e2f9      	b.n	80055d4 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fe6:	f00d fba8 	bl	801273a <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2108      	movs	r1, #8
 8004fee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ff0:	f00d fba3 	bl	801273a <pbuf_put_at>
      flags = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8004ffa:	210a      	movs	r1, #10
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f00d fb63 	bl	80126c8 <pbuf_get_at>
 8005002:	4603      	mov	r3, r0
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      if (flags & 0x80) {
 8005008:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800500c:	2b00      	cmp	r3, #0
 800500e:	da1f      	bge.n	8005050 <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8005010:	210a      	movs	r1, #10
 8005012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005014:	f00d fb58 	bl	80126c8 <pbuf_get_at>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags |= 0x80;
 800501e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005022:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800502a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800502e:	461a      	mov	r2, r3
 8005030:	210a      	movs	r1, #10
 8005032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005034:	f00d fb81 	bl	801273a <pbuf_put_at>
 8005038:	e01e      	b.n	8005078 <dhcpserver_fn+0x650>
 800503a:	bf00      	nop
 800503c:	200000a2 	.word	0x200000a2
 8005040:	200000a3 	.word	0x200000a3
 8005044:	200000a4 	.word	0x200000a4
 8005048:	200000a5 	.word	0x200000a5
 800504c:	20000680 	.word	0x20000680
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8005050:	210a      	movs	r1, #10
 8005052:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005054:	f00d fb38 	bl	80126c8 <pbuf_get_at>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags &= ~0x80;
 800505e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800506a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800506e:	461a      	mov	r2, r3
 8005070:	210a      	movs	r1, #10
 8005072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005074:	f00d fb61 	bl	801273a <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8005078:	f107 0318 	add.w	r3, r7, #24
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fc7e 	bl	8004980 <dhcpserver_find_requested_ip>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 82a3 	beq.w	80055d2 <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	429a      	cmp	r2, r3
 8005092:	f040 8249 	bne.w	8005528 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	2110      	movs	r1, #16
 800509e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050a0:	f00d fb4b 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	2111      	movs	r1, #17
 80050ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050b0:	f00d fb43 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	2112      	movs	r1, #18
 80050be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050c0:	f00d fb3b 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	0e1b      	lsrs	r3, r3, #24
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	2113      	movs	r1, #19
 80050ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050d0:	f00d fb33 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 80050d4:	2200      	movs	r2, #0
 80050d6:	2114      	movs	r1, #20
 80050d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050da:	f00d fb2e 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 80050de:	2200      	movs	r2, #0
 80050e0:	2115      	movs	r1, #21
 80050e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050e4:	f00d fb29 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 80050e8:	2200      	movs	r2, #0
 80050ea:	2116      	movs	r1, #22
 80050ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050ee:	f00d fb24 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80050f2:	2200      	movs	r2, #0
 80050f4:	2117      	movs	r1, #23
 80050f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050f8:	f00d fb1f 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 80050fc:	2263      	movs	r2, #99	@ 0x63
 80050fe:	21ec      	movs	r1, #236	@ 0xec
 8005100:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005102:	f00d fb1a 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8005106:	2282      	movs	r2, #130	@ 0x82
 8005108:	21ed      	movs	r1, #237	@ 0xed
 800510a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800510c:	f00d fb15 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8005110:	2253      	movs	r2, #83	@ 0x53
 8005112:	21ee      	movs	r1, #238	@ 0xee
 8005114:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005116:	f00d fb10 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 800511a:	2263      	movs	r2, #99	@ 0x63
 800511c:	21ef      	movs	r1, #239	@ 0xef
 800511e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005120:	f00d fb0b 	bl	801273a <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8005124:	23f0      	movs	r3, #240	@ 0xf0
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	b29b      	uxth	r3, r3
 800512c:	2235      	movs	r2, #53	@ 0x35
 800512e:	4619      	mov	r1, r3
 8005130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005132:	f00d fb02 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	3301      	adds	r3, #1
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	b29b      	uxth	r3, r3
 8005140:	2201      	movs	r2, #1
 8005142:	4619      	mov	r1, r3
 8005144:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005146:	f00d faf8 	bl	801273a <pbuf_put_at>
        options_offset++;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	b29b      	uxth	r3, r3
 8005154:	2205      	movs	r2, #5
 8005156:	4619      	mov	r1, r3
 8005158:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800515a:	f00d faee 	bl	801273a <pbuf_put_at>
        options_offset++;
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	3301      	adds	r3, #1
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	b29b      	uxth	r3, r3
 8005168:	2201      	movs	r2, #1
 800516a:	4619      	mov	r1, r3
 800516c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800516e:	f00d fae4 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	3301      	adds	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	b29b      	uxth	r3, r3
 800517c:	2204      	movs	r2, #4
 800517e:	4619      	mov	r1, r3
 8005180:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005182:	f00d fada 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	3301      	adds	r3, #1
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 800518c:	4ba8      	ldr	r3, [pc, #672]	@ (8005430 <dhcpserver_fn+0xa08>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	061a      	lsls	r2, r3, #24
 8005192:	4ba8      	ldr	r3, [pc, #672]	@ (8005434 <dhcpserver_fn+0xa0c>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	431a      	orrs	r2, r3
 800519a:	4ba7      	ldr	r3, [pc, #668]	@ (8005438 <dhcpserver_fn+0xa10>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4aa6      	ldr	r2, [pc, #664]	@ (800543c <dhcpserver_fn+0xa14>)
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	061a      	lsls	r2, r3, #24
 80051aa:	4ba1      	ldr	r3, [pc, #644]	@ (8005430 <dhcpserver_fn+0xa08>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	0619      	lsls	r1, r3, #24
 80051b0:	4ba0      	ldr	r3, [pc, #640]	@ (8005434 <dhcpserver_fn+0xa0c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	4319      	orrs	r1, r3
 80051b8:	4b9f      	ldr	r3, [pc, #636]	@ (8005438 <dhcpserver_fn+0xa10>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	430b      	orrs	r3, r1
 80051c0:	499e      	ldr	r1, [pc, #632]	@ (800543c <dhcpserver_fn+0xa14>)
 80051c2:	7809      	ldrb	r1, [r1, #0]
 80051c4:	430b      	orrs	r3, r1
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051cc:	431a      	orrs	r2, r3
 80051ce:	4b98      	ldr	r3, [pc, #608]	@ (8005430 <dhcpserver_fn+0xa08>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	0619      	lsls	r1, r3, #24
 80051d4:	4b97      	ldr	r3, [pc, #604]	@ (8005434 <dhcpserver_fn+0xa0c>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	4319      	orrs	r1, r3
 80051dc:	4b96      	ldr	r3, [pc, #600]	@ (8005438 <dhcpserver_fn+0xa10>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	430b      	orrs	r3, r1
 80051e4:	4995      	ldr	r1, [pc, #596]	@ (800543c <dhcpserver_fn+0xa14>)
 80051e6:	7809      	ldrb	r1, [r1, #0]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80051f0:	431a      	orrs	r2, r3
 80051f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005430 <dhcpserver_fn+0xa08>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	0619      	lsls	r1, r3, #24
 80051f8:	4b8e      	ldr	r3, [pc, #568]	@ (8005434 <dhcpserver_fn+0xa0c>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	4319      	orrs	r1, r3
 8005200:	4b8d      	ldr	r3, [pc, #564]	@ (8005438 <dhcpserver_fn+0xa10>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	430b      	orrs	r3, r1
 8005208:	498c      	ldr	r1, [pc, #560]	@ (800543c <dhcpserver_fn+0xa14>)
 800520a:	7809      	ldrb	r1, [r1, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	0e1b      	lsrs	r3, r3, #24
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	b29b      	uxth	r3, r3
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	4619      	mov	r1, r3
 800521e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005220:	f00d fa8b 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	b29b      	uxth	r3, r3
 8005228:	3301      	adds	r3, #1
 800522a:	b299      	uxth	r1, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005236:	f00d fa80 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	b29b      	uxth	r3, r3
 800523e:	3302      	adds	r3, #2
 8005240:	b299      	uxth	r1, r3
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800524c:	f00d fa75 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	b29b      	uxth	r3, r3
 8005254:	3303      	adds	r3, #3
 8005256:	b299      	uxth	r1, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	0e1b      	lsrs	r3, r3, #24
 800525c:	b2db      	uxtb	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005262:	f00d fa6a 	bl	801273a <pbuf_put_at>
        options_offset += 4;
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	3304      	adds	r3, #4
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	b29b      	uxth	r3, r3
 8005270:	2203      	movs	r2, #3
 8005272:	4619      	mov	r1, r3
 8005274:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005276:	f00d fa60 	bl	801273a <pbuf_put_at>
        options_offset++;
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	3301      	adds	r3, #1
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	b29b      	uxth	r3, r3
 8005284:	2204      	movs	r2, #4
 8005286:	4619      	mov	r1, r3
 8005288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800528a:	f00d fa56 	bl	801273a <pbuf_put_at>
        options_offset++;
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	3301      	adds	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8005294:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <dhcpserver_fn+0xa18>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	061a      	lsls	r2, r3, #24
 800529a:	4b6a      	ldr	r3, [pc, #424]	@ (8005444 <dhcpserver_fn+0xa1c>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
 80052a2:	4b69      	ldr	r3, [pc, #420]	@ (8005448 <dhcpserver_fn+0xa20>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	4313      	orrs	r3, r2
 80052aa:	4a68      	ldr	r2, [pc, #416]	@ (800544c <dhcpserver_fn+0xa24>)
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	061a      	lsls	r2, r3, #24
 80052b2:	4b63      	ldr	r3, [pc, #396]	@ (8005440 <dhcpserver_fn+0xa18>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	0619      	lsls	r1, r3, #24
 80052b8:	4b62      	ldr	r3, [pc, #392]	@ (8005444 <dhcpserver_fn+0xa1c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	4319      	orrs	r1, r3
 80052c0:	4b61      	ldr	r3, [pc, #388]	@ (8005448 <dhcpserver_fn+0xa20>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	430b      	orrs	r3, r1
 80052c8:	4960      	ldr	r1, [pc, #384]	@ (800544c <dhcpserver_fn+0xa24>)
 80052ca:	7809      	ldrb	r1, [r1, #0]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80052d4:	431a      	orrs	r2, r3
 80052d6:	4b5a      	ldr	r3, [pc, #360]	@ (8005440 <dhcpserver_fn+0xa18>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	0619      	lsls	r1, r3, #24
 80052dc:	4b59      	ldr	r3, [pc, #356]	@ (8005444 <dhcpserver_fn+0xa1c>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	4319      	orrs	r1, r3
 80052e4:	4b58      	ldr	r3, [pc, #352]	@ (8005448 <dhcpserver_fn+0xa20>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	430b      	orrs	r3, r1
 80052ec:	4957      	ldr	r1, [pc, #348]	@ (800544c <dhcpserver_fn+0xa24>)
 80052ee:	7809      	ldrb	r1, [r1, #0]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80052f8:	431a      	orrs	r2, r3
 80052fa:	4b51      	ldr	r3, [pc, #324]	@ (8005440 <dhcpserver_fn+0xa18>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	0619      	lsls	r1, r3, #24
 8005300:	4b50      	ldr	r3, [pc, #320]	@ (8005444 <dhcpserver_fn+0xa1c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	4319      	orrs	r1, r3
 8005308:	4b4f      	ldr	r3, [pc, #316]	@ (8005448 <dhcpserver_fn+0xa20>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	430b      	orrs	r3, r1
 8005310:	494e      	ldr	r1, [pc, #312]	@ (800544c <dhcpserver_fn+0xa24>)
 8005312:	7809      	ldrb	r1, [r1, #0]
 8005314:	430b      	orrs	r3, r1
 8005316:	0e1b      	lsrs	r3, r3, #24
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	b29b      	uxth	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	4619      	mov	r1, r3
 8005326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005328:	f00d fa07 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	b29b      	uxth	r3, r3
 8005330:	3301      	adds	r3, #1
 8005332:	b299      	uxth	r1, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800533e:	f00d f9fc 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	b29b      	uxth	r3, r3
 8005346:	3302      	adds	r3, #2
 8005348:	b299      	uxth	r1, r3
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005354:	f00d f9f1 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	b29b      	uxth	r3, r3
 800535c:	3303      	adds	r3, #3
 800535e:	b299      	uxth	r1, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	0e1b      	lsrs	r3, r3, #24
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800536a:	f00d f9e6 	bl	801273a <pbuf_put_at>
        options_offset += 4;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	3304      	adds	r3, #4
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	b29b      	uxth	r3, r3
 8005378:	2233      	movs	r2, #51	@ 0x33
 800537a:	4619      	mov	r1, r3
 800537c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800537e:	f00d f9dc 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	3301      	adds	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	b29b      	uxth	r3, r3
 800538c:	2204      	movs	r2, #4
 800538e:	4619      	mov	r1, r3
 8005390:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005392:	f00d f9d2 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	3301      	adds	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	4619      	mov	r1, r3
 80053a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053a6:	f00d f9c8 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3301      	adds	r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2201      	movs	r2, #1
 80053b4:	4619      	mov	r1, r3
 80053b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053b8:	f00d f9bf 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3302      	adds	r3, #2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2251      	movs	r2, #81	@ 0x51
 80053c6:	4619      	mov	r1, r3
 80053c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053ca:	f00d f9b6 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3303      	adds	r3, #3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2280      	movs	r2, #128	@ 0x80
 80053d8:	4619      	mov	r1, r3
 80053da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053dc:	f00d f9ad 	bl	801273a <pbuf_put_at>
        options_offset += 4;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	3304      	adds	r3, #4
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2236      	movs	r2, #54	@ 0x36
 80053ec:	4619      	mov	r1, r3
 80053ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053f0:	f00d f9a3 	bl	801273a <pbuf_put_at>
        options_offset++;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	3301      	adds	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2204      	movs	r2, #4
 8005400:	4619      	mov	r1, r3
 8005402:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005404:	f00d f999 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	3301      	adds	r3, #1
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 800540e:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <dhcpserver_fn+0xa18>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	061a      	lsls	r2, r3, #24
 8005414:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <dhcpserver_fn+0xa1c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	431a      	orrs	r2, r3
 800541c:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <dhcpserver_fn+0xa20>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	4313      	orrs	r3, r2
 8005424:	4a09      	ldr	r2, [pc, #36]	@ (800544c <dhcpserver_fn+0xa24>)
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	4313      	orrs	r3, r2
 800542a:	061a      	lsls	r2, r3, #24
 800542c:	e010      	b.n	8005450 <dhcpserver_fn+0xa28>
 800542e:	bf00      	nop
 8005430:	200000a6 	.word	0x200000a6
 8005434:	200000a7 	.word	0x200000a7
 8005438:	200000a8 	.word	0x200000a8
 800543c:	20000980 	.word	0x20000980
 8005440:	200000a2 	.word	0x200000a2
 8005444:	200000a3 	.word	0x200000a3
 8005448:	200000a4 	.word	0x200000a4
 800544c:	200000a5 	.word	0x200000a5
 8005450:	4b67      	ldr	r3, [pc, #412]	@ (80055f0 <dhcpserver_fn+0xbc8>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	0619      	lsls	r1, r3, #24
 8005456:	4b67      	ldr	r3, [pc, #412]	@ (80055f4 <dhcpserver_fn+0xbcc>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	4319      	orrs	r1, r3
 800545e:	4b66      	ldr	r3, [pc, #408]	@ (80055f8 <dhcpserver_fn+0xbd0>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	430b      	orrs	r3, r1
 8005466:	4965      	ldr	r1, [pc, #404]	@ (80055fc <dhcpserver_fn+0xbd4>)
 8005468:	7809      	ldrb	r1, [r1, #0]
 800546a:	430b      	orrs	r3, r1
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005472:	431a      	orrs	r2, r3
 8005474:	4b5e      	ldr	r3, [pc, #376]	@ (80055f0 <dhcpserver_fn+0xbc8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	0619      	lsls	r1, r3, #24
 800547a:	4b5e      	ldr	r3, [pc, #376]	@ (80055f4 <dhcpserver_fn+0xbcc>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	4319      	orrs	r1, r3
 8005482:	4b5d      	ldr	r3, [pc, #372]	@ (80055f8 <dhcpserver_fn+0xbd0>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	430b      	orrs	r3, r1
 800548a:	495c      	ldr	r1, [pc, #368]	@ (80055fc <dhcpserver_fn+0xbd4>)
 800548c:	7809      	ldrb	r1, [r1, #0]
 800548e:	430b      	orrs	r3, r1
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005496:	431a      	orrs	r2, r3
 8005498:	4b55      	ldr	r3, [pc, #340]	@ (80055f0 <dhcpserver_fn+0xbc8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	0619      	lsls	r1, r3, #24
 800549e:	4b55      	ldr	r3, [pc, #340]	@ (80055f4 <dhcpserver_fn+0xbcc>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	4319      	orrs	r1, r3
 80054a6:	4b54      	ldr	r3, [pc, #336]	@ (80055f8 <dhcpserver_fn+0xbd0>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	430b      	orrs	r3, r1
 80054ae:	4953      	ldr	r1, [pc, #332]	@ (80055fc <dhcpserver_fn+0xbd4>)
 80054b0:	7809      	ldrb	r1, [r1, #0]
 80054b2:	430b      	orrs	r3, r1
 80054b4:	0e1b      	lsrs	r3, r3, #24
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	b29b      	uxth	r3, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054c6:	f00d f938 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3301      	adds	r3, #1
 80054d0:	b299      	uxth	r1, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054dc:	f00d f92d 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3302      	adds	r3, #2
 80054e6:	b299      	uxth	r1, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054f2:	f00d f922 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3303      	adds	r3, #3
 80054fc:	b299      	uxth	r1, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	0e1b      	lsrs	r3, r3, #24
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005508:	f00d f917 	bl	801273a <pbuf_put_at>
        options_offset += 4;
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	3304      	adds	r3, #4
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	b29b      	uxth	r3, r3
 8005516:	22ff      	movs	r2, #255	@ 0xff
 8005518:	4619      	mov	r1, r3
 800551a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800551c:	f00d f90d 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	3301      	adds	r3, #1
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
 8005526:	e03d      	b.n	80055a4 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8005528:	2263      	movs	r2, #99	@ 0x63
 800552a:	21ec      	movs	r1, #236	@ 0xec
 800552c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800552e:	f00d f904 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8005532:	2282      	movs	r2, #130	@ 0x82
 8005534:	21ed      	movs	r1, #237	@ 0xed
 8005536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005538:	f00d f8ff 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 800553c:	2253      	movs	r2, #83	@ 0x53
 800553e:	21ee      	movs	r1, #238	@ 0xee
 8005540:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005542:	f00d f8fa 	bl	801273a <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8005546:	2263      	movs	r2, #99	@ 0x63
 8005548:	21ef      	movs	r1, #239	@ 0xef
 800554a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800554c:	f00d f8f5 	bl	801273a <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8005550:	23f0      	movs	r3, #240	@ 0xf0
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	b29b      	uxth	r3, r3
 8005558:	2235      	movs	r2, #53	@ 0x35
 800555a:	4619      	mov	r1, r3
 800555c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800555e:	f00d f8ec 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	b29b      	uxth	r3, r3
 800556c:	2201      	movs	r2, #1
 800556e:	4619      	mov	r1, r3
 8005570:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005572:	f00d f8e2 	bl	801273a <pbuf_put_at>
        options_offset++;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	3301      	adds	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	b29b      	uxth	r3, r3
 8005580:	2206      	movs	r2, #6
 8005582:	4619      	mov	r1, r3
 8005584:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005586:	f00d f8d8 	bl	801273a <pbuf_put_at>
        options_offset++;
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	3301      	adds	r3, #1
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	b29b      	uxth	r3, r3
 8005594:	22ff      	movs	r2, #255	@ 0xff
 8005596:	4619      	mov	r1, r3
 8005598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800559a:	f00d f8ce 	bl	801273a <pbuf_put_at>
        options_offset++;
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	3301      	adds	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4619      	mov	r1, r3
 80055aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055ac:	f00c fb24 	bl	8011bf8 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 80055b0:	4b13      	ldr	r3, [pc, #76]	@ (8005600 <dhcpserver_fn+0xbd8>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	f107 0214 	add.w	r2, r7, #20
 80055b8:	2344      	movs	r3, #68	@ 0x44
 80055ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055bc:	f013 fc28 	bl	8018e10 <udp_sendto>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
      break;
 80055c4:	e006      	b.n	80055d4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 80055c6:	bf00      	nop
 80055c8:	e004      	b.n	80055d4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 80055d2:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 80055da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055dc:	f00c fc92 	bl	8011f04 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f00c fc8f 	bl	8011f04 <pbuf_free>
}
 80055e6:	bf00      	nop
 80055e8:	3730      	adds	r7, #48	@ 0x30
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200000a2 	.word	0x200000a2
 80055f4:	200000a3 	.word	0x200000a3
 80055f8:	200000a4 	.word	0x200000a4
 80055fc:	200000a5 	.word	0x200000a5
 8005600:	20000680 	.word	0x20000680

08005604 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e03d      	b.n	800568e <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8005612:	4933      	ldr	r1, [pc, #204]	@ (80056e0 <dhcpserver_start_prv+0xdc>)
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4613      	mov	r3, r2
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	4413      	add	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	440b      	add	r3, r1
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8005624:	492e      	ldr	r1, [pc, #184]	@ (80056e0 <dhcpserver_start_prv+0xdc>)
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	440b      	add	r3, r1
 8005632:	3301      	adds	r3, #1
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8005638:	4929      	ldr	r1, [pc, #164]	@ (80056e0 <dhcpserver_start_prv+0xdc>)
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	440b      	add	r3, r1
 8005646:	3302      	adds	r3, #2
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 800564c:	4924      	ldr	r1, [pc, #144]	@ (80056e0 <dhcpserver_start_prv+0xdc>)
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4613      	mov	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4413      	add	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	440b      	add	r3, r1
 800565a:	3303      	adds	r3, #3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8005660:	491f      	ldr	r1, [pc, #124]	@ (80056e0 <dhcpserver_start_prv+0xdc>)
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	440b      	add	r3, r1
 800566e:	3304      	adds	r3, #4
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8005674:	491a      	ldr	r1, [pc, #104]	@ (80056e0 <dhcpserver_start_prv+0xdc>)
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4413      	add	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	440b      	add	r3, r1
 8005682:	3305      	adds	r3, #5
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b07      	cmp	r3, #7
 8005692:	d9be      	bls.n	8005612 <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8005694:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <dhcpserver_start_prv+0xe0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d11e      	bne.n	80056da <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 800569c:	f013 ff08 	bl	80194b0 <udp_new>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4a10      	ldr	r2, [pc, #64]	@ (80056e4 <dhcpserver_start_prv+0xe0>)
 80056a4:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 80056a6:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <dhcpserver_start_prv+0xe0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d014      	beq.n	80056d8 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <dhcpserver_start_prv+0xe0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2243      	movs	r2, #67	@ 0x43
 80056b4:	490c      	ldr	r1, [pc, #48]	@ (80056e8 <dhcpserver_start_prv+0xe4>)
 80056b6:	4618      	mov	r0, r3
 80056b8:	f013 fd60 	bl	801917c <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 80056bc:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <dhcpserver_start_prv+0xe0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	490a      	ldr	r1, [pc, #40]	@ (80056ec <dhcpserver_start_prv+0xe8>)
 80056c2:	4618      	mov	r0, r3
 80056c4:	f013 fde2 	bl	801928c <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <dhcpserver_start_prv+0xe0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	4908      	ldr	r1, [pc, #32]	@ (80056f0 <dhcpserver_start_prv+0xec>)
 80056d0:	4618      	mov	r0, r3
 80056d2:	f013 fe8b 	bl	80193ec <udp_recv>
 80056d6:	e000      	b.n	80056da <dhcpserver_start_prv+0xd6>
      return;
 80056d8:	bf00      	nop
  }
}
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000684 	.word	0x20000684
 80056e4:	20000680 	.word	0x20000680
 80056e8:	08071298 	.word	0x08071298
 80056ec:	20000910 	.word	0x20000910
 80056f0:	08004a29 	.word	0x08004a29

080056f4 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 80056f8:	2100      	movs	r1, #0
 80056fa:	4802      	ldr	r0, [pc, #8]	@ (8005704 <dhcpserver_start+0x10>)
 80056fc:	f00a fe08 	bl	8010310 <tcpip_callback>
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}
 8005704:	08005605 	.word	0x08005605

08005708 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 8005710:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <dhcpserver_stop_prv+0x34>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8005718:	4b08      	ldr	r3, [pc, #32]	@ (800573c <dhcpserver_stop_prv+0x34>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f013 fe3d 	bl	801939c <udp_disconnect>
    udp_remove(dhcp_pcb);
 8005722:	4b06      	ldr	r3, [pc, #24]	@ (800573c <dhcpserver_stop_prv+0x34>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f013 fe80 	bl	801942c <udp_remove>
    dhcp_pcb = NULL;
 800572c:	4b03      	ldr	r3, [pc, #12]	@ (800573c <dhcpserver_stop_prv+0x34>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
  }
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000680 	.word	0x20000680

08005740 <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8005744:	2100      	movs	r1, #0
 8005746:	4802      	ldr	r0, [pc, #8]	@ (8005750 <dhcpserver_stop+0x10>)
 8005748:	f00a fde2 	bl	8010310 <tcpip_callback>
}
 800574c:	bf00      	nop
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08005709 	.word	0x08005709

08005754 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2206      	movs	r2, #6
 8005760:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3332      	adds	r3, #50	@ 0x32
 8005768:	2202      	movs	r2, #2
 800576a:	491b      	ldr	r1, [pc, #108]	@ (80057d8 <low_level_init+0x84>)
 800576c:	4618      	mov	r0, r3
 800576e:	f019 fbdb 	bl	801ef28 <memcmp>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800577e:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <low_level_init+0x88>)
 8005780:	f203 2316 	addw	r3, r3, #534	@ 0x216
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	6011      	str	r1, [r2, #0]
 8005788:	889b      	ldrh	r3, [r3, #4]
 800578a:	8093      	strh	r3, [r2, #4]
 800578c:	e009      	b.n	80057a2 <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <low_level_init+0x88>)
 8005796:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	6010      	str	r0, [r2, #0]
 800579e:	889b      	ldrh	r3, [r3, #4]
 80057a0:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80057a8:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057b0:	f043 030a 	orr.w	r3, r3, #10
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	08021c8c 	.word	0x08021c8c
 80057dc:	200006b4 	.word	0x200006b4

080057e0 <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 80057ea:	4b37      	ldr	r3, [pc, #220]	@ (80058c8 <low_level_output+0xe8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f04f 31ff 	mov.w	r1, #4294967295
 80057f2:	4618      	mov	r0, r3
 80057f4:	f008 f840 	bl	800d878 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	891b      	ldrh	r3, [r3, #8]
 80057fc:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 80057fe:	f107 0008 	add.w	r0, r7, #8
 8005802:	2200      	movs	r2, #0
 8005804:	214a      	movs	r1, #74	@ 0x4a
 8005806:	f005 fe87 	bl	800b518 <sl_wfx_allocate_command_buffer>
 800580a:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <low_level_output+0x38>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8005818:	4b2b      	ldr	r3, [pc, #172]	@ (80058c8 <low_level_output+0xe8>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	2300      	movs	r3, #0
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	f007 fd17 	bl	800d254 <xQueueGenericSend>
    return ERR_MEM;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	e049      	b.n	80058c0 <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3318      	adds	r3, #24
 8005830:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e010      	b.n	800585a <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6859      	ldr	r1, [r3, #4]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	895b      	ldrh	r3, [r3, #10]
 8005840:	461a      	mov	r2, r3
 8005842:	6938      	ldr	r0, [r7, #16]
 8005844:	f019 fc3d 	bl	801f0c2 <memcpy>
    buffer += q->len;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	895b      	ldrh	r3, [r3, #10]
 800584c:	461a      	mov	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1eb      	bne.n	8005838 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3332      	adds	r3, #50	@ 0x32
 8005864:	2202      	movs	r2, #2
 8005866:	4919      	ldr	r1, [pc, #100]	@ (80058cc <low_level_output+0xec>)
 8005868:	4618      	mov	r0, r3
 800586a:	f019 fb5d 	bl	801ef28 <memcmp>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	891a      	ldrh	r2, [r3, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8005886:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <low_level_output+0xf0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 800588e:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <low_level_output+0xf0>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e002      	b.n	800589e <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a0d      	ldr	r2, [pc, #52]	@ (80058d0 <low_level_output+0xf0>)
 800589c:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4a0b      	ldr	r2, [pc, #44]	@ (80058d0 <low_level_output+0xf0>)
 80058a2:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 80058a4:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <low_level_output+0xf4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2101      	movs	r1, #1
 80058aa:	4618      	mov	r0, r3
 80058ac:	f007 fa70 	bl	800cd90 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80058b0:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <low_level_output+0xe8>)
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	2300      	movs	r3, #0
 80058b6:	2200      	movs	r2, #0
 80058b8:	2100      	movs	r1, #0
 80058ba:	f007 fccb 	bl	800d254 <xQueueGenericSend>
  
  return ERR_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	2000155c 	.word	0x2000155c
 80058cc:	08021c8c 	.word	0x08021c8c
 80058d0:	20001560 	.word	0x20001560
 80058d4:	20001558 	.word	0x20001558

080058d8 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	795b      	ldrb	r3, [r3, #5]
 80058e6:	461a      	mov	r2, r3
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	4413      	add	r3, r2
 80058ec:	3308      	adds	r3, #8
 80058ee:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	88db      	ldrh	r3, [r3, #6]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	88db      	ldrh	r3, [r3, #6]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005904:	4619      	mov	r1, r3
 8005906:	2000      	movs	r0, #0
 8005908:	f00c f814 	bl	8011934 <pbuf_alloc>
 800590c:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d016      	beq.n	8005942 <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	e010      	b.n	800593c <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	6858      	ldr	r0, [r3, #4]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	895b      	ldrh	r3, [r3, #10]
 8005922:	461a      	mov	r2, r3
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	f019 fbcc 	bl	801f0c2 <memcpy>
      buffer += q->len;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	895b      	ldrh	r3, [r3, #10]
 800592e:	461a      	mov	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1eb      	bne.n	800591a <low_level_input+0x42>
    }
  }  
   
  return p;
 8005942:	697b      	ldr	r3, [r7, #20]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	f003 0306 	and.w	r3, r3, #6
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 8005960:	4b0f      	ldr	r3, [pc, #60]	@ (80059a0 <sl_wfx_host_received_frame_callback+0x54>)
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e001      	b.n	800596a <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8005966:	4b0f      	ldr	r3, [pc, #60]	@ (80059a4 <sl_wfx_host_received_frame_callback+0x58>)
 8005968:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff ffb0 	bl	80058d8 <low_level_input>
 8005978:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	68b8      	ldr	r0, [r7, #8]
 8005988:	4798      	blx	r3
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 8005990:	68b8      	ldr	r0, [r7, #8]
 8005992:	f00c fab7 	bl	8011f04 <pbuf_free>
      }
    }
  }
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200008d8 	.word	0x200008d8
 80059a4:	20000910 	.word	0x20000910

080059a8 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <sta_ethernetif_init+0x1a>
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <sta_ethernetif_init+0x44>)
 80059b8:	22dc      	movs	r2, #220	@ 0xdc
 80059ba:	490d      	ldr	r1, [pc, #52]	@ (80059f0 <sta_ethernetif_init+0x48>)
 80059bc:	480d      	ldr	r0, [pc, #52]	@ (80059f4 <sta_ethernetif_init+0x4c>)
 80059be:	f019 f959 	bl	801ec74 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3332      	adds	r3, #50	@ 0x32
 80059c6:	2202      	movs	r2, #2
 80059c8:	490b      	ldr	r1, [pc, #44]	@ (80059f8 <sta_ethernetif_init+0x50>)
 80059ca:	4618      	mov	r0, r3
 80059cc:	f019 fb79 	bl	801f0c2 <memcpy>

  netif->output = etharp_output;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0a      	ldr	r2, [pc, #40]	@ (80059fc <sta_ethernetif_init+0x54>)
 80059d4:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <sta_ethernetif_init+0x58>)
 80059da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff feb9 	bl	8005754 <low_level_init>
  
  return ERR_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08021c90 	.word	0x08021c90
 80059f0:	08021cac 	.word	0x08021cac
 80059f4:	08021cbc 	.word	0x08021cbc
 80059f8:	08021c8c 	.word	0x08021c8c
 80059fc:	0801bc05 	.word	0x0801bc05
 8005a00:	080057e1 	.word	0x080057e1

08005a04 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005a08:	f001 f93e 	bl	8006c88 <HAL_GetTick>
 8005a0c:	4603      	mov	r3, r0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 8005a14:	b5b0      	push	{r4, r5, r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f00a fd04 	bl	801042c <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8005a24:	f000 f886 	bl	8005b34 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 8005a28:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <lwip_start_task_entry+0x44>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <lwip_start_task_entry+0x48>)
 8005a32:	f107 040c 	add.w	r4, r7, #12
 8005a36:	461d      	mov	r5, r3
 8005a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	4906      	ldr	r1, [pc, #24]	@ (8005a60 <lwip_start_task_entry+0x4c>)
 8005a46:	4618      	mov	r0, r3
 8005a48:	f006 fed3 	bl	800c7f2 <osThreadCreate>
  }

  wifi_autoconnexion_init();
 8005a4c:	f7fc f8c0 	bl	8001bd0 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 8005a50:	2000      	movs	r0, #0
 8005a52:	f006 fef5 	bl	800c840 <osThreadTerminate>
 8005a56:	e7fb      	b.n	8005a50 <lwip_start_task_entry+0x3c>
 8005a58:	20000098 	.word	0x20000098
 8005a5c:	08021cf0 	.word	0x08021cf0
 8005a60:	200008d8 	.word	0x200008d8

08005a64 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4909      	ldr	r1, [pc, #36]	@ (8005a90 <lwip_set_sta_link_up+0x2c>)
 8005a6c:	4809      	ldr	r0, [pc, #36]	@ (8005a94 <lwip_set_sta_link_up+0x30>)
 8005a6e:	f00a fb19 	bl	80100a4 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 8005a72:	2200      	movs	r2, #0
 8005a74:	4908      	ldr	r1, [pc, #32]	@ (8005a98 <lwip_set_sta_link_up+0x34>)
 8005a76:	4807      	ldr	r0, [pc, #28]	@ (8005a94 <lwip_set_sta_link_up+0x30>)
 8005a78:	f00a fb14 	bl	80100a4 <netifapi_netif_common>
  if (use_dhcp_client) {
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <lwip_set_sta_link_up+0x38>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 8005a84:	2001      	movs	r0, #1
 8005a86:	f7fe fbf9 	bl	800427c <dhcpclient_set_link_state>
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	080115b9 	.word	0x080115b9
 8005a94:	200008d8 	.word	0x200008d8
 8005a98:	080116f5 	.word	0x080116f5
 8005a9c:	20000098 	.word	0x20000098

08005aa0 <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8005aa4:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <lwip_set_sta_link_down+0x2c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8005aac:	2000      	movs	r0, #0
 8005aae:	f7fe fbe5 	bl	800427c <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4906      	ldr	r1, [pc, #24]	@ (8005ad0 <lwip_set_sta_link_down+0x30>)
 8005ab6:	4807      	ldr	r0, [pc, #28]	@ (8005ad4 <lwip_set_sta_link_down+0x34>)
 8005ab8:	f00a faf4 	bl	80100a4 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8005abc:	2200      	movs	r2, #0
 8005abe:	4906      	ldr	r1, [pc, #24]	@ (8005ad8 <lwip_set_sta_link_down+0x38>)
 8005ac0:	4804      	ldr	r0, [pc, #16]	@ (8005ad4 <lwip_set_sta_link_down+0x34>)
 8005ac2:	f00a faef 	bl	80100a4 <netifapi_netif_common>
}
 8005ac6:	bf00      	nop
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000098 	.word	0x20000098
 8005ad0:	08011765 	.word	0x08011765
 8005ad4:	200008d8 	.word	0x200008d8
 8005ad8:	08011691 	.word	0x08011691

08005adc <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4906      	ldr	r1, [pc, #24]	@ (8005afc <lwip_set_ap_link_up+0x20>)
 8005ae4:	4806      	ldr	r0, [pc, #24]	@ (8005b00 <lwip_set_ap_link_up+0x24>)
 8005ae6:	f00a fadd 	bl	80100a4 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8005aea:	2200      	movs	r2, #0
 8005aec:	4905      	ldr	r1, [pc, #20]	@ (8005b04 <lwip_set_ap_link_up+0x28>)
 8005aee:	4804      	ldr	r0, [pc, #16]	@ (8005b00 <lwip_set_ap_link_up+0x24>)
 8005af0:	f00a fad8 	bl	80100a4 <netifapi_netif_common>
  dhcpserver_start();
 8005af4:	f7ff fdfe 	bl	80056f4 <dhcpserver_start>
}
 8005af8:	bf00      	nop
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	080115b9 	.word	0x080115b9
 8005b00:	20000910 	.word	0x20000910
 8005b04:	080116f5 	.word	0x080116f5

08005b08 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8005b0c:	f7ff fe18 	bl	8005740 <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 8005b10:	2200      	movs	r2, #0
 8005b12:	4905      	ldr	r1, [pc, #20]	@ (8005b28 <lwip_set_ap_link_down+0x20>)
 8005b14:	4805      	ldr	r0, [pc, #20]	@ (8005b2c <lwip_set_ap_link_down+0x24>)
 8005b16:	f00a fac5 	bl	80100a4 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4904      	ldr	r1, [pc, #16]	@ (8005b30 <lwip_set_ap_link_down+0x28>)
 8005b1e:	4803      	ldr	r0, [pc, #12]	@ (8005b2c <lwip_set_ap_link_down+0x24>)
 8005b20:	f00a fac0 	bl	80100a4 <netifapi_netif_common>
}
 8005b24:	bf00      	nop
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08011765 	.word	0x08011765
 8005b2c:	20000910 	.word	0x20000910
 8005b30:	08011691 	.word	0x08011691

08005b34 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	@ 0x28
 8005b38:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 8005b40:	4b9e      	ldr	r3, [pc, #632]	@ (8005dbc <netif_config+0x288>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 8005b50:	2300      	movs	r3, #0
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e0cb      	b.n	8005cee <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8005b56:	4b9a      	ldr	r3, [pc, #616]	@ (8005dc0 <netif_config+0x28c>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	061a      	lsls	r2, r3, #24
 8005b5c:	4b99      	ldr	r3, [pc, #612]	@ (8005dc4 <netif_config+0x290>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	431a      	orrs	r2, r3
 8005b64:	4b98      	ldr	r3, [pc, #608]	@ (8005dc8 <netif_config+0x294>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	4a97      	ldr	r2, [pc, #604]	@ (8005dcc <netif_config+0x298>)
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	061a      	lsls	r2, r3, #24
 8005b74:	4b92      	ldr	r3, [pc, #584]	@ (8005dc0 <netif_config+0x28c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	0619      	lsls	r1, r3, #24
 8005b7a:	4b92      	ldr	r3, [pc, #584]	@ (8005dc4 <netif_config+0x290>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	4319      	orrs	r1, r3
 8005b82:	4b91      	ldr	r3, [pc, #580]	@ (8005dc8 <netif_config+0x294>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	4990      	ldr	r1, [pc, #576]	@ (8005dcc <netif_config+0x298>)
 8005b8c:	7809      	ldrb	r1, [r1, #0]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b96:	431a      	orrs	r2, r3
 8005b98:	4b89      	ldr	r3, [pc, #548]	@ (8005dc0 <netif_config+0x28c>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	0619      	lsls	r1, r3, #24
 8005b9e:	4b89      	ldr	r3, [pc, #548]	@ (8005dc4 <netif_config+0x290>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	4319      	orrs	r1, r3
 8005ba6:	4b88      	ldr	r3, [pc, #544]	@ (8005dc8 <netif_config+0x294>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	430b      	orrs	r3, r1
 8005bae:	4987      	ldr	r1, [pc, #540]	@ (8005dcc <netif_config+0x298>)
 8005bb0:	7809      	ldrb	r1, [r1, #0]
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	4b80      	ldr	r3, [pc, #512]	@ (8005dc0 <netif_config+0x28c>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	0619      	lsls	r1, r3, #24
 8005bc2:	4b80      	ldr	r3, [pc, #512]	@ (8005dc4 <netif_config+0x290>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	4319      	orrs	r1, r3
 8005bca:	4b7f      	ldr	r3, [pc, #508]	@ (8005dc8 <netif_config+0x294>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	497e      	ldr	r1, [pc, #504]	@ (8005dcc <netif_config+0x298>)
 8005bd4:	7809      	ldrb	r1, [r1, #0]
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	0e1b      	lsrs	r3, r3, #24
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 8005bde:	4b7c      	ldr	r3, [pc, #496]	@ (8005dd0 <netif_config+0x29c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	061a      	lsls	r2, r3, #24
 8005be4:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd4 <netif_config+0x2a0>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	431a      	orrs	r2, r3
 8005bec:	4b7a      	ldr	r3, [pc, #488]	@ (8005dd8 <netif_config+0x2a4>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	4a79      	ldr	r2, [pc, #484]	@ (8005ddc <netif_config+0x2a8>)
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	061a      	lsls	r2, r3, #24
 8005bfc:	4b74      	ldr	r3, [pc, #464]	@ (8005dd0 <netif_config+0x29c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	0619      	lsls	r1, r3, #24
 8005c02:	4b74      	ldr	r3, [pc, #464]	@ (8005dd4 <netif_config+0x2a0>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	4319      	orrs	r1, r3
 8005c0a:	4b73      	ldr	r3, [pc, #460]	@ (8005dd8 <netif_config+0x2a4>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	430b      	orrs	r3, r1
 8005c12:	4972      	ldr	r1, [pc, #456]	@ (8005ddc <netif_config+0x2a8>)
 8005c14:	7809      	ldrb	r1, [r1, #0]
 8005c16:	430b      	orrs	r3, r1
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	4b6b      	ldr	r3, [pc, #428]	@ (8005dd0 <netif_config+0x29c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	0619      	lsls	r1, r3, #24
 8005c26:	4b6b      	ldr	r3, [pc, #428]	@ (8005dd4 <netif_config+0x2a0>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	4319      	orrs	r1, r3
 8005c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005dd8 <netif_config+0x2a4>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	430b      	orrs	r3, r1
 8005c36:	4969      	ldr	r1, [pc, #420]	@ (8005ddc <netif_config+0x2a8>)
 8005c38:	7809      	ldrb	r1, [r1, #0]
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	0a1b      	lsrs	r3, r3, #8
 8005c3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c42:	431a      	orrs	r2, r3
 8005c44:	4b62      	ldr	r3, [pc, #392]	@ (8005dd0 <netif_config+0x29c>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	0619      	lsls	r1, r3, #24
 8005c4a:	4b62      	ldr	r3, [pc, #392]	@ (8005dd4 <netif_config+0x2a0>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	4319      	orrs	r1, r3
 8005c52:	4b61      	ldr	r3, [pc, #388]	@ (8005dd8 <netif_config+0x2a4>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	4960      	ldr	r1, [pc, #384]	@ (8005ddc <netif_config+0x2a8>)
 8005c5c:	7809      	ldrb	r1, [r1, #0]
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	0e1b      	lsrs	r3, r3, #24
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8005c66:	4b5e      	ldr	r3, [pc, #376]	@ (8005de0 <netif_config+0x2ac>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	061a      	lsls	r2, r3, #24
 8005c6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005de4 <netif_config+0x2b0>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	041b      	lsls	r3, r3, #16
 8005c72:	431a      	orrs	r2, r3
 8005c74:	4b5c      	ldr	r3, [pc, #368]	@ (8005de8 <netif_config+0x2b4>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	4a5b      	ldr	r2, [pc, #364]	@ (8005dec <netif_config+0x2b8>)
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	061a      	lsls	r2, r3, #24
 8005c84:	4b56      	ldr	r3, [pc, #344]	@ (8005de0 <netif_config+0x2ac>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	0619      	lsls	r1, r3, #24
 8005c8a:	4b56      	ldr	r3, [pc, #344]	@ (8005de4 <netif_config+0x2b0>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	4319      	orrs	r1, r3
 8005c92:	4b55      	ldr	r3, [pc, #340]	@ (8005de8 <netif_config+0x2b4>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	4954      	ldr	r1, [pc, #336]	@ (8005dec <netif_config+0x2b8>)
 8005c9c:	7809      	ldrb	r1, [r1, #0]
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8005de0 <netif_config+0x2ac>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	0619      	lsls	r1, r3, #24
 8005cae:	4b4d      	ldr	r3, [pc, #308]	@ (8005de4 <netif_config+0x2b0>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	4319      	orrs	r1, r3
 8005cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8005de8 <netif_config+0x2b4>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	494b      	ldr	r1, [pc, #300]	@ (8005dec <netif_config+0x2b8>)
 8005cc0:	7809      	ldrb	r1, [r1, #0]
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	4b44      	ldr	r3, [pc, #272]	@ (8005de0 <netif_config+0x2ac>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	0619      	lsls	r1, r3, #24
 8005cd2:	4b44      	ldr	r3, [pc, #272]	@ (8005de4 <netif_config+0x2b0>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	4319      	orrs	r1, r3
 8005cda:	4b43      	ldr	r3, [pc, #268]	@ (8005de8 <netif_config+0x2b4>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	4942      	ldr	r1, [pc, #264]	@ (8005dec <netif_config+0x2b8>)
 8005ce4:	7809      	ldrb	r1, [r1, #0]
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	0e1b      	lsrs	r3, r3, #24
 8005cea:	4313      	orrs	r3, r2
 8005cec:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 8005cee:	4840      	ldr	r0, [pc, #256]	@ (8005df0 <netif_config+0x2bc>)
 8005cf0:	f004 fc50 	bl	800a594 <sl_wfx_init>
 8005cf4:	6138      	str	r0, [r7, #16]
  switch (status) {
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f640 3202 	movw	r2, #2818	@ 0xb02
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d034      	beq.n	8005d6a <netif_config+0x236>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f640 3202 	movw	r2, #2818	@ 0xb02
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d83b      	bhi.n	8005d82 <netif_config+0x24e>
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f640 3201 	movw	r2, #2817	@ 0xb01
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d026      	beq.n	8005d62 <netif_config+0x22e>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f640 3201 	movw	r2, #2817	@ 0xb01
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d831      	bhi.n	8005d82 <netif_config+0x24e>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	d026      	beq.n	8005d72 <netif_config+0x23e>
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b07      	cmp	r3, #7
 8005d28:	d82b      	bhi.n	8005d82 <netif_config+0x24e>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <netif_config+0x204>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d021      	beq.n	8005d7a <netif_config+0x246>
 8005d36:	e024      	b.n	8005d82 <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8005d38:	4b2d      	ldr	r3, [pc, #180]	@ (8005df0 <netif_config+0x2bc>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8005d40:	4b2b      	ldr	r3, [pc, #172]	@ (8005df0 <netif_config+0x2bc>)
 8005d42:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005d46:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 8005d48:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <netif_config+0x2bc>)
 8005d4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8005d4e:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 8005d50:	4b27      	ldr	r3, [pc, #156]	@ (8005df0 <netif_config+0x2bc>)
 8005d52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8005d56:	4827      	ldr	r0, [pc, #156]	@ (8005df4 <netif_config+0x2c0>)
 8005d58:	f018 ff8c 	bl	801ec74 <iprintf>
    res = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
    break;
 8005d60:	e012      	b.n	8005d88 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 8005d62:	4825      	ldr	r0, [pc, #148]	@ (8005df8 <netif_config+0x2c4>)
 8005d64:	f018 fff6 	bl	801ed54 <puts>
    break;
 8005d68:	e00e      	b.n	8005d88 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8005d6a:	4824      	ldr	r0, [pc, #144]	@ (8005dfc <netif_config+0x2c8>)
 8005d6c:	f018 fff2 	bl	801ed54 <puts>
    break;
 8005d70:	e00a      	b.n	8005d88 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 8005d72:	4823      	ldr	r0, [pc, #140]	@ (8005e00 <netif_config+0x2cc>)
 8005d74:	f018 ffee 	bl	801ed54 <puts>
    break;
 8005d78:	e006      	b.n	8005d88 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 8005d7a:	4822      	ldr	r0, [pc, #136]	@ (8005e04 <netif_config+0x2d0>)
 8005d7c:	f018 ffea 	bl	801ed54 <puts>
    break;
 8005d80:	e002      	b.n	8005d88 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 8005d82:	4821      	ldr	r0, [pc, #132]	@ (8005e08 <netif_config+0x2d4>)
 8005d84:	f018 ffe6 	bl	801ed54 <puts>
  }

  if (res == 0) {
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d110      	bne.n	8005db0 <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 8005d8e:	1d3b      	adds	r3, r7, #4
 8005d90:	f107 0208 	add.w	r2, r7, #8
 8005d94:	f107 010c 	add.w	r1, r7, #12
 8005d98:	481c      	ldr	r0, [pc, #112]	@ (8005e0c <netif_config+0x2d8>)
 8005d9a:	9002      	str	r0, [sp, #8]
 8005d9c:	481c      	ldr	r0, [pc, #112]	@ (8005e10 <netif_config+0x2dc>)
 8005d9e:	9001      	str	r0, [sp, #4]
 8005da0:	2000      	movs	r0, #0
 8005da2:	9000      	str	r0, [sp, #0]
 8005da4:	481b      	ldr	r0, [pc, #108]	@ (8005e14 <netif_config+0x2e0>)
 8005da6:	f00b fa3d 	bl	8011224 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 8005daa:	481a      	ldr	r0, [pc, #104]	@ (8005e14 <netif_config+0x2e0>)
 8005dac:	f00b fbf4 	bl	8011598 <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 8005db0:	697b      	ldr	r3, [r7, #20]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000098 	.word	0x20000098
 8005dc0:	2000009c 	.word	0x2000009c
 8005dc4:	2000009d 	.word	0x2000009d
 8005dc8:	2000097a 	.word	0x2000097a
 8005dcc:	2000009e 	.word	0x2000009e
 8005dd0:	2000009f 	.word	0x2000009f
 8005dd4:	200000a0 	.word	0x200000a0
 8005dd8:	200000a1 	.word	0x200000a1
 8005ddc:	2000097b 	.word	0x2000097b
 8005de0:	2000097c 	.word	0x2000097c
 8005de4:	2000097d 	.word	0x2000097d
 8005de8:	2000097e 	.word	0x2000097e
 8005dec:	2000097f 	.word	0x2000097f
 8005df0:	200006b4 	.word	0x200006b4
 8005df4:	08021d04 	.word	0x08021d04
 8005df8:	08021d30 	.word	0x08021d30
 8005dfc:	08021d60 	.word	0x08021d60
 8005e00:	08021d94 	.word	0x08021d94
 8005e04:	08021dc4 	.word	0x08021dc4
 8005e08:	08021de4 	.word	0x08021de4
 8005e0c:	080102cd 	.word	0x080102cd
 8005e10:	080059a9 	.word	0x080059a9
 8005e14:	200008d8 	.word	0x200008d8

08005e18 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 8005e18:	b5b0      	push	{r4, r5, r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 8005e1e:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <lwip_start+0x28>)
 8005e20:	1d3c      	adds	r4, r7, #4
 8005e22:	461d      	mov	r5, r3
 8005e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f006 fcde 	bl	800c7f2 <osThreadCreate>
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	08021e18 	.word	0x08021e18

08005e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e48:	f000 feb8 	bl	8006bbc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8005e4c:	f000 f822 	bl	8005e94 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e50:	f000 f958 	bl	8006104 <MX_GPIO_Init>
  MX_DMA_Init();
 8005e54:	f000 f936 	bl	80060c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005e58:	f000 f90a 	bl	8006070 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI3_Init();
 8005e5c:	f000 f8d0 	bl	8006000 <MX_SPI3_Init>
  MX_SPI4_Init();
 8005e60:	f000 f896 	bl	8005f90 <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 8005e64:	4809      	ldr	r0, [pc, #36]	@ (8005e8c <main+0x48>)
 8005e66:	f018 ff05 	bl	801ec74 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 8005e6a:	4809      	ldr	r0, [pc, #36]	@ (8005e90 <main+0x4c>)
 8005e6c:	f018 ff72 	bl	801ed54 <puts>
  HAL_Delay(100);
 8005e70:	2064      	movs	r0, #100	@ 0x64
 8005e72:	f000 ff15 	bl	8006ca0 <HAL_Delay>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 8005e76:	f006 fba3 	bl	800c5c0 <sl_wfx_task_start>
  wifi_events_start();
 8005e7a:	f006 fa33 	bl	800c2e4 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 8005e7e:	f7ff ffcb 	bl	8005e18 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 8005e82:	f006 fc9f 	bl	800c7c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <main+0x42>
 8005e8a:	bf00      	nop
 8005e8c:	08021e2c 	.word	0x08021e2c
 8005e90:	08021e30 	.word	0x08021e30

08005e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b094      	sub	sp, #80	@ 0x50
 8005e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e9a:	f107 0320 	add.w	r3, r7, #32
 8005e9e:	2230      	movs	r2, #48	@ 0x30
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f019 f850 	bl	801ef48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ea8:	f107 030c 	add.w	r3, r7, #12
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <SystemClock_Config+0xf0>)
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec0:	4a30      	ldr	r2, [pc, #192]	@ (8005f84 <SystemClock_Config+0xf0>)
 8005ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8005f84 <SystemClock_Config+0xf0>)
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	607b      	str	r3, [r7, #4]
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f88 <SystemClock_Config+0xf4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2a      	ldr	r2, [pc, #168]	@ (8005f88 <SystemClock_Config+0xf4>)
 8005ede:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	4b28      	ldr	r3, [pc, #160]	@ (8005f88 <SystemClock_Config+0xf4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005ef4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005efa:	2302      	movs	r3, #2
 8005efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005efe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005f04:	2308      	movs	r3, #8
 8005f06:	643b      	str	r3, [r7, #64]	@ 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 8005f08:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005f0c:	647b      	str	r3, [r7, #68]	@ 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005f0e:	2304      	movs	r3, #4
 8005f10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005f12:	2308      	movs	r3, #8
 8005f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f16:	f107 0320 	add.w	r3, r7, #32
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 feda 	bl	8007cd4 <HAL_RCC_OscConfig>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005f26:	f000 f991 	bl	800624c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f2a:	230f      	movs	r3, #15
 8005f2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	2103      	movs	r1, #3
 8005f46:	4618      	mov	r0, r3
 8005f48:	f002 f93c 	bl	80081c4 <HAL_RCC_ClockConfig>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005f52:	f000 f97b 	bl	800624c <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005f56:	f002 fb21 	bl	800859c <HAL_RCC_GetHCLKFreq>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f8c <SystemClock_Config+0xf8>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	099b      	lsrs	r3, r3, #6
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fff6 	bl	8006f56 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005f6a:	2004      	movs	r0, #4
 8005f6c:	f001 f800 	bl	8006f70 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005f70:	2200      	movs	r2, #0
 8005f72:	210f      	movs	r1, #15
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	f000 ffb5 	bl	8006ee6 <HAL_NVIC_SetPriority>

}
 8005f7c:	bf00      	nop
 8005f7e:	3750      	adds	r7, #80	@ 0x50
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40023800 	.word	0x40023800
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	10624dd3 	.word	0x10624dd3

08005f90 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* SPI4 parameter configuration */
  hspi4.Instance = SPI4;
 8005f94:	4b18      	ldr	r3, [pc, #96]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005f96:	4a19      	ldr	r2, [pc, #100]	@ (8005ffc <MX_SPI4_Init+0x6c>)
 8005f98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005f9a:	4b17      	ldr	r3, [pc, #92]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005fa0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8005fa2:	4b15      	ldr	r3, [pc, #84]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8005fa8:	4b13      	ldr	r3, [pc, #76]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;  // Set CPOL = 0
 8005fb0:	4b11      	ldr	r3, [pc, #68]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;       // Set CPHA = 0
 8005fb6:	4b10      	ldr	r3, [pc, #64]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8005fd0:	4b09      	ldr	r3, [pc, #36]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd6:	4b08      	ldr	r3, [pc, #32]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fde:	220a      	movs	r2, #10
 8005fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8005fe2:	4805      	ldr	r0, [pc, #20]	@ (8005ff8 <MX_SPI4_Init+0x68>)
 8005fe4:	f002 fb0e 	bl	8008604 <HAL_SPI_Init>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <MX_SPI4_Init+0x62>
  {
    Error_Handler();
 8005fee:	f000 f92d 	bl	800624c <Error_Handler>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000a20 	.word	0x20000a20
 8005ffc:	40013400 	.word	0x40013400

08006000 <MX_SPI3_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi3.Instance = SPI3;
 8006004:	4b18      	ldr	r3, [pc, #96]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006006:	4a19      	ldr	r2, [pc, #100]	@ (800606c <MX_SPI3_Init+0x6c>)
 8006008:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800600a:	4b17      	ldr	r3, [pc, #92]	@ (8006068 <MX_SPI3_Init+0x68>)
 800600c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006010:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006014:	2200      	movs	r2, #0
 8006016:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8006018:	4b13      	ldr	r3, [pc, #76]	@ (8006068 <MX_SPI3_Init+0x68>)
 800601a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800601e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006020:	4b11      	ldr	r3, [pc, #68]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006022:	2200      	movs	r2, #0
 8006024:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006026:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006028:	2200      	movs	r2, #0
 800602a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800602c:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <MX_SPI3_Init+0x68>)
 800602e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006032:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006034:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <MX_SPI3_Init+0x68>)
 800603c:	2200      	movs	r2, #0
 800603e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006040:	4b09      	ldr	r3, [pc, #36]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006042:	2200      	movs	r2, #0
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006046:	4b08      	ldr	r3, [pc, #32]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006048:	2200      	movs	r2, #0
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <MX_SPI3_Init+0x68>)
 800604e:	220a      	movs	r2, #10
 8006050:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006052:	4805      	ldr	r0, [pc, #20]	@ (8006068 <MX_SPI3_Init+0x68>)
 8006054:	f002 fad6 	bl	8008604 <HAL_SPI_Init>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_SPI3_Init+0x62>
  {
	Error_Handler();
 800605e:	f000 f8f5 	bl	800624c <Error_Handler>
  }
}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	200009c8 	.word	0x200009c8
 800606c:	40003c00 	.word	0x40003c00

08006070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006074:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 8006076:	4a12      	ldr	r2, [pc, #72]	@ (80060c0 <MX_USART2_UART_Init+0x50>)
 8006078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800607a:	4b10      	ldr	r3, [pc, #64]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 800607c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8006080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 8006084:	2200      	movs	r2, #0
 8006086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006088:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 800608a:	2200      	movs	r2, #0
 800608c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 8006090:	2200      	movs	r2, #0
 8006092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006094:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 8006096:	220c      	movs	r2, #12
 8006098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800609a:	4b08      	ldr	r3, [pc, #32]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 800609c:	2200      	movs	r2, #0
 800609e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060a0:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060a6:	4805      	ldr	r0, [pc, #20]	@ (80060bc <MX_USART2_UART_Init+0x4c>)
 80060a8:	f003 fc24 	bl	80098f4 <HAL_UART_Init>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060b2:	f000 f8cb 	bl	800624c <Error_Handler>
  }
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000984 	.word	0x20000984
 80060c0:	40004400 	.word	0x40004400

080060c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <MX_DMA_Init+0x3c>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006100 <MX_DMA_Init+0x3c>)
 80060d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060da:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <MX_DMA_Init+0x3c>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2100      	movs	r1, #0
 80060ea:	203b      	movs	r0, #59	@ 0x3b
 80060ec:	f000 fefb 	bl	8006ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80060f0:	203b      	movs	r0, #59	@ 0x3b
 80060f2:	f000 ff14 	bl	8006f1e <HAL_NVIC_EnableIRQ>

}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023800 	.word	0x40023800

08006104 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	@ 0x28
 8006108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	4b3e      	ldr	r3, [pc, #248]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	4a3d      	ldr	r2, [pc, #244]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	6313      	str	r3, [r2, #48]	@ 0x30
 800612a:	4b3b      	ldr	r3, [pc, #236]	@ (8006218 <MX_GPIO_Init+0x114>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	4b37      	ldr	r3, [pc, #220]	@ (8006218 <MX_GPIO_Init+0x114>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	4a36      	ldr	r2, [pc, #216]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006144:	6313      	str	r3, [r2, #48]	@ 0x30
 8006146:	4b34      	ldr	r3, [pc, #208]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	4a2f      	ldr	r2, [pc, #188]	@ (8006218 <MX_GPIO_Init+0x114>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6313      	str	r3, [r2, #48]	@ 0x30
 8006162:	4b2d      	ldr	r3, [pc, #180]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006176:	4a28      	ldr	r2, [pc, #160]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006178:	f043 0302 	orr.w	r3, r3, #2
 800617c:	6313      	str	r3, [r2, #48]	@ 0x30
 800617e:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <MX_GPIO_Init+0x114>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 800618a:	2201      	movs	r2, #1
 800618c:	2110      	movs	r1, #16
 800618e:	4823      	ldr	r0, [pc, #140]	@ (800621c <MX_GPIO_Init+0x118>)
 8006190:	f001 fd62 	bl	8007c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8006194:	2200      	movs	r2, #0
 8006196:	2101      	movs	r1, #1
 8006198:	4821      	ldr	r0, [pc, #132]	@ (8006220 <MX_GPIO_Init+0x11c>)
 800619a:	f001 fd5d 	bl	8007c58 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 800619e:	2310      	movs	r3, #16
 80061a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061aa:	2303      	movs	r3, #3
 80061ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 80061ae:	f107 0314 	add.w	r3, r7, #20
 80061b2:	4619      	mov	r1, r3
 80061b4:	4819      	ldr	r0, [pc, #100]	@ (800621c <MX_GPIO_Init+0x118>)
 80061b6:	f001 fae7 	bl	8007788 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 80061ba:	2301      	movs	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061be:	2301      	movs	r3, #1
 80061c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061c6:	2303      	movs	r3, #3
 80061c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	4619      	mov	r1, r3
 80061d0:	4813      	ldr	r0, [pc, #76]	@ (8006220 <MX_GPIO_Init+0x11c>)
 80061d2:	f001 fad9 	bl	8007788 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_WUP_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 80061d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061da:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061dc:	2301      	movs	r3, #1
 80061de:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061e4:	2303      	movs	r3, #3
 80061e6:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 80061e8:	f107 0314 	add.w	r3, r7, #20
 80061ec:	4619      	mov	r1, r3
 80061ee:	480d      	ldr	r0, [pc, #52]	@ (8006224 <MX_GPIO_Init+0x120>)
 80061f0:	f001 faca 	bl	8007788 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 80061f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80061fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80061fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8006204:	f107 0314 	add.w	r3, r7, #20
 8006208:	4619      	mov	r1, r3
 800620a:	4806      	ldr	r0, [pc, #24]	@ (8006224 <MX_GPIO_Init+0x120>)
 800620c:	f001 fabc 	bl	8007788 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8006210:	bf00      	nop
 8006212:	3728      	adds	r7, #40	@ 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800
 800621c:	40020000 	.word	0x40020000
 8006220:	40020800 	.word	0x40020800
 8006224:	40020400 	.word	0x40020400

08006228 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8006230:	1d39      	adds	r1, r7, #4
 8006232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006236:	2201      	movs	r2, #1
 8006238:	4803      	ldr	r0, [pc, #12]	@ (8006248 <__io_putchar+0x20>)
 800623a:	f003 fba8 	bl	800998e <HAL_UART_Transmit>

  return ch;
 800623e:	687b      	ldr	r3, [r7, #4]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000984 	.word	0x20000984

0800624c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006250:	b672      	cpsid	i
}
 8006252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <Error_Handler+0x8>

08006258 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi4_rx;
extern DMA_HandleTypeDef hdma_spi3_rx;


void HAL_MspInit(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	4b25      	ldr	r3, [pc, #148]	@ (80062f8 <HAL_MspInit+0xa0>)
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	4a24      	ldr	r2, [pc, #144]	@ (80062f8 <HAL_MspInit+0xa0>)
 8006268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800626c:	6453      	str	r3, [r2, #68]	@ 0x44
 800626e:	4b22      	ldr	r3, [pc, #136]	@ (80062f8 <HAL_MspInit+0xa0>)
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <HAL_MspInit+0xa0>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <HAL_MspInit+0xa0>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006288:	6413      	str	r3, [r2, #64]	@ 0x40
 800628a:	4b1b      	ldr	r3, [pc, #108]	@ (80062f8 <HAL_MspInit+0xa0>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006296:	2003      	movs	r0, #3
 8006298:	f000 fe1a 	bl	8006ed0 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800629c:	2200      	movs	r2, #0
 800629e:	2100      	movs	r1, #0
 80062a0:	f06f 000b 	mvn.w	r0, #11
 80062a4:	f000 fe1f 	bl	8006ee6 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	f06f 000a 	mvn.w	r0, #10
 80062b0:	f000 fe19 	bl	8006ee6 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80062b4:	2200      	movs	r2, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	f06f 0009 	mvn.w	r0, #9
 80062bc:	f000 fe13 	bl	8006ee6 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80062c0:	2200      	movs	r2, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	f06f 0004 	mvn.w	r0, #4
 80062c8:	f000 fe0d 	bl	8006ee6 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	f06f 0003 	mvn.w	r0, #3
 80062d4:	f000 fe07 	bl	8006ee6 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80062d8:	2200      	movs	r2, #0
 80062da:	210f      	movs	r1, #15
 80062dc:	f06f 0001 	mvn.w	r0, #1
 80062e0:	f000 fe01 	bl	8006ee6 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80062e4:	2200      	movs	r2, #0
 80062e6:	210f      	movs	r1, #15
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	f000 fdfb 	bl	8006ee6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40023800 	.word	0x40023800

080062fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b090      	sub	sp, #64	@ 0x40
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4aa7      	ldr	r2, [pc, #668]	@ (80065b8 <HAL_SPI_MspInit+0x2bc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f040 80a1 	bne.w	8006462 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006320:	2300      	movs	r3, #0
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006324:	4ba5      	ldr	r3, [pc, #660]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006328:	4aa4      	ldr	r2, [pc, #656]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 800632a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800632e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006330:	4ba2      	ldr	r3, [pc, #648]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006340:	4b9e      	ldr	r3, [pc, #632]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006344:	4a9d      	ldr	r2, [pc, #628]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6313      	str	r3, [r2, #48]	@ 0x30
 800634c:	4b9b      	ldr	r3, [pc, #620]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8006358:	23e0      	movs	r3, #224	@ 0xe0
 800635a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635c:	2302      	movs	r3, #2
 800635e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006360:	2300      	movs	r3, #0
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006364:	2303      	movs	r3, #3
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006368:	2305      	movs	r3, #5
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800636c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006370:	4619      	mov	r1, r3
 8006372:	4893      	ldr	r0, [pc, #588]	@ (80065c0 <HAL_SPI_MspInit+0x2c4>)
 8006374:	f001 fa08 	bl	8007788 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006378:	4b92      	ldr	r3, [pc, #584]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 800637a:	4a93      	ldr	r2, [pc, #588]	@ (80065c8 <HAL_SPI_MspInit+0x2cc>)
 800637c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800637e:	4b91      	ldr	r3, [pc, #580]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 8006380:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8006384:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006386:	4b8f      	ldr	r3, [pc, #572]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800638c:	4b8d      	ldr	r3, [pc, #564]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 800638e:	2200      	movs	r2, #0
 8006390:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006392:	4b8c      	ldr	r3, [pc, #560]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 8006394:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006398:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800639a:	4b8a      	ldr	r3, [pc, #552]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 800639c:	2200      	movs	r2, #0
 800639e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063a0:	4b88      	ldr	r3, [pc, #544]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80063a6:	4b87      	ldr	r3, [pc, #540]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063ac:	4b85      	ldr	r3, [pc, #532]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063b2:	4b84      	ldr	r3, [pc, #528]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80063b8:	4882      	ldr	r0, [pc, #520]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063ba:	f000 fdf5 	bl	8006fa8 <HAL_DMA_Init>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80063c4:	f7ff ff42 	bl	800624c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a7e      	ldr	r2, [pc, #504]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80063ce:	4a7d      	ldr	r2, [pc, #500]	@ (80065c4 <HAL_SPI_MspInit+0x2c8>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80063d4:	4b7d      	ldr	r3, [pc, #500]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063d6:	4a7e      	ldr	r2, [pc, #504]	@ (80065d0 <HAL_SPI_MspInit+0x2d4>)
 80063d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80063da:	4b7c      	ldr	r3, [pc, #496]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80063e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063e2:	4b7a      	ldr	r3, [pc, #488]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063e4:	2240      	movs	r2, #64	@ 0x40
 80063e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063e8:	4b78      	ldr	r3, [pc, #480]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063ee:	4b77      	ldr	r3, [pc, #476]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063f6:	4b75      	ldr	r3, [pc, #468]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063fc:	4b73      	ldr	r3, [pc, #460]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 80063fe:	2200      	movs	r2, #0
 8006400:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006402:	4b72      	ldr	r3, [pc, #456]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 8006404:	2200      	movs	r2, #0
 8006406:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006408:	4b70      	ldr	r3, [pc, #448]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 800640a:	2200      	movs	r2, #0
 800640c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800640e:	4b6f      	ldr	r3, [pc, #444]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 8006410:	2200      	movs	r2, #0
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006414:	486d      	ldr	r0, [pc, #436]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 8006416:	f000 fdc7 	bl	8006fa8 <HAL_DMA_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006420:	f7ff ff14 	bl	800624c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a69      	ldr	r2, [pc, #420]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 8006428:	649a      	str	r2, [r3, #72]	@ 0x48
 800642a:	4a68      	ldr	r2, [pc, #416]	@ (80065cc <HAL_SPI_MspInit+0x2d0>)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8006430:	2201      	movs	r2, #1
 8006432:	210a      	movs	r1, #10
 8006434:	2038      	movs	r0, #56	@ 0x38
 8006436:	f000 fd56 	bl	8006ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800643a:	2038      	movs	r0, #56	@ 0x38
 800643c:	f000 fd6f 	bl	8006f1e <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8006440:	2200      	movs	r2, #0
 8006442:	210a      	movs	r1, #10
 8006444:	203a      	movs	r0, #58	@ 0x3a
 8006446:	f000 fd4e 	bl	8006ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800644a:	203a      	movs	r0, #58	@ 0x3a
 800644c:	f000 fd67 	bl	8006f1e <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8006450:	2202      	movs	r2, #2
 8006452:	210a      	movs	r1, #10
 8006454:	2023      	movs	r0, #35	@ 0x23
 8006456:	f000 fd46 	bl	8006ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800645a:	2023      	movs	r0, #35	@ 0x23
 800645c:	f000 fd5f 	bl	8006f1e <HAL_NVIC_EnableIRQ>
          /* USER CODE BEGIN SPI3_MspInit 1 */

          /* USER CODE END SPI3_MspInit 1 */
      }

}
 8006460:	e10e      	b.n	8006680 <HAL_SPI_MspInit+0x384>
  else if(hspi->Instance==SPI4)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a5b      	ldr	r2, [pc, #364]	@ (80065d4 <HAL_SPI_MspInit+0x2d8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	f040 80bb 	bne.w	80065e4 <HAL_SPI_MspInit+0x2e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	4b52      	ldr	r3, [pc, #328]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006476:	4a51      	ldr	r2, [pc, #324]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006478:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800647c:	6453      	str	r3, [r2, #68]	@ 0x44
 800647e:	4b4f      	ldr	r3, [pc, #316]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	4b4b      	ldr	r3, [pc, #300]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006492:	4a4a      	ldr	r2, [pc, #296]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	6313      	str	r3, [r2, #48]	@ 0x30
 800649a:	4b48      	ldr	r3, [pc, #288]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	4b44      	ldr	r3, [pc, #272]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	4a43      	ldr	r2, [pc, #268]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80064b6:	4b41      	ldr	r3, [pc, #260]	@ (80065bc <HAL_SPI_MspInit+0x2c0>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 80064c2:	2302      	movs	r3, #2
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c6:	2302      	movs	r3, #2
 80064c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ce:	2303      	movs	r3, #3
 80064d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80064d2:	2305      	movs	r3, #5
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 80064d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064da:	4619      	mov	r1, r3
 80064dc:	4838      	ldr	r0, [pc, #224]	@ (80065c0 <HAL_SPI_MspInit+0x2c4>)
 80064de:	f001 f953 	bl	8007788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_MISO_Pin;
 80064e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e8:	2302      	movs	r3, #2
 80064ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f0:	2303      	movs	r3, #3
 80064f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80064f4:	2306      	movs	r3, #6
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MISO_Port, &GPIO_InitStruct);
 80064f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064fc:	4619      	mov	r1, r3
 80064fe:	4830      	ldr	r0, [pc, #192]	@ (80065c0 <HAL_SPI_MspInit+0x2c4>)
 8006500:	f001 f942 	bl	8007788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 8006504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006512:	2303      	movs	r3, #3
 8006514:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8006516:	2306      	movs	r3, #6
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 800651a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800651e:	4619      	mov	r1, r3
 8006520:	482d      	ldr	r0, [pc, #180]	@ (80065d8 <HAL_SPI_MspInit+0x2dc>)
 8006522:	f001 f931 	bl	8007788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8006526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800652c:	2301      	movs	r3, #1
 800652e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8006530:	2300      	movs	r3, #0
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006534:	2303      	movs	r3, #3
 8006536:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8006538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800653c:	4619      	mov	r1, r3
 800653e:	4826      	ldr	r0, [pc, #152]	@ (80065d8 <HAL_SPI_MspInit+0x2dc>)
 8006540:	f001 f922 	bl	8007788 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8006544:	4b25      	ldr	r3, [pc, #148]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006546:	4a26      	ldr	r2, [pc, #152]	@ (80065e0 <HAL_SPI_MspInit+0x2e4>)
 8006548:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800654a:	4b24      	ldr	r3, [pc, #144]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 800654c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006550:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006552:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006558:	4b20      	ldr	r3, [pc, #128]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 800655a:	2200      	movs	r2, #0
 800655c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800655e:	4b1f      	ldr	r3, [pc, #124]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006560:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006564:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006566:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800656c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800656e:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006570:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006574:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8006576:	4b19      	ldr	r3, [pc, #100]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006578:	2200      	movs	r2, #0
 800657a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800657c:	4b17      	ldr	r3, [pc, #92]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 800657e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006582:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006584:	4b15      	ldr	r3, [pc, #84]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 8006586:	2200      	movs	r2, #0
 8006588:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800658a:	4814      	ldr	r0, [pc, #80]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 800658c:	f000 fd0c 	bl	8006fa8 <HAL_DMA_Init>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_SPI_MspInit+0x29e>
      Error_Handler();
 8006596:	f7ff fe59 	bl	800624c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a0f      	ldr	r2, [pc, #60]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 800659e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80065a0:	4a0e      	ldr	r2, [pc, #56]	@ (80065dc <HAL_SPI_MspInit+0x2e0>)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	203b      	movs	r0, #59	@ 0x3b
 80065ac:	f000 fc9b 	bl	8006ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80065b0:	203b      	movs	r0, #59	@ 0x3b
 80065b2:	f000 fcb4 	bl	8006f1e <HAL_NVIC_EnableIRQ>
}
 80065b6:	e063      	b.n	8006680 <HAL_SPI_MspInit+0x384>
 80065b8:	40013000 	.word	0x40013000
 80065bc:	40023800 	.word	0x40023800
 80065c0:	40020000 	.word	0x40020000
 80065c4:	200014f0 	.word	0x200014f0
 80065c8:	40026410 	.word	0x40026410
 80065cc:	20001490 	.word	0x20001490
 80065d0:	40026440 	.word	0x40026440
 80065d4:	40013400 	.word	0x40013400
 80065d8:	40020400 	.word	0x40020400
 80065dc:	20000a78 	.word	0x20000a78
 80065e0:	40026458 	.word	0x40026458
  else if (hspi->Instance == SPI3)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a27      	ldr	r2, [pc, #156]	@ (8006688 <HAL_SPI_MspInit+0x38c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d148      	bne.n	8006680 <HAL_SPI_MspInit+0x384>
	  __HAL_RCC_SPI3_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	4b26      	ldr	r3, [pc, #152]	@ (800668c <HAL_SPI_MspInit+0x390>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	4a25      	ldr	r2, [pc, #148]	@ (800668c <HAL_SPI_MspInit+0x390>)
 80065f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065fe:	4b23      	ldr	r3, [pc, #140]	@ (800668c <HAL_SPI_MspInit+0x390>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	4b1f      	ldr	r3, [pc, #124]	@ (800668c <HAL_SPI_MspInit+0x390>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006612:	4a1e      	ldr	r2, [pc, #120]	@ (800668c <HAL_SPI_MspInit+0x390>)
 8006614:	f043 0304 	orr.w	r3, r3, #4
 8006618:	6313      	str	r3, [r2, #48]	@ 0x30
 800661a:	4b1c      	ldr	r3, [pc, #112]	@ (800668c <HAL_SPI_MspInit+0x390>)
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	4b18      	ldr	r3, [pc, #96]	@ (800668c <HAL_SPI_MspInit+0x390>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	4a17      	ldr	r2, [pc, #92]	@ (800668c <HAL_SPI_MspInit+0x390>)
 8006630:	f043 0308 	orr.w	r3, r3, #8
 8006634:	6313      	str	r3, [r2, #48]	@ 0x30
 8006636:	4b15      	ldr	r3, [pc, #84]	@ (800668c <HAL_SPI_MspInit+0x390>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = RHS_SPI_CLK_Pin | RHS_SPI_MISO_Pin | RHS_SPI_MOSI_Pin;
 8006642:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006646:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006648:	2302      	movs	r3, #2
 800664a:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664c:	2300      	movs	r3, #0
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006650:	2303      	movs	r3, #3
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006654:	2306      	movs	r3, #6
 8006656:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006658:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800665c:	4619      	mov	r1, r3
 800665e:	480c      	ldr	r0, [pc, #48]	@ (8006690 <HAL_SPI_MspInit+0x394>)
 8006660:	f001 f892 	bl	8007788 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin   = RHS_SPI_CS_Pin;
 8006664:	2304      	movs	r3, #4
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006668:	2301      	movs	r3, #1
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800666c:	2300      	movs	r3, #0
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006670:	2303      	movs	r3, #3
 8006672:	63bb      	str	r3, [r7, #56]	@ 0x38
	  HAL_GPIO_Init(RHS_SPI_CS_Port, &GPIO_InitStruct);
 8006674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006678:	4619      	mov	r1, r3
 800667a:	4806      	ldr	r0, [pc, #24]	@ (8006694 <HAL_SPI_MspInit+0x398>)
 800667c:	f001 f884 	bl	8007788 <HAL_GPIO_Init>
}
 8006680:	bf00      	nop
 8006682:	3740      	adds	r7, #64	@ 0x40
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40003c00 	.word	0x40003c00
 800668c:	40023800 	.word	0x40023800
 8006690:	40020800 	.word	0x40020800
 8006694:	40020c00 	.word	0x40020c00

08006698 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <HAL_SPI_MspDeInit+0x80>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d114      	bne.n	80066d4 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80066aa:	4b1c      	ldr	r3, [pc, #112]	@ (800671c <HAL_SPI_MspDeInit+0x84>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	4a1b      	ldr	r2, [pc, #108]	@ (800671c <HAL_SPI_MspDeInit+0x84>)
 80066b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 80066b6:	21e0      	movs	r1, #224	@ 0xe0
 80066b8:	4819      	ldr	r0, [pc, #100]	@ (8006720 <HAL_SPI_MspDeInit+0x88>)
 80066ba:	f001 f9e9 	bl	8007a90 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fd1e 	bl	8007104 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fd19 	bl	8007104 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 80066d2:	e01d      	b.n	8006710 <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a12      	ldr	r2, [pc, #72]	@ (8006724 <HAL_SPI_MspDeInit+0x8c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d118      	bne.n	8006710 <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 80066de:	4b0f      	ldr	r3, [pc, #60]	@ (800671c <HAL_SPI_MspDeInit+0x84>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	4a0e      	ldr	r2, [pc, #56]	@ (800671c <HAL_SPI_MspDeInit+0x84>)
 80066e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066e8:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 80066ea:	2102      	movs	r1, #2
 80066ec:	480c      	ldr	r0, [pc, #48]	@ (8006720 <HAL_SPI_MspDeInit+0x88>)
 80066ee:	f001 f9cf 	bl	8007a90 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 80066f2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80066f6:	480c      	ldr	r0, [pc, #48]	@ (8006728 <HAL_SPI_MspDeInit+0x90>)
 80066f8:	f001 f9ca 	bl	8007a90 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fcff 	bl	8007104 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fcfa 	bl	8007104 <HAL_DMA_DeInit>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40013000 	.word	0x40013000
 800671c:	40023800 	.word	0x40023800
 8006720:	40020000 	.word	0x40020000
 8006724:	40013400 	.word	0x40013400
 8006728:	40020400 	.word	0x40020400

0800672c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	@ 0x28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006734:	f107 0314 	add.w	r3, r7, #20
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a19      	ldr	r2, [pc, #100]	@ (80067b0 <HAL_UART_MspInit+0x84>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d12b      	bne.n	80067a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	4b18      	ldr	r3, [pc, #96]	@ (80067b4 <HAL_UART_MspInit+0x88>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <HAL_UART_MspInit+0x88>)
 8006758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800675c:	6413      	str	r3, [r2, #64]	@ 0x40
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <HAL_UART_MspInit+0x88>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <HAL_UART_MspInit+0x88>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006772:	4a10      	ldr	r2, [pc, #64]	@ (80067b4 <HAL_UART_MspInit+0x88>)
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	6313      	str	r3, [r2, #48]	@ 0x30
 800677a:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <HAL_UART_MspInit+0x88>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006786:	230c      	movs	r3, #12
 8006788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800678a:	2302      	movs	r3, #2
 800678c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006792:	2303      	movs	r3, #3
 8006794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006796:	2307      	movs	r3, #7
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	4619      	mov	r1, r3
 80067a0:	4805      	ldr	r0, [pc, #20]	@ (80067b8 <HAL_UART_MspInit+0x8c>)
 80067a2:	f000 fff1 	bl	8007788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80067a6:	bf00      	nop
 80067a8:	3728      	adds	r7, #40	@ 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40004400 	.word	0x40004400
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40020000 	.word	0x40020000

080067bc <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 80067c0:	4802      	ldr	r0, [pc, #8]	@ (80067cc <SPI1_IRQHandler+0x10>)
 80067c2:	f002 fb87 	bl	8008ed4 <HAL_SPI_IRQHandler>
}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20001438 	.word	0x20001438

080067d0 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80067dc:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <HAL_SPI_TxCpltCallback+0x3c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f107 020c 	add.w	r2, r7, #12
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f006 fed4 	bl	800d594 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <HAL_SPI_TxCpltCallback+0x32>
 80067f2:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <HAL_SPI_TxCpltCallback+0x40>)
 80067f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	f3bf 8f6f 	isb	sy
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20001550 	.word	0x20001550
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1c      	ldr	r2, [pc, #112]	@ (8006898 <HAL_SPI_RxCpltCallback+0x84>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d112      	bne.n	8006850 <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 800682a:	4b1c      	ldr	r3, [pc, #112]	@ (800689c <HAL_SPI_RxCpltCallback+0x88>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f107 020c 	add.w	r2, r7, #12
 8006832:	4611      	mov	r1, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f006 fead 	bl	800d594 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_SPI_RxCpltCallback+0x3c>
 8006840:	4b17      	ldr	r3, [pc, #92]	@ (80068a0 <HAL_SPI_RxCpltCallback+0x8c>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a13      	ldr	r2, [pc, #76]	@ (80068a4 <HAL_SPI_RxCpltCallback+0x90>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d119      	bne.n	800688e <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 800685a:	4b13      	ldr	r3, [pc, #76]	@ (80068a8 <HAL_SPI_RxCpltCallback+0x94>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	3301      	adds	r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	bfb8      	it	lt
 800686a:	425b      	neglt	r3, r3
 800686c:	b2da      	uxtb	r2, r3
 800686e:	4b0e      	ldr	r3, [pc, #56]	@ (80068a8 <HAL_SPI_RxCpltCallback+0x94>)
 8006870:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <HAL_SPI_RxCpltCallback+0x94>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	01db      	lsls	r3, r3, #7
 800687a:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <HAL_SPI_RxCpltCallback+0x98>)
 800687c:	4413      	add	r3, r2
 800687e:	2240      	movs	r2, #64	@ 0x40
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f002 f962 	bl	8008b4c <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <HAL_SPI_RxCpltCallback+0x9c>)
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
	}
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40013000 	.word	0x40013000
 800689c:	20001550 	.word	0x20001550
 80068a0:	e000ed04 	.word	0xe000ed04
 80068a4:	40013400 	.word	0x40013400
 80068a8:	200002bc 	.word	0x200002bc
 80068ac:	200002c0 	.word	0x200002c0
 80068b0:	200002b4 	.word	0x200002b4

080068b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <NMI_Handler+0x4>

080068bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <HardFault_Handler+0x4>

080068c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068c8:	bf00      	nop
 80068ca:	e7fd      	b.n	80068c8 <MemManage_Handler+0x4>

080068cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <BusFault_Handler+0x4>

080068d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <UsageFault_Handler+0x4>

080068dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068e0:	bf00      	nop
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068ee:	f000 f9b7 	bl	8006c60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80068f2:	f008 f9e3 	bl	800ecbc <xTaskGetSchedulerState>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80068fc:	f009 f934 	bl	800fb68 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 8006900:	f006 f952 	bl	800cba8 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}

08006908 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 8006912:	4b15      	ldr	r3, [pc, #84]	@ (8006968 <EXTI15_10_IRQHandler+0x60>)
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800691a:	2b00      	cmp	r3, #0
 800691c:	d011      	beq.n	8006942 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 800691e:	4b13      	ldr	r3, [pc, #76]	@ (800696c <EXTI15_10_IRQHandler+0x64>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d006      	beq.n	8006934 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8006926:	4b11      	ldr	r3, [pc, #68]	@ (800696c <EXTI15_10_IRQHandler+0x64>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	1d3a      	adds	r2, r7, #4
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f006 fe30 	bl	800d594 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8006934:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <EXTI15_10_IRQHandler+0x68>)
 8006936:	6819      	ldr	r1, [r3, #0]
 8006938:	1d3b      	adds	r3, r7, #4
 800693a:	2202      	movs	r2, #2
 800693c:	480d      	ldr	r0, [pc, #52]	@ (8006974 <EXTI15_10_IRQHandler+0x6c>)
 800693e:	f008 ff33 	bl	800f7a8 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 8006942:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006946:	f001 f9a1 	bl	8007c8c <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <EXTI15_10_IRQHandler+0x58>
 8006950:	4b09      	ldr	r3, [pc, #36]	@ (8006978 <EXTI15_10_IRQHandler+0x70>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy

}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40013c00 	.word	0x40013c00
 800696c:	2000141c 	.word	0x2000141c
 8006970:	20001558 	.word	0x20001558
 8006974:	0800cea9 	.word	0x0800cea9
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006980:	4802      	ldr	r0, [pc, #8]	@ (800698c <DMA2_Stream0_IRQHandler+0x10>)
 8006982:	f000 fc97 	bl	80072b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006986:	bf00      	nop
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200014f0 	.word	0x200014f0

08006990 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006994:	4802      	ldr	r0, [pc, #8]	@ (80069a0 <DMA2_Stream2_IRQHandler+0x10>)
 8006996:	f000 fc8d 	bl	80072b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800699a:	bf00      	nop
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20001490 	.word	0x20001490

080069a4 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80069a8:	4802      	ldr	r0, [pc, #8]	@ (80069b4 <DMA2_Stream3_IRQHandler+0x10>)
 80069aa:	f000 fc83 	bl	80072b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000a78 	.word	0x20000a78

080069b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
	return 1;
 80069bc:	2301      	movs	r3, #1
}
 80069be:	4618      	mov	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <_kill>:

int _kill(int pid, int sig)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80069d2:	f018 fb41 	bl	801f058 <__errno>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2216      	movs	r2, #22
 80069da:	601a      	str	r2, [r3, #0]
	return -1;
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_exit>:

void _exit (int status)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80069f0:	f04f 31ff 	mov.w	r1, #4294967295
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ffe7 	bl	80069c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <_exit+0x12>

080069fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e00a      	b.n	8006a26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006a10:	f3af 8000 	nop.w
 8006a14:	4601      	mov	r1, r0
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	60ba      	str	r2, [r7, #8]
 8006a1c:	b2ca      	uxtb	r2, r1
 8006a1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	3301      	adds	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	dbf0      	blt.n	8006a10 <_read+0x12>
	}

return len;
 8006a2e:	687b      	ldr	r3, [r7, #4]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e009      	b.n	8006a5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	60ba      	str	r2, [r7, #8]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fbe8 	bl	8006228 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	dbf1      	blt.n	8006a4a <_write+0x12>
	}
	return len;
 8006a66:	687b      	ldr	r3, [r7, #4]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_close>:

int _close(int file)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	return -1;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006a98:	605a      	str	r2, [r3, #4]
	return 0;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <_isatty>:

int _isatty(int file)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	return 1;
 8006ab0:	2301      	movs	r3, #1
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
	return 0;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ae0:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <_sbrk+0x5c>)
 8006ae2:	4b15      	ldr	r3, [pc, #84]	@ (8006b38 <_sbrk+0x60>)
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <_sbrk+0x64>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006af4:	4b11      	ldr	r3, [pc, #68]	@ (8006b3c <_sbrk+0x64>)
 8006af6:	4a12      	ldr	r2, [pc, #72]	@ (8006b40 <_sbrk+0x68>)
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006afa:	4b10      	ldr	r3, [pc, #64]	@ (8006b3c <_sbrk+0x64>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d207      	bcs.n	8006b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b08:	f018 faa6 	bl	801f058 <__errno>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	220c      	movs	r2, #12
 8006b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	e009      	b.n	8006b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b18:	4b08      	ldr	r3, [pc, #32]	@ (8006b3c <_sbrk+0x64>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	@ (8006b3c <_sbrk+0x64>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	4a05      	ldr	r2, [pc, #20]	@ (8006b3c <_sbrk+0x64>)
 8006b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20020000 	.word	0x20020000
 8006b38:	00000400 	.word	0x00000400
 8006b3c:	20000ad8 	.word	0x20000ad8
 8006b40:	200140a0 	.word	0x200140a0

08006b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <SystemInit+0x20>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4e:	4a05      	ldr	r2, [pc, #20]	@ (8006b64 <SystemInit+0x20>)
 8006b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	e000ed00 	.word	0xe000ed00

08006b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b6c:	480d      	ldr	r0, [pc, #52]	@ (8006ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b6e:	490e      	ldr	r1, [pc, #56]	@ (8006ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b70:	4a0e      	ldr	r2, [pc, #56]	@ (8006bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b74:	e002      	b.n	8006b7c <LoopCopyDataInit>

08006b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b7a:	3304      	adds	r3, #4

08006b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b80:	d3f9      	bcc.n	8006b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b82:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b84:	4c0b      	ldr	r4, [pc, #44]	@ (8006bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b88:	e001      	b.n	8006b8e <LoopFillZerobss>

08006b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b8c:	3204      	adds	r2, #4

08006b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b90:	d3fb      	bcc.n	8006b8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006b92:	f7ff ffd7 	bl	8006b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b96:	f018 fa65 	bl	801f064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b9a:	f7ff f953 	bl	8005e44 <main>
  bx  lr    
 8006b9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ba8:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8006bac:	0807168c 	.word	0x0807168c
  ldr r2, =_sbss
 8006bb0:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8006bb4:	200140a0 	.word	0x200140a0

08006bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bb8:	e7fe      	b.n	8006bb8 <ADC_IRQHandler>
	...

08006bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006bfc <HAL_Init+0x40>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8006bfc <HAL_Init+0x40>)
 8006bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bfc <HAL_Init+0x40>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8006bfc <HAL_Init+0x40>)
 8006bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bd8:	4b08      	ldr	r3, [pc, #32]	@ (8006bfc <HAL_Init+0x40>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a07      	ldr	r2, [pc, #28]	@ (8006bfc <HAL_Init+0x40>)
 8006bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006be4:	2003      	movs	r0, #3
 8006be6:	f000 f973 	bl	8006ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bea:	200f      	movs	r0, #15
 8006bec:	f000 f808 	bl	8006c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bf0:	f7ff fb32 	bl	8006258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40023c00 	.word	0x40023c00

08006c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c08:	4b12      	ldr	r3, [pc, #72]	@ (8006c54 <HAL_InitTick+0x54>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <HAL_InitTick+0x58>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f999 	bl	8006f56 <HAL_SYSTICK_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e00e      	b.n	8006c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b0f      	cmp	r3, #15
 8006c32:	d80a      	bhi.n	8006c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c34:	2200      	movs	r2, #0
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	f000 f953 	bl	8006ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c40:	4a06      	ldr	r2, [pc, #24]	@ (8006c5c <HAL_InitTick+0x5c>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	200000ac 	.word	0x200000ac
 8006c58:	200000b4 	.word	0x200000b4
 8006c5c:	200000b0 	.word	0x200000b0

08006c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_IncTick+0x20>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4b06      	ldr	r3, [pc, #24]	@ (8006c84 <HAL_IncTick+0x24>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4413      	add	r3, r2
 8006c70:	4a04      	ldr	r2, [pc, #16]	@ (8006c84 <HAL_IncTick+0x24>)
 8006c72:	6013      	str	r3, [r2, #0]
}
 8006c74:	bf00      	nop
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	200000b4 	.word	0x200000b4
 8006c84:	20000adc 	.word	0x20000adc

08006c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c8c:	4b03      	ldr	r3, [pc, #12]	@ (8006c9c <HAL_GetTick+0x14>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000adc 	.word	0x20000adc

08006ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ca8:	f7ff ffee 	bl	8006c88 <HAL_GetTick>
 8006cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d005      	beq.n	8006cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <HAL_Delay+0x44>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cc6:	bf00      	nop
 8006cc8:	f7ff ffde 	bl	8006c88 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d8f7      	bhi.n	8006cc8 <HAL_Delay+0x28>
  {
  }
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200000b4 	.word	0x200000b4

08006ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d2c <__NVIC_SetPriorityGrouping+0x44>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d04:	4013      	ands	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d1a:	4a04      	ldr	r2, [pc, #16]	@ (8006d2c <__NVIC_SetPriorityGrouping+0x44>)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	60d3      	str	r3, [r2, #12]
}
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	e000ed00 	.word	0xe000ed00

08006d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d34:	4b04      	ldr	r3, [pc, #16]	@ (8006d48 <__NVIC_GetPriorityGrouping+0x18>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	f003 0307 	and.w	r3, r3, #7
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	e000ed00 	.word	0xe000ed00

08006d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	db0b      	blt.n	8006d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	f003 021f 	and.w	r2, r3, #31
 8006d64:	4907      	ldr	r1, [pc, #28]	@ (8006d84 <__NVIC_EnableIRQ+0x38>)
 8006d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8006d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	e000e100 	.word	0xe000e100

08006d88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	db12      	blt.n	8006dc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	f003 021f 	and.w	r2, r3, #31
 8006da0:	490a      	ldr	r1, [pc, #40]	@ (8006dcc <__NVIC_DisableIRQ+0x44>)
 8006da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2001      	movs	r0, #1
 8006daa:	fa00 f202 	lsl.w	r2, r0, r2
 8006dae:	3320      	adds	r3, #32
 8006db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006db4:	f3bf 8f4f 	dsb	sy
}
 8006db8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006dba:	f3bf 8f6f 	isb	sy
}
 8006dbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	e000e100 	.word	0xe000e100

08006dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	6039      	str	r1, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	db0a      	blt.n	8006dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	490c      	ldr	r1, [pc, #48]	@ (8006e1c <__NVIC_SetPriority+0x4c>)
 8006dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dee:	0112      	lsls	r2, r2, #4
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	440b      	add	r3, r1
 8006df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006df8:	e00a      	b.n	8006e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	4908      	ldr	r1, [pc, #32]	@ (8006e20 <__NVIC_SetPriority+0x50>)
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	3b04      	subs	r3, #4
 8006e08:	0112      	lsls	r2, r2, #4
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	761a      	strb	r2, [r3, #24]
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	e000e100 	.word	0xe000e100
 8006e20:	e000ed00 	.word	0xe000ed00

08006e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b089      	sub	sp, #36	@ 0x24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f1c3 0307 	rsb	r3, r3, #7
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	bf28      	it	cs
 8006e42:	2304      	movcs	r3, #4
 8006e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	2b06      	cmp	r3, #6
 8006e4c:	d902      	bls.n	8006e54 <NVIC_EncodePriority+0x30>
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3b03      	subs	r3, #3
 8006e52:	e000      	b.n	8006e56 <NVIC_EncodePriority+0x32>
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	43da      	mvns	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	401a      	ands	r2, r3
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	43d9      	mvns	r1, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e7c:	4313      	orrs	r3, r2
         );
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3724      	adds	r7, #36	@ 0x24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e9c:	d301      	bcc.n	8006ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e00f      	b.n	8006ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ecc <SysTick_Config+0x40>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eaa:	210f      	movs	r1, #15
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb0:	f7ff ff8e 	bl	8006dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <SysTick_Config+0x40>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eba:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <SysTick_Config+0x40>)
 8006ebc:	2207      	movs	r2, #7
 8006ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	e000e010 	.word	0xe000e010

08006ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff ff05 	bl	8006ce8 <__NVIC_SetPriorityGrouping>
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	4603      	mov	r3, r0
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ef8:	f7ff ff1a 	bl	8006d30 <__NVIC_GetPriorityGrouping>
 8006efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	6978      	ldr	r0, [r7, #20]
 8006f04:	f7ff ff8e 	bl	8006e24 <NVIC_EncodePriority>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff ff5d 	bl	8006dd0 <__NVIC_SetPriority>
}
 8006f16:	bf00      	nop
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	4603      	mov	r3, r0
 8006f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff0d 	bl	8006d4c <__NVIC_EnableIRQ>
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	4603      	mov	r3, r0
 8006f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff ff1d 	bl	8006d88 <__NVIC_DisableIRQ>
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff ff94 	bl	8006e8c <SysTick_Config>
 8006f64:	4603      	mov	r3, r0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d106      	bne.n	8006f8c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006f7e:	4b09      	ldr	r3, [pc, #36]	@ (8006fa4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a08      	ldr	r2, [pc, #32]	@ (8006fa4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006f84:	f043 0304 	orr.w	r3, r3, #4
 8006f88:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8006f8a:	e005      	b.n	8006f98 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a04      	ldr	r2, [pc, #16]	@ (8006fa4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006f92:	f023 0304 	bic.w	r3, r3, #4
 8006f96:	6013      	str	r3, [r2, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	e000e010 	.word	0xe000e010

08006fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fb4:	f7ff fe68 	bl	8006c88 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e099      	b.n	80070f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fe4:	e00f      	b.n	8007006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fe6:	f7ff fe4f 	bl	8006c88 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d908      	bls.n	8007006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e078      	b.n	80070f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e8      	bne.n	8006fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4b38      	ldr	r3, [pc, #224]	@ (8007100 <HAL_DMA_Init+0x158>)
 8007020:	4013      	ands	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800703e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800704a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	2b04      	cmp	r3, #4
 800705e:	d107      	bne.n	8007070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007068:	4313      	orrs	r3, r2
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f023 0307 	bic.w	r3, r3, #7
 8007086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	2b04      	cmp	r3, #4
 8007098:	d117      	bne.n	80070ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00e      	beq.n	80070ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 faef 	bl	8007690 <DMA_CheckFifoParam>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2240      	movs	r2, #64	@ 0x40
 80070bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80070c6:	2301      	movs	r3, #1
 80070c8:	e016      	b.n	80070f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 faa6 	bl	8007624 <DMA_CalcBaseAndBitshift>
 80070d8:	4603      	mov	r3, r0
 80070da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e0:	223f      	movs	r2, #63	@ 0x3f
 80070e2:	409a      	lsls	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	f010803f 	.word	0xf010803f

08007104 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e050      	b.n	80071b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d101      	bne.n	8007126 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007122:	2302      	movs	r3, #2
 8007124:	e048      	b.n	80071b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0201 	bic.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2221      	movs	r2, #33	@ 0x21
 8007164:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa5c 	bl	8007624 <DMA_CalcBaseAndBitshift>
 800716c:	4603      	mov	r3, r0
 800716e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007198:	223f      	movs	r2, #63	@ 0x3f
 800719a:	409a      	lsls	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_DMA_Start_IT+0x26>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e040      	b.n	8007268 <HAL_DMA_Start_IT+0xa8>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d12f      	bne.n	800725a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f9da 	bl	80075c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007218:	223f      	movs	r2, #63	@ 0x3f
 800721a:	409a      	lsls	r2, r3
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0216 	orr.w	r2, r2, #22
 800722e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0208 	orr.w	r2, r2, #8
 8007246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e005      	b.n	8007266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007262:	2302      	movs	r3, #2
 8007264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d004      	beq.n	800728e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2280      	movs	r2, #128	@ 0x80
 8007288:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e00c      	b.n	80072a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2205      	movs	r2, #5
 8007292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0201 	bic.w	r2, r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072c0:	4b8e      	ldr	r3, [pc, #568]	@ (80074fc <HAL_DMA_IRQHandler+0x248>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007500 <HAL_DMA_IRQHandler+0x24c>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	0a9b      	lsrs	r3, r3, #10
 80072cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072de:	2208      	movs	r2, #8
 80072e0:	409a      	lsls	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01a      	beq.n	8007320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d013      	beq.n	8007320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0204 	bic.w	r2, r2, #4
 8007306:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730c:	2208      	movs	r2, #8
 800730e:	409a      	lsls	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007318:	f043 0201 	orr.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007324:	2201      	movs	r2, #1
 8007326:	409a      	lsls	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d012      	beq.n	8007356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007342:	2201      	movs	r2, #1
 8007344:	409a      	lsls	r2, r3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734e:	f043 0202 	orr.w	r2, r3, #2
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	2204      	movs	r2, #4
 800735c:	409a      	lsls	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d012      	beq.n	800738c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007378:	2204      	movs	r2, #4
 800737a:	409a      	lsls	r2, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007384:	f043 0204 	orr.w	r2, r3, #4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007390:	2210      	movs	r2, #16
 8007392:	409a      	lsls	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d043      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d03c      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ae:	2210      	movs	r2, #16
 80073b0:	409a      	lsls	r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d018      	beq.n	80073f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d108      	bne.n	80073e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d024      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	e01f      	b.n	8007424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
 80073f4:	e016      	b.n	8007424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d107      	bne.n	8007414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0208 	bic.w	r2, r2, #8
 8007412:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007428:	2220      	movs	r2, #32
 800742a:	409a      	lsls	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 808f 	beq.w	8007554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8087 	beq.w	8007554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800744a:	2220      	movs	r2, #32
 800744c:	409a      	lsls	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b05      	cmp	r3, #5
 800745c:	d136      	bne.n	80074cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0216 	bic.w	r2, r2, #22
 800746c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800747c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <HAL_DMA_IRQHandler+0x1da>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0208 	bic.w	r2, r2, #8
 800749c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a2:	223f      	movs	r2, #63	@ 0x3f
 80074a4:	409a      	lsls	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d07e      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
        }
        return;
 80074ca:	e079      	b.n	80075c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01d      	beq.n	8007516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d031      	beq.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
 80074f8:	e02c      	b.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
 80074fa:	bf00      	nop
 80074fc:	200000ac 	.word	0x200000ac
 8007500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d023      	beq.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	e01e      	b.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10f      	bne.n	8007544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0210 	bic.w	r2, r2, #16
 8007532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007558:	2b00      	cmp	r3, #0
 800755a:	d032      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d022      	beq.n	80075ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2205      	movs	r2, #5
 800756c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3301      	adds	r3, #1
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d307      	bcc.n	800759c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f2      	bne.n	8007580 <HAL_DMA_IRQHandler+0x2cc>
 800759a:	e000      	b.n	800759e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800759c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
 80075be:	e000      	b.n	80075c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80075c0:	bf00      	nop
    }
  }
}
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b40      	cmp	r3, #64	@ 0x40
 80075f4:	d108      	bne.n	8007608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007606:	e007      	b.n	8007618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]
}
 8007618:	bf00      	nop
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3b10      	subs	r3, #16
 8007634:	4a14      	ldr	r2, [pc, #80]	@ (8007688 <DMA_CalcBaseAndBitshift+0x64>)
 8007636:	fba2 2303 	umull	r2, r3, r2, r3
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800763e:	4a13      	ldr	r2, [pc, #76]	@ (800768c <DMA_CalcBaseAndBitshift+0x68>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d909      	bls.n	8007666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800765a:	f023 0303 	bic.w	r3, r3, #3
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	659a      	str	r2, [r3, #88]	@ 0x58
 8007664:	e007      	b.n	8007676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	aaaaaaab 	.word	0xaaaaaaab
 800768c:	080254bc 	.word	0x080254bc

08007690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d11f      	bne.n	80076ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d856      	bhi.n	800775e <DMA_CheckFifoParam+0xce>
 80076b0:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <DMA_CheckFifoParam+0x28>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076db 	.word	0x080076db
 80076c0:	080076c9 	.word	0x080076c9
 80076c4:	0800775f 	.word	0x0800775f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d046      	beq.n	8007762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d8:	e043      	b.n	8007762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076e2:	d140      	bne.n	8007766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e8:	e03d      	b.n	8007766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f2:	d121      	bne.n	8007738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d837      	bhi.n	800776a <DMA_CheckFifoParam+0xda>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <DMA_CheckFifoParam+0x70>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007711 	.word	0x08007711
 8007704:	08007717 	.word	0x08007717
 8007708:	08007711 	.word	0x08007711
 800770c:	08007729 	.word	0x08007729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	e030      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d025      	beq.n	800776e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007726:	e022      	b.n	800776e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007730:	d11f      	bne.n	8007772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007736:	e01c      	b.n	8007772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d903      	bls.n	8007746 <DMA_CheckFifoParam+0xb6>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d003      	beq.n	800774c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007744:	e018      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
      break;
 800774a:	e015      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e00b      	b.n	8007776 <DMA_CheckFifoParam+0xe6>
      break;
 800775e:	bf00      	nop
 8007760:	e00a      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 8007762:	bf00      	nop
 8007764:	e008      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 8007766:	bf00      	nop
 8007768:	e006      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 800776a:	bf00      	nop
 800776c:	e004      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 800776e:	bf00      	nop
 8007770:	e002      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;   
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
      break;
 8007776:	bf00      	nop
    }
  } 
  
  return status; 
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007788:	b480      	push	{r7}
 800778a:	b089      	sub	sp, #36	@ 0x24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800779a:	2300      	movs	r3, #0
 800779c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	e159      	b.n	8007a58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077a4:	2201      	movs	r2, #1
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4013      	ands	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	429a      	cmp	r2, r3
 80077be:	f040 8148 	bne.w	8007a52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d005      	beq.n	80077da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d130      	bne.n	800783c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	2203      	movs	r2, #3
 80077e6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ea:	43db      	mvns	r3, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4013      	ands	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	fa02 f303 	lsl.w	r3, r2, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4313      	orrs	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007810:	2201      	movs	r2, #1
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	43db      	mvns	r3, r3
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4013      	ands	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	091b      	lsrs	r3, r3, #4
 8007826:	f003 0201 	and.w	r2, r3, #1
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	fa02 f303 	lsl.w	r3, r2, r3
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	4313      	orrs	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	2b03      	cmp	r3, #3
 8007846:	d017      	beq.n	8007878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	2203      	movs	r2, #3
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d123      	bne.n	80078cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	08da      	lsrs	r2, r3, #3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3208      	adds	r2, #8
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	220f      	movs	r2, #15
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	08da      	lsrs	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3208      	adds	r2, #8
 80078c6:	69b9      	ldr	r1, [r7, #24]
 80078c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	2203      	movs	r2, #3
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4013      	ands	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 0203 	and.w	r2, r3, #3
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80a2 	beq.w	8007a52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	4b57      	ldr	r3, [pc, #348]	@ (8007a70 <HAL_GPIO_Init+0x2e8>)
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	4a56      	ldr	r2, [pc, #344]	@ (8007a70 <HAL_GPIO_Init+0x2e8>)
 8007918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800791c:	6453      	str	r3, [r2, #68]	@ 0x44
 800791e:	4b54      	ldr	r3, [pc, #336]	@ (8007a70 <HAL_GPIO_Init+0x2e8>)
 8007920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800792a:	4a52      	ldr	r2, [pc, #328]	@ (8007a74 <HAL_GPIO_Init+0x2ec>)
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	3302      	adds	r3, #2
 8007932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	220f      	movs	r2, #15
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a49      	ldr	r2, [pc, #292]	@ (8007a78 <HAL_GPIO_Init+0x2f0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d019      	beq.n	800798a <HAL_GPIO_Init+0x202>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a48      	ldr	r2, [pc, #288]	@ (8007a7c <HAL_GPIO_Init+0x2f4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_GPIO_Init+0x1fe>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a47      	ldr	r2, [pc, #284]	@ (8007a80 <HAL_GPIO_Init+0x2f8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00d      	beq.n	8007982 <HAL_GPIO_Init+0x1fa>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a46      	ldr	r2, [pc, #280]	@ (8007a84 <HAL_GPIO_Init+0x2fc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <HAL_GPIO_Init+0x1f6>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a45      	ldr	r2, [pc, #276]	@ (8007a88 <HAL_GPIO_Init+0x300>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d101      	bne.n	800797a <HAL_GPIO_Init+0x1f2>
 8007976:	2304      	movs	r3, #4
 8007978:	e008      	b.n	800798c <HAL_GPIO_Init+0x204>
 800797a:	2307      	movs	r3, #7
 800797c:	e006      	b.n	800798c <HAL_GPIO_Init+0x204>
 800797e:	2303      	movs	r3, #3
 8007980:	e004      	b.n	800798c <HAL_GPIO_Init+0x204>
 8007982:	2302      	movs	r3, #2
 8007984:	e002      	b.n	800798c <HAL_GPIO_Init+0x204>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <HAL_GPIO_Init+0x204>
 800798a:	2300      	movs	r3, #0
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	f002 0203 	and.w	r2, r2, #3
 8007992:	0092      	lsls	r2, r2, #2
 8007994:	4093      	lsls	r3, r2
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4313      	orrs	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800799c:	4935      	ldr	r1, [pc, #212]	@ (8007a74 <HAL_GPIO_Init+0x2ec>)
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	3302      	adds	r3, #2
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079aa:	4b38      	ldr	r3, [pc, #224]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	43db      	mvns	r3, r3
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079ce:	4a2f      	ldr	r2, [pc, #188]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079d4:	4b2d      	ldr	r3, [pc, #180]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	43db      	mvns	r3, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4013      	ands	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079f8:	4a24      	ldr	r2, [pc, #144]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079fe:	4b23      	ldr	r3, [pc, #140]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	43db      	mvns	r3, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a22:	4a1a      	ldr	r2, [pc, #104]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a28:	4b18      	ldr	r3, [pc, #96]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	43db      	mvns	r3, r3
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	4013      	ands	r3, r2
 8007a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007a8c <HAL_GPIO_Init+0x304>)
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	3301      	adds	r3, #1
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	f67f aea2 	bls.w	80077a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	3724      	adds	r7, #36	@ 0x24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800
 8007a74:	40013800 	.word	0x40013800
 8007a78:	40020000 	.word	0x40020000
 8007a7c:	40020400 	.word	0x40020400
 8007a80:	40020800 	.word	0x40020800
 8007a84:	40020c00 	.word	0x40020c00
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40013c00 	.word	0x40013c00

08007a90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e0bb      	b.n	8007c24 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007aac:	2201      	movs	r2, #1
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	f040 80ab 	bne.w	8007c1e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ac8:	4a5c      	ldr	r2, [pc, #368]	@ (8007c3c <HAL_GPIO_DeInit+0x1ac>)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	089b      	lsrs	r3, r3, #2
 8007ace:	3302      	adds	r3, #2
 8007ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	220f      	movs	r2, #15
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a54      	ldr	r2, [pc, #336]	@ (8007c40 <HAL_GPIO_DeInit+0x1b0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d019      	beq.n	8007b26 <HAL_GPIO_DeInit+0x96>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a53      	ldr	r2, [pc, #332]	@ (8007c44 <HAL_GPIO_DeInit+0x1b4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <HAL_GPIO_DeInit+0x92>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a52      	ldr	r2, [pc, #328]	@ (8007c48 <HAL_GPIO_DeInit+0x1b8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00d      	beq.n	8007b1e <HAL_GPIO_DeInit+0x8e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a51      	ldr	r2, [pc, #324]	@ (8007c4c <HAL_GPIO_DeInit+0x1bc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d007      	beq.n	8007b1a <HAL_GPIO_DeInit+0x8a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a50      	ldr	r2, [pc, #320]	@ (8007c50 <HAL_GPIO_DeInit+0x1c0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d101      	bne.n	8007b16 <HAL_GPIO_DeInit+0x86>
 8007b12:	2304      	movs	r3, #4
 8007b14:	e008      	b.n	8007b28 <HAL_GPIO_DeInit+0x98>
 8007b16:	2307      	movs	r3, #7
 8007b18:	e006      	b.n	8007b28 <HAL_GPIO_DeInit+0x98>
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e004      	b.n	8007b28 <HAL_GPIO_DeInit+0x98>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e002      	b.n	8007b28 <HAL_GPIO_DeInit+0x98>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <HAL_GPIO_DeInit+0x98>
 8007b26:	2300      	movs	r3, #0
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	f002 0203 	and.w	r2, r2, #3
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	4093      	lsls	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d132      	bne.n	8007b9e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b38:	4b46      	ldr	r3, [pc, #280]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	4944      	ldr	r1, [pc, #272]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b46:	4b43      	ldr	r3, [pc, #268]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	4941      	ldr	r1, [pc, #260]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b54:	4b3f      	ldr	r3, [pc, #252]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	493d      	ldr	r1, [pc, #244]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b62:	4b3c      	ldr	r3, [pc, #240]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	493a      	ldr	r1, [pc, #232]	@ (8007c54 <HAL_GPIO_DeInit+0x1c4>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	220f      	movs	r2, #15
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007b80:	4a2e      	ldr	r2, [pc, #184]	@ (8007c3c <HAL_GPIO_DeInit+0x1ac>)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	089b      	lsrs	r3, r3, #2
 8007b86:	3302      	adds	r3, #2
 8007b88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	43da      	mvns	r2, r3
 8007b90:	482a      	ldr	r0, [pc, #168]	@ (8007c3c <HAL_GPIO_DeInit+0x1ac>)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	089b      	lsrs	r3, r3, #2
 8007b96:	400a      	ands	r2, r1
 8007b98:	3302      	adds	r3, #2
 8007b9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	2103      	movs	r1, #3
 8007ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bac:	43db      	mvns	r3, r3
 8007bae:	401a      	ands	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	08da      	lsrs	r2, r3, #3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3208      	adds	r2, #8
 8007bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	220f      	movs	r2, #15
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	08d2      	lsrs	r2, r2, #3
 8007bd4:	4019      	ands	r1, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3208      	adds	r2, #8
 8007bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	2103      	movs	r1, #3
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007c00:	43db      	mvns	r3, r3
 8007c02:	401a      	ands	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	2103      	movs	r1, #3
 8007c12:	fa01 f303 	lsl.w	r3, r1, r3
 8007c16:	43db      	mvns	r3, r3
 8007c18:	401a      	ands	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	3301      	adds	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	f67f af40 	bls.w	8007aac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40013800 	.word	0x40013800
 8007c40:	40020000 	.word	0x40020000
 8007c44:	40020400 	.word	0x40020400
 8007c48:	40020800 	.word	0x40020800
 8007c4c:	40020c00 	.word	0x40020c00
 8007c50:	40021000 	.word	0x40021000
 8007c54:	40013c00 	.word	0x40013c00

08007c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	807b      	strh	r3, [r7, #2]
 8007c64:	4613      	mov	r3, r2
 8007c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c68:	787b      	ldrb	r3, [r7, #1]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c6e:	887a      	ldrh	r2, [r7, #2]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c74:	e003      	b.n	8007c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c76:	887b      	ldrh	r3, [r7, #2]
 8007c78:	041a      	lsls	r2, r3, #16
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	619a      	str	r2, [r3, #24]
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c96:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d006      	beq.n	8007cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ca2:	4a05      	ldr	r2, [pc, #20]	@ (8007cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 f806 	bl	8007cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40013c00 	.word	0x40013c00

08007cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e267      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d075      	beq.n	8007dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cf2:	4b88      	ldr	r3, [pc, #544]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 030c 	and.w	r3, r3, #12
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d00c      	beq.n	8007d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cfe:	4b85      	ldr	r3, [pc, #532]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d112      	bne.n	8007d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d0a:	4b82      	ldr	r3, [pc, #520]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d16:	d10b      	bne.n	8007d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d18:	4b7e      	ldr	r3, [pc, #504]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d05b      	beq.n	8007ddc <HAL_RCC_OscConfig+0x108>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d157      	bne.n	8007ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e242      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d38:	d106      	bne.n	8007d48 <HAL_RCC_OscConfig+0x74>
 8007d3a:	4b76      	ldr	r3, [pc, #472]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a75      	ldr	r2, [pc, #468]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	e01d      	b.n	8007d84 <HAL_RCC_OscConfig+0xb0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d50:	d10c      	bne.n	8007d6c <HAL_RCC_OscConfig+0x98>
 8007d52:	4b70      	ldr	r3, [pc, #448]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a6f      	ldr	r2, [pc, #444]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6c      	ldr	r2, [pc, #432]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	e00b      	b.n	8007d84 <HAL_RCC_OscConfig+0xb0>
 8007d6c:	4b69      	ldr	r3, [pc, #420]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a68      	ldr	r2, [pc, #416]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4b66      	ldr	r3, [pc, #408]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a65      	ldr	r2, [pc, #404]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d013      	beq.n	8007db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d8c:	f7fe ff7c 	bl	8006c88 <HAL_GetTick>
 8007d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d94:	f7fe ff78 	bl	8006c88 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b64      	cmp	r3, #100	@ 0x64
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e207      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007da6:	4b5b      	ldr	r3, [pc, #364]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCC_OscConfig+0xc0>
 8007db2:	e014      	b.n	8007dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db4:	f7fe ff68 	bl	8006c88 <HAL_GetTick>
 8007db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dbc:	f7fe ff64 	bl	8006c88 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b64      	cmp	r3, #100	@ 0x64
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e1f3      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dce:	4b51      	ldr	r3, [pc, #324]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f0      	bne.n	8007dbc <HAL_RCC_OscConfig+0xe8>
 8007dda:	e000      	b.n	8007dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d063      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dea:	4b4a      	ldr	r3, [pc, #296]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 030c 	and.w	r3, r3, #12
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007df6:	4b47      	ldr	r3, [pc, #284]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d11c      	bne.n	8007e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e02:	4b44      	ldr	r3, [pc, #272]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d116      	bne.n	8007e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e0e:	4b41      	ldr	r3, [pc, #260]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <HAL_RCC_OscConfig+0x152>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d001      	beq.n	8007e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e1c7      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e26:	4b3b      	ldr	r3, [pc, #236]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4937      	ldr	r1, [pc, #220]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e3a:	e03a      	b.n	8007eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d020      	beq.n	8007e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e44:	4b34      	ldr	r3, [pc, #208]	@ (8007f18 <HAL_RCC_OscConfig+0x244>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4a:	f7fe ff1d 	bl	8006c88 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e52:	f7fe ff19 	bl	8006c88 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e1a8      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e64:	4b2b      	ldr	r3, [pc, #172]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e70:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	4925      	ldr	r1, [pc, #148]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	600b      	str	r3, [r1, #0]
 8007e84:	e015      	b.n	8007eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e86:	4b24      	ldr	r3, [pc, #144]	@ (8007f18 <HAL_RCC_OscConfig+0x244>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8c:	f7fe fefc 	bl	8006c88 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e94:	f7fe fef8 	bl	8006c88 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e187      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f0      	bne.n	8007e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d036      	beq.n	8007f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d016      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ec6:	4b15      	ldr	r3, [pc, #84]	@ (8007f1c <HAL_RCC_OscConfig+0x248>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ecc:	f7fe fedc 	bl	8006c88 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed4:	f7fe fed8 	bl	8006c88 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e167      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <HAL_RCC_OscConfig+0x240>)
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0f0      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x200>
 8007ef2:	e01b      	b.n	8007f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ef4:	4b09      	ldr	r3, [pc, #36]	@ (8007f1c <HAL_RCC_OscConfig+0x248>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007efa:	f7fe fec5 	bl	8006c88 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f00:	e00e      	b.n	8007f20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f02:	f7fe fec1 	bl	8006c88 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d907      	bls.n	8007f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e150      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
 8007f14:	40023800 	.word	0x40023800
 8007f18:	42470000 	.word	0x42470000
 8007f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f20:	4b88      	ldr	r3, [pc, #544]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1ea      	bne.n	8007f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8097 	beq.w	8008068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f3e:	4b81      	ldr	r3, [pc, #516]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10f      	bne.n	8007f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f52:	4a7c      	ldr	r2, [pc, #496]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f62:	60bb      	str	r3, [r7, #8]
 8007f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6a:	4b77      	ldr	r3, [pc, #476]	@ (8008148 <HAL_RCC_OscConfig+0x474>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d118      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f76:	4b74      	ldr	r3, [pc, #464]	@ (8008148 <HAL_RCC_OscConfig+0x474>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a73      	ldr	r2, [pc, #460]	@ (8008148 <HAL_RCC_OscConfig+0x474>)
 8007f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f82:	f7fe fe81 	bl	8006c88 <HAL_GetTick>
 8007f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f8a:	f7fe fe7d 	bl	8006c88 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e10c      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8008148 <HAL_RCC_OscConfig+0x474>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0f0      	beq.n	8007f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d106      	bne.n	8007fbe <HAL_RCC_OscConfig+0x2ea>
 8007fb0:	4b64      	ldr	r3, [pc, #400]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb4:	4a63      	ldr	r2, [pc, #396]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fbc:	e01c      	b.n	8007ff8 <HAL_RCC_OscConfig+0x324>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d10c      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x30c>
 8007fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fca:	4a5e      	ldr	r2, [pc, #376]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fcc:	f043 0304 	orr.w	r3, r3, #4
 8007fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fde:	e00b      	b.n	8007ff8 <HAL_RCC_OscConfig+0x324>
 8007fe0:	4b58      	ldr	r3, [pc, #352]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe4:	4a57      	ldr	r2, [pc, #348]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fe6:	f023 0301 	bic.w	r3, r3, #1
 8007fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fec:	4b55      	ldr	r3, [pc, #340]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff0:	4a54      	ldr	r2, [pc, #336]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8007ff2:	f023 0304 	bic.w	r3, r3, #4
 8007ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d015      	beq.n	800802c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008000:	f7fe fe42 	bl	8006c88 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008006:	e00a      	b.n	800801e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008008:	f7fe fe3e 	bl	8006c88 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008016:	4293      	cmp	r3, r2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e0cb      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800801e:	4b49      	ldr	r3, [pc, #292]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0ee      	beq.n	8008008 <HAL_RCC_OscConfig+0x334>
 800802a:	e014      	b.n	8008056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800802c:	f7fe fe2c 	bl	8006c88 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008032:	e00a      	b.n	800804a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008034:	f7fe fe28 	bl	8006c88 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008042:	4293      	cmp	r3, r2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e0b5      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800804a:	4b3e      	ldr	r3, [pc, #248]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1ee      	bne.n	8008034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d105      	bne.n	8008068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800805c:	4b39      	ldr	r3, [pc, #228]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 800805e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008060:	4a38      	ldr	r2, [pc, #224]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8008062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008066:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 80a1 	beq.w	80081b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008072:	4b34      	ldr	r3, [pc, #208]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 030c 	and.w	r3, r3, #12
 800807a:	2b08      	cmp	r3, #8
 800807c:	d05c      	beq.n	8008138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d141      	bne.n	800810a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008086:	4b31      	ldr	r3, [pc, #196]	@ (800814c <HAL_RCC_OscConfig+0x478>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800808c:	f7fe fdfc 	bl	8006c88 <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008094:	f7fe fdf8 	bl	8006c88 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e087      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080a6:	4b27      	ldr	r3, [pc, #156]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f0      	bne.n	8008094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69da      	ldr	r2, [r3, #28]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c0:	019b      	lsls	r3, r3, #6
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	3b01      	subs	r3, #1
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	491b      	ldr	r1, [pc, #108]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080dc:	4b1b      	ldr	r3, [pc, #108]	@ (800814c <HAL_RCC_OscConfig+0x478>)
 80080de:	2201      	movs	r2, #1
 80080e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e2:	f7fe fdd1 	bl	8006c88 <HAL_GetTick>
 80080e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ea:	f7fe fdcd 	bl	8006c88 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e05c      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080fc:	4b11      	ldr	r3, [pc, #68]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0f0      	beq.n	80080ea <HAL_RCC_OscConfig+0x416>
 8008108:	e054      	b.n	80081b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800810a:	4b10      	ldr	r3, [pc, #64]	@ (800814c <HAL_RCC_OscConfig+0x478>)
 800810c:	2200      	movs	r2, #0
 800810e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008110:	f7fe fdba 	bl	8006c88 <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008118:	f7fe fdb6 	bl	8006c88 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e045      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800812a:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <HAL_RCC_OscConfig+0x470>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0x444>
 8008136:	e03d      	b.n	80081b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d107      	bne.n	8008150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e038      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
 8008144:	40023800 	.word	0x40023800
 8008148:	40007000 	.word	0x40007000
 800814c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008150:	4b1b      	ldr	r3, [pc, #108]	@ (80081c0 <HAL_RCC_OscConfig+0x4ec>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d028      	beq.n	80081b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008168:	429a      	cmp	r2, r3
 800816a:	d121      	bne.n	80081b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008176:	429a      	cmp	r2, r3
 8008178:	d11a      	bne.n	80081b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008180:	4013      	ands	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008188:	4293      	cmp	r3, r2
 800818a:	d111      	bne.n	80081b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	3b01      	subs	r3, #1
 800819a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800819c:	429a      	cmp	r2, r3
 800819e:	d107      	bne.n	80081b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d001      	beq.n	80081b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40023800 	.word	0x40023800

080081c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e0cc      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081d8:	4b68      	ldr	r3, [pc, #416]	@ (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d90c      	bls.n	8008200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081e6:	4b65      	ldr	r3, [pc, #404]	@ (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	4b63      	ldr	r3, [pc, #396]	@ (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0b8      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d020      	beq.n	800824e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008218:	4b59      	ldr	r3, [pc, #356]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	4a58      	ldr	r2, [pc, #352]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800821e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008230:	4b53      	ldr	r3, [pc, #332]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	4a52      	ldr	r2, [pc, #328]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800823a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800823c:	4b50      	ldr	r3, [pc, #320]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	494d      	ldr	r1, [pc, #308]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	4313      	orrs	r3, r2
 800824c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d044      	beq.n	80082e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d107      	bne.n	8008272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008262:	4b47      	ldr	r3, [pc, #284]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d119      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e07f      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d003      	beq.n	8008282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800827e:	2b03      	cmp	r3, #3
 8008280:	d107      	bne.n	8008292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008282:	4b3f      	ldr	r3, [pc, #252]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e06f      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008292:	4b3b      	ldr	r3, [pc, #236]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e067      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082a2:	4b37      	ldr	r3, [pc, #220]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f023 0203 	bic.w	r2, r3, #3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4934      	ldr	r1, [pc, #208]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082b4:	f7fe fce8 	bl	8006c88 <HAL_GetTick>
 80082b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ba:	e00a      	b.n	80082d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082bc:	f7fe fce4 	bl	8006c88 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e04f      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d2:	4b2b      	ldr	r3, [pc, #172]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 020c 	and.w	r2, r3, #12
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d1eb      	bne.n	80082bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082e4:	4b25      	ldr	r3, [pc, #148]	@ (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d20c      	bcs.n	800830c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f2:	4b22      	ldr	r3, [pc, #136]	@ (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fa:	4b20      	ldr	r3, [pc, #128]	@ (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d001      	beq.n	800830c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e032      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d008      	beq.n	800832a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008318:	4b19      	ldr	r3, [pc, #100]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4916      	ldr	r1, [pc, #88]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	4313      	orrs	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008336:	4b12      	ldr	r3, [pc, #72]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	490e      	ldr	r1, [pc, #56]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008346:	4313      	orrs	r3, r2
 8008348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800834a:	f000 f821 	bl	8008390 <HAL_RCC_GetSysClockFreq>
 800834e:	4602      	mov	r2, r0
 8008350:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	091b      	lsrs	r3, r3, #4
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	490a      	ldr	r1, [pc, #40]	@ (8008384 <HAL_RCC_ClockConfig+0x1c0>)
 800835c:	5ccb      	ldrb	r3, [r1, r3]
 800835e:	fa22 f303 	lsr.w	r3, r2, r3
 8008362:	4a09      	ldr	r2, [pc, #36]	@ (8008388 <HAL_RCC_ClockConfig+0x1c4>)
 8008364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008366:	4b09      	ldr	r3, [pc, #36]	@ (800838c <HAL_RCC_ClockConfig+0x1c8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fc48 	bl	8006c00 <HAL_InitTick>

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40023c00 	.word	0x40023c00
 8008380:	40023800 	.word	0x40023800
 8008384:	080254a4 	.word	0x080254a4
 8008388:	200000ac 	.word	0x200000ac
 800838c:	200000b0 	.word	0x200000b0

08008390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008394:	b094      	sub	sp, #80	@ 0x50
 8008396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	647b      	str	r3, [r7, #68]	@ 0x44
 800839c:	2300      	movs	r3, #0
 800839e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083a0:	2300      	movs	r3, #0
 80083a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083a8:	4b79      	ldr	r3, [pc, #484]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x200>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 030c 	and.w	r3, r3, #12
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d00d      	beq.n	80083d0 <HAL_RCC_GetSysClockFreq+0x40>
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	f200 80e1 	bhi.w	800857c <HAL_RCC_GetSysClockFreq+0x1ec>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_RCC_GetSysClockFreq+0x34>
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d003      	beq.n	80083ca <HAL_RCC_GetSysClockFreq+0x3a>
 80083c2:	e0db      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083c4:	4b73      	ldr	r3, [pc, #460]	@ (8008594 <HAL_RCC_GetSysClockFreq+0x204>)
 80083c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80083c8:	e0db      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083ca:	4b73      	ldr	r3, [pc, #460]	@ (8008598 <HAL_RCC_GetSysClockFreq+0x208>)
 80083cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083ce:	e0d8      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x200>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083da:	4b6d      	ldr	r3, [pc, #436]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x200>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d063      	beq.n	80084ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x200>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	099b      	lsrs	r3, r3, #6
 80083ec:	2200      	movs	r2, #0
 80083ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80083fa:	2300      	movs	r3, #0
 80083fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008402:	4622      	mov	r2, r4
 8008404:	462b      	mov	r3, r5
 8008406:	f04f 0000 	mov.w	r0, #0
 800840a:	f04f 0100 	mov.w	r1, #0
 800840e:	0159      	lsls	r1, r3, #5
 8008410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008414:	0150      	lsls	r0, r2, #5
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4621      	mov	r1, r4
 800841c:	1a51      	subs	r1, r2, r1
 800841e:	6139      	str	r1, [r7, #16]
 8008420:	4629      	mov	r1, r5
 8008422:	eb63 0301 	sbc.w	r3, r3, r1
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008434:	4659      	mov	r1, fp
 8008436:	018b      	lsls	r3, r1, #6
 8008438:	4651      	mov	r1, sl
 800843a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800843e:	4651      	mov	r1, sl
 8008440:	018a      	lsls	r2, r1, #6
 8008442:	4651      	mov	r1, sl
 8008444:	ebb2 0801 	subs.w	r8, r2, r1
 8008448:	4659      	mov	r1, fp
 800844a:	eb63 0901 	sbc.w	r9, r3, r1
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	f04f 0300 	mov.w	r3, #0
 8008456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800845a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800845e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008462:	4690      	mov	r8, r2
 8008464:	4699      	mov	r9, r3
 8008466:	4623      	mov	r3, r4
 8008468:	eb18 0303 	adds.w	r3, r8, r3
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	462b      	mov	r3, r5
 8008470:	eb49 0303 	adc.w	r3, r9, r3
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008482:	4629      	mov	r1, r5
 8008484:	024b      	lsls	r3, r1, #9
 8008486:	4621      	mov	r1, r4
 8008488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800848c:	4621      	mov	r1, r4
 800848e:	024a      	lsls	r2, r1, #9
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008496:	2200      	movs	r2, #0
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800849a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800849c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084a0:	f7f8 fb9a 	bl	8000bd8 <__aeabi_uldivmod>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4613      	mov	r3, r2
 80084aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ac:	e058      	b.n	8008560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084ae:	4b38      	ldr	r3, [pc, #224]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x200>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	099b      	lsrs	r3, r3, #6
 80084b4:	2200      	movs	r2, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	4611      	mov	r1, r2
 80084ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084be:	623b      	str	r3, [r7, #32]
 80084c0:	2300      	movs	r3, #0
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80084c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	f04f 0000 	mov.w	r0, #0
 80084d0:	f04f 0100 	mov.w	r1, #0
 80084d4:	0159      	lsls	r1, r3, #5
 80084d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084da:	0150      	lsls	r0, r2, #5
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4641      	mov	r1, r8
 80084e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80084e6:	4649      	mov	r1, r9
 80084e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008500:	ebb2 040a 	subs.w	r4, r2, sl
 8008504:	eb63 050b 	sbc.w	r5, r3, fp
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	00eb      	lsls	r3, r5, #3
 8008512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008516:	00e2      	lsls	r2, r4, #3
 8008518:	4614      	mov	r4, r2
 800851a:	461d      	mov	r5, r3
 800851c:	4643      	mov	r3, r8
 800851e:	18e3      	adds	r3, r4, r3
 8008520:	603b      	str	r3, [r7, #0]
 8008522:	464b      	mov	r3, r9
 8008524:	eb45 0303 	adc.w	r3, r5, r3
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008536:	4629      	mov	r1, r5
 8008538:	028b      	lsls	r3, r1, #10
 800853a:	4621      	mov	r1, r4
 800853c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008540:	4621      	mov	r1, r4
 8008542:	028a      	lsls	r2, r1, #10
 8008544:	4610      	mov	r0, r2
 8008546:	4619      	mov	r1, r3
 8008548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800854a:	2200      	movs	r2, #0
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	61fa      	str	r2, [r7, #28]
 8008550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008554:	f7f8 fb40 	bl	8000bd8 <__aeabi_uldivmod>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4613      	mov	r3, r2
 800855e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008560:	4b0b      	ldr	r3, [pc, #44]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x200>)
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	3301      	adds	r3, #1
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008574:	fbb2 f3f3 	udiv	r3, r2, r3
 8008578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800857a:	e002      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <HAL_RCC_GetSysClockFreq+0x204>)
 800857e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008584:	4618      	mov	r0, r3
 8008586:	3750      	adds	r7, #80	@ 0x50
 8008588:	46bd      	mov	sp, r7
 800858a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800858e:	bf00      	nop
 8008590:	40023800 	.word	0x40023800
 8008594:	00f42400 	.word	0x00f42400
 8008598:	007a1200 	.word	0x007a1200

0800859c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085a0:	4b03      	ldr	r3, [pc, #12]	@ (80085b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80085a2:	681b      	ldr	r3, [r3, #0]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	200000ac 	.word	0x200000ac

080085b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085b8:	f7ff fff0 	bl	800859c <HAL_RCC_GetHCLKFreq>
 80085bc:	4602      	mov	r2, r0
 80085be:	4b05      	ldr	r3, [pc, #20]	@ (80085d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	0a9b      	lsrs	r3, r3, #10
 80085c4:	f003 0307 	and.w	r3, r3, #7
 80085c8:	4903      	ldr	r1, [pc, #12]	@ (80085d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ca:	5ccb      	ldrb	r3, [r1, r3]
 80085cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40023800 	.word	0x40023800
 80085d8:	080254b4 	.word	0x080254b4

080085dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085e0:	f7ff ffdc 	bl	800859c <HAL_RCC_GetHCLKFreq>
 80085e4:	4602      	mov	r2, r0
 80085e6:	4b05      	ldr	r3, [pc, #20]	@ (80085fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	0b5b      	lsrs	r3, r3, #13
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	4903      	ldr	r1, [pc, #12]	@ (8008600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085f2:	5ccb      	ldrb	r3, [r1, r3]
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40023800 	.word	0x40023800
 8008600:	080254b4 	.word	0x080254b4

08008604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e07b      	b.n	800870e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	d108      	bne.n	8008630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008626:	d009      	beq.n	800863c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	61da      	str	r2, [r3, #28]
 800862e:	e005      	b.n	800863c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fd fe50 	bl	80062fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008684:	431a      	orrs	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c0:	ea42 0103 	orr.w	r1, r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	f003 0104 	and.w	r1, r3, #4
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e2:	f003 0210 	and.w	r2, r3, #16
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69da      	ldr	r2, [r3, #28]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e01a      	b.n	800875e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800873e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7fd ffa9 	bl	8006698 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b088      	sub	sp, #32
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_SPI_Transmit+0x22>
 8008784:	2302      	movs	r3, #2
 8008786:	e126      	b.n	80089d6 <HAL_SPI_Transmit+0x270>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008790:	f7fe fa7a 	bl	8006c88 <HAL_GetTick>
 8008794:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d002      	beq.n	80087ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087a6:	2302      	movs	r3, #2
 80087a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087aa:	e10b      	b.n	80089c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <HAL_SPI_Transmit+0x52>
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087bc:	e102      	b.n	80089c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2203      	movs	r2, #3
 80087c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008804:	d10f      	bne.n	8008826 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008830:	2b40      	cmp	r3, #64	@ 0x40
 8008832:	d007      	beq.n	8008844 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800884c:	d14b      	bne.n	80088e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <HAL_SPI_Transmit+0xf6>
 8008856:	8afb      	ldrh	r3, [r7, #22]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d13e      	bne.n	80088da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008860:	881a      	ldrh	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	1c9a      	adds	r2, r3, #2
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008876:	b29b      	uxth	r3, r3
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008880:	e02b      	b.n	80088da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b02      	cmp	r3, #2
 800888e:	d112      	bne.n	80088b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	881a      	ldrh	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a0:	1c9a      	adds	r2, r3, #2
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80088b4:	e011      	b.n	80088da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088b6:	f7fe f9e7 	bl	8006c88 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d803      	bhi.n	80088ce <HAL_SPI_Transmit+0x168>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d102      	bne.n	80088d4 <HAL_SPI_Transmit+0x16e>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088d8:	e074      	b.n	80089c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ce      	bne.n	8008882 <HAL_SPI_Transmit+0x11c>
 80088e4:	e04c      	b.n	8008980 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <HAL_SPI_Transmit+0x18e>
 80088ee:	8afb      	ldrh	r3, [r7, #22]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d140      	bne.n	8008976 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	7812      	ldrb	r2, [r2, #0]
 8008900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008910:	b29b      	uxth	r3, r3
 8008912:	3b01      	subs	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800891a:	e02c      	b.n	8008976 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b02      	cmp	r3, #2
 8008928:	d113      	bne.n	8008952 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	330c      	adds	r3, #12
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008946:	b29b      	uxth	r3, r3
 8008948:	3b01      	subs	r3, #1
 800894a:	b29a      	uxth	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008950:	e011      	b.n	8008976 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008952:	f7fe f999 	bl	8006c88 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d803      	bhi.n	800896a <HAL_SPI_Transmit+0x204>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008968:	d102      	bne.n	8008970 <HAL_SPI_Transmit+0x20a>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008974:	e026      	b.n	80089c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800897a:	b29b      	uxth	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1cd      	bne.n	800891c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fe07 	bl	8009598 <SPI_EndRxTxTransaction>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800899e:	2300      	movs	r3, #0
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	613b      	str	r3, [r7, #16]
 80089b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	77fb      	strb	r3, [r7, #31]
 80089c0:	e000      	b.n	80089c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80089c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80089d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_SPI_Transmit_DMA+0x20>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e09b      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x158>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d002      	beq.n	8008a1a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008a14:	2302      	movs	r3, #2
 8008a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a18:	e089      	b.n	8008b2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <HAL_SPI_Transmit_DMA+0x46>
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a2a:	e080      	b.n	8008b2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2203      	movs	r2, #3
 8008a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	88fa      	ldrh	r2, [r7, #6]
 8008a44:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a72:	d10f      	bne.n	8008a94 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a98:	4a29      	ldr	r2, [pc, #164]	@ (8008b40 <HAL_SPI_Transmit_DMA+0x160>)
 8008a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa0:	4a28      	ldr	r2, [pc, #160]	@ (8008b44 <HAL_SPI_Transmit_DMA+0x164>)
 8008aa2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa8:	4a27      	ldr	r2, [pc, #156]	@ (8008b48 <HAL_SPI_Transmit_DMA+0x168>)
 8008aaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008abc:	4619      	mov	r1, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008acc:	f7fe fb78 	bl	80071c0 <HAL_DMA_Start_IT>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00c      	beq.n	8008af0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ada:	f043 0210 	orr.w	r2, r3, #16
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8008aee:	e01e      	b.n	8008b2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008afa:	2b40      	cmp	r3, #64	@ 0x40
 8008afc:	d007      	beq.n	8008b0e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b0c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0220 	orr.w	r2, r2, #32
 8008b1c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0202 	orr.w	r2, r2, #2
 8008b2c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	08009301 	.word	0x08009301
 8008b44:	08009121 	.word	0x08009121
 8008b48:	08009355 	.word	0x08009355

08008b4c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d110      	bne.n	8008b88 <HAL_SPI_Receive_DMA+0x3c>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b6e:	d10b      	bne.n	8008b88 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2204      	movs	r2, #4
 8008b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008b78:	88fb      	ldrh	r3, [r7, #6]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f8a6 	bl	8008cd0 <HAL_SPI_TransmitReceive_DMA>
 8008b84:	4603      	mov	r3, r0
 8008b86:	e09b      	b.n	8008cc0 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d101      	bne.n	8008b96 <HAL_SPI_Receive_DMA+0x4a>
 8008b92:	2302      	movs	r3, #2
 8008b94:	e094      	b.n	8008cc0 <HAL_SPI_Receive_DMA+0x174>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d002      	beq.n	8008bb0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8008baa:	2302      	movs	r3, #2
 8008bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bae:	e082      	b.n	8008cb6 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_SPI_Receive_DMA+0x70>
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bc0:	e079      	b.n	8008cb6 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	88fa      	ldrh	r2, [r7, #6]
 8008bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c02:	d10f      	bne.n	8008c24 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c22:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c28:	4a27      	ldr	r2, [pc, #156]	@ (8008cc8 <HAL_SPI_Receive_DMA+0x17c>)
 8008c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c30:	4a26      	ldr	r2, [pc, #152]	@ (8008ccc <HAL_SPI_Receive_DMA+0x180>)
 8008c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c38:	2200      	movs	r2, #0
 8008c3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	330c      	adds	r3, #12
 8008c46:	4619      	mov	r1, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c52:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008c54:	f7fe fab4 	bl	80071c0 <HAL_DMA_Start_IT>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c62:	f043 0210 	orr.w	r2, r3, #16
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8008c76:	e01e      	b.n	8008cb6 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c82:	2b40      	cmp	r3, #64	@ 0x40
 8008c84:	d007      	beq.n	8008c96 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c94:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0220 	orr.w	r2, r2, #32
 8008ca4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0201 	orr.w	r2, r2, #1
 8008cb4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	080091c9 	.word	0x080091c9
 8008ccc:	08009355 	.word	0x08009355

08008cd0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e0e3      	b.n	8008eb8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cfe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d00d      	beq.n	8008d28 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d12:	d106      	bne.n	8008d22 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008d1c:	7dbb      	ldrb	r3, [r7, #22]
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d002      	beq.n	8008d28 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008d22:	2302      	movs	r3, #2
 8008d24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d26:	e0c2      	b.n	8008eae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008d34:	887b      	ldrh	r3, [r7, #2]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d102      	bne.n	8008d40 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d3e:	e0b6      	b.n	8008eae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d003      	beq.n	8008d54 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2205      	movs	r2, #5
 8008d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	887a      	ldrh	r2, [r7, #2]
 8008d64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	887a      	ldrh	r2, [r7, #2]
 8008d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	887a      	ldrh	r2, [r7, #2]
 8008d76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	887a      	ldrh	r2, [r7, #2]
 8008d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d108      	bne.n	8008da8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d9a:	4a49      	ldr	r2, [pc, #292]	@ (8008ec0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da2:	4a48      	ldr	r2, [pc, #288]	@ (8008ec4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8008da4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008da6:	e007      	b.n	8008db8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dac:	4a46      	ldr	r2, [pc, #280]	@ (8008ec8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8008dae:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008db4:	4a45      	ldr	r2, [pc, #276]	@ (8008ecc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8008db6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dbc:	4a44      	ldr	r2, [pc, #272]	@ (8008ed0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8008dbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	330c      	adds	r3, #12
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008de0:	f7fe f9ee 	bl	80071c0 <HAL_DMA_Start_IT>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00c      	beq.n	8008e04 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dee:	f043 0210 	orr.w	r2, r3, #16
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8008e02:	e054      	b.n	8008eae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0201 	orr.w	r2, r2, #1
 8008e12:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e18:	2200      	movs	r2, #0
 8008e1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e20:	2200      	movs	r2, #0
 8008e22:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e28:	2200      	movs	r2, #0
 8008e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e30:	2200      	movs	r2, #0
 8008e32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e4c:	f7fe f9b8 	bl	80071c0 <HAL_DMA_Start_IT>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00c      	beq.n	8008e70 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5a:	f043 0210 	orr.w	r2, r3, #16
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8008e6e:	e01e      	b.n	8008eae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	d007      	beq.n	8008e8e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e8c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0220 	orr.w	r2, r2, #32
 8008e9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f042 0202 	orr.w	r2, r2, #2
 8008eac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	0800931d 	.word	0x0800931d
 8008ec4:	080091c9 	.word	0x080091c9
 8008ec8:	08009339 	.word	0x08009339
 8008ecc:	08009271 	.word	0x08009271
 8008ed0:	08009355 	.word	0x08009355

08008ed4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10e      	bne.n	8008f14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
    return;
 8008f12:	e0ce      	b.n	80090b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d009      	beq.n	8008f32 <HAL_SPI_IRQHandler+0x5e>
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	4798      	blx	r3
    return;
 8008f30:	e0bf      	b.n	80090b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <HAL_SPI_IRQHandler+0x7e>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80b0 	beq.w	80090b2 <HAL_SPI_IRQHandler+0x1de>
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	f003 0320 	and.w	r3, r3, #32
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80aa 	beq.w	80090b2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d023      	beq.n	8008fb0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d011      	beq.n	8008f98 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f78:	f043 0204 	orr.w	r2, r3, #4
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f80:	2300      	movs	r3, #0
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	e00b      	b.n	8008fb0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	693b      	ldr	r3, [r7, #16]
        return;
 8008fae:	e080      	b.n	80090b2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d014      	beq.n	8008fe4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fbe:	f043 0201 	orr.w	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00c      	beq.n	8009008 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff2:	f043 0208 	orr.w	r2, r3, #8
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60bb      	str	r3, [r7, #8]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60bb      	str	r3, [r7, #8]
 8009006:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	d04f      	beq.n	80090b0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800901e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <HAL_SPI_IRQHandler+0x168>
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d034      	beq.n	80090a6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0203 	bic.w	r2, r2, #3
 800904a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d011      	beq.n	8009078 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009058:	4a17      	ldr	r2, [pc, #92]	@ (80090b8 <HAL_SPI_IRQHandler+0x1e4>)
 800905a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe f905 	bl	8007270 <HAL_DMA_Abort_IT>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009070:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800907c:	2b00      	cmp	r3, #0
 800907e:	d016      	beq.n	80090ae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009084:	4a0c      	ldr	r2, [pc, #48]	@ (80090b8 <HAL_SPI_IRQHandler+0x1e4>)
 8009086:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe f8ef 	bl	8007270 <HAL_DMA_Abort_IT>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00a      	beq.n	80090ae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80090a4:	e003      	b.n	80090ae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f830 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80090ac:	e000      	b.n	80090b0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80090ae:	bf00      	nop
    return;
 80090b0:	bf00      	nop
  }
}
 80090b2:	3720      	adds	r7, #32
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	08009395 	.word	0x08009395

080090bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800912e:	f7fd fdab 	bl	8006c88 <HAL_GetTick>
 8009132:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009142:	d03b      	beq.n	80091bc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0220 	bic.w	r2, r2, #32
 8009152:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0202 	bic.w	r2, r2, #2
 8009162:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	2164      	movs	r1, #100	@ 0x64
 8009168:	6978      	ldr	r0, [r7, #20]
 800916a:	f000 fa15 	bl	8009598 <SPI_EndRxTxTransaction>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009178:	f043 0220 	orr.w	r2, r3, #32
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2200      	movs	r2, #0
 80091a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091b4:	6978      	ldr	r0, [r7, #20]
 80091b6:	f7ff ffa9 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091ba:	e002      	b.n	80091c2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80091bc:	6978      	ldr	r0, [r7, #20]
 80091be:	f7fd fb07 	bl	80067d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091d6:	f7fd fd57 	bl	8006c88 <HAL_GetTick>
 80091da:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ea:	d03b      	beq.n	8009264 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0220 	bic.w	r2, r2, #32
 80091fa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10d      	bne.n	8009220 <SPI_DMAReceiveCplt+0x58>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800920c:	d108      	bne.n	8009220 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0203 	bic.w	r2, r2, #3
 800921c:	605a      	str	r2, [r3, #4]
 800921e:	e007      	b.n	8009230 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	2164      	movs	r1, #100	@ 0x64
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f949 	bl	80094cc <SPI_EndRxTransaction>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2220      	movs	r2, #32
 8009244:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff ff55 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009262:	e002      	b.n	800926a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f7fd fad5 	bl	8006814 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800927e:	f7fd fd03 	bl	8006c88 <HAL_GetTick>
 8009282:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800928e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009292:	d02f      	beq.n	80092f4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0220 	bic.w	r2, r2, #32
 80092a2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	2164      	movs	r1, #100	@ 0x64
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f975 	bl	8009598 <SPI_EndRxTxTransaction>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b8:	f043 0220 	orr.w	r2, r3, #32
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0203 	bic.w	r2, r2, #3
 80092ce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff ff0d 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80092f2:	e002      	b.n	80092fa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7ff fee1 	bl	80090bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff fede 	bl	80090d0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009328:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff feda 	bl	80090e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009344:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff fed6 	bl	80090f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0203 	bic.w	r2, r2, #3
 8009370:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009376:	f043 0210 	orr.w	r2, r3, #16
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fec0 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800938c:	bf00      	nop
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff feac 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	4613      	mov	r3, r2
 80093ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093cc:	f7fd fc5c 	bl	8006c88 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4413      	add	r3, r2
 80093da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093dc:	f7fd fc54 	bl	8006c88 <HAL_GetTick>
 80093e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093e2:	4b39      	ldr	r3, [pc, #228]	@ (80094c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	015b      	lsls	r3, r3, #5
 80093e8:	0d1b      	lsrs	r3, r3, #20
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	fb02 f303 	mul.w	r3, r2, r3
 80093f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093f2:	e054      	b.n	800949e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d050      	beq.n	800949e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093fc:	f7fd fc44 	bl	8006c88 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	429a      	cmp	r2, r3
 800940a:	d902      	bls.n	8009412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d13d      	bne.n	800948e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800942a:	d111      	bne.n	8009450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009434:	d004      	beq.n	8009440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800943e:	d107      	bne.n	8009450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800944e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009458:	d10f      	bne.n	800947a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e017      	b.n	80094be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3b01      	subs	r3, #1
 800949c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4013      	ands	r3, r2
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	bf0c      	ite	eq
 80094ae:	2301      	moveq	r3, #1
 80094b0:	2300      	movne	r3, #0
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	461a      	mov	r2, r3
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d19b      	bne.n	80093f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200000ac 	.word	0x200000ac

080094cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094e0:	d111      	bne.n	8009506 <SPI_EndRxTransaction+0x3a>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ea:	d004      	beq.n	80094f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094f4:	d107      	bne.n	8009506 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009504:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800950e:	d12a      	bne.n	8009566 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009518:	d012      	beq.n	8009540 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2200      	movs	r2, #0
 8009522:	2180      	movs	r1, #128	@ 0x80
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f7ff ff49 	bl	80093bc <SPI_WaitFlagStateUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d02d      	beq.n	800958c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009534:	f043 0220 	orr.w	r2, r3, #32
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e026      	b.n	800958e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2200      	movs	r2, #0
 8009548:	2101      	movs	r1, #1
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff ff36 	bl	80093bc <SPI_WaitFlagStateUntilTimeout>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01a      	beq.n	800958c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955a:	f043 0220 	orr.w	r2, r3, #32
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e013      	b.n	800958e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	2101      	movs	r1, #1
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff ff23 	bl	80093bc <SPI_WaitFlagStateUntilTimeout>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009580:	f043 0220 	orr.w	r2, r3, #32
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e000      	b.n	800958e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80095a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009614 <SPI_EndRxTxTransaction+0x7c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009618 <SPI_EndRxTxTransaction+0x80>)
 80095aa:	fba2 2303 	umull	r2, r3, r2, r3
 80095ae:	0d5b      	lsrs	r3, r3, #21
 80095b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095b4:	fb02 f303 	mul.w	r3, r2, r3
 80095b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095c2:	d112      	bne.n	80095ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2200      	movs	r2, #0
 80095cc:	2180      	movs	r1, #128	@ 0x80
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f7ff fef4 	bl	80093bc <SPI_WaitFlagStateUntilTimeout>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d016      	beq.n	8009608 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095de:	f043 0220 	orr.w	r2, r3, #32
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e00f      	b.n	800960a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00a      	beq.n	8009606 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009600:	2b80      	cmp	r3, #128	@ 0x80
 8009602:	d0f2      	beq.n	80095ea <SPI_EndRxTxTransaction+0x52>
 8009604:	e000      	b.n	8009608 <SPI_EndRxTxTransaction+0x70>
        break;
 8009606:	bf00      	nop
  }

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200000ac 	.word	0x200000ac
 8009618:	165e9f81 	.word	0x165e9f81

0800961c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e041      	b.n	80096b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f839 	bl	80096ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 f8ca 	bl	80097f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d001      	beq.n	80096e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e044      	b.n	8009772 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a1e      	ldr	r2, [pc, #120]	@ (8009780 <HAL_TIM_Base_Start_IT+0xb0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d018      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009712:	d013      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1a      	ldr	r2, [pc, #104]	@ (8009784 <HAL_TIM_Base_Start_IT+0xb4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00e      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a19      	ldr	r2, [pc, #100]	@ (8009788 <HAL_TIM_Base_Start_IT+0xb8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d009      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a17      	ldr	r2, [pc, #92]	@ (800978c <HAL_TIM_Base_Start_IT+0xbc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x6c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a16      	ldr	r2, [pc, #88]	@ (8009790 <HAL_TIM_Base_Start_IT+0xc0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d111      	bne.n	8009760 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b06      	cmp	r3, #6
 800974c:	d010      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975e:	e007      	b.n	8009770 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f042 0201 	orr.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40010000 	.word	0x40010000
 8009784:	40000400 	.word	0x40000400
 8009788:	40000800 	.word	0x40000800
 800978c:	40000c00 	.word	0x40000c00
 8009790:	40014000 	.word	0x40014000

08009794 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0201 	bic.w	r2, r2, #1
 80097aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6a1a      	ldr	r2, [r3, #32]
 80097b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10f      	bne.n	80097dc <HAL_TIM_Base_Stop_IT+0x48>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a1a      	ldr	r2, [r3, #32]
 80097c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80097c6:	4013      	ands	r3, r2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d107      	bne.n	80097dc <HAL_TIM_Base_Stop_IT+0x48>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0201 	bic.w	r2, r2, #1
 80097da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
	...

080097f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a34      	ldr	r2, [pc, #208]	@ (80098d8 <TIM_Base_SetConfig+0xe4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00f      	beq.n	800982c <TIM_Base_SetConfig+0x38>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009812:	d00b      	beq.n	800982c <TIM_Base_SetConfig+0x38>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a31      	ldr	r2, [pc, #196]	@ (80098dc <TIM_Base_SetConfig+0xe8>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d007      	beq.n	800982c <TIM_Base_SetConfig+0x38>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a30      	ldr	r2, [pc, #192]	@ (80098e0 <TIM_Base_SetConfig+0xec>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_Base_SetConfig+0x38>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a2f      	ldr	r2, [pc, #188]	@ (80098e4 <TIM_Base_SetConfig+0xf0>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d108      	bne.n	800983e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a25      	ldr	r2, [pc, #148]	@ (80098d8 <TIM_Base_SetConfig+0xe4>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d01b      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800984c:	d017      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a22      	ldr	r2, [pc, #136]	@ (80098dc <TIM_Base_SetConfig+0xe8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a21      	ldr	r2, [pc, #132]	@ (80098e0 <TIM_Base_SetConfig+0xec>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00f      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a20      	ldr	r2, [pc, #128]	@ (80098e4 <TIM_Base_SetConfig+0xf0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00b      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a1f      	ldr	r2, [pc, #124]	@ (80098e8 <TIM_Base_SetConfig+0xf4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d007      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a1e      	ldr	r2, [pc, #120]	@ (80098ec <TIM_Base_SetConfig+0xf8>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d003      	beq.n	800987e <TIM_Base_SetConfig+0x8a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a1d      	ldr	r2, [pc, #116]	@ (80098f0 <TIM_Base_SetConfig+0xfc>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d108      	bne.n	8009890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4313      	orrs	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	689a      	ldr	r2, [r3, #8]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a08      	ldr	r2, [pc, #32]	@ (80098d8 <TIM_Base_SetConfig+0xe4>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d103      	bne.n	80098c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	615a      	str	r2, [r3, #20]
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40010000 	.word	0x40010000
 80098dc:	40000400 	.word	0x40000400
 80098e0:	40000800 	.word	0x40000800
 80098e4:	40000c00 	.word	0x40000c00
 80098e8:	40014000 	.word	0x40014000
 80098ec:	40014400 	.word	0x40014400
 80098f0:	40014800 	.word	0x40014800

080098f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e03f      	b.n	8009986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fc ff06 	bl	800672c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2224      	movs	r2, #36	@ 0x24
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f929 	bl	8009b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	691a      	ldr	r2, [r3, #16]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800994c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	695a      	ldr	r2, [r3, #20]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800995c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800996c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b08a      	sub	sp, #40	@ 0x28
 8009992:	af02      	add	r7, sp, #8
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	603b      	str	r3, [r7, #0]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d17c      	bne.n	8009aa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <HAL_UART_Transmit+0x2c>
 80099b4:	88fb      	ldrh	r3, [r7, #6]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e075      	b.n	8009aaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <HAL_UART_Transmit+0x3e>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e06e      	b.n	8009aaa <HAL_UART_Transmit+0x11c>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2221      	movs	r2, #33	@ 0x21
 80099de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099e2:	f7fd f951 	bl	8006c88 <HAL_GetTick>
 80099e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	88fa      	ldrh	r2, [r7, #6]
 80099ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	88fa      	ldrh	r2, [r7, #6]
 80099f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099fc:	d108      	bne.n	8009a10 <HAL_UART_Transmit+0x82>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	e003      	b.n	8009a18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8009a20:	e02a      	b.n	8009a78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2180      	movs	r1, #128	@ 0x80
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f840 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e036      	b.n	8009aaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	3302      	adds	r3, #2
 8009a56:	61bb      	str	r3, [r7, #24]
 8009a58:	e007      	b.n	8009a6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	781a      	ldrb	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	3301      	adds	r3, #1
 8009a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1cf      	bne.n	8009a22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2140      	movs	r1, #64	@ 0x40
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 f810 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e006      	b.n	8009aaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e000      	b.n	8009aaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009aa8:	2302      	movs	r3, #2
  }
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b090      	sub	sp, #64	@ 0x40
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ac2:	e050      	b.n	8009b66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d04c      	beq.n	8009b66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ad2:	f7fd f8d9 	bl	8006c88 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d241      	bcs.n	8009b66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	330c      	adds	r3, #12
 8009b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b02:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b04:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e5      	bne.n	8009ae2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3314      	adds	r3, #20
 8009b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	613b      	str	r3, [r7, #16]
   return(result);
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f023 0301 	bic.w	r3, r3, #1
 8009b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3314      	adds	r3, #20
 8009b34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b36:	623a      	str	r2, [r7, #32]
 8009b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	69f9      	ldr	r1, [r7, #28]
 8009b3c:	6a3a      	ldr	r2, [r7, #32]
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e5      	bne.n	8009b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e00f      	b.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4013      	ands	r3, r2
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	bf0c      	ite	eq
 8009b76:	2301      	moveq	r3, #1
 8009b78:	2300      	movne	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d09f      	beq.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3740      	adds	r7, #64	@ 0x40
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b94:	b0c0      	sub	sp, #256	@ 0x100
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bac:	68d9      	ldr	r1, [r3, #12]
 8009bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	ea40 0301 	orr.w	r3, r0, r1
 8009bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009be8:	f021 010c 	bic.w	r1, r1, #12
 8009bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0a:	6999      	ldr	r1, [r3, #24]
 8009c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	ea40 0301 	orr.w	r3, r0, r1
 8009c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8009e5c <UART_SetConfig+0x2cc>)
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d005      	beq.n	8009c30 <UART_SetConfig+0xa0>
 8009c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8009e60 <UART_SetConfig+0x2d0>)
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d104      	bne.n	8009c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c30:	f7fe fcd4 	bl	80085dc <HAL_RCC_GetPCLK2Freq>
 8009c34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c38:	e003      	b.n	8009c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c3a:	f7fe fcbb 	bl	80085b4 <HAL_RCC_GetPCLK1Freq>
 8009c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c4c:	f040 810c 	bne.w	8009e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c62:	4622      	mov	r2, r4
 8009c64:	462b      	mov	r3, r5
 8009c66:	1891      	adds	r1, r2, r2
 8009c68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c6a:	415b      	adcs	r3, r3
 8009c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c72:	4621      	mov	r1, r4
 8009c74:	eb12 0801 	adds.w	r8, r2, r1
 8009c78:	4629      	mov	r1, r5
 8009c7a:	eb43 0901 	adc.w	r9, r3, r1
 8009c7e:	f04f 0200 	mov.w	r2, #0
 8009c82:	f04f 0300 	mov.w	r3, #0
 8009c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c92:	4690      	mov	r8, r2
 8009c94:	4699      	mov	r9, r3
 8009c96:	4623      	mov	r3, r4
 8009c98:	eb18 0303 	adds.w	r3, r8, r3
 8009c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	eb49 0303 	adc.w	r3, r9, r3
 8009ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	18db      	adds	r3, r3, r3
 8009cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	eb42 0303 	adc.w	r3, r2, r3
 8009cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009cd4:	f7f6 ff80 	bl	8000bd8 <__aeabi_uldivmod>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4b61      	ldr	r3, [pc, #388]	@ (8009e64 <UART_SetConfig+0x2d4>)
 8009cde:	fba3 2302 	umull	r2, r3, r3, r2
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	011c      	lsls	r4, r3, #4
 8009ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	1891      	adds	r1, r2, r2
 8009cfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d00:	415b      	adcs	r3, r3
 8009d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d08:	4641      	mov	r1, r8
 8009d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8009d0e:	4649      	mov	r1, r9
 8009d10:	eb43 0b01 	adc.w	fp, r3, r1
 8009d14:	f04f 0200 	mov.w	r2, #0
 8009d18:	f04f 0300 	mov.w	r3, #0
 8009d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d28:	4692      	mov	sl, r2
 8009d2a:	469b      	mov	fp, r3
 8009d2c:	4643      	mov	r3, r8
 8009d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8009d32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d36:	464b      	mov	r3, r9
 8009d38:	eb4b 0303 	adc.w	r3, fp, r3
 8009d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d54:	460b      	mov	r3, r1
 8009d56:	18db      	adds	r3, r3, r3
 8009d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	eb42 0303 	adc.w	r3, r2, r3
 8009d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d6a:	f7f6 ff35 	bl	8000bd8 <__aeabi_uldivmod>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	4b3b      	ldr	r3, [pc, #236]	@ (8009e64 <UART_SetConfig+0x2d4>)
 8009d76:	fba3 2301 	umull	r2, r3, r3, r1
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	2264      	movs	r2, #100	@ 0x64
 8009d7e:	fb02 f303 	mul.w	r3, r2, r3
 8009d82:	1acb      	subs	r3, r1, r3
 8009d84:	00db      	lsls	r3, r3, #3
 8009d86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d8a:	4b36      	ldr	r3, [pc, #216]	@ (8009e64 <UART_SetConfig+0x2d4>)
 8009d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8009d90:	095b      	lsrs	r3, r3, #5
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d98:	441c      	add	r4, r3
 8009d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009da4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009dac:	4642      	mov	r2, r8
 8009dae:	464b      	mov	r3, r9
 8009db0:	1891      	adds	r1, r2, r2
 8009db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009db4:	415b      	adcs	r3, r3
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009dbc:	4641      	mov	r1, r8
 8009dbe:	1851      	adds	r1, r2, r1
 8009dc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	414b      	adcs	r3, r1
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc8:	f04f 0200 	mov.w	r2, #0
 8009dcc:	f04f 0300 	mov.w	r3, #0
 8009dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	00cb      	lsls	r3, r1, #3
 8009dd8:	4651      	mov	r1, sl
 8009dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dde:	4651      	mov	r1, sl
 8009de0:	00ca      	lsls	r2, r1, #3
 8009de2:	4610      	mov	r0, r2
 8009de4:	4619      	mov	r1, r3
 8009de6:	4603      	mov	r3, r0
 8009de8:	4642      	mov	r2, r8
 8009dea:	189b      	adds	r3, r3, r2
 8009dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009df0:	464b      	mov	r3, r9
 8009df2:	460a      	mov	r2, r1
 8009df4:	eb42 0303 	adc.w	r3, r2, r3
 8009df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e10:	460b      	mov	r3, r1
 8009e12:	18db      	adds	r3, r3, r3
 8009e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e16:	4613      	mov	r3, r2
 8009e18:	eb42 0303 	adc.w	r3, r2, r3
 8009e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e26:	f7f6 fed7 	bl	8000bd8 <__aeabi_uldivmod>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e64 <UART_SetConfig+0x2d4>)
 8009e30:	fba3 1302 	umull	r1, r3, r3, r2
 8009e34:	095b      	lsrs	r3, r3, #5
 8009e36:	2164      	movs	r1, #100	@ 0x64
 8009e38:	fb01 f303 	mul.w	r3, r1, r3
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	3332      	adds	r3, #50	@ 0x32
 8009e42:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <UART_SetConfig+0x2d4>)
 8009e44:	fba2 2303 	umull	r2, r3, r2, r3
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	f003 0207 	and.w	r2, r3, #7
 8009e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4422      	add	r2, r4
 8009e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e58:	e106      	b.n	800a068 <UART_SetConfig+0x4d8>
 8009e5a:	bf00      	nop
 8009e5c:	40011000 	.word	0x40011000
 8009e60:	40011400 	.word	0x40011400
 8009e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	1891      	adds	r1, r2, r2
 8009e80:	6239      	str	r1, [r7, #32]
 8009e82:	415b      	adcs	r3, r3
 8009e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	1854      	adds	r4, r2, r1
 8009e8e:	4649      	mov	r1, r9
 8009e90:	eb43 0501 	adc.w	r5, r3, r1
 8009e94:	f04f 0200 	mov.w	r2, #0
 8009e98:	f04f 0300 	mov.w	r3, #0
 8009e9c:	00eb      	lsls	r3, r5, #3
 8009e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ea2:	00e2      	lsls	r2, r4, #3
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	461d      	mov	r5, r3
 8009ea8:	4643      	mov	r3, r8
 8009eaa:	18e3      	adds	r3, r4, r3
 8009eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	eb45 0303 	adc.w	r3, r5, r3
 8009eb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	008b      	lsls	r3, r1, #2
 8009eda:	4621      	mov	r1, r4
 8009edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	008a      	lsls	r2, r1, #2
 8009ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ee8:	f7f6 fe76 	bl	8000bd8 <__aeabi_uldivmod>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4b60      	ldr	r3, [pc, #384]	@ (800a074 <UART_SetConfig+0x4e4>)
 8009ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ef6:	095b      	lsrs	r3, r3, #5
 8009ef8:	011c      	lsls	r4, r3, #4
 8009efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	464b      	mov	r3, r9
 8009f10:	1891      	adds	r1, r2, r2
 8009f12:	61b9      	str	r1, [r7, #24]
 8009f14:	415b      	adcs	r3, r3
 8009f16:	61fb      	str	r3, [r7, #28]
 8009f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	1851      	adds	r1, r2, r1
 8009f20:	6139      	str	r1, [r7, #16]
 8009f22:	4649      	mov	r1, r9
 8009f24:	414b      	adcs	r3, r1
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	f04f 0300 	mov.w	r3, #0
 8009f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f34:	4659      	mov	r1, fp
 8009f36:	00cb      	lsls	r3, r1, #3
 8009f38:	4651      	mov	r1, sl
 8009f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f3e:	4651      	mov	r1, sl
 8009f40:	00ca      	lsls	r2, r1, #3
 8009f42:	4610      	mov	r0, r2
 8009f44:	4619      	mov	r1, r3
 8009f46:	4603      	mov	r3, r0
 8009f48:	4642      	mov	r2, r8
 8009f4a:	189b      	adds	r3, r3, r2
 8009f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f50:	464b      	mov	r3, r9
 8009f52:	460a      	mov	r2, r1
 8009f54:	eb42 0303 	adc.w	r3, r2, r3
 8009f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	f04f 0300 	mov.w	r3, #0
 8009f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f74:	4649      	mov	r1, r9
 8009f76:	008b      	lsls	r3, r1, #2
 8009f78:	4641      	mov	r1, r8
 8009f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f7e:	4641      	mov	r1, r8
 8009f80:	008a      	lsls	r2, r1, #2
 8009f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f86:	f7f6 fe27 	bl	8000bd8 <__aeabi_uldivmod>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4611      	mov	r1, r2
 8009f90:	4b38      	ldr	r3, [pc, #224]	@ (800a074 <UART_SetConfig+0x4e4>)
 8009f92:	fba3 2301 	umull	r2, r3, r3, r1
 8009f96:	095b      	lsrs	r3, r3, #5
 8009f98:	2264      	movs	r2, #100	@ 0x64
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
 8009f9e:	1acb      	subs	r3, r1, r3
 8009fa0:	011b      	lsls	r3, r3, #4
 8009fa2:	3332      	adds	r3, #50	@ 0x32
 8009fa4:	4a33      	ldr	r2, [pc, #204]	@ (800a074 <UART_SetConfig+0x4e4>)
 8009fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009faa:	095b      	lsrs	r3, r3, #5
 8009fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fb0:	441c      	add	r4, r3
 8009fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fba:	677a      	str	r2, [r7, #116]	@ 0x74
 8009fbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	1891      	adds	r1, r2, r2
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	415b      	adcs	r3, r3
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	1851      	adds	r1, r2, r1
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	414b      	adcs	r3, r1
 8009fda:	607b      	str	r3, [r7, #4]
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	f04f 0300 	mov.w	r3, #0
 8009fe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fe8:	4659      	mov	r1, fp
 8009fea:	00cb      	lsls	r3, r1, #3
 8009fec:	4651      	mov	r1, sl
 8009fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ff2:	4651      	mov	r1, sl
 8009ff4:	00ca      	lsls	r2, r1, #3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a002:	464b      	mov	r3, r9
 800a004:	460a      	mov	r2, r1
 800a006:	eb42 0303 	adc.w	r3, r2, r3
 800a00a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	663b      	str	r3, [r7, #96]	@ 0x60
 800a016:	667a      	str	r2, [r7, #100]	@ 0x64
 800a018:	f04f 0200 	mov.w	r2, #0
 800a01c:	f04f 0300 	mov.w	r3, #0
 800a020:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a024:	4649      	mov	r1, r9
 800a026:	008b      	lsls	r3, r1, #2
 800a028:	4641      	mov	r1, r8
 800a02a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a02e:	4641      	mov	r1, r8
 800a030:	008a      	lsls	r2, r1, #2
 800a032:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a036:	f7f6 fdcf 	bl	8000bd8 <__aeabi_uldivmod>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <UART_SetConfig+0x4e4>)
 800a040:	fba3 1302 	umull	r1, r3, r3, r2
 800a044:	095b      	lsrs	r3, r3, #5
 800a046:	2164      	movs	r1, #100	@ 0x64
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	3332      	adds	r3, #50	@ 0x32
 800a052:	4a08      	ldr	r2, [pc, #32]	@ (800a074 <UART_SetConfig+0x4e4>)
 800a054:	fba2 2303 	umull	r2, r3, r2, r3
 800a058:	095b      	lsrs	r3, r3, #5
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4422      	add	r2, r4
 800a066:	609a      	str	r2, [r3, #8]
}
 800a068:	bf00      	nop
 800a06a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a06e:	46bd      	mov	sp, r7
 800a070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a074:	51eb851f 	.word	0x51eb851f

0800a078 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  return x;
 800a080:	687b      	ldr	r3, [r7, #4]
}
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	4603      	mov	r3, r0
 800a096:	6039      	str	r1, [r7, #0]
 800a098:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 800a09a:	f107 0208 	add.w	r2, r7, #8
 800a09e:	79f9      	ldrb	r1, [r7, #7]
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	2002      	movs	r0, #2
 800a0a4:	f000 f8f6 	bl	800a294 <sl_wfx_bus_access>
 800a0a8:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 800a0aa:	7a3b      	ldrb	r3, [r7, #8]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	7a7b      	ldrb	r3, [r7, #9]
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	460a      	mov	r2, r1
 800a0d0:	71fb      	strb	r3, [r7, #7]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 800a0d6:	88bb      	ldrh	r3, [r7, #4]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	733b      	strb	r3, [r7, #12]
 800a0dc:	88bb      	ldrh	r3, [r7, #4]
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 800a0ee:	f107 020c 	add.w	r2, r7, #12
 800a0f2:	79f9      	ldrb	r1, [r7, #7]
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	f000 f8cc 	bl	800a294 <sl_wfx_bus_access>
 800a0fc:	4603      	mov	r3, r0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	4603      	mov	r3, r0
 800a10e:	6039      	str	r1, [r7, #0]
 800a110:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 800a112:	79f9      	ldrb	r1, [r7, #7]
 800a114:	2304      	movs	r3, #4
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	2002      	movs	r0, #2
 800a11a:	f000 f8bb 	bl	800a294 <sl_wfx_bus_access>
 800a11e:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff ffa7 	bl	800a078 <uint32_identity>
 800a12a:	4602      	mov	r2, r0
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 800a130:	68fb      	ldr	r3, [r7, #12]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	4603      	mov	r3, r0
 800a142:	6039      	str	r1, [r7, #0]
 800a144:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff ff95 	bl	800a078 <uint32_identity>
 800a14e:	4603      	mov	r3, r0
 800a150:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 800a152:	463a      	mov	r2, r7
 800a154:	79f9      	ldrb	r1, [r7, #7]
 800a156:	2304      	movs	r3, #4
 800a158:	2001      	movs	r0, #1
 800a15a:	f000 f89b 	bl	800a294 <sl_wfx_bus_access>
 800a15e:	4603      	mov	r3, r0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	2102      	movs	r1, #2
 800a178:	2002      	movs	r0, #2
 800a17a:	f000 f88b 	bl	800a294 <sl_wfx_bus_access>
 800a17e:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	2102      	movs	r1, #2
 800a19a:	2001      	movs	r0, #1
 800a19c:	f000 f87a 	bl	800a294 <sl_wfx_bus_access>
 800a1a0:	60f8      	str	r0, [r7, #12]

  return result;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1be:	d301      	bcc.n	800a1c4 <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 800a1c0:	2321      	movs	r3, #33	@ 0x21
 800a1c2:	e00f      	b.n	800a1e4 <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800a1c4:	68f9      	ldr	r1, [r7, #12]
 800a1c6:	2004      	movs	r0, #4
 800a1c8:	f7ff ffb7 	bl	800a13a <sl_wfx_reg_write_32>
 800a1cc:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d106      	bne.n	800a1e2 <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	2105      	movs	r1, #5
 800a1da:	2001      	movs	r0, #1
 800a1dc:	f000 f85a 	bl	800a294 <sl_wfx_bus_access>
 800a1e0:	6178      	str	r0, [r7, #20]
  }

  return result;
 800a1e2:	697b      	ldr	r3, [r7, #20]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	2004      	movs	r0, #4
 800a1fa:	f7ff ff9e 	bl	800a13a <sl_wfx_reg_write_32>
 800a1fe:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d104      	bne.n	800a210 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	2005      	movs	r0, #5
 800a20a:	f7ff ff96 	bl	800a13a <sl_wfx_reg_write_32>
 800a20e:	60f8      	str	r0, [r7, #12]
  }

  return result;
 800a210:	68fb      	ldr	r3, [r7, #12]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	2004      	movs	r0, #4
 800a228:	f7ff ff87 	bl	800a13a <sl_wfx_reg_write_32>
 800a22c:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800a22e:	f107 030c 	add.w	r3, r7, #12
 800a232:	4619      	mov	r1, r3
 800a234:	2000      	movs	r0, #0
 800a236:	f7ff ff66 	bl	800a106 <sl_wfx_reg_read_32>
 800a23a:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a242:	4619      	mov	r1, r3
 800a244:	2000      	movs	r0, #0
 800a246:	f7ff ff78 	bl	800a13a <sl_wfx_reg_write_32>
 800a24a:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e011      	b.n	800a276 <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800a252:	f107 030c 	add.w	r3, r7, #12
 800a256:	4619      	mov	r1, r3
 800a258:	2000      	movs	r0, #0
 800a25a:	f7ff ff54 	bl	800a106 <sl_wfx_reg_read_32>
 800a25e:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 800a26a:	2001      	movs	r0, #1
 800a26c:	f001 fae0 	bl	800b830 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	3301      	adds	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2b13      	cmp	r3, #19
 800a27a:	d9ea      	bls.n	800a252 <sl_wfx_apb_read_32+0x38>
 800a27c:	e000      	b.n	800a280 <sl_wfx_apb_read_32+0x66>
      break;
 800a27e:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	2005      	movs	r0, #5
 800a284:	f7ff ff3f 	bl	800a106 <sl_wfx_reg_read_32>
 800a288:	6138      	str	r0, [r7, #16]

  return result;
 800a28a:	693b      	ldr	r3, [r7, #16]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60ba      	str	r2, [r7, #8]
 800a29c:	607b      	str	r3, [r7, #4]
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73fb      	strb	r3, [r7, #15]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 800a2a6:	4b43      	ldr	r3, [pc, #268]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 800a2ae:	f003 0308 	and.w	r3, r3, #8
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01a      	beq.n	800a2ec <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	f001 fa30 	bl	800b71c <sl_wfx_host_set_wake_up_pin>
 800a2bc:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d171      	bne.n	800a3a8 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d105      	bne.n	800a2d6 <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 800a2ca:	f001 fa43 	bl	800b754 <sl_wfx_host_wait_for_wake_up>
 800a2ce:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d168      	bne.n	800a3a8 <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 800a2d6:	4b37      	ldr	r3, [pc, #220]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800a2de:	4b35      	ldr	r3, [pc, #212]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0208 	bic.w	r2, r2, #8
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d107      	bne.n	800a302 <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f85d 	bl	800a3b8 <sl_wfx_reg_read>
 800a2fe:	6178      	str	r0, [r7, #20]
 800a300:	e00c      	b.n	800a31c <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d107      	bne.n	800a318 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 800a308:	7bbb      	ldrb	r3, [r7, #14]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	68b9      	ldr	r1, [r7, #8]
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f89e 	bl	800a450 <sl_wfx_reg_write>
 800a314:	6178      	str	r0, [r7, #20]
 800a316:	e001      	b.n	800a31c <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 800a318:	2321      	movs	r3, #33	@ 0x21
 800a31a:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d142      	bne.n	800a3a8 <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 800a322:	4b24      	ldr	r3, [pc, #144]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 800a32a:	f003 0310 	and.w	r3, r3, #16
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d039      	beq.n	800a3a6 <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d136      	bne.n	800a3a6 <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 800a338:	7bbb      	ldrb	r3, [r7, #14]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d108      	bne.n	800a350 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d130      	bne.n	800a3a6 <sl_wfx_bus_access+0x112>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d12a      	bne.n	800a3a6 <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 800a350:	4b18      	ldr	r3, [pc, #96]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d824      	bhi.n	800a3a6 <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3b02      	subs	r3, #2
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	4413      	add	r3, r2
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d11b      	bne.n	800a3a6 <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 800a36e:	7bb9      	ldrb	r1, [r7, #14]
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	f001 fa05 	bl	800b784 <sl_wfx_host_sleep_grant>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f640 3208 	movw	r2, #2824	@ 0xb08
 800a380:	4293      	cmp	r3, r2
 800a382:	d110      	bne.n	800a3a6 <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 800a384:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800a38c:	4b09      	ldr	r3, [pc, #36]	@ (800a3b4 <sl_wfx_bus_access+0x120>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0208 	orr.w	r2, r2, #8
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 800a39a:	2000      	movs	r0, #0
 800a39c:	f001 f9be 	bl	800b71c <sl_wfx_host_set_wake_up_pin>
 800a3a0:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 800a3a6:	bf00      	nop
  return result;
 800a3a8:	697b      	ldr	r3, [r7, #20]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000ae0 	.word	0x20000ae0

0800a3b8 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	@ 0x28
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	4603      	mov	r3, r0
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	031b      	lsls	r3, r3, #12
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	085b      	lsrs	r3, r3, #1
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e0:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 800a3e2:	8bfb      	ldrh	r3, [r7, #30]
 800a3e4:	0a1b      	lsrs	r3, r3, #8
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	753b      	strb	r3, [r7, #20]
 800a3ec:	8bfb      	ldrh	r3, [r7, #30]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 800a3f2:	f002 f815 	bl	800c420 <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	f107 0114 	add.w	r1, r7, #20
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2202      	movs	r2, #2
 800a404:	2002      	movs	r0, #2
 800a406:	f002 f823 	bl	800c450 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 800a40a:	f002 f815 	bl	800c438 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d118      	bne.n	800a446 <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	785a      	ldrb	r2, [r3, #1]
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	3301      	adds	r3, #1
 800a42a:	7dfa      	ldrb	r2, [r7, #23]
 800a42c:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	3302      	adds	r3, #2
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	78d2      	ldrb	r2, [r2, #3]
 800a43c:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	3303      	adds	r3, #3
 800a442:	7dfa      	ldrb	r2, [r7, #23]
 800a444:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3720      	adds	r7, #32
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	@ 0x28
 800a454:	af02      	add	r7, sp, #8
 800a456:	4603      	mov	r3, r0
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d118      	bne.n	800a496 <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	785a      	ldrb	r2, [r3, #1]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	3301      	adds	r3, #1
 800a47a:	7efa      	ldrb	r2, [r7, #27]
 800a47c:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	789b      	ldrb	r3, [r3, #2]
 800a482:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	3302      	adds	r3, #2
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	78d2      	ldrb	r2, [r2, #3]
 800a48c:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	3303      	adds	r3, #3
 800a492:	7efa      	ldrb	r2, [r7, #27]
 800a494:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	031b      	lsls	r3, r3, #12
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	085b      	lsrs	r3, r3, #1
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 800a4a8:	8b3b      	ldrh	r3, [r7, #24]
 800a4aa:	0a1b      	lsrs	r3, r3, #8
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	753b      	strb	r3, [r7, #20]
 800a4b2:	8b3b      	ldrh	r3, [r7, #24]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 800a4b8:	f001 ffb2 	bl	800c420 <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	f107 0114 	add.w	r1, r7, #20
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	f001 ffc0 	bl	800c450 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 800a4d0:	f001 ffb2 	bl	800c438 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 800a4e6:	f001 ff75 	bl	800c3d4 <sl_wfx_host_init_bus>
 800a4ea:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d12b      	bne.n	800a54a <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 800a4f2:	f001 f8fb 	bl	800b6ec <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	f7ff fe03 	bl	800a106 <sl_wfx_reg_read_32>
 800a500:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d120      	bne.n	800a54a <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <sl_wfx_init_bus+0x36>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d104      	bne.n	800a520 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 800a516:	2301      	movs	r3, #1
 800a518:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d114      	bne.n	800a54a <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a526:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a52e:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	4b08      	ldr	r3, [pc, #32]	@ (800a554 <sl_wfx_init_bus+0x74>)
 800a534:	4313      	orrs	r3, r2
 800a536:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	4619      	mov	r1, r3
 800a53c:	2000      	movs	r0, #0
 800a53e:	f7ff fdfc 	bl	800a13a <sl_wfx_reg_write_32>
 800a542:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0

  error_handler:
 800a548:	bf00      	nop
  return status;
 800a54a:	687b      	ldr	r3, [r7, #4]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	04045400 	.word	0x04045400

0800a558 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 800a55c:	f001 ff52 	bl	800c404 <sl_wfx_host_deinit_bus>
 800a560:	4603      	mov	r3, r0
}
 800a562:	4618      	mov	r0, r3
 800a564:	bd80      	pop	{r7, pc}

0800a566 <uint16_identity>:
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	4603      	mov	r3, r0
 800a56e:	80fb      	strh	r3, [r7, #6]
  return x;
 800a570:	88fb      	ldrh	r3, [r7, #6]
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <uint32_identity>:
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  return x;
 800a586:	687b      	ldr	r3, [r7, #4]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 800a594:	b590      	push	{r4, r7, lr}
 800a596:	b089      	sub	sp, #36	@ 0x24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 800a59c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f014 fcd0 	bl	801ef48 <memset>

  sl_wfx_context = context;
 800a5a8:	4a5e      	ldr	r2, [pc, #376]	@ (800a724 <sl_wfx_init+0x190>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 800a5ae:	4b5d      	ldr	r3, [pc, #372]	@ (800a724 <sl_wfx_init+0x190>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  result = sl_wfx_init_bus(  );
 800a5b8:	f7ff ff92 	bl	800a4e0 <sl_wfx_init_bus>
 800a5bc:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f040 80a1 	bne.w	800a708 <sl_wfx_init+0x174>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 800a5c6:	f000 fbf3 	bl	800adb0 <sl_wfx_init_chip>
 800a5ca:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 809a 	bne.w	800a708 <sl_wfx_init+0x174>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 800a5d4:	f000 fc80 	bl	800aed8 <sl_wfx_download_run_bootloader>
 800a5d8:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f040 8093 	bne.w	800a708 <sl_wfx_init+0x174>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 800a5e2:	20e1      	movs	r0, #225	@ 0xe1
 800a5e4:	f001 f8de 	bl	800b7a4 <sl_wfx_host_setup_waited_event>
 800a5e8:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f040 808b 	bne.w	800a708 <sl_wfx_init+0x174>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 800a5f2:	f000 fcb9 	bl	800af68 <sl_wfx_download_run_firmware>
 800a5f6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 8084 	bne.w	800a708 <sl_wfx_init+0x174>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 800a600:	f000 fb72 	bl	800ace8 <sl_wfx_enable_irq>
 800a604:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d17d      	bne.n	800a708 <sl_wfx_init+0x174>

  result = sl_wfx_set_access_mode_message(  );
 800a60c:	f000 fbb4 	bl	800ad78 <sl_wfx_set_access_mode_message>
 800a610:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d177      	bne.n	800a708 <sl_wfx_init+0x174>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 800a618:	f107 0314 	add.w	r3, r7, #20
 800a61c:	461a      	mov	r2, r3
 800a61e:	4942      	ldr	r1, [pc, #264]	@ (800a728 <sl_wfx_init+0x194>)
 800a620:	20e1      	movs	r0, #225	@ 0xe1
 800a622:	f001 f8d1 	bl	800b7c8 <sl_wfx_host_wait_for_confirmation>
 800a626:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d16c      	bne.n	800a708 <sl_wfx_init+0x174>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
  context->firmware_major = startup_info->body.firmware_major;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f203 2016 	addw	r0, r3, #534	@ 0x216
         startup_info->body.mac_addr[0],
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	3326      	adds	r3, #38	@ 0x26
  memcpy(&(context->mac_addr_0.octet),
 800a65c:	2206      	movs	r2, #6
 800a65e:	4619      	mov	r1, r3
 800a660:	f014 fd2f 	bl	801f0c2 <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
         startup_info->body.mac_addr[1],
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	332c      	adds	r3, #44	@ 0x2c
  memcpy(&(context->mac_addr_1.octet),
 800a66e:	2206      	movs	r2, #6
 800a670:	4619      	mov	r1, r3
 800a672:	f014 fd26 	bl	801f0c2 <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	8c1b      	ldrh	r3, [r3, #32]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff ff72 	bl	800a566 <uint16_identity>
 800a682:	4603      	mov	r3, r0
 800a684:	461a      	mov	r2, r3
 800a686:	4b29      	ldr	r3, [pc, #164]	@ (800a72c <sl_wfx_init+0x198>)
 800a688:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	330a      	adds	r3, #10
 800a694:	220e      	movs	r2, #14
 800a696:	4619      	mov	r1, r3
 800a698:	f014 fd13 	bl	801f0c2 <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 800a69c:	2001      	movs	r0, #1
 800a69e:	f001 f83d 	bl	800b71c <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 800a6a2:	f107 0312 	add.w	r3, r7, #18
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fff8 	bl	800b69c <sl_wfx_host_get_pds_size>
 800a6ac:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d129      	bne.n	800a708 <sl_wfx_init+0x174>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	76fb      	strb	r3, [r7, #27]
 800a6b8:	e01c      	b.n	800a6f4 <sl_wfx_init+0x160>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 800a6ba:	7efb      	ldrb	r3, [r7, #27]
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	f107 030c 	add.w	r3, r7, #12
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 ffbd 	bl	800b644 <sl_wfx_host_get_pds_data>
 800a6ca:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11a      	bne.n	800a708 <sl_wfx_init+0x174>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 800a6d2:	68fc      	ldr	r4, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7f5 fde2 	bl	80002a0 <strlen>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 f951 	bl	800a988 <sl_wfx_send_configuration>
 800a6e6:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10c      	bne.n	800a708 <sl_wfx_init+0x174>
  for (uint8_t a = 0; a < pds_size; a++) {
 800a6ee:	7efb      	ldrb	r3, [r7, #27]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	76fb      	strb	r3, [r7, #27]
 800a6f4:	7efb      	ldrb	r3, [r7, #27]
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	8a7b      	ldrh	r3, [r7, #18]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d3dd      	bcc.n	800a6ba <sl_wfx_init+0x126>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 800a6fe:	4b09      	ldr	r3, [pc, #36]	@ (800a724 <sl_wfx_init+0x190>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d005      	beq.n	800a71a <sl_wfx_init+0x186>
    sl_wfx_disable_irq( );
 800a70e:	f000 fb0f 	bl	800ad30 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 800a712:	f7ff ff21 	bl	800a558 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 800a716:	f000 ffe1 	bl	800b6dc <sl_wfx_host_deinit>
  }

  return result;
 800a71a:	69fb      	ldr	r3, [r7, #28]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3724      	adds	r7, #36	@ 0x24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd90      	pop	{r4, r7, pc}
 800a724:	20000ae0 	.word	0x20000ae0
 800a728:	000186a0 	.word	0x000186a0
 800a72c:	20000ae6 	.word	0x20000ae6

0800a730 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	@ 0x28
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	627b      	str	r3, [r7, #36]	@ 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 800a742:	2300      	movs	r3, #0
 800a744:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 800a74e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a752:	3301      	adds	r3, #1
 800a754:	f023 0301 	bic.w	r3, r3, #1
 800a758:	3378      	adds	r3, #120	@ 0x78
 800a75a:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 800a75c:	f107 0018 	add.w	r0, r7, #24
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	2202      	movs	r2, #2
 800a764:	2143      	movs	r1, #67	@ 0x43
 800a766:	f000 fed7 	bl	800b518 <sl_wfx_allocate_command_buffer>
 800a76a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f040 8091 	bne.w	800a896 <sl_wfx_send_join_command+0x166>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2200      	movs	r2, #0
 800a778:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	3304      	adds	r3, #4
 800a77e:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 800a780:	68b8      	ldr	r0, [r7, #8]
 800a782:	f7ff fefc 	bl	800a57e <uint32_identity>
 800a786:	4602      	mov	r2, r0
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 800a78c:	887b      	ldrh	r3, [r7, #2]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fee9 	bl	800a566 <uint16_identity>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  connect_request->security_mode         = security_mode;
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800a7a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800a7ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 800a7b0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a7b4:	2b06      	cmp	r3, #6
 800a7b6:	d109      	bne.n	800a7cc <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f042 0202 	orr.w	r2, r2, #2
 800a7c0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800a7ca:	e007      	b.n	800a7dc <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 800a7cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fec9 	bl	800a566 <uint16_identity>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 800a7dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff fec0 	bl	800a566 <uint16_identity>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	861a      	strh	r2, [r3, #48]	@ 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 800a7ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff feb7 	bl	800a566 <uint16_identity>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	3304      	adds	r3, #4
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	68f9      	ldr	r1, [r7, #12]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f014 fc59 	bl	801f0c2 <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	3332      	adds	r3, #50	@ 0x32
 800a814:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a818:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a81a:	4618      	mov	r0, r3
 800a81c:	f014 fc51 	bl	801f0c2 <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	3374      	adds	r3, #116	@ 0x74
 800a824:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800a828:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a82a:	4618      	mov	r0, r3
 800a82c:	f014 fc49 	bl	801f0c2 <memcpy>
  if (bssid != NULL) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d007      	beq.n	800a846 <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	3324      	adds	r3, #36	@ 0x24
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	2206      	movs	r2, #6
 800a83e:	4618      	mov	r0, r3
 800a840:	f014 fc3f 	bl	801f0c2 <memcpy>
 800a844:	e006      	b.n	800a854 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	3324      	adds	r3, #36	@ 0x24
 800a84a:	2206      	movs	r2, #6
 800a84c:	21ff      	movs	r1, #255	@ 0xff
 800a84e:	4618      	mov	r0, r3
 800a850:	f014 fb7a 	bl	801ef48 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	69fa      	ldr	r2, [r7, #28]
 800a858:	b292      	uxth	r2, r2
 800a85a:	4619      	mov	r1, r3
 800a85c:	2043      	movs	r0, #67	@ 0x43
 800a85e:	f000 f90b 	bl	800aa78 <sl_wfx_send_request>
 800a862:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800a864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	d115      	bne.n	800a896 <sl_wfx_send_join_command+0x166>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 800a86a:	f107 0314 	add.w	r3, r7, #20
 800a86e:	461a      	mov	r2, r3
 800a870:	4918      	ldr	r1, [pc, #96]	@ (800a8d4 <sl_wfx_send_join_command+0x1a4>)
 800a872:	2043      	movs	r0, #67	@ 0x43
 800a874:	f000 ffa8 	bl	800b7c8 <sl_wfx_host_wait_for_confirmation>
 800a878:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10a      	bne.n	800a896 <sl_wfx_send_join_command+0x166>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fe7a 	bl	800a57e <uint32_identity>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2143      	movs	r1, #67	@ 0x43
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fd62 	bl	800b358 <sl_wfx_get_status_code>
 800a894:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 800a896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a898:	2b07      	cmp	r3, #7
 800a89a:	d10d      	bne.n	800a8b8 <sl_wfx_send_join_command+0x188>
    if (sl_wfx_context->used_buffers > 0) {
 800a89c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d8 <sl_wfx_send_join_command+0x1a8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <sl_wfx_send_join_command+0x188>
      sl_wfx_context->used_buffers--;
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d8 <sl_wfx_send_join_command+0x1a8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800a8b0:	3a01      	subs	r2, #1
 800a8b2:	b292      	uxth	r2, r2
 800a8b4:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d005      	beq.n	800a8ca <sl_wfx_send_join_command+0x19a>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	2143      	movs	r1, #67	@ 0x43
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 fe45 	bl	800b554 <sl_wfx_free_command_buffer>
  }
  return result;
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3728      	adds	r7, #40	@ 0x28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	000186a0 	.word	0x000186a0
 800a8d8:	20000ae0 	.word	0x20000ae0

0800a8dc <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	71fb      	strb	r3, [r7, #7]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	f023 0301 	bic.w	r3, r3, #1
 800a8fa:	330c      	adds	r3, #12
 800a8fc:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 800a8fe:	4b21      	ldr	r3, [pc, #132]	@ (800a984 <sl_wfx_send_ethernet_frame+0xa8>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 800a906:	3201      	adds	r2, #1
 800a908:	b292      	uxth	r2, r2
 800a90a:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	b29b      	uxth	r3, r3
 800a912:	330c      	adds	r3, #12
 800a914:	b29b      	uxth	r3, r3
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fe25 	bl	800a566 <uint16_identity>
 800a91c:	4603      	mov	r3, r0
 800a91e:	461a      	mov	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	224a      	movs	r2, #74	@ 0x4a
 800a928:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f003 0306 	and.w	r3, r3, #6
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2208      	movs	r2, #8
 800a93e:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	79ba      	ldrb	r2, [r7, #6]
 800a944:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 800a946:	4b0f      	ldr	r3, [pc, #60]	@ (800a984 <sl_wfx_send_ethernet_frame+0xa8>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fe09 	bl	800a566 <uint16_identity>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 800a95c:	68b8      	ldr	r0, [r7, #8]
 800a95e:	f7ff fe0e 	bl	800a57e <uint32_identity>
 800a962:	4602      	mov	r2, r0
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	68f9      	ldr	r1, [r7, #12]
 800a970:	204a      	movs	r0, #74	@ 0x4a
 800a972:	f000 f881 	bl	800aa78 <sl_wfx_send_request>
 800a976:	6138      	str	r0, [r7, #16]

  return result;
 800a978:	693b      	ldr	r3, [r7, #16]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000ae0 	.word	0x20000ae0

0800a988 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	f023 0301 	bic.w	r3, r3, #1
 800a9aa:	3306      	adds	r3, #6
 800a9ac:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 800a9ae:	f107 0010 	add.w	r0, r7, #16
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	2109      	movs	r1, #9
 800a9b8:	f000 fdae 	bl	800b518 <sl_wfx_allocate_command_buffer>
 800a9bc:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d136      	bne.n	800aa32 <sl_wfx_send_configuration+0xaa>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff fdc6 	bl	800a566 <uint16_identity>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	461a      	mov	r2, r3
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	3302      	adds	r3, #2
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f014 fb69 	bl	801f0c2 <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	b292      	uxth	r2, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	2009      	movs	r0, #9
 800a9fa:	f000 f83d 	bl	800aa78 <sl_wfx_send_request>
 800a9fe:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d115      	bne.n	800aa32 <sl_wfx_send_configuration+0xaa>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4918      	ldr	r1, [pc, #96]	@ (800aa70 <sl_wfx_send_configuration+0xe8>)
 800aa0e:	2009      	movs	r0, #9
 800aa10:	f000 feda 	bl	800b7c8 <sl_wfx_host_wait_for_confirmation>
 800aa14:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <sl_wfx_send_configuration+0xaa>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fdac 	bl	800a57e <uint32_identity>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2109      	movs	r1, #9
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fc94 	bl	800b358 <sl_wfx_get_status_code>
 800aa30:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	2b07      	cmp	r3, #7
 800aa36:	d10d      	bne.n	800aa54 <sl_wfx_send_configuration+0xcc>
    if (sl_wfx_context->used_buffers > 0) {
 800aa38:	4b0e      	ldr	r3, [pc, #56]	@ (800aa74 <sl_wfx_send_configuration+0xec>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <sl_wfx_send_configuration+0xcc>
      sl_wfx_context->used_buffers--;
 800aa44:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <sl_wfx_send_configuration+0xec>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800aa4c:	3a01      	subs	r2, #1
 800aa4e:	b292      	uxth	r2, r2
 800aa50:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <sl_wfx_send_configuration+0xde>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	2109      	movs	r1, #9
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 fd77 	bl	800b554 <sl_wfx_free_command_buffer>
  }
  return result;
 800aa66:	69fb      	ldr	r3, [r7, #28]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	000186a0 	.word	0x000186a0
 800aa74:	20000ae0 	.word	0x20000ae0

0800aa78 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
 800aa84:	4613      	mov	r3, r2
 800aa86:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 800aa88:	f001 f84e 	bl	800bb28 <sl_wfx_host_lock>
 800aa8c:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 800aa94:	68f9      	ldr	r1, [r7, #12]
 800aa96:	482f      	ldr	r0, [pc, #188]	@ (800ab54 <sl_wfx_send_request+0xdc>)
 800aa98:	f001 f834 	bl	800bb04 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	e054      	b.n	800ab4a <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 800aaa0:	4b2d      	ldr	r3, [pc, #180]	@ (800ab58 <sl_wfx_send_request+0xe0>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800aaa8:	4b2c      	ldr	r3, [pc, #176]	@ (800ab5c <sl_wfx_send_request+0xe4>)
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d304      	bcc.n	800aaba <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 800aab0:	231d      	movs	r3, #29
 800aab2:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d137      	bne.n	800ab2a <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	79fa      	ldrb	r2, [r7, #7]
 800aabe:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 800aac0:	88bb      	ldrh	r3, [r7, #4]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fd4f 	bl	800a566 <uint16_identity>
 800aac8:	4603      	mov	r3, r0
 800aaca:	461a      	mov	r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	2b4a      	cmp	r3, #74	@ 0x4a
 800aad4:	d00a      	beq.n	800aaec <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	2b32      	cmp	r3, #50	@ 0x32
 800aada:	d007      	beq.n	800aaec <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 fe60 	bl	800b7a4 <sl_wfx_host_setup_waited_event>
 800aae4:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d11e      	bne.n	800ab2a <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800aaf2:	68f9      	ldr	r1, [r7, #12]
 800aaf4:	481a      	ldr	r0, [pc, #104]	@ (800ab60 <sl_wfx_send_request+0xe8>)
 800aaf6:	f001 f805 	bl	800bb04 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 800aafa:	88bb      	ldrh	r3, [r7, #4]
 800aafc:	4619      	mov	r1, r3
 800aafe:	6838      	ldr	r0, [r7, #0]
 800ab00:	f000 fff2 	bl	800bae8 <sl_wfx_host_transmit_frame>
 800ab04:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10e      	bne.n	800ab2a <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	4812      	ldr	r0, [pc, #72]	@ (800ab60 <sl_wfx_send_request+0xe8>)
 800ab16:	f000 fff5 	bl	800bb04 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 800ab1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab58 <sl_wfx_send_request+0xe0>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800ab22:	3201      	adds	r2, #1
 800ab24:	b292      	uxth	r2, r2
 800ab26:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 800ab2a:	f001 f81d 	bl	800bb68 <sl_wfx_host_unlock>
 800ab2e:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <sl_wfx_send_request+0xc2>
    result = unlock_result;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	4807      	ldr	r0, [pc, #28]	@ (800ab60 <sl_wfx_send_request+0xe8>)
 800ab44:	f000 ffde 	bl	800bb04 <sl_wfx_host_log>
  }
#endif
  return result;
 800ab48:	68fb      	ldr	r3, [r7, #12]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	08021e58 	.word	0x08021e58
 800ab58:	20000ae0 	.word	0x20000ae0
 800ab5c:	20000ae6 	.word	0x20000ae6
 800ab60:	08021e74 	.word	0x08021e74

0800ab64 <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 800ab64:	b590      	push	{r4, r7, lr}
 800ab66:	b08b      	sub	sp, #44	@ 0x2c
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 800ab76:	f000 ffd7 	bl	800bb28 <sl_wfx_host_lock>
 800ab7a:	6278      	str	r0, [r7, #36]	@ 0x24

  if (result != SL_STATUS_OK) {
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 800ab82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab84:	4855      	ldr	r0, [pc, #340]	@ (800acdc <sl_wfx_receive_frame+0x178>)
 800ab86:	f000 ffbd 	bl	800bb04 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	e0a1      	b.n	800acd2 <sl_wfx_receive_frame+0x16e>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d116      	bne.n	800abce <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	2001      	movs	r0, #1
 800aba4:	f7ff fa73 	bl	800a08e <sl_wfx_reg_read_16>
 800aba8:	6278      	str	r0, [r7, #36]	@ 0x24
    SL_WFX_ERROR_CHECK(result);
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	2b00      	cmp	r3, #0
 800abae:	d174      	bne.n	800ac9a <sl_wfx_receive_frame+0x136>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d105      	bne.n	800abce <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 800abc2:	f640 3305 	movw	r3, #2821	@ 0xb05
 800abc6:	627b      	str	r3, [r7, #36]	@ 0x24
      SL_WFX_ERROR_CHECK(result);
 800abc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d165      	bne.n	800ac9a <sl_wfx_receive_frame+0x136>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	0b9b      	lsrs	r3, r3, #14
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	3302      	adds	r3, #2
 800abdc:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 800abde:	7efb      	ldrb	r3, [r7, #27]
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d101      	bne.n	800abe8 <sl_wfx_receive_frame+0x84>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <sl_wfx_receive_frame+0x86>
 800abe8:	2302      	movs	r3, #2
 800abea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 800abfe:	3340      	adds	r3, #64	@ 0x40
 800ac00:	e000      	b.n	800ac04 <sl_wfx_receive_frame+0xa0>
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800ac08:	f107 000c 	add.w	r0, r7, #12
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f000 ff4b 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800ac12:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d13f      	bne.n	800ac9a <sl_wfx_receive_frame+0x136>

  memset(network_rx_buffer, 0, read_length);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	2100      	movs	r1, #0
 800ac20:	4618      	mov	r0, r3
 800ac22:	f014 f991 	bl	801ef48 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6979      	ldr	r1, [r7, #20]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fa9c 	bl	800a168 <sl_wfx_data_read>
 800ac30:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d130      	bne.n	800ac9a <sl_wfx_receive_frame+0x136>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 800ac38:	4b29      	ldr	r3, [pc, #164]	@ (800ace0 <sl_wfx_receive_frame+0x17c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00c      	beq.n	800ac5e <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	789b      	ldrb	r3, [r3, #2]
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	db07      	blt.n	800ac5e <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 800ac4e:	4b24      	ldr	r3, [pc, #144]	@ (800ace0 <sl_wfx_receive_frame+0x17c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800ac56:	3a01      	subs	r2, #1
 800ac58:	b292      	uxth	r2, r2
 800ac5a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	4413      	add	r3, r2
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	4413      	add	r3, r2
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	430b      	orrs	r3, r1
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	68fc      	ldr	r4, [r7, #12]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7ff fc6d 	bl	800a566 <uint16_identity>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fdd8 	bl	800b848 <sl_wfx_host_post_event>
 800ac98:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d008      	beq.n	800acb2 <sl_wfx_receive_frame+0x14e>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	789b      	ldrb	r3, [r3, #2]
 800aca6:	4619      	mov	r1, r3
 800aca8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800acac:	461a      	mov	r2, r3
 800acae:	f000 fc51 	bl	800b554 <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 800acb2:	f000 ff59 	bl	800bb68 <sl_wfx_host_unlock>
 800acb6:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <sl_wfx_receive_frame+0x15e>
    result = unlock_result;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <sl_wfx_receive_frame+0x16c>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 800acc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800acca:	4806      	ldr	r0, [pc, #24]	@ (800ace4 <sl_wfx_receive_frame+0x180>)
 800accc:	f000 ff1a 	bl	800bb04 <sl_wfx_host_log>
  }
#endif
  return result;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	372c      	adds	r7, #44	@ 0x2c
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd90      	pop	{r4, r7, pc}
 800acda:	bf00      	nop
 800acdc:	08021e8c 	.word	0x08021e8c
 800ace0:	20000ae0 	.word	0x20000ae0
 800ace4:	08021eac 	.word	0x08021eac

0800ace8 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 800acee:	f001 fc07 	bl	800c500 <sl_wfx_host_enable_platform_interrupt>
 800acf2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d115      	bne.n	800ad26 <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800acfa:	463b      	mov	r3, r7
 800acfc:	4619      	mov	r1, r3
 800acfe:	2000      	movs	r0, #0
 800ad00:	f7ff fa01 	bl	800a106 <sl_wfx_reg_read_32>
 800ad04:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10c      	bne.n	800ad26 <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad12:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	4619      	mov	r1, r3
 800ad18:	2000      	movs	r0, #0
 800ad1a:	f7ff fa0e 	bl	800a13a <sl_wfx_reg_write_32>
 800ad1e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0

  error_handler:
 800ad24:	bf00      	nop
  return result;
 800ad26:	687b      	ldr	r3, [r7, #4]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800ad36:	463b      	mov	r3, r7
 800ad38:	4619      	mov	r1, r3
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	f7ff f9e3 	bl	800a106 <sl_wfx_reg_read_32>
 800ad40:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d112      	bne.n	800ad6e <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad4e:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	4619      	mov	r1, r3
 800ad54:	2000      	movs	r0, #0
 800ad56:	f7ff f9f0 	bl	800a13a <sl_wfx_reg_write_32>
 800ad5a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 800ad62:	f001 fbda 	bl	800c51a <sl_wfx_host_disable_platform_interrupt>
 800ad66:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0

  error_handler:
 800ad6c:	bf00      	nop
  return result;
 800ad6e:	687b      	ldr	r3, [r7, #4]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 800ad7e:	463b      	mov	r3, r7
 800ad80:	4619      	mov	r1, r3
 800ad82:	2000      	movs	r0, #0
 800ad84:	f7ff f9bf 	bl	800a106 <sl_wfx_reg_read_32>
 800ad88:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad96:	4619      	mov	r1, r3
 800ad98:	2000      	movs	r0, #0
 800ad9a:	f7ff f9ce 	bl	800a13a <sl_wfx_reg_write_32>
 800ad9e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0

  error_handler:
 800ada4:	bf00      	nop
  return result;
 800ada6:	687b      	ldr	r3, [r7, #4]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800adb6:	1d3b      	adds	r3, r7, #4
 800adb8:	4619      	mov	r1, r3
 800adba:	2000      	movs	r0, #0
 800adbc:	f7ff f9a3 	bl	800a106 <sl_wfx_reg_read_32>
 800adc0:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d177      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 800adc8:	493e      	ldr	r1, [pc, #248]	@ (800aec4 <sl_wfx_init_chip+0x114>)
 800adca:	2006      	movs	r0, #6
 800adcc:	f7ff f9b5 	bl	800a13a <sl_wfx_reg_write_32>
 800add0:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d16f      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 800add8:	493b      	ldr	r1, [pc, #236]	@ (800aec8 <sl_wfx_init_chip+0x118>)
 800adda:	2006      	movs	r0, #6
 800addc:	f7ff f9ad 	bl	800a13a <sl_wfx_reg_write_32>
 800ade0:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d167      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 800ade8:	4938      	ldr	r1, [pc, #224]	@ (800aecc <sl_wfx_init_chip+0x11c>)
 800adea:	2006      	movs	r0, #6
 800adec:	f7ff f9a5 	bl	800a13a <sl_wfx_reg_write_32>
 800adf0:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d15f      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 800adf8:	4935      	ldr	r1, [pc, #212]	@ (800aed0 <sl_wfx_init_chip+0x120>)
 800adfa:	2006      	movs	r0, #6
 800adfc:	f7ff f99d 	bl	800a13a <sl_wfx_reg_write_32>
 800ae00:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d157      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 800ae08:	4932      	ldr	r1, [pc, #200]	@ (800aed4 <sl_wfx_init_chip+0x124>)
 800ae0a:	2006      	movs	r0, #6
 800ae0c:	f7ff f995 	bl	800a13a <sl_wfx_reg_write_32>
 800ae10:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d14f      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 800ae18:	1cbb      	adds	r3, r7, #2
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f7ff f936 	bl	800a08e <sl_wfx_reg_read_16>
 800ae22:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d146      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 800ae2a:	887b      	ldrh	r3, [r7, #2]
 800ae2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 800ae34:	887b      	ldrh	r3, [r7, #2]
 800ae36:	4619      	mov	r1, r3
 800ae38:	2001      	movs	r0, #1
 800ae3a:	f7ff f944 	bl	800a0c6 <sl_wfx_reg_write_16>
 800ae3e:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d138      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 800ae46:	2300      	movs	r3, #0
 800ae48:	60bb      	str	r3, [r7, #8]
 800ae4a:	e013      	b.n	800ae74 <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 800ae4c:	1cbb      	adds	r3, r7, #2
 800ae4e:	4619      	mov	r1, r3
 800ae50:	2001      	movs	r0, #1
 800ae52:	f7ff f91c 	bl	800a08e <sl_wfx_reg_read_16>
 800ae56:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d12c      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 800ae5e:	887b      	ldrh	r3, [r7, #2]
 800ae60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d109      	bne.n	800ae7c <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 800ae68:	2001      	movs	r0, #1
 800ae6a:	f000 fce1 	bl	800b830 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	3301      	adds	r3, #1
 800ae72:	60bb      	str	r3, [r7, #8]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae78:	d9e8      	bls.n	800ae4c <sl_wfx_init_chip+0x9c>
 800ae7a:	e000      	b.n	800ae7e <sl_wfx_init_chip+0xce>
      break;
 800ae7c:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 800ae7e:	887b      	ldrh	r3, [r7, #2]
 800ae80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 800ae88:	2307      	movs	r3, #7
 800ae8a:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d112      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800ae92:	1d3b      	adds	r3, r7, #4
 800ae94:	4619      	mov	r1, r3
 800ae96:	2000      	movs	r0, #0
 800ae98:	f7ff f935 	bl	800a106 <sl_wfx_reg_read_32>
 800ae9c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d109      	bne.n	800aeb8 <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2b00      	cmp	r3, #0
  }

  error_handler:
 800aeb6:	bf00      	nop
  return result;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	07208775 	.word	0x07208775
 800aec8:	082ec020 	.word	0x082ec020
 800aecc:	093c3c3c 	.word	0x093c3c3c
 800aed0:	0b322c44 	.word	0x0b322c44
 800aed4:	0ca06497 	.word	0x0ca06497

0800aed8 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800aede:	463b      	mov	r3, r7
 800aee0:	4619      	mov	r1, r3
 800aee2:	481e      	ldr	r0, [pc, #120]	@ (800af5c <sl_wfx_download_run_bootloader+0x84>)
 800aee4:	f7ff f999 	bl	800a21a <sl_wfx_apb_read_32>
 800aee8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d12f      	bne.n	800af50 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800aef0:	463b      	mov	r3, r7
 800aef2:	4619      	mov	r1, r3
 800aef4:	2000      	movs	r0, #0
 800aef6:	f7ff f906 	bl	800a106 <sl_wfx_reg_read_32>
 800aefa:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d126      	bne.n	800af50 <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 800af08:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	4619      	mov	r1, r3
 800af0e:	2000      	movs	r0, #0
 800af10:	f7ff f913 	bl	800a13a <sl_wfx_reg_write_32>
 800af14:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d119      	bne.n	800af50 <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 800af1c:	4910      	ldr	r1, [pc, #64]	@ (800af60 <sl_wfx_download_run_bootloader+0x88>)
 800af1e:	4811      	ldr	r0, [pc, #68]	@ (800af64 <sl_wfx_download_run_bootloader+0x8c>)
 800af20:	f7ff f964 	bl	800a1ec <sl_wfx_apb_write_32>
 800af24:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d111      	bne.n	800af50 <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 800af2c:	463b      	mov	r3, r7
 800af2e:	4619      	mov	r1, r3
 800af30:	480c      	ldr	r0, [pc, #48]	@ (800af64 <sl_wfx_download_run_bootloader+0x8c>)
 800af32:	f7ff f972 	bl	800a21a <sl_wfx_apb_read_32>
 800af36:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d108      	bne.n	800af50 <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	4a07      	ldr	r2, [pc, #28]	@ (800af60 <sl_wfx_download_run_bootloader+0x88>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d003      	beq.n	800af4e <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 800af46:	2301      	movs	r3, #1
 800af48:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
  }

  error_handler:
 800af4e:	bf00      	nop
  return result;
 800af50:	687b      	ldr	r3, [r7, #4]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	0900c010 	.word	0x0900c010
 800af60:	23abc88e 	.word	0x23abc88e
 800af64:	09004000 	.word	0x09004000

0800af68 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	@ 0x30
 800af6c:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 800af76:	f000 faff 	bl	800b578 <sl_wfx_host_init>
 800af7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800af7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f040 8185 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 800af84:	4984      	ldr	r1, [pc, #528]	@ (800b198 <sl_wfx_download_run_firmware+0x230>)
 800af86:	4885      	ldr	r0, [pc, #532]	@ (800b19c <sl_wfx_download_run_firmware+0x234>)
 800af88:	f7ff f930 	bl	800a1ec <sl_wfx_apb_write_32>
 800af8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800af8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af90:	2b00      	cmp	r3, #0
 800af92:	f040 817c 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 800af96:	2100      	movs	r1, #0
 800af98:	4881      	ldr	r0, [pc, #516]	@ (800b1a0 <sl_wfx_download_run_firmware+0x238>)
 800af9a:	f7ff f927 	bl	800a1ec <sl_wfx_apb_write_32>
 800af9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800afa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f040 8173 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 800afa8:	2100      	movs	r1, #0
 800afaa:	487e      	ldr	r0, [pc, #504]	@ (800b1a4 <sl_wfx_download_run_firmware+0x23c>)
 800afac:	f7ff f91e 	bl	800a1ec <sl_wfx_apb_write_32>
 800afb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800afb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f040 816a 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 800afba:	497b      	ldr	r1, [pc, #492]	@ (800b1a8 <sl_wfx_download_run_firmware+0x240>)
 800afbc:	4877      	ldr	r0, [pc, #476]	@ (800b19c <sl_wfx_download_run_firmware+0x234>)
 800afbe:	f7ff f915 	bl	800a1ec <sl_wfx_apb_write_32>
 800afc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800afc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f040 8161 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 800afcc:	2264      	movs	r2, #100	@ 0x64
 800afce:	4977      	ldr	r1, [pc, #476]	@ (800b1ac <sl_wfx_download_run_firmware+0x244>)
 800afd0:	4877      	ldr	r0, [pc, #476]	@ (800b1b0 <sl_wfx_download_run_firmware+0x248>)
 800afd2:	f000 f96b 	bl	800b2ac <sl_wfx_poll_for_value>
 800afd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f040 8157 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 800afe0:	f107 0310 	add.w	r3, r7, #16
 800afe4:	4619      	mov	r1, r3
 800afe6:	4873      	ldr	r0, [pc, #460]	@ (800b1b4 <sl_wfx_download_run_firmware+0x24c>)
 800afe8:	f7ff f917 	bl	800a21a <sl_wfx_apb_read_32>
 800afec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800afee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f040 814c 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 800aff6:	f107 0310 	add.w	r3, r7, #16
 800affa:	4619      	mov	r1, r3
 800affc:	486e      	ldr	r0, [pc, #440]	@ (800b1b8 <sl_wfx_download_run_firmware+0x250>)
 800affe:	f7ff f90c 	bl	800a21a <sl_wfx_apb_read_32>
 800b002:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b006:	2b00      	cmp	r3, #0
 800b008:	f040 8141 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	0a1b      	lsrs	r3, r3, #8
 800b010:	b2da      	uxtb	r2, r3
 800b012:	4b6a      	ldr	r3, [pc, #424]	@ (800b1bc <sl_wfx_download_run_firmware+0x254>)
 800b014:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 800b016:	496a      	ldr	r1, [pc, #424]	@ (800b1c0 <sl_wfx_download_run_firmware+0x258>)
 800b018:	4860      	ldr	r0, [pc, #384]	@ (800b19c <sl_wfx_download_run_firmware+0x234>)
 800b01a:	f7ff f8e7 	bl	800a1ec <sl_wfx_apb_write_32>
 800b01e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b022:	2b00      	cmp	r3, #0
 800b024:	f040 8133 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 800b028:	2264      	movs	r2, #100	@ 0x64
 800b02a:	495f      	ldr	r1, [pc, #380]	@ (800b1a8 <sl_wfx_download_run_firmware+0x240>)
 800b02c:	4860      	ldr	r0, [pc, #384]	@ (800b1b0 <sl_wfx_download_run_firmware+0x248>)
 800b02e:	f000 f93d 	bl	800b2ac <sl_wfx_poll_for_value>
 800b032:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b036:	2b00      	cmp	r3, #0
 800b038:	f040 8129 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 800b03c:	f04f 31ff 	mov.w	r1, #4294967295
 800b040:	4860      	ldr	r0, [pc, #384]	@ (800b1c4 <sl_wfx_download_run_firmware+0x25c>)
 800b042:	f7ff f8d3 	bl	800a1ec <sl_wfx_apb_write_32>
 800b046:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f040 811f 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 800b050:	f107 030c 	add.w	r3, r7, #12
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fae5 	bl	800b624 <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3b50      	subs	r3, #80	@ 0x50
 800b05e:	4619      	mov	r1, r3
 800b060:	4859      	ldr	r0, [pc, #356]	@ (800b1c8 <sl_wfx_download_run_firmware+0x260>)
 800b062:	f7ff f8c3 	bl	800a1ec <sl_wfx_apb_write_32>
 800b066:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f040 810f 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 800b070:	1d3b      	adds	r3, r7, #4
 800b072:	2108      	movs	r1, #8
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fab9 	bl	800b5ec <sl_wfx_host_get_firmware_data>
 800b07a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f040 8105 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 800b084:	4b4d      	ldr	r3, [pc, #308]	@ (800b1bc <sl_wfx_download_run_firmware+0x254>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	4611      	mov	r1, r2
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 f93c 	bl	800b30a <sl_wfx_compare_keysets>
 800b092:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	f040 80f9 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 800b09c:	1d3b      	adds	r3, r7, #4
 800b09e:	2140      	movs	r1, #64	@ 0x40
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 faa3 	bl	800b5ec <sl_wfx_host_get_firmware_data>
 800b0a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 80ef 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2240      	movs	r2, #64	@ 0x40
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	4845      	ldr	r0, [pc, #276]	@ (800b1cc <sl_wfx_download_run_firmware+0x264>)
 800b0b8:	f7ff f878 	bl	800a1ac <sl_wfx_apb_write>
 800b0bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f040 80e4 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 800b0c6:	1d3b      	adds	r3, r7, #4
 800b0c8:	2108      	movs	r1, #8
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fa8e 	bl	800b5ec <sl_wfx_host_get_firmware_data>
 800b0d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f040 80da 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2208      	movs	r2, #8
 800b0de:	4619      	mov	r1, r3
 800b0e0:	483b      	ldr	r0, [pc, #236]	@ (800b1d0 <sl_wfx_download_run_firmware+0x268>)
 800b0e2:	f7ff f863 	bl	800a1ac <sl_wfx_apb_write>
 800b0e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f040 80cf 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	4838      	ldr	r0, [pc, #224]	@ (800b1d4 <sl_wfx_download_run_firmware+0x26c>)
 800b0f4:	f7ff f87a 	bl	800a1ec <sl_wfx_apb_write_32>
 800b0f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f040 80c6 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 800b102:	4935      	ldr	r1, [pc, #212]	@ (800b1d8 <sl_wfx_download_run_firmware+0x270>)
 800b104:	4825      	ldr	r0, [pc, #148]	@ (800b19c <sl_wfx_download_run_firmware+0x234>)
 800b106:	f7ff f871 	bl	800a1ec <sl_wfx_apb_write_32>
 800b10a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f040 80bd 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3b50      	subs	r3, #80	@ 0x50
 800b118:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	0a9b      	lsrs	r3, r3, #10
 800b120:	3301      	adds	r3, #1
 800b122:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 800b124:	2300      	movs	r3, #0
 800b126:	627b      	str	r3, [r7, #36]	@ 0x24
 800b128:	e093      	b.n	800b252 <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 800b12a:	2300      	movs	r3, #0
 800b12c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b12e:	e015      	b.n	800b15c <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	6a3a      	ldr	r2, [r7, #32]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 800b13a:	d913      	bls.n	800b164 <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 800b140:	f107 0308 	add.w	r3, r7, #8
 800b144:	4619      	mov	r1, r3
 800b146:	4817      	ldr	r0, [pc, #92]	@ (800b1a4 <sl_wfx_download_run_firmware+0x23c>)
 800b148:	f7ff f867 	bl	800a21a <sl_wfx_apb_read_32>
 800b14c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 800b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b150:	2b00      	cmp	r3, #0
 800b152:	f040 809c 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	3301      	adds	r3, #1
 800b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15e:	2b63      	cmp	r3, #99	@ 0x63
 800b160:	d9e6      	bls.n	800b130 <sl_wfx_download_run_firmware+0x1c8>
 800b162:	e000      	b.n	800b166 <sl_wfx_download_run_firmware+0x1fe>
        break;
 800b164:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6a3a      	ldr	r2, [r7, #32]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 800b170:	d93a      	bls.n	800b1e8 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800b172:	f107 0310 	add.w	r3, r7, #16
 800b176:	4619      	mov	r1, r3
 800b178:	480d      	ldr	r0, [pc, #52]	@ (800b1b0 <sl_wfx_download_run_firmware+0x248>)
 800b17a:	f7ff f84e 	bl	800a21a <sl_wfx_apb_read_32>
 800b17e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 800b180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b182:	2b00      	cmp	r3, #0
 800b184:	f040 8083 	bne.w	800b28e <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	4a13      	ldr	r2, [pc, #76]	@ (800b1d8 <sl_wfx_download_run_firmware+0x270>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d025      	beq.n	800b1dc <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 800b190:	2301      	movs	r3, #1
 800b192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b194:	e025      	b.n	800b1e2 <sl_wfx_download_run_firmware+0x27a>
 800b196:	bf00      	nop
 800b198:	12345678 	.word	0x12345678
 800b19c:	0900c00c 	.word	0x0900c00c
 800b1a0:	0900c004 	.word	0x0900c004
 800b1a4:	0900c008 	.word	0x0900c008
 800b1a8:	87654321 	.word	0x87654321
 800b1ac:	bd53ef99 	.word	0xbd53ef99
 800b1b0:	0900c010 	.word	0x0900c010
 800b1b4:	0900c080 	.word	0x0900c080
 800b1b8:	0900c0cc 	.word	0x0900c0cc
 800b1bc:	20000ae4 	.word	0x20000ae4
 800b1c0:	a753bd99 	.word	0xa753bd99
 800b1c4:	09004000 	.word	0x09004000
 800b1c8:	0900c000 	.word	0x0900c000
 800b1cc:	0900c014 	.word	0x0900c014
 800b1d0:	0900c054 	.word	0x0900c054
 800b1d4:	0900c05c 	.word	0x0900c05c
 800b1d8:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 800b1dc:	f640 3302 	movw	r3, #2818	@ 0xb02
 800b1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 800b1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d152      	bne.n	800b28e <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1f6:	d902      	bls.n	800b1fe <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 800b1f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1fc:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 800b1fe:	1d3b      	adds	r3, r7, #4
 800b200:	69f9      	ldr	r1, [r7, #28]
 800b202:	4618      	mov	r0, r3
 800b204:	f000 f9f2 	bl	800b5ec <sl_wfx_host_get_firmware_data>
 800b208:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 800b20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d13e      	bne.n	800b28e <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b216:	f103 6310 	add.w	r3, r3, #150994944	@ 0x9000000
 800b21a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b21e:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	4619      	mov	r1, r3
 800b226:	6978      	ldr	r0, [r7, #20]
 800b228:	f7fe ffc0 	bl	800a1ac <sl_wfx_apb_write>
 800b22c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 800b22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d12c      	bne.n	800b28e <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 800b234:	6a3a      	ldr	r2, [r7, #32]
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 800b23c:	6a39      	ldr	r1, [r7, #32]
 800b23e:	4816      	ldr	r0, [pc, #88]	@ (800b298 <sl_wfx_download_run_firmware+0x330>)
 800b240:	f7fe ffd4 	bl	800a1ec <sl_wfx_apb_write_32>
 800b244:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d120      	bne.n	800b28e <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 800b24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24e:	3301      	adds	r3, #1
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
 800b252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	429a      	cmp	r2, r3
 800b258:	f4ff af67 	bcc.w	800b12a <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 800b25c:	490f      	ldr	r1, [pc, #60]	@ (800b29c <sl_wfx_download_run_firmware+0x334>)
 800b25e:	4810      	ldr	r0, [pc, #64]	@ (800b2a0 <sl_wfx_download_run_firmware+0x338>)
 800b260:	f7fe ffc4 	bl	800a1ec <sl_wfx_apb_write_32>
 800b264:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d110      	bne.n	800b28e <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 800b26c:	2264      	movs	r2, #100	@ 0x64
 800b26e:	490b      	ldr	r1, [pc, #44]	@ (800b29c <sl_wfx_download_run_firmware+0x334>)
 800b270:	480c      	ldr	r0, [pc, #48]	@ (800b2a4 <sl_wfx_download_run_firmware+0x33c>)
 800b272:	f000 f81b 	bl	800b2ac <sl_wfx_poll_for_value>
 800b276:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d107      	bne.n	800b28e <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 800b27e:	490a      	ldr	r1, [pc, #40]	@ (800b2a8 <sl_wfx_download_run_firmware+0x340>)
 800b280:	4807      	ldr	r0, [pc, #28]	@ (800b2a0 <sl_wfx_download_run_firmware+0x338>)
 800b282:	f7fe ffb3 	bl	800a1ec <sl_wfx_apb_write_32>
 800b286:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800b288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28a:	2b00      	cmp	r3, #0

  error_handler:
 800b28c:	bf00      	nop
  return result;
 800b28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b290:	4618      	mov	r0, r3
 800b292:	3730      	adds	r7, #48	@ 0x30
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	0900c004 	.word	0x0900c004
 800b29c:	d4c64a99 	.word	0xd4c64a99
 800b2a0:	0900c00c 	.word	0x0900c00c
 800b2a4:	0900c010 	.word	0x0900c010
 800b2a8:	174fc882 	.word	0x174fc882

0800b2ac <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 800b2bc:	e013      	b.n	800b2e6 <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 800b2be:	f107 0310 	add.w	r3, r7, #16
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7fe ffa8 	bl	800a21a <sl_wfx_apb_read_32>
 800b2ca:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d116      	bne.n	800b300 <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d009      	beq.n	800b2ee <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 800b2da:	2001      	movs	r0, #1
 800b2dc:	f000 faa8 	bl	800b830 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	607b      	str	r3, [r7, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e8      	bne.n	800b2be <sl_wfx_poll_for_value+0x12>
 800b2ec:	e000      	b.n	800b2f0 <sl_wfx_poll_for_value+0x44>
      break;
 800b2ee:	bf00      	nop
    }
  }
  if (value != polled_value) {
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d002      	beq.n	800b2fe <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 800b2f8:	2307      	movs	r3, #7
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	e000      	b.n	800b300 <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 800b2fe:	bf00      	nop
  return result;
 800b300:	697b      	ldr	r3, [r7, #20]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	4603      	mov	r3, r0
 800b312:	6039      	str	r1, [r7, #0]
 800b314:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	799b      	ldrb	r3, [r3, #6]
 800b31a:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	79db      	ldrb	r3, [r3, #7]
 800b320:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 800b322:	2300      	movs	r3, #0
 800b324:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 800b326:	f107 0308 	add.w	r3, r7, #8
 800b32a:	2210      	movs	r2, #16
 800b32c:	2100      	movs	r1, #0
 800b32e:	4618      	mov	r0, r3
 800b330:	f012 ff7c 	bl	801e22c <strtoul>
 800b334:	4603      	mov	r3, r0
 800b336:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 800b338:	7afa      	ldrb	r2, [r7, #11]
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d102      	bne.n	800b346 <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	e002      	b.n	800b34c <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 800b346:	f640 3301 	movw	r3, #2817	@ 0xb01
 800b34a:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b34c:	68fb      	ldr	r3, [r7, #12]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 800b364:	78fb      	ldrb	r3, [r7, #3]
 800b366:	f003 0320 	and.w	r3, r3, #32
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d05b      	beq.n	800b426 <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f241 2256 	movw	r2, #4694	@ 0x1256
 800b374:	4293      	cmp	r3, r2
 800b376:	d045      	beq.n	800b404 <sl_wfx_get_status_code+0xac>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f241 2256 	movw	r2, #4694	@ 0x1256
 800b37e:	4293      	cmp	r3, r2
 800b380:	d84e      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f241 2234 	movw	r2, #4660	@ 0x1234
 800b388:	4293      	cmp	r3, r2
 800b38a:	d038      	beq.n	800b3fe <sl_wfx_get_status_code+0xa6>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f241 2234 	movw	r2, #4660	@ 0x1234
 800b392:	4293      	cmp	r3, r2
 800b394:	d844      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2baf      	cmp	r3, #175	@ 0xaf
 800b39a:	d033      	beq.n	800b404 <sl_wfx_get_status_code+0xac>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2baf      	cmp	r3, #175	@ 0xaf
 800b3a0:	d83e      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b9e      	cmp	r3, #158	@ 0x9e
 800b3a6:	d02a      	beq.n	800b3fe <sl_wfx_get_status_code+0xa6>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b9e      	cmp	r3, #158	@ 0x9e
 800b3ac:	d838      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b8d      	cmp	r3, #141	@ 0x8d
 800b3b2:	d027      	beq.n	800b404 <sl_wfx_get_status_code+0xac>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b8d      	cmp	r3, #141	@ 0x8d
 800b3b8:	d832      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b7c      	cmp	r3, #124	@ 0x7c
 800b3be:	d021      	beq.n	800b404 <sl_wfx_get_status_code+0xac>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b7c      	cmp	r3, #124	@ 0x7c
 800b3c4:	d82c      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b6b      	cmp	r3, #107	@ 0x6b
 800b3ca:	d01b      	beq.n	800b404 <sl_wfx_get_status_code+0xac>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b6b      	cmp	r3, #107	@ 0x6b
 800b3d0:	d826      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d80f      	bhi.n	800b3f8 <sl_wfx_get_status_code+0xa0>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b04      	cmp	r3, #4
 800b3dc:	d820      	bhi.n	800b420 <sl_wfx_get_status_code+0xc8>
 800b3de:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e4 <sl_wfx_get_status_code+0x8c>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b3ff 	.word	0x0800b3ff
 800b3e8:	0800b405 	.word	0x0800b405
 800b3ec:	0800b40b 	.word	0x0800b40b
 800b3f0:	0800b411 	.word	0x0800b411
 800b3f4:	0800b419 	.word	0x0800b419
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b5a      	cmp	r3, #90	@ 0x5a
 800b3fc:	d110      	bne.n	800b420 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
        break;
 800b402:	e075      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 800b404:	2301      	movs	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]
        break;
 800b408:	e072      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 800b40a:	2321      	movs	r3, #33	@ 0x21
 800b40c:	60fb      	str	r3, [r7, #12]
        break;
 800b40e:	e06f      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 800b410:	f640 3304 	movw	r3, #2820	@ 0xb04
 800b414:	60fb      	str	r3, [r7, #12]
        break;
 800b416:	e06b      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 800b418:	f640 3303 	movw	r3, #2819	@ 0xb03
 800b41c:	60fb      	str	r3, [r7, #12]
        break;
 800b41e:	e067      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 800b420:	2301      	movs	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
        break;
 800b424:	e064      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b14      	cmp	r3, #20
 800b42a:	d85e      	bhi.n	800b4ea <sl_wfx_get_status_code+0x192>
 800b42c:	a201      	add	r2, pc, #4	@ (adr r2, 800b434 <sl_wfx_get_status_code+0xdc>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b489 	.word	0x0800b489
 800b438:	0800b48f 	.word	0x0800b48f
 800b43c:	0800b495 	.word	0x0800b495
 800b440:	0800b49d 	.word	0x0800b49d
 800b444:	0800b4a3 	.word	0x0800b4a3
 800b448:	0800b4ab 	.word	0x0800b4ab
 800b44c:	0800b4b3 	.word	0x0800b4b3
 800b450:	0800b4bb 	.word	0x0800b4bb
 800b454:	0800b4c3 	.word	0x0800b4c3
 800b458:	0800b4cb 	.word	0x0800b4cb
 800b45c:	0800b4d3 	.word	0x0800b4d3
 800b460:	0800b4eb 	.word	0x0800b4eb
 800b464:	0800b4eb 	.word	0x0800b4eb
 800b468:	0800b4eb 	.word	0x0800b4eb
 800b46c:	0800b4eb 	.word	0x0800b4eb
 800b470:	0800b4eb 	.word	0x0800b4eb
 800b474:	0800b4eb 	.word	0x0800b4eb
 800b478:	0800b4eb 	.word	0x0800b4eb
 800b47c:	0800b4eb 	.word	0x0800b4eb
 800b480:	0800b4db 	.word	0x0800b4db
 800b484:	0800b4e3 	.word	0x0800b4e3
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]
        break;
 800b48c:	e030      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 800b48e:	2321      	movs	r3, #33	@ 0x21
 800b490:	60fb      	str	r3, [r7, #12]
        break;
 800b492:	e02d      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 800b494:	f640 3318 	movw	r3, #2840	@ 0xb18
 800b498:	60fb      	str	r3, [r7, #12]
        break;
 800b49a:	e029      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 800b49c:	2301      	movs	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
        break;
 800b4a0:	e026      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 800b4a2:	f640 3319 	movw	r3, #2841	@ 0xb19
 800b4a6:	60fb      	str	r3, [r7, #12]
        break;
 800b4a8:	e022      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 800b4aa:	f640 3304 	movw	r3, #2820	@ 0xb04
 800b4ae:	60fb      	str	r3, [r7, #12]
        break;
 800b4b0:	e01e      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 800b4b2:	f640 331a 	movw	r3, #2842	@ 0xb1a
 800b4b6:	60fb      	str	r3, [r7, #12]
        break;
 800b4b8:	e01a      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 800b4ba:	f640 331b 	movw	r3, #2843	@ 0xb1b
 800b4be:	60fb      	str	r3, [r7, #12]
        break;
 800b4c0:	e016      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 800b4c2:	f640 331c 	movw	r3, #2844	@ 0xb1c
 800b4c6:	60fb      	str	r3, [r7, #12]
        break;
 800b4c8:	e012      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 800b4ca:	f640 331d 	movw	r3, #2845	@ 0xb1d
 800b4ce:	60fb      	str	r3, [r7, #12]
        break;
 800b4d0:	e00e      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 800b4d2:	f640 331e 	movw	r3, #2846	@ 0xb1e
 800b4d6:	60fb      	str	r3, [r7, #12]
        break;
 800b4d8:	e00a      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 800b4da:	f640 331f 	movw	r3, #2847	@ 0xb1f
 800b4de:	60fb      	str	r3, [r7, #12]
        break;
 800b4e0:	e006      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 800b4e2:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 800b4e6:	60fb      	str	r3, [r7, #12]
        break;
 800b4e8:	e002      	b.n	800b4f0 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	60fb      	str	r3, [r7, #12]
        break;
 800b4ee:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d008      	beq.n	800b508 <sl_wfx_get_status_code+0x1b0>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f640 3204 	movw	r2, #2820	@ 0xb04
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d003      	beq.n	800b508 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 800b500:	68f9      	ldr	r1, [r7, #12]
 800b502:	4804      	ldr	r0, [pc, #16]	@ (800b514 <sl_wfx_get_status_code+0x1bc>)
 800b504:	f000 fafe 	bl	800bb04 <sl_wfx_host_log>
  }
#endif
  return result;
 800b508:	68fb      	ldr	r3, [r7, #12]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	08021f34 	.word	0x08021f34

0800b518 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	4613      	mov	r3, r2
 800b526:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 800b528:	79fb      	ldrb	r3, [r7, #7]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4619      	mov	r1, r3
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f000 faba 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800b534:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	2100      	movs	r1, #0
 800b544:	4618      	mov	r0, r3
 800b546:	f013 fcff 	bl	801ef48 <memset>
  }

  error_handler:
  return result;
 800b54a:	697b      	ldr	r3, [r7, #20]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	4619      	mov	r1, r3
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 fab0 	bl	800bacc <sl_wfx_host_free_buffer>
 800b56c:	4603      	mov	r3, r0
  }
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 800b57c:	4b16      	ldr	r3, [pc, #88]	@ (800b5d8 <sl_wfx_host_init+0x60>)
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 800b582:	2203      	movs	r2, #3
 800b584:	2100      	movs	r1, #0
 800b586:	2001      	movs	r0, #1
 800b588:	f001 fddc 	bl	800d144 <xQueueGenericCreate>
 800b58c:	4603      	mov	r3, r0
 800b58e:	4a13      	ldr	r2, [pc, #76]	@ (800b5dc <sl_wfx_host_init+0x64>)
 800b590:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 800b592:	2203      	movs	r2, #3
 800b594:	2100      	movs	r1, #0
 800b596:	2001      	movs	r0, #1
 800b598:	f001 fdd4 	bl	800d144 <xQueueGenericCreate>
 800b59c:	4603      	mov	r3, r0
 800b59e:	4a10      	ldr	r2, [pc, #64]	@ (800b5e0 <sl_wfx_host_init+0x68>)
 800b5a0:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 800b5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e0 <sl_wfx_host_init+0x68>)
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	f001 fe52 	bl	800d254 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	f001 fdc5 	bl	800d144 <xQueueGenericCreate>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	4a09      	ldr	r2, [pc, #36]	@ (800b5e4 <sl_wfx_host_init+0x6c>)
 800b5be:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	f001 fdbd 	bl	800d144 <xQueueGenericCreate>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4a06      	ldr	r2, [pc, #24]	@ (800b5e8 <sl_wfx_host_init+0x70>)
 800b5ce:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20001428 	.word	0x20001428
 800b5dc:	20001424 	.word	0x20001424
 800b5e0:	20001420 	.word	0x20001420
 800b5e4:	2000141c 	.word	0x2000141c
 800b5e8:	20001418 	.word	0x20001418

0800b5ec <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 800b5f6:	4b09      	ldr	r3, [pc, #36]	@ (800b61c <sl_wfx_host_get_firmware_data+0x30>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a09      	ldr	r2, [pc, #36]	@ (800b620 <sl_wfx_host_get_firmware_data+0x34>)
 800b5fc:	441a      	add	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 800b602:	4b06      	ldr	r3, [pc, #24]	@ (800b61c <sl_wfx_host_get_firmware_data+0x30>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	4413      	add	r3, r2
 800b60a:	4a04      	ldr	r2, [pc, #16]	@ (800b61c <sl_wfx_host_get_firmware_data+0x30>)
 800b60c:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	20001428 	.word	0x20001428
 800b620:	080254f4 	.word	0x080254f4

0800b624 <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a04      	ldr	r2, [pc, #16]	@ (800b640 <sl_wfx_host_get_firmware_size+0x1c>)
 800b630:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	0004bc50 	.word	0x0004bc50

0800b644 <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 800b650:	4b0e      	ldr	r3, [pc, #56]	@ (800b68c <sl_wfx_host_get_pds_data+0x48>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800b658:	2206      	movs	r2, #6
 800b65a:	4619      	mov	r1, r3
 800b65c:	480c      	ldr	r0, [pc, #48]	@ (800b690 <sl_wfx_host_get_pds_data+0x4c>)
 800b65e:	f013 fc7b 	bl	801ef58 <strncmp>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 800b668:	887b      	ldrh	r3, [r7, #2]
 800b66a:	4a0a      	ldr	r2, [pc, #40]	@ (800b694 <sl_wfx_host_get_pds_data+0x50>)
 800b66c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	e005      	b.n	800b682 <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 800b676:	887b      	ldrh	r3, [r7, #2]
 800b678:	4a07      	ldr	r2, [pc, #28]	@ (800b698 <sl_wfx_host_get_pds_data+0x54>)
 800b67a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20000ae0 	.word	0x20000ae0
 800b690:	080221d0 	.word	0x080221d0
 800b694:	080254dc 	.word	0x080254dc
 800b698:	080254c4 	.word	0x080254c4

0800b69c <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 800b6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d4 <sl_wfx_host_get_pds_size+0x38>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4809      	ldr	r0, [pc, #36]	@ (800b6d8 <sl_wfx_host_get_pds_size+0x3c>)
 800b6b2:	f013 fc51 	bl	801ef58 <strncmp>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d103      	bne.n	800b6c4 <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2206      	movs	r2, #6
 800b6c0:	801a      	strh	r2, [r3, #0]
 800b6c2:	e002      	b.n	800b6ca <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2206      	movs	r2, #6
 800b6c8:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	20000ae0 	.word	0x20000ae0
 800b6d8:	080221d0 	.word	0x080221d0

0800b6dc <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 800b6dc:	b480      	push	{r7}
 800b6de:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	4808      	ldr	r0, [pc, #32]	@ (800b718 <sl_wfx_host_reset_chip+0x2c>)
 800b6f6:	f7fc faaf 	bl	8007c58 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800b6fa:	2064      	movs	r0, #100	@ 0x64
 800b6fc:	f7fb fad0 	bl	8006ca0 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 800b700:	2201      	movs	r2, #1
 800b702:	2101      	movs	r1, #1
 800b704:	4804      	ldr	r0, [pc, #16]	@ (800b718 <sl_wfx_host_reset_chip+0x2c>)
 800b706:	f7fc faa7 	bl	8007c58 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800b70a:	2064      	movs	r0, #100	@ 0x64
 800b70c:	f7fb fac8 	bl	8006ca0 <HAL_Delay>

  return SL_STATUS_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	40020800 	.word	0x40020800

0800b71c <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d006      	beq.n	800b73a <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 800b72c:	2201      	movs	r2, #1
 800b72e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b732:	4807      	ldr	r0, [pc, #28]	@ (800b750 <sl_wfx_host_set_wake_up_pin+0x34>)
 800b734:	f7fc fa90 	bl	8007c58 <HAL_GPIO_WritePin>
 800b738:	e005      	b.n	800b746 <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 800b73a:	2200      	movs	r2, #0
 800b73c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b740:	4803      	ldr	r0, [pc, #12]	@ (800b750 <sl_wfx_host_set_wake_up_pin+0x34>)
 800b742:	f7fc fa89 	bl	8007c58 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	40020400 	.word	0x40020400

0800b754 <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 800b758:	4b09      	ldr	r3, [pc, #36]	@ (800b780 <sl_wfx_host_wait_for_wake_up+0x2c>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2100      	movs	r1, #0
 800b75e:	4618      	mov	r0, r3
 800b760:	f002 f88a 	bl	800d878 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 800b764:	4b06      	ldr	r3, [pc, #24]	@ (800b780 <sl_wfx_host_wait_for_wake_up+0x2c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2103      	movs	r1, #3
 800b76a:	2200      	movs	r2, #0
 800b76c:	fbb1 f2f2 	udiv	r2, r1, r2
 800b770:	4611      	mov	r1, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f002 f880 	bl	800d878 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	2000141c 	.word	0x2000141c

0800b784 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	603a      	str	r2, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
 800b790:	460b      	mov	r3, r1
 800b792:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 800b794:	f640 3308 	movw	r3, #2824	@ 0xb08
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 800b7ae:	4a05      	ldr	r2, [pc, #20]	@ (800b7c4 <sl_wfx_host_setup_waited_event+0x20>)
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20001428 	.word	0x20001428

0800b7c8 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	e01b      	b.n	800b814 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 25) == pdTRUE) {
 800b7dc:	4b12      	ldr	r3, [pc, #72]	@ (800b828 <sl_wfx_host_wait_for_confirmation+0x60>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f107 0113 	add.w	r1, r7, #19
 800b7e4:	2219      	movs	r2, #25
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f001 ff64 	bl	800d6b4 <xQueueReceive>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10d      	bne.n	800b80e <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 800b7f2:	7cfb      	ldrb	r3, [r7, #19]
 800b7f4:	7bfa      	ldrb	r2, [r7, #15]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d109      	bne.n	800b80e <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d004      	beq.n	800b80a <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 800b800:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <sl_wfx_host_wait_for_confirmation+0x64>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	e007      	b.n	800b81e <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3301      	adds	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d3df      	bcc.n	800b7dc <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 800b81c:	2307      	movs	r3, #7
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20001418 	.word	0x20001418
 800b82c:	20000ae0 	.word	0x20000ae0

0800b830 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 f80d 	bl	800c858 <osDelay>
  
  return SL_STATUS_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08a      	sub	sp, #40	@ 0x28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	789b      	ldrb	r3, [r3, #2]
 800b854:	3bc3      	subs	r3, #195	@ 0xc3
 800b856:	2b21      	cmp	r3, #33	@ 0x21
 800b858:	f200 80f3 	bhi.w	800ba42 <sl_wfx_host_post_event+0x1fa>
 800b85c:	a201      	add	r2, pc, #4	@ (adr r2, 800b864 <sl_wfx_host_post_event+0x1c>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b8ed 	.word	0x0800b8ed
 800b868:	0800b8f5 	.word	0x0800b8f5
 800b86c:	0800b8fd 	.word	0x0800b8fd
 800b870:	0800ba43 	.word	0x0800ba43
 800b874:	0800b905 	.word	0x0800b905
 800b878:	0800ba43 	.word	0x0800ba43
 800b87c:	0800ba43 	.word	0x0800ba43
 800b880:	0800b90d 	.word	0x0800b90d
 800b884:	0800b923 	.word	0x0800b923
 800b888:	0800b92b 	.word	0x0800b92b
 800b88c:	0800b933 	.word	0x0800b933
 800b890:	0800b93b 	.word	0x0800b93b
 800b894:	0800b943 	.word	0x0800b943
 800b898:	0800ba43 	.word	0x0800ba43
 800b89c:	0800ba43 	.word	0x0800ba43
 800b8a0:	0800b94b 	.word	0x0800b94b
 800b8a4:	0800ba43 	.word	0x0800ba43
 800b8a8:	0800ba43 	.word	0x0800ba43
 800b8ac:	0800ba43 	.word	0x0800ba43
 800b8b0:	0800ba43 	.word	0x0800ba43
 800b8b4:	0800ba43 	.word	0x0800ba43
 800b8b8:	0800ba43 	.word	0x0800ba43
 800b8bc:	0800ba43 	.word	0x0800ba43
 800b8c0:	0800ba43 	.word	0x0800ba43
 800b8c4:	0800ba43 	.word	0x0800ba43
 800b8c8:	0800ba43 	.word	0x0800ba43
 800b8cc:	0800ba43 	.word	0x0800ba43
 800b8d0:	0800ba43 	.word	0x0800ba43
 800b8d4:	0800ba43 	.word	0x0800ba43
 800b8d8:	0800b953 	.word	0x0800b953
 800b8dc:	0800ba43 	.word	0x0800ba43
 800b8e0:	0800ba43 	.word	0x0800ba43
 800b8e4:	0800ba43 	.word	0x0800ba43
 800b8e8:	0800b9cf 	.word	0x0800b9cf
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fa41 	bl	800bd74 <sl_wfx_connect_callback>
      break;
 800b8f2:	e0a6      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fb4f 	bl	800bf98 <sl_wfx_disconnect_callback>
      break;
 800b8fa:	e0a2      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fb89 	bl	800c014 <sl_wfx_start_ap_callback>
      break;
 800b902:	e09e      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fbdf 	bl	800c0c8 <sl_wfx_stop_ap_callback>
      break;
 800b90a:	e09a      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	791b      	ldrb	r3, [r3, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 8093 	bne.w	800ba40 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f7fa f816 	bl	800594c <sl_wfx_host_received_frame_callback>
      }
      break;
 800b920:	e08e      	b.n	800ba40 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f92e 	bl	800bb84 <sl_wfx_scan_result_callback>
      break;
 800b928:	e08b      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f9ee 	bl	800bd0c <sl_wfx_scan_complete_callback>
      break;
 800b930:	e087      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fc04 	bl	800c140 <sl_wfx_ap_client_connected_callback>
      break;
 800b938:	e083      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fc3e 	bl	800c1bc <sl_wfx_ap_client_rejected_callback>
      break;
 800b940:	e07f      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fc70 	bl	800c228 <sl_wfx_ap_client_disconnected_callback>
      break;
 800b948:	e07b      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fca2 	bl	800c294 <sl_wfx_ext_auth_callback>
      break;
 800b950:	e077      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	4619      	mov	r1, r3
 800b960:	4849      	ldr	r0, [pc, #292]	@ (800ba88 <sl_wfx_host_post_event+0x240>)
 800b962:	f013 f987 	bl	801ec74 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 800b966:	2300      	movs	r3, #0
 800b968:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b96a:	e029      	b.n	800b9c0 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 800b96c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b96e:	4619      	mov	r1, r3
 800b970:	4846      	ldr	r0, [pc, #280]	@ (800ba8c <sl_wfx_host_post_event+0x244>)
 800b972:	f013 f97f 	bl	801ec74 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 800b976:	2300      	movs	r3, #0
 800b978:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800b97c:	e00d      	b.n	800b99a <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 800b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	4619      	mov	r1, r3
 800b984:	4842      	ldr	r0, [pc, #264]	@ (800ba90 <sl_wfx_host_post_event+0x248>)
 800b986:	f013 f975 	bl	801ec74 <iprintf>
            exception_tmp++;
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	3301      	adds	r3, #1
 800b98e:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 800b990:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b994:	3301      	adds	r3, #1
 800b996:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800b99a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b99e:	2b0f      	cmp	r3, #15
 800b9a0:	d808      	bhi.n	800b9b4 <sl_wfx_host_post_event+0x16c>
 800b9a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b9a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b9a8:	4413      	add	r3, r2
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	8812      	ldrh	r2, [r2, #0]
 800b9ae:	b292      	uxth	r2, r2
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	dbe4      	blt.n	800b97e <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 800b9b4:	4837      	ldr	r0, [pc, #220]	@ (800ba94 <sl_wfx_host_post_event+0x24c>)
 800b9b6:	f013 f9cd 	bl	801ed54 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 800b9ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b9bc:	3310      	adds	r3, #16
 800b9be:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d3cf      	bcc.n	800b96c <sl_wfx_host_post_event+0x124>
      }
      break;
 800b9cc:	e039      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	482e      	ldr	r0, [pc, #184]	@ (800ba98 <sl_wfx_host_post_event+0x250>)
 800b9de:	f013 f949 	bl	801ec74 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	837b      	strh	r3, [r7, #26]
 800b9e6:	e024      	b.n	800ba32 <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 800b9e8:	8b7b      	ldrh	r3, [r7, #26]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4827      	ldr	r0, [pc, #156]	@ (800ba8c <sl_wfx_host_post_event+0x244>)
 800b9ee:	f013 f941 	bl	801ec74 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	767b      	strb	r3, [r7, #25]
 800b9f6:	e00b      	b.n	800ba10 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4824      	ldr	r0, [pc, #144]	@ (800ba90 <sl_wfx_host_post_event+0x248>)
 800ba00:	f013 f938 	bl	801ec74 <iprintf>
            error_tmp++;
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	3301      	adds	r3, #1
 800ba08:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 800ba0a:	7e7b      	ldrb	r3, [r7, #25]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	767b      	strb	r3, [r7, #25]
 800ba10:	7e7b      	ldrb	r3, [r7, #25]
 800ba12:	2b0f      	cmp	r3, #15
 800ba14:	d807      	bhi.n	800ba26 <sl_wfx_host_post_event+0x1de>
 800ba16:	8b7a      	ldrh	r2, [r7, #26]
 800ba18:	7e7b      	ldrb	r3, [r7, #25]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	8812      	ldrh	r2, [r2, #0]
 800ba20:	b292      	uxth	r2, r2
 800ba22:	4293      	cmp	r3, r2
 800ba24:	dbe8      	blt.n	800b9f8 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 800ba26:	481b      	ldr	r0, [pc, #108]	@ (800ba94 <sl_wfx_host_post_event+0x24c>)
 800ba28:	f013 f994 	bl	801ed54 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800ba2c:	8b7b      	ldrh	r3, [r7, #26]
 800ba2e:	3310      	adds	r3, #16
 800ba30:	837b      	strh	r3, [r7, #26]
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	8b7a      	ldrh	r2, [r7, #26]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d3d4      	bcc.n	800b9e8 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 800ba3e:	e000      	b.n	800ba42 <sl_wfx_host_post_event+0x1fa>
      break;
 800ba40:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 800ba42:	4b16      	ldr	r3, [pc, #88]	@ (800ba9c <sl_wfx_host_post_event+0x254>)
 800ba44:	791a      	ldrb	r2, [r3, #4]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	789b      	ldrb	r3, [r3, #2]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d117      	bne.n	800ba7e <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba58:	d211      	bcs.n	800ba7e <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 800ba5a:	4b11      	ldr	r3, [pc, #68]	@ (800baa0 <sl_wfx_host_post_event+0x258>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 800ba66:	461a      	mov	r2, r3
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	f013 fb2a 	bl	801f0c2 <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 800ba6e:	4b0d      	ldr	r3, [pc, #52]	@ (800baa4 <sl_wfx_host_post_event+0x25c>)
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	1c99      	adds	r1, r3, #2
 800ba76:	2302      	movs	r3, #2
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f001 fbeb 	bl	800d254 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3728      	adds	r7, #40	@ 0x28
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	080221d8 	.word	0x080221d8
 800ba8c:	080221f4 	.word	0x080221f4
 800ba90:	08022200 	.word	0x08022200
 800ba94:	08022208 	.word	0x08022208
 800ba98:	0802220c 	.word	0x0802220c
 800ba9c:	20001428 	.word	0x20001428
 800baa0:	20000ae0 	.word	0x20000ae0
 800baa4:	20001418 	.word	0x20001418

0800baa8 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	460b      	mov	r3, r1
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f004 f8e8 	bl	800fc8c <pvPortMalloc>
 800babc:	4602      	mov	r2, r0
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f004 f9a5 	bl	800fe28 <vPortFree>
  
  return SL_STATUS_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7fe fb48 	bl	800a18a <sl_wfx_data_write>
 800bafa:	4603      	mov	r3, r0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 800bb04:	b40f      	push	{r0, r1, r2, r3}
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 800bb0c:	f107 0314 	add.w	r3, r7, #20
 800bb10:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	6938      	ldr	r0, [r7, #16]
 800bb16:	f013 f969 	bl	801edec <viprintf>
  va_end(valist);
}
 800bb1a:	bf00      	nop
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb24:	b004      	add	sp, #16
 800bb26:	4770      	bx	lr

0800bb28 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 800bb2e:	2307      	movs	r3, #7
 800bb30:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 800bb32:	4b0b      	ldr	r3, [pc, #44]	@ (800bb60 <sl_wfx_host_lock+0x38>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f001 fe9c 	bl	800d878 <xQueueSemaphoreTake>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d102      	bne.n	800bb4c <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	e004      	b.n	800bb56 <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 800bb4c:	4805      	ldr	r0, [pc, #20]	@ (800bb64 <sl_wfx_host_lock+0x3c>)
 800bb4e:	f013 f901 	bl	801ed54 <puts>
	      status = SL_STATUS_TIMEOUT;
 800bb52:	2307      	movs	r3, #7
 800bb54:	607b      	str	r3, [r7, #4]
	    }

  return status;
 800bb56:	687b      	ldr	r3, [r7, #4]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	20001420 	.word	0x20001420
 800bb64:	08022224 	.word	0x08022224

0800bb68 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 800bb6c:	4b04      	ldr	r3, [pc, #16]	@ (800bb80 <sl_wfx_host_unlock+0x18>)
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	2300      	movs	r3, #0
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	f001 fb6d 	bl	800d254 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20001420 	.word	0x20001420

0800bb84 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 800bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	b08a      	sub	sp, #40	@ 0x28
 800bb8a:	af08      	add	r7, sp, #32
 800bb8c:	6078      	str	r0, [r7, #4]
  scan_count++;
 800bb8e:	4b5b      	ldr	r3, [pc, #364]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	4b59      	ldr	r3, [pc, #356]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bb98:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 800bb9a:	4b59      	ldr	r3, [pc, #356]	@ (800bd00 <sl_wfx_scan_result_callback+0x17c>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d03e      	beq.n	800bc20 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 800bba2:	4b56      	ldr	r3, [pc, #344]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bbac:	b29b      	uxth	r3, r3
    printf(
 800bbae:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3330      	adds	r3, #48	@ 0x30
 800bbb4:	781b      	ldrb	r3, [r3, #0]
    printf(
 800bbb6:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	3bdc      	subs	r3, #220	@ 0xdc
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	b21b      	sxth	r3, r3
    printf(
 800bbc4:	0fda      	lsrs	r2, r3, #31
 800bbc6:	4413      	add	r3, r2
 800bbc8:	105b      	asrs	r3, r3, #1
 800bbca:	b21b      	sxth	r3, r3
 800bbcc:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    printf(
 800bbd4:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    printf(
 800bbdc:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    printf(
 800bbe4:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    printf(
 800bbec:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    printf(
 800bbf4:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    printf(
 800bbfc:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	3308      	adds	r3, #8
    printf(
 800bc02:	9307      	str	r3, [sp, #28]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	9306      	str	r3, [sp, #24]
 800bc08:	9605      	str	r6, [sp, #20]
 800bc0a:	9504      	str	r5, [sp, #16]
 800bc0c:	9403      	str	r4, [sp, #12]
 800bc0e:	9002      	str	r0, [sp, #8]
 800bc10:	9101      	str	r1, [sp, #4]
 800bc12:	9200      	str	r2, [sp, #0]
 800bc14:	4643      	mov	r3, r8
 800bc16:	4672      	mov	r2, lr
 800bc18:	4661      	mov	r1, ip
 800bc1a:	483a      	ldr	r0, [pc, #232]	@ (800bd04 <sl_wfx_scan_result_callback+0x180>)
 800bc1c:	f013 f82a 	bl	801ec74 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 800bc20:	4b36      	ldr	r3, [pc, #216]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b32      	cmp	r3, #50	@ 0x32
 800bc26:	d863      	bhi.n	800bcf0 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 800bc28:	4b34      	ldr	r3, [pc, #208]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	1e5a      	subs	r2, r3, #1
 800bc2e:	4936      	ldr	r1, [pc, #216]	@ (800bd08 <sl_wfx_scan_result_callback+0x184>)
 800bc30:	4613      	mov	r3, r2
 800bc32:	005b      	lsls	r3, r3, #1
 800bc34:	4413      	add	r3, r2
 800bc36:	011b      	lsls	r3, r3, #4
 800bc38:	1a9b      	subs	r3, r3, r2
 800bc3a:	18ca      	adds	r2, r1, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	4610      	mov	r0, r2
 800bc42:	f103 0420 	add.w	r4, r3, #32
 800bc46:	4602      	mov	r2, r0
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f8d1 c000 	ldr.w	ip, [r1]
 800bc4e:	684e      	ldr	r6, [r1, #4]
 800bc50:	688d      	ldr	r5, [r1, #8]
 800bc52:	68c9      	ldr	r1, [r1, #12]
 800bc54:	f8c2 c000 	str.w	ip, [r2]
 800bc58:	6056      	str	r6, [r2, #4]
 800bc5a:	6095      	str	r5, [r2, #8]
 800bc5c:	60d1      	str	r1, [r2, #12]
 800bc5e:	3310      	adds	r3, #16
 800bc60:	3010      	adds	r0, #16
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	d1ef      	bne.n	800bc46 <sl_wfx_scan_result_callback+0xc2>
 800bc66:	4602      	mov	r2, r0
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 800bc6c:	4b23      	ldr	r3, [pc, #140]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc76:	b298      	uxth	r0, r3
 800bc78:	4923      	ldr	r1, [pc, #140]	@ (800bd08 <sl_wfx_scan_result_callback+0x184>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4413      	add	r3, r2
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	1a9b      	subs	r3, r3, r2
 800bc84:	440b      	add	r3, r1
 800bc86:	332a      	adds	r3, #42	@ 0x2a
 800bc88:	4602      	mov	r2, r0
 800bc8a:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 800bc8c:	4b1b      	ldr	r3, [pc, #108]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	1e5a      	subs	r2, r3, #1
 800bc92:	491d      	ldr	r1, [pc, #116]	@ (800bd08 <sl_wfx_scan_result_callback+0x184>)
 800bc94:	4613      	mov	r3, r2
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	4413      	add	r3, r2
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	1a9b      	subs	r3, r3, r2
 800bc9e:	440b      	add	r3, r1
 800bca0:	332c      	adds	r3, #44	@ 0x2c
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800bca8:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 800bcaa:	4b14      	ldr	r3, [pc, #80]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	1e5a      	subs	r2, r3, #1
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800bcb4:	b298      	uxth	r0, r3
 800bcb6:	4914      	ldr	r1, [pc, #80]	@ (800bd08 <sl_wfx_scan_result_callback+0x184>)
 800bcb8:	4613      	mov	r3, r2
 800bcba:	005b      	lsls	r3, r3, #1
 800bcbc:	4413      	add	r3, r2
 800bcbe:	011b      	lsls	r3, r3, #4
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3328      	adds	r3, #40	@ 0x28
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 800bccc:	4b0b      	ldr	r3, [pc, #44]	@ (800bcfc <sl_wfx_scan_result_callback+0x178>)
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	1e5a      	subs	r2, r3, #1
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	4413      	add	r3, r2
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	1a9b      	subs	r3, r3, r2
 800bcdc:	3320      	adds	r3, #32
 800bcde:	4a0a      	ldr	r2, [pc, #40]	@ (800bd08 <sl_wfx_scan_result_callback+0x184>)
 800bce0:	4413      	add	r3, r2
 800bce2:	1d18      	adds	r0, r3, #4
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	3328      	adds	r3, #40	@ 0x28
 800bce8:	2206      	movs	r2, #6
 800bcea:	4619      	mov	r1, r3
 800bcec:	f013 f9e9 	bl	801f0c2 <memcpy>
  }
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20001416 	.word	0x20001416
 800bd00:	200000b5 	.word	0x200000b5
 800bd04:	08022240 	.word	0x08022240
 800bd08:	20000ae8 	.word	0x20000ae8

0800bd0c <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 800bd14:	4b14      	ldr	r3, [pc, #80]	@ (800bd68 <sl_wfx_scan_complete_callback+0x5c>)
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	4b14      	ldr	r3, [pc, #80]	@ (800bd6c <sl_wfx_scan_complete_callback+0x60>)
 800bd1a:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 800bd1c:	4b12      	ldr	r3, [pc, #72]	@ (800bd68 <sl_wfx_scan_complete_callback+0x5c>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800bd28:	461a      	mov	r2, r3
 800bd2a:	f107 0308 	add.w	r3, r7, #8
 800bd2e:	2101      	movs	r1, #1
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff feb9 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800bd36:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10f      	bne.n	800bd5e <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 800bd3e:	68b8      	ldr	r0, [r7, #8]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	461a      	mov	r2, r3
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	f013 f9ba 	bl	801f0c2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800bd4e:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <sl_wfx_scan_complete_callback+0x64>)
 800bd50:	6818      	ldr	r0, [r3, #0]
 800bd52:	f107 0108 	add.w	r1, r7, #8
 800bd56:	2300      	movs	r3, #0
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f001 fa7b 	bl	800d254 <xQueueGenericSend>
  }
}
 800bd5e:	bf00      	nop
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20001416 	.word	0x20001416
 800bd6c:	20001417 	.word	0x20001417
 800bd70:	20001430 	.word	0x20001430

0800bd74 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 800bd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	2b0a      	cmp	r3, #10
 800bd82:	f200 80d5 	bhi.w	800bf30 <sl_wfx_connect_callback+0x1bc>
 800bd86:	a201      	add	r2, pc, #4	@ (adr r2, 800bd8c <sl_wfx_connect_callback+0x18>)
 800bd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8c:	0800bdb9 	.word	0x0800bdb9
 800bd90:	0800bf31 	.word	0x0800bf31
 800bd94:	0800bf31 	.word	0x0800bf31
 800bd98:	0800bf31 	.word	0x0800bf31
 800bd9c:	0800bf31 	.word	0x0800bf31
 800bda0:	0800bf31 	.word	0x0800bf31
 800bda4:	0800be17 	.word	0x0800be17
 800bda8:	0800be5b 	.word	0x0800be5b
 800bdac:	0800be89 	.word	0x0800be89
 800bdb0:	0800beb7 	.word	0x0800beb7
 800bdb4:	0800bef3 	.word	0x0800bef3
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 800bdb8:	496b      	ldr	r1, [pc, #428]	@ (800bf68 <sl_wfx_connect_callback+0x1f4>)
 800bdba:	486c      	ldr	r0, [pc, #432]	@ (800bf6c <sl_wfx_connect_callback+0x1f8>)
 800bdbc:	f012 ff5a 	bl	801ec74 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 800bdc0:	4b6b      	ldr	r3, [pc, #428]	@ (800bf70 <sl_wfx_connect_callback+0x1fc>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800bdc8:	4b69      	ldr	r3, [pc, #420]	@ (800bf70 <sl_wfx_connect_callback+0x1fc>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f042 0202 	orr.w	r2, r2, #2
 800bdd0:	b2d2      	uxtb	r2, r2
 800bdd2:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 800bddc:	461a      	mov	r2, r3
 800bdde:	f107 0308 	add.w	r3, r7, #8
 800bde2:	2101      	movs	r1, #1
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff fe5f 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800bdea:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f040 80b5 	bne.w	800bf5e <sl_wfx_connect_callback+0x1ea>
        memcpy(buffer, (void *)connect, connect->header.length);
 800bdf4:	68b8      	ldr	r0, [r7, #8]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6879      	ldr	r1, [r7, #4]
 800be00:	f013 f95f 	bl	801f0c2 <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 800be04:	4b5b      	ldr	r3, [pc, #364]	@ (800bf74 <sl_wfx_connect_callback+0x200>)
 800be06:	6818      	ldr	r0, [r3, #0]
 800be08:	f107 0108 	add.w	r1, r7, #8
 800be0c:	2300      	movs	r3, #0
 800be0e:	2200      	movs	r2, #0
 800be10:	f001 fa20 	bl	800d254 <xQueueGenericSend>
      }
      break;
 800be14:	e0a3      	b.n	800bf5e <sl_wfx_connect_callback+0x1ea>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 800be16:	4b58      	ldr	r3, [pc, #352]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800be18:	4a58      	ldr	r2, [pc, #352]	@ (800bf7c <sl_wfx_connect_callback+0x208>)
 800be1a:	4614      	mov	r4, r2
 800be1c:	469c      	mov	ip, r3
 800be1e:	f104 0e20 	add.w	lr, r4, #32
 800be22:	4665      	mov	r5, ip
 800be24:	4626      	mov	r6, r4
 800be26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be28:	6028      	str	r0, [r5, #0]
 800be2a:	6069      	str	r1, [r5, #4]
 800be2c:	60aa      	str	r2, [r5, #8]
 800be2e:	60eb      	str	r3, [r5, #12]
 800be30:	3410      	adds	r4, #16
 800be32:	f10c 0c10 	add.w	ip, ip, #16
 800be36:	4574      	cmp	r4, lr
 800be38:	d1f3      	bne.n	800be22 <sl_wfx_connect_callback+0xae>
 800be3a:	4662      	mov	r2, ip
 800be3c:	4623      	mov	r3, r4
 800be3e:	cb03      	ldmia	r3!, {r0, r1}
 800be40:	6010      	str	r0, [r2, #0]
 800be42:	6051      	str	r1, [r2, #4]
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 800be48:	484b      	ldr	r0, [pc, #300]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800be4a:	f012 ff13 	bl	801ec74 <iprintf>
      printf("\r\n");
 800be4e:	484c      	ldr	r0, [pc, #304]	@ (800bf80 <sl_wfx_connect_callback+0x20c>)
 800be50:	f012 ff80 	bl	801ed54 <puts>
      wifi_autoconnexion_init();
 800be54:	f7f5 febc 	bl	8001bd0 <wifi_autoconnexion_init>
      break;
 800be58:	e082      	b.n	800bf60 <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 800be5a:	4a47      	ldr	r2, [pc, #284]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800be5c:	4b49      	ldr	r3, [pc, #292]	@ (800bf84 <sl_wfx_connect_callback+0x210>)
 800be5e:	4615      	mov	r5, r2
 800be60:	461c      	mov	r4, r3
 800be62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be64:	6028      	str	r0, [r5, #0]
 800be66:	6069      	str	r1, [r5, #4]
 800be68:	60aa      	str	r2, [r5, #8]
 800be6a:	60eb      	str	r3, [r5, #12]
 800be6c:	8823      	ldrh	r3, [r4, #0]
 800be6e:	78a2      	ldrb	r2, [r4, #2]
 800be70:	822b      	strh	r3, [r5, #16]
 800be72:	4613      	mov	r3, r2
 800be74:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800be76:	4840      	ldr	r0, [pc, #256]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800be78:	f012 fefc 	bl	801ec74 <iprintf>
      printf("\r\n");
 800be7c:	4840      	ldr	r0, [pc, #256]	@ (800bf80 <sl_wfx_connect_callback+0x20c>)
 800be7e:	f012 ff69 	bl	801ed54 <puts>
      wifi_autoconnexion_init();
 800be82:	f7f5 fea5 	bl	8001bd0 <wifi_autoconnexion_init>
      break;
 800be86:	e06b      	b.n	800bf60 <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 800be88:	4a3b      	ldr	r2, [pc, #236]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800be8a:	4b3f      	ldr	r3, [pc, #252]	@ (800bf88 <sl_wfx_connect_callback+0x214>)
 800be8c:	4615      	mov	r5, r2
 800be8e:	461c      	mov	r4, r3
 800be90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be92:	6028      	str	r0, [r5, #0]
 800be94:	6069      	str	r1, [r5, #4]
 800be96:	60aa      	str	r2, [r5, #8]
 800be98:	60eb      	str	r3, [r5, #12]
 800be9a:	8823      	ldrh	r3, [r4, #0]
 800be9c:	78a2      	ldrb	r2, [r4, #2]
 800be9e:	822b      	strh	r3, [r5, #16]
 800bea0:	4613      	mov	r3, r2
 800bea2:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800bea4:	4834      	ldr	r0, [pc, #208]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800bea6:	f012 fee5 	bl	801ec74 <iprintf>
      printf("\r\n");
 800beaa:	4835      	ldr	r0, [pc, #212]	@ (800bf80 <sl_wfx_connect_callback+0x20c>)
 800beac:	f012 ff52 	bl	801ed54 <puts>
      wifi_autoconnexion_init();
 800beb0:	f7f5 fe8e 	bl	8001bd0 <wifi_autoconnexion_init>
      break;
 800beb4:	e054      	b.n	800bf60 <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 800beb6:	4b30      	ldr	r3, [pc, #192]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800beb8:	4a34      	ldr	r2, [pc, #208]	@ (800bf8c <sl_wfx_connect_callback+0x218>)
 800beba:	4614      	mov	r4, r2
 800bebc:	469c      	mov	ip, r3
 800bebe:	f104 0e20 	add.w	lr, r4, #32
 800bec2:	4665      	mov	r5, ip
 800bec4:	4626      	mov	r6, r4
 800bec6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bec8:	6028      	str	r0, [r5, #0]
 800beca:	6069      	str	r1, [r5, #4]
 800becc:	60aa      	str	r2, [r5, #8]
 800bece:	60eb      	str	r3, [r5, #12]
 800bed0:	3410      	adds	r4, #16
 800bed2:	f10c 0c10 	add.w	ip, ip, #16
 800bed6:	4574      	cmp	r4, lr
 800bed8:	d1f3      	bne.n	800bec2 <sl_wfx_connect_callback+0x14e>
 800beda:	4662      	mov	r2, ip
 800bedc:	4623      	mov	r3, r4
 800bede:	cb03      	ldmia	r3!, {r0, r1}
 800bee0:	6010      	str	r0, [r2, #0]
 800bee2:	6051      	str	r1, [r2, #4]
      printf(event_log);
 800bee4:	4824      	ldr	r0, [pc, #144]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800bee6:	f012 fec5 	bl	801ec74 <iprintf>
      printf("\r\n");
 800beea:	4825      	ldr	r0, [pc, #148]	@ (800bf80 <sl_wfx_connect_callback+0x20c>)
 800beec:	f012 ff32 	bl	801ed54 <puts>
      break;
 800bef0:	e036      	b.n	800bf60 <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 800bef2:	4b21      	ldr	r3, [pc, #132]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800bef4:	4a26      	ldr	r2, [pc, #152]	@ (800bf90 <sl_wfx_connect_callback+0x21c>)
 800bef6:	4614      	mov	r4, r2
 800bef8:	469c      	mov	ip, r3
 800befa:	f104 0e20 	add.w	lr, r4, #32
 800befe:	4665      	mov	r5, ip
 800bf00:	4626      	mov	r6, r4
 800bf02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bf04:	6028      	str	r0, [r5, #0]
 800bf06:	6069      	str	r1, [r5, #4]
 800bf08:	60aa      	str	r2, [r5, #8]
 800bf0a:	60eb      	str	r3, [r5, #12]
 800bf0c:	3410      	adds	r4, #16
 800bf0e:	f10c 0c10 	add.w	ip, ip, #16
 800bf12:	4574      	cmp	r4, lr
 800bf14:	d1f3      	bne.n	800befe <sl_wfx_connect_callback+0x18a>
 800bf16:	4662      	mov	r2, ip
 800bf18:	4623      	mov	r3, r4
 800bf1a:	881b      	ldrh	r3, [r3, #0]
 800bf1c:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 800bf1e:	4816      	ldr	r0, [pc, #88]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800bf20:	f012 fea8 	bl	801ec74 <iprintf>
      printf("\r\n");
 800bf24:	4816      	ldr	r0, [pc, #88]	@ (800bf80 <sl_wfx_connect_callback+0x20c>)
 800bf26:	f012 ff15 	bl	801ed54 <puts>
      wifi_autoconnexion_init();
 800bf2a:	f7f5 fe51 	bl	8001bd0 <wifi_autoconnexion_init>
      break;
 800bf2e:	e017      	b.n	800bf60 <sl_wfx_connect_callback+0x1ec>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 800bf30:	4a11      	ldr	r2, [pc, #68]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800bf32:	4b18      	ldr	r3, [pc, #96]	@ (800bf94 <sl_wfx_connect_callback+0x220>)
 800bf34:	4615      	mov	r5, r2
 800bf36:	461c      	mov	r4, r3
 800bf38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf3a:	6028      	str	r0, [r5, #0]
 800bf3c:	6069      	str	r1, [r5, #4]
 800bf3e:	60aa      	str	r2, [r5, #8]
 800bf40:	60eb      	str	r3, [r5, #12]
 800bf42:	cc03      	ldmia	r4!, {r0, r1}
 800bf44:	6128      	str	r0, [r5, #16]
 800bf46:	6169      	str	r1, [r5, #20]
 800bf48:	7823      	ldrb	r3, [r4, #0]
 800bf4a:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 800bf4c:	480a      	ldr	r0, [pc, #40]	@ (800bf78 <sl_wfx_connect_callback+0x204>)
 800bf4e:	f012 fe91 	bl	801ec74 <iprintf>
      printf("\r\n");
 800bf52:	480b      	ldr	r0, [pc, #44]	@ (800bf80 <sl_wfx_connect_callback+0x20c>)
 800bf54:	f012 fefe 	bl	801ed54 <puts>
      wifi_autoconnexion_init();
 800bf58:	f7f5 fe3a 	bl	8001bd0 <wifi_autoconnexion_init>
    }
  }
}
 800bf5c:	e000      	b.n	800bf60 <sl_wfx_connect_callback+0x1ec>
      break;
 800bf5e:	bf00      	nop
}
 800bf60:	bf00      	nop
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf68:	08022278 	.word	0x08022278
 800bf6c:	08022288 	.word	0x08022288
 800bf70:	20000ae0 	.word	0x20000ae0
 800bf74:	20001430 	.word	0x20001430
 800bf78:	20000948 	.word	0x20000948
 800bf7c:	080222a4 	.word	0x080222a4
 800bf80:	08022208 	.word	0x08022208
 800bf84:	080222d0 	.word	0x080222d0
 800bf88:	080222e4 	.word	0x080222e4
 800bf8c:	080222f8 	.word	0x080222f8
 800bf90:	08022320 	.word	0x08022320
 800bf94:	08022344 	.word	0x08022344

0800bf98 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	895b      	ldrh	r3, [r3, #10]
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4817      	ldr	r0, [pc, #92]	@ (800c008 <sl_wfx_disconnect_callback+0x70>)
 800bfaa:	f012 fe63 	bl	801ec74 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 800bfae:	4b17      	ldr	r3, [pc, #92]	@ (800c00c <sl_wfx_disconnect_callback+0x74>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800bfb6:	4b15      	ldr	r3, [pc, #84]	@ (800c00c <sl_wfx_disconnect_callback+0x74>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f022 0202 	bic.w	r2, r2, #2
 800bfbe:	b2d2      	uxtb	r2, r2
 800bfc0:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f107 0308 	add.w	r3, r7, #8
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7ff fd68 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800bfd8:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10f      	bne.n	800c000 <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 800bfe0:	68b8      	ldr	r0, [r7, #8]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	f013 f869 	bl	801f0c2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800bff0:	4b07      	ldr	r3, [pc, #28]	@ (800c010 <sl_wfx_disconnect_callback+0x78>)
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	2300      	movs	r3, #0
 800bffa:	2200      	movs	r2, #0
 800bffc:	f001 f92a 	bl	800d254 <xQueueGenericSend>
  }
}
 800c000:	bf00      	nop
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	08022360 	.word	0x08022360
 800c00c:	20000ae0 	.word	0x20000ae0
 800c010:	20001430 	.word	0x20001430

0800c014 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 800c014:	b5b0      	push	{r4, r5, r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d130      	bne.n	800c086 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 800c024:	4820      	ldr	r0, [pc, #128]	@ (800c0a8 <sl_wfx_start_ap_callback+0x94>)
 800c026:	f012 fe95 	bl	801ed54 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 800c02a:	4920      	ldr	r1, [pc, #128]	@ (800c0ac <sl_wfx_start_ap_callback+0x98>)
 800c02c:	4820      	ldr	r0, [pc, #128]	@ (800c0b0 <sl_wfx_start_ap_callback+0x9c>)
 800c02e:	f012 fe21 	bl	801ec74 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 800c032:	4b20      	ldr	r3, [pc, #128]	@ (800c0b4 <sl_wfx_start_ap_callback+0xa0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800c03a:	4b1e      	ldr	r3, [pc, #120]	@ (800c0b4 <sl_wfx_start_ap_callback+0xa0>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f042 0204 	orr.w	r2, r2, #4
 800c042:	b2d2      	uxtb	r2, r2
 800c044:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 800c04e:	461a      	mov	r2, r3
 800c050:	f107 0308 	add.w	r3, r7, #8
 800c054:	2101      	movs	r1, #1
 800c056:	4618      	mov	r0, r3
 800c058:	f7ff fd26 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800c05c:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d11c      	bne.n	800c09e <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 800c064:	68b8      	ldr	r0, [r7, #8]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	461a      	mov	r2, r3
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	f013 f827 	bl	801f0c2 <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 800c074:	4b10      	ldr	r3, [pc, #64]	@ (800c0b8 <sl_wfx_start_ap_callback+0xa4>)
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	f107 0108 	add.w	r1, r7, #8
 800c07c:	2300      	movs	r3, #0
 800c07e:	2200      	movs	r2, #0
 800c080:	f001 f8e8 	bl	800d254 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 800c084:	e00b      	b.n	800c09e <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 800c086:	480d      	ldr	r0, [pc, #52]	@ (800c0bc <sl_wfx_start_ap_callback+0xa8>)
 800c088:	f012 fe64 	bl	801ed54 <puts>
    strcpy(event_log, "AP start failed");
 800c08c:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c0 <sl_wfx_start_ap_callback+0xac>)
 800c08e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c4 <sl_wfx_start_ap_callback+0xb0>)
 800c090:	4614      	mov	r4, r2
 800c092:	461d      	mov	r5, r3
 800c094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c096:	6020      	str	r0, [r4, #0]
 800c098:	6061      	str	r1, [r4, #4]
 800c09a:	60a2      	str	r2, [r4, #8]
 800c09c:	60e3      	str	r3, [r4, #12]
}
 800c09e:	bf00      	nop
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	08022374 	.word	0x08022374
 800c0ac:	20000074 	.word	0x20000074
 800c0b0:	08022380 	.word	0x08022380
 800c0b4:	20000ae0 	.word	0x20000ae0
 800c0b8:	20001430 	.word	0x20001430
 800c0bc:	0802239c 	.word	0x0802239c
 800c0c0:	20000948 	.word	0x20000948
 800c0c4:	080223b0 	.word	0x080223b0

0800c0c8 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 800c0d0:	4818      	ldr	r0, [pc, #96]	@ (800c134 <sl_wfx_stop_ap_callback+0x6c>)
 800c0d2:	f012 fe3f 	bl	801ed54 <puts>
  dhcpserver_clear_stored_mac();
 800c0d6:	f7f8 fc03 	bl	80048e0 <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 800c0da:	4b17      	ldr	r3, [pc, #92]	@ (800c138 <sl_wfx_stop_ap_callback+0x70>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800c0e2:	4b15      	ldr	r3, [pc, #84]	@ (800c138 <sl_wfx_stop_ap_callback+0x70>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0204 	bic.w	r2, r2, #4
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff fcd2 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800c104:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10f      	bne.n	800c12c <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 800c10c:	68b8      	ldr	r0, [r7, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	b29b      	uxth	r3, r3
 800c114:	461a      	mov	r2, r3
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	f012 ffd3 	bl	801f0c2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800c11c:	4b07      	ldr	r3, [pc, #28]	@ (800c13c <sl_wfx_stop_ap_callback+0x74>)
 800c11e:	6818      	ldr	r0, [r3, #0]
 800c120:	f107 0108 	add.w	r1, r7, #8
 800c124:	2300      	movs	r3, #0
 800c126:	2200      	movs	r2, #0
 800c128:	f001 f894 	bl	800d254 <xQueueGenericSend>
  }
}
 800c12c:	bf00      	nop
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	080223c0 	.word	0x080223c0
 800c138:	20000ae0 	.word	0x20000ae0
 800c13c:	20001430 	.word	0x20001430

0800c140 <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 800c140:	b5b0      	push	{r4, r5, r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af04      	add	r7, sp, #16
 800c146:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c14c:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c152:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c158:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c15e:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c164:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c16a:	9302      	str	r3, [sp, #8]
 800c16c:	9101      	str	r1, [sp, #4]
 800c16e:	9200      	str	r2, [sp, #0]
 800c170:	462b      	mov	r3, r5
 800c172:	4622      	mov	r2, r4
 800c174:	4601      	mov	r1, r0
 800c176:	480b      	ldr	r0, [pc, #44]	@ (800c1a4 <sl_wfx_ap_client_connected_callback+0x64>)
 800c178:	f012 fd7c 	bl	801ec74 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 800c17c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a8 <sl_wfx_ap_client_connected_callback+0x68>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	4619      	mov	r1, r3
 800c182:	4b0a      	ldr	r3, [pc, #40]	@ (800c1ac <sl_wfx_ap_client_connected_callback+0x6c>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	4b09      	ldr	r3, [pc, #36]	@ (800c1b0 <sl_wfx_ap_client_connected_callback+0x70>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	4618      	mov	r0, r3
 800c18e:	4b09      	ldr	r3, [pc, #36]	@ (800c1b4 <sl_wfx_ap_client_connected_callback+0x74>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	4603      	mov	r3, r0
 800c196:	4808      	ldr	r0, [pc, #32]	@ (800c1b8 <sl_wfx_ap_client_connected_callback+0x78>)
 800c198:	f012 fd6c 	bl	801ec74 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c1a4:	080223d0 	.word	0x080223d0
 800c1a8:	200000a2 	.word	0x200000a2
 800c1ac:	200000a3 	.word	0x200000a3
 800c1b0:	200000a4 	.word	0x200000a4
 800c1b4:	200000a5 	.word	0x200000a5
 800c1b8:	08022408 	.word	0x08022408

0800c1bc <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 800c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1be:	b089      	sub	sp, #36	@ 0x24
 800c1c0:	af04      	add	r7, sp, #16
 800c1c2:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	1d1a      	adds	r2, r3, #4
 800c1c8:	f107 0308 	add.w	r3, r7, #8
 800c1cc:	6810      	ldr	r0, [r2, #0]
 800c1ce:	6018      	str	r0, [r3, #0]
 800c1d0:	8892      	ldrh	r2, [r2, #4]
 800c1d2:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800c1d4:	f107 0308 	add.w	r3, r7, #8
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7f8 f9c3 	bl	8004564 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	895b      	ldrh	r3, [r3, #10]
 800c1e2:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c1e4:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c1ea:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c1f0:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c1f6:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c1fc:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c202:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c208:	9303      	str	r3, [sp, #12]
 800c20a:	9002      	str	r0, [sp, #8]
 800c20c:	9101      	str	r1, [sp, #4]
 800c20e:	9200      	str	r2, [sp, #0]
 800c210:	4633      	mov	r3, r6
 800c212:	462a      	mov	r2, r5
 800c214:	4621      	mov	r1, r4
 800c216:	4803      	ldr	r0, [pc, #12]	@ (800c224 <sl_wfx_ap_client_rejected_callback+0x68>)
 800c218:	f012 fd2c 	bl	801ec74 <iprintf>
}
 800c21c:	bf00      	nop
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c224:	0802243c 	.word	0x0802243c

0800c228 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 800c228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22a:	b089      	sub	sp, #36	@ 0x24
 800c22c:	af04      	add	r7, sp, #16
 800c22e:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	f107 0308 	add.w	r3, r7, #8
 800c238:	6810      	ldr	r0, [r2, #0]
 800c23a:	6018      	str	r0, [r3, #0]
 800c23c:	8892      	ldrh	r2, [r2, #4]
 800c23e:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800c240:	f107 0308 	add.w	r3, r7, #8
 800c244:	4618      	mov	r0, r3
 800c246:	f7f8 f98d 	bl	8004564 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	895b      	ldrh	r3, [r3, #10]
 800c24e:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c250:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c256:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c25c:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c262:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c268:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c26e:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c274:	9303      	str	r3, [sp, #12]
 800c276:	9002      	str	r0, [sp, #8]
 800c278:	9101      	str	r1, [sp, #4]
 800c27a:	9200      	str	r2, [sp, #0]
 800c27c:	4633      	mov	r3, r6
 800c27e:	462a      	mov	r2, r5
 800c280:	4621      	mov	r1, r4
 800c282:	4803      	ldr	r0, [pc, #12]	@ (800c290 <sl_wfx_ap_client_disconnected_callback+0x68>)
 800c284:	f012 fcf6 	bl	801ec74 <iprintf>
}
 800c288:	bf00      	nop
 800c28a:	3714      	adds	r7, #20
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c290:	08022480 	.word	0x08022480

0800c294 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f107 0308 	add.w	r3, r7, #8
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff fbfc 	bl	800baa8 <sl_wfx_host_allocate_buffer>
 800c2b0:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10f      	bne.n	800c2d8 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 800c2b8:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	b29b      	uxth	r3, r3
    memcpy(buffer,
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	f012 fefd 	bl	801f0c2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800c2c8:	4b05      	ldr	r3, [pc, #20]	@ (800c2e0 <sl_wfx_ext_auth_callback+0x4c>)
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	f107 0108 	add.w	r1, r7, #8
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f000 ffbe 	bl	800d254 <xQueueGenericSend>
  }
}
 800c2d8:	bf00      	nop
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	20001430 	.word	0x20001430

0800c2e4 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 800c2e4:	b5b0      	push	{r4, r5, r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 800c2ea:	2203      	movs	r2, #3
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	f000 ff28 	bl	800d144 <xQueueGenericCreate>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c32c <wifi_events_start+0x48>)
 800c2f8:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c330 <wifi_events_start+0x4c>)
 800c2fc:	1d3c      	adds	r4, r7, #4
 800c2fe:	461d      	mov	r5, r3
 800c300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 800c308:	1d3b      	adds	r3, r7, #4
 800c30a:	2100      	movs	r1, #0
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fa70 	bl	800c7f2 <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 800c312:	2200      	movs	r2, #0
 800c314:	2104      	movs	r1, #4
 800c316:	200a      	movs	r0, #10
 800c318:	f000 ff14 	bl	800d144 <xQueueGenericCreate>
 800c31c:	4603      	mov	r3, r0
 800c31e:	4a05      	ldr	r2, [pc, #20]	@ (800c334 <wifi_events_start+0x50>)
 800c320:	6013      	str	r3, [r2, #0]
}
 800c322:	bf00      	nop
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bdb0      	pop	{r4, r5, r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20001434 	.word	0x20001434
 800c330:	080224d4 	.word	0x080224d4
 800c334:	20001430 	.word	0x20001430

0800c338 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800c340:	4b22      	ldr	r3, [pc, #136]	@ (800c3cc <wifi_events_task_entry+0x94>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f107 0108 	add.w	r1, r7, #8
 800c348:	f04f 32ff 	mov.w	r2, #4294967295
 800c34c:	4618      	mov	r0, r3
 800c34e:	f001 f9b1 	bl	800d6b4 <xQueueReceive>
 800c352:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b01      	cmp	r3, #1
 800c358:	d1f2      	bne.n	800c340 <wifi_events_task_entry+0x8>
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0ef      	beq.n	800c340 <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	789b      	ldrb	r3, [r3, #2]
 800c364:	3bc3      	subs	r3, #195	@ 0xc3
 800c366:	2b09      	cmp	r3, #9
 800c368:	d82a      	bhi.n	800c3c0 <wifi_events_task_entry+0x88>
 800c36a:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <wifi_events_task_entry+0x38>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c399 	.word	0x0800c399
 800c374:	0800c39f 	.word	0x0800c39f
 800c378:	0800c3a5 	.word	0x0800c3a5
 800c37c:	0800c3c1 	.word	0x0800c3c1
 800c380:	0800c3ab 	.word	0x0800c3ab
 800c384:	0800c3c1 	.word	0x0800c3c1
 800c388:	0800c3c1 	.word	0x0800c3c1
 800c38c:	0800c3c1 	.word	0x0800c3c1
 800c390:	0800c3c1 	.word	0x0800c3c1
 800c394:	0800c3b1 	.word	0x0800c3b1
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 800c398:	f7f9 fb64 	bl	8005a64 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800c39c:	e010      	b.n	800c3c0 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 800c39e:	f7f9 fb7f 	bl	8005aa0 <lwip_set_sta_link_down>
          break;
 800c3a2:	e00d      	b.n	800c3c0 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 800c3a4:	f7f9 fb9a 	bl	8005adc <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 800c3a8:	e00a      	b.n	800c3c0 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 800c3aa:	f7f9 fbad 	bl	8005b08 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800c3ae:	e007      	b.n	800c3c0 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 800c3b0:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <wifi_events_task_entry+0x98>)
 800c3b2:	6818      	ldr	r0, [r3, #0]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	f000 ff4b 	bl	800d254 <xQueueGenericSend>
          break;
 800c3be:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff fb81 	bl	800bacc <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800c3ca:	e7b9      	b.n	800c340 <wifi_events_task_entry+0x8>
 800c3cc:	20001430 	.word	0x20001430
 800c3d0:	20001424 	.word	0x20001424

0800c3d4 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 800c3d8:	f000 f8a8 	bl	800c52c <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 800c3dc:	2203      	movs	r2, #3
 800c3de:	2100      	movs	r1, #0
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	f000 feaf 	bl	800d144 <xQueueGenericCreate>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	4a05      	ldr	r2, [pc, #20]	@ (800c400 <sl_wfx_host_init_bus+0x2c>)
 800c3ea:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 800c3ec:	4b04      	ldr	r3, [pc, #16]	@ (800c400 <sl_wfx_host_init_bus+0x2c>)
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	f000 ff2d 	bl	800d254 <xQueueGenericSend>
  return SL_STATUS_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20001550 	.word	0x20001550

0800c404 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 800c408:	4b04      	ldr	r3, [pc, #16]	@ (800c41c <sl_wfx_host_deinit_bus+0x18>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 facd 	bl	800c9ac <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 800c412:	f000 f8c1 	bl	800c598 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20001550 	.word	0x20001550

0800c420 <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 800c424:	2200      	movs	r2, #0
 800c426:	2110      	movs	r1, #16
 800c428:	4802      	ldr	r0, [pc, #8]	@ (800c434 <sl_wfx_host_spi_cs_assert+0x14>)
 800c42a:	f7fb fc15 	bl	8007c58 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	bd80      	pop	{r7, pc}
 800c434:	40020000 	.word	0x40020000

0800c438 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 800c43c:	2201      	movs	r2, #1
 800c43e:	2110      	movs	r1, #16
 800c440:	4802      	ldr	r0, [pc, #8]	@ (800c44c <sl_wfx_host_spi_cs_deassert+0x14>)
 800c442:	f7fb fc09 	bl	8007c58 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	40020000 	.word	0x40020000

0800c450 <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	60b9      	str	r1, [r7, #8]
 800c458:	607b      	str	r3, [r7, #4]
 800c45a:	4603      	mov	r3, r0
 800c45c:	73fb      	strb	r3, [r7, #15]
 800c45e:	4613      	mov	r3, r2
 800c460:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 800c462:	2301      	movs	r3, #1
 800c464:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	2b02      	cmp	r3, #2
 800c46a:	bf0c      	ite	eq
 800c46c:	2301      	moveq	r3, #1
 800c46e:	2300      	movne	r3, #0
 800c470:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800c472:	4b21      	ldr	r3, [pc, #132]	@ (800c4f8 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f04f 31ff 	mov.w	r1, #4294967295
 800c47a:	4618      	mov	r0, r3
 800c47c:	f001 f9fc 	bl	800d878 <xQueueSemaphoreTake>
 800c480:	4603      	mov	r3, r0
 800c482:	2b01      	cmp	r3, #1
 800c484:	d120      	bne.n	800c4c8 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 800c486:	89ba      	ldrh	r2, [r7, #12]
 800c488:	2301      	movs	r3, #1
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	481b      	ldr	r0, [pc, #108]	@ (800c4fc <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800c48e:	f7fc f96a 	bl	8008766 <HAL_SPI_Transmit>
    if (is_read) {
 800c492:	7cfb      	ldrb	r3, [r7, #19]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00b      	beq.n	800c4b0 <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 800c498:	8c3b      	ldrh	r3, [r7, #32]
 800c49a:	461a      	mov	r2, r3
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	4817      	ldr	r0, [pc, #92]	@ (800c4fc <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800c4a0:	f7fc fb54 	bl	8008b4c <HAL_SPI_Receive_DMA>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d110      	bne.n	800c4cc <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e00d      	b.n	800c4cc <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 800c4b0:	8c3b      	ldrh	r3, [r7, #32]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	6879      	ldr	r1, [r7, #4]
 800c4b6:	4811      	ldr	r0, [pc, #68]	@ (800c4fc <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800c4b8:	f7fc fa92 	bl	80089e0 <HAL_SPI_Transmit_DMA>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d104      	bne.n	800c4cc <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	e001      	b.n	800c4cc <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 800c4c8:	2307      	movs	r3, #7
 800c4ca:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f04f 31ff 	mov.w	r1, #4294967295
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f001 f9cf 	bl	800d878 <xQueueSemaphoreTake>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d106      	bne.n	800c4ee <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 800c4e0:	4b05      	ldr	r3, [pc, #20]	@ (800c4f8 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800c4e2:	6818      	ldr	r0, [r3, #0]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f000 feb3 	bl	800d254 <xQueueGenericSend>
  }

  return result;
 800c4ee:	697b      	ldr	r3, [r7, #20]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20001550 	.word	0x20001550
 800c4fc:	20001438 	.word	0x20001438

0800c500 <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800c504:	2200      	movs	r2, #0
 800c506:	210a      	movs	r1, #10
 800c508:	2028      	movs	r0, #40	@ 0x28
 800c50a:	f7fa fcec 	bl	8006ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c50e:	2028      	movs	r0, #40	@ 0x28
 800c510:	f7fa fd05 	bl	8006f1e <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	bd80      	pop	{r7, pc}

0800c51a <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 800c51a:	b580      	push	{r7, lr}
 800c51c:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800c51e:	2028      	movs	r0, #40	@ 0x28
 800c520:	f7fa fd0b 	bl	8006f3a <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c530:	4b17      	ldr	r3, [pc, #92]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c532:	4a18      	ldr	r2, [pc, #96]	@ (800c594 <MX_SPI1_Init+0x68>)
 800c534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c536:	4b16      	ldr	r3, [pc, #88]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c538:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c53c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c53e:	4b14      	ldr	r3, [pc, #80]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c540:	2200      	movs	r2, #0
 800c542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c544:	4b12      	ldr	r3, [pc, #72]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c546:	2200      	movs	r2, #0
 800c548:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c54a:	4b11      	ldr	r3, [pc, #68]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c550:	4b0f      	ldr	r3, [pc, #60]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c552:	2200      	movs	r2, #0
 800c554:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c556:	4b0e      	ldr	r3, [pc, #56]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c55c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c55e:	4b0c      	ldr	r3, [pc, #48]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c560:	2200      	movs	r2, #0
 800c562:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c564:	4b0a      	ldr	r3, [pc, #40]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c566:	2200      	movs	r2, #0
 800c568:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c56a:	4b09      	ldr	r3, [pc, #36]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c570:	4b07      	ldr	r3, [pc, #28]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c572:	2200      	movs	r2, #0
 800c574:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c576:	4b06      	ldr	r3, [pc, #24]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c578:	220a      	movs	r2, #10
 800c57a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c57c:	4804      	ldr	r0, [pc, #16]	@ (800c590 <MX_SPI1_Init+0x64>)
 800c57e:	f7fc f841 	bl	8008604 <HAL_SPI_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c588:	f7f9 fe60 	bl	800624c <Error_Handler>
  }
}
 800c58c:	bf00      	nop
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20001438 	.word	0x20001438
 800c594:	40013000 	.word	0x40013000

0800c598 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 800c59c:	4805      	ldr	r0, [pc, #20]	@ (800c5b4 <MX_SPI1_DeInit+0x1c>)
 800c59e:	f7fa fdb1 	bl	8007104 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 800c5a2:	4805      	ldr	r0, [pc, #20]	@ (800c5b8 <MX_SPI1_DeInit+0x20>)
 800c5a4:	f7fa fdae 	bl	8007104 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 800c5a8:	4804      	ldr	r0, [pc, #16]	@ (800c5bc <MX_SPI1_DeInit+0x24>)
 800c5aa:	f7fc f8b4 	bl	8008716 <HAL_SPI_DeInit>
}
 800c5ae:	bf00      	nop
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	200014f0 	.word	0x200014f0
 800c5b8:	20001490 	.word	0x20001490
 800c5bc:	20001438 	.word	0x20001438

0800c5c0 <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 800c5c0:	b5b0      	push	{r4, r5, r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 800c5c6:	f000 fafa 	bl	800cbbe <xEventGroupCreate>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	4a10      	ldr	r2, [pc, #64]	@ (800c610 <sl_wfx_task_start+0x50>)
 800c5ce:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 800c5d0:	2001      	movs	r0, #1
 800c5d2:	f000 fe27 	bl	800d224 <xQueueCreateMutex>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c614 <sl_wfx_task_start+0x54>)
 800c5da:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 800c5dc:	4b0e      	ldr	r3, [pc, #56]	@ (800c618 <sl_wfx_task_start+0x58>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 800c5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c618 <sl_wfx_task_start+0x58>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c61c <sl_wfx_task_start+0x5c>)
 800c5ea:	1d3c      	adds	r4, r7, #4
 800c5ec:	461d      	mov	r5, r3
 800c5ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 800c5f6:	1d3b      	adds	r3, r7, #4
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 f8f9 	bl	800c7f2 <osThreadCreate>
 800c600:	4603      	mov	r3, r0
 800c602:	4a07      	ldr	r2, [pc, #28]	@ (800c620 <sl_wfx_task_start+0x60>)
 800c604:	6013      	str	r3, [r2, #0]

}
 800c606:	bf00      	nop
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bdb0      	pop	{r4, r5, r7, pc}
 800c60e:	bf00      	nop
 800c610:	20001558 	.word	0x20001558
 800c614:	2000155c 	.word	0x2000155c
 800c618:	20001560 	.word	0x20001560
 800c61c:	080224f4 	.word	0x080224f4
 800c620:	20001554 	.word	0x20001554

0800c624 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af02      	add	r7, sp, #8
 800c62a:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800c630:	4b0d      	ldr	r3, [pc, #52]	@ (800c668 <sl_wfx_task_entry+0x44>)
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	f04f 33ff 	mov.w	r3, #4294967295
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	2300      	movs	r3, #0
 800c63c:	2201      	movs	r2, #1
 800c63e:	2103      	movs	r1, #3
 800c640:	f000 fad4 	bl	800cbec <xEventGroupWaitBits>
 800c644:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 800c650:	f000 f834 	bl	800c6bc <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f003 0302 	and.w	r3, r3, #2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0e8      	beq.n	800c630 <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 800c65e:	89fb      	ldrh	r3, [r7, #14]
 800c660:	4618      	mov	r0, r3
 800c662:	f000 f803 	bl	800c66c <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800c666:	e7e3      	b.n	800c630 <sl_wfx_task_entry+0xc>
 800c668:	20001558 	.word	0x20001558

0800c66c <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 800c676:	f7ff ff50 	bl	800c51a <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 800c67a:	1dbb      	adds	r3, r7, #6
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe fa71 	bl	800ab64 <sl_wfx_receive_frame>
 800c682:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 800c68a:	f7ff ff39 	bl	800c500 <sl_wfx_host_enable_platform_interrupt>
 800c68e:	e00d      	b.n	800c6ac <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 800c690:	88fb      	ldrh	r3, [r7, #6]
 800c692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 800c69a:	4b07      	ldr	r3, [pc, #28]	@ (800c6b8 <sl_wfx_rx_process+0x4c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2102      	movs	r1, #2
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 fb75 	bl	800cd90 <xEventGroupSetBits>
 800c6a6:	e001      	b.n	800c6ac <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 800c6a8:	f7ff ff2a 	bl	800c500 <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20001558 	.word	0x20001558

0800c6bc <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 800c6c2:	4b28      	ldr	r3, [pc, #160]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 800c6ca:	231b      	movs	r3, #27
 800c6cc:	e045      	b.n	800c75a <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 800c6ce:	4b26      	ldr	r3, [pc, #152]	@ (800c768 <sl_wfx_tx_process+0xac>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f04f 31ff 	mov.w	r1, #4294967295
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f001 f8ce 	bl	800d878 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800c6dc:	4b21      	ldr	r3, [pc, #132]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 800c6e4:	4b1f      	ldr	r3, [pc, #124]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800c6e8:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 800c6ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800c6ee:	791a      	ldrb	r2, [r3, #4]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f7fe f8f3 	bl	800a8dc <sl_wfx_send_ethernet_frame>
 800c6f6:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00e      	beq.n	800c71c <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 800c6fe:	4b1b      	ldr	r3, [pc, #108]	@ (800c76c <sl_wfx_tx_process+0xb0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2101      	movs	r1, #1
 800c704:	4618      	mov	r0, r3
 800c706:	f000 fb43 	bl	800cd90 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800c70a:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <sl_wfx_tx_process+0xac>)
 800c70c:	6818      	ldr	r0, [r3, #0]
 800c70e:	2300      	movs	r3, #0
 800c710:	2200      	movs	r2, #0
 800c712:	2100      	movs	r1, #0
 800c714:	f000 fd9e 	bl	800d254 <xQueueGenericSend>
    return SL_STATUS_FULL;
 800c718:	231c      	movs	r3, #28
 800c71a:	e01e      	b.n	800c75a <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 800c71c:	4b11      	ldr	r3, [pc, #68]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 800c722:	4b10      	ldr	r3, [pc, #64]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a0e      	ldr	r2, [pc, #56]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c72a:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 800c72c:	2200      	movs	r2, #0
 800c72e:	214a      	movs	r1, #74	@ 0x4a
 800c730:	6838      	ldr	r0, [r7, #0]
 800c732:	f7fe ff0f 	bl	800b554 <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 800c736:	4b0b      	ldr	r3, [pc, #44]	@ (800c764 <sl_wfx_tx_process+0xa8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d005      	beq.n	800c74a <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 800c73e:	4b0b      	ldr	r3, [pc, #44]	@ (800c76c <sl_wfx_tx_process+0xb0>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2101      	movs	r1, #1
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fb23 	bl	800cd90 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800c74a:	4b07      	ldr	r3, [pc, #28]	@ (800c768 <sl_wfx_tx_process+0xac>)
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	2200      	movs	r2, #0
 800c752:	2100      	movs	r1, #0
 800c754:	f000 fd7e 	bl	800d254 <xQueueGenericSend>

  return result;
 800c758:	687b      	ldr	r3, [r7, #4]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20001560 	.word	0x20001560
 800c768:	2000155c 	.word	0x2000155c
 800c76c:	20001558 	.word	0x20001558

0800c770 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c77a:	2300      	movs	r3, #0
 800c77c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c77e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c782:	2b84      	cmp	r3, #132	@ 0x84
 800c784:	d005      	beq.n	800c792 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c786:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4413      	add	r3, r2
 800c78e:	3303      	adds	r3, #3
 800c790:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c792:	68fb      	ldr	r3, [r7, #12]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7a6:	f3ef 8305 	mrs	r3, IPSR
 800c7aa:	607b      	str	r3, [r7, #4]
  return(result);
 800c7ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	bf14      	ite	ne
 800c7b2:	2301      	movne	r3, #1
 800c7b4:	2300      	moveq	r3, #0
 800c7b6:	b2db      	uxtb	r3, r3
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c7c8:	f001 fdb2 	bl	800e330 <vTaskStartScheduler>
  
  return osOK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c7d6:	f7ff ffe3 	bl	800c7a0 <inHandlerMode>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c7e0:	f001 feb0 	bl	800e544 <xTaskGetTickCountFromISR>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	e002      	b.n	800c7ee <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c7e8:	f001 fe9c 	bl	800e524 <xTaskGetTickCount>
 800c7ec:	4603      	mov	r3, r0
  }
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7f4:	b087      	sub	sp, #28
 800c7f6:	af02      	add	r7, sp, #8
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685c      	ldr	r4, [r3, #4]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c808:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff ffad 	bl	800c770 <makeFreeRtosPriority>
 800c816:	4602      	mov	r2, r0
 800c818:	f107 030c 	add.w	r3, r7, #12
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	9200      	str	r2, [sp, #0]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	4632      	mov	r2, r6
 800c824:	4629      	mov	r1, r5
 800c826:	4620      	mov	r0, r4
 800c828:	f001 fb88 	bl	800df3c <xTaskCreate>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d001      	beq.n	800c836 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	e000      	b.n	800c838 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c836:	68fb      	ldr	r3, [r7, #12]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c840 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f001 fcab 	bl	800e1a4 <vTaskDelete>
  return osOK;
 800c84e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	fbb3 f3f2 	udiv	r3, r3, r2
 800c868:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <osDelay+0x1c>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	e000      	b.n	800c876 <osDelay+0x1e>
 800c874:	2301      	movs	r3, #1
 800c876:	4618      	mov	r0, r3
 800c878:	f001 fd24 	bl	800e2c4 <vTaskDelay>
  
  return osOK;
 800c87c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b082      	sub	sp, #8
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800c88e:	2001      	movs	r0, #1
 800c890:	f000 fcc8 	bl	800d224 <xQueueCreateMutex>
 800c894:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <osMutexWait+0x18>
    return osErrorParameter;
 800c8b4:	2380      	movs	r3, #128	@ 0x80
 800c8b6:	e03d      	b.n	800c934 <osMutexWait+0x94>
  }
  
  ticks = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c2:	d103      	bne.n	800c8cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	e00c      	b.n	800c8e6 <osMutexWait+0x46>
  }
  else if (millisec != 0) {
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d009      	beq.n	800c8e6 <osMutexWait+0x46>
    ticks = millisec / portTICK_PERIOD_MS;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <osMutexWait+0x46>
      ticks = 1;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c8e6:	f7ff ff5b 	bl	800c7a0 <inHandlerMode>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d017      	beq.n	800c920 <osMutexWait+0x80>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c8f0:	f107 0308 	add.w	r3, r7, #8
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f001 f8cd 	bl	800da98 <xQueueReceiveFromISR>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b01      	cmp	r3, #1
 800c902:	d001      	beq.n	800c908 <osMutexWait+0x68>
      return osErrorOS;
 800c904:	23ff      	movs	r3, #255	@ 0xff
 800c906:	e015      	b.n	800c934 <osMutexWait+0x94>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d011      	beq.n	800c932 <osMutexWait+0x92>
 800c90e:	4b0b      	ldr	r3, [pc, #44]	@ (800c93c <osMutexWait+0x9c>)
 800c910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	e008      	b.n	800c932 <osMutexWait+0x92>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c920:	68f9      	ldr	r1, [r7, #12]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 ffa8 	bl	800d878 <xQueueSemaphoreTake>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d001      	beq.n	800c932 <osMutexWait+0x92>
    return osErrorOS;
 800c92e:	23ff      	movs	r3, #255	@ 0xff
 800c930:	e000      	b.n	800c934 <osMutexWait+0x94>
  }
  
  return osOK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	e000ed04 	.word	0xe000ed04

0800c940 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c948:	2300      	movs	r3, #0
 800c94a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c94c:	2300      	movs	r3, #0
 800c94e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c950:	f7ff ff26 	bl	800c7a0 <inHandlerMode>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d016      	beq.n	800c988 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c95a:	f107 0308 	add.w	r3, r7, #8
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fe17 	bl	800d594 <xQueueGiveFromISR>
 800c966:	4603      	mov	r3, r0
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d001      	beq.n	800c970 <osMutexRelease+0x30>
      return osErrorOS;
 800c96c:	23ff      	movs	r3, #255	@ 0xff
 800c96e:	e017      	b.n	800c9a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d013      	beq.n	800c99e <osMutexRelease+0x5e>
 800c976:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <osMutexRelease+0x68>)
 800c978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	e00a      	b.n	800c99e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c988:	2300      	movs	r3, #0
 800c98a:	2200      	movs	r2, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fc60 	bl	800d254 <xQueueGenericSend>
 800c994:	4603      	mov	r3, r0
 800c996:	2b01      	cmp	r3, #1
 800c998:	d001      	beq.n	800c99e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c99a:	23ff      	movs	r3, #255	@ 0xff
 800c99c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c99e:	68fb      	ldr	r3, [r7, #12]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c9b4:	f7ff fef4 	bl	800c7a0 <inHandlerMode>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <osMutexDelete+0x16>
    return osErrorISR;
 800c9be:	2382      	movs	r3, #130	@ 0x82
 800c9c0:	e003      	b.n	800c9ca <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f001 f8ea 	bl	800db9c <vQueueDelete>

  return osOK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d110      	bne.n	800ca04 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	f000 fbac 	bl	800d144 <xQueueGenericCreate>
 800c9ec:	60f8      	str	r0, [r7, #12]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d005      	beq.n	800ca00 <osSemaphoreCreate+0x2e>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 fc2a 	bl	800d254 <xQueueGenericSend>
    return sema;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	e000      	b.n	800ca06 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800ca04:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	4619      	mov	r1, r3
 800ca24:	f000 fb8e 	bl	800d144 <xQueueGenericCreate>
 800ca28:	4603      	mov	r3, r0
#endif
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
	...

0800ca34 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca40:	2300      	movs	r3, #0
 800ca42:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca4c:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <osMessagePut+0x24>
    ticks = 1;
 800ca54:	2301      	movs	r3, #1
 800ca56:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ca58:	f7ff fea2 	bl	800c7a0 <inHandlerMode>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d018      	beq.n	800ca94 <osMessagePut+0x60>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ca62:	f107 0210 	add.w	r2, r7, #16
 800ca66:	f107 0108 	add.w	r1, r7, #8
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f000 fcf3 	bl	800d458 <xQueueGenericSendFromISR>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d001      	beq.n	800ca7c <osMessagePut+0x48>
      return osErrorOS;
 800ca78:	23ff      	movs	r3, #255	@ 0xff
 800ca7a:	e018      	b.n	800caae <osMessagePut+0x7a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d014      	beq.n	800caac <osMessagePut+0x78>
 800ca82:	4b0d      	ldr	r3, [pc, #52]	@ (800cab8 <osMessagePut+0x84>)
 800ca84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca88:	601a      	str	r2, [r3, #0]
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	e00b      	b.n	800caac <osMessagePut+0x78>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ca94:	f107 0108 	add.w	r1, r7, #8
 800ca98:	2300      	movs	r3, #0
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 fbd9 	bl	800d254 <xQueueGenericSend>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d001      	beq.n	800caac <osMessagePut+0x78>
      return osErrorOS;
 800caa8:	23ff      	movs	r3, #255	@ 0xff
 800caaa:	e000      	b.n	800caae <osMessagePut+0x7a>
    }
  }
  
  return osOK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cabc:	b590      	push	{r4, r7, lr}
 800cabe:	b08b      	sub	sp, #44	@ 0x2c
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10a      	bne.n	800caec <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cad6:	2380      	movs	r3, #128	@ 0x80
 800cad8:	617b      	str	r3, [r7, #20]
    return event;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	461c      	mov	r4, r3
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800caea:	e057      	b.n	800cb9c <osMessageGet+0xe0>
  }
  
  taskWoken = pdFALSE;
 800caec:	2300      	movs	r3, #0
 800caee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafa:	d103      	bne.n	800cb04 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cafc:	f04f 33ff 	mov.w	r3, #4294967295
 800cb00:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb02:	e00c      	b.n	800cb1e <osMessageGet+0x62>
  }
  else if (millisec != 0) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <osMessageGet+0x62>
    ticks = millisec / portTICK_PERIOD_MS;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb12:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <osMessageGet+0x62>
      ticks = 1;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cb1e:	f7ff fe3f 	bl	800c7a0 <inHandlerMode>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01c      	beq.n	800cb62 <osMessageGet+0xa6>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cb28:	f107 0220 	add.w	r2, r7, #32
 800cb2c:	f107 0314 	add.w	r3, r7, #20
 800cb30:	3304      	adds	r3, #4
 800cb32:	4619      	mov	r1, r3
 800cb34:	68b8      	ldr	r0, [r7, #8]
 800cb36:	f000 ffaf 	bl	800da98 <xQueueReceiveFromISR>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d102      	bne.n	800cb46 <osMessageGet+0x8a>
      /* We have mail */
      event.status = osEventMessage;
 800cb40:	2310      	movs	r3, #16
 800cb42:	617b      	str	r3, [r7, #20]
 800cb44:	e001      	b.n	800cb4a <osMessageGet+0x8e>
    }
    else {
      event.status = osOK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d01d      	beq.n	800cb8c <osMessageGet+0xd0>
 800cb50:	4b14      	ldr	r3, [pc, #80]	@ (800cba4 <osMessageGet+0xe8>)
 800cb52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	e014      	b.n	800cb8c <osMessageGet+0xd0>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cb62:	f107 0314 	add.w	r3, r7, #20
 800cb66:	3304      	adds	r3, #4
 800cb68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	68b8      	ldr	r0, [r7, #8]
 800cb6e:	f000 fda1 	bl	800d6b4 <xQueueReceive>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d102      	bne.n	800cb7e <osMessageGet+0xc2>
      /* We have mail */
      event.status = osEventMessage;
 800cb78:	2310      	movs	r3, #16
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	e006      	b.n	800cb8c <osMessageGet+0xd0>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <osMessageGet+0xcc>
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <osMessageGet+0xce>
 800cb88:	2340      	movs	r3, #64	@ 0x40
 800cb8a:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	461c      	mov	r4, r3
 800cb90:	f107 0314 	add.w	r3, r7, #20
 800cb94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	372c      	adds	r7, #44	@ 0x2c
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd90      	pop	{r4, r7, pc}
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800cbac:	f002 f886 	bl	800ecbc <xTaskGetSchedulerState>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d001      	beq.n	800cbba <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800cbb6:	f002 ffd7 	bl	800fb68 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800cbba:	bf00      	nop
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800cbc4:	2018      	movs	r0, #24
 800cbc6:	f003 f861 	bl	800fc8c <pvPortMalloc>
 800cbca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d007      	beq.n	800cbe2 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 f992 	bl	800cf06 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800cbe2:	687b      	ldr	r3, [r7, #4]
	}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b090      	sub	sp, #64	@ 0x40
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800cc02:	2300      	movs	r3, #0
 800cc04:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10b      	bne.n	800cc24 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc1e:	bf00      	nop
 800cc20:	bf00      	nop
 800cc22:	e7fd      	b.n	800cc20 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc2a:	d30b      	bcc.n	800cc44 <xEventGroupWaitBits+0x58>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	61fb      	str	r3, [r7, #28]
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	e7fd      	b.n	800cc40 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10b      	bne.n	800cc62 <xEventGroupWaitBits+0x76>
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	61bb      	str	r3, [r7, #24]
}
 800cc5c:	bf00      	nop
 800cc5e:	bf00      	nop
 800cc60:	e7fd      	b.n	800cc5e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc62:	f002 f82b 	bl	800ecbc <xTaskGetSchedulerState>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d102      	bne.n	800cc72 <xEventGroupWaitBits+0x86>
 800cc6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <xEventGroupWaitBits+0x8a>
 800cc72:	2301      	movs	r3, #1
 800cc74:	e000      	b.n	800cc78 <xEventGroupWaitBits+0x8c>
 800cc76:	2300      	movs	r3, #0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10b      	bne.n	800cc94 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	617b      	str	r3, [r7, #20]
}
 800cc8e:	bf00      	nop
 800cc90:	bf00      	nop
 800cc92:	e7fd      	b.n	800cc90 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800cc94:	f001 fb9a 	bl	800e3cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800cc98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	68b9      	ldr	r1, [r7, #8]
 800cca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cca4:	f000 f90d 	bl	800cec2 <prvTestWaitCondition>
 800cca8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800ccaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00e      	beq.n	800ccce <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ccb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d028      	beq.n	800cd10 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ccbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	43db      	mvns	r3, r3
 800ccc6:	401a      	ands	r2, r3
 800ccc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	e020      	b.n	800cd10 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ccce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccdc:	e018      	b.n	800cd10 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d003      	beq.n	800ccec <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800cce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ccea:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ccf8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ccfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfc:	1d18      	adds	r0, r3, #4
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	4313      	orrs	r3, r2
 800cd04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd06:	4619      	mov	r1, r3
 800cd08:	f001 fd6a 	bl	800e7e0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800cd10:	f001 fb6a 	bl	800e3e8 <xTaskResumeAll>
 800cd14:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800cd16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d031      	beq.n	800cd80 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d107      	bne.n	800cd32 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800cd22:	4b1a      	ldr	r3, [pc, #104]	@ (800cd8c <xEventGroupWaitBits+0x1a0>)
 800cd24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800cd32:	f002 f96f 	bl	800f014 <uxTaskResetEventItemValue>
 800cd36:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800cd38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d11a      	bne.n	800cd78 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800cd42:	f002 fe81 	bl	800fa48 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800cd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cd52:	f000 f8b6 	bl	800cec2 <prvTestWaitCondition>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d009      	beq.n	800cd70 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d006      	beq.n	800cd70 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	43db      	mvns	r3, r3
 800cd6a:	401a      	ands	r2, r3
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd6e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800cd74:	f002 fe9a 	bl	800faac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800cd80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3740      	adds	r7, #64	@ 0x40
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	e000ed04 	.word	0xe000ed04

0800cd90 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08e      	sub	sp, #56	@ 0x38
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10b      	bne.n	800cdc4 <xEventGroupSetBits+0x34>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	613b      	str	r3, [r7, #16]
}
 800cdbe:	bf00      	nop
 800cdc0:	bf00      	nop
 800cdc2:	e7fd      	b.n	800cdc0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdca:	d30b      	bcc.n	800cde4 <xEventGroupSetBits+0x54>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	60fb      	str	r3, [r7, #12]
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	e7fd      	b.n	800cde0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800cde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde6:	3304      	adds	r3, #4
 800cde8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdec:	3308      	adds	r3, #8
 800cdee:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800cdf0:	f001 faec 	bl	800e3cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	431a      	orrs	r2, r3
 800ce02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce04:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ce06:	e03c      	b.n	800ce82 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ce08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ce14:	2300      	movs	r3, #0
 800ce16:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ce1e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ce26:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d108      	bne.n	800ce44 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ce32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00b      	beq.n	800ce56 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce42:	e008      	b.n	800ce56 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ce44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	69ba      	ldr	r2, [r7, #24]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d101      	bne.n	800ce56 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ce56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d010      	beq.n	800ce7e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ce66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ce76:	4619      	mov	r1, r3
 800ce78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ce7a:	f001 fd7f 	bl	800e97c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800ce82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d1be      	bne.n	800ce08 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ce8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	43db      	mvns	r3, r3
 800ce92:	401a      	ands	r2, r3
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ce98:	f001 faa6 	bl	800e3e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ce9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9e:	681b      	ldr	r3, [r3, #0]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3738      	adds	r7, #56	@ 0x38
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff ff6b 	bl	800cd90 <xEventGroupSetBits>
}
 800ceba:	bf00      	nop
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800cec2:	b480      	push	{r7}
 800cec4:	b087      	sub	sp, #28
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	60f8      	str	r0, [r7, #12]
 800ceca:	60b9      	str	r1, [r7, #8]
 800cecc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800cece:	2300      	movs	r3, #0
 800ced0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d107      	bne.n	800cee8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	4013      	ands	r3, r2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cee2:	2301      	movs	r3, #1
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	e007      	b.n	800cef8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	4013      	ands	r3, r2
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d101      	bne.n	800cef8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cef4:	2301      	movs	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	371c      	adds	r7, #28
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f103 0208 	add.w	r2, r3, #8
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f103 0208 	add.w	r2, r3, #8
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f103 0208 	add.w	r2, r3, #8
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf3a:	bf00      	nop
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	601a      	str	r2, [r3, #0]
}
 800cf9c:	bf00      	nop
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfbe:	d103      	bne.n	800cfc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	60fb      	str	r3, [r7, #12]
 800cfc6:	e00c      	b.n	800cfe2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	60fb      	str	r3, [r7, #12]
 800cfce:	e002      	b.n	800cfd6 <vListInsert+0x2e>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	60fb      	str	r3, [r7, #12]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d2f6      	bcs.n	800cfd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	601a      	str	r2, [r3, #0]
}
 800d00e:	bf00      	nop
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	6892      	ldr	r2, [r2, #8]
 800d030:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	6852      	ldr	r2, [r2, #4]
 800d03a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	429a      	cmp	r2, r3
 800d044:	d103      	bne.n	800d04e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	689a      	ldr	r2, [r3, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	1e5a      	subs	r2, r3, #1
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
	...

0800d070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <xQueueGenericReset+0x2c>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60bb      	str	r3, [r7, #8]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d09c:	f002 fcd4 	bl	800fa48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a8:	68f9      	ldr	r1, [r7, #12]
 800d0aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d0ac:	fb01 f303 	mul.w	r3, r1, r3
 800d0b0:	441a      	add	r2, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	68f9      	ldr	r1, [r7, #12]
 800d0d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d0d2:	fb01 f303 	mul.w	r3, r1, r3
 800d0d6:	441a      	add	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	22ff      	movs	r2, #255	@ 0xff
 800d0e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	22ff      	movs	r2, #255	@ 0xff
 800d0e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d114      	bne.n	800d11c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d01a      	beq.n	800d130 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3310      	adds	r3, #16
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 fbd8 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d012      	beq.n	800d130 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d10a:	4b0d      	ldr	r3, [pc, #52]	@ (800d140 <xQueueGenericReset+0xd0>)
 800d10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	e009      	b.n	800d130 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3310      	adds	r3, #16
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff fef0 	bl	800cf06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3324      	adds	r3, #36	@ 0x24
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff feeb 	bl	800cf06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d130:	f002 fcbc 	bl	800faac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d134:	2301      	movs	r3, #1
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	e000ed04 	.word	0xe000ed04

0800d144 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	@ 0x28
 800d148:	af02      	add	r7, sp, #8
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	4613      	mov	r3, r2
 800d150:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10b      	bne.n	800d170 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	613b      	str	r3, [r7, #16]
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	e7fd      	b.n	800d16c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	fb02 f303 	mul.w	r3, r2, r3
 800d178:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	3348      	adds	r3, #72	@ 0x48
 800d17e:	4618      	mov	r0, r3
 800d180:	f002 fd84 	bl	800fc8c <pvPortMalloc>
 800d184:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00d      	beq.n	800d1a8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	3348      	adds	r3, #72	@ 0x48
 800d194:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d196:	79fa      	ldrb	r2, [r7, #7]
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	9300      	str	r3, [sp, #0]
 800d19c:	4613      	mov	r3, r2
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	68b9      	ldr	r1, [r7, #8]
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f000 f805 	bl	800d1b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1a8:	69bb      	ldr	r3, [r7, #24]
	}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3720      	adds	r7, #32
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d103      	bne.n	800d1ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	69ba      	ldr	r2, [r7, #24]
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	e002      	b.n	800d1d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	69b8      	ldr	r0, [r7, #24]
 800d1e4:	f7ff ff44 	bl	800d070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00e      	beq.n	800d21c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d210:	2300      	movs	r3, #0
 800d212:	2200      	movs	r2, #0
 800d214:	2100      	movs	r1, #0
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f81c 	bl	800d254 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d22e:	2301      	movs	r3, #1
 800d230:	617b      	str	r3, [r7, #20]
 800d232:	2300      	movs	r3, #0
 800d234:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d236:	79fb      	ldrb	r3, [r7, #7]
 800d238:	461a      	mov	r2, r3
 800d23a:	6939      	ldr	r1, [r7, #16]
 800d23c:	6978      	ldr	r0, [r7, #20]
 800d23e:	f7ff ff81 	bl	800d144 <xQueueGenericCreate>
 800d242:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f7ff ffd3 	bl	800d1f0 <prvInitialiseMutex>

		return xNewQueue;
 800d24a:	68fb      	ldr	r3, [r7, #12]
	}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08e      	sub	sp, #56	@ 0x38
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d262:	2300      	movs	r3, #0
 800d264:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10b      	bne.n	800d288 <xQueueGenericSend+0x34>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d282:	bf00      	nop
 800d284:	bf00      	nop
 800d286:	e7fd      	b.n	800d284 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d103      	bne.n	800d296 <xQueueGenericSend+0x42>
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	d101      	bne.n	800d29a <xQueueGenericSend+0x46>
 800d296:	2301      	movs	r3, #1
 800d298:	e000      	b.n	800d29c <xQueueGenericSend+0x48>
 800d29a:	2300      	movs	r3, #0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <xQueueGenericSend+0x64>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	e7fd      	b.n	800d2b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d103      	bne.n	800d2c6 <xQueueGenericSend+0x72>
 800d2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d101      	bne.n	800d2ca <xQueueGenericSend+0x76>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e000      	b.n	800d2cc <xQueueGenericSend+0x78>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10b      	bne.n	800d2e8 <xQueueGenericSend+0x94>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	623b      	str	r3, [r7, #32]
}
 800d2e2:	bf00      	nop
 800d2e4:	bf00      	nop
 800d2e6:	e7fd      	b.n	800d2e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2e8:	f001 fce8 	bl	800ecbc <xTaskGetSchedulerState>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d102      	bne.n	800d2f8 <xQueueGenericSend+0xa4>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <xQueueGenericSend+0xa8>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <xQueueGenericSend+0xaa>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10b      	bne.n	800d31a <xQueueGenericSend+0xc6>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	61fb      	str	r3, [r7, #28]
}
 800d314:	bf00      	nop
 800d316:	bf00      	nop
 800d318:	e7fd      	b.n	800d316 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d31a:	f002 fb95 	bl	800fa48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d326:	429a      	cmp	r2, r3
 800d328:	d302      	bcc.n	800d330 <xQueueGenericSend+0xdc>
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d129      	bne.n	800d384 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	68b9      	ldr	r1, [r7, #8]
 800d334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d336:	f000 fc68 	bl	800dc0a <prvCopyDataToQueue>
 800d33a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d340:	2b00      	cmp	r3, #0
 800d342:	d010      	beq.n	800d366 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d346:	3324      	adds	r3, #36	@ 0x24
 800d348:	4618      	mov	r0, r3
 800d34a:	f001 fab3 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d013      	beq.n	800d37c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d354:	4b3f      	ldr	r3, [pc, #252]	@ (800d454 <xQueueGenericSend+0x200>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	e00a      	b.n	800d37c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d007      	beq.n	800d37c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d36c:	4b39      	ldr	r3, [pc, #228]	@ (800d454 <xQueueGenericSend+0x200>)
 800d36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d37c:	f002 fb96 	bl	800faac <vPortExitCritical>
				return pdPASS;
 800d380:	2301      	movs	r3, #1
 800d382:	e063      	b.n	800d44c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d103      	bne.n	800d392 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d38a:	f002 fb8f 	bl	800faac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	e05c      	b.n	800d44c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d398:	f107 0314 	add.w	r3, r7, #20
 800d39c:	4618      	mov	r0, r3
 800d39e:	f001 fb51 	bl	800ea44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a6:	f002 fb81 	bl	800faac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3aa:	f001 f80f 	bl	800e3cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ae:	f002 fb4b 	bl	800fa48 <vPortEnterCritical>
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3b8:	b25b      	sxtb	r3, r3
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	d103      	bne.n	800d3c8 <xQueueGenericSend+0x174>
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3ce:	b25b      	sxtb	r3, r3
 800d3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d4:	d103      	bne.n	800d3de <xQueueGenericSend+0x18a>
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3de:	f002 fb65 	bl	800faac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3e2:	1d3a      	adds	r2, r7, #4
 800d3e4:	f107 0314 	add.w	r3, r7, #20
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f001 fb40 	bl	800ea70 <xTaskCheckForTimeOut>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d124      	bne.n	800d440 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3f8:	f000 fcff 	bl	800ddfa <prvIsQueueFull>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d018      	beq.n	800d434 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	3310      	adds	r3, #16
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f001 f9c2 	bl	800e794 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d412:	f000 fc8a 	bl	800dd2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d416:	f000 ffe7 	bl	800e3e8 <xTaskResumeAll>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f47f af7c 	bne.w	800d31a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d422:	4b0c      	ldr	r3, [pc, #48]	@ (800d454 <xQueueGenericSend+0x200>)
 800d424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	e772      	b.n	800d31a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d436:	f000 fc78 	bl	800dd2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d43a:	f000 ffd5 	bl	800e3e8 <xTaskResumeAll>
 800d43e:	e76c      	b.n	800d31a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d442:	f000 fc72 	bl	800dd2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d446:	f000 ffcf 	bl	800e3e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d44a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3738      	adds	r7, #56	@ 0x38
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	e000ed04 	.word	0xe000ed04

0800d458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b090      	sub	sp, #64	@ 0x40
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d103      	bne.n	800d496 <xQueueGenericSendFromISR+0x3e>
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <xQueueGenericSendFromISR+0x42>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <xQueueGenericSendFromISR+0x44>
 800d49a:	2300      	movs	r3, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10b      	bne.n	800d4b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	e7fd      	b.n	800d4b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d103      	bne.n	800d4c6 <xQueueGenericSendFromISR+0x6e>
 800d4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d101      	bne.n	800d4ca <xQueueGenericSendFromISR+0x72>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e000      	b.n	800d4cc <xQueueGenericSendFromISR+0x74>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10b      	bne.n	800d4e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	623b      	str	r3, [r7, #32]
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	e7fd      	b.n	800d4e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4e8:	f002 fb8e 	bl	800fc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4ec:	f3ef 8211 	mrs	r2, BASEPRI
 800d4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	61fa      	str	r2, [r7, #28]
 800d502:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d504:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d506:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d510:	429a      	cmp	r2, r3
 800d512:	d302      	bcc.n	800d51a <xQueueGenericSendFromISR+0xc2>
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b02      	cmp	r3, #2
 800d518:	d12f      	bne.n	800d57a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d520:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d528:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d530:	f000 fb6b 	bl	800dc0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d534:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53c:	d112      	bne.n	800d564 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d542:	2b00      	cmp	r3, #0
 800d544:	d016      	beq.n	800d574 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d548:	3324      	adds	r3, #36	@ 0x24
 800d54a:	4618      	mov	r0, r3
 800d54c:	f001 f9b2 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00e      	beq.n	800d574 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00b      	beq.n	800d574 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	e007      	b.n	800d574 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d564:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d568:	3301      	adds	r3, #1
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	b25a      	sxtb	r2, r3
 800d56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d574:	2301      	movs	r3, #1
 800d576:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d578:	e001      	b.n	800d57e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d580:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d588:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3740      	adds	r7, #64	@ 0x40
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08e      	sub	sp, #56	@ 0x38
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10b      	bne.n	800d5c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	623b      	str	r3, [r7, #32]
}
 800d5ba:	bf00      	nop
 800d5bc:	bf00      	nop
 800d5be:	e7fd      	b.n	800d5bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00b      	beq.n	800d5e0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	61fb      	str	r3, [r7, #28]
}
 800d5da:	bf00      	nop
 800d5dc:	bf00      	nop
 800d5de:	e7fd      	b.n	800d5dc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d103      	bne.n	800d5f0 <xQueueGiveFromISR+0x5c>
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <xQueueGiveFromISR+0x60>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e000      	b.n	800d5f6 <xQueueGiveFromISR+0x62>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	61bb      	str	r3, [r7, #24]
}
 800d60c:	bf00      	nop
 800d60e:	bf00      	nop
 800d610:	e7fd      	b.n	800d60e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d612:	f002 faf9 	bl	800fc08 <vPortValidateInterruptPriority>
	__asm volatile
 800d616:	f3ef 8211 	mrs	r2, BASEPRI
 800d61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	617a      	str	r2, [r7, #20]
 800d62c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d62e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d630:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d636:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d63c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d63e:	429a      	cmp	r2, r3
 800d640:	d22b      	bcs.n	800d69a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d652:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d654:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65c:	d112      	bne.n	800d684 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d662:	2b00      	cmp	r3, #0
 800d664:	d016      	beq.n	800d694 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	3324      	adds	r3, #36	@ 0x24
 800d66a:	4618      	mov	r0, r3
 800d66c:	f001 f922 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00e      	beq.n	800d694 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00b      	beq.n	800d694 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2201      	movs	r2, #1
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	e007      	b.n	800d694 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d688:	3301      	adds	r3, #1
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	b25a      	sxtb	r2, r3
 800d68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d694:	2301      	movs	r3, #1
 800d696:	637b      	str	r3, [r7, #52]	@ 0x34
 800d698:	e001      	b.n	800d69e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f383 8811 	msr	BASEPRI, r3
}
 800d6a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3738      	adds	r7, #56	@ 0x38
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b08c      	sub	sp, #48	@ 0x30
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10b      	bne.n	800d6e6 <xQueueReceive+0x32>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	623b      	str	r3, [r7, #32]
}
 800d6e0:	bf00      	nop
 800d6e2:	bf00      	nop
 800d6e4:	e7fd      	b.n	800d6e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d103      	bne.n	800d6f4 <xQueueReceive+0x40>
 800d6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <xQueueReceive+0x44>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e000      	b.n	800d6fa <xQueueReceive+0x46>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10b      	bne.n	800d716 <xQueueReceive+0x62>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	61fb      	str	r3, [r7, #28]
}
 800d710:	bf00      	nop
 800d712:	bf00      	nop
 800d714:	e7fd      	b.n	800d712 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d716:	f001 fad1 	bl	800ecbc <xTaskGetSchedulerState>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <xQueueReceive+0x72>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <xQueueReceive+0x76>
 800d726:	2301      	movs	r3, #1
 800d728:	e000      	b.n	800d72c <xQueueReceive+0x78>
 800d72a:	2300      	movs	r3, #0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10b      	bne.n	800d748 <xQueueReceive+0x94>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	61bb      	str	r3, [r7, #24]
}
 800d742:	bf00      	nop
 800d744:	bf00      	nop
 800d746:	e7fd      	b.n	800d744 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d748:	f002 f97e 	bl	800fa48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d750:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01f      	beq.n	800d798 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d75c:	f000 fabf 	bl	800dcde <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d762:	1e5a      	subs	r2, r3, #1
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00f      	beq.n	800d790 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d772:	3310      	adds	r3, #16
 800d774:	4618      	mov	r0, r3
 800d776:	f001 f89d 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d780:	4b3c      	ldr	r3, [pc, #240]	@ (800d874 <xQueueReceive+0x1c0>)
 800d782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d790:	f002 f98c 	bl	800faac <vPortExitCritical>
				return pdPASS;
 800d794:	2301      	movs	r3, #1
 800d796:	e069      	b.n	800d86c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d103      	bne.n	800d7a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d79e:	f002 f985 	bl	800faac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	e062      	b.n	800d86c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7ac:	f107 0310 	add.w	r3, r7, #16
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f001 f947 	bl	800ea44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7ba:	f002 f977 	bl	800faac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7be:	f000 fe05 	bl	800e3cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7c2:	f002 f941 	bl	800fa48 <vPortEnterCritical>
 800d7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7cc:	b25b      	sxtb	r3, r3
 800d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d2:	d103      	bne.n	800d7dc <xQueueReceive+0x128>
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7e2:	b25b      	sxtb	r3, r3
 800d7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e8:	d103      	bne.n	800d7f2 <xQueueReceive+0x13e>
 800d7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7f2:	f002 f95b 	bl	800faac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7f6:	1d3a      	adds	r2, r7, #4
 800d7f8:	f107 0310 	add.w	r3, r7, #16
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 f936 	bl	800ea70 <xTaskCheckForTimeOut>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d123      	bne.n	800d852 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d80a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d80c:	f000 fadf 	bl	800ddce <prvIsQueueEmpty>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d017      	beq.n	800d846 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d818:	3324      	adds	r3, #36	@ 0x24
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 ffb8 	bl	800e794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d826:	f000 fa80 	bl	800dd2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d82a:	f000 fddd 	bl	800e3e8 <xTaskResumeAll>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d189      	bne.n	800d748 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d834:	4b0f      	ldr	r3, [pc, #60]	@ (800d874 <xQueueReceive+0x1c0>)
 800d836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	e780      	b.n	800d748 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d848:	f000 fa6f 	bl	800dd2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d84c:	f000 fdcc 	bl	800e3e8 <xTaskResumeAll>
 800d850:	e77a      	b.n	800d748 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d854:	f000 fa69 	bl	800dd2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d858:	f000 fdc6 	bl	800e3e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d85c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d85e:	f000 fab6 	bl	800ddce <prvIsQueueEmpty>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	f43f af6f 	beq.w	800d748 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d86a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3730      	adds	r7, #48	@ 0x30
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	e000ed04 	.word	0xe000ed04

0800d878 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b08e      	sub	sp, #56	@ 0x38
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d882:	2300      	movs	r3, #0
 800d884:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	623b      	str	r3, [r7, #32]
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	e7fd      	b.n	800d8a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00b      	beq.n	800d8cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	61fb      	str	r3, [r7, #28]
}
 800d8c6:	bf00      	nop
 800d8c8:	bf00      	nop
 800d8ca:	e7fd      	b.n	800d8c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8cc:	f001 f9f6 	bl	800ecbc <xTaskGetSchedulerState>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d102      	bne.n	800d8dc <xQueueSemaphoreTake+0x64>
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <xQueueSemaphoreTake+0x68>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e000      	b.n	800d8e2 <xQueueSemaphoreTake+0x6a>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10b      	bne.n	800d8fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	61bb      	str	r3, [r7, #24]
}
 800d8f8:	bf00      	nop
 800d8fa:	bf00      	nop
 800d8fc:	e7fd      	b.n	800d8fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8fe:	f002 f8a3 	bl	800fa48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d024      	beq.n	800d958 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d910:	1e5a      	subs	r2, r3, #1
 800d912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d914:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d104      	bne.n	800d928 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d91e:	f001 fb91 	bl	800f044 <pvTaskIncrementMutexHeldCount>
 800d922:	4602      	mov	r2, r0
 800d924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d926:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00f      	beq.n	800d950 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d932:	3310      	adds	r3, #16
 800d934:	4618      	mov	r0, r3
 800d936:	f000 ffbd 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d007      	beq.n	800d950 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d940:	4b54      	ldr	r3, [pc, #336]	@ (800da94 <xQueueSemaphoreTake+0x21c>)
 800d942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d950:	f002 f8ac 	bl	800faac <vPortExitCritical>
				return pdPASS;
 800d954:	2301      	movs	r3, #1
 800d956:	e098      	b.n	800da8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d112      	bne.n	800d984 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00b      	beq.n	800d97c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	617b      	str	r3, [r7, #20]
}
 800d976:	bf00      	nop
 800d978:	bf00      	nop
 800d97a:	e7fd      	b.n	800d978 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d97c:	f002 f896 	bl	800faac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d980:	2300      	movs	r3, #0
 800d982:	e082      	b.n	800da8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d98a:	f107 030c 	add.w	r3, r7, #12
 800d98e:	4618      	mov	r0, r3
 800d990:	f001 f858 	bl	800ea44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d994:	2301      	movs	r3, #1
 800d996:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d998:	f002 f888 	bl	800faac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d99c:	f000 fd16 	bl	800e3cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9a0:	f002 f852 	bl	800fa48 <vPortEnterCritical>
 800d9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9aa:	b25b      	sxtb	r3, r3
 800d9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b0:	d103      	bne.n	800d9ba <xQueueSemaphoreTake+0x142>
 800d9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9c0:	b25b      	sxtb	r3, r3
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	d103      	bne.n	800d9d0 <xQueueSemaphoreTake+0x158>
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9d0:	f002 f86c 	bl	800faac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9d4:	463a      	mov	r2, r7
 800d9d6:	f107 030c 	add.w	r3, r7, #12
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f001 f847 	bl	800ea70 <xTaskCheckForTimeOut>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d132      	bne.n	800da4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9ea:	f000 f9f0 	bl	800ddce <prvIsQueueEmpty>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d026      	beq.n	800da42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d109      	bne.n	800da10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d9fc:	f002 f824 	bl	800fa48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	4618      	mov	r0, r3
 800da06:	f001 f977 	bl	800ecf8 <xTaskPriorityInherit>
 800da0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800da0c:	f002 f84e 	bl	800faac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	3324      	adds	r3, #36	@ 0x24
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	4611      	mov	r1, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 febb 	bl	800e794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da20:	f000 f983 	bl	800dd2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da24:	f000 fce0 	bl	800e3e8 <xTaskResumeAll>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f47f af67 	bne.w	800d8fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800da30:	4b18      	ldr	r3, [pc, #96]	@ (800da94 <xQueueSemaphoreTake+0x21c>)
 800da32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	e75d      	b.n	800d8fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da44:	f000 f971 	bl	800dd2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da48:	f000 fcce 	bl	800e3e8 <xTaskResumeAll>
 800da4c:	e757      	b.n	800d8fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da50:	f000 f96b 	bl	800dd2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da54:	f000 fcc8 	bl	800e3e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da5a:	f000 f9b8 	bl	800ddce <prvIsQueueEmpty>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	f43f af4c 	beq.w	800d8fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00d      	beq.n	800da88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800da6c:	f001 ffec 	bl	800fa48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da72:	f000 f8b2 	bl	800dbda <prvGetDisinheritPriorityAfterTimeout>
 800da76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da7e:	4618      	mov	r0, r3
 800da80:	f001 fa38 	bl	800eef4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da84:	f002 f812 	bl	800faac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3738      	adds	r7, #56	@ 0x38
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b08e      	sub	sp, #56	@ 0x38
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800daa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10b      	bne.n	800dac6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	623b      	str	r3, [r7, #32]
}
 800dac0:	bf00      	nop
 800dac2:	bf00      	nop
 800dac4:	e7fd      	b.n	800dac2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d103      	bne.n	800dad4 <xQueueReceiveFromISR+0x3c>
 800dacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <xQueueReceiveFromISR+0x40>
 800dad4:	2301      	movs	r3, #1
 800dad6:	e000      	b.n	800dada <xQueueReceiveFromISR+0x42>
 800dad8:	2300      	movs	r3, #0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10b      	bne.n	800daf6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	61fb      	str	r3, [r7, #28]
}
 800daf0:	bf00      	nop
 800daf2:	bf00      	nop
 800daf4:	e7fd      	b.n	800daf2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daf6:	f002 f887 	bl	800fc08 <vPortValidateInterruptPriority>
	__asm volatile
 800dafa:	f3ef 8211 	mrs	r2, BASEPRI
 800dafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	61ba      	str	r2, [r7, #24]
 800db10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d02f      	beq.n	800db82 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db2c:	68b9      	ldr	r1, [r7, #8]
 800db2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db30:	f000 f8d5 	bl	800dcde <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db36:	1e5a      	subs	r2, r3, #1
 800db38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db44:	d112      	bne.n	800db6c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d016      	beq.n	800db7c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db50:	3310      	adds	r3, #16
 800db52:	4618      	mov	r0, r3
 800db54:	f000 feae 	bl	800e8b4 <xTaskRemoveFromEventList>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00e      	beq.n	800db7c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00b      	beq.n	800db7c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	e007      	b.n	800db7c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db70:	3301      	adds	r3, #1
 800db72:	b2db      	uxtb	r3, r3
 800db74:	b25a      	sxtb	r2, r3
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800db7c:	2301      	movs	r3, #1
 800db7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db80:	e001      	b.n	800db86 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800db82:	2300      	movs	r3, #0
 800db84:	637b      	str	r3, [r7, #52]	@ 0x34
 800db86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	f383 8811 	msr	BASEPRI, r3
}
 800db90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db94:	4618      	mov	r0, r3
 800db96:	3738      	adds	r7, #56	@ 0x38
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10b      	bne.n	800dbc6 <vQueueDelete+0x2a>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	60bb      	str	r3, [r7, #8]
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	e7fd      	b.n	800dbc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f000 f95a 	bl	800de80 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f002 f92b 	bl	800fe28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dbd2:	bf00      	nop
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dbda:	b480      	push	{r7}
 800dbdc:	b085      	sub	sp, #20
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d006      	beq.n	800dbf8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f1c3 0307 	rsb	r3, r3, #7
 800dbf4:	60fb      	str	r3, [r7, #12]
 800dbf6:	e001      	b.n	800dbfc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
	}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b086      	sub	sp, #24
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc16:	2300      	movs	r3, #0
 800dc18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10d      	bne.n	800dc44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d14d      	bne.n	800dccc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f001 f8d5 	bl	800ede4 <xTaskPriorityDisinherit>
 800dc3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	609a      	str	r2, [r3, #8]
 800dc42:	e043      	b.n	800dccc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d119      	bne.n	800dc7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6858      	ldr	r0, [r3, #4]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc52:	461a      	mov	r2, r3
 800dc54:	68b9      	ldr	r1, [r7, #8]
 800dc56:	f011 fa34 	bl	801f0c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc62:	441a      	add	r2, r3
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d32b      	bcc.n	800dccc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	605a      	str	r2, [r3, #4]
 800dc7c:	e026      	b.n	800dccc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	68d8      	ldr	r0, [r3, #12]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc86:	461a      	mov	r2, r3
 800dc88:	68b9      	ldr	r1, [r7, #8]
 800dc8a:	f011 fa1a 	bl	801f0c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	68da      	ldr	r2, [r3, #12]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc96:	425b      	negs	r3, r3
 800dc98:	441a      	add	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	68da      	ldr	r2, [r3, #12]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d207      	bcs.n	800dcba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	689a      	ldr	r2, [r3, #8]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb2:	425b      	negs	r3, r3
 800dcb4:	441a      	add	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d105      	bne.n	800dccc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	1c5a      	adds	r2, r3, #1
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dcd4:	697b      	ldr	r3, [r7, #20]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d018      	beq.n	800dd22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	68da      	ldr	r2, [r3, #12]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf8:	441a      	add	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68da      	ldr	r2, [r3, #12]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d303      	bcc.n	800dd12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68d9      	ldr	r1, [r3, #12]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	6838      	ldr	r0, [r7, #0]
 800dd1e:	f011 f9d0 	bl	801f0c2 <memcpy>
	}
}
 800dd22:	bf00      	nop
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd32:	f001 fe89 	bl	800fa48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd3e:	e011      	b.n	800dd64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d012      	beq.n	800dd6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3324      	adds	r3, #36	@ 0x24
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 fdb1 	bl	800e8b4 <xTaskRemoveFromEventList>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd58:	f000 feee 	bl	800eb38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dce9      	bgt.n	800dd40 <prvUnlockQueue+0x16>
 800dd6c:	e000      	b.n	800dd70 <prvUnlockQueue+0x46>
					break;
 800dd6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	22ff      	movs	r2, #255	@ 0xff
 800dd74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dd78:	f001 fe98 	bl	800faac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd7c:	f001 fe64 	bl	800fa48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd88:	e011      	b.n	800ddae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d012      	beq.n	800ddb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3310      	adds	r3, #16
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 fd8c 	bl	800e8b4 <xTaskRemoveFromEventList>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dda2:	f000 fec9 	bl	800eb38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	dce9      	bgt.n	800dd8a <prvUnlockQueue+0x60>
 800ddb6:	e000      	b.n	800ddba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ddb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	22ff      	movs	r2, #255	@ 0xff
 800ddbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ddc2:	f001 fe73 	bl	800faac <vPortExitCritical>
}
 800ddc6:	bf00      	nop
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddd6:	f001 fe37 	bl	800fa48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dde2:	2301      	movs	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	e001      	b.n	800ddec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dde8:	2300      	movs	r3, #0
 800ddea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddec:	f001 fe5e 	bl	800faac <vPortExitCritical>

	return xReturn;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b084      	sub	sp, #16
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de02:	f001 fe21 	bl	800fa48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de0e:	429a      	cmp	r2, r3
 800de10:	d102      	bne.n	800de18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de12:	2301      	movs	r3, #1
 800de14:	60fb      	str	r3, [r7, #12]
 800de16:	e001      	b.n	800de1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de18:	2300      	movs	r3, #0
 800de1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de1c:	f001 fe46 	bl	800faac <vPortExitCritical>

	return xReturn;
 800de20:	68fb      	ldr	r3, [r7, #12]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de36:	2300      	movs	r3, #0
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e014      	b.n	800de66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de3c:	4a0f      	ldr	r2, [pc, #60]	@ (800de7c <vQueueAddToRegistry+0x50>)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10b      	bne.n	800de60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de48:	490c      	ldr	r1, [pc, #48]	@ (800de7c <vQueueAddToRegistry+0x50>)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de52:	4a0a      	ldr	r2, [pc, #40]	@ (800de7c <vQueueAddToRegistry+0x50>)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	00db      	lsls	r3, r3, #3
 800de58:	4413      	add	r3, r2
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de5e:	e006      	b.n	800de6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3301      	adds	r3, #1
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b07      	cmp	r3, #7
 800de6a:	d9e7      	bls.n	800de3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de6c:	bf00      	nop
 800de6e:	bf00      	nop
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	20001568 	.word	0x20001568

0800de80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de88:	2300      	movs	r3, #0
 800de8a:	60fb      	str	r3, [r7, #12]
 800de8c:	e016      	b.n	800debc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800de8e:	4a10      	ldr	r2, [pc, #64]	@ (800ded0 <vQueueUnregisterQueue+0x50>)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	4413      	add	r3, r2
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d10b      	bne.n	800deb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800de9e:	4a0c      	ldr	r2, [pc, #48]	@ (800ded0 <vQueueUnregisterQueue+0x50>)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2100      	movs	r1, #0
 800dea4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dea8:	4a09      	ldr	r2, [pc, #36]	@ (800ded0 <vQueueUnregisterQueue+0x50>)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	00db      	lsls	r3, r3, #3
 800deae:	4413      	add	r3, r2
 800deb0:	2200      	movs	r2, #0
 800deb2:	605a      	str	r2, [r3, #4]
				break;
 800deb4:	e006      	b.n	800dec4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3301      	adds	r3, #1
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b07      	cmp	r3, #7
 800dec0:	d9e5      	bls.n	800de8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	3714      	adds	r7, #20
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	20001568 	.word	0x20001568

0800ded4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dee4:	f001 fdb0 	bl	800fa48 <vPortEnterCritical>
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deee:	b25b      	sxtb	r3, r3
 800def0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def4:	d103      	bne.n	800defe <vQueueWaitForMessageRestricted+0x2a>
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2200      	movs	r2, #0
 800defa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df04:	b25b      	sxtb	r3, r3
 800df06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0a:	d103      	bne.n	800df14 <vQueueWaitForMessageRestricted+0x40>
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df14:	f001 fdca 	bl	800faac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d106      	bne.n	800df2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	3324      	adds	r3, #36	@ 0x24
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	68b9      	ldr	r1, [r7, #8]
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 fc97 	bl	800e85c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df2e:	6978      	ldr	r0, [r7, #20]
 800df30:	f7ff fefb 	bl	800dd2a <prvUnlockQueue>
	}
 800df34:	bf00      	nop
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b08c      	sub	sp, #48	@ 0x30
 800df40:	af04      	add	r7, sp, #16
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	4613      	mov	r3, r2
 800df4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df4c:	88fb      	ldrh	r3, [r7, #6]
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4618      	mov	r0, r3
 800df52:	f001 fe9b 	bl	800fc8c <pvPortMalloc>
 800df56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00e      	beq.n	800df7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df5e:	2054      	movs	r0, #84	@ 0x54
 800df60:	f001 fe94 	bl	800fc8c <pvPortMalloc>
 800df64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d003      	beq.n	800df74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	697a      	ldr	r2, [r7, #20]
 800df70:	631a      	str	r2, [r3, #48]	@ 0x30
 800df72:	e005      	b.n	800df80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df74:	6978      	ldr	r0, [r7, #20]
 800df76:	f001 ff57 	bl	800fe28 <vPortFree>
 800df7a:	e001      	b.n	800df80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d013      	beq.n	800dfae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df86:	88fa      	ldrh	r2, [r7, #6]
 800df88:	2300      	movs	r3, #0
 800df8a:	9303      	str	r3, [sp, #12]
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	9302      	str	r3, [sp, #8]
 800df90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	68b9      	ldr	r1, [r7, #8]
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f000 f80e 	bl	800dfbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfa2:	69f8      	ldr	r0, [r7, #28]
 800dfa4:	f000 f894 	bl	800e0d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	61bb      	str	r3, [r7, #24]
 800dfac:	e002      	b.n	800dfb4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfae:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfb4:	69bb      	ldr	r3, [r7, #24]
	}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3720      	adds	r7, #32
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b088      	sub	sp, #32
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	607a      	str	r2, [r7, #4]
 800dfca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	f023 0307 	bic.w	r3, r3, #7
 800dfe4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	f003 0307 	and.w	r3, r3, #7
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00b      	beq.n	800e008 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	617b      	str	r3, [r7, #20]
}
 800e002:	bf00      	nop
 800e004:	bf00      	nop
 800e006:	e7fd      	b.n	800e004 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d01f      	beq.n	800e04e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	e012      	b.n	800e03a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	4413      	add	r3, r2
 800e01a:	7819      	ldrb	r1, [r3, #0]
 800e01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	4413      	add	r3, r2
 800e022:	3334      	adds	r3, #52	@ 0x34
 800e024:	460a      	mov	r2, r1
 800e026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e028:	68ba      	ldr	r2, [r7, #8]
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	4413      	add	r3, r2
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d006      	beq.n	800e042 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	3301      	adds	r3, #1
 800e038:	61fb      	str	r3, [r7, #28]
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	2b0f      	cmp	r3, #15
 800e03e:	d9e9      	bls.n	800e014 <prvInitialiseNewTask+0x56>
 800e040:	e000      	b.n	800e044 <prvInitialiseNewTask+0x86>
			{
				break;
 800e042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	2200      	movs	r2, #0
 800e048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e04c:	e003      	b.n	800e056 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e050:	2200      	movs	r2, #0
 800e052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e058:	2b06      	cmp	r3, #6
 800e05a:	d901      	bls.n	800e060 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e05c:	2306      	movs	r3, #6
 800e05e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e064:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e06a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06e:	2200      	movs	r2, #0
 800e070:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e074:	3304      	adds	r3, #4
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe ff65 	bl	800cf46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07e:	3318      	adds	r3, #24
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe ff60 	bl	800cf46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e08a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08e:	f1c3 0207 	rsb	r2, r3, #7
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e09a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09e:	2200      	movs	r2, #0
 800e0a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	68f9      	ldr	r1, [r7, #12]
 800e0ae:	69b8      	ldr	r0, [r7, #24]
 800e0b0:	f001 fb9a 	bl	800f7e8 <pxPortInitialiseStack>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	3720      	adds	r7, #32
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
	...

0800e0d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e0d8:	f001 fcb6 	bl	800fa48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e0dc:	4b2a      	ldr	r3, [pc, #168]	@ (800e188 <prvAddNewTaskToReadyList+0xb8>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	4a29      	ldr	r2, [pc, #164]	@ (800e188 <prvAddNewTaskToReadyList+0xb8>)
 800e0e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0e6:	4b29      	ldr	r3, [pc, #164]	@ (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0ee:	4a27      	ldr	r2, [pc, #156]	@ (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0f4:	4b24      	ldr	r3, [pc, #144]	@ (800e188 <prvAddNewTaskToReadyList+0xb8>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d110      	bne.n	800e11e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0fc:	f000 fd40 	bl	800eb80 <prvInitialiseTaskLists>
 800e100:	e00d      	b.n	800e11e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e102:	4b23      	ldr	r3, [pc, #140]	@ (800e190 <prvAddNewTaskToReadyList+0xc0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d109      	bne.n	800e11e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e10a:	4b20      	ldr	r3, [pc, #128]	@ (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e114:	429a      	cmp	r2, r3
 800e116:	d802      	bhi.n	800e11e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e118:	4a1c      	ldr	r2, [pc, #112]	@ (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e11e:	4b1d      	ldr	r3, [pc, #116]	@ (800e194 <prvAddNewTaskToReadyList+0xc4>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	4a1b      	ldr	r2, [pc, #108]	@ (800e194 <prvAddNewTaskToReadyList+0xc4>)
 800e126:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12c:	2201      	movs	r2, #1
 800e12e:	409a      	lsls	r2, r3
 800e130:	4b19      	ldr	r3, [pc, #100]	@ (800e198 <prvAddNewTaskToReadyList+0xc8>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4313      	orrs	r3, r2
 800e136:	4a18      	ldr	r2, [pc, #96]	@ (800e198 <prvAddNewTaskToReadyList+0xc8>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13e:	4613      	mov	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4a15      	ldr	r2, [pc, #84]	@ (800e19c <prvAddNewTaskToReadyList+0xcc>)
 800e148:	441a      	add	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	3304      	adds	r3, #4
 800e14e:	4619      	mov	r1, r3
 800e150:	4610      	mov	r0, r2
 800e152:	f7fe ff05 	bl	800cf60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e156:	f001 fca9 	bl	800faac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e15a:	4b0d      	ldr	r3, [pc, #52]	@ (800e190 <prvAddNewTaskToReadyList+0xc0>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00e      	beq.n	800e180 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e162:	4b0a      	ldr	r3, [pc, #40]	@ (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d207      	bcs.n	800e180 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e170:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a0 <prvAddNewTaskToReadyList+0xd0>)
 800e172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	200016a8 	.word	0x200016a8
 800e18c:	200015a8 	.word	0x200015a8
 800e190:	200016b4 	.word	0x200016b4
 800e194:	200016c4 	.word	0x200016c4
 800e198:	200016b0 	.word	0x200016b0
 800e19c:	200015ac 	.word	0x200015ac
 800e1a0:	e000ed04 	.word	0xe000ed04

0800e1a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e1ac:	f001 fc4c 	bl	800fa48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d102      	bne.n	800e1bc <vTaskDelete+0x18>
 800e1b6:	4b39      	ldr	r3, [pc, #228]	@ (800e29c <vTaskDelete+0xf8>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	e000      	b.n	800e1be <vTaskDelete+0x1a>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3304      	adds	r3, #4
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe ff28 	bl	800d01a <uxListRemove>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d115      	bne.n	800e1fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d4:	4932      	ldr	r1, [pc, #200]	@ (800e2a0 <vTaskDelete+0xfc>)
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	440b      	add	r3, r1
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10a      	bne.n	800e1fc <vTaskDelete+0x58>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e1f0:	43da      	mvns	r2, r3
 800e1f2:	4b2c      	ldr	r3, [pc, #176]	@ (800e2a4 <vTaskDelete+0x100>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	4a2a      	ldr	r2, [pc, #168]	@ (800e2a4 <vTaskDelete+0x100>)
 800e1fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e200:	2b00      	cmp	r3, #0
 800e202:	d004      	beq.n	800e20e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	3318      	adds	r3, #24
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fe ff06 	bl	800d01a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e20e:	4b26      	ldr	r3, [pc, #152]	@ (800e2a8 <vTaskDelete+0x104>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3301      	adds	r3, #1
 800e214:	4a24      	ldr	r2, [pc, #144]	@ (800e2a8 <vTaskDelete+0x104>)
 800e216:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e218:	4b20      	ldr	r3, [pc, #128]	@ (800e29c <vTaskDelete+0xf8>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d10b      	bne.n	800e23a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	3304      	adds	r3, #4
 800e226:	4619      	mov	r1, r3
 800e228:	4820      	ldr	r0, [pc, #128]	@ (800e2ac <vTaskDelete+0x108>)
 800e22a:	f7fe fe99 	bl	800cf60 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e22e:	4b20      	ldr	r3, [pc, #128]	@ (800e2b0 <vTaskDelete+0x10c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	4a1e      	ldr	r2, [pc, #120]	@ (800e2b0 <vTaskDelete+0x10c>)
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	e009      	b.n	800e24e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e23a:	4b1e      	ldr	r3, [pc, #120]	@ (800e2b4 <vTaskDelete+0x110>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3b01      	subs	r3, #1
 800e240:	4a1c      	ldr	r2, [pc, #112]	@ (800e2b4 <vTaskDelete+0x110>)
 800e242:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 fd09 	bl	800ec5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e24a:	f000 fd17 	bl	800ec7c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e24e:	f001 fc2d 	bl	800faac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e252:	4b19      	ldr	r3, [pc, #100]	@ (800e2b8 <vTaskDelete+0x114>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d01c      	beq.n	800e294 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800e25a:	4b10      	ldr	r3, [pc, #64]	@ (800e29c <vTaskDelete+0xf8>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	429a      	cmp	r2, r3
 800e262:	d117      	bne.n	800e294 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e264:	4b15      	ldr	r3, [pc, #84]	@ (800e2bc <vTaskDelete+0x118>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00b      	beq.n	800e284 <vTaskDelete+0xe0>
	__asm volatile
 800e26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	60bb      	str	r3, [r7, #8]
}
 800e27e:	bf00      	nop
 800e280:	bf00      	nop
 800e282:	e7fd      	b.n	800e280 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800e284:	4b0e      	ldr	r3, [pc, #56]	@ (800e2c0 <vTaskDelete+0x11c>)
 800e286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e294:	bf00      	nop
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	200015a8 	.word	0x200015a8
 800e2a0:	200015ac 	.word	0x200015ac
 800e2a4:	200016b0 	.word	0x200016b0
 800e2a8:	200016c4 	.word	0x200016c4
 800e2ac:	2000167c 	.word	0x2000167c
 800e2b0:	20001690 	.word	0x20001690
 800e2b4:	200016a8 	.word	0x200016a8
 800e2b8:	200016b4 	.word	0x200016b4
 800e2bc:	200016d0 	.word	0x200016d0
 800e2c0:	e000ed04 	.word	0xe000ed04

0800e2c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d018      	beq.n	800e308 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2d6:	4b14      	ldr	r3, [pc, #80]	@ (800e328 <vTaskDelay+0x64>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <vTaskDelay+0x32>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	60bb      	str	r3, [r7, #8]
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	e7fd      	b.n	800e2f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2f6:	f000 f869 	bl	800e3cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 feb5 	bl	800f06c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e302:	f000 f871 	bl	800e3e8 <xTaskResumeAll>
 800e306:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d107      	bne.n	800e31e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e30e:	4b07      	ldr	r3, [pc, #28]	@ (800e32c <vTaskDelay+0x68>)
 800e310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e31e:	bf00      	nop
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	200016d0 	.word	0x200016d0
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800e336:	4b1f      	ldr	r3, [pc, #124]	@ (800e3b4 <vTaskStartScheduler+0x84>)
 800e338:	9301      	str	r3, [sp, #4]
 800e33a:	2300      	movs	r3, #0
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	2300      	movs	r3, #0
 800e340:	2280      	movs	r2, #128	@ 0x80
 800e342:	491d      	ldr	r1, [pc, #116]	@ (800e3b8 <vTaskStartScheduler+0x88>)
 800e344:	481d      	ldr	r0, [pc, #116]	@ (800e3bc <vTaskStartScheduler+0x8c>)
 800e346:	f7ff fdf9 	bl	800df3c <xTaskCreate>
 800e34a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d102      	bne.n	800e358 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800e352:	f000 fef1 	bl	800f138 <xTimerCreateTimerTask>
 800e356:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d116      	bne.n	800e38c <vTaskStartScheduler+0x5c>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	60bb      	str	r3, [r7, #8]
}
 800e370:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e372:	4b13      	ldr	r3, [pc, #76]	@ (800e3c0 <vTaskStartScheduler+0x90>)
 800e374:	f04f 32ff 	mov.w	r2, #4294967295
 800e378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e37a:	4b12      	ldr	r3, [pc, #72]	@ (800e3c4 <vTaskStartScheduler+0x94>)
 800e37c:	2201      	movs	r2, #1
 800e37e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e380:	4b11      	ldr	r3, [pc, #68]	@ (800e3c8 <vTaskStartScheduler+0x98>)
 800e382:	2200      	movs	r2, #0
 800e384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e386:	f001 fabb 	bl	800f900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e38a:	e00f      	b.n	800e3ac <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e392:	d10b      	bne.n	800e3ac <vTaskStartScheduler+0x7c>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	607b      	str	r3, [r7, #4]
}
 800e3a6:	bf00      	nop
 800e3a8:	bf00      	nop
 800e3aa:	e7fd      	b.n	800e3a8 <vTaskStartScheduler+0x78>
}
 800e3ac:	bf00      	nop
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	200016cc 	.word	0x200016cc
 800e3b8:	08022508 	.word	0x08022508
 800e3bc:	0800eb51 	.word	0x0800eb51
 800e3c0:	200016c8 	.word	0x200016c8
 800e3c4:	200016b4 	.word	0x200016b4
 800e3c8:	200016ac 	.word	0x200016ac

0800e3cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e3d0:	4b04      	ldr	r3, [pc, #16]	@ (800e3e4 <vTaskSuspendAll+0x18>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	4a03      	ldr	r2, [pc, #12]	@ (800e3e4 <vTaskSuspendAll+0x18>)
 800e3d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e3da:	bf00      	nop
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	200016d0 	.word	0x200016d0

0800e3e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3f6:	4b42      	ldr	r3, [pc, #264]	@ (800e500 <xTaskResumeAll+0x118>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10b      	bne.n	800e416 <xTaskResumeAll+0x2e>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	603b      	str	r3, [r7, #0]
}
 800e410:	bf00      	nop
 800e412:	bf00      	nop
 800e414:	e7fd      	b.n	800e412 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e416:	f001 fb17 	bl	800fa48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e41a:	4b39      	ldr	r3, [pc, #228]	@ (800e500 <xTaskResumeAll+0x118>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3b01      	subs	r3, #1
 800e420:	4a37      	ldr	r2, [pc, #220]	@ (800e500 <xTaskResumeAll+0x118>)
 800e422:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e424:	4b36      	ldr	r3, [pc, #216]	@ (800e500 <xTaskResumeAll+0x118>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d161      	bne.n	800e4f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e42c:	4b35      	ldr	r3, [pc, #212]	@ (800e504 <xTaskResumeAll+0x11c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d05d      	beq.n	800e4f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e434:	e02e      	b.n	800e494 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e436:	4b34      	ldr	r3, [pc, #208]	@ (800e508 <xTaskResumeAll+0x120>)
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3318      	adds	r3, #24
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fde9 	bl	800d01a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3304      	adds	r3, #4
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fe fde4 	bl	800d01a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e456:	2201      	movs	r2, #1
 800e458:	409a      	lsls	r2, r3
 800e45a:	4b2c      	ldr	r3, [pc, #176]	@ (800e50c <xTaskResumeAll+0x124>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4313      	orrs	r3, r2
 800e460:	4a2a      	ldr	r2, [pc, #168]	@ (800e50c <xTaskResumeAll+0x124>)
 800e462:	6013      	str	r3, [r2, #0]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e468:	4613      	mov	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4a27      	ldr	r2, [pc, #156]	@ (800e510 <xTaskResumeAll+0x128>)
 800e472:	441a      	add	r2, r3
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	3304      	adds	r3, #4
 800e478:	4619      	mov	r1, r3
 800e47a:	4610      	mov	r0, r2
 800e47c:	f7fe fd70 	bl	800cf60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e484:	4b23      	ldr	r3, [pc, #140]	@ (800e514 <xTaskResumeAll+0x12c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d302      	bcc.n	800e494 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e48e:	4b22      	ldr	r3, [pc, #136]	@ (800e518 <xTaskResumeAll+0x130>)
 800e490:	2201      	movs	r2, #1
 800e492:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e494:	4b1c      	ldr	r3, [pc, #112]	@ (800e508 <xTaskResumeAll+0x120>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1cc      	bne.n	800e436 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4a2:	f000 fbeb 	bl	800ec7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4a6:	4b1d      	ldr	r3, [pc, #116]	@ (800e51c <xTaskResumeAll+0x134>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d010      	beq.n	800e4d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4b2:	f000 f859 	bl	800e568 <xTaskIncrementTick>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d002      	beq.n	800e4c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e4bc:	4b16      	ldr	r3, [pc, #88]	@ (800e518 <xTaskResumeAll+0x130>)
 800e4be:	2201      	movs	r2, #1
 800e4c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1f1      	bne.n	800e4b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e4ce:	4b13      	ldr	r3, [pc, #76]	@ (800e51c <xTaskResumeAll+0x134>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4d4:	4b10      	ldr	r3, [pc, #64]	@ (800e518 <xTaskResumeAll+0x130>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d009      	beq.n	800e4f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e520 <xTaskResumeAll+0x138>)
 800e4e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4e6:	601a      	str	r2, [r3, #0]
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4f0:	f001 fadc 	bl	800faac <vPortExitCritical>

	return xAlreadyYielded;
 800e4f4:	68bb      	ldr	r3, [r7, #8]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	200016d0 	.word	0x200016d0
 800e504:	200016a8 	.word	0x200016a8
 800e508:	20001668 	.word	0x20001668
 800e50c:	200016b0 	.word	0x200016b0
 800e510:	200015ac 	.word	0x200015ac
 800e514:	200015a8 	.word	0x200015a8
 800e518:	200016bc 	.word	0x200016bc
 800e51c:	200016b8 	.word	0x200016b8
 800e520:	e000ed04 	.word	0xe000ed04

0800e524 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e52a:	4b05      	ldr	r3, [pc, #20]	@ (800e540 <xTaskGetTickCount+0x1c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e530:	687b      	ldr	r3, [r7, #4]
}
 800e532:	4618      	mov	r0, r3
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	200016ac 	.word	0x200016ac

0800e544 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e54a:	f001 fb5d 	bl	800fc08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e54e:	2300      	movs	r3, #0
 800e550:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e552:	4b04      	ldr	r3, [pc, #16]	@ (800e564 <xTaskGetTickCountFromISR+0x20>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e558:	683b      	ldr	r3, [r7, #0]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	200016ac 	.word	0x200016ac

0800e568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e56e:	2300      	movs	r3, #0
 800e570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e572:	4b4f      	ldr	r3, [pc, #316]	@ (800e6b0 <xTaskIncrementTick+0x148>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	f040 808f 	bne.w	800e69a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e57c:	4b4d      	ldr	r3, [pc, #308]	@ (800e6b4 <xTaskIncrementTick+0x14c>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e584:	4a4b      	ldr	r2, [pc, #300]	@ (800e6b4 <xTaskIncrementTick+0x14c>)
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d121      	bne.n	800e5d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e590:	4b49      	ldr	r3, [pc, #292]	@ (800e6b8 <xTaskIncrementTick+0x150>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00b      	beq.n	800e5b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	603b      	str	r3, [r7, #0]
}
 800e5ac:	bf00      	nop
 800e5ae:	bf00      	nop
 800e5b0:	e7fd      	b.n	800e5ae <xTaskIncrementTick+0x46>
 800e5b2:	4b41      	ldr	r3, [pc, #260]	@ (800e6b8 <xTaskIncrementTick+0x150>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	4b40      	ldr	r3, [pc, #256]	@ (800e6bc <xTaskIncrementTick+0x154>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a3e      	ldr	r2, [pc, #248]	@ (800e6b8 <xTaskIncrementTick+0x150>)
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	4a3e      	ldr	r2, [pc, #248]	@ (800e6bc <xTaskIncrementTick+0x154>)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6013      	str	r3, [r2, #0]
 800e5c6:	4b3e      	ldr	r3, [pc, #248]	@ (800e6c0 <xTaskIncrementTick+0x158>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	4a3c      	ldr	r2, [pc, #240]	@ (800e6c0 <xTaskIncrementTick+0x158>)
 800e5ce:	6013      	str	r3, [r2, #0]
 800e5d0:	f000 fb54 	bl	800ec7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5d4:	4b3b      	ldr	r3, [pc, #236]	@ (800e6c4 <xTaskIncrementTick+0x15c>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d348      	bcc.n	800e670 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5de:	4b36      	ldr	r3, [pc, #216]	@ (800e6b8 <xTaskIncrementTick+0x150>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d104      	bne.n	800e5f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5e8:	4b36      	ldr	r3, [pc, #216]	@ (800e6c4 <xTaskIncrementTick+0x15c>)
 800e5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ee:	601a      	str	r2, [r3, #0]
					break;
 800e5f0:	e03e      	b.n	800e670 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5f2:	4b31      	ldr	r3, [pc, #196]	@ (800e6b8 <xTaskIncrementTick+0x150>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	429a      	cmp	r2, r3
 800e608:	d203      	bcs.n	800e612 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e60a:	4a2e      	ldr	r2, [pc, #184]	@ (800e6c4 <xTaskIncrementTick+0x15c>)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e610:	e02e      	b.n	800e670 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	3304      	adds	r3, #4
 800e616:	4618      	mov	r0, r3
 800e618:	f7fe fcff 	bl	800d01a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e620:	2b00      	cmp	r3, #0
 800e622:	d004      	beq.n	800e62e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	3318      	adds	r3, #24
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe fcf6 	bl	800d01a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e632:	2201      	movs	r2, #1
 800e634:	409a      	lsls	r2, r3
 800e636:	4b24      	ldr	r3, [pc, #144]	@ (800e6c8 <xTaskIncrementTick+0x160>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	4a22      	ldr	r2, [pc, #136]	@ (800e6c8 <xTaskIncrementTick+0x160>)
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e644:	4613      	mov	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4a1f      	ldr	r2, [pc, #124]	@ (800e6cc <xTaskIncrementTick+0x164>)
 800e64e:	441a      	add	r2, r3
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	3304      	adds	r3, #4
 800e654:	4619      	mov	r1, r3
 800e656:	4610      	mov	r0, r2
 800e658:	f7fe fc82 	bl	800cf60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e660:	4b1b      	ldr	r3, [pc, #108]	@ (800e6d0 <xTaskIncrementTick+0x168>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e666:	429a      	cmp	r2, r3
 800e668:	d3b9      	bcc.n	800e5de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e66a:	2301      	movs	r3, #1
 800e66c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e66e:	e7b6      	b.n	800e5de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e670:	4b17      	ldr	r3, [pc, #92]	@ (800e6d0 <xTaskIncrementTick+0x168>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e676:	4915      	ldr	r1, [pc, #84]	@ (800e6cc <xTaskIncrementTick+0x164>)
 800e678:	4613      	mov	r3, r2
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4413      	add	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	440b      	add	r3, r1
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d901      	bls.n	800e68c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e688:	2301      	movs	r3, #1
 800e68a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e68c:	4b11      	ldr	r3, [pc, #68]	@ (800e6d4 <xTaskIncrementTick+0x16c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d007      	beq.n	800e6a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e004      	b.n	800e6a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e69a:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d8 <xTaskIncrementTick+0x170>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	4a0d      	ldr	r2, [pc, #52]	@ (800e6d8 <xTaskIncrementTick+0x170>)
 800e6a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6a4:	697b      	ldr	r3, [r7, #20]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	200016d0 	.word	0x200016d0
 800e6b4:	200016ac 	.word	0x200016ac
 800e6b8:	20001660 	.word	0x20001660
 800e6bc:	20001664 	.word	0x20001664
 800e6c0:	200016c0 	.word	0x200016c0
 800e6c4:	200016c8 	.word	0x200016c8
 800e6c8:	200016b0 	.word	0x200016b0
 800e6cc:	200015ac 	.word	0x200015ac
 800e6d0:	200015a8 	.word	0x200015a8
 800e6d4:	200016bc 	.word	0x200016bc
 800e6d8:	200016b8 	.word	0x200016b8

0800e6dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b087      	sub	sp, #28
 800e6e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6e2:	4b27      	ldr	r3, [pc, #156]	@ (800e780 <vTaskSwitchContext+0xa4>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6ea:	4b26      	ldr	r3, [pc, #152]	@ (800e784 <vTaskSwitchContext+0xa8>)
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6f0:	e040      	b.n	800e774 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e6f2:	4b24      	ldr	r3, [pc, #144]	@ (800e784 <vTaskSwitchContext+0xa8>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6f8:	4b23      	ldr	r3, [pc, #140]	@ (800e788 <vTaskSwitchContext+0xac>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	fab3 f383 	clz	r3, r3
 800e704:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e706:	7afb      	ldrb	r3, [r7, #11]
 800e708:	f1c3 031f 	rsb	r3, r3, #31
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	491f      	ldr	r1, [pc, #124]	@ (800e78c <vTaskSwitchContext+0xb0>)
 800e710:	697a      	ldr	r2, [r7, #20]
 800e712:	4613      	mov	r3, r2
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4413      	add	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	440b      	add	r3, r1
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10b      	bne.n	800e73a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	607b      	str	r3, [r7, #4]
}
 800e734:	bf00      	nop
 800e736:	bf00      	nop
 800e738:	e7fd      	b.n	800e736 <vTaskSwitchContext+0x5a>
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	4613      	mov	r3, r2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	4413      	add	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4a11      	ldr	r2, [pc, #68]	@ (800e78c <vTaskSwitchContext+0xb0>)
 800e746:	4413      	add	r3, r2
 800e748:	613b      	str	r3, [r7, #16]
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	605a      	str	r2, [r3, #4]
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	3308      	adds	r3, #8
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d104      	bne.n	800e76a <vTaskSwitchContext+0x8e>
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	605a      	str	r2, [r3, #4]
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	4a07      	ldr	r2, [pc, #28]	@ (800e790 <vTaskSwitchContext+0xb4>)
 800e772:	6013      	str	r3, [r2, #0]
}
 800e774:	bf00      	nop
 800e776:	371c      	adds	r7, #28
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	200016d0 	.word	0x200016d0
 800e784:	200016bc 	.word	0x200016bc
 800e788:	200016b0 	.word	0x200016b0
 800e78c:	200015ac 	.word	0x200015ac
 800e790:	200015a8 	.word	0x200015a8

0800e794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10b      	bne.n	800e7bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	60fb      	str	r3, [r7, #12]
}
 800e7b6:	bf00      	nop
 800e7b8:	bf00      	nop
 800e7ba:	e7fd      	b.n	800e7b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7bc:	4b07      	ldr	r3, [pc, #28]	@ (800e7dc <vTaskPlaceOnEventList+0x48>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3318      	adds	r3, #24
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7fe fbef 	bl	800cfa8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	6838      	ldr	r0, [r7, #0]
 800e7ce:	f000 fc4d 	bl	800f06c <prvAddCurrentTaskToDelayedList>
}
 800e7d2:	bf00      	nop
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	200015a8 	.word	0x200015a8

0800e7e0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d10b      	bne.n	800e80a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	617b      	str	r3, [r7, #20]
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop
 800e808:	e7fd      	b.n	800e806 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e80a:	4b12      	ldr	r3, [pc, #72]	@ (800e854 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10b      	bne.n	800e82a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	613b      	str	r3, [r7, #16]
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop
 800e828:	e7fd      	b.n	800e826 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e82a:	4b0b      	ldr	r3, [pc, #44]	@ (800e858 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e834:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e836:	4b08      	ldr	r3, [pc, #32]	@ (800e858 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3318      	adds	r3, #24
 800e83c:	4619      	mov	r1, r3
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f7fe fb8e 	bl	800cf60 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e844:	2101      	movs	r1, #1
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 fc10 	bl	800f06c <prvAddCurrentTaskToDelayedList>
}
 800e84c:	bf00      	nop
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	200016d0 	.word	0x200016d0
 800e858:	200015a8 	.word	0x200015a8

0800e85c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10b      	bne.n	800e886 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	617b      	str	r3, [r7, #20]
}
 800e880:	bf00      	nop
 800e882:	bf00      	nop
 800e884:	e7fd      	b.n	800e882 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e886:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3318      	adds	r3, #24
 800e88c:	4619      	mov	r1, r3
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7fe fb66 	bl	800cf60 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e89a:	f04f 33ff 	mov.w	r3, #4294967295
 800e89e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8a0:	6879      	ldr	r1, [r7, #4]
 800e8a2:	68b8      	ldr	r0, [r7, #8]
 800e8a4:	f000 fbe2 	bl	800f06c <prvAddCurrentTaskToDelayedList>
	}
 800e8a8:	bf00      	nop
 800e8aa:	3718      	adds	r7, #24
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	200015a8 	.word	0x200015a8

0800e8b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10b      	bne.n	800e8e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	60fb      	str	r3, [r7, #12]
}
 800e8dc:	bf00      	nop
 800e8de:	bf00      	nop
 800e8e0:	e7fd      	b.n	800e8de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	3318      	adds	r3, #24
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe fb97 	bl	800d01a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8ec:	4b1d      	ldr	r3, [pc, #116]	@ (800e964 <xTaskRemoveFromEventList+0xb0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d11c      	bne.n	800e92e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fe fb8e 	bl	800d01a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e902:	2201      	movs	r2, #1
 800e904:	409a      	lsls	r2, r3
 800e906:	4b18      	ldr	r3, [pc, #96]	@ (800e968 <xTaskRemoveFromEventList+0xb4>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	4a16      	ldr	r2, [pc, #88]	@ (800e968 <xTaskRemoveFromEventList+0xb4>)
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e914:	4613      	mov	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4413      	add	r3, r2
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	4a13      	ldr	r2, [pc, #76]	@ (800e96c <xTaskRemoveFromEventList+0xb8>)
 800e91e:	441a      	add	r2, r3
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	3304      	adds	r3, #4
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f7fe fb1a 	bl	800cf60 <vListInsertEnd>
 800e92c:	e005      	b.n	800e93a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3318      	adds	r3, #24
 800e932:	4619      	mov	r1, r3
 800e934:	480e      	ldr	r0, [pc, #56]	@ (800e970 <xTaskRemoveFromEventList+0xbc>)
 800e936:	f7fe fb13 	bl	800cf60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93e:	4b0d      	ldr	r3, [pc, #52]	@ (800e974 <xTaskRemoveFromEventList+0xc0>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e944:	429a      	cmp	r2, r3
 800e946:	d905      	bls.n	800e954 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e948:	2301      	movs	r3, #1
 800e94a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e94c:	4b0a      	ldr	r3, [pc, #40]	@ (800e978 <xTaskRemoveFromEventList+0xc4>)
 800e94e:	2201      	movs	r2, #1
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	e001      	b.n	800e958 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e954:	2300      	movs	r3, #0
 800e956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e958:	697b      	ldr	r3, [r7, #20]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3718      	adds	r7, #24
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	200016d0 	.word	0x200016d0
 800e968:	200016b0 	.word	0x200016b0
 800e96c:	200015ac 	.word	0x200015ac
 800e970:	20001668 	.word	0x20001668
 800e974:	200015a8 	.word	0x200015a8
 800e978:	200016bc 	.word	0x200016bc

0800e97c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e986:	4b2a      	ldr	r3, [pc, #168]	@ (800ea30 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10b      	bne.n	800e9a6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	613b      	str	r3, [r7, #16]
}
 800e9a0:	bf00      	nop
 800e9a2:	bf00      	nop
 800e9a4:	e7fd      	b.n	800e9a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10b      	bne.n	800e9d4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	60fb      	str	r3, [r7, #12]
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	e7fd      	b.n	800e9d0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7fe fb20 	bl	800d01a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fb1b 	bl	800d01a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	409a      	lsls	r2, r3
 800e9ec:	4b11      	ldr	r3, [pc, #68]	@ (800ea34 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	4a10      	ldr	r2, [pc, #64]	@ (800ea34 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4413      	add	r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4a0d      	ldr	r2, [pc, #52]	@ (800ea38 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800ea04:	441a      	add	r2, r3
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	3304      	adds	r3, #4
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	f7fe faa7 	bl	800cf60 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea16:	4b09      	ldr	r3, [pc, #36]	@ (800ea3c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d902      	bls.n	800ea26 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ea20:	4b07      	ldr	r3, [pc, #28]	@ (800ea40 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	601a      	str	r2, [r3, #0]
	}
}
 800ea26:	bf00      	nop
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	200016d0 	.word	0x200016d0
 800ea34:	200016b0 	.word	0x200016b0
 800ea38:	200015ac 	.word	0x200015ac
 800ea3c:	200015a8 	.word	0x200015a8
 800ea40:	200016bc 	.word	0x200016bc

0800ea44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea4c:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <vTaskInternalSetTimeOutState+0x24>)
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea54:	4b05      	ldr	r3, [pc, #20]	@ (800ea6c <vTaskInternalSetTimeOutState+0x28>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	605a      	str	r2, [r3, #4]
}
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr
 800ea68:	200016c0 	.word	0x200016c0
 800ea6c:	200016ac 	.word	0x200016ac

0800ea70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b088      	sub	sp, #32
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10b      	bne.n	800ea98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	613b      	str	r3, [r7, #16]
}
 800ea92:	bf00      	nop
 800ea94:	bf00      	nop
 800ea96:	e7fd      	b.n	800ea94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10b      	bne.n	800eab6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	60fb      	str	r3, [r7, #12]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eab6:	f000 ffc7 	bl	800fa48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eaba:	4b1d      	ldr	r3, [pc, #116]	@ (800eb30 <xTaskCheckForTimeOut+0xc0>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead2:	d102      	bne.n	800eada <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ead4:	2300      	movs	r3, #0
 800ead6:	61fb      	str	r3, [r7, #28]
 800ead8:	e023      	b.n	800eb22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	4b15      	ldr	r3, [pc, #84]	@ (800eb34 <xTaskCheckForTimeOut+0xc4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d007      	beq.n	800eaf6 <xTaskCheckForTimeOut+0x86>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	69ba      	ldr	r2, [r7, #24]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d302      	bcc.n	800eaf6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	61fb      	str	r3, [r7, #28]
 800eaf4:	e015      	b.n	800eb22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d20b      	bcs.n	800eb18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	1ad2      	subs	r2, r2, r3
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7ff ff99 	bl	800ea44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb12:	2300      	movs	r3, #0
 800eb14:	61fb      	str	r3, [r7, #28]
 800eb16:	e004      	b.n	800eb22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb22:	f000 ffc3 	bl	800faac <vPortExitCritical>

	return xReturn;
 800eb26:	69fb      	ldr	r3, [r7, #28]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	200016ac 	.word	0x200016ac
 800eb34:	200016c0 	.word	0x200016c0

0800eb38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb3c:	4b03      	ldr	r3, [pc, #12]	@ (800eb4c <vTaskMissedYield+0x14>)
 800eb3e:	2201      	movs	r2, #1
 800eb40:	601a      	str	r2, [r3, #0]
}
 800eb42:	bf00      	nop
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	200016bc 	.word	0x200016bc

0800eb50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb58:	f000 f852 	bl	800ec00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb5c:	4b06      	ldr	r3, [pc, #24]	@ (800eb78 <prvIdleTask+0x28>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d9f9      	bls.n	800eb58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb64:	4b05      	ldr	r3, [pc, #20]	@ (800eb7c <prvIdleTask+0x2c>)
 800eb66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb6a:	601a      	str	r2, [r3, #0]
 800eb6c:	f3bf 8f4f 	dsb	sy
 800eb70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb74:	e7f0      	b.n	800eb58 <prvIdleTask+0x8>
 800eb76:	bf00      	nop
 800eb78:	200015ac 	.word	0x200015ac
 800eb7c:	e000ed04 	.word	0xe000ed04

0800eb80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb86:	2300      	movs	r3, #0
 800eb88:	607b      	str	r3, [r7, #4]
 800eb8a:	e00c      	b.n	800eba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4413      	add	r3, r2
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	4a12      	ldr	r2, [pc, #72]	@ (800ebe0 <prvInitialiseTaskLists+0x60>)
 800eb98:	4413      	add	r3, r2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fe f9b3 	bl	800cf06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	3301      	adds	r3, #1
 800eba4:	607b      	str	r3, [r7, #4]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b06      	cmp	r3, #6
 800ebaa:	d9ef      	bls.n	800eb8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebac:	480d      	ldr	r0, [pc, #52]	@ (800ebe4 <prvInitialiseTaskLists+0x64>)
 800ebae:	f7fe f9aa 	bl	800cf06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebb2:	480d      	ldr	r0, [pc, #52]	@ (800ebe8 <prvInitialiseTaskLists+0x68>)
 800ebb4:	f7fe f9a7 	bl	800cf06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebb8:	480c      	ldr	r0, [pc, #48]	@ (800ebec <prvInitialiseTaskLists+0x6c>)
 800ebba:	f7fe f9a4 	bl	800cf06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebbe:	480c      	ldr	r0, [pc, #48]	@ (800ebf0 <prvInitialiseTaskLists+0x70>)
 800ebc0:	f7fe f9a1 	bl	800cf06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebc4:	480b      	ldr	r0, [pc, #44]	@ (800ebf4 <prvInitialiseTaskLists+0x74>)
 800ebc6:	f7fe f99e 	bl	800cf06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebca:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf8 <prvInitialiseTaskLists+0x78>)
 800ebcc:	4a05      	ldr	r2, [pc, #20]	@ (800ebe4 <prvInitialiseTaskLists+0x64>)
 800ebce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebd0:	4b0a      	ldr	r3, [pc, #40]	@ (800ebfc <prvInitialiseTaskLists+0x7c>)
 800ebd2:	4a05      	ldr	r2, [pc, #20]	@ (800ebe8 <prvInitialiseTaskLists+0x68>)
 800ebd4:	601a      	str	r2, [r3, #0]
}
 800ebd6:	bf00      	nop
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	200015ac 	.word	0x200015ac
 800ebe4:	20001638 	.word	0x20001638
 800ebe8:	2000164c 	.word	0x2000164c
 800ebec:	20001668 	.word	0x20001668
 800ebf0:	2000167c 	.word	0x2000167c
 800ebf4:	20001694 	.word	0x20001694
 800ebf8:	20001660 	.word	0x20001660
 800ebfc:	20001664 	.word	0x20001664

0800ec00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec06:	e019      	b.n	800ec3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec08:	f000 ff1e 	bl	800fa48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec0c:	4b10      	ldr	r3, [pc, #64]	@ (800ec50 <prvCheckTasksWaitingTermination+0x50>)
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3304      	adds	r3, #4
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fe f9fe 	bl	800d01a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <prvCheckTasksWaitingTermination+0x54>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3b01      	subs	r3, #1
 800ec24:	4a0b      	ldr	r2, [pc, #44]	@ (800ec54 <prvCheckTasksWaitingTermination+0x54>)
 800ec26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec28:	4b0b      	ldr	r3, [pc, #44]	@ (800ec58 <prvCheckTasksWaitingTermination+0x58>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ec58 <prvCheckTasksWaitingTermination+0x58>)
 800ec30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec32:	f000 ff3b 	bl	800faac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 f810 	bl	800ec5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec3c:	4b06      	ldr	r3, [pc, #24]	@ (800ec58 <prvCheckTasksWaitingTermination+0x58>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1e1      	bne.n	800ec08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	2000167c 	.word	0x2000167c
 800ec54:	200016a8 	.word	0x200016a8
 800ec58:	20001690 	.word	0x20001690

0800ec5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f001 f8dd 	bl	800fe28 <vPortFree>
			vPortFree( pxTCB );
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f001 f8da 	bl	800fe28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec74:	bf00      	nop
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec82:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb4 <prvResetNextTaskUnblockTime+0x38>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d104      	bne.n	800ec96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ecb8 <prvResetNextTaskUnblockTime+0x3c>)
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec94:	e008      	b.n	800eca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec96:	4b07      	ldr	r3, [pc, #28]	@ (800ecb4 <prvResetNextTaskUnblockTime+0x38>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4a04      	ldr	r2, [pc, #16]	@ (800ecb8 <prvResetNextTaskUnblockTime+0x3c>)
 800eca6:	6013      	str	r3, [r2, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	20001660 	.word	0x20001660
 800ecb8:	200016c8 	.word	0x200016c8

0800ecbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecc2:	4b0b      	ldr	r3, [pc, #44]	@ (800ecf0 <xTaskGetSchedulerState+0x34>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecca:	2301      	movs	r3, #1
 800eccc:	607b      	str	r3, [r7, #4]
 800ecce:	e008      	b.n	800ece2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecd0:	4b08      	ldr	r3, [pc, #32]	@ (800ecf4 <xTaskGetSchedulerState+0x38>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d102      	bne.n	800ecde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecd8:	2302      	movs	r3, #2
 800ecda:	607b      	str	r3, [r7, #4]
 800ecdc:	e001      	b.n	800ece2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecde:	2300      	movs	r3, #0
 800ece0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ece2:	687b      	ldr	r3, [r7, #4]
	}
 800ece4:	4618      	mov	r0, r3
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr
 800ecf0:	200016b4 	.word	0x200016b4
 800ecf4:	200016d0 	.word	0x200016d0

0800ecf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ed04:	2300      	movs	r3, #0
 800ed06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d05e      	beq.n	800edcc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed12:	4b31      	ldr	r3, [pc, #196]	@ (800edd8 <xTaskPriorityInherit+0xe0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d24e      	bcs.n	800edba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	db06      	blt.n	800ed32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed24:	4b2c      	ldr	r3, [pc, #176]	@ (800edd8 <xTaskPriorityInherit+0xe0>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed2a:	f1c3 0207 	rsb	r2, r3, #7
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	6959      	ldr	r1, [r3, #20]
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4a26      	ldr	r2, [pc, #152]	@ (800eddc <xTaskPriorityInherit+0xe4>)
 800ed44:	4413      	add	r3, r2
 800ed46:	4299      	cmp	r1, r3
 800ed48:	d12f      	bne.n	800edaa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fe f963 	bl	800d01a <uxListRemove>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d10a      	bne.n	800ed70 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5e:	2201      	movs	r2, #1
 800ed60:	fa02 f303 	lsl.w	r3, r2, r3
 800ed64:	43da      	mvns	r2, r3
 800ed66:	4b1e      	ldr	r3, [pc, #120]	@ (800ede0 <xTaskPriorityInherit+0xe8>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	4a1c      	ldr	r2, [pc, #112]	@ (800ede0 <xTaskPriorityInherit+0xe8>)
 800ed6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed70:	4b19      	ldr	r3, [pc, #100]	@ (800edd8 <xTaskPriorityInherit+0xe0>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7e:	2201      	movs	r2, #1
 800ed80:	409a      	lsls	r2, r3
 800ed82:	4b17      	ldr	r3, [pc, #92]	@ (800ede0 <xTaskPriorityInherit+0xe8>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	4a15      	ldr	r2, [pc, #84]	@ (800ede0 <xTaskPriorityInherit+0xe8>)
 800ed8a:	6013      	str	r3, [r2, #0]
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed90:	4613      	mov	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4a10      	ldr	r2, [pc, #64]	@ (800eddc <xTaskPriorityInherit+0xe4>)
 800ed9a:	441a      	add	r2, r3
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f7fe f8dc 	bl	800cf60 <vListInsertEnd>
 800eda8:	e004      	b.n	800edb4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edaa:	4b0b      	ldr	r3, [pc, #44]	@ (800edd8 <xTaskPriorityInherit+0xe0>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800edb4:	2301      	movs	r3, #1
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	e008      	b.n	800edcc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800edbe:	4b06      	ldr	r3, [pc, #24]	@ (800edd8 <xTaskPriorityInherit+0xe0>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d201      	bcs.n	800edcc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800edc8:	2301      	movs	r3, #1
 800edca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edcc:	68fb      	ldr	r3, [r7, #12]
	}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	200015a8 	.word	0x200015a8
 800eddc:	200015ac 	.word	0x200015ac
 800ede0:	200016b0 	.word	0x200016b0

0800ede4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edf0:	2300      	movs	r3, #0
 800edf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d070      	beq.n	800eedc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edfa:	4b3b      	ldr	r3, [pc, #236]	@ (800eee8 <xTaskPriorityDisinherit+0x104>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	693a      	ldr	r2, [r7, #16]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d00b      	beq.n	800ee1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ee04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	60fb      	str	r3, [r7, #12]
}
 800ee16:	bf00      	nop
 800ee18:	bf00      	nop
 800ee1a:	e7fd      	b.n	800ee18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10b      	bne.n	800ee3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	60bb      	str	r3, [r7, #8]
}
 800ee36:	bf00      	nop
 800ee38:	bf00      	nop
 800ee3a:	e7fd      	b.n	800ee38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee40:	1e5a      	subs	r2, r3, #1
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d044      	beq.n	800eedc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d140      	bne.n	800eedc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe f8db 	bl	800d01a <uxListRemove>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d115      	bne.n	800ee96 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee6e:	491f      	ldr	r1, [pc, #124]	@ (800eeec <xTaskPriorityDisinherit+0x108>)
 800ee70:	4613      	mov	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4413      	add	r3, r2
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	440b      	add	r3, r1
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d10a      	bne.n	800ee96 <xTaskPriorityDisinherit+0xb2>
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee84:	2201      	movs	r2, #1
 800ee86:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8a:	43da      	mvns	r2, r3
 800ee8c:	4b18      	ldr	r3, [pc, #96]	@ (800eef0 <xTaskPriorityDisinherit+0x10c>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4013      	ands	r3, r2
 800ee92:	4a17      	ldr	r2, [pc, #92]	@ (800eef0 <xTaskPriorityDisinherit+0x10c>)
 800ee94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea2:	f1c3 0207 	rsb	r2, r3, #7
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeae:	2201      	movs	r2, #1
 800eeb0:	409a      	lsls	r2, r3
 800eeb2:	4b0f      	ldr	r3, [pc, #60]	@ (800eef0 <xTaskPriorityDisinherit+0x10c>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	4a0d      	ldr	r2, [pc, #52]	@ (800eef0 <xTaskPriorityDisinherit+0x10c>)
 800eeba:	6013      	str	r3, [r2, #0]
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec0:	4613      	mov	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4a08      	ldr	r2, [pc, #32]	@ (800eeec <xTaskPriorityDisinherit+0x108>)
 800eeca:	441a      	add	r2, r3
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f7fe f844 	bl	800cf60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eed8:	2301      	movs	r3, #1
 800eeda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eedc:	697b      	ldr	r3, [r7, #20]
	}
 800eede:	4618      	mov	r0, r3
 800eee0:	3718      	adds	r7, #24
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	200015a8 	.word	0x200015a8
 800eeec:	200015ac 	.word	0x200015ac
 800eef0:	200016b0 	.word	0x200016b0

0800eef4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ef02:	2301      	movs	r3, #1
 800ef04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d079      	beq.n	800f000 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d10b      	bne.n	800ef2c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ef14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	60fb      	str	r3, [r7, #12]
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	e7fd      	b.n	800ef28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef30:	683a      	ldr	r2, [r7, #0]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d902      	bls.n	800ef3c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	61fb      	str	r3, [r7, #28]
 800ef3a:	e002      	b.n	800ef42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef46:	69fa      	ldr	r2, [r7, #28]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d059      	beq.n	800f000 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d154      	bne.n	800f000 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef56:	4b2c      	ldr	r3, [pc, #176]	@ (800f008 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	69ba      	ldr	r2, [r7, #24]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d10b      	bne.n	800ef78 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	60bb      	str	r3, [r7, #8]
}
 800ef72:	bf00      	nop
 800ef74:	bf00      	nop
 800ef76:	e7fd      	b.n	800ef74 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	69fa      	ldr	r2, [r7, #28]
 800ef82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	699b      	ldr	r3, [r3, #24]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	db04      	blt.n	800ef96 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	f1c3 0207 	rsb	r2, r3, #7
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	6959      	ldr	r1, [r3, #20]
 800ef9a:	693a      	ldr	r2, [r7, #16]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	4413      	add	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	4a19      	ldr	r2, [pc, #100]	@ (800f00c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800efa6:	4413      	add	r3, r2
 800efa8:	4299      	cmp	r1, r3
 800efaa:	d129      	bne.n	800f000 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	3304      	adds	r3, #4
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7fe f832 	bl	800d01a <uxListRemove>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10a      	bne.n	800efd2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efc0:	2201      	movs	r2, #1
 800efc2:	fa02 f303 	lsl.w	r3, r2, r3
 800efc6:	43da      	mvns	r2, r3
 800efc8:	4b11      	ldr	r3, [pc, #68]	@ (800f010 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4013      	ands	r3, r2
 800efce:	4a10      	ldr	r2, [pc, #64]	@ (800f010 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800efd0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd6:	2201      	movs	r2, #1
 800efd8:	409a      	lsls	r2, r3
 800efda:	4b0d      	ldr	r3, [pc, #52]	@ (800f010 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4313      	orrs	r3, r2
 800efe0:	4a0b      	ldr	r2, [pc, #44]	@ (800f010 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800efe2:	6013      	str	r3, [r2, #0]
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efe8:	4613      	mov	r3, r2
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	4413      	add	r3, r2
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4a06      	ldr	r2, [pc, #24]	@ (800f00c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eff2:	441a      	add	r2, r3
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	3304      	adds	r3, #4
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f7fd ffb0 	bl	800cf60 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f000:	bf00      	nop
 800f002:	3720      	adds	r7, #32
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	200015a8 	.word	0x200015a8
 800f00c:	200015ac 	.word	0x200015ac
 800f010:	200016b0 	.word	0x200016b0

0800f014 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f01a:	4b09      	ldr	r3, [pc, #36]	@ (800f040 <uxTaskResetEventItemValue+0x2c>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	699b      	ldr	r3, [r3, #24]
 800f020:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f022:	4b07      	ldr	r3, [pc, #28]	@ (800f040 <uxTaskResetEventItemValue+0x2c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f028:	4b05      	ldr	r3, [pc, #20]	@ (800f040 <uxTaskResetEventItemValue+0x2c>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f1c2 0207 	rsb	r2, r2, #7
 800f030:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f032:	687b      	ldr	r3, [r7, #4]
}
 800f034:	4618      	mov	r0, r3
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	200015a8 	.word	0x200015a8

0800f044 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f044:	b480      	push	{r7}
 800f046:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f048:	4b07      	ldr	r3, [pc, #28]	@ (800f068 <pvTaskIncrementMutexHeldCount+0x24>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d004      	beq.n	800f05a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f050:	4b05      	ldr	r3, [pc, #20]	@ (800f068 <pvTaskIncrementMutexHeldCount+0x24>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f056:	3201      	adds	r2, #1
 800f058:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f05a:	4b03      	ldr	r3, [pc, #12]	@ (800f068 <pvTaskIncrementMutexHeldCount+0x24>)
 800f05c:	681b      	ldr	r3, [r3, #0]
	}
 800f05e:	4618      	mov	r0, r3
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	200015a8 	.word	0x200015a8

0800f06c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f076:	4b29      	ldr	r3, [pc, #164]	@ (800f11c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f07c:	4b28      	ldr	r3, [pc, #160]	@ (800f120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	3304      	adds	r3, #4
 800f082:	4618      	mov	r0, r3
 800f084:	f7fd ffc9 	bl	800d01a <uxListRemove>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10b      	bne.n	800f0a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f08e:	4b24      	ldr	r3, [pc, #144]	@ (800f120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f094:	2201      	movs	r2, #1
 800f096:	fa02 f303 	lsl.w	r3, r2, r3
 800f09a:	43da      	mvns	r2, r3
 800f09c:	4b21      	ldr	r3, [pc, #132]	@ (800f124 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4013      	ands	r3, r2
 800f0a2:	4a20      	ldr	r2, [pc, #128]	@ (800f124 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f0a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ac:	d10a      	bne.n	800f0c4 <prvAddCurrentTaskToDelayedList+0x58>
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d007      	beq.n	800f0c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800f120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	481a      	ldr	r0, [pc, #104]	@ (800f128 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f0be:	f7fd ff4f 	bl	800cf60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f0c2:	e026      	b.n	800f112 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f0cc:	4b14      	ldr	r3, [pc, #80]	@ (800f120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f0d4:	68ba      	ldr	r2, [r7, #8]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d209      	bcs.n	800f0f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0dc:	4b13      	ldr	r3, [pc, #76]	@ (800f12c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7fd ff5d 	bl	800cfa8 <vListInsert>
}
 800f0ee:	e010      	b.n	800f112 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0f0:	4b0f      	ldr	r3, [pc, #60]	@ (800f130 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	f7fd ff53 	bl	800cfa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f102:	4b0c      	ldr	r3, [pc, #48]	@ (800f134 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d202      	bcs.n	800f112 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f10c:	4a09      	ldr	r2, [pc, #36]	@ (800f134 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6013      	str	r3, [r2, #0]
}
 800f112:	bf00      	nop
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	200016ac 	.word	0x200016ac
 800f120:	200015a8 	.word	0x200015a8
 800f124:	200016b0 	.word	0x200016b0
 800f128:	20001694 	.word	0x20001694
 800f12c:	20001664 	.word	0x20001664
 800f130:	20001660 	.word	0x20001660
 800f134:	200016c8 	.word	0x200016c8

0800f138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800f13e:	2300      	movs	r3, #0
 800f140:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f142:	f000 fafb 	bl	800f73c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f146:	4b11      	ldr	r3, [pc, #68]	@ (800f18c <xTimerCreateTimerTask+0x54>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00a      	beq.n	800f164 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800f14e:	4b10      	ldr	r3, [pc, #64]	@ (800f190 <xTimerCreateTimerTask+0x58>)
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	2306      	movs	r3, #6
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	2300      	movs	r3, #0
 800f158:	2280      	movs	r2, #128	@ 0x80
 800f15a:	490e      	ldr	r1, [pc, #56]	@ (800f194 <xTimerCreateTimerTask+0x5c>)
 800f15c:	480e      	ldr	r0, [pc, #56]	@ (800f198 <xTimerCreateTimerTask+0x60>)
 800f15e:	f7fe feed 	bl	800df3c <xTaskCreate>
 800f162:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10b      	bne.n	800f182 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	603b      	str	r3, [r7, #0]
}
 800f17c:	bf00      	nop
 800f17e:	bf00      	nop
 800f180:	e7fd      	b.n	800f17e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800f182:	687b      	ldr	r3, [r7, #4]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	20001704 	.word	0x20001704
 800f190:	20001708 	.word	0x20001708
 800f194:	08022510 	.word	0x08022510
 800f198:	0800f2d5 	.word	0x0800f2d5

0800f19c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b08a      	sub	sp, #40	@ 0x28
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
 800f1a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10b      	bne.n	800f1cc <xTimerGenericCommand+0x30>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	623b      	str	r3, [r7, #32]
}
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	e7fd      	b.n	800f1c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f1cc:	4b19      	ldr	r3, [pc, #100]	@ (800f234 <xTimerGenericCommand+0x98>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d02a      	beq.n	800f22a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b05      	cmp	r3, #5
 800f1e4:	dc18      	bgt.n	800f218 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1e6:	f7ff fd69 	bl	800ecbc <xTaskGetSchedulerState>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d109      	bne.n	800f204 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1f0:	4b10      	ldr	r3, [pc, #64]	@ (800f234 <xTimerGenericCommand+0x98>)
 800f1f2:	6818      	ldr	r0, [r3, #0]
 800f1f4:	f107 0110 	add.w	r1, r7, #16
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1fc:	f7fe f82a 	bl	800d254 <xQueueGenericSend>
 800f200:	6278      	str	r0, [r7, #36]	@ 0x24
 800f202:	e012      	b.n	800f22a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f204:	4b0b      	ldr	r3, [pc, #44]	@ (800f234 <xTimerGenericCommand+0x98>)
 800f206:	6818      	ldr	r0, [r3, #0]
 800f208:	f107 0110 	add.w	r1, r7, #16
 800f20c:	2300      	movs	r3, #0
 800f20e:	2200      	movs	r2, #0
 800f210:	f7fe f820 	bl	800d254 <xQueueGenericSend>
 800f214:	6278      	str	r0, [r7, #36]	@ 0x24
 800f216:	e008      	b.n	800f22a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f218:	4b06      	ldr	r3, [pc, #24]	@ (800f234 <xTimerGenericCommand+0x98>)
 800f21a:	6818      	ldr	r0, [r3, #0]
 800f21c:	f107 0110 	add.w	r1, r7, #16
 800f220:	2300      	movs	r3, #0
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	f7fe f918 	bl	800d458 <xQueueGenericSendFromISR>
 800f228:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3728      	adds	r7, #40	@ 0x28
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	20001704 	.word	0x20001704

0800f238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b088      	sub	sp, #32
 800f23c:	af02      	add	r7, sp, #8
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f242:	4b23      	ldr	r3, [pc, #140]	@ (800f2d0 <prvProcessExpiredTimer+0x98>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	3304      	adds	r3, #4
 800f250:	4618      	mov	r0, r3
 800f252:	f7fd fee2 	bl	800d01a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f25c:	f003 0304 	and.w	r3, r3, #4
 800f260:	2b00      	cmp	r3, #0
 800f262:	d023      	beq.n	800f2ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	699a      	ldr	r2, [r3, #24]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	18d1      	adds	r1, r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	f000 f8d5 	bl	800f420 <prvInsertTimerInActiveList>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d020      	beq.n	800f2be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f27c:	2300      	movs	r3, #0
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	2300      	movs	r3, #0
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	2100      	movs	r1, #0
 800f286:	6978      	ldr	r0, [r7, #20]
 800f288:	f7ff ff88 	bl	800f19c <xTimerGenericCommand>
 800f28c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d114      	bne.n	800f2be <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	60fb      	str	r3, [r7, #12]
}
 800f2a6:	bf00      	nop
 800f2a8:	bf00      	nop
 800f2aa:	e7fd      	b.n	800f2a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2b2:	f023 0301 	bic.w	r3, r3, #1
 800f2b6:	b2da      	uxtb	r2, r3
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	6978      	ldr	r0, [r7, #20]
 800f2c4:	4798      	blx	r3
}
 800f2c6:	bf00      	nop
 800f2c8:	3718      	adds	r7, #24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	200016fc 	.word	0x200016fc

0800f2d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2dc:	f107 0308 	add.w	r3, r7, #8
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 f859 	bl	800f398 <prvGetNextExpireTime>
 800f2e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 f805 	bl	800f2fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2f2:	f000 f8d7 	bl	800f4a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2f6:	bf00      	nop
 800f2f8:	e7f0      	b.n	800f2dc <prvTimerTask+0x8>
	...

0800f2fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f306:	f7ff f861 	bl	800e3cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f30a:	f107 0308 	add.w	r3, r7, #8
 800f30e:	4618      	mov	r0, r3
 800f310:	f000 f866 	bl	800f3e0 <prvSampleTimeNow>
 800f314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d130      	bne.n	800f37e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10a      	bne.n	800f338 <prvProcessTimerOrBlockTask+0x3c>
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	429a      	cmp	r2, r3
 800f328:	d806      	bhi.n	800f338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f32a:	f7ff f85d 	bl	800e3e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f32e:	68f9      	ldr	r1, [r7, #12]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7ff ff81 	bl	800f238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f336:	e024      	b.n	800f382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d008      	beq.n	800f350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f33e:	4b13      	ldr	r3, [pc, #76]	@ (800f38c <prvProcessTimerOrBlockTask+0x90>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <prvProcessTimerOrBlockTask+0x50>
 800f348:	2301      	movs	r3, #1
 800f34a:	e000      	b.n	800f34e <prvProcessTimerOrBlockTask+0x52>
 800f34c:	2300      	movs	r3, #0
 800f34e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f350:	4b0f      	ldr	r3, [pc, #60]	@ (800f390 <prvProcessTimerOrBlockTask+0x94>)
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	4619      	mov	r1, r3
 800f35e:	f7fe fdb9 	bl	800ded4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f362:	f7ff f841 	bl	800e3e8 <xTaskResumeAll>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d10a      	bne.n	800f382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f36c:	4b09      	ldr	r3, [pc, #36]	@ (800f394 <prvProcessTimerOrBlockTask+0x98>)
 800f36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f372:	601a      	str	r2, [r3, #0]
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	f3bf 8f6f 	isb	sy
}
 800f37c:	e001      	b.n	800f382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f37e:	f7ff f833 	bl	800e3e8 <xTaskResumeAll>
}
 800f382:	bf00      	nop
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20001700 	.word	0x20001700
 800f390:	20001704 	.word	0x20001704
 800f394:	e000ed04 	.word	0xe000ed04

0800f398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800f3dc <prvGetNextExpireTime+0x44>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d101      	bne.n	800f3ae <prvGetNextExpireTime+0x16>
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	e000      	b.n	800f3b0 <prvGetNextExpireTime+0x18>
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d105      	bne.n	800f3c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3bc:	4b07      	ldr	r3, [pc, #28]	@ (800f3dc <prvGetNextExpireTime+0x44>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	60fb      	str	r3, [r7, #12]
 800f3c6:	e001      	b.n	800f3cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	200016fc 	.word	0x200016fc

0800f3e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f3e8:	f7ff f89c 	bl	800e524 <xTaskGetTickCount>
 800f3ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f41c <prvSampleTimeNow+0x3c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d205      	bcs.n	800f404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3f8:	f000 f93a 	bl	800f670 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	e002      	b.n	800f40a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f40a:	4a04      	ldr	r2, [pc, #16]	@ (800f41c <prvSampleTimeNow+0x3c>)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f410:	68fb      	ldr	r3, [r7, #12]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	2000170c 	.word	0x2000170c

0800f420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
 800f42c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f42e:	2300      	movs	r3, #0
 800f430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	429a      	cmp	r2, r3
 800f444:	d812      	bhi.n	800f46c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	1ad2      	subs	r2, r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	699b      	ldr	r3, [r3, #24]
 800f450:	429a      	cmp	r2, r3
 800f452:	d302      	bcc.n	800f45a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f454:	2301      	movs	r3, #1
 800f456:	617b      	str	r3, [r7, #20]
 800f458:	e01b      	b.n	800f492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f45a:	4b10      	ldr	r3, [pc, #64]	@ (800f49c <prvInsertTimerInActiveList+0x7c>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	3304      	adds	r3, #4
 800f462:	4619      	mov	r1, r3
 800f464:	4610      	mov	r0, r2
 800f466:	f7fd fd9f 	bl	800cfa8 <vListInsert>
 800f46a:	e012      	b.n	800f492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	429a      	cmp	r2, r3
 800f472:	d206      	bcs.n	800f482 <prvInsertTimerInActiveList+0x62>
 800f474:	68ba      	ldr	r2, [r7, #8]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d302      	bcc.n	800f482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f47c:	2301      	movs	r3, #1
 800f47e:	617b      	str	r3, [r7, #20]
 800f480:	e007      	b.n	800f492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f482:	4b07      	ldr	r3, [pc, #28]	@ (800f4a0 <prvInsertTimerInActiveList+0x80>)
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	3304      	adds	r3, #4
 800f48a:	4619      	mov	r1, r3
 800f48c:	4610      	mov	r0, r2
 800f48e:	f7fd fd8b 	bl	800cfa8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f492:	697b      	ldr	r3, [r7, #20]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3718      	adds	r7, #24
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	20001700 	.word	0x20001700
 800f4a0:	200016fc 	.word	0x200016fc

0800f4a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b08e      	sub	sp, #56	@ 0x38
 800f4a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4aa:	e0ce      	b.n	800f64a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	da19      	bge.n	800f4e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f4b2:	1d3b      	adds	r3, r7, #4
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10b      	bne.n	800f4d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	61fb      	str	r3, [r7, #28]
}
 800f4d0:	bf00      	nop
 800f4d2:	bf00      	nop
 800f4d4:	e7fd      	b.n	800f4d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4dc:	6850      	ldr	r0, [r2, #4]
 800f4de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4e0:	6892      	ldr	r2, [r2, #8]
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f2c0 80ae 	blt.w	800f64a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f4:	695b      	ldr	r3, [r3, #20]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d004      	beq.n	800f504 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fd fd8b 	bl	800d01a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f504:	463b      	mov	r3, r7
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff ff6a 	bl	800f3e0 <prvSampleTimeNow>
 800f50c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b09      	cmp	r3, #9
 800f512:	f200 8097 	bhi.w	800f644 <prvProcessReceivedCommands+0x1a0>
 800f516:	a201      	add	r2, pc, #4	@ (adr r2, 800f51c <prvProcessReceivedCommands+0x78>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f545 	.word	0x0800f545
 800f520:	0800f545 	.word	0x0800f545
 800f524:	0800f545 	.word	0x0800f545
 800f528:	0800f5bb 	.word	0x0800f5bb
 800f52c:	0800f5cf 	.word	0x0800f5cf
 800f530:	0800f61b 	.word	0x0800f61b
 800f534:	0800f545 	.word	0x0800f545
 800f538:	0800f545 	.word	0x0800f545
 800f53c:	0800f5bb 	.word	0x0800f5bb
 800f540:	0800f5cf 	.word	0x0800f5cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f54a:	f043 0301 	orr.w	r3, r3, #1
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f55a:	699b      	ldr	r3, [r3, #24]
 800f55c:	18d1      	adds	r1, r2, r3
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f564:	f7ff ff5c 	bl	800f420 <prvInsertTimerInActiveList>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d06c      	beq.n	800f648 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f570:	6a1b      	ldr	r3, [r3, #32]
 800f572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f574:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f578:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f57c:	f003 0304 	and.w	r3, r3, #4
 800f580:	2b00      	cmp	r3, #0
 800f582:	d061      	beq.n	800f648 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f588:	699b      	ldr	r3, [r3, #24]
 800f58a:	441a      	add	r2, r3
 800f58c:	2300      	movs	r3, #0
 800f58e:	9300      	str	r3, [sp, #0]
 800f590:	2300      	movs	r3, #0
 800f592:	2100      	movs	r1, #0
 800f594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f596:	f7ff fe01 	bl	800f19c <xTimerGenericCommand>
 800f59a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d152      	bne.n	800f648 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a6:	f383 8811 	msr	BASEPRI, r3
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	f3bf 8f4f 	dsb	sy
 800f5b2:	61bb      	str	r3, [r7, #24]
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop
 800f5b8:	e7fd      	b.n	800f5b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5c0:	f023 0301 	bic.w	r3, r3, #1
 800f5c4:	b2da      	uxtb	r2, r3
 800f5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f5cc:	e03d      	b.n	800f64a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5d4:	f043 0301 	orr.w	r3, r3, #1
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e8:	699b      	ldr	r3, [r3, #24]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d10b      	bne.n	800f606 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	617b      	str	r3, [r7, #20]
}
 800f600:	bf00      	nop
 800f602:	bf00      	nop
 800f604:	e7fd      	b.n	800f602 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f608:	699a      	ldr	r2, [r3, #24]
 800f60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f60c:	18d1      	adds	r1, r2, r3
 800f60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f614:	f7ff ff04 	bl	800f420 <prvInsertTimerInActiveList>
					break;
 800f618:	e017      	b.n	800f64a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f620:	f003 0302 	and.w	r3, r3, #2
 800f624:	2b00      	cmp	r3, #0
 800f626:	d103      	bne.n	800f630 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f62a:	f000 fbfd 	bl	800fe28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f62e:	e00c      	b.n	800f64a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f632:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f636:	f023 0301 	bic.w	r3, r3, #1
 800f63a:	b2da      	uxtb	r2, r3
 800f63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f642:	e002      	b.n	800f64a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f644:	bf00      	nop
 800f646:	e000      	b.n	800f64a <prvProcessReceivedCommands+0x1a6>
					break;
 800f648:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f64a:	4b08      	ldr	r3, [pc, #32]	@ (800f66c <prvProcessReceivedCommands+0x1c8>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	1d39      	adds	r1, r7, #4
 800f650:	2200      	movs	r2, #0
 800f652:	4618      	mov	r0, r3
 800f654:	f7fe f82e 	bl	800d6b4 <xQueueReceive>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f47f af26 	bne.w	800f4ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	3730      	adds	r7, #48	@ 0x30
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	20001704 	.word	0x20001704

0800f670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f676:	e049      	b.n	800f70c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f678:	4b2e      	ldr	r3, [pc, #184]	@ (800f734 <prvSwitchTimerLists+0xc4>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f682:	4b2c      	ldr	r3, [pc, #176]	@ (800f734 <prvSwitchTimerLists+0xc4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3304      	adds	r3, #4
 800f690:	4618      	mov	r0, r3
 800f692:	f7fd fcc2 	bl	800d01a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	6a1b      	ldr	r3, [r3, #32]
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f6a4:	f003 0304 	and.w	r3, r3, #4
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d02f      	beq.n	800f70c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d90e      	bls.n	800f6dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6ca:	4b1a      	ldr	r3, [pc, #104]	@ (800f734 <prvSwitchTimerLists+0xc4>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7fd fc67 	bl	800cfa8 <vListInsert>
 800f6da:	e017      	b.n	800f70c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	693a      	ldr	r2, [r7, #16]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7ff fd58 	bl	800f19c <xTimerGenericCommand>
 800f6ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10b      	bne.n	800f70c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	603b      	str	r3, [r7, #0]
}
 800f706:	bf00      	nop
 800f708:	bf00      	nop
 800f70a:	e7fd      	b.n	800f708 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f70c:	4b09      	ldr	r3, [pc, #36]	@ (800f734 <prvSwitchTimerLists+0xc4>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1b0      	bne.n	800f678 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f716:	4b07      	ldr	r3, [pc, #28]	@ (800f734 <prvSwitchTimerLists+0xc4>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f71c:	4b06      	ldr	r3, [pc, #24]	@ (800f738 <prvSwitchTimerLists+0xc8>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a04      	ldr	r2, [pc, #16]	@ (800f734 <prvSwitchTimerLists+0xc4>)
 800f722:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f724:	4a04      	ldr	r2, [pc, #16]	@ (800f738 <prvSwitchTimerLists+0xc8>)
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	6013      	str	r3, [r2, #0]
}
 800f72a:	bf00      	nop
 800f72c:	3718      	adds	r7, #24
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	200016fc 	.word	0x200016fc
 800f738:	20001700 	.word	0x20001700

0800f73c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f740:	f000 f982 	bl	800fa48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f744:	4b12      	ldr	r3, [pc, #72]	@ (800f790 <prvCheckForValidListAndQueue+0x54>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d11d      	bne.n	800f788 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f74c:	4811      	ldr	r0, [pc, #68]	@ (800f794 <prvCheckForValidListAndQueue+0x58>)
 800f74e:	f7fd fbda 	bl	800cf06 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f752:	4811      	ldr	r0, [pc, #68]	@ (800f798 <prvCheckForValidListAndQueue+0x5c>)
 800f754:	f7fd fbd7 	bl	800cf06 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f758:	4b10      	ldr	r3, [pc, #64]	@ (800f79c <prvCheckForValidListAndQueue+0x60>)
 800f75a:	4a0e      	ldr	r2, [pc, #56]	@ (800f794 <prvCheckForValidListAndQueue+0x58>)
 800f75c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f75e:	4b10      	ldr	r3, [pc, #64]	@ (800f7a0 <prvCheckForValidListAndQueue+0x64>)
 800f760:	4a0d      	ldr	r2, [pc, #52]	@ (800f798 <prvCheckForValidListAndQueue+0x5c>)
 800f762:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f764:	2200      	movs	r2, #0
 800f766:	2110      	movs	r1, #16
 800f768:	2001      	movs	r0, #1
 800f76a:	f7fd fceb 	bl	800d144 <xQueueGenericCreate>
 800f76e:	4603      	mov	r3, r0
 800f770:	4a07      	ldr	r2, [pc, #28]	@ (800f790 <prvCheckForValidListAndQueue+0x54>)
 800f772:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f774:	4b06      	ldr	r3, [pc, #24]	@ (800f790 <prvCheckForValidListAndQueue+0x54>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d005      	beq.n	800f788 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f77c:	4b04      	ldr	r3, [pc, #16]	@ (800f790 <prvCheckForValidListAndQueue+0x54>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4908      	ldr	r1, [pc, #32]	@ (800f7a4 <prvCheckForValidListAndQueue+0x68>)
 800f782:	4618      	mov	r0, r3
 800f784:	f7fe fb52 	bl	800de2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f788:	f000 f990 	bl	800faac <vPortExitCritical>
}
 800f78c:	bf00      	nop
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	20001704 	.word	0x20001704
 800f794:	200016d4 	.word	0x200016d4
 800f798:	200016e8 	.word	0x200016e8
 800f79c:	200016fc 	.word	0x200016fc
 800f7a0:	20001700 	.word	0x20001700
 800f7a4:	08022518 	.word	0x08022518

0800f7a8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	@ 0x28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
 800f7b4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f7b6:	f06f 0301 	mvn.w	r3, #1
 800f7ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f7c8:	4b06      	ldr	r3, [pc, #24]	@ (800f7e4 <xTimerPendFunctionCallFromISR+0x3c>)
 800f7ca:	6818      	ldr	r0, [r3, #0]
 800f7cc:	f107 0114 	add.w	r1, r7, #20
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	683a      	ldr	r2, [r7, #0]
 800f7d4:	f7fd fe40 	bl	800d458 <xQueueGenericSendFromISR>
 800f7d8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3728      	adds	r7, #40	@ 0x28
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	20001704 	.word	0x20001704

0800f7e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	3b04      	subs	r3, #4
 800f7f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3b04      	subs	r3, #4
 800f806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f023 0201 	bic.w	r2, r3, #1
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	3b04      	subs	r3, #4
 800f816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f818:	4a0c      	ldr	r2, [pc, #48]	@ (800f84c <pxPortInitialiseStack+0x64>)
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3b14      	subs	r3, #20
 800f822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3b04      	subs	r3, #4
 800f82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f06f 0202 	mvn.w	r2, #2
 800f836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3b20      	subs	r3, #32
 800f83c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f83e:	68fb      	ldr	r3, [r7, #12]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3714      	adds	r7, #20
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	0800f851 	.word	0x0800f851

0800f850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f856:	2300      	movs	r3, #0
 800f858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f85a:	4b13      	ldr	r3, [pc, #76]	@ (800f8a8 <prvTaskExitError+0x58>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f862:	d00b      	beq.n	800f87c <prvTaskExitError+0x2c>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f868:	f383 8811 	msr	BASEPRI, r3
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f3bf 8f4f 	dsb	sy
 800f874:	60fb      	str	r3, [r7, #12]
}
 800f876:	bf00      	nop
 800f878:	bf00      	nop
 800f87a:	e7fd      	b.n	800f878 <prvTaskExitError+0x28>
	__asm volatile
 800f87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	60bb      	str	r3, [r7, #8]
}
 800f88e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f890:	bf00      	nop
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d0fc      	beq.n	800f892 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	3714      	adds	r7, #20
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	200000b8 	.word	0x200000b8
 800f8ac:	00000000 	.word	0x00000000

0800f8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f8b0:	4b07      	ldr	r3, [pc, #28]	@ (800f8d0 <pxCurrentTCBConst2>)
 800f8b2:	6819      	ldr	r1, [r3, #0]
 800f8b4:	6808      	ldr	r0, [r1, #0]
 800f8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ba:	f380 8809 	msr	PSP, r0
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f04f 0000 	mov.w	r0, #0
 800f8c6:	f380 8811 	msr	BASEPRI, r0
 800f8ca:	4770      	bx	lr
 800f8cc:	f3af 8000 	nop.w

0800f8d0 <pxCurrentTCBConst2>:
 800f8d0:	200015a8 	.word	0x200015a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop

0800f8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8d8:	4808      	ldr	r0, [pc, #32]	@ (800f8fc <prvPortStartFirstTask+0x24>)
 800f8da:	6800      	ldr	r0, [r0, #0]
 800f8dc:	6800      	ldr	r0, [r0, #0]
 800f8de:	f380 8808 	msr	MSP, r0
 800f8e2:	f04f 0000 	mov.w	r0, #0
 800f8e6:	f380 8814 	msr	CONTROL, r0
 800f8ea:	b662      	cpsie	i
 800f8ec:	b661      	cpsie	f
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	df00      	svc	0
 800f8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8fa:	bf00      	nop
 800f8fc:	e000ed08 	.word	0xe000ed08

0800f900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b086      	sub	sp, #24
 800f904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f906:	4b47      	ldr	r3, [pc, #284]	@ (800fa24 <xPortStartScheduler+0x124>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a47      	ldr	r2, [pc, #284]	@ (800fa28 <xPortStartScheduler+0x128>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d10b      	bne.n	800f928 <xPortStartScheduler+0x28>
	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	613b      	str	r3, [r7, #16]
}
 800f922:	bf00      	nop
 800f924:	bf00      	nop
 800f926:	e7fd      	b.n	800f924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f928:	4b3e      	ldr	r3, [pc, #248]	@ (800fa24 <xPortStartScheduler+0x124>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a3f      	ldr	r2, [pc, #252]	@ (800fa2c <xPortStartScheduler+0x12c>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d10b      	bne.n	800f94a <xPortStartScheduler+0x4a>
	__asm volatile
 800f932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f936:	f383 8811 	msr	BASEPRI, r3
 800f93a:	f3bf 8f6f 	isb	sy
 800f93e:	f3bf 8f4f 	dsb	sy
 800f942:	60fb      	str	r3, [r7, #12]
}
 800f944:	bf00      	nop
 800f946:	bf00      	nop
 800f948:	e7fd      	b.n	800f946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f94a:	4b39      	ldr	r3, [pc, #228]	@ (800fa30 <xPortStartScheduler+0x130>)
 800f94c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	b2db      	uxtb	r3, r3
 800f954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	22ff      	movs	r2, #255	@ 0xff
 800f95a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	b2db      	uxtb	r3, r3
 800f962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f964:	78fb      	ldrb	r3, [r7, #3]
 800f966:	b2db      	uxtb	r3, r3
 800f968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	4b31      	ldr	r3, [pc, #196]	@ (800fa34 <xPortStartScheduler+0x134>)
 800f970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f972:	4b31      	ldr	r3, [pc, #196]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f974:	2207      	movs	r2, #7
 800f976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f978:	e009      	b.n	800f98e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f97a:	4b2f      	ldr	r3, [pc, #188]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3b01      	subs	r3, #1
 800f980:	4a2d      	ldr	r2, [pc, #180]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f984:	78fb      	ldrb	r3, [r7, #3]
 800f986:	b2db      	uxtb	r3, r3
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f98e:	78fb      	ldrb	r3, [r7, #3]
 800f990:	b2db      	uxtb	r3, r3
 800f992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f996:	2b80      	cmp	r3, #128	@ 0x80
 800f998:	d0ef      	beq.n	800f97a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f99a:	4b27      	ldr	r3, [pc, #156]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f1c3 0307 	rsb	r3, r3, #7
 800f9a2:	2b04      	cmp	r3, #4
 800f9a4:	d00b      	beq.n	800f9be <xPortStartScheduler+0xbe>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	60bb      	str	r3, [r7, #8]
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	e7fd      	b.n	800f9ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f9be:	4b1e      	ldr	r3, [pc, #120]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	021b      	lsls	r3, r3, #8
 800f9c4:	4a1c      	ldr	r2, [pc, #112]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f9c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f9d0:	4a19      	ldr	r2, [pc, #100]	@ (800fa38 <xPortStartScheduler+0x138>)
 800f9d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f9dc:	4b17      	ldr	r3, [pc, #92]	@ (800fa3c <xPortStartScheduler+0x13c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a16      	ldr	r2, [pc, #88]	@ (800fa3c <xPortStartScheduler+0x13c>)
 800f9e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f9e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f9e8:	4b14      	ldr	r3, [pc, #80]	@ (800fa3c <xPortStartScheduler+0x13c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a13      	ldr	r2, [pc, #76]	@ (800fa3c <xPortStartScheduler+0x13c>)
 800f9ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f9f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f9f4:	f000 f8da 	bl	800fbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9f8:	4b11      	ldr	r3, [pc, #68]	@ (800fa40 <xPortStartScheduler+0x140>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9fe:	f000 f8f9 	bl	800fbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa02:	4b10      	ldr	r3, [pc, #64]	@ (800fa44 <xPortStartScheduler+0x144>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a0f      	ldr	r2, [pc, #60]	@ (800fa44 <xPortStartScheduler+0x144>)
 800fa08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fa0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa0e:	f7ff ff63 	bl	800f8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa12:	f7fe fe63 	bl	800e6dc <vTaskSwitchContext>
	prvTaskExitError();
 800fa16:	f7ff ff1b 	bl	800f850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa1a:	2300      	movs	r3, #0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3718      	adds	r7, #24
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	e000ed00 	.word	0xe000ed00
 800fa28:	410fc271 	.word	0x410fc271
 800fa2c:	410fc270 	.word	0x410fc270
 800fa30:	e000e400 	.word	0xe000e400
 800fa34:	20001710 	.word	0x20001710
 800fa38:	20001714 	.word	0x20001714
 800fa3c:	e000ed20 	.word	0xe000ed20
 800fa40:	200000b8 	.word	0x200000b8
 800fa44:	e000ef34 	.word	0xe000ef34

0800fa48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	607b      	str	r3, [r7, #4]
}
 800fa60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa62:	4b10      	ldr	r3, [pc, #64]	@ (800faa4 <vPortEnterCritical+0x5c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	3301      	adds	r3, #1
 800fa68:	4a0e      	ldr	r2, [pc, #56]	@ (800faa4 <vPortEnterCritical+0x5c>)
 800fa6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa6c:	4b0d      	ldr	r3, [pc, #52]	@ (800faa4 <vPortEnterCritical+0x5c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d110      	bne.n	800fa96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa74:	4b0c      	ldr	r3, [pc, #48]	@ (800faa8 <vPortEnterCritical+0x60>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00b      	beq.n	800fa96 <vPortEnterCritical+0x4e>
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	603b      	str	r3, [r7, #0]
}
 800fa90:	bf00      	nop
 800fa92:	bf00      	nop
 800fa94:	e7fd      	b.n	800fa92 <vPortEnterCritical+0x4a>
	}
}
 800fa96:	bf00      	nop
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	200000b8 	.word	0x200000b8
 800faa8:	e000ed04 	.word	0xe000ed04

0800faac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fab2:	4b12      	ldr	r3, [pc, #72]	@ (800fafc <vPortExitCritical+0x50>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10b      	bne.n	800fad2 <vPortExitCritical+0x26>
	__asm volatile
 800faba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	607b      	str	r3, [r7, #4]
}
 800facc:	bf00      	nop
 800face:	bf00      	nop
 800fad0:	e7fd      	b.n	800face <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fad2:	4b0a      	ldr	r3, [pc, #40]	@ (800fafc <vPortExitCritical+0x50>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3b01      	subs	r3, #1
 800fad8:	4a08      	ldr	r2, [pc, #32]	@ (800fafc <vPortExitCritical+0x50>)
 800fada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fadc:	4b07      	ldr	r3, [pc, #28]	@ (800fafc <vPortExitCritical+0x50>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d105      	bne.n	800faf0 <vPortExitCritical+0x44>
 800fae4:	2300      	movs	r3, #0
 800fae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	f383 8811 	msr	BASEPRI, r3
}
 800faee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	200000b8 	.word	0x200000b8

0800fb00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb00:	f3ef 8009 	mrs	r0, PSP
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	4b15      	ldr	r3, [pc, #84]	@ (800fb60 <pxCurrentTCBConst>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	f01e 0f10 	tst.w	lr, #16
 800fb10:	bf08      	it	eq
 800fb12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1a:	6010      	str	r0, [r2, #0]
 800fb1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fb24:	f380 8811 	msr	BASEPRI, r0
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f7fe fdd4 	bl	800e6dc <vTaskSwitchContext>
 800fb34:	f04f 0000 	mov.w	r0, #0
 800fb38:	f380 8811 	msr	BASEPRI, r0
 800fb3c:	bc09      	pop	{r0, r3}
 800fb3e:	6819      	ldr	r1, [r3, #0]
 800fb40:	6808      	ldr	r0, [r1, #0]
 800fb42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb46:	f01e 0f10 	tst.w	lr, #16
 800fb4a:	bf08      	it	eq
 800fb4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb50:	f380 8809 	msr	PSP, r0
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	f3af 8000 	nop.w

0800fb60 <pxCurrentTCBConst>:
 800fb60:	200015a8 	.word	0x200015a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb64:	bf00      	nop
 800fb66:	bf00      	nop

0800fb68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	607b      	str	r3, [r7, #4]
}
 800fb80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb82:	f7fe fcf1 	bl	800e568 <xTaskIncrementTick>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d003      	beq.n	800fb94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb8c:	4b06      	ldr	r3, [pc, #24]	@ (800fba8 <xPortSysTickHandler+0x40>)
 800fb8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb92:	601a      	str	r2, [r3, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	f383 8811 	msr	BASEPRI, r3
}
 800fb9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	e000ed04 	.word	0xe000ed04

0800fbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fbac:	b480      	push	{r7}
 800fbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fbb0:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe0 <vPortSetupTimerInterrupt+0x34>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe4 <vPortSetupTimerInterrupt+0x38>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe8 <vPortSetupTimerInterrupt+0x3c>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a0a      	ldr	r2, [pc, #40]	@ (800fbec <vPortSetupTimerInterrupt+0x40>)
 800fbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbc6:	0b5b      	lsrs	r3, r3, #13
 800fbc8:	4a09      	ldr	r2, [pc, #36]	@ (800fbf0 <vPortSetupTimerInterrupt+0x44>)
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fbce:	4b04      	ldr	r3, [pc, #16]	@ (800fbe0 <vPortSetupTimerInterrupt+0x34>)
 800fbd0:	2207      	movs	r2, #7
 800fbd2:	601a      	str	r2, [r3, #0]
}
 800fbd4:	bf00      	nop
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	e000e010 	.word	0xe000e010
 800fbe4:	e000e018 	.word	0xe000e018
 800fbe8:	200000ac 	.word	0x200000ac
 800fbec:	d1b71759 	.word	0xd1b71759
 800fbf0:	e000e014 	.word	0xe000e014

0800fbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fc04 <vPortEnableVFP+0x10>
 800fbf8:	6801      	ldr	r1, [r0, #0]
 800fbfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fbfe:	6001      	str	r1, [r0, #0]
 800fc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc02:	bf00      	nop
 800fc04:	e000ed88 	.word	0xe000ed88

0800fc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc0e:	f3ef 8305 	mrs	r3, IPSR
 800fc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b0f      	cmp	r3, #15
 800fc18:	d915      	bls.n	800fc46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc1a:	4a18      	ldr	r2, [pc, #96]	@ (800fc7c <vPortValidateInterruptPriority+0x74>)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	4413      	add	r3, r2
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc24:	4b16      	ldr	r3, [pc, #88]	@ (800fc80 <vPortValidateInterruptPriority+0x78>)
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	7afa      	ldrb	r2, [r7, #11]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d20b      	bcs.n	800fc46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc32:	f383 8811 	msr	BASEPRI, r3
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	607b      	str	r3, [r7, #4]
}
 800fc40:	bf00      	nop
 800fc42:	bf00      	nop
 800fc44:	e7fd      	b.n	800fc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc46:	4b0f      	ldr	r3, [pc, #60]	@ (800fc84 <vPortValidateInterruptPriority+0x7c>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800fc88 <vPortValidateInterruptPriority+0x80>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d90b      	bls.n	800fc6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5a:	f383 8811 	msr	BASEPRI, r3
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	603b      	str	r3, [r7, #0]
}
 800fc68:	bf00      	nop
 800fc6a:	bf00      	nop
 800fc6c:	e7fd      	b.n	800fc6a <vPortValidateInterruptPriority+0x62>
	}
 800fc6e:	bf00      	nop
 800fc70:	3714      	adds	r7, #20
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop
 800fc7c:	e000e3f0 	.word	0xe000e3f0
 800fc80:	20001710 	.word	0x20001710
 800fc84:	e000ed0c 	.word	0xe000ed0c
 800fc88:	20001714 	.word	0x20001714

0800fc8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b08a      	sub	sp, #40	@ 0x28
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc94:	2300      	movs	r3, #0
 800fc96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc98:	f7fe fb98 	bl	800e3cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc9c:	4b5c      	ldr	r3, [pc, #368]	@ (800fe10 <pvPortMalloc+0x184>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d101      	bne.n	800fca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fca4:	f000 f924 	bl	800fef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fca8:	4b5a      	ldr	r3, [pc, #360]	@ (800fe14 <pvPortMalloc+0x188>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	4013      	ands	r3, r2
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f040 8095 	bne.w	800fde0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d01e      	beq.n	800fcfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fcbc:	2208      	movs	r2, #8
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f003 0307 	and.w	r3, r3, #7
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d015      	beq.n	800fcfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f023 0307 	bic.w	r3, r3, #7
 800fcd4:	3308      	adds	r3, #8
 800fcd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f003 0307 	and.w	r3, r3, #7
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00b      	beq.n	800fcfa <pvPortMalloc+0x6e>
	__asm volatile
 800fce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	617b      	str	r3, [r7, #20]
}
 800fcf4:	bf00      	nop
 800fcf6:	bf00      	nop
 800fcf8:	e7fd      	b.n	800fcf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d06f      	beq.n	800fde0 <pvPortMalloc+0x154>
 800fd00:	4b45      	ldr	r3, [pc, #276]	@ (800fe18 <pvPortMalloc+0x18c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d86a      	bhi.n	800fde0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd0a:	4b44      	ldr	r3, [pc, #272]	@ (800fe1c <pvPortMalloc+0x190>)
 800fd0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd0e:	4b43      	ldr	r3, [pc, #268]	@ (800fe1c <pvPortMalloc+0x190>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd14:	e004      	b.n	800fd20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d903      	bls.n	800fd32 <pvPortMalloc+0xa6>
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1f1      	bne.n	800fd16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd32:	4b37      	ldr	r3, [pc, #220]	@ (800fe10 <pvPortMalloc+0x184>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d051      	beq.n	800fde0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2208      	movs	r2, #8
 800fd42:	4413      	add	r3, r2
 800fd44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	6a3b      	ldr	r3, [r7, #32]
 800fd4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd50:	685a      	ldr	r2, [r3, #4]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	1ad2      	subs	r2, r2, r3
 800fd56:	2308      	movs	r3, #8
 800fd58:	005b      	lsls	r3, r3, #1
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d920      	bls.n	800fda0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	f003 0307 	and.w	r3, r3, #7
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00b      	beq.n	800fd88 <pvPortMalloc+0xfc>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	613b      	str	r3, [r7, #16]
}
 800fd82:	bf00      	nop
 800fd84:	bf00      	nop
 800fd86:	e7fd      	b.n	800fd84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	1ad2      	subs	r2, r2, r3
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd9a:	69b8      	ldr	r0, [r7, #24]
 800fd9c:	f000 f90a 	bl	800ffb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fda0:	4b1d      	ldr	r3, [pc, #116]	@ (800fe18 <pvPortMalloc+0x18c>)
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	4a1b      	ldr	r2, [pc, #108]	@ (800fe18 <pvPortMalloc+0x18c>)
 800fdac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fdae:	4b1a      	ldr	r3, [pc, #104]	@ (800fe18 <pvPortMalloc+0x18c>)
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	4b1b      	ldr	r3, [pc, #108]	@ (800fe20 <pvPortMalloc+0x194>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d203      	bcs.n	800fdc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdba:	4b17      	ldr	r3, [pc, #92]	@ (800fe18 <pvPortMalloc+0x18c>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a18      	ldr	r2, [pc, #96]	@ (800fe20 <pvPortMalloc+0x194>)
 800fdc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc4:	685a      	ldr	r2, [r3, #4]
 800fdc6:	4b13      	ldr	r3, [pc, #76]	@ (800fe14 <pvPortMalloc+0x188>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	431a      	orrs	r2, r3
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fdd6:	4b13      	ldr	r3, [pc, #76]	@ (800fe24 <pvPortMalloc+0x198>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	3301      	adds	r3, #1
 800fddc:	4a11      	ldr	r2, [pc, #68]	@ (800fe24 <pvPortMalloc+0x198>)
 800fdde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fde0:	f7fe fb02 	bl	800e3e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	f003 0307 	and.w	r3, r3, #7
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00b      	beq.n	800fe06 <pvPortMalloc+0x17a>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	60fb      	str	r3, [r7, #12]
}
 800fe00:	bf00      	nop
 800fe02:	bf00      	nop
 800fe04:	e7fd      	b.n	800fe02 <pvPortMalloc+0x176>
	return pvReturn;
 800fe06:	69fb      	ldr	r3, [r7, #28]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3728      	adds	r7, #40	@ 0x28
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	2000a320 	.word	0x2000a320
 800fe14:	2000a334 	.word	0x2000a334
 800fe18:	2000a324 	.word	0x2000a324
 800fe1c:	2000a318 	.word	0x2000a318
 800fe20:	2000a328 	.word	0x2000a328
 800fe24:	2000a32c 	.word	0x2000a32c

0800fe28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b086      	sub	sp, #24
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d04f      	beq.n	800feda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe3a:	2308      	movs	r3, #8
 800fe3c:	425b      	negs	r3, r3
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	4413      	add	r3, r2
 800fe42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	685a      	ldr	r2, [r3, #4]
 800fe4c:	4b25      	ldr	r3, [pc, #148]	@ (800fee4 <vPortFree+0xbc>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4013      	ands	r3, r2
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10b      	bne.n	800fe6e <vPortFree+0x46>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	60fb      	str	r3, [r7, #12]
}
 800fe68:	bf00      	nop
 800fe6a:	bf00      	nop
 800fe6c:	e7fd      	b.n	800fe6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00b      	beq.n	800fe8e <vPortFree+0x66>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	60bb      	str	r3, [r7, #8]
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	e7fd      	b.n	800fe8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	4b14      	ldr	r3, [pc, #80]	@ (800fee4 <vPortFree+0xbc>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4013      	ands	r3, r2
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d01e      	beq.n	800feda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d11a      	bne.n	800feda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	685a      	ldr	r2, [r3, #4]
 800fea8:	4b0e      	ldr	r3, [pc, #56]	@ (800fee4 <vPortFree+0xbc>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	43db      	mvns	r3, r3
 800feae:	401a      	ands	r2, r3
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800feb4:	f7fe fa8a 	bl	800e3cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	4b0a      	ldr	r3, [pc, #40]	@ (800fee8 <vPortFree+0xc0>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4413      	add	r3, r2
 800fec2:	4a09      	ldr	r2, [pc, #36]	@ (800fee8 <vPortFree+0xc0>)
 800fec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fec6:	6938      	ldr	r0, [r7, #16]
 800fec8:	f000 f874 	bl	800ffb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fecc:	4b07      	ldr	r3, [pc, #28]	@ (800feec <vPortFree+0xc4>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3301      	adds	r3, #1
 800fed2:	4a06      	ldr	r2, [pc, #24]	@ (800feec <vPortFree+0xc4>)
 800fed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fed6:	f7fe fa87 	bl	800e3e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800feda:	bf00      	nop
 800fedc:	3718      	adds	r7, #24
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	2000a334 	.word	0x2000a334
 800fee8:	2000a324 	.word	0x2000a324
 800feec:	2000a330 	.word	0x2000a330

0800fef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fef0:	b480      	push	{r7}
 800fef2:	b085      	sub	sp, #20
 800fef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fef6:	f44f 430c 	mov.w	r3, #35840	@ 0x8c00
 800fefa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fefc:	4b27      	ldr	r3, [pc, #156]	@ (800ff9c <prvHeapInit+0xac>)
 800fefe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f003 0307 	and.w	r3, r3, #7
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00c      	beq.n	800ff24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	3307      	adds	r3, #7
 800ff0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f023 0307 	bic.w	r3, r3, #7
 800ff16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff18:	68ba      	ldr	r2, [r7, #8]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	1ad3      	subs	r3, r2, r3
 800ff1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ff9c <prvHeapInit+0xac>)
 800ff20:	4413      	add	r3, r2
 800ff22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff28:	4a1d      	ldr	r2, [pc, #116]	@ (800ffa0 <prvHeapInit+0xb0>)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff2e:	4b1c      	ldr	r3, [pc, #112]	@ (800ffa0 <prvHeapInit+0xb0>)
 800ff30:	2200      	movs	r2, #0
 800ff32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	4413      	add	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff3c:	2208      	movs	r2, #8
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	1a9b      	subs	r3, r3, r2
 800ff42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f023 0307 	bic.w	r3, r3, #7
 800ff4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	4a15      	ldr	r2, [pc, #84]	@ (800ffa4 <prvHeapInit+0xb4>)
 800ff50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff52:	4b14      	ldr	r3, [pc, #80]	@ (800ffa4 <prvHeapInit+0xb4>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2200      	movs	r2, #0
 800ff58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff5a:	4b12      	ldr	r3, [pc, #72]	@ (800ffa4 <prvHeapInit+0xb4>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	1ad2      	subs	r2, r2, r3
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff70:	4b0c      	ldr	r3, [pc, #48]	@ (800ffa4 <prvHeapInit+0xb4>)
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	4a0a      	ldr	r2, [pc, #40]	@ (800ffa8 <prvHeapInit+0xb8>)
 800ff7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	4a09      	ldr	r2, [pc, #36]	@ (800ffac <prvHeapInit+0xbc>)
 800ff86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff88:	4b09      	ldr	r3, [pc, #36]	@ (800ffb0 <prvHeapInit+0xc0>)
 800ff8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ff8e:	601a      	str	r2, [r3, #0]
}
 800ff90:	bf00      	nop
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	20001718 	.word	0x20001718
 800ffa0:	2000a318 	.word	0x2000a318
 800ffa4:	2000a320 	.word	0x2000a320
 800ffa8:	2000a328 	.word	0x2000a328
 800ffac:	2000a324 	.word	0x2000a324
 800ffb0:	2000a334 	.word	0x2000a334

0800ffb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffbc:	4b28      	ldr	r3, [pc, #160]	@ (8010060 <prvInsertBlockIntoFreeList+0xac>)
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	e002      	b.n	800ffc8 <prvInsertBlockIntoFreeList+0x14>
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	60fb      	str	r3, [r7, #12]
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d8f7      	bhi.n	800ffc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	4413      	add	r3, r2
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d108      	bne.n	800fff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	685a      	ldr	r2, [r3, #4]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	441a      	add	r2, r3
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	68ba      	ldr	r2, [r7, #8]
 8010000:	441a      	add	r2, r3
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d118      	bne.n	801003c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	4b15      	ldr	r3, [pc, #84]	@ (8010064 <prvInsertBlockIntoFreeList+0xb0>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d00d      	beq.n	8010032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685a      	ldr	r2, [r3, #4]
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	441a      	add	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	e008      	b.n	8010044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010032:	4b0c      	ldr	r3, [pc, #48]	@ (8010064 <prvInsertBlockIntoFreeList+0xb0>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	e003      	b.n	8010044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	429a      	cmp	r2, r3
 801004a:	d002      	beq.n	8010052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010052:	bf00      	nop
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	2000a318 	.word	0x2000a318
 8010064:	2000a320 	.word	0x2000a320

08010068 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d007      	beq.n	801008c <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	6852      	ldr	r2, [r2, #4]
 8010084:	4610      	mov	r0, r2
 8010086:	4798      	blx	r3
 8010088:	4603      	mov	r3, r0
 801008a:	e006      	b.n	801009a <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	6852      	ldr	r2, [r2, #4]
 8010094:	4610      	mov	r0, r2
 8010096:	4798      	blx	r3
    return ERR_OK;
 8010098:	2300      	movs	r3, #0
  }
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
	...

080100a4 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b08e      	sub	sp, #56	@ 0x38
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 80100bc:	f107 0314 	add.w	r3, r7, #20
 80100c0:	4619      	mov	r1, r3
 80100c2:	4806      	ldr	r0, [pc, #24]	@ (80100dc <netifapi_netif_common+0x38>)
 80100c4:	f000 f99a 	bl	80103fc <tcpip_api_call>
 80100c8:	4603      	mov	r3, r0
 80100ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 80100ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3738      	adds	r7, #56	@ 0x38
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	08010069 	.word	0x08010069

080100e0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80100ea:	f008 fc7f 	bl	80189ec <sys_timeouts_sleeptime>
 80100ee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f6:	d10b      	bne.n	8010110 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80100f8:	4813      	ldr	r0, [pc, #76]	@ (8010148 <tcpip_timeouts_mbox_fetch+0x68>)
 80100fa:	f00d fed0 	bl	801de9e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80100fe:	2200      	movs	r2, #0
 8010100:	6839      	ldr	r1, [r7, #0]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f00d fe44 	bl	801dd90 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010108:	480f      	ldr	r0, [pc, #60]	@ (8010148 <tcpip_timeouts_mbox_fetch+0x68>)
 801010a:	f00d feb9 	bl	801de80 <sys_mutex_lock>
    return;
 801010e:	e018      	b.n	8010142 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d102      	bne.n	801011c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010116:	f008 fc2f 	bl	8018978 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801011a:	e7e6      	b.n	80100ea <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801011c:	480a      	ldr	r0, [pc, #40]	@ (8010148 <tcpip_timeouts_mbox_fetch+0x68>)
 801011e:	f00d febe 	bl	801de9e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f00d fe32 	bl	801dd90 <sys_arch_mbox_fetch>
 801012c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801012e:	4806      	ldr	r0, [pc, #24]	@ (8010148 <tcpip_timeouts_mbox_fetch+0x68>)
 8010130:	f00d fea6 	bl	801de80 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013a:	d102      	bne.n	8010142 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801013c:	f008 fc1c 	bl	8018978 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010140:	e7d3      	b.n	80100ea <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	2000a344 	.word	0x2000a344

0801014c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010154:	4810      	ldr	r0, [pc, #64]	@ (8010198 <tcpip_thread+0x4c>)
 8010156:	f00d fe93 	bl	801de80 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801015a:	4b10      	ldr	r3, [pc, #64]	@ (801019c <tcpip_thread+0x50>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d005      	beq.n	801016e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010162:	4b0e      	ldr	r3, [pc, #56]	@ (801019c <tcpip_thread+0x50>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a0e      	ldr	r2, [pc, #56]	@ (80101a0 <tcpip_thread+0x54>)
 8010168:	6812      	ldr	r2, [r2, #0]
 801016a:	4610      	mov	r0, r2
 801016c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801016e:	f107 030c 	add.w	r3, r7, #12
 8010172:	4619      	mov	r1, r3
 8010174:	480b      	ldr	r0, [pc, #44]	@ (80101a4 <tcpip_thread+0x58>)
 8010176:	f7ff ffb3 	bl	80100e0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d106      	bne.n	801018e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010180:	4b09      	ldr	r3, [pc, #36]	@ (80101a8 <tcpip_thread+0x5c>)
 8010182:	2291      	movs	r2, #145	@ 0x91
 8010184:	4909      	ldr	r1, [pc, #36]	@ (80101ac <tcpip_thread+0x60>)
 8010186:	480a      	ldr	r0, [pc, #40]	@ (80101b0 <tcpip_thread+0x64>)
 8010188:	f00e fd74 	bl	801ec74 <iprintf>
      continue;
 801018c:	e003      	b.n	8010196 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	4618      	mov	r0, r3
 8010192:	f000 f80f 	bl	80101b4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010196:	e7ea      	b.n	801016e <tcpip_thread+0x22>
 8010198:	2000a344 	.word	0x2000a344
 801019c:	2000a338 	.word	0x2000a338
 80101a0:	2000a33c 	.word	0x2000a33c
 80101a4:	2000a340 	.word	0x2000a340
 80101a8:	08022520 	.word	0x08022520
 80101ac:	08022550 	.word	0x08022550
 80101b0:	08022570 	.word	0x08022570

080101b4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d026      	beq.n	8010212 <tcpip_thread_handle_msg+0x5e>
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	dc2b      	bgt.n	8010220 <tcpip_thread_handle_msg+0x6c>
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <tcpip_thread_handle_msg+0x1e>
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d015      	beq.n	80101fc <tcpip_thread_handle_msg+0x48>
 80101d0:	e026      	b.n	8010220 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	6850      	ldr	r0, [r2, #4]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	6892      	ldr	r2, [r2, #8]
 80101de:	4611      	mov	r1, r2
 80101e0:	4798      	blx	r3
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d004      	beq.n	80101f2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f001 fe89 	bl	8011f04 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	2009      	movs	r0, #9
 80101f6:	f000 ffe3 	bl	80111c0 <memp_free>
      break;
 80101fa:	e018      	b.n	801022e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	6892      	ldr	r2, [r2, #8]
 8010204:	4610      	mov	r0, r2
 8010206:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	2008      	movs	r0, #8
 801020c:	f000 ffd8 	bl	80111c0 <memp_free>
      break;
 8010210:	e00d      	b.n	801022e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	6892      	ldr	r2, [r2, #8]
 801021a:	4610      	mov	r0, r2
 801021c:	4798      	blx	r3
      break;
 801021e:	e006      	b.n	801022e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010220:	4b05      	ldr	r3, [pc, #20]	@ (8010238 <tcpip_thread_handle_msg+0x84>)
 8010222:	22cf      	movs	r2, #207	@ 0xcf
 8010224:	4905      	ldr	r1, [pc, #20]	@ (801023c <tcpip_thread_handle_msg+0x88>)
 8010226:	4806      	ldr	r0, [pc, #24]	@ (8010240 <tcpip_thread_handle_msg+0x8c>)
 8010228:	f00e fd24 	bl	801ec74 <iprintf>
      break;
 801022c:	bf00      	nop
  }
}
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	08022520 	.word	0x08022520
 801023c:	08022550 	.word	0x08022550
 8010240:	08022570 	.word	0x08022570

08010244 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010250:	481a      	ldr	r0, [pc, #104]	@ (80102bc <tcpip_inpkt+0x78>)
 8010252:	f00d fddc 	bl	801de0e <sys_mbox_valid>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d105      	bne.n	8010268 <tcpip_inpkt+0x24>
 801025c:	4b18      	ldr	r3, [pc, #96]	@ (80102c0 <tcpip_inpkt+0x7c>)
 801025e:	22fc      	movs	r2, #252	@ 0xfc
 8010260:	4918      	ldr	r1, [pc, #96]	@ (80102c4 <tcpip_inpkt+0x80>)
 8010262:	4819      	ldr	r0, [pc, #100]	@ (80102c8 <tcpip_inpkt+0x84>)
 8010264:	f00e fd06 	bl	801ec74 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010268:	2009      	movs	r0, #9
 801026a:	f000 ff57 	bl	801111c <memp_malloc>
 801026e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d102      	bne.n	801027c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010276:	f04f 33ff 	mov.w	r3, #4294967295
 801027a:	e01a      	b.n	80102b2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	2200      	movs	r2, #0
 8010280:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010294:	6979      	ldr	r1, [r7, #20]
 8010296:	4809      	ldr	r0, [pc, #36]	@ (80102bc <tcpip_inpkt+0x78>)
 8010298:	f00d fd60 	bl	801dd5c <sys_mbox_trypost>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d006      	beq.n	80102b0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80102a2:	6979      	ldr	r1, [r7, #20]
 80102a4:	2009      	movs	r0, #9
 80102a6:	f000 ff8b 	bl	80111c0 <memp_free>
    return ERR_MEM;
 80102aa:	f04f 33ff 	mov.w	r3, #4294967295
 80102ae:	e000      	b.n	80102b2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80102b0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3718      	adds	r7, #24
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	2000a340 	.word	0x2000a340
 80102c0:	08022520 	.word	0x08022520
 80102c4:	08022598 	.word	0x08022598
 80102c8:	08022570 	.word	0x08022570

080102cc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102dc:	f003 0318 	and.w	r3, r3, #24
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d006      	beq.n	80102f2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80102e4:	4a08      	ldr	r2, [pc, #32]	@ (8010308 <tcpip_input+0x3c>)
 80102e6:	6839      	ldr	r1, [r7, #0]
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7ff ffab 	bl	8010244 <tcpip_inpkt>
 80102ee:	4603      	mov	r3, r0
 80102f0:	e005      	b.n	80102fe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80102f2:	4a06      	ldr	r2, [pc, #24]	@ (801030c <tcpip_input+0x40>)
 80102f4:	6839      	ldr	r1, [r7, #0]
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff ffa4 	bl	8010244 <tcpip_inpkt>
 80102fc:	4603      	mov	r3, r0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	0801db49 	.word	0x0801db49
 801030c:	0801c6bd 	.word	0x0801c6bd

08010310 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801031a:	4814      	ldr	r0, [pc, #80]	@ (801036c <tcpip_callback+0x5c>)
 801031c:	f00d fd77 	bl	801de0e <sys_mbox_valid>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <tcpip_callback+0x24>
 8010326:	4b12      	ldr	r3, [pc, #72]	@ (8010370 <tcpip_callback+0x60>)
 8010328:	f240 1239 	movw	r2, #313	@ 0x139
 801032c:	4911      	ldr	r1, [pc, #68]	@ (8010374 <tcpip_callback+0x64>)
 801032e:	4812      	ldr	r0, [pc, #72]	@ (8010378 <tcpip_callback+0x68>)
 8010330:	f00e fca0 	bl	801ec74 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010334:	2008      	movs	r0, #8
 8010336:	f000 fef1 	bl	801111c <memp_malloc>
 801033a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d102      	bne.n	8010348 <tcpip_callback+0x38>
    return ERR_MEM;
 8010342:	f04f 33ff 	mov.w	r3, #4294967295
 8010346:	e00d      	b.n	8010364 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2201      	movs	r2, #1
 801034c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 801035a:	68f9      	ldr	r1, [r7, #12]
 801035c:	4803      	ldr	r0, [pc, #12]	@ (801036c <tcpip_callback+0x5c>)
 801035e:	f00d fce7 	bl	801dd30 <sys_mbox_post>
  return ERR_OK;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	2000a340 	.word	0x2000a340
 8010370:	08022520 	.word	0x08022520
 8010374:	08022598 	.word	0x08022598
 8010378:	08022570 	.word	0x08022570

0801037c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010386:	4819      	ldr	r0, [pc, #100]	@ (80103ec <tcpip_try_callback+0x70>)
 8010388:	f00d fd41 	bl	801de0e <sys_mbox_valid>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d106      	bne.n	80103a0 <tcpip_try_callback+0x24>
 8010392:	4b17      	ldr	r3, [pc, #92]	@ (80103f0 <tcpip_try_callback+0x74>)
 8010394:	f240 125d 	movw	r2, #349	@ 0x15d
 8010398:	4916      	ldr	r1, [pc, #88]	@ (80103f4 <tcpip_try_callback+0x78>)
 801039a:	4817      	ldr	r0, [pc, #92]	@ (80103f8 <tcpip_try_callback+0x7c>)
 801039c:	f00e fc6a 	bl	801ec74 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80103a0:	2008      	movs	r0, #8
 80103a2:	f000 febb 	bl	801111c <memp_malloc>
 80103a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d102      	bne.n	80103b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80103ae:	f04f 33ff 	mov.w	r3, #4294967295
 80103b2:	e017      	b.n	80103e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2201      	movs	r2, #1
 80103b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80103c6:	68f9      	ldr	r1, [r7, #12]
 80103c8:	4808      	ldr	r0, [pc, #32]	@ (80103ec <tcpip_try_callback+0x70>)
 80103ca:	f00d fcc7 	bl	801dd5c <sys_mbox_trypost>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d006      	beq.n	80103e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80103d4:	68f9      	ldr	r1, [r7, #12]
 80103d6:	2008      	movs	r0, #8
 80103d8:	f000 fef2 	bl	80111c0 <memp_free>
    return ERR_MEM;
 80103dc:	f04f 33ff 	mov.w	r3, #4294967295
 80103e0:	e000      	b.n	80103e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	2000a340 	.word	0x2000a340
 80103f0:	08022520 	.word	0x08022520
 80103f4:	08022598 	.word	0x08022598
 80103f8:	08022570 	.word	0x08022570

080103fc <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 8010406:	4808      	ldr	r0, [pc, #32]	@ (8010428 <tcpip_api_call+0x2c>)
 8010408:	f00d fd3a 	bl	801de80 <sys_mutex_lock>
  err = fn(call);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6838      	ldr	r0, [r7, #0]
 8010410:	4798      	blx	r3
 8010412:	4603      	mov	r3, r0
 8010414:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 8010416:	4804      	ldr	r0, [pc, #16]	@ (8010428 <tcpip_api_call+0x2c>)
 8010418:	f00d fd41 	bl	801de9e <sys_mutex_unlock>
  return err;
 801041c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	2000a344 	.word	0x2000a344

0801042c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af02      	add	r7, sp, #8
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010436:	f000 f9ea 	bl	801080e <lwip_init>

  tcpip_init_done = initfunc;
 801043a:	4a17      	ldr	r2, [pc, #92]	@ (8010498 <tcpip_init+0x6c>)
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010440:	4a16      	ldr	r2, [pc, #88]	@ (801049c <tcpip_init+0x70>)
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010446:	210a      	movs	r1, #10
 8010448:	4815      	ldr	r0, [pc, #84]	@ (80104a0 <tcpip_init+0x74>)
 801044a:	f00d fc53 	bl	801dcf4 <sys_mbox_new>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d006      	beq.n	8010462 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010454:	4b13      	ldr	r3, [pc, #76]	@ (80104a4 <tcpip_init+0x78>)
 8010456:	f240 2261 	movw	r2, #609	@ 0x261
 801045a:	4913      	ldr	r1, [pc, #76]	@ (80104a8 <tcpip_init+0x7c>)
 801045c:	4813      	ldr	r0, [pc, #76]	@ (80104ac <tcpip_init+0x80>)
 801045e:	f00e fc09 	bl	801ec74 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010462:	4813      	ldr	r0, [pc, #76]	@ (80104b0 <tcpip_init+0x84>)
 8010464:	f00d fcf2 	bl	801de4c <sys_mutex_new>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d006      	beq.n	801047c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801046e:	4b0d      	ldr	r3, [pc, #52]	@ (80104a4 <tcpip_init+0x78>)
 8010470:	f240 2265 	movw	r2, #613	@ 0x265
 8010474:	490f      	ldr	r1, [pc, #60]	@ (80104b4 <tcpip_init+0x88>)
 8010476:	480d      	ldr	r0, [pc, #52]	@ (80104ac <tcpip_init+0x80>)
 8010478:	f00e fbfc 	bl	801ec74 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010486:	2200      	movs	r2, #0
 8010488:	490b      	ldr	r1, [pc, #44]	@ (80104b8 <tcpip_init+0x8c>)
 801048a:	480c      	ldr	r0, [pc, #48]	@ (80104bc <tcpip_init+0x90>)
 801048c:	f00d fd14 	bl	801deb8 <sys_thread_new>
}
 8010490:	bf00      	nop
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	2000a338 	.word	0x2000a338
 801049c:	2000a33c 	.word	0x2000a33c
 80104a0:	2000a340 	.word	0x2000a340
 80104a4:	08022520 	.word	0x08022520
 80104a8:	080225a8 	.word	0x080225a8
 80104ac:	08022570 	.word	0x08022570
 80104b0:	2000a344 	.word	0x2000a344
 80104b4:	080225cc 	.word	0x080225cc
 80104b8:	0801014d 	.word	0x0801014d
 80104bc:	080225f0 	.word	0x080225f0

080104c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4603      	mov	r3, r0
 80104c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80104ca:	88fb      	ldrh	r3, [r7, #6]
 80104cc:	021b      	lsls	r3, r3, #8
 80104ce:	b21a      	sxth	r2, r3
 80104d0:	88fb      	ldrh	r3, [r7, #6]
 80104d2:	0a1b      	lsrs	r3, r3, #8
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	b21b      	sxth	r3, r3
 80104d8:	4313      	orrs	r3, r2
 80104da:	b21b      	sxth	r3, r3
 80104dc:	b29b      	uxth	r3, r3
}
 80104de:	4618      	mov	r0, r3
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80104ea:	b480      	push	{r7}
 80104ec:	b083      	sub	sp, #12
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	061a      	lsls	r2, r3, #24
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	021b      	lsls	r3, r3, #8
 80104fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80104fe:	431a      	orrs	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	0a1b      	lsrs	r3, r3, #8
 8010504:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010508:	431a      	orrs	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	0e1b      	lsrs	r3, r3, #24
 801050e:	4313      	orrs	r3, r2
}
 8010510:	4618      	mov	r0, r3
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801051c:	b480      	push	{r7}
 801051e:	b089      	sub	sp, #36	@ 0x24
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	f003 0301 	and.w	r3, r3, #1
 8010538:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00d      	beq.n	801055c <lwip_standard_chksum+0x40>
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	dd0a      	ble.n	801055c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	1c53      	adds	r3, r2, #1
 801054a:	61fb      	str	r3, [r7, #28]
 801054c:	f107 030e 	add.w	r3, r7, #14
 8010550:	3301      	adds	r3, #1
 8010552:	7812      	ldrb	r2, [r2, #0]
 8010554:	701a      	strb	r2, [r3, #0]
    len--;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	3b01      	subs	r3, #1
 801055a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8010560:	e00a      	b.n	8010578 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	1c9a      	adds	r2, r3, #2
 8010566:	61ba      	str	r2, [r7, #24]
 8010568:	881b      	ldrh	r3, [r3, #0]
 801056a:	461a      	mov	r2, r3
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	4413      	add	r3, r2
 8010570:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	3b02      	subs	r3, #2
 8010576:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2b01      	cmp	r3, #1
 801057c:	dcf1      	bgt.n	8010562 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	dd04      	ble.n	801058e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010584:	f107 030e 	add.w	r3, r7, #14
 8010588:	69ba      	ldr	r2, [r7, #24]
 801058a:	7812      	ldrb	r2, [r2, #0]
 801058c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801058e:	89fb      	ldrh	r3, [r7, #14]
 8010590:	461a      	mov	r2, r3
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	4413      	add	r3, r2
 8010596:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	0c1a      	lsrs	r2, r3, #16
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4413      	add	r3, r2
 80105a2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	0c1a      	lsrs	r2, r3, #16
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	4413      	add	r3, r2
 80105ae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d007      	beq.n	80105c6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	021b      	lsls	r3, r3, #8
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	0a1b      	lsrs	r3, r3, #8
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	4313      	orrs	r3, r2
 80105c4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	b29b      	uxth	r3, r3
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3724      	adds	r7, #36	@ 0x24
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr

080105d6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b086      	sub	sp, #24
 80105da:	af00      	add	r7, sp, #0
 80105dc:	60f8      	str	r0, [r7, #12]
 80105de:	607b      	str	r3, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	72fb      	strb	r3, [r7, #11]
 80105e4:	4613      	mov	r3, r2
 80105e6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 80105e8:	2300      	movs	r3, #0
 80105ea:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	617b      	str	r3, [r7, #20]
 80105f0:	e02b      	b.n	801064a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	895b      	ldrh	r3, [r3, #10]
 80105fa:	4619      	mov	r1, r3
 80105fc:	4610      	mov	r0, r2
 80105fe:	f7ff ff8d 	bl	801051c <lwip_standard_chksum>
 8010602:	4603      	mov	r3, r0
 8010604:	461a      	mov	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4413      	add	r3, r2
 801060a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	0c1a      	lsrs	r2, r3, #16
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	b29b      	uxth	r3, r3
 8010614:	4413      	add	r3, r2
 8010616:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	895b      	ldrh	r3, [r3, #10]
 801061c:	f003 0301 	and.w	r3, r3, #1
 8010620:	b29b      	uxth	r3, r3
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00e      	beq.n	8010644 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	2b00      	cmp	r3, #0
 801062a:	bf0c      	ite	eq
 801062c:	2301      	moveq	r3, #1
 801062e:	2300      	movne	r3, #0
 8010630:	b2db      	uxtb	r3, r3
 8010632:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	021b      	lsls	r3, r3, #8
 8010638:	b29a      	uxth	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	0a1b      	lsrs	r3, r3, #8
 801063e:	b2db      	uxtb	r3, r3
 8010640:	4313      	orrs	r3, r2
 8010642:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	617b      	str	r3, [r7, #20]
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1d0      	bne.n	80105f2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d007      	beq.n	8010666 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	021b      	lsls	r3, r3, #8
 801065a:	b29a      	uxth	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	0a1b      	lsrs	r3, r3, #8
 8010660:	b2db      	uxtb	r3, r3
 8010662:	4313      	orrs	r3, r2
 8010664:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8010666:	7afb      	ldrb	r3, [r7, #11]
 8010668:	b29b      	uxth	r3, r3
 801066a:	4618      	mov	r0, r3
 801066c:	f7ff ff28 	bl	80104c0 <lwip_htons>
 8010670:	4603      	mov	r3, r0
 8010672:	461a      	mov	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	4413      	add	r3, r2
 8010678:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 801067a:	893b      	ldrh	r3, [r7, #8]
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff ff1f 	bl	80104c0 <lwip_htons>
 8010682:	4603      	mov	r3, r0
 8010684:	461a      	mov	r2, r3
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4413      	add	r3, r2
 801068a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	0c1a      	lsrs	r2, r3, #16
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	b29b      	uxth	r3, r3
 8010694:	4413      	add	r3, r2
 8010696:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	0c1a      	lsrs	r2, r3, #16
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	b29b      	uxth	r3, r3
 80106a0:	4413      	add	r3, r2
 80106a2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	43db      	mvns	r3, r3
 80106aa:	b29b      	uxth	r3, r3
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3718      	adds	r7, #24
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b086      	sub	sp, #24
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	607b      	str	r3, [r7, #4]
 80106be:	460b      	mov	r3, r1
 80106c0:	72fb      	strb	r3, [r7, #11]
 80106c2:	4613      	mov	r3, r2
 80106c4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	0c1b      	lsrs	r3, r3, #16
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	4413      	add	r3, r2
 80106da:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	693a      	ldr	r2, [r7, #16]
 80106e8:	4413      	add	r3, r2
 80106ea:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	0c1b      	lsrs	r3, r3, #16
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	4413      	add	r3, r2
 80106f4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	0c1a      	lsrs	r2, r3, #16
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	4413      	add	r3, r2
 8010700:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	0c1a      	lsrs	r2, r3, #16
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4413      	add	r3, r2
 801070c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801070e:	893a      	ldrh	r2, [r7, #8]
 8010710:	7af9      	ldrb	r1, [r7, #11]
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f7ff ff5e 	bl	80105d6 <inet_cksum_pseudo_base>
 801071a:	4603      	mov	r3, r0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3718      	adds	r7, #24
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af02      	add	r7, sp, #8
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	607b      	str	r3, [r7, #4]
 801072e:	460b      	mov	r3, r1
 8010730:	72fb      	strb	r3, [r7, #11]
 8010732:	4613      	mov	r3, r2
 8010734:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8010736:	893a      	ldrh	r2, [r7, #8]
 8010738:	7af9      	ldrb	r1, [r7, #11]
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f7ff ffb7 	bl	80106b4 <inet_chksum_pseudo>
 8010746:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8010748:	4618      	mov	r0, r3
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	460b      	mov	r3, r1
 801075a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801075c:	887b      	ldrh	r3, [r7, #2]
 801075e:	4619      	mov	r1, r3
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7ff fedb 	bl	801051c <lwip_standard_chksum>
 8010766:	4603      	mov	r3, r0
 8010768:	43db      	mvns	r3, r3
 801076a:	b29b      	uxth	r3, r3
}
 801076c:	4618      	mov	r0, r3
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801077c:	2300      	movs	r3, #0
 801077e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	613b      	str	r3, [r7, #16]
 8010788:	e02b      	b.n	80107e2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	685a      	ldr	r2, [r3, #4]
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	895b      	ldrh	r3, [r3, #10]
 8010792:	4619      	mov	r1, r3
 8010794:	4610      	mov	r0, r2
 8010796:	f7ff fec1 	bl	801051c <lwip_standard_chksum>
 801079a:	4603      	mov	r3, r0
 801079c:	461a      	mov	r2, r3
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	4413      	add	r3, r2
 80107a2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	0c1a      	lsrs	r2, r3, #16
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	4413      	add	r3, r2
 80107ae:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	895b      	ldrh	r3, [r3, #10]
 80107b4:	f003 0301 	and.w	r3, r3, #1
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00e      	beq.n	80107dc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	bf0c      	ite	eq
 80107c4:	2301      	moveq	r3, #1
 80107c6:	2300      	movne	r3, #0
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	021b      	lsls	r3, r3, #8
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	0a1b      	lsrs	r3, r3, #8
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	4313      	orrs	r3, r2
 80107da:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	613b      	str	r3, [r7, #16]
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1d0      	bne.n	801078a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d007      	beq.n	80107fe <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	021b      	lsls	r3, r3, #8
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	0a1b      	lsrs	r3, r3, #8
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	4313      	orrs	r3, r2
 80107fc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	b29b      	uxth	r3, r3
 8010802:	43db      	mvns	r3, r3
 8010804:	b29b      	uxth	r3, r3
}
 8010806:	4618      	mov	r0, r3
 8010808:	3718      	adds	r7, #24
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b082      	sub	sp, #8
 8010812:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010818:	f00d fb0a 	bl	801de30 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801081c:	f000 f8d4 	bl	80109c8 <mem_init>
  memp_init();
 8010820:	f000 fc30 	bl	8011084 <memp_init>
  pbuf_init();
  netif_init();
 8010824:	f000 fcf6 	bl	8011214 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010828:	f008 f918 	bl	8018a5c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801082c:	f001 ffa8 	bl	8012780 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010830:	f008 f85a 	bl	80188e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010834:	bf00      	nop
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010846:	4b05      	ldr	r3, [pc, #20]	@ (801085c <ptr_to_mem+0x20>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	88fb      	ldrh	r3, [r7, #6]
 801084c:	4413      	add	r3, r2
}
 801084e:	4618      	mov	r0, r3
 8010850:	370c      	adds	r7, #12
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	2000f374 	.word	0x2000f374

08010860 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010868:	4b05      	ldr	r3, [pc, #20]	@ (8010880 <mem_to_ptr+0x20>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	b29b      	uxth	r3, r3
}
 8010872:	4618      	mov	r0, r3
 8010874:	370c      	adds	r7, #12
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	2000f374 	.word	0x2000f374

08010884 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801088c:	4b45      	ldr	r3, [pc, #276]	@ (80109a4 <plug_holes+0x120>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	429a      	cmp	r2, r3
 8010894:	d206      	bcs.n	80108a4 <plug_holes+0x20>
 8010896:	4b44      	ldr	r3, [pc, #272]	@ (80109a8 <plug_holes+0x124>)
 8010898:	f240 12df 	movw	r2, #479	@ 0x1df
 801089c:	4943      	ldr	r1, [pc, #268]	@ (80109ac <plug_holes+0x128>)
 801089e:	4844      	ldr	r0, [pc, #272]	@ (80109b0 <plug_holes+0x12c>)
 80108a0:	f00e f9e8 	bl	801ec74 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80108a4:	4b43      	ldr	r3, [pc, #268]	@ (80109b4 <plug_holes+0x130>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d306      	bcc.n	80108bc <plug_holes+0x38>
 80108ae:	4b3e      	ldr	r3, [pc, #248]	@ (80109a8 <plug_holes+0x124>)
 80108b0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80108b4:	4940      	ldr	r1, [pc, #256]	@ (80109b8 <plug_holes+0x134>)
 80108b6:	483e      	ldr	r0, [pc, #248]	@ (80109b0 <plug_holes+0x12c>)
 80108b8:	f00e f9dc 	bl	801ec74 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	791b      	ldrb	r3, [r3, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d006      	beq.n	80108d2 <plug_holes+0x4e>
 80108c4:	4b38      	ldr	r3, [pc, #224]	@ (80109a8 <plug_holes+0x124>)
 80108c6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80108ca:	493c      	ldr	r1, [pc, #240]	@ (80109bc <plug_holes+0x138>)
 80108cc:	4838      	ldr	r0, [pc, #224]	@ (80109b0 <plug_holes+0x12c>)
 80108ce:	f00e f9d1 	bl	801ec74 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80108da:	d906      	bls.n	80108ea <plug_holes+0x66>
 80108dc:	4b32      	ldr	r3, [pc, #200]	@ (80109a8 <plug_holes+0x124>)
 80108de:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80108e2:	4937      	ldr	r1, [pc, #220]	@ (80109c0 <plug_holes+0x13c>)
 80108e4:	4832      	ldr	r0, [pc, #200]	@ (80109b0 <plug_holes+0x12c>)
 80108e6:	f00e f9c5 	bl	801ec74 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff ffa4 	bl	801083c <ptr_to_mem>
 80108f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d024      	beq.n	8010948 <plug_holes+0xc4>
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	791b      	ldrb	r3, [r3, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d120      	bne.n	8010948 <plug_holes+0xc4>
 8010906:	4b2b      	ldr	r3, [pc, #172]	@ (80109b4 <plug_holes+0x130>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	429a      	cmp	r2, r3
 801090e:	d01b      	beq.n	8010948 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010910:	4b2c      	ldr	r3, [pc, #176]	@ (80109c4 <plug_holes+0x140>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	429a      	cmp	r2, r3
 8010918:	d102      	bne.n	8010920 <plug_holes+0x9c>
      lfree = mem;
 801091a:	4a2a      	ldr	r2, [pc, #168]	@ (80109c4 <plug_holes+0x140>)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	881a      	ldrh	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010930:	d00a      	beq.n	8010948 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff ff80 	bl	801083c <ptr_to_mem>
 801093c:	4604      	mov	r4, r0
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7ff ff8e 	bl	8010860 <mem_to_ptr>
 8010944:	4603      	mov	r3, r0
 8010946:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	885b      	ldrh	r3, [r3, #2]
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff ff75 	bl	801083c <ptr_to_mem>
 8010952:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010954:	68ba      	ldr	r2, [r7, #8]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	429a      	cmp	r2, r3
 801095a:	d01f      	beq.n	801099c <plug_holes+0x118>
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	791b      	ldrb	r3, [r3, #4]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d11b      	bne.n	801099c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010964:	4b17      	ldr	r3, [pc, #92]	@ (80109c4 <plug_holes+0x140>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	429a      	cmp	r2, r3
 801096c:	d102      	bne.n	8010974 <plug_holes+0xf0>
      lfree = pmem;
 801096e:	4a15      	ldr	r2, [pc, #84]	@ (80109c4 <plug_holes+0x140>)
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	881a      	ldrh	r2, [r3, #0]
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010984:	d00a      	beq.n	801099c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	4618      	mov	r0, r3
 801098c:	f7ff ff56 	bl	801083c <ptr_to_mem>
 8010990:	4604      	mov	r4, r0
 8010992:	68b8      	ldr	r0, [r7, #8]
 8010994:	f7ff ff64 	bl	8010860 <mem_to_ptr>
 8010998:	4603      	mov	r3, r0
 801099a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801099c:	bf00      	nop
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd90      	pop	{r4, r7, pc}
 80109a4:	2000f374 	.word	0x2000f374
 80109a8:	080225f8 	.word	0x080225f8
 80109ac:	08022628 	.word	0x08022628
 80109b0:	08022640 	.word	0x08022640
 80109b4:	2000f378 	.word	0x2000f378
 80109b8:	08022668 	.word	0x08022668
 80109bc:	08022684 	.word	0x08022684
 80109c0:	080226a0 	.word	0x080226a0
 80109c4:	2000f380 	.word	0x2000f380

080109c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80109ce:	4b1f      	ldr	r3, [pc, #124]	@ (8010a4c <mem_init+0x84>)
 80109d0:	3303      	adds	r3, #3
 80109d2:	f023 0303 	bic.w	r3, r3, #3
 80109d6:	461a      	mov	r2, r3
 80109d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010a50 <mem_init+0x88>)
 80109da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80109dc:	4b1c      	ldr	r3, [pc, #112]	@ (8010a50 <mem_init+0x88>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80109e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80109f6:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 80109fa:	f7ff ff1f 	bl	801083c <ptr_to_mem>
 80109fe:	4603      	mov	r3, r0
 8010a00:	4a14      	ldr	r2, [pc, #80]	@ (8010a54 <mem_init+0x8c>)
 8010a02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010a04:	4b13      	ldr	r3, [pc, #76]	@ (8010a54 <mem_init+0x8c>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010a0c:	4b11      	ldr	r3, [pc, #68]	@ (8010a54 <mem_init+0x8c>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8010a14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010a16:	4b0f      	ldr	r3, [pc, #60]	@ (8010a54 <mem_init+0x8c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8010a1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010a20:	4b0b      	ldr	r3, [pc, #44]	@ (8010a50 <mem_init+0x88>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a0c      	ldr	r2, [pc, #48]	@ (8010a58 <mem_init+0x90>)
 8010a26:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010a28:	480c      	ldr	r0, [pc, #48]	@ (8010a5c <mem_init+0x94>)
 8010a2a:	f00d fa0f 	bl	801de4c <sys_mutex_new>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d006      	beq.n	8010a42 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010a34:	4b0a      	ldr	r3, [pc, #40]	@ (8010a60 <mem_init+0x98>)
 8010a36:	f240 221f 	movw	r2, #543	@ 0x21f
 8010a3a:	490a      	ldr	r1, [pc, #40]	@ (8010a64 <mem_init+0x9c>)
 8010a3c:	480a      	ldr	r0, [pc, #40]	@ (8010a68 <mem_init+0xa0>)
 8010a3e:	f00e f919 	bl	801ec74 <iprintf>
  }
}
 8010a42:	bf00      	nop
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2000a360 	.word	0x2000a360
 8010a50:	2000f374 	.word	0x2000f374
 8010a54:	2000f378 	.word	0x2000f378
 8010a58:	2000f380 	.word	0x2000f380
 8010a5c:	2000f37c 	.word	0x2000f37c
 8010a60:	080225f8 	.word	0x080225f8
 8010a64:	080226cc 	.word	0x080226cc
 8010a68:	08022640 	.word	0x08022640

08010a6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7ff fef3 	bl	8010860 <mem_to_ptr>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7ff feda 	bl	801083c <ptr_to_mem>
 8010a88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	885b      	ldrh	r3, [r3, #2]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff fed4 	bl	801083c <ptr_to_mem>
 8010a94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010a9e:	d818      	bhi.n	8010ad2 <mem_link_valid+0x66>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	885b      	ldrh	r3, [r3, #2]
 8010aa4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010aa8:	d813      	bhi.n	8010ad2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010aae:	8afa      	ldrh	r2, [r7, #22]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d004      	beq.n	8010abe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	8afa      	ldrh	r2, [r7, #22]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d109      	bne.n	8010ad2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010abe:	4b08      	ldr	r3, [pc, #32]	@ (8010ae0 <mem_link_valid+0x74>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ac2:	693a      	ldr	r2, [r7, #16]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d006      	beq.n	8010ad6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	885b      	ldrh	r3, [r3, #2]
 8010acc:	8afa      	ldrh	r2, [r7, #22]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d001      	beq.n	8010ad6 <mem_link_valid+0x6a>
    return 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e000      	b.n	8010ad8 <mem_link_valid+0x6c>
  }
  return 1;
 8010ad6:	2301      	movs	r3, #1
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3718      	adds	r7, #24
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	2000f378 	.word	0x2000f378

08010ae4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b088      	sub	sp, #32
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d070      	beq.n	8010bd4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f003 0303 	and.w	r3, r3, #3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00d      	beq.n	8010b18 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010afc:	4b37      	ldr	r3, [pc, #220]	@ (8010bdc <mem_free+0xf8>)
 8010afe:	f240 2273 	movw	r2, #627	@ 0x273
 8010b02:	4937      	ldr	r1, [pc, #220]	@ (8010be0 <mem_free+0xfc>)
 8010b04:	4837      	ldr	r0, [pc, #220]	@ (8010be4 <mem_free+0x100>)
 8010b06:	f00e f8b5 	bl	801ec74 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b0a:	f00d f9f3 	bl	801def4 <sys_arch_protect>
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f00d f9fd 	bl	801df10 <sys_arch_unprotect>
    return;
 8010b16:	e05e      	b.n	8010bd6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	3b08      	subs	r3, #8
 8010b1c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010b1e:	4b32      	ldr	r3, [pc, #200]	@ (8010be8 <mem_free+0x104>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	69fa      	ldr	r2, [r7, #28]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d306      	bcc.n	8010b36 <mem_free+0x52>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f103 020c 	add.w	r2, r3, #12
 8010b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8010bec <mem_free+0x108>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d90d      	bls.n	8010b52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010b36:	4b29      	ldr	r3, [pc, #164]	@ (8010bdc <mem_free+0xf8>)
 8010b38:	f240 227f 	movw	r2, #639	@ 0x27f
 8010b3c:	492c      	ldr	r1, [pc, #176]	@ (8010bf0 <mem_free+0x10c>)
 8010b3e:	4829      	ldr	r0, [pc, #164]	@ (8010be4 <mem_free+0x100>)
 8010b40:	f00e f898 	bl	801ec74 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b44:	f00d f9d6 	bl	801def4 <sys_arch_protect>
 8010b48:	6138      	str	r0, [r7, #16]
 8010b4a:	6938      	ldr	r0, [r7, #16]
 8010b4c:	f00d f9e0 	bl	801df10 <sys_arch_unprotect>
    return;
 8010b50:	e041      	b.n	8010bd6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010b52:	4828      	ldr	r0, [pc, #160]	@ (8010bf4 <mem_free+0x110>)
 8010b54:	f00d f994 	bl	801de80 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	791b      	ldrb	r3, [r3, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d110      	bne.n	8010b82 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010b60:	4b1e      	ldr	r3, [pc, #120]	@ (8010bdc <mem_free+0xf8>)
 8010b62:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010b66:	4924      	ldr	r1, [pc, #144]	@ (8010bf8 <mem_free+0x114>)
 8010b68:	481e      	ldr	r0, [pc, #120]	@ (8010be4 <mem_free+0x100>)
 8010b6a:	f00e f883 	bl	801ec74 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010b6e:	4821      	ldr	r0, [pc, #132]	@ (8010bf4 <mem_free+0x110>)
 8010b70:	f00d f995 	bl	801de9e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b74:	f00d f9be 	bl	801def4 <sys_arch_protect>
 8010b78:	6178      	str	r0, [r7, #20]
 8010b7a:	6978      	ldr	r0, [r7, #20]
 8010b7c:	f00d f9c8 	bl	801df10 <sys_arch_unprotect>
    return;
 8010b80:	e029      	b.n	8010bd6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010b82:	69f8      	ldr	r0, [r7, #28]
 8010b84:	f7ff ff72 	bl	8010a6c <mem_link_valid>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d110      	bne.n	8010bb0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010b8e:	4b13      	ldr	r3, [pc, #76]	@ (8010bdc <mem_free+0xf8>)
 8010b90:	f240 2295 	movw	r2, #661	@ 0x295
 8010b94:	4919      	ldr	r1, [pc, #100]	@ (8010bfc <mem_free+0x118>)
 8010b96:	4813      	ldr	r0, [pc, #76]	@ (8010be4 <mem_free+0x100>)
 8010b98:	f00e f86c 	bl	801ec74 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010b9c:	4815      	ldr	r0, [pc, #84]	@ (8010bf4 <mem_free+0x110>)
 8010b9e:	f00d f97e 	bl	801de9e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010ba2:	f00d f9a7 	bl	801def4 <sys_arch_protect>
 8010ba6:	61b8      	str	r0, [r7, #24]
 8010ba8:	69b8      	ldr	r0, [r7, #24]
 8010baa:	f00d f9b1 	bl	801df10 <sys_arch_unprotect>
    return;
 8010bae:	e012      	b.n	8010bd6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010bb6:	4b12      	ldr	r3, [pc, #72]	@ (8010c00 <mem_free+0x11c>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	69fa      	ldr	r2, [r7, #28]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d202      	bcs.n	8010bc6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8010c00 <mem_free+0x11c>)
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010bc6:	69f8      	ldr	r0, [r7, #28]
 8010bc8:	f7ff fe5c 	bl	8010884 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010bcc:	4809      	ldr	r0, [pc, #36]	@ (8010bf4 <mem_free+0x110>)
 8010bce:	f00d f966 	bl	801de9e <sys_mutex_unlock>
 8010bd2:	e000      	b.n	8010bd6 <mem_free+0xf2>
    return;
 8010bd4:	bf00      	nop
}
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	080225f8 	.word	0x080225f8
 8010be0:	080226e8 	.word	0x080226e8
 8010be4:	08022640 	.word	0x08022640
 8010be8:	2000f374 	.word	0x2000f374
 8010bec:	2000f378 	.word	0x2000f378
 8010bf0:	0802270c 	.word	0x0802270c
 8010bf4:	2000f37c 	.word	0x2000f37c
 8010bf8:	08022728 	.word	0x08022728
 8010bfc:	08022750 	.word	0x08022750
 8010c00:	2000f380 	.word	0x2000f380

08010c04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b088      	sub	sp, #32
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010c10:	887b      	ldrh	r3, [r7, #2]
 8010c12:	3303      	adds	r3, #3
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	f023 0303 	bic.w	r3, r3, #3
 8010c1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010c1c:	8bfb      	ldrh	r3, [r7, #30]
 8010c1e:	2b0b      	cmp	r3, #11
 8010c20:	d801      	bhi.n	8010c26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010c22:	230c      	movs	r3, #12
 8010c24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010c26:	8bfb      	ldrh	r3, [r7, #30]
 8010c28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010c2c:	d803      	bhi.n	8010c36 <mem_trim+0x32>
 8010c2e:	8bfa      	ldrh	r2, [r7, #30]
 8010c30:	887b      	ldrh	r3, [r7, #2]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d201      	bcs.n	8010c3a <mem_trim+0x36>
    return NULL;
 8010c36:	2300      	movs	r3, #0
 8010c38:	e0d8      	b.n	8010dec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8010df4 <mem_trim+0x1f0>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d304      	bcc.n	8010c4e <mem_trim+0x4a>
 8010c44:	4b6c      	ldr	r3, [pc, #432]	@ (8010df8 <mem_trim+0x1f4>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d306      	bcc.n	8010c5c <mem_trim+0x58>
 8010c4e:	4b6b      	ldr	r3, [pc, #428]	@ (8010dfc <mem_trim+0x1f8>)
 8010c50:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010c54:	496a      	ldr	r1, [pc, #424]	@ (8010e00 <mem_trim+0x1fc>)
 8010c56:	486b      	ldr	r0, [pc, #428]	@ (8010e04 <mem_trim+0x200>)
 8010c58:	f00e f80c 	bl	801ec74 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010c5c:	4b65      	ldr	r3, [pc, #404]	@ (8010df4 <mem_trim+0x1f0>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d304      	bcc.n	8010c70 <mem_trim+0x6c>
 8010c66:	4b64      	ldr	r3, [pc, #400]	@ (8010df8 <mem_trim+0x1f4>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d307      	bcc.n	8010c80 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c70:	f00d f940 	bl	801def4 <sys_arch_protect>
 8010c74:	60b8      	str	r0, [r7, #8]
 8010c76:	68b8      	ldr	r0, [r7, #8]
 8010c78:	f00d f94a 	bl	801df10 <sys_arch_unprotect>
    return rmem;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	e0b5      	b.n	8010dec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3b08      	subs	r3, #8
 8010c84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010c86:	69b8      	ldr	r0, [r7, #24]
 8010c88:	f7ff fdea 	bl	8010860 <mem_to_ptr>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	881a      	ldrh	r2, [r3, #0]
 8010c94:	8afb      	ldrh	r3, [r7, #22]
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	3b08      	subs	r3, #8
 8010c9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010c9e:	8bfa      	ldrh	r2, [r7, #30]
 8010ca0:	8abb      	ldrh	r3, [r7, #20]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d906      	bls.n	8010cb4 <mem_trim+0xb0>
 8010ca6:	4b55      	ldr	r3, [pc, #340]	@ (8010dfc <mem_trim+0x1f8>)
 8010ca8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010cac:	4956      	ldr	r1, [pc, #344]	@ (8010e08 <mem_trim+0x204>)
 8010cae:	4855      	ldr	r0, [pc, #340]	@ (8010e04 <mem_trim+0x200>)
 8010cb0:	f00d ffe0 	bl	801ec74 <iprintf>
  if (newsize > size) {
 8010cb4:	8bfa      	ldrh	r2, [r7, #30]
 8010cb6:	8abb      	ldrh	r3, [r7, #20]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d901      	bls.n	8010cc0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e095      	b.n	8010dec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010cc0:	8bfa      	ldrh	r2, [r7, #30]
 8010cc2:	8abb      	ldrh	r3, [r7, #20]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d101      	bne.n	8010ccc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	e08f      	b.n	8010dec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010ccc:	484f      	ldr	r0, [pc, #316]	@ (8010e0c <mem_trim+0x208>)
 8010cce:	f00d f8d7 	bl	801de80 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7ff fdb0 	bl	801083c <ptr_to_mem>
 8010cdc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	791b      	ldrb	r3, [r3, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d13f      	bne.n	8010d66 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010ce6:	69bb      	ldr	r3, [r7, #24]
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010cee:	d106      	bne.n	8010cfe <mem_trim+0xfa>
 8010cf0:	4b42      	ldr	r3, [pc, #264]	@ (8010dfc <mem_trim+0x1f8>)
 8010cf2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010cf6:	4946      	ldr	r1, [pc, #280]	@ (8010e10 <mem_trim+0x20c>)
 8010cf8:	4842      	ldr	r0, [pc, #264]	@ (8010e04 <mem_trim+0x200>)
 8010cfa:	f00d ffbb 	bl	801ec74 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010d04:	8afa      	ldrh	r2, [r7, #22]
 8010d06:	8bfb      	ldrh	r3, [r7, #30]
 8010d08:	4413      	add	r3, r2
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	3308      	adds	r3, #8
 8010d0e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010d10:	4b40      	ldr	r3, [pc, #256]	@ (8010e14 <mem_trim+0x210>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d106      	bne.n	8010d28 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010d1a:	89fb      	ldrh	r3, [r7, #14]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7ff fd8d 	bl	801083c <ptr_to_mem>
 8010d22:	4603      	mov	r3, r0
 8010d24:	4a3b      	ldr	r2, [pc, #236]	@ (8010e14 <mem_trim+0x210>)
 8010d26:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010d28:	89fb      	ldrh	r3, [r7, #14]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7ff fd86 	bl	801083c <ptr_to_mem>
 8010d30:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	2200      	movs	r2, #0
 8010d36:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	89ba      	ldrh	r2, [r7, #12]
 8010d3c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	8afa      	ldrh	r2, [r7, #22]
 8010d42:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	89fa      	ldrh	r2, [r7, #14]
 8010d48:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010d52:	d047      	beq.n	8010de4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	881b      	ldrh	r3, [r3, #0]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff fd6f 	bl	801083c <ptr_to_mem>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	89fb      	ldrh	r3, [r7, #14]
 8010d62:	8053      	strh	r3, [r2, #2]
 8010d64:	e03e      	b.n	8010de4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010d66:	8bfb      	ldrh	r3, [r7, #30]
 8010d68:	f103 0214 	add.w	r2, r3, #20
 8010d6c:	8abb      	ldrh	r3, [r7, #20]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d838      	bhi.n	8010de4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010d72:	8afa      	ldrh	r2, [r7, #22]
 8010d74:	8bfb      	ldrh	r3, [r7, #30]
 8010d76:	4413      	add	r3, r2
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	3308      	adds	r3, #8
 8010d7c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010d86:	d106      	bne.n	8010d96 <mem_trim+0x192>
 8010d88:	4b1c      	ldr	r3, [pc, #112]	@ (8010dfc <mem_trim+0x1f8>)
 8010d8a:	f240 3216 	movw	r2, #790	@ 0x316
 8010d8e:	4920      	ldr	r1, [pc, #128]	@ (8010e10 <mem_trim+0x20c>)
 8010d90:	481c      	ldr	r0, [pc, #112]	@ (8010e04 <mem_trim+0x200>)
 8010d92:	f00d ff6f 	bl	801ec74 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010d96:	89fb      	ldrh	r3, [r7, #14]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7ff fd4f 	bl	801083c <ptr_to_mem>
 8010d9e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010da0:	4b1c      	ldr	r3, [pc, #112]	@ (8010e14 <mem_trim+0x210>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	693a      	ldr	r2, [r7, #16]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d202      	bcs.n	8010db0 <mem_trim+0x1ac>
      lfree = mem2;
 8010daa:	4a1a      	ldr	r2, [pc, #104]	@ (8010e14 <mem_trim+0x210>)
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	2200      	movs	r2, #0
 8010db4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	881a      	ldrh	r2, [r3, #0]
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	8afa      	ldrh	r2, [r7, #22]
 8010dc2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	89fa      	ldrh	r2, [r7, #14]
 8010dc8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	881b      	ldrh	r3, [r3, #0]
 8010dce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010dd2:	d007      	beq.n	8010de4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fd2f 	bl	801083c <ptr_to_mem>
 8010dde:	4602      	mov	r2, r0
 8010de0:	89fb      	ldrh	r3, [r7, #14]
 8010de2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010de4:	4809      	ldr	r0, [pc, #36]	@ (8010e0c <mem_trim+0x208>)
 8010de6:	f00d f85a 	bl	801de9e <sys_mutex_unlock>
  return rmem;
 8010dea:	687b      	ldr	r3, [r7, #4]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3720      	adds	r7, #32
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	2000f374 	.word	0x2000f374
 8010df8:	2000f378 	.word	0x2000f378
 8010dfc:	080225f8 	.word	0x080225f8
 8010e00:	08022784 	.word	0x08022784
 8010e04:	08022640 	.word	0x08022640
 8010e08:	0802279c 	.word	0x0802279c
 8010e0c:	2000f37c 	.word	0x2000f37c
 8010e10:	080227bc 	.word	0x080227bc
 8010e14:	2000f380 	.word	0x2000f380

08010e18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b088      	sub	sp, #32
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	4603      	mov	r3, r0
 8010e20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010e22:	88fb      	ldrh	r3, [r7, #6]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d101      	bne.n	8010e2c <mem_malloc+0x14>
    return NULL;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e0e2      	b.n	8010ff2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010e2c:	88fb      	ldrh	r3, [r7, #6]
 8010e2e:	3303      	adds	r3, #3
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	f023 0303 	bic.w	r3, r3, #3
 8010e36:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010e38:	8bbb      	ldrh	r3, [r7, #28]
 8010e3a:	2b0b      	cmp	r3, #11
 8010e3c:	d801      	bhi.n	8010e42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010e3e:	230c      	movs	r3, #12
 8010e40:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010e42:	8bbb      	ldrh	r3, [r7, #28]
 8010e44:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010e48:	d803      	bhi.n	8010e52 <mem_malloc+0x3a>
 8010e4a:	8bba      	ldrh	r2, [r7, #28]
 8010e4c:	88fb      	ldrh	r3, [r7, #6]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d201      	bcs.n	8010e56 <mem_malloc+0x3e>
    return NULL;
 8010e52:	2300      	movs	r3, #0
 8010e54:	e0cd      	b.n	8010ff2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010e56:	4869      	ldr	r0, [pc, #420]	@ (8010ffc <mem_malloc+0x1e4>)
 8010e58:	f00d f812 	bl	801de80 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010e5c:	4b68      	ldr	r3, [pc, #416]	@ (8011000 <mem_malloc+0x1e8>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff fcfd 	bl	8010860 <mem_to_ptr>
 8010e66:	4603      	mov	r3, r0
 8010e68:	83fb      	strh	r3, [r7, #30]
 8010e6a:	e0b7      	b.n	8010fdc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010e6c:	8bfb      	ldrh	r3, [r7, #30]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff fce4 	bl	801083c <ptr_to_mem>
 8010e74:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	791b      	ldrb	r3, [r3, #4]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f040 80a7 	bne.w	8010fce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	461a      	mov	r2, r3
 8010e86:	8bfb      	ldrh	r3, [r7, #30]
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	f1a3 0208 	sub.w	r2, r3, #8
 8010e8e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010e90:	429a      	cmp	r2, r3
 8010e92:	f0c0 809c 	bcc.w	8010fce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	881b      	ldrh	r3, [r3, #0]
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	8bfb      	ldrh	r3, [r7, #30]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	f1a3 0208 	sub.w	r2, r3, #8
 8010ea4:	8bbb      	ldrh	r3, [r7, #28]
 8010ea6:	3314      	adds	r3, #20
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d333      	bcc.n	8010f14 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010eac:	8bfa      	ldrh	r2, [r7, #30]
 8010eae:	8bbb      	ldrh	r3, [r7, #28]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	3308      	adds	r3, #8
 8010eb6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010eb8:	8a7b      	ldrh	r3, [r7, #18]
 8010eba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010ebe:	d106      	bne.n	8010ece <mem_malloc+0xb6>
 8010ec0:	4b50      	ldr	r3, [pc, #320]	@ (8011004 <mem_malloc+0x1ec>)
 8010ec2:	f240 3287 	movw	r2, #903	@ 0x387
 8010ec6:	4950      	ldr	r1, [pc, #320]	@ (8011008 <mem_malloc+0x1f0>)
 8010ec8:	4850      	ldr	r0, [pc, #320]	@ (801100c <mem_malloc+0x1f4>)
 8010eca:	f00d fed3 	bl	801ec74 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010ece:	8a7b      	ldrh	r3, [r7, #18]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7ff fcb3 	bl	801083c <ptr_to_mem>
 8010ed6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2200      	movs	r2, #0
 8010edc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	881a      	ldrh	r2, [r3, #0]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	8bfa      	ldrh	r2, [r7, #30]
 8010eea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	8a7a      	ldrh	r2, [r7, #18]
 8010ef0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010f00:	d00b      	beq.n	8010f1a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	881b      	ldrh	r3, [r3, #0]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7ff fc98 	bl	801083c <ptr_to_mem>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	8a7b      	ldrh	r3, [r7, #18]
 8010f10:	8053      	strh	r3, [r2, #2]
 8010f12:	e002      	b.n	8010f1a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	2201      	movs	r2, #1
 8010f18:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010f1a:	4b39      	ldr	r3, [pc, #228]	@ (8011000 <mem_malloc+0x1e8>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d127      	bne.n	8010f74 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010f24:	4b36      	ldr	r3, [pc, #216]	@ (8011000 <mem_malloc+0x1e8>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010f2a:	e005      	b.n	8010f38 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7ff fc83 	bl	801083c <ptr_to_mem>
 8010f36:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	791b      	ldrb	r3, [r3, #4]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d004      	beq.n	8010f4a <mem_malloc+0x132>
 8010f40:	4b33      	ldr	r3, [pc, #204]	@ (8011010 <mem_malloc+0x1f8>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	69ba      	ldr	r2, [r7, #24]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d1f0      	bne.n	8010f2c <mem_malloc+0x114>
          }
          lfree = cur;
 8010f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8011000 <mem_malloc+0x1e8>)
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010f50:	4b2b      	ldr	r3, [pc, #172]	@ (8011000 <mem_malloc+0x1e8>)
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	4b2e      	ldr	r3, [pc, #184]	@ (8011010 <mem_malloc+0x1f8>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d00b      	beq.n	8010f74 <mem_malloc+0x15c>
 8010f5c:	4b28      	ldr	r3, [pc, #160]	@ (8011000 <mem_malloc+0x1e8>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	791b      	ldrb	r3, [r3, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d006      	beq.n	8010f74 <mem_malloc+0x15c>
 8010f66:	4b27      	ldr	r3, [pc, #156]	@ (8011004 <mem_malloc+0x1ec>)
 8010f68:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010f6c:	4929      	ldr	r1, [pc, #164]	@ (8011014 <mem_malloc+0x1fc>)
 8010f6e:	4827      	ldr	r0, [pc, #156]	@ (801100c <mem_malloc+0x1f4>)
 8010f70:	f00d fe80 	bl	801ec74 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010f74:	4821      	ldr	r0, [pc, #132]	@ (8010ffc <mem_malloc+0x1e4>)
 8010f76:	f00c ff92 	bl	801de9e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010f7a:	8bba      	ldrh	r2, [r7, #28]
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	4413      	add	r3, r2
 8010f80:	3308      	adds	r3, #8
 8010f82:	4a23      	ldr	r2, [pc, #140]	@ (8011010 <mem_malloc+0x1f8>)
 8010f84:	6812      	ldr	r2, [r2, #0]
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d906      	bls.n	8010f98 <mem_malloc+0x180>
 8010f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8011004 <mem_malloc+0x1ec>)
 8010f8c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8010f90:	4921      	ldr	r1, [pc, #132]	@ (8011018 <mem_malloc+0x200>)
 8010f92:	481e      	ldr	r0, [pc, #120]	@ (801100c <mem_malloc+0x1f4>)
 8010f94:	f00d fe6e 	bl	801ec74 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	f003 0303 	and.w	r3, r3, #3
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d006      	beq.n	8010fb0 <mem_malloc+0x198>
 8010fa2:	4b18      	ldr	r3, [pc, #96]	@ (8011004 <mem_malloc+0x1ec>)
 8010fa4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010fa8:	491c      	ldr	r1, [pc, #112]	@ (801101c <mem_malloc+0x204>)
 8010faa:	4818      	ldr	r0, [pc, #96]	@ (801100c <mem_malloc+0x1f4>)
 8010fac:	f00d fe62 	bl	801ec74 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	f003 0303 	and.w	r3, r3, #3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d006      	beq.n	8010fc8 <mem_malloc+0x1b0>
 8010fba:	4b12      	ldr	r3, [pc, #72]	@ (8011004 <mem_malloc+0x1ec>)
 8010fbc:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8010fc0:	4917      	ldr	r1, [pc, #92]	@ (8011020 <mem_malloc+0x208>)
 8010fc2:	4812      	ldr	r0, [pc, #72]	@ (801100c <mem_malloc+0x1f4>)
 8010fc4:	f00d fe56 	bl	801ec74 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	3308      	adds	r3, #8
 8010fcc:	e011      	b.n	8010ff2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010fce:	8bfb      	ldrh	r3, [r7, #30]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7ff fc33 	bl	801083c <ptr_to_mem>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010fdc:	8bfa      	ldrh	r2, [r7, #30]
 8010fde:	8bbb      	ldrh	r3, [r7, #28]
 8010fe0:	f5c3 43a0 	rsb	r3, r3, #20480	@ 0x5000
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	f4ff af41 	bcc.w	8010e6c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010fea:	4804      	ldr	r0, [pc, #16]	@ (8010ffc <mem_malloc+0x1e4>)
 8010fec:	f00c ff57 	bl	801de9e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010ff0:	2300      	movs	r3, #0
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3720      	adds	r7, #32
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	2000f37c 	.word	0x2000f37c
 8011000:	2000f380 	.word	0x2000f380
 8011004:	080225f8 	.word	0x080225f8
 8011008:	080227bc 	.word	0x080227bc
 801100c:	08022640 	.word	0x08022640
 8011010:	2000f378 	.word	0x2000f378
 8011014:	080227d0 	.word	0x080227d0
 8011018:	080227ec 	.word	0x080227ec
 801101c:	0802281c 	.word	0x0802281c
 8011020:	0802284c 	.word	0x0802284c

08011024 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011024:	b480      	push	{r7}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	2200      	movs	r2, #0
 8011032:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	3303      	adds	r3, #3
 801103a:	f023 0303 	bic.w	r3, r3, #3
 801103e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011040:	2300      	movs	r3, #0
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	e011      	b.n	801106a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	68ba      	ldr	r2, [r7, #8]
 8011056:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	889b      	ldrh	r3, [r3, #4]
 801105c:	461a      	mov	r2, r3
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	4413      	add	r3, r2
 8011062:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	3301      	adds	r3, #1
 8011068:	60fb      	str	r3, [r7, #12]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	88db      	ldrh	r3, [r3, #6]
 801106e:	461a      	mov	r2, r3
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4293      	cmp	r3, r2
 8011074:	dbe7      	blt.n	8011046 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011076:	bf00      	nop
 8011078:	bf00      	nop
 801107a:	3714      	adds	r7, #20
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801108a:	2300      	movs	r3, #0
 801108c:	80fb      	strh	r3, [r7, #6]
 801108e:	e009      	b.n	80110a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011090:	88fb      	ldrh	r3, [r7, #6]
 8011092:	4a08      	ldr	r2, [pc, #32]	@ (80110b4 <memp_init+0x30>)
 8011094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff ffc3 	bl	8011024 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801109e:	88fb      	ldrh	r3, [r7, #6]
 80110a0:	3301      	adds	r3, #1
 80110a2:	80fb      	strh	r3, [r7, #6]
 80110a4:	88fb      	ldrh	r3, [r7, #6]
 80110a6:	2b0c      	cmp	r3, #12
 80110a8:	d9f2      	bls.n	8011090 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80110aa:	bf00      	nop
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	08071214 	.word	0x08071214

080110b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80110c0:	f00c ff18 	bl	801def4 <sys_arch_protect>
 80110c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d015      	beq.n	8011100 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	6812      	ldr	r2, [r2, #0]
 80110dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	f003 0303 	and.w	r3, r3, #3
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d006      	beq.n	80110f6 <do_memp_malloc_pool+0x3e>
 80110e8:	4b09      	ldr	r3, [pc, #36]	@ (8011110 <do_memp_malloc_pool+0x58>)
 80110ea:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80110ee:	4909      	ldr	r1, [pc, #36]	@ (8011114 <do_memp_malloc_pool+0x5c>)
 80110f0:	4809      	ldr	r0, [pc, #36]	@ (8011118 <do_memp_malloc_pool+0x60>)
 80110f2:	f00d fdbf 	bl	801ec74 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f00c ff0a 	bl	801df10 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	e003      	b.n	8011108 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f00c ff05 	bl	801df10 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3710      	adds	r7, #16
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	08022908 	.word	0x08022908
 8011114:	08022938 	.word	0x08022938
 8011118:	0802295c 	.word	0x0802295c

0801111c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	4603      	mov	r3, r0
 8011124:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011126:	79fb      	ldrb	r3, [r7, #7]
 8011128:	2b0c      	cmp	r3, #12
 801112a:	d908      	bls.n	801113e <memp_malloc+0x22>
 801112c:	4b0a      	ldr	r3, [pc, #40]	@ (8011158 <memp_malloc+0x3c>)
 801112e:	f240 1257 	movw	r2, #343	@ 0x157
 8011132:	490a      	ldr	r1, [pc, #40]	@ (801115c <memp_malloc+0x40>)
 8011134:	480a      	ldr	r0, [pc, #40]	@ (8011160 <memp_malloc+0x44>)
 8011136:	f00d fd9d 	bl	801ec74 <iprintf>
 801113a:	2300      	movs	r3, #0
 801113c:	e008      	b.n	8011150 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801113e:	79fb      	ldrb	r3, [r7, #7]
 8011140:	4a08      	ldr	r2, [pc, #32]	@ (8011164 <memp_malloc+0x48>)
 8011142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff ffb6 	bl	80110b8 <do_memp_malloc_pool>
 801114c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801114e:	68fb      	ldr	r3, [r7, #12]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	08022908 	.word	0x08022908
 801115c:	08022998 	.word	0x08022998
 8011160:	0802295c 	.word	0x0802295c
 8011164:	08071214 	.word	0x08071214

08011168 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	f003 0303 	and.w	r3, r3, #3
 8011178:	2b00      	cmp	r3, #0
 801117a:	d006      	beq.n	801118a <do_memp_free_pool+0x22>
 801117c:	4b0d      	ldr	r3, [pc, #52]	@ (80111b4 <do_memp_free_pool+0x4c>)
 801117e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011182:	490d      	ldr	r1, [pc, #52]	@ (80111b8 <do_memp_free_pool+0x50>)
 8011184:	480d      	ldr	r0, [pc, #52]	@ (80111bc <do_memp_free_pool+0x54>)
 8011186:	f00d fd75 	bl	801ec74 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801118e:	f00c feb1 	bl	801def4 <sys_arch_protect>
 8011192:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	681a      	ldr	r2, [r3, #0]
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	68fa      	ldr	r2, [r7, #12]
 80111a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80111a6:	68b8      	ldr	r0, [r7, #8]
 80111a8:	f00c feb2 	bl	801df10 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80111ac:	bf00      	nop
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	08022908 	.word	0x08022908
 80111b8:	080229b8 	.word	0x080229b8
 80111bc:	0802295c 	.word	0x0802295c

080111c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	6039      	str	r1, [r7, #0]
 80111ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80111cc:	79fb      	ldrb	r3, [r7, #7]
 80111ce:	2b0c      	cmp	r3, #12
 80111d0:	d907      	bls.n	80111e2 <memp_free+0x22>
 80111d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011204 <memp_free+0x44>)
 80111d4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80111d8:	490b      	ldr	r1, [pc, #44]	@ (8011208 <memp_free+0x48>)
 80111da:	480c      	ldr	r0, [pc, #48]	@ (801120c <memp_free+0x4c>)
 80111dc:	f00d fd4a 	bl	801ec74 <iprintf>
 80111e0:	e00c      	b.n	80111fc <memp_free+0x3c>

  if (mem == NULL) {
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d008      	beq.n	80111fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80111e8:	79fb      	ldrb	r3, [r7, #7]
 80111ea:	4a09      	ldr	r2, [pc, #36]	@ (8011210 <memp_free+0x50>)
 80111ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7ff ffb8 	bl	8011168 <do_memp_free_pool>
 80111f8:	e000      	b.n	80111fc <memp_free+0x3c>
    return;
 80111fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	08022908 	.word	0x08022908
 8011208:	080229d8 	.word	0x080229d8
 801120c:	0802295c 	.word	0x0802295c
 8011210:	08071214 	.word	0x08071214

08011214 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011214:	b480      	push	{r7}
 8011216:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011218:	bf00      	nop
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr
	...

08011224 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b086      	sub	sp, #24
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
 8011230:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d108      	bne.n	801124a <netif_add+0x26>
 8011238:	4b5b      	ldr	r3, [pc, #364]	@ (80113a8 <netif_add+0x184>)
 801123a:	f240 1227 	movw	r2, #295	@ 0x127
 801123e:	495b      	ldr	r1, [pc, #364]	@ (80113ac <netif_add+0x188>)
 8011240:	485b      	ldr	r0, [pc, #364]	@ (80113b0 <netif_add+0x18c>)
 8011242:	f00d fd17 	bl	801ec74 <iprintf>
 8011246:	2300      	movs	r3, #0
 8011248:	e0a9      	b.n	801139e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124c:	2b00      	cmp	r3, #0
 801124e:	d108      	bne.n	8011262 <netif_add+0x3e>
 8011250:	4b55      	ldr	r3, [pc, #340]	@ (80113a8 <netif_add+0x184>)
 8011252:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8011256:	4957      	ldr	r1, [pc, #348]	@ (80113b4 <netif_add+0x190>)
 8011258:	4855      	ldr	r0, [pc, #340]	@ (80113b0 <netif_add+0x18c>)
 801125a:	f00d fd0b 	bl	801ec74 <iprintf>
 801125e:	2300      	movs	r3, #0
 8011260:	e09d      	b.n	801139e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011268:	4b53      	ldr	r3, [pc, #332]	@ (80113b8 <netif_add+0x194>)
 801126a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d101      	bne.n	8011276 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011272:	4b51      	ldr	r3, [pc, #324]	@ (80113b8 <netif_add+0x194>)
 8011274:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d101      	bne.n	8011280 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801127c:	4b4e      	ldr	r3, [pc, #312]	@ (80113b8 <netif_add+0x194>)
 801127e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2200      	movs	r2, #0
 8011284:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2200      	movs	r2, #0
 801128a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	4a49      	ldr	r2, [pc, #292]	@ (80113bc <netif_add+0x198>)
 8011296:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2200      	movs	r2, #0
 801129c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2200      	movs	r2, #0
 80112a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	3324      	adds	r3, #36	@ 0x24
 80112aa:	2204      	movs	r2, #4
 80112ac:	2100      	movs	r1, #0
 80112ae:	4618      	mov	r0, r3
 80112b0:	f00d fe4a 	bl	801ef48 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2200      	movs	r2, #0
 80112b8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	6a3a      	ldr	r2, [r7, #32]
 80112be:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80112c0:	4b3f      	ldr	r3, [pc, #252]	@ (80113c0 <netif_add+0x19c>)
 80112c2:	781a      	ldrb	r2, [r3, #0]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112ce:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	68b9      	ldr	r1, [r7, #8]
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f000 f914 	bl	8011504 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80112dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112de:	68f8      	ldr	r0, [r7, #12]
 80112e0:	4798      	blx	r3
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d001      	beq.n	80112ec <netif_add+0xc8>
    return NULL;
 80112e8:	2300      	movs	r3, #0
 80112ea:	e058      	b.n	801139e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80112f2:	2bff      	cmp	r3, #255	@ 0xff
 80112f4:	d103      	bne.n	80112fe <netif_add+0xda>
        netif->num = 0;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80112fe:	2300      	movs	r3, #0
 8011300:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011302:	4b30      	ldr	r3, [pc, #192]	@ (80113c4 <netif_add+0x1a0>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	617b      	str	r3, [r7, #20]
 8011308:	e02b      	b.n	8011362 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801130a:	697a      	ldr	r2, [r7, #20]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	429a      	cmp	r2, r3
 8011310:	d106      	bne.n	8011320 <netif_add+0xfc>
 8011312:	4b25      	ldr	r3, [pc, #148]	@ (80113a8 <netif_add+0x184>)
 8011314:	f240 128b 	movw	r2, #395	@ 0x18b
 8011318:	492b      	ldr	r1, [pc, #172]	@ (80113c8 <netif_add+0x1a4>)
 801131a:	4825      	ldr	r0, [pc, #148]	@ (80113b0 <netif_add+0x18c>)
 801131c:	f00d fcaa 	bl	801ec74 <iprintf>
        num_netifs++;
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	3301      	adds	r3, #1
 8011324:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	2bff      	cmp	r3, #255	@ 0xff
 801132a:	dd06      	ble.n	801133a <netif_add+0x116>
 801132c:	4b1e      	ldr	r3, [pc, #120]	@ (80113a8 <netif_add+0x184>)
 801132e:	f240 128d 	movw	r2, #397	@ 0x18d
 8011332:	4926      	ldr	r1, [pc, #152]	@ (80113cc <netif_add+0x1a8>)
 8011334:	481e      	ldr	r0, [pc, #120]	@ (80113b0 <netif_add+0x18c>)
 8011336:	f00d fc9d 	bl	801ec74 <iprintf>
        if (netif2->num == netif->num) {
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011346:	429a      	cmp	r2, r3
 8011348:	d108      	bne.n	801135c <netif_add+0x138>
          netif->num++;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011350:	3301      	adds	r3, #1
 8011352:	b2da      	uxtb	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 801135a:	e005      	b.n	8011368 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	617b      	str	r3, [r7, #20]
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1d0      	bne.n	801130a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1be      	bne.n	80112ec <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011374:	2bfe      	cmp	r3, #254	@ 0xfe
 8011376:	d103      	bne.n	8011380 <netif_add+0x15c>
    netif_num = 0;
 8011378:	4b11      	ldr	r3, [pc, #68]	@ (80113c0 <netif_add+0x19c>)
 801137a:	2200      	movs	r2, #0
 801137c:	701a      	strb	r2, [r3, #0]
 801137e:	e006      	b.n	801138e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011386:	3301      	adds	r3, #1
 8011388:	b2da      	uxtb	r2, r3
 801138a:	4b0d      	ldr	r3, [pc, #52]	@ (80113c0 <netif_add+0x19c>)
 801138c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801138e:	4b0d      	ldr	r3, [pc, #52]	@ (80113c4 <netif_add+0x1a0>)
 8011390:	681a      	ldr	r2, [r3, #0]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011396:	4a0b      	ldr	r2, [pc, #44]	@ (80113c4 <netif_add+0x1a0>)
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801139c:	68fb      	ldr	r3, [r7, #12]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3718      	adds	r7, #24
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	080229f4 	.word	0x080229f4
 80113ac:	08022a88 	.word	0x08022a88
 80113b0:	08022a44 	.word	0x08022a44
 80113b4:	08022aa4 	.word	0x08022aa4
 80113b8:	08071298 	.word	0x08071298
 80113bc:	080117c5 	.word	0x080117c5
 80113c0:	20013db8 	.word	0x20013db8
 80113c4:	20013db0 	.word	0x20013db0
 80113c8:	08022ac8 	.word	0x08022ac8
 80113cc:	08022adc 	.word	0x08022adc

080113d0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80113da:	6839      	ldr	r1, [r7, #0]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f002 feb7 	bl	8014150 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80113e2:	6839      	ldr	r1, [r7, #0]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f008 f87b 	bl	80194e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80113ea:	bf00      	nop
 80113ec:	3708      	adds	r7, #8
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
	...

080113f4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d106      	bne.n	8011414 <netif_do_set_ipaddr+0x20>
 8011406:	4b1d      	ldr	r3, [pc, #116]	@ (801147c <netif_do_set_ipaddr+0x88>)
 8011408:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801140c:	491c      	ldr	r1, [pc, #112]	@ (8011480 <netif_do_set_ipaddr+0x8c>)
 801140e:	481d      	ldr	r0, [pc, #116]	@ (8011484 <netif_do_set_ipaddr+0x90>)
 8011410:	f00d fc30 	bl	801ec74 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d106      	bne.n	8011428 <netif_do_set_ipaddr+0x34>
 801141a:	4b18      	ldr	r3, [pc, #96]	@ (801147c <netif_do_set_ipaddr+0x88>)
 801141c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011420:	4917      	ldr	r1, [pc, #92]	@ (8011480 <netif_do_set_ipaddr+0x8c>)
 8011422:	4818      	ldr	r0, [pc, #96]	@ (8011484 <netif_do_set_ipaddr+0x90>)
 8011424:	f00d fc26 	bl	801ec74 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	3304      	adds	r3, #4
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	429a      	cmp	r2, r3
 8011434:	d01c      	beq.n	8011470 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	3304      	adds	r3, #4
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011446:	f107 0314 	add.w	r3, r7, #20
 801144a:	4619      	mov	r1, r3
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7ff ffbf 	bl	80113d0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <netif_do_set_ipaddr+0x6a>
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	e000      	b.n	8011460 <netif_do_set_ipaddr+0x6c>
 801145e:	2300      	movs	r3, #0
 8011460:	68fa      	ldr	r2, [r7, #12]
 8011462:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011464:	2101      	movs	r1, #1
 8011466:	68f8      	ldr	r0, [r7, #12]
 8011468:	f000 f8d2 	bl	8011610 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801146c:	2301      	movs	r3, #1
 801146e:	e000      	b.n	8011472 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3718      	adds	r7, #24
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	080229f4 	.word	0x080229f4
 8011480:	08022b0c 	.word	0x08022b0c
 8011484:	08022a44 	.word	0x08022a44

08011488 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	3308      	adds	r3, #8
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d00a      	beq.n	80114b8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <netif_do_set_netmask+0x26>
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	e000      	b.n	80114b0 <netif_do_set_netmask+0x28>
 80114ae:	2300      	movs	r3, #0
 80114b0:	68fa      	ldr	r2, [r7, #12]
 80114b2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80114b4:	2301      	movs	r3, #1
 80114b6:	e000      	b.n	80114ba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3714      	adds	r7, #20
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80114c6:	b480      	push	{r7}
 80114c8:	b085      	sub	sp, #20
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	60f8      	str	r0, [r7, #12]
 80114ce:	60b9      	str	r1, [r7, #8]
 80114d0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	330c      	adds	r3, #12
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d00a      	beq.n	80114f6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d002      	beq.n	80114ec <netif_do_set_gw+0x26>
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	e000      	b.n	80114ee <netif_do_set_gw+0x28>
 80114ec:	2300      	movs	r3, #0
 80114ee:	68fa      	ldr	r2, [r7, #12]
 80114f0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80114f2:	2301      	movs	r3, #1
 80114f4:	e000      	b.n	80114f8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80114f6:	2300      	movs	r3, #0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b088      	sub	sp, #32
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
 8011510:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011512:	2300      	movs	r3, #0
 8011514:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011516:	2300      	movs	r3, #0
 8011518:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d101      	bne.n	8011524 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011520:	4b1c      	ldr	r3, [pc, #112]	@ (8011594 <netif_set_addr+0x90>)
 8011522:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d101      	bne.n	801152e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801152a:	4b1a      	ldr	r3, [pc, #104]	@ (8011594 <netif_set_addr+0x90>)
 801152c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d101      	bne.n	8011538 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011534:	4b17      	ldr	r3, [pc, #92]	@ (8011594 <netif_set_addr+0x90>)
 8011536:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d003      	beq.n	8011546 <netif_set_addr+0x42>
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d101      	bne.n	801154a <netif_set_addr+0x46>
 8011546:	2301      	movs	r3, #1
 8011548:	e000      	b.n	801154c <netif_set_addr+0x48>
 801154a:	2300      	movs	r3, #0
 801154c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d006      	beq.n	8011562 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011554:	f107 0310 	add.w	r3, r7, #16
 8011558:	461a      	mov	r2, r3
 801155a:	68b9      	ldr	r1, [r7, #8]
 801155c:	68f8      	ldr	r0, [r7, #12]
 801155e:	f7ff ff49 	bl	80113f4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011562:	69fa      	ldr	r2, [r7, #28]
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f7ff ff8e 	bl	8011488 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801156c:	69ba      	ldr	r2, [r7, #24]
 801156e:	6839      	ldr	r1, [r7, #0]
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f7ff ffa8 	bl	80114c6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801157c:	f107 0310 	add.w	r3, r7, #16
 8011580:	461a      	mov	r2, r3
 8011582:	68b9      	ldr	r1, [r7, #8]
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f7ff ff35 	bl	80113f4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801158a:	bf00      	nop
 801158c:	3720      	adds	r7, #32
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08071298 	.word	0x08071298

08011598 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80115a0:	4a04      	ldr	r2, [pc, #16]	@ (80115b4 <netif_set_default+0x1c>)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80115a6:	bf00      	nop
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	20013db4 	.word	0x20013db4

080115b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d107      	bne.n	80115d6 <netif_set_up+0x1e>
 80115c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011604 <netif_set_up+0x4c>)
 80115c8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80115cc:	490e      	ldr	r1, [pc, #56]	@ (8011608 <netif_set_up+0x50>)
 80115ce:	480f      	ldr	r0, [pc, #60]	@ (801160c <netif_set_up+0x54>)
 80115d0:	f00d fb50 	bl	801ec74 <iprintf>
 80115d4:	e013      	b.n	80115fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80115dc:	f003 0301 	and.w	r3, r3, #1
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10c      	bne.n	80115fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80115ea:	f043 0301 	orr.w	r3, r3, #1
 80115ee:	b2da      	uxtb	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80115f6:	2103      	movs	r1, #3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 f809 	bl	8011610 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	080229f4 	.word	0x080229f4
 8011608:	08022b7c 	.word	0x08022b7c
 801160c:	08022a44 	.word	0x08022a44

08011610 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	460b      	mov	r3, r1
 801161a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d106      	bne.n	8011630 <netif_issue_reports+0x20>
 8011622:	4b18      	ldr	r3, [pc, #96]	@ (8011684 <netif_issue_reports+0x74>)
 8011624:	f240 326d 	movw	r2, #877	@ 0x36d
 8011628:	4917      	ldr	r1, [pc, #92]	@ (8011688 <netif_issue_reports+0x78>)
 801162a:	4818      	ldr	r0, [pc, #96]	@ (801168c <netif_issue_reports+0x7c>)
 801162c:	f00d fb22 	bl	801ec74 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011636:	f003 0304 	and.w	r3, r3, #4
 801163a:	2b00      	cmp	r3, #0
 801163c:	d01e      	beq.n	801167c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011644:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011648:	2b00      	cmp	r3, #0
 801164a:	d017      	beq.n	801167c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801164c:	78fb      	ldrb	r3, [r7, #3]
 801164e:	f003 0301 	and.w	r3, r3, #1
 8011652:	2b00      	cmp	r3, #0
 8011654:	d013      	beq.n	801167e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3304      	adds	r3, #4
 801165a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00e      	beq.n	801167e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011666:	f003 0308 	and.w	r3, r3, #8
 801166a:	2b00      	cmp	r3, #0
 801166c:	d007      	beq.n	801167e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	3304      	adds	r3, #4
 8011672:	4619      	mov	r1, r3
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f00a fdb3 	bl	801c1e0 <etharp_request>
 801167a:	e000      	b.n	801167e <netif_issue_reports+0x6e>
    return;
 801167c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	080229f4 	.word	0x080229f4
 8011688:	08022b98 	.word	0x08022b98
 801168c:	08022a44 	.word	0x08022a44

08011690 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d107      	bne.n	80116ae <netif_set_down+0x1e>
 801169e:	4b12      	ldr	r3, [pc, #72]	@ (80116e8 <netif_set_down+0x58>)
 80116a0:	f240 329b 	movw	r2, #923	@ 0x39b
 80116a4:	4911      	ldr	r1, [pc, #68]	@ (80116ec <netif_set_down+0x5c>)
 80116a6:	4812      	ldr	r0, [pc, #72]	@ (80116f0 <netif_set_down+0x60>)
 80116a8:	f00d fae4 	bl	801ec74 <iprintf>
 80116ac:	e019      	b.n	80116e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116b4:	f003 0301 	and.w	r3, r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d012      	beq.n	80116e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116c2:	f023 0301 	bic.w	r3, r3, #1
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116d4:	f003 0308 	and.w	r3, r3, #8
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d002      	beq.n	80116e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f00a f939 	bl	801b954 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	080229f4 	.word	0x080229f4
 80116ec:	08022bbc 	.word	0x08022bbc
 80116f0:	08022a44 	.word	0x08022a44

080116f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <netif_set_link_up+0x1e>
 8011702:	4b15      	ldr	r3, [pc, #84]	@ (8011758 <netif_set_link_up+0x64>)
 8011704:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011708:	4914      	ldr	r1, [pc, #80]	@ (801175c <netif_set_link_up+0x68>)
 801170a:	4815      	ldr	r0, [pc, #84]	@ (8011760 <netif_set_link_up+0x6c>)
 801170c:	f00d fab2 	bl	801ec74 <iprintf>
 8011710:	e01e      	b.n	8011750 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011718:	f003 0304 	and.w	r3, r3, #4
 801171c:	2b00      	cmp	r3, #0
 801171e:	d117      	bne.n	8011750 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011726:	f043 0304 	orr.w	r3, r3, #4
 801172a:	b2da      	uxtb	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f008 fafe 	bl	8019d34 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011738:	2103      	movs	r1, #3
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f7ff ff68 	bl	8011610 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	69db      	ldr	r3, [r3, #28]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d003      	beq.n	8011750 <netif_set_link_up+0x5c>
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	69db      	ldr	r3, [r3, #28]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011750:	3708      	adds	r7, #8
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	080229f4 	.word	0x080229f4
 801175c:	08022bdc 	.word	0x08022bdc
 8011760:	08022a44 	.word	0x08022a44

08011764 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d107      	bne.n	8011782 <netif_set_link_down+0x1e>
 8011772:	4b11      	ldr	r3, [pc, #68]	@ (80117b8 <netif_set_link_down+0x54>)
 8011774:	f240 4206 	movw	r2, #1030	@ 0x406
 8011778:	4910      	ldr	r1, [pc, #64]	@ (80117bc <netif_set_link_down+0x58>)
 801177a:	4811      	ldr	r0, [pc, #68]	@ (80117c0 <netif_set_link_down+0x5c>)
 801177c:	f00d fa7a 	bl	801ec74 <iprintf>
 8011780:	e017      	b.n	80117b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011788:	f003 0304 	and.w	r3, r3, #4
 801178c:	2b00      	cmp	r3, #0
 801178e:	d010      	beq.n	80117b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011796:	f023 0304 	bic.w	r3, r3, #4
 801179a:	b2da      	uxtb	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	69db      	ldr	r3, [r3, #28]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d003      	beq.n	80117b2 <netif_set_link_down+0x4e>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	69db      	ldr	r3, [r3, #28]
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	080229f4 	.word	0x080229f4
 80117bc:	08022c00 	.word	0x08022c00
 80117c0:	08022a44 	.word	0x08022a44

080117c4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80117d0:	f06f 030b 	mvn.w	r3, #11
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3714      	adds	r7, #20
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	4603      	mov	r3, r0
 80117e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80117ea:	79fb      	ldrb	r3, [r7, #7]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d013      	beq.n	8011818 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80117f0:	4b0d      	ldr	r3, [pc, #52]	@ (8011828 <netif_get_by_index+0x48>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	60fb      	str	r3, [r7, #12]
 80117f6:	e00c      	b.n	8011812 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80117fe:	3301      	adds	r3, #1
 8011800:	b2db      	uxtb	r3, r3
 8011802:	79fa      	ldrb	r2, [r7, #7]
 8011804:	429a      	cmp	r2, r3
 8011806:	d101      	bne.n	801180c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	e006      	b.n	801181a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	60fb      	str	r3, [r7, #12]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1ef      	bne.n	80117f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011818:	2300      	movs	r3, #0
}
 801181a:	4618      	mov	r0, r3
 801181c:	3714      	adds	r7, #20
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop
 8011828:	20013db0 	.word	0x20013db0

0801182c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011832:	f00c fb5f 	bl	801def4 <sys_arch_protect>
 8011836:	6038      	str	r0, [r7, #0]
 8011838:	4b0d      	ldr	r3, [pc, #52]	@ (8011870 <pbuf_free_ooseq+0x44>)
 801183a:	2200      	movs	r2, #0
 801183c:	701a      	strb	r2, [r3, #0]
 801183e:	6838      	ldr	r0, [r7, #0]
 8011840:	f00c fb66 	bl	801df10 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011844:	4b0b      	ldr	r3, [pc, #44]	@ (8011874 <pbuf_free_ooseq+0x48>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	607b      	str	r3, [r7, #4]
 801184a:	e00a      	b.n	8011862 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011850:	2b00      	cmp	r3, #0
 8011852:	d003      	beq.n	801185c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f002 fcb9 	bl	80141cc <tcp_free_ooseq>
      return;
 801185a:	e005      	b.n	8011868 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	607b      	str	r3, [r7, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1f1      	bne.n	801184c <pbuf_free_ooseq+0x20>
    }
  }
}
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	20013db9 	.word	0x20013db9
 8011874:	20013dc8 	.word	0x20013dc8

08011878 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011880:	f7ff ffd4 	bl	801182c <pbuf_free_ooseq>
}
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011892:	f00c fb2f 	bl	801def4 <sys_arch_protect>
 8011896:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011898:	4b0f      	ldr	r3, [pc, #60]	@ (80118d8 <pbuf_pool_is_empty+0x4c>)
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801189e:	4b0e      	ldr	r3, [pc, #56]	@ (80118d8 <pbuf_pool_is_empty+0x4c>)
 80118a0:	2201      	movs	r2, #1
 80118a2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f00c fb33 	bl	801df10 <sys_arch_unprotect>

  if (!queued) {
 80118aa:	78fb      	ldrb	r3, [r7, #3]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d10f      	bne.n	80118d0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80118b0:	2100      	movs	r1, #0
 80118b2:	480a      	ldr	r0, [pc, #40]	@ (80118dc <pbuf_pool_is_empty+0x50>)
 80118b4:	f7fe fd62 	bl	801037c <tcpip_try_callback>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d008      	beq.n	80118d0 <pbuf_pool_is_empty+0x44>
 80118be:	f00c fb19 	bl	801def4 <sys_arch_protect>
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	4b04      	ldr	r3, [pc, #16]	@ (80118d8 <pbuf_pool_is_empty+0x4c>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	701a      	strb	r2, [r3, #0]
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f00c fb20 	bl	801df10 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80118d0:	bf00      	nop
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	20013db9 	.word	0x20013db9
 80118dc:	08011879 	.word	0x08011879

080118e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	4611      	mov	r1, r2
 80118ec:	461a      	mov	r2, r3
 80118ee:	460b      	mov	r3, r1
 80118f0:	80fb      	strh	r3, [r7, #6]
 80118f2:	4613      	mov	r3, r2
 80118f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	88fa      	ldrh	r2, [r7, #6]
 8011906:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	88ba      	ldrh	r2, [r7, #4]
 801190c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801190e:	8b3b      	ldrh	r3, [r7, #24]
 8011910:	b2da      	uxtb	r2, r3
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	7f3a      	ldrb	r2, [r7, #28]
 801191a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2201      	movs	r2, #1
 8011920:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2200      	movs	r2, #0
 8011926:	73da      	strb	r2, [r3, #15]
}
 8011928:	bf00      	nop
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b08c      	sub	sp, #48	@ 0x30
 8011938:	af02      	add	r7, sp, #8
 801193a:	4603      	mov	r3, r0
 801193c:	71fb      	strb	r3, [r7, #7]
 801193e:	460b      	mov	r3, r1
 8011940:	80bb      	strh	r3, [r7, #4]
 8011942:	4613      	mov	r3, r2
 8011944:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011946:	79fb      	ldrb	r3, [r7, #7]
 8011948:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801194a:	887b      	ldrh	r3, [r7, #2]
 801194c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011950:	f000 8082 	beq.w	8011a58 <pbuf_alloc+0x124>
 8011954:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011958:	f300 80ca 	bgt.w	8011af0 <pbuf_alloc+0x1bc>
 801195c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011960:	d010      	beq.n	8011984 <pbuf_alloc+0x50>
 8011962:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011966:	f300 80c3 	bgt.w	8011af0 <pbuf_alloc+0x1bc>
 801196a:	2b01      	cmp	r3, #1
 801196c:	d002      	beq.n	8011974 <pbuf_alloc+0x40>
 801196e:	2b41      	cmp	r3, #65	@ 0x41
 8011970:	f040 80be 	bne.w	8011af0 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011974:	887a      	ldrh	r2, [r7, #2]
 8011976:	88bb      	ldrh	r3, [r7, #4]
 8011978:	4619      	mov	r1, r3
 801197a:	2000      	movs	r0, #0
 801197c:	f000 f8d4 	bl	8011b28 <pbuf_alloc_reference>
 8011980:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011982:	e0bf      	b.n	8011b04 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011984:	2300      	movs	r3, #0
 8011986:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011988:	2300      	movs	r3, #0
 801198a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801198c:	88bb      	ldrh	r3, [r7, #4]
 801198e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011990:	200c      	movs	r0, #12
 8011992:	f7ff fbc3 	bl	801111c <memp_malloc>
 8011996:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d109      	bne.n	80119b2 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 801199e:	f7ff ff75 	bl	801188c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80119a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d002      	beq.n	80119ae <pbuf_alloc+0x7a>
            pbuf_free(p);
 80119a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80119aa:	f000 faab 	bl	8011f04 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	e0a9      	b.n	8011b06 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80119b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80119b4:	3303      	adds	r3, #3
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	f023 0303 	bic.w	r3, r3, #3
 80119bc:	b29b      	uxth	r3, r3
 80119be:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 80119c2:	3304      	adds	r3, #4
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	8b7a      	ldrh	r2, [r7, #26]
 80119c8:	4293      	cmp	r3, r2
 80119ca:	bf28      	it	cs
 80119cc:	4613      	movcs	r3, r2
 80119ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80119d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80119d2:	3310      	adds	r3, #16
 80119d4:	693a      	ldr	r2, [r7, #16]
 80119d6:	4413      	add	r3, r2
 80119d8:	3303      	adds	r3, #3
 80119da:	f023 0303 	bic.w	r3, r3, #3
 80119de:	4618      	mov	r0, r3
 80119e0:	89f9      	ldrh	r1, [r7, #14]
 80119e2:	8b7a      	ldrh	r2, [r7, #26]
 80119e4:	2300      	movs	r3, #0
 80119e6:	9301      	str	r3, [sp, #4]
 80119e8:	887b      	ldrh	r3, [r7, #2]
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	460b      	mov	r3, r1
 80119ee:	4601      	mov	r1, r0
 80119f0:	6938      	ldr	r0, [r7, #16]
 80119f2:	f7ff ff75 	bl	80118e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	f003 0303 	and.w	r3, r3, #3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d006      	beq.n	8011a10 <pbuf_alloc+0xdc>
 8011a02:	4b43      	ldr	r3, [pc, #268]	@ (8011b10 <pbuf_alloc+0x1dc>)
 8011a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011a08:	4942      	ldr	r1, [pc, #264]	@ (8011b14 <pbuf_alloc+0x1e0>)
 8011a0a:	4843      	ldr	r0, [pc, #268]	@ (8011b18 <pbuf_alloc+0x1e4>)
 8011a0c:	f00d f932 	bl	801ec74 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a12:	3303      	adds	r3, #3
 8011a14:	f023 0303 	bic.w	r3, r3, #3
 8011a18:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d106      	bne.n	8011a2e <pbuf_alloc+0xfa>
 8011a20:	4b3b      	ldr	r3, [pc, #236]	@ (8011b10 <pbuf_alloc+0x1dc>)
 8011a22:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011a26:	493d      	ldr	r1, [pc, #244]	@ (8011b1c <pbuf_alloc+0x1e8>)
 8011a28:	483b      	ldr	r0, [pc, #236]	@ (8011b18 <pbuf_alloc+0x1e4>)
 8011a2a:	f00d f923 	bl	801ec74 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d102      	bne.n	8011a3a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a38:	e002      	b.n	8011a40 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	693a      	ldr	r2, [r7, #16]
 8011a3e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011a44:	8b7a      	ldrh	r2, [r7, #26]
 8011a46:	89fb      	ldrh	r3, [r7, #14]
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011a50:	8b7b      	ldrh	r3, [r7, #26]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d19c      	bne.n	8011990 <pbuf_alloc+0x5c>
      break;
 8011a56:	e055      	b.n	8011b04 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011a58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a5a:	3303      	adds	r3, #3
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	f023 0303 	bic.w	r3, r3, #3
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	88bb      	ldrh	r3, [r7, #4]
 8011a66:	3303      	adds	r3, #3
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	f023 0303 	bic.w	r3, r3, #3
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	4413      	add	r3, r2
 8011a72:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011a74:	8b3b      	ldrh	r3, [r7, #24]
 8011a76:	3310      	adds	r3, #16
 8011a78:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011a7a:	8b3a      	ldrh	r2, [r7, #24]
 8011a7c:	88bb      	ldrh	r3, [r7, #4]
 8011a7e:	3303      	adds	r3, #3
 8011a80:	f023 0303 	bic.w	r3, r3, #3
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d306      	bcc.n	8011a96 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011a88:	8afa      	ldrh	r2, [r7, #22]
 8011a8a:	88bb      	ldrh	r3, [r7, #4]
 8011a8c:	3303      	adds	r3, #3
 8011a8e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d201      	bcs.n	8011a9a <pbuf_alloc+0x166>
        return NULL;
 8011a96:	2300      	movs	r3, #0
 8011a98:	e035      	b.n	8011b06 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011a9a:	8afb      	ldrh	r3, [r7, #22]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7ff f9bb 	bl	8010e18 <mem_malloc>
 8011aa2:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <pbuf_alloc+0x17a>
        return NULL;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	e02b      	b.n	8011b06 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011ab0:	3310      	adds	r3, #16
 8011ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ab4:	4413      	add	r3, r2
 8011ab6:	3303      	adds	r3, #3
 8011ab8:	f023 0303 	bic.w	r3, r3, #3
 8011abc:	4618      	mov	r0, r3
 8011abe:	88b9      	ldrh	r1, [r7, #4]
 8011ac0:	88ba      	ldrh	r2, [r7, #4]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	887b      	ldrh	r3, [r7, #2]
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	460b      	mov	r3, r1
 8011acc:	4601      	mov	r1, r0
 8011ace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ad0:	f7ff ff06 	bl	80118e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	f003 0303 	and.w	r3, r3, #3
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d010      	beq.n	8011b02 <pbuf_alloc+0x1ce>
 8011ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8011b10 <pbuf_alloc+0x1dc>)
 8011ae2:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011ae6:	490e      	ldr	r1, [pc, #56]	@ (8011b20 <pbuf_alloc+0x1ec>)
 8011ae8:	480b      	ldr	r0, [pc, #44]	@ (8011b18 <pbuf_alloc+0x1e4>)
 8011aea:	f00d f8c3 	bl	801ec74 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011aee:	e008      	b.n	8011b02 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011af0:	4b07      	ldr	r3, [pc, #28]	@ (8011b10 <pbuf_alloc+0x1dc>)
 8011af2:	f240 1227 	movw	r2, #295	@ 0x127
 8011af6:	490b      	ldr	r1, [pc, #44]	@ (8011b24 <pbuf_alloc+0x1f0>)
 8011af8:	4807      	ldr	r0, [pc, #28]	@ (8011b18 <pbuf_alloc+0x1e4>)
 8011afa:	f00d f8bb 	bl	801ec74 <iprintf>
      return NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	e001      	b.n	8011b06 <pbuf_alloc+0x1d2>
      break;
 8011b02:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3728      	adds	r7, #40	@ 0x28
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	08022c24 	.word	0x08022c24
 8011b14:	08022c54 	.word	0x08022c54
 8011b18:	08022c84 	.word	0x08022c84
 8011b1c:	08022cac 	.word	0x08022cac
 8011b20:	08022ce0 	.word	0x08022ce0
 8011b24:	08022d0c 	.word	0x08022d0c

08011b28 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b086      	sub	sp, #24
 8011b2c:	af02      	add	r7, sp, #8
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	807b      	strh	r3, [r7, #2]
 8011b34:	4613      	mov	r3, r2
 8011b36:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011b38:	883b      	ldrh	r3, [r7, #0]
 8011b3a:	2b41      	cmp	r3, #65	@ 0x41
 8011b3c:	d009      	beq.n	8011b52 <pbuf_alloc_reference+0x2a>
 8011b3e:	883b      	ldrh	r3, [r7, #0]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d006      	beq.n	8011b52 <pbuf_alloc_reference+0x2a>
 8011b44:	4b0f      	ldr	r3, [pc, #60]	@ (8011b84 <pbuf_alloc_reference+0x5c>)
 8011b46:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011b4a:	490f      	ldr	r1, [pc, #60]	@ (8011b88 <pbuf_alloc_reference+0x60>)
 8011b4c:	480f      	ldr	r0, [pc, #60]	@ (8011b8c <pbuf_alloc_reference+0x64>)
 8011b4e:	f00d f891 	bl	801ec74 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011b52:	200b      	movs	r0, #11
 8011b54:	f7ff fae2 	bl	801111c <memp_malloc>
 8011b58:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d101      	bne.n	8011b64 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011b60:	2300      	movs	r3, #0
 8011b62:	e00b      	b.n	8011b7c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011b64:	8879      	ldrh	r1, [r7, #2]
 8011b66:	887a      	ldrh	r2, [r7, #2]
 8011b68:	2300      	movs	r3, #0
 8011b6a:	9301      	str	r3, [sp, #4]
 8011b6c:	883b      	ldrh	r3, [r7, #0]
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	460b      	mov	r3, r1
 8011b72:	6879      	ldr	r1, [r7, #4]
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f7ff feb3 	bl	80118e0 <pbuf_init_alloced_pbuf>
  return p;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3710      	adds	r7, #16
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	08022c24 	.word	0x08022c24
 8011b88:	08022d28 	.word	0x08022d28
 8011b8c:	08022c84 	.word	0x08022c84

08011b90 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b088      	sub	sp, #32
 8011b94:	af02      	add	r7, sp, #8
 8011b96:	607b      	str	r3, [r7, #4]
 8011b98:	4603      	mov	r3, r0
 8011b9a:	73fb      	strb	r3, [r7, #15]
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	81bb      	strh	r3, [r7, #12]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
 8011ba6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011ba8:	8a7b      	ldrh	r3, [r7, #18]
 8011baa:	3303      	adds	r3, #3
 8011bac:	f023 0203 	bic.w	r2, r3, #3
 8011bb0:	89bb      	ldrh	r3, [r7, #12]
 8011bb2:	441a      	add	r2, r3
 8011bb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d901      	bls.n	8011bbe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e018      	b.n	8011bf0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d007      	beq.n	8011bd4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011bc4:	8a7b      	ldrh	r3, [r7, #18]
 8011bc6:	3303      	adds	r3, #3
 8011bc8:	f023 0303 	bic.w	r3, r3, #3
 8011bcc:	6a3a      	ldr	r2, [r7, #32]
 8011bce:	4413      	add	r3, r2
 8011bd0:	617b      	str	r3, [r7, #20]
 8011bd2:	e001      	b.n	8011bd8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	89b9      	ldrh	r1, [r7, #12]
 8011bdc:	89ba      	ldrh	r2, [r7, #12]
 8011bde:	2302      	movs	r3, #2
 8011be0:	9301      	str	r3, [sp, #4]
 8011be2:	897b      	ldrh	r3, [r7, #10]
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	460b      	mov	r3, r1
 8011be8:	6979      	ldr	r1, [r7, #20]
 8011bea:	f7ff fe79 	bl	80118e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011bee:	687b      	ldr	r3, [r7, #4]
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3718      	adds	r7, #24
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	460b      	mov	r3, r1
 8011c02:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d106      	bne.n	8011c18 <pbuf_realloc+0x20>
 8011c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8011cf4 <pbuf_realloc+0xfc>)
 8011c0c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011c10:	4939      	ldr	r1, [pc, #228]	@ (8011cf8 <pbuf_realloc+0x100>)
 8011c12:	483a      	ldr	r0, [pc, #232]	@ (8011cfc <pbuf_realloc+0x104>)
 8011c14:	f00d f82e 	bl	801ec74 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	891b      	ldrh	r3, [r3, #8]
 8011c1c:	887a      	ldrh	r2, [r7, #2]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d263      	bcs.n	8011cea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	891a      	ldrh	r2, [r3, #8]
 8011c26:	887b      	ldrh	r3, [r7, #2]
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011c2c:	887b      	ldrh	r3, [r7, #2]
 8011c2e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011c34:	e018      	b.n	8011c68 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	895b      	ldrh	r3, [r3, #10]
 8011c3a:	897a      	ldrh	r2, [r7, #10]
 8011c3c:	1ad3      	subs	r3, r2, r3
 8011c3e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	891a      	ldrh	r2, [r3, #8]
 8011c44:	893b      	ldrh	r3, [r7, #8]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d106      	bne.n	8011c68 <pbuf_realloc+0x70>
 8011c5a:	4b26      	ldr	r3, [pc, #152]	@ (8011cf4 <pbuf_realloc+0xfc>)
 8011c5c:	f240 12af 	movw	r2, #431	@ 0x1af
 8011c60:	4927      	ldr	r1, [pc, #156]	@ (8011d00 <pbuf_realloc+0x108>)
 8011c62:	4826      	ldr	r0, [pc, #152]	@ (8011cfc <pbuf_realloc+0x104>)
 8011c64:	f00d f806 	bl	801ec74 <iprintf>
  while (rem_len > q->len) {
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	895b      	ldrh	r3, [r3, #10]
 8011c6c:	897a      	ldrh	r2, [r7, #10]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d8e1      	bhi.n	8011c36 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	7b1b      	ldrb	r3, [r3, #12]
 8011c76:	f003 030f 	and.w	r3, r3, #15
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d121      	bne.n	8011cc2 <pbuf_realloc+0xca>
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	895b      	ldrh	r3, [r3, #10]
 8011c82:	897a      	ldrh	r2, [r7, #10]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d01c      	beq.n	8011cc2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	7b5b      	ldrb	r3, [r3, #13]
 8011c8c:	f003 0302 	and.w	r3, r3, #2
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d116      	bne.n	8011cc2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	685a      	ldr	r2, [r3, #4]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	1ad3      	subs	r3, r2, r3
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	897b      	ldrh	r3, [r7, #10]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7fe ffac 	bl	8010c04 <mem_trim>
 8011cac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d106      	bne.n	8011cc2 <pbuf_realloc+0xca>
 8011cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011cf4 <pbuf_realloc+0xfc>)
 8011cb6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011cba:	4912      	ldr	r1, [pc, #72]	@ (8011d04 <pbuf_realloc+0x10c>)
 8011cbc:	480f      	ldr	r0, [pc, #60]	@ (8011cfc <pbuf_realloc+0x104>)
 8011cbe:	f00c ffd9 	bl	801ec74 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	897a      	ldrh	r2, [r7, #10]
 8011cc6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	895a      	ldrh	r2, [r3, #10]
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d004      	beq.n	8011ce2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f000 f911 	bl	8011f04 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	601a      	str	r2, [r3, #0]
 8011ce8:	e000      	b.n	8011cec <pbuf_realloc+0xf4>
    return;
 8011cea:	bf00      	nop

}
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	08022c24 	.word	0x08022c24
 8011cf8:	08022d3c 	.word	0x08022d3c
 8011cfc:	08022c84 	.word	0x08022c84
 8011d00:	08022d54 	.word	0x08022d54
 8011d04:	08022d6c 	.word	0x08022d6c

08011d08 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	4613      	mov	r3, r2
 8011d14:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d106      	bne.n	8011d2a <pbuf_add_header_impl+0x22>
 8011d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8011dcc <pbuf_add_header_impl+0xc4>)
 8011d1e:	f240 12df 	movw	r2, #479	@ 0x1df
 8011d22:	492b      	ldr	r1, [pc, #172]	@ (8011dd0 <pbuf_add_header_impl+0xc8>)
 8011d24:	482b      	ldr	r0, [pc, #172]	@ (8011dd4 <pbuf_add_header_impl+0xcc>)
 8011d26:	f00c ffa5 	bl	801ec74 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d003      	beq.n	8011d38 <pbuf_add_header_impl+0x30>
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d36:	d301      	bcc.n	8011d3c <pbuf_add_header_impl+0x34>
    return 1;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e043      	b.n	8011dc4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d101      	bne.n	8011d46 <pbuf_add_header_impl+0x3e>
    return 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	e03e      	b.n	8011dc4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	891a      	ldrh	r2, [r3, #8]
 8011d4e:	8a7b      	ldrh	r3, [r7, #18]
 8011d50:	4413      	add	r3, r2
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	8a7a      	ldrh	r2, [r7, #18]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d901      	bls.n	8011d5e <pbuf_add_header_impl+0x56>
    return 1;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e032      	b.n	8011dc4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	7b1b      	ldrb	r3, [r3, #12]
 8011d62:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011d64:	8a3b      	ldrh	r3, [r7, #16]
 8011d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00c      	beq.n	8011d88 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	685a      	ldr	r2, [r3, #4]
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	425b      	negs	r3, r3
 8011d76:	4413      	add	r3, r2
 8011d78:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3310      	adds	r3, #16
 8011d7e:	697a      	ldr	r2, [r7, #20]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d20d      	bcs.n	8011da0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011d84:	2301      	movs	r3, #1
 8011d86:	e01d      	b.n	8011dc4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011d88:	79fb      	ldrb	r3, [r7, #7]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d006      	beq.n	8011d9c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	425b      	negs	r3, r3
 8011d96:	4413      	add	r3, r2
 8011d98:	617b      	str	r3, [r7, #20]
 8011d9a:	e001      	b.n	8011da0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	e011      	b.n	8011dc4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	697a      	ldr	r2, [r7, #20]
 8011da4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	895a      	ldrh	r2, [r3, #10]
 8011daa:	8a7b      	ldrh	r3, [r7, #18]
 8011dac:	4413      	add	r3, r2
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	891a      	ldrh	r2, [r3, #8]
 8011db8:	8a7b      	ldrh	r3, [r7, #18]
 8011dba:	4413      	add	r3, r2
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	811a      	strh	r2, [r3, #8]


  return 0;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3718      	adds	r7, #24
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	08022c24 	.word	0x08022c24
 8011dd0:	08022d88 	.word	0x08022d88
 8011dd4:	08022c84 	.word	0x08022c84

08011dd8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011de2:	2200      	movs	r2, #0
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f7ff ff8e 	bl	8011d08 <pbuf_add_header_impl>
 8011dec:	4603      	mov	r3, r0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
	...

08011df8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d106      	bne.n	8011e16 <pbuf_remove_header+0x1e>
 8011e08:	4b20      	ldr	r3, [pc, #128]	@ (8011e8c <pbuf_remove_header+0x94>)
 8011e0a:	f240 224b 	movw	r2, #587	@ 0x24b
 8011e0e:	4920      	ldr	r1, [pc, #128]	@ (8011e90 <pbuf_remove_header+0x98>)
 8011e10:	4820      	ldr	r0, [pc, #128]	@ (8011e94 <pbuf_remove_header+0x9c>)
 8011e12:	f00c ff2f 	bl	801ec74 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d003      	beq.n	8011e24 <pbuf_remove_header+0x2c>
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e22:	d301      	bcc.n	8011e28 <pbuf_remove_header+0x30>
    return 1;
 8011e24:	2301      	movs	r3, #1
 8011e26:	e02c      	b.n	8011e82 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <pbuf_remove_header+0x3a>
    return 0;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	e027      	b.n	8011e82 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	895b      	ldrh	r3, [r3, #10]
 8011e3a:	89fa      	ldrh	r2, [r7, #14]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d908      	bls.n	8011e52 <pbuf_remove_header+0x5a>
 8011e40:	4b12      	ldr	r3, [pc, #72]	@ (8011e8c <pbuf_remove_header+0x94>)
 8011e42:	f240 2255 	movw	r2, #597	@ 0x255
 8011e46:	4914      	ldr	r1, [pc, #80]	@ (8011e98 <pbuf_remove_header+0xa0>)
 8011e48:	4812      	ldr	r0, [pc, #72]	@ (8011e94 <pbuf_remove_header+0x9c>)
 8011e4a:	f00c ff13 	bl	801ec74 <iprintf>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e017      	b.n	8011e82 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	441a      	add	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	895a      	ldrh	r2, [r3, #10]
 8011e68:	89fb      	ldrh	r3, [r7, #14]
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	891a      	ldrh	r2, [r3, #8]
 8011e76:	89fb      	ldrh	r3, [r7, #14]
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	08022c24 	.word	0x08022c24
 8011e90:	08022d88 	.word	0x08022d88
 8011e94:	08022c84 	.word	0x08022c84
 8011e98:	08022d94 	.word	0x08022d94

08011e9c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	807b      	strh	r3, [r7, #2]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	da08      	bge.n	8011ec6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eb8:	425b      	negs	r3, r3
 8011eba:	4619      	mov	r1, r3
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f7ff ff9b 	bl	8011df8 <pbuf_remove_header>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	e007      	b.n	8011ed6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011ec6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eca:	787a      	ldrb	r2, [r7, #1]
 8011ecc:	4619      	mov	r1, r3
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ff ff1a 	bl	8011d08 <pbuf_add_header_impl>
 8011ed4:	4603      	mov	r3, r0
  }
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b082      	sub	sp, #8
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011eea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eee:	2201      	movs	r2, #1
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7ff ffd2 	bl	8011e9c <pbuf_header_impl>
 8011ef8:	4603      	mov	r3, r0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b088      	sub	sp, #32
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10b      	bne.n	8011f2a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d106      	bne.n	8011f26 <pbuf_free+0x22>
 8011f18:	4b3b      	ldr	r3, [pc, #236]	@ (8012008 <pbuf_free+0x104>)
 8011f1a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011f1e:	493b      	ldr	r1, [pc, #236]	@ (801200c <pbuf_free+0x108>)
 8011f20:	483b      	ldr	r0, [pc, #236]	@ (8012010 <pbuf_free+0x10c>)
 8011f22:	f00c fea7 	bl	801ec74 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e069      	b.n	8011ffe <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011f2e:	e062      	b.n	8011ff6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011f30:	f00b ffe0 	bl	801def4 <sys_arch_protect>
 8011f34:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	7b9b      	ldrb	r3, [r3, #14]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d106      	bne.n	8011f4c <pbuf_free+0x48>
 8011f3e:	4b32      	ldr	r3, [pc, #200]	@ (8012008 <pbuf_free+0x104>)
 8011f40:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011f44:	4933      	ldr	r1, [pc, #204]	@ (8012014 <pbuf_free+0x110>)
 8011f46:	4832      	ldr	r0, [pc, #200]	@ (8012010 <pbuf_free+0x10c>)
 8011f48:	f00c fe94 	bl	801ec74 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	7b9b      	ldrb	r3, [r3, #14]
 8011f50:	3b01      	subs	r3, #1
 8011f52:	b2da      	uxtb	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	739a      	strb	r2, [r3, #14]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	7b9b      	ldrb	r3, [r3, #14]
 8011f5c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011f5e:	69b8      	ldr	r0, [r7, #24]
 8011f60:	f00b ffd6 	bl	801df10 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d143      	bne.n	8011ff2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	7b1b      	ldrb	r3, [r3, #12]
 8011f74:	f003 030f 	and.w	r3, r3, #15
 8011f78:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	7b5b      	ldrb	r3, [r3, #13]
 8011f7e:	f003 0302 	and.w	r3, r3, #2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d011      	beq.n	8011faa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d106      	bne.n	8011fa0 <pbuf_free+0x9c>
 8011f92:	4b1d      	ldr	r3, [pc, #116]	@ (8012008 <pbuf_free+0x104>)
 8011f94:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8011f98:	491f      	ldr	r1, [pc, #124]	@ (8012018 <pbuf_free+0x114>)
 8011f9a:	481d      	ldr	r0, [pc, #116]	@ (8012010 <pbuf_free+0x10c>)
 8011f9c:	f00c fe6a 	bl	801ec74 <iprintf>
        pc->custom_free_function(p);
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	691b      	ldr	r3, [r3, #16]
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	4798      	blx	r3
 8011fa8:	e01d      	b.n	8011fe6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011faa:	7bfb      	ldrb	r3, [r7, #15]
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	d104      	bne.n	8011fba <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011fb0:	6879      	ldr	r1, [r7, #4]
 8011fb2:	200c      	movs	r0, #12
 8011fb4:	f7ff f904 	bl	80111c0 <memp_free>
 8011fb8:	e015      	b.n	8011fe6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011fba:	7bfb      	ldrb	r3, [r7, #15]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d104      	bne.n	8011fca <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011fc0:	6879      	ldr	r1, [r7, #4]
 8011fc2:	200b      	movs	r0, #11
 8011fc4:	f7ff f8fc 	bl	80111c0 <memp_free>
 8011fc8:	e00d      	b.n	8011fe6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011fca:	7bfb      	ldrb	r3, [r7, #15]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d103      	bne.n	8011fd8 <pbuf_free+0xd4>
          mem_free(p);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7fe fd87 	bl	8010ae4 <mem_free>
 8011fd6:	e006      	b.n	8011fe6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8012008 <pbuf_free+0x104>)
 8011fda:	f240 320f 	movw	r2, #783	@ 0x30f
 8011fde:	490f      	ldr	r1, [pc, #60]	@ (801201c <pbuf_free+0x118>)
 8011fe0:	480b      	ldr	r0, [pc, #44]	@ (8012010 <pbuf_free+0x10c>)
 8011fe2:	f00c fe47 	bl	801ec74 <iprintf>
        }
      }
      count++;
 8011fe6:	7ffb      	ldrb	r3, [r7, #31]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	607b      	str	r3, [r7, #4]
 8011ff0:	e001      	b.n	8011ff6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d199      	bne.n	8011f30 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3720      	adds	r7, #32
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	08022c24 	.word	0x08022c24
 801200c:	08022d88 	.word	0x08022d88
 8012010:	08022c84 	.word	0x08022c84
 8012014:	08022db4 	.word	0x08022db4
 8012018:	08022dcc 	.word	0x08022dcc
 801201c:	08022df0 	.word	0x08022df0

08012020 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012020:	b480      	push	{r7}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801202c:	e005      	b.n	801203a <pbuf_clen+0x1a>
    ++len;
 801202e:	89fb      	ldrh	r3, [r7, #14]
 8012030:	3301      	adds	r3, #1
 8012032:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1f6      	bne.n	801202e <pbuf_clen+0xe>
  }
  return len;
 8012040:	89fb      	ldrh	r3, [r7, #14]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr
	...

08012050 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d016      	beq.n	801208c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801205e:	f00b ff49 	bl	801def4 <sys_arch_protect>
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	7b9b      	ldrb	r3, [r3, #14]
 8012068:	3301      	adds	r3, #1
 801206a:	b2da      	uxtb	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	739a      	strb	r2, [r3, #14]
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	f00b ff4d 	bl	801df10 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	7b9b      	ldrb	r3, [r3, #14]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d106      	bne.n	801208c <pbuf_ref+0x3c>
 801207e:	4b05      	ldr	r3, [pc, #20]	@ (8012094 <pbuf_ref+0x44>)
 8012080:	f240 3242 	movw	r2, #834	@ 0x342
 8012084:	4904      	ldr	r1, [pc, #16]	@ (8012098 <pbuf_ref+0x48>)
 8012086:	4805      	ldr	r0, [pc, #20]	@ (801209c <pbuf_ref+0x4c>)
 8012088:	f00c fdf4 	bl	801ec74 <iprintf>
  }
}
 801208c:	bf00      	nop
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	08022c24 	.word	0x08022c24
 8012098:	08022e04 	.word	0x08022e04
 801209c:	08022c84 	.word	0x08022c84

080120a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d002      	beq.n	80120b6 <pbuf_cat+0x16>
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d107      	bne.n	80120c6 <pbuf_cat+0x26>
 80120b6:	4b20      	ldr	r3, [pc, #128]	@ (8012138 <pbuf_cat+0x98>)
 80120b8:	f240 3259 	movw	r2, #857	@ 0x359
 80120bc:	491f      	ldr	r1, [pc, #124]	@ (801213c <pbuf_cat+0x9c>)
 80120be:	4820      	ldr	r0, [pc, #128]	@ (8012140 <pbuf_cat+0xa0>)
 80120c0:	f00c fdd8 	bl	801ec74 <iprintf>
 80120c4:	e034      	b.n	8012130 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	60fb      	str	r3, [r7, #12]
 80120ca:	e00a      	b.n	80120e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	891a      	ldrh	r2, [r3, #8]
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	891b      	ldrh	r3, [r3, #8]
 80120d4:	4413      	add	r3, r2
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	60fb      	str	r3, [r7, #12]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1f0      	bne.n	80120cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	891a      	ldrh	r2, [r3, #8]
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	895b      	ldrh	r3, [r3, #10]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d006      	beq.n	8012104 <pbuf_cat+0x64>
 80120f6:	4b10      	ldr	r3, [pc, #64]	@ (8012138 <pbuf_cat+0x98>)
 80120f8:	f240 3262 	movw	r2, #866	@ 0x362
 80120fc:	4911      	ldr	r1, [pc, #68]	@ (8012144 <pbuf_cat+0xa4>)
 80120fe:	4810      	ldr	r0, [pc, #64]	@ (8012140 <pbuf_cat+0xa0>)
 8012100:	f00c fdb8 	bl	801ec74 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d006      	beq.n	801211a <pbuf_cat+0x7a>
 801210c:	4b0a      	ldr	r3, [pc, #40]	@ (8012138 <pbuf_cat+0x98>)
 801210e:	f240 3263 	movw	r2, #867	@ 0x363
 8012112:	490d      	ldr	r1, [pc, #52]	@ (8012148 <pbuf_cat+0xa8>)
 8012114:	480a      	ldr	r0, [pc, #40]	@ (8012140 <pbuf_cat+0xa0>)
 8012116:	f00c fdad 	bl	801ec74 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	891a      	ldrh	r2, [r3, #8]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	891b      	ldrh	r3, [r3, #8]
 8012122:	4413      	add	r3, r2
 8012124:	b29a      	uxth	r2, r3
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012130:	3710      	adds	r7, #16
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	08022c24 	.word	0x08022c24
 801213c:	08022e18 	.word	0x08022e18
 8012140:	08022c84 	.word	0x08022c84
 8012144:	08022e50 	.word	0x08022e50
 8012148:	08022e80 	.word	0x08022e80

0801214c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012156:	6839      	ldr	r1, [r7, #0]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff ffa1 	bl	80120a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801215e:	6838      	ldr	r0, [r7, #0]
 8012160:	f7ff ff76 	bl	8012050 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012176:	2300      	movs	r3, #0
 8012178:	617b      	str	r3, [r7, #20]
 801217a:	2300      	movs	r3, #0
 801217c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d008      	beq.n	8012196 <pbuf_copy+0x2a>
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d005      	beq.n	8012196 <pbuf_copy+0x2a>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	891a      	ldrh	r2, [r3, #8]
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	891b      	ldrh	r3, [r3, #8]
 8012192:	429a      	cmp	r2, r3
 8012194:	d209      	bcs.n	80121aa <pbuf_copy+0x3e>
 8012196:	4b57      	ldr	r3, [pc, #348]	@ (80122f4 <pbuf_copy+0x188>)
 8012198:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801219c:	4956      	ldr	r1, [pc, #344]	@ (80122f8 <pbuf_copy+0x18c>)
 801219e:	4857      	ldr	r0, [pc, #348]	@ (80122fc <pbuf_copy+0x190>)
 80121a0:	f00c fd68 	bl	801ec74 <iprintf>
 80121a4:	f06f 030f 	mvn.w	r3, #15
 80121a8:	e09f      	b.n	80122ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	895b      	ldrh	r3, [r3, #10]
 80121ae:	461a      	mov	r2, r3
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	1ad2      	subs	r2, r2, r3
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	895b      	ldrh	r3, [r3, #10]
 80121b8:	4619      	mov	r1, r3
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	1acb      	subs	r3, r1, r3
 80121be:	429a      	cmp	r2, r3
 80121c0:	d306      	bcc.n	80121d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	895b      	ldrh	r3, [r3, #10]
 80121c6:	461a      	mov	r2, r3
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	60fb      	str	r3, [r7, #12]
 80121ce:	e005      	b.n	80121dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	895b      	ldrh	r3, [r3, #10]
 80121d4:	461a      	mov	r2, r3
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	1ad3      	subs	r3, r2, r3
 80121da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	685a      	ldr	r2, [r3, #4]
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	18d0      	adds	r0, r2, r3
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	685a      	ldr	r2, [r3, #4]
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	4413      	add	r3, r2
 80121ec:	68fa      	ldr	r2, [r7, #12]
 80121ee:	4619      	mov	r1, r3
 80121f0:	f00c ff67 	bl	801f0c2 <memcpy>
    offset_to += len;
 80121f4:	697a      	ldr	r2, [r7, #20]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	4413      	add	r3, r2
 80121fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	4413      	add	r3, r2
 8012202:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	895b      	ldrh	r3, [r3, #10]
 8012208:	461a      	mov	r2, r3
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	4293      	cmp	r3, r2
 801220e:	d906      	bls.n	801221e <pbuf_copy+0xb2>
 8012210:	4b38      	ldr	r3, [pc, #224]	@ (80122f4 <pbuf_copy+0x188>)
 8012212:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012216:	493a      	ldr	r1, [pc, #232]	@ (8012300 <pbuf_copy+0x194>)
 8012218:	4838      	ldr	r0, [pc, #224]	@ (80122fc <pbuf_copy+0x190>)
 801221a:	f00c fd2b 	bl	801ec74 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	895b      	ldrh	r3, [r3, #10]
 8012222:	461a      	mov	r2, r3
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	4293      	cmp	r3, r2
 8012228:	d906      	bls.n	8012238 <pbuf_copy+0xcc>
 801222a:	4b32      	ldr	r3, [pc, #200]	@ (80122f4 <pbuf_copy+0x188>)
 801222c:	f240 32da 	movw	r2, #986	@ 0x3da
 8012230:	4934      	ldr	r1, [pc, #208]	@ (8012304 <pbuf_copy+0x198>)
 8012232:	4832      	ldr	r0, [pc, #200]	@ (80122fc <pbuf_copy+0x190>)
 8012234:	f00c fd1e 	bl	801ec74 <iprintf>
    if (offset_from >= p_from->len) {
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	895b      	ldrh	r3, [r3, #10]
 801223c:	461a      	mov	r2, r3
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	4293      	cmp	r3, r2
 8012242:	d304      	bcc.n	801224e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012244:	2300      	movs	r3, #0
 8012246:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	895b      	ldrh	r3, [r3, #10]
 8012252:	461a      	mov	r2, r3
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	4293      	cmp	r3, r2
 8012258:	d114      	bne.n	8012284 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d10c      	bne.n	8012284 <pbuf_copy+0x118>
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d009      	beq.n	8012284 <pbuf_copy+0x118>
 8012270:	4b20      	ldr	r3, [pc, #128]	@ (80122f4 <pbuf_copy+0x188>)
 8012272:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012276:	4924      	ldr	r1, [pc, #144]	@ (8012308 <pbuf_copy+0x19c>)
 8012278:	4820      	ldr	r0, [pc, #128]	@ (80122fc <pbuf_copy+0x190>)
 801227a:	f00c fcfb 	bl	801ec74 <iprintf>
 801227e:	f06f 030f 	mvn.w	r3, #15
 8012282:	e032      	b.n	80122ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d013      	beq.n	80122b2 <pbuf_copy+0x146>
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	895a      	ldrh	r2, [r3, #10]
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	891b      	ldrh	r3, [r3, #8]
 8012292:	429a      	cmp	r2, r3
 8012294:	d10d      	bne.n	80122b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d009      	beq.n	80122b2 <pbuf_copy+0x146>
 801229e:	4b15      	ldr	r3, [pc, #84]	@ (80122f4 <pbuf_copy+0x188>)
 80122a0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80122a4:	4919      	ldr	r1, [pc, #100]	@ (801230c <pbuf_copy+0x1a0>)
 80122a6:	4815      	ldr	r0, [pc, #84]	@ (80122fc <pbuf_copy+0x190>)
 80122a8:	f00c fce4 	bl	801ec74 <iprintf>
 80122ac:	f06f 0305 	mvn.w	r3, #5
 80122b0:	e01b      	b.n	80122ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d013      	beq.n	80122e0 <pbuf_copy+0x174>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	895a      	ldrh	r2, [r3, #10]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	891b      	ldrh	r3, [r3, #8]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d10d      	bne.n	80122e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d009      	beq.n	80122e0 <pbuf_copy+0x174>
 80122cc:	4b09      	ldr	r3, [pc, #36]	@ (80122f4 <pbuf_copy+0x188>)
 80122ce:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80122d2:	490e      	ldr	r1, [pc, #56]	@ (801230c <pbuf_copy+0x1a0>)
 80122d4:	4809      	ldr	r0, [pc, #36]	@ (80122fc <pbuf_copy+0x190>)
 80122d6:	f00c fccd 	bl	801ec74 <iprintf>
 80122da:	f06f 0305 	mvn.w	r3, #5
 80122de:	e004      	b.n	80122ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f47f af61 	bne.w	80121aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	08022c24 	.word	0x08022c24
 80122f8:	08022ecc 	.word	0x08022ecc
 80122fc:	08022c84 	.word	0x08022c84
 8012300:	08022efc 	.word	0x08022efc
 8012304:	08022f14 	.word	0x08022f14
 8012308:	08022f30 	.word	0x08022f30
 801230c:	08022f40 	.word	0x08022f40

08012310 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b088      	sub	sp, #32
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	4611      	mov	r1, r2
 801231c:	461a      	mov	r2, r3
 801231e:	460b      	mov	r3, r1
 8012320:	80fb      	strh	r3, [r7, #6]
 8012322:	4613      	mov	r3, r2
 8012324:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012326:	2300      	movs	r3, #0
 8012328:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d108      	bne.n	8012346 <pbuf_copy_partial+0x36>
 8012334:	4b2b      	ldr	r3, [pc, #172]	@ (80123e4 <pbuf_copy_partial+0xd4>)
 8012336:	f240 420a 	movw	r2, #1034	@ 0x40a
 801233a:	492b      	ldr	r1, [pc, #172]	@ (80123e8 <pbuf_copy_partial+0xd8>)
 801233c:	482b      	ldr	r0, [pc, #172]	@ (80123ec <pbuf_copy_partial+0xdc>)
 801233e:	f00c fc99 	bl	801ec74 <iprintf>
 8012342:	2300      	movs	r3, #0
 8012344:	e04a      	b.n	80123dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d108      	bne.n	801235e <pbuf_copy_partial+0x4e>
 801234c:	4b25      	ldr	r3, [pc, #148]	@ (80123e4 <pbuf_copy_partial+0xd4>)
 801234e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8012352:	4927      	ldr	r1, [pc, #156]	@ (80123f0 <pbuf_copy_partial+0xe0>)
 8012354:	4825      	ldr	r0, [pc, #148]	@ (80123ec <pbuf_copy_partial+0xdc>)
 8012356:	f00c fc8d 	bl	801ec74 <iprintf>
 801235a:	2300      	movs	r3, #0
 801235c:	e03e      	b.n	80123dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	61fb      	str	r3, [r7, #28]
 8012362:	e034      	b.n	80123ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012364:	88bb      	ldrh	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00a      	beq.n	8012380 <pbuf_copy_partial+0x70>
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	895b      	ldrh	r3, [r3, #10]
 801236e:	88ba      	ldrh	r2, [r7, #4]
 8012370:	429a      	cmp	r2, r3
 8012372:	d305      	bcc.n	8012380 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	895b      	ldrh	r3, [r3, #10]
 8012378:	88ba      	ldrh	r2, [r7, #4]
 801237a:	1ad3      	subs	r3, r2, r3
 801237c:	80bb      	strh	r3, [r7, #4]
 801237e:	e023      	b.n	80123c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	895a      	ldrh	r2, [r3, #10]
 8012384:	88bb      	ldrh	r3, [r7, #4]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801238a:	8b3a      	ldrh	r2, [r7, #24]
 801238c:	88fb      	ldrh	r3, [r7, #6]
 801238e:	429a      	cmp	r2, r3
 8012390:	d901      	bls.n	8012396 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012392:	88fb      	ldrh	r3, [r7, #6]
 8012394:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012396:	8b7b      	ldrh	r3, [r7, #26]
 8012398:	68ba      	ldr	r2, [r7, #8]
 801239a:	18d0      	adds	r0, r2, r3
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	685a      	ldr	r2, [r3, #4]
 80123a0:	88bb      	ldrh	r3, [r7, #4]
 80123a2:	4413      	add	r3, r2
 80123a4:	8b3a      	ldrh	r2, [r7, #24]
 80123a6:	4619      	mov	r1, r3
 80123a8:	f00c fe8b 	bl	801f0c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80123ac:	8afa      	ldrh	r2, [r7, #22]
 80123ae:	8b3b      	ldrh	r3, [r7, #24]
 80123b0:	4413      	add	r3, r2
 80123b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80123b4:	8b7a      	ldrh	r2, [r7, #26]
 80123b6:	8b3b      	ldrh	r3, [r7, #24]
 80123b8:	4413      	add	r3, r2
 80123ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80123bc:	88fa      	ldrh	r2, [r7, #6]
 80123be:	8b3b      	ldrh	r3, [r7, #24]
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80123c4:	2300      	movs	r3, #0
 80123c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	61fb      	str	r3, [r7, #28]
 80123ce:	88fb      	ldrh	r3, [r7, #6]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d002      	beq.n	80123da <pbuf_copy_partial+0xca>
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d1c4      	bne.n	8012364 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80123da:	8afb      	ldrh	r3, [r7, #22]
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3720      	adds	r7, #32
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	08022c24 	.word	0x08022c24
 80123e8:	08022f6c 	.word	0x08022f6c
 80123ec:	08022c84 	.word	0x08022c84
 80123f0:	08022f8c 	.word	0x08022f8c

080123f4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	460b      	mov	r3, r1
 80123fe:	607a      	str	r2, [r7, #4]
 8012400:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8012402:	897b      	ldrh	r3, [r7, #10]
 8012404:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801240a:	e007      	b.n	801241c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	895b      	ldrh	r3, [r3, #10]
 8012410:	8afa      	ldrh	r2, [r7, #22]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d004      	beq.n	801242c <pbuf_skip_const+0x38>
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	895b      	ldrh	r3, [r3, #10]
 8012426:	8afa      	ldrh	r2, [r7, #22]
 8012428:	429a      	cmp	r2, r3
 801242a:	d2ef      	bcs.n	801240c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d002      	beq.n	8012438 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	8afa      	ldrh	r2, [r7, #22]
 8012436:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8012438:	693b      	ldr	r3, [r7, #16]
}
 801243a:	4618      	mov	r0, r3
 801243c:	371c      	adds	r7, #28
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr

08012446 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b086      	sub	sp, #24
 801244a:	af00      	add	r7, sp, #0
 801244c:	60f8      	str	r0, [r7, #12]
 801244e:	460b      	mov	r3, r1
 8012450:	607a      	str	r2, [r7, #4]
 8012452:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8012454:	897b      	ldrh	r3, [r7, #10]
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	4619      	mov	r1, r3
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f7ff ffca 	bl	80123f4 <pbuf_skip_const>
 8012460:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8012462:	697b      	ldr	r3, [r7, #20]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3718      	adds	r7, #24
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b088      	sub	sp, #32
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	4613      	mov	r3, r2
 8012478:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801247a:	88fb      	ldrh	r3, [r7, #6]
 801247c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d109      	bne.n	801249c <pbuf_take+0x30>
 8012488:	4b3a      	ldr	r3, [pc, #232]	@ (8012574 <pbuf_take+0x108>)
 801248a:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 801248e:	493a      	ldr	r1, [pc, #232]	@ (8012578 <pbuf_take+0x10c>)
 8012490:	483a      	ldr	r0, [pc, #232]	@ (801257c <pbuf_take+0x110>)
 8012492:	f00c fbef 	bl	801ec74 <iprintf>
 8012496:	f06f 030f 	mvn.w	r3, #15
 801249a:	e067      	b.n	801256c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d109      	bne.n	80124b6 <pbuf_take+0x4a>
 80124a2:	4b34      	ldr	r3, [pc, #208]	@ (8012574 <pbuf_take+0x108>)
 80124a4:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80124a8:	4935      	ldr	r1, [pc, #212]	@ (8012580 <pbuf_take+0x114>)
 80124aa:	4834      	ldr	r0, [pc, #208]	@ (801257c <pbuf_take+0x110>)
 80124ac:	f00c fbe2 	bl	801ec74 <iprintf>
 80124b0:	f06f 030f 	mvn.w	r3, #15
 80124b4:	e05a      	b.n	801256c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	891b      	ldrh	r3, [r3, #8]
 80124ba:	88fa      	ldrh	r2, [r7, #6]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d909      	bls.n	80124d4 <pbuf_take+0x68>
 80124c0:	4b2c      	ldr	r3, [pc, #176]	@ (8012574 <pbuf_take+0x108>)
 80124c2:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80124c6:	492f      	ldr	r1, [pc, #188]	@ (8012584 <pbuf_take+0x118>)
 80124c8:	482c      	ldr	r0, [pc, #176]	@ (801257c <pbuf_take+0x110>)
 80124ca:	f00c fbd3 	bl	801ec74 <iprintf>
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295
 80124d2:	e04b      	b.n	801256c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d007      	beq.n	80124ea <pbuf_take+0x7e>
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d004      	beq.n	80124ea <pbuf_take+0x7e>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	891b      	ldrh	r3, [r3, #8]
 80124e4:	88fa      	ldrh	r2, [r7, #6]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d902      	bls.n	80124f0 <pbuf_take+0x84>
    return ERR_ARG;
 80124ea:	f06f 030f 	mvn.w	r3, #15
 80124ee:	e03d      	b.n	801256c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	61fb      	str	r3, [r7, #28]
 80124f4:	e028      	b.n	8012548 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d106      	bne.n	801250a <pbuf_take+0x9e>
 80124fc:	4b1d      	ldr	r3, [pc, #116]	@ (8012574 <pbuf_take+0x108>)
 80124fe:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8012502:	4921      	ldr	r1, [pc, #132]	@ (8012588 <pbuf_take+0x11c>)
 8012504:	481d      	ldr	r0, [pc, #116]	@ (801257c <pbuf_take+0x110>)
 8012506:	f00c fbb5 	bl	801ec74 <iprintf>
    buf_copy_len = total_copy_len;
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	895b      	ldrh	r3, [r3, #10]
 8012512:	461a      	mov	r2, r3
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	4293      	cmp	r3, r2
 8012518:	d902      	bls.n	8012520 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	895b      	ldrh	r3, [r3, #10]
 801251e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	6858      	ldr	r0, [r3, #4]
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	4413      	add	r3, r2
 801252a:	69ba      	ldr	r2, [r7, #24]
 801252c:	4619      	mov	r1, r3
 801252e:	f00c fdc8 	bl	801f0c2 <memcpy>
    total_copy_len -= buf_copy_len;
 8012532:	697a      	ldr	r2, [r7, #20]
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	1ad3      	subs	r3, r2, r3
 8012538:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801253a:	693a      	ldr	r2, [r7, #16]
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	4413      	add	r3, r2
 8012540:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	61fb      	str	r3, [r7, #28]
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d1d3      	bne.n	80124f6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d103      	bne.n	801255c <pbuf_take+0xf0>
 8012554:	88fb      	ldrh	r3, [r7, #6]
 8012556:	693a      	ldr	r2, [r7, #16]
 8012558:	429a      	cmp	r2, r3
 801255a:	d006      	beq.n	801256a <pbuf_take+0xfe>
 801255c:	4b05      	ldr	r3, [pc, #20]	@ (8012574 <pbuf_take+0x108>)
 801255e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8012562:	490a      	ldr	r1, [pc, #40]	@ (801258c <pbuf_take+0x120>)
 8012564:	4805      	ldr	r0, [pc, #20]	@ (801257c <pbuf_take+0x110>)
 8012566:	f00c fb85 	bl	801ec74 <iprintf>
  return ERR_OK;
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3720      	adds	r7, #32
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	08022c24 	.word	0x08022c24
 8012578:	08022ffc 	.word	0x08022ffc
 801257c:	08022c84 	.word	0x08022c84
 8012580:	08023014 	.word	0x08023014
 8012584:	08023030 	.word	0x08023030
 8012588:	08023050 	.word	0x08023050
 801258c:	08023068 	.word	0x08023068

08012590 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b088      	sub	sp, #32
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	4611      	mov	r1, r2
 801259c:	461a      	mov	r2, r3
 801259e:	460b      	mov	r3, r1
 80125a0:	80fb      	strh	r3, [r7, #6]
 80125a2:	4613      	mov	r3, r2
 80125a4:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80125a6:	f107 0210 	add.w	r2, r7, #16
 80125aa:	88bb      	ldrh	r3, [r7, #4]
 80125ac:	4619      	mov	r1, r3
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f7ff ff49 	bl	8012446 <pbuf_skip>
 80125b4:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d047      	beq.n	801264c <pbuf_take_at+0xbc>
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	891b      	ldrh	r3, [r3, #8]
 80125c0:	461a      	mov	r2, r3
 80125c2:	8a3b      	ldrh	r3, [r7, #16]
 80125c4:	4619      	mov	r1, r3
 80125c6:	88fb      	ldrh	r3, [r7, #6]
 80125c8:	440b      	add	r3, r1
 80125ca:	429a      	cmp	r2, r3
 80125cc:	db3e      	blt.n	801264c <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80125ce:	88fb      	ldrh	r3, [r7, #6]
 80125d0:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	895a      	ldrh	r2, [r3, #10]
 80125da:	8a3b      	ldrh	r3, [r7, #16]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d806      	bhi.n	80125ee <pbuf_take_at+0x5e>
 80125e0:	4b1d      	ldr	r3, [pc, #116]	@ (8012658 <pbuf_take_at+0xc8>)
 80125e2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80125e6:	491d      	ldr	r1, [pc, #116]	@ (801265c <pbuf_take_at+0xcc>)
 80125e8:	481d      	ldr	r0, [pc, #116]	@ (8012660 <pbuf_take_at+0xd0>)
 80125ea:	f00c fb43 	bl	801ec74 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	895b      	ldrh	r3, [r3, #10]
 80125f2:	461a      	mov	r2, r3
 80125f4:	8a3b      	ldrh	r3, [r7, #16]
 80125f6:	1ad2      	subs	r2, r2, r3
 80125f8:	88fb      	ldrh	r3, [r7, #6]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	da05      	bge.n	801260a <pbuf_take_at+0x7a>
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	895a      	ldrh	r2, [r3, #10]
 8012602:	8a3b      	ldrh	r3, [r7, #16]
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	b29b      	uxth	r3, r3
 8012608:	e000      	b.n	801260c <pbuf_take_at+0x7c>
 801260a:	88fb      	ldrh	r3, [r7, #6]
 801260c:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	8a3a      	ldrh	r2, [r7, #16]
 8012614:	4413      	add	r3, r2
 8012616:	8a7a      	ldrh	r2, [r7, #18]
 8012618:	68b9      	ldr	r1, [r7, #8]
 801261a:	4618      	mov	r0, r3
 801261c:	f00c fd51 	bl	801f0c2 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8012620:	8b7a      	ldrh	r2, [r7, #26]
 8012622:	8a7b      	ldrh	r3, [r7, #18]
 8012624:	1ad3      	subs	r3, r2, r3
 8012626:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012628:	8a7b      	ldrh	r3, [r7, #18]
 801262a:	697a      	ldr	r2, [r7, #20]
 801262c:	4413      	add	r3, r2
 801262e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8012630:	8b7b      	ldrh	r3, [r7, #26]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d008      	beq.n	8012648 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	8b7a      	ldrh	r2, [r7, #26]
 801263c:	6979      	ldr	r1, [r7, #20]
 801263e:	4618      	mov	r0, r3
 8012640:	f7ff ff14 	bl	801246c <pbuf_take>
 8012644:	4603      	mov	r3, r0
 8012646:	e003      	b.n	8012650 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8012648:	2300      	movs	r3, #0
 801264a:	e001      	b.n	8012650 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 801264c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012650:	4618      	mov	r0, r3
 8012652:	3720      	adds	r7, #32
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}
 8012658:	08022c24 	.word	0x08022c24
 801265c:	08023080 	.word	0x08023080
 8012660:	08022c84 	.word	0x08022c84

08012664 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	4603      	mov	r3, r0
 801266c:	603a      	str	r2, [r7, #0]
 801266e:	71fb      	strb	r3, [r7, #7]
 8012670:	460b      	mov	r3, r1
 8012672:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	8919      	ldrh	r1, [r3, #8]
 8012678:	88ba      	ldrh	r2, [r7, #4]
 801267a:	79fb      	ldrb	r3, [r7, #7]
 801267c:	4618      	mov	r0, r3
 801267e:	f7ff f959 	bl	8011934 <pbuf_alloc>
 8012682:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d101      	bne.n	801268e <pbuf_clone+0x2a>
    return NULL;
 801268a:	2300      	movs	r3, #0
 801268c:	e011      	b.n	80126b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801268e:	6839      	ldr	r1, [r7, #0]
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f7ff fd6b 	bl	801216c <pbuf_copy>
 8012696:	4603      	mov	r3, r0
 8012698:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801269a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d006      	beq.n	80126b0 <pbuf_clone+0x4c>
 80126a2:	4b06      	ldr	r3, [pc, #24]	@ (80126bc <pbuf_clone+0x58>)
 80126a4:	f240 5224 	movw	r2, #1316	@ 0x524
 80126a8:	4905      	ldr	r1, [pc, #20]	@ (80126c0 <pbuf_clone+0x5c>)
 80126aa:	4806      	ldr	r0, [pc, #24]	@ (80126c4 <pbuf_clone+0x60>)
 80126ac:	f00c fae2 	bl	801ec74 <iprintf>
  return q;
 80126b0:	68fb      	ldr	r3, [r7, #12]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	08022c24 	.word	0x08022c24
 80126c0:	08023098 	.word	0x08023098
 80126c4:	08022c84 	.word	0x08022c84

080126c8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	460b      	mov	r3, r1
 80126d2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80126d4:	887b      	ldrh	r3, [r7, #2]
 80126d6:	4619      	mov	r1, r3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 f80c 	bl	80126f6 <pbuf_try_get_at>
 80126de:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	db02      	blt.n	80126ec <pbuf_get_at+0x24>
    return (u8_t)ret;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	e000      	b.n	80126ee <pbuf_get_at+0x26>
  }
  return 0;
 80126ec:	2300      	movs	r3, #0
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b084      	sub	sp, #16
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	460b      	mov	r3, r1
 8012700:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8012702:	f107 020a 	add.w	r2, r7, #10
 8012706:	887b      	ldrh	r3, [r7, #2]
 8012708:	4619      	mov	r1, r3
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7ff fe72 	bl	80123f4 <pbuf_skip_const>
 8012710:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d00a      	beq.n	801272e <pbuf_try_get_at+0x38>
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	895a      	ldrh	r2, [r3, #10]
 801271c:	897b      	ldrh	r3, [r7, #10]
 801271e:	429a      	cmp	r2, r3
 8012720:	d905      	bls.n	801272e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	897a      	ldrh	r2, [r7, #10]
 8012728:	4413      	add	r3, r2
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	e001      	b.n	8012732 <pbuf_try_get_at+0x3c>
  }
  return -1;
 801272e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012732:	4618      	mov	r0, r3
 8012734:	3710      	adds	r7, #16
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}

0801273a <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 801273a:	b580      	push	{r7, lr}
 801273c:	b084      	sub	sp, #16
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
 8012742:	460b      	mov	r3, r1
 8012744:	807b      	strh	r3, [r7, #2]
 8012746:	4613      	mov	r3, r2
 8012748:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 801274a:	f107 020a 	add.w	r2, r7, #10
 801274e:	887b      	ldrh	r3, [r7, #2]
 8012750:	4619      	mov	r1, r3
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7ff fe77 	bl	8012446 <pbuf_skip>
 8012758:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d00a      	beq.n	8012776 <pbuf_put_at+0x3c>
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	895a      	ldrh	r2, [r3, #10]
 8012764:	897b      	ldrh	r3, [r7, #10]
 8012766:	429a      	cmp	r2, r3
 8012768:	d905      	bls.n	8012776 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	897a      	ldrh	r2, [r7, #10]
 8012770:	4413      	add	r3, r2
 8012772:	787a      	ldrb	r2, [r7, #1]
 8012774:	701a      	strb	r2, [r3, #0]
  }
}
 8012776:	bf00      	nop
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
	...

08012780 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012784:	f00b fca6 	bl	801e0d4 <rand>
 8012788:	4603      	mov	r3, r0
 801278a:	b29b      	uxth	r3, r3
 801278c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012790:	b29b      	uxth	r3, r3
 8012792:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012796:	b29a      	uxth	r2, r3
 8012798:	4b01      	ldr	r3, [pc, #4]	@ (80127a0 <tcp_init+0x20>)
 801279a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801279c:	bf00      	nop
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	200000bc 	.word	0x200000bc

080127a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	7d1b      	ldrb	r3, [r3, #20]
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d105      	bne.n	80127c0 <tcp_free+0x1c>
 80127b4:	4b06      	ldr	r3, [pc, #24]	@ (80127d0 <tcp_free+0x2c>)
 80127b6:	22d4      	movs	r2, #212	@ 0xd4
 80127b8:	4906      	ldr	r1, [pc, #24]	@ (80127d4 <tcp_free+0x30>)
 80127ba:	4807      	ldr	r0, [pc, #28]	@ (80127d8 <tcp_free+0x34>)
 80127bc:	f00c fa5a 	bl	801ec74 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80127c0:	6879      	ldr	r1, [r7, #4]
 80127c2:	2001      	movs	r0, #1
 80127c4:	f7fe fcfc 	bl	80111c0 <memp_free>
}
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	08023124 	.word	0x08023124
 80127d4:	08023154 	.word	0x08023154
 80127d8:	08023168 	.word	0x08023168

080127dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	7d1b      	ldrb	r3, [r3, #20]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d105      	bne.n	80127f8 <tcp_free_listen+0x1c>
 80127ec:	4b06      	ldr	r3, [pc, #24]	@ (8012808 <tcp_free_listen+0x2c>)
 80127ee:	22df      	movs	r2, #223	@ 0xdf
 80127f0:	4906      	ldr	r1, [pc, #24]	@ (801280c <tcp_free_listen+0x30>)
 80127f2:	4807      	ldr	r0, [pc, #28]	@ (8012810 <tcp_free_listen+0x34>)
 80127f4:	f00c fa3e 	bl	801ec74 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	2002      	movs	r0, #2
 80127fc:	f7fe fce0 	bl	80111c0 <memp_free>
}
 8012800:	bf00      	nop
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	08023124 	.word	0x08023124
 801280c:	08023190 	.word	0x08023190
 8012810:	08023168 	.word	0x08023168

08012814 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012818:	f001 f804 	bl	8013824 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801281c:	4b07      	ldr	r3, [pc, #28]	@ (801283c <tcp_tmr+0x28>)
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	3301      	adds	r3, #1
 8012822:	b2da      	uxtb	r2, r3
 8012824:	4b05      	ldr	r3, [pc, #20]	@ (801283c <tcp_tmr+0x28>)
 8012826:	701a      	strb	r2, [r3, #0]
 8012828:	4b04      	ldr	r3, [pc, #16]	@ (801283c <tcp_tmr+0x28>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	f003 0301 	and.w	r3, r3, #1
 8012830:	2b00      	cmp	r3, #0
 8012832:	d001      	beq.n	8012838 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012834:	f000 fcb4 	bl	80131a0 <tcp_slowtmr>
  }
}
 8012838:	bf00      	nop
 801283a:	bd80      	pop	{r7, pc}
 801283c:	20013dd1 	.word	0x20013dd1

08012840 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d105      	bne.n	801285c <tcp_remove_listener+0x1c>
 8012850:	4b0d      	ldr	r3, [pc, #52]	@ (8012888 <tcp_remove_listener+0x48>)
 8012852:	22ff      	movs	r2, #255	@ 0xff
 8012854:	490d      	ldr	r1, [pc, #52]	@ (801288c <tcp_remove_listener+0x4c>)
 8012856:	480e      	ldr	r0, [pc, #56]	@ (8012890 <tcp_remove_listener+0x50>)
 8012858:	f00c fa0c 	bl	801ec74 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	60fb      	str	r3, [r7, #12]
 8012860:	e00a      	b.n	8012878 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012866:	683a      	ldr	r2, [r7, #0]
 8012868:	429a      	cmp	r2, r3
 801286a:	d102      	bne.n	8012872 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2200      	movs	r2, #0
 8012870:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	60fb      	str	r3, [r7, #12]
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d1f1      	bne.n	8012862 <tcp_remove_listener+0x22>
    }
  }
}
 801287e:	bf00      	nop
 8012880:	bf00      	nop
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	08023124 	.word	0x08023124
 801288c:	080231ac 	.word	0x080231ac
 8012890:	08023168 	.word	0x08023168

08012894 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_listen_closed+0x1c>
 80128a2:	4b14      	ldr	r3, [pc, #80]	@ (80128f4 <tcp_listen_closed+0x60>)
 80128a4:	f240 1211 	movw	r2, #273	@ 0x111
 80128a8:	4913      	ldr	r1, [pc, #76]	@ (80128f8 <tcp_listen_closed+0x64>)
 80128aa:	4814      	ldr	r0, [pc, #80]	@ (80128fc <tcp_listen_closed+0x68>)
 80128ac:	f00c f9e2 	bl	801ec74 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7d1b      	ldrb	r3, [r3, #20]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d006      	beq.n	80128c6 <tcp_listen_closed+0x32>
 80128b8:	4b0e      	ldr	r3, [pc, #56]	@ (80128f4 <tcp_listen_closed+0x60>)
 80128ba:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80128be:	4910      	ldr	r1, [pc, #64]	@ (8012900 <tcp_listen_closed+0x6c>)
 80128c0:	480e      	ldr	r0, [pc, #56]	@ (80128fc <tcp_listen_closed+0x68>)
 80128c2:	f00c f9d7 	bl	801ec74 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80128c6:	2301      	movs	r3, #1
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	e00b      	b.n	80128e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80128cc:	4a0d      	ldr	r2, [pc, #52]	@ (8012904 <tcp_listen_closed+0x70>)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	6879      	ldr	r1, [r7, #4]
 80128d8:	4618      	mov	r0, r3
 80128da:	f7ff ffb1 	bl	8012840 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	3301      	adds	r3, #1
 80128e2:	60fb      	str	r3, [r7, #12]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2b03      	cmp	r3, #3
 80128e8:	d9f0      	bls.n	80128cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80128ea:	bf00      	nop
 80128ec:	bf00      	nop
 80128ee:	3710      	adds	r7, #16
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	08023124 	.word	0x08023124
 80128f8:	080231d4 	.word	0x080231d4
 80128fc:	08023168 	.word	0x08023168
 8012900:	080231e0 	.word	0x080231e0
 8012904:	08071260 	.word	0x08071260

08012908 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012908:	b5b0      	push	{r4, r5, r7, lr}
 801290a:	b088      	sub	sp, #32
 801290c:	af04      	add	r7, sp, #16
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d106      	bne.n	8012928 <tcp_close_shutdown+0x20>
 801291a:	4b63      	ldr	r3, [pc, #396]	@ (8012aa8 <tcp_close_shutdown+0x1a0>)
 801291c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8012920:	4962      	ldr	r1, [pc, #392]	@ (8012aac <tcp_close_shutdown+0x1a4>)
 8012922:	4863      	ldr	r0, [pc, #396]	@ (8012ab0 <tcp_close_shutdown+0x1a8>)
 8012924:	f00c f9a6 	bl	801ec74 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012928:	78fb      	ldrb	r3, [r7, #3]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d067      	beq.n	80129fe <tcp_close_shutdown+0xf6>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	7d1b      	ldrb	r3, [r3, #20]
 8012932:	2b04      	cmp	r3, #4
 8012934:	d003      	beq.n	801293e <tcp_close_shutdown+0x36>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	7d1b      	ldrb	r3, [r3, #20]
 801293a:	2b07      	cmp	r3, #7
 801293c:	d15f      	bne.n	80129fe <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012942:	2b00      	cmp	r3, #0
 8012944:	d105      	bne.n	8012952 <tcp_close_shutdown+0x4a>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801294a:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801294e:	4293      	cmp	r3, r2
 8012950:	d055      	beq.n	80129fe <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	8b5b      	ldrh	r3, [r3, #26]
 8012956:	f003 0310 	and.w	r3, r3, #16
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_close_shutdown+0x64>
 801295e:	4b52      	ldr	r3, [pc, #328]	@ (8012aa8 <tcp_close_shutdown+0x1a0>)
 8012960:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012964:	4953      	ldr	r1, [pc, #332]	@ (8012ab4 <tcp_close_shutdown+0x1ac>)
 8012966:	4852      	ldr	r0, [pc, #328]	@ (8012ab0 <tcp_close_shutdown+0x1a8>)
 8012968:	f00c f984 	bl	801ec74 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012974:	687d      	ldr	r5, [r7, #4]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	3304      	adds	r3, #4
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	8ad2      	ldrh	r2, [r2, #22]
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	8b09      	ldrh	r1, [r1, #24]
 8012982:	9102      	str	r1, [sp, #8]
 8012984:	9201      	str	r2, [sp, #4]
 8012986:	9300      	str	r3, [sp, #0]
 8012988:	462b      	mov	r3, r5
 801298a:	4622      	mov	r2, r4
 801298c:	4601      	mov	r1, r0
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f005 fd28 	bl	80183e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f001 fa65 	bl	8013e64 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801299a:	4b47      	ldr	r3, [pc, #284]	@ (8012ab8 <tcp_close_shutdown+0x1b0>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d105      	bne.n	80129b0 <tcp_close_shutdown+0xa8>
 80129a4:	4b44      	ldr	r3, [pc, #272]	@ (8012ab8 <tcp_close_shutdown+0x1b0>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	4a43      	ldr	r2, [pc, #268]	@ (8012ab8 <tcp_close_shutdown+0x1b0>)
 80129ac:	6013      	str	r3, [r2, #0]
 80129ae:	e013      	b.n	80129d8 <tcp_close_shutdown+0xd0>
 80129b0:	4b41      	ldr	r3, [pc, #260]	@ (8012ab8 <tcp_close_shutdown+0x1b0>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	60fb      	str	r3, [r7, #12]
 80129b6:	e00c      	b.n	80129d2 <tcp_close_shutdown+0xca>
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d104      	bne.n	80129cc <tcp_close_shutdown+0xc4>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	68da      	ldr	r2, [r3, #12]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	60da      	str	r2, [r3, #12]
 80129ca:	e005      	b.n	80129d8 <tcp_close_shutdown+0xd0>
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	60fb      	str	r3, [r7, #12]
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1ef      	bne.n	80129b8 <tcp_close_shutdown+0xb0>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	60da      	str	r2, [r3, #12]
 80129de:	4b37      	ldr	r3, [pc, #220]	@ (8012abc <tcp_close_shutdown+0x1b4>)
 80129e0:	2201      	movs	r2, #1
 80129e2:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80129e4:	4b36      	ldr	r3, [pc, #216]	@ (8012ac0 <tcp_close_shutdown+0x1b8>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d102      	bne.n	80129f4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80129ee:	f003 ff0f 	bl	8016810 <tcp_trigger_input_pcb_close>
 80129f2:	e002      	b.n	80129fa <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7ff fed5 	bl	80127a4 <tcp_free>
      }
      return ERR_OK;
 80129fa:	2300      	movs	r3, #0
 80129fc:	e050      	b.n	8012aa0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	7d1b      	ldrb	r3, [r3, #20]
 8012a02:	2b02      	cmp	r3, #2
 8012a04:	d03b      	beq.n	8012a7e <tcp_close_shutdown+0x176>
 8012a06:	2b02      	cmp	r3, #2
 8012a08:	dc44      	bgt.n	8012a94 <tcp_close_shutdown+0x18c>
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d002      	beq.n	8012a14 <tcp_close_shutdown+0x10c>
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d02a      	beq.n	8012a68 <tcp_close_shutdown+0x160>
 8012a12:	e03f      	b.n	8012a94 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	8adb      	ldrh	r3, [r3, #22]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d021      	beq.n	8012a60 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012a1c:	4b29      	ldr	r3, [pc, #164]	@ (8012ac4 <tcp_close_shutdown+0x1bc>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d105      	bne.n	8012a32 <tcp_close_shutdown+0x12a>
 8012a26:	4b27      	ldr	r3, [pc, #156]	@ (8012ac4 <tcp_close_shutdown+0x1bc>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	4a25      	ldr	r2, [pc, #148]	@ (8012ac4 <tcp_close_shutdown+0x1bc>)
 8012a2e:	6013      	str	r3, [r2, #0]
 8012a30:	e013      	b.n	8012a5a <tcp_close_shutdown+0x152>
 8012a32:	4b24      	ldr	r3, [pc, #144]	@ (8012ac4 <tcp_close_shutdown+0x1bc>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	60bb      	str	r3, [r7, #8]
 8012a38:	e00c      	b.n	8012a54 <tcp_close_shutdown+0x14c>
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d104      	bne.n	8012a4e <tcp_close_shutdown+0x146>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	68da      	ldr	r2, [r3, #12]
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	60da      	str	r2, [r3, #12]
 8012a4c:	e005      	b.n	8012a5a <tcp_close_shutdown+0x152>
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	60bb      	str	r3, [r7, #8]
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1ef      	bne.n	8012a3a <tcp_close_shutdown+0x132>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff fe9f 	bl	80127a4 <tcp_free>
      break;
 8012a66:	e01a      	b.n	8012a9e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7ff ff13 	bl	8012894 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012a6e:	6879      	ldr	r1, [r7, #4]
 8012a70:	4815      	ldr	r0, [pc, #84]	@ (8012ac8 <tcp_close_shutdown+0x1c0>)
 8012a72:	f001 fa47 	bl	8013f04 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f7ff feb0 	bl	80127dc <tcp_free_listen>
      break;
 8012a7c:	e00f      	b.n	8012a9e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012a7e:	6879      	ldr	r1, [r7, #4]
 8012a80:	480d      	ldr	r0, [pc, #52]	@ (8012ab8 <tcp_close_shutdown+0x1b0>)
 8012a82:	f001 fa3f 	bl	8013f04 <tcp_pcb_remove>
 8012a86:	4b0d      	ldr	r3, [pc, #52]	@ (8012abc <tcp_close_shutdown+0x1b4>)
 8012a88:	2201      	movs	r2, #1
 8012a8a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f7ff fe89 	bl	80127a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012a92:	e004      	b.n	8012a9e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 f819 	bl	8012acc <tcp_close_shutdown_fin>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	e000      	b.n	8012aa0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8012a9e:	2300      	movs	r3, #0
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8012aa8:	08023124 	.word	0x08023124
 8012aac:	080231f8 	.word	0x080231f8
 8012ab0:	08023168 	.word	0x08023168
 8012ab4:	08023218 	.word	0x08023218
 8012ab8:	20013dc8 	.word	0x20013dc8
 8012abc:	20013dd0 	.word	0x20013dd0
 8012ac0:	20013e0c 	.word	0x20013e0c
 8012ac4:	20013dc0 	.word	0x20013dc0
 8012ac8:	20013dc4 	.word	0x20013dc4

08012acc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_close_shutdown_fin+0x1c>
 8012ada:	4b2e      	ldr	r3, [pc, #184]	@ (8012b94 <tcp_close_shutdown_fin+0xc8>)
 8012adc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012ae0:	492d      	ldr	r1, [pc, #180]	@ (8012b98 <tcp_close_shutdown_fin+0xcc>)
 8012ae2:	482e      	ldr	r0, [pc, #184]	@ (8012b9c <tcp_close_shutdown_fin+0xd0>)
 8012ae4:	f00c f8c6 	bl	801ec74 <iprintf>

  switch (pcb->state) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	7d1b      	ldrb	r3, [r3, #20]
 8012aec:	2b07      	cmp	r3, #7
 8012aee:	d020      	beq.n	8012b32 <tcp_close_shutdown_fin+0x66>
 8012af0:	2b07      	cmp	r3, #7
 8012af2:	dc2b      	bgt.n	8012b4c <tcp_close_shutdown_fin+0x80>
 8012af4:	2b03      	cmp	r3, #3
 8012af6:	d002      	beq.n	8012afe <tcp_close_shutdown_fin+0x32>
 8012af8:	2b04      	cmp	r3, #4
 8012afa:	d00d      	beq.n	8012b18 <tcp_close_shutdown_fin+0x4c>
 8012afc:	e026      	b.n	8012b4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f004 fd50 	bl	80175a4 <tcp_send_fin>
 8012b04:	4603      	mov	r3, r0
 8012b06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d11f      	bne.n	8012b50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2205      	movs	r2, #5
 8012b14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b16:	e01b      	b.n	8012b50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f004 fd43 	bl	80175a4 <tcp_send_fin>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d114      	bne.n	8012b54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2205      	movs	r2, #5
 8012b2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b30:	e010      	b.n	8012b54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f004 fd36 	bl	80175a4 <tcp_send_fin>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d109      	bne.n	8012b58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2209      	movs	r2, #9
 8012b48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b4a:	e005      	b.n	8012b58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	e01c      	b.n	8012b8a <tcp_close_shutdown_fin+0xbe>
      break;
 8012b50:	bf00      	nop
 8012b52:	e002      	b.n	8012b5a <tcp_close_shutdown_fin+0x8e>
      break;
 8012b54:	bf00      	nop
 8012b56:	e000      	b.n	8012b5a <tcp_close_shutdown_fin+0x8e>
      break;
 8012b58:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d103      	bne.n	8012b6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f004 fe5c 	bl	8017820 <tcp_output>
 8012b68:	e00d      	b.n	8012b86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b72:	d108      	bne.n	8012b86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	8b5b      	ldrh	r3, [r3, #26]
 8012b78:	f043 0308 	orr.w	r3, r3, #8
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e001      	b.n	8012b8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	08023124 	.word	0x08023124
 8012b98:	080231d4 	.word	0x080231d4
 8012b9c:	08023168 	.word	0x08023168

08012ba0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d109      	bne.n	8012bc2 <tcp_close+0x22>
 8012bae:	4b0f      	ldr	r3, [pc, #60]	@ (8012bec <tcp_close+0x4c>)
 8012bb0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012bb4:	490e      	ldr	r1, [pc, #56]	@ (8012bf0 <tcp_close+0x50>)
 8012bb6:	480f      	ldr	r0, [pc, #60]	@ (8012bf4 <tcp_close+0x54>)
 8012bb8:	f00c f85c 	bl	801ec74 <iprintf>
 8012bbc:	f06f 030f 	mvn.w	r3, #15
 8012bc0:	e00f      	b.n	8012be2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	7d1b      	ldrb	r3, [r3, #20]
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d006      	beq.n	8012bd8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	8b5b      	ldrh	r3, [r3, #26]
 8012bce:	f043 0310 	orr.w	r3, r3, #16
 8012bd2:	b29a      	uxth	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012bd8:	2101      	movs	r1, #1
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7ff fe94 	bl	8012908 <tcp_close_shutdown>
 8012be0:	4603      	mov	r3, r0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3708      	adds	r7, #8
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	08023124 	.word	0x08023124
 8012bf0:	08023234 	.word	0x08023234
 8012bf4:	08023168 	.word	0x08023168

08012bf8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08e      	sub	sp, #56	@ 0x38
 8012bfc:	af04      	add	r7, sp, #16
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d107      	bne.n	8012c18 <tcp_abandon+0x20>
 8012c08:	4b52      	ldr	r3, [pc, #328]	@ (8012d54 <tcp_abandon+0x15c>)
 8012c0a:	f240 223d 	movw	r2, #573	@ 0x23d
 8012c0e:	4952      	ldr	r1, [pc, #328]	@ (8012d58 <tcp_abandon+0x160>)
 8012c10:	4852      	ldr	r0, [pc, #328]	@ (8012d5c <tcp_abandon+0x164>)
 8012c12:	f00c f82f 	bl	801ec74 <iprintf>
 8012c16:	e099      	b.n	8012d4c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	7d1b      	ldrb	r3, [r3, #20]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d106      	bne.n	8012c2e <tcp_abandon+0x36>
 8012c20:	4b4c      	ldr	r3, [pc, #304]	@ (8012d54 <tcp_abandon+0x15c>)
 8012c22:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012c26:	494e      	ldr	r1, [pc, #312]	@ (8012d60 <tcp_abandon+0x168>)
 8012c28:	484c      	ldr	r0, [pc, #304]	@ (8012d5c <tcp_abandon+0x164>)
 8012c2a:	f00c f823 	bl	801ec74 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	7d1b      	ldrb	r3, [r3, #20]
 8012c32:	2b0a      	cmp	r3, #10
 8012c34:	d107      	bne.n	8012c46 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012c36:	6879      	ldr	r1, [r7, #4]
 8012c38:	484a      	ldr	r0, [pc, #296]	@ (8012d64 <tcp_abandon+0x16c>)
 8012c3a:	f001 f963 	bl	8013f04 <tcp_pcb_remove>
    tcp_free(pcb);
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f7ff fdb0 	bl	80127a4 <tcp_free>
 8012c44:	e082      	b.n	8012d4c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012c46:	2300      	movs	r3, #0
 8012c48:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012c52:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c58:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c60:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	691b      	ldr	r3, [r3, #16]
 8012c66:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7d1b      	ldrb	r3, [r3, #20]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d126      	bne.n	8012cbe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	8adb      	ldrh	r3, [r3, #22]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d02e      	beq.n	8012cd6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012c78:	4b3b      	ldr	r3, [pc, #236]	@ (8012d68 <tcp_abandon+0x170>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d105      	bne.n	8012c8e <tcp_abandon+0x96>
 8012c82:	4b39      	ldr	r3, [pc, #228]	@ (8012d68 <tcp_abandon+0x170>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	4a37      	ldr	r2, [pc, #220]	@ (8012d68 <tcp_abandon+0x170>)
 8012c8a:	6013      	str	r3, [r2, #0]
 8012c8c:	e013      	b.n	8012cb6 <tcp_abandon+0xbe>
 8012c8e:	4b36      	ldr	r3, [pc, #216]	@ (8012d68 <tcp_abandon+0x170>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	61fb      	str	r3, [r7, #28]
 8012c94:	e00c      	b.n	8012cb0 <tcp_abandon+0xb8>
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	68db      	ldr	r3, [r3, #12]
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d104      	bne.n	8012caa <tcp_abandon+0xb2>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	68da      	ldr	r2, [r3, #12]
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	60da      	str	r2, [r3, #12]
 8012ca8:	e005      	b.n	8012cb6 <tcp_abandon+0xbe>
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	61fb      	str	r3, [r7, #28]
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d1ef      	bne.n	8012c96 <tcp_abandon+0x9e>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	60da      	str	r2, [r3, #12]
 8012cbc:	e00b      	b.n	8012cd6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8adb      	ldrh	r3, [r3, #22]
 8012cc6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	4828      	ldr	r0, [pc, #160]	@ (8012d6c <tcp_abandon+0x174>)
 8012ccc:	f001 f91a 	bl	8013f04 <tcp_pcb_remove>
 8012cd0:	4b27      	ldr	r3, [pc, #156]	@ (8012d70 <tcp_abandon+0x178>)
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d004      	beq.n	8012ce8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 fe80 	bl	80139e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d004      	beq.n	8012cfa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f000 fe77 	bl	80139e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d004      	beq.n	8012d0c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d06:	4618      	mov	r0, r3
 8012d08:	f000 fe6e 	bl	80139e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d00e      	beq.n	8012d30 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012d12:	6879      	ldr	r1, [r7, #4]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	3304      	adds	r3, #4
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	8b12      	ldrh	r2, [r2, #24]
 8012d1c:	9202      	str	r2, [sp, #8]
 8012d1e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012d20:	9201      	str	r2, [sp, #4]
 8012d22:	9300      	str	r3, [sp, #0]
 8012d24:	460b      	mov	r3, r1
 8012d26:	697a      	ldr	r2, [r7, #20]
 8012d28:	69b9      	ldr	r1, [r7, #24]
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f005 fb5a 	bl	80183e4 <tcp_rst>
    }
    last_state = pcb->state;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	7d1b      	ldrb	r3, [r3, #20]
 8012d34:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7ff fd34 	bl	80127a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d004      	beq.n	8012d4c <tcp_abandon+0x154>
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	f06f 010c 	mvn.w	r1, #12
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	4798      	blx	r3
  }
}
 8012d4c:	3728      	adds	r7, #40	@ 0x28
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	08023124 	.word	0x08023124
 8012d58:	08023268 	.word	0x08023268
 8012d5c:	08023168 	.word	0x08023168
 8012d60:	08023284 	.word	0x08023284
 8012d64:	20013dcc 	.word	0x20013dcc
 8012d68:	20013dc0 	.word	0x20013dc0
 8012d6c:	20013dc8 	.word	0x20013dc8
 8012d70:	20013dd0 	.word	0x20013dd0

08012d74 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7ff ff3a 	bl	8012bf8 <tcp_abandon>
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d106      	bne.n	8012da8 <tcp_update_rcv_ann_wnd+0x1c>
 8012d9a:	4b25      	ldr	r3, [pc, #148]	@ (8012e30 <tcp_update_rcv_ann_wnd+0xa4>)
 8012d9c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012da0:	4924      	ldr	r1, [pc, #144]	@ (8012e34 <tcp_update_rcv_ann_wnd+0xa8>)
 8012da2:	4825      	ldr	r0, [pc, #148]	@ (8012e38 <tcp_update_rcv_ann_wnd+0xac>)
 8012da4:	f00b ff66 	bl	801ec74 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012db0:	4413      	add	r3, r2
 8012db2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012dbc:	f241 61d0 	movw	r1, #5840	@ 0x16d0
 8012dc0:	428a      	cmp	r2, r1
 8012dc2:	bf28      	it	cs
 8012dc4:	460a      	movcs	r2, r1
 8012dc6:	b292      	uxth	r2, r2
 8012dc8:	4413      	add	r3, r2
 8012dca:	68fa      	ldr	r2, [r7, #12]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	db08      	blt.n	8012de4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dde:	68fa      	ldr	r2, [r7, #12]
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	e020      	b.n	8012e26 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	dd03      	ble.n	8012dfa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2200      	movs	r2, #0
 8012df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012df8:	e014      	b.n	8012e24 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e02:	1ad3      	subs	r3, r2, r3
 8012e04:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e0c:	d306      	bcc.n	8012e1c <tcp_update_rcv_ann_wnd+0x90>
 8012e0e:	4b08      	ldr	r3, [pc, #32]	@ (8012e30 <tcp_update_rcv_ann_wnd+0xa4>)
 8012e10:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8012e14:	4909      	ldr	r1, [pc, #36]	@ (8012e3c <tcp_update_rcv_ann_wnd+0xb0>)
 8012e16:	4808      	ldr	r0, [pc, #32]	@ (8012e38 <tcp_update_rcv_ann_wnd+0xac>)
 8012e18:	f00b ff2c 	bl	801ec74 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8012e24:	2300      	movs	r3, #0
  }
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	08023124 	.word	0x08023124
 8012e34:	08023380 	.word	0x08023380
 8012e38:	08023168 	.word	0x08023168
 8012e3c:	080233a4 	.word	0x080233a4

08012e40 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	460b      	mov	r3, r1
 8012e4a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d107      	bne.n	8012e62 <tcp_recved+0x22>
 8012e52:	4b20      	ldr	r3, [pc, #128]	@ (8012ed4 <tcp_recved+0x94>)
 8012e54:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012e58:	491f      	ldr	r1, [pc, #124]	@ (8012ed8 <tcp_recved+0x98>)
 8012e5a:	4820      	ldr	r0, [pc, #128]	@ (8012edc <tcp_recved+0x9c>)
 8012e5c:	f00b ff0a 	bl	801ec74 <iprintf>
 8012e60:	e034      	b.n	8012ecc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	7d1b      	ldrb	r3, [r3, #20]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d106      	bne.n	8012e78 <tcp_recved+0x38>
 8012e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8012ed4 <tcp_recved+0x94>)
 8012e6c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012e70:	491b      	ldr	r1, [pc, #108]	@ (8012ee0 <tcp_recved+0xa0>)
 8012e72:	481a      	ldr	r0, [pc, #104]	@ (8012edc <tcp_recved+0x9c>)
 8012e74:	f00b fefe 	bl	801ec74 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012e7c:	887b      	ldrh	r3, [r7, #2]
 8012e7e:	4413      	add	r3, r2
 8012e80:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012e82:	89fb      	ldrh	r3, [r7, #14]
 8012e84:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d804      	bhi.n	8012e96 <tcp_recved+0x56>
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e90:	89fa      	ldrh	r2, [r7, #14]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d204      	bcs.n	8012ea0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8012e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012e9e:	e002      	b.n	8012ea6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	89fa      	ldrh	r2, [r7, #14]
 8012ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7ff ff70 	bl	8012d8c <tcp_update_rcv_ann_wnd>
 8012eac:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	f640 3267 	movw	r2, #2919	@ 0xb67
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	d909      	bls.n	8012ecc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	8b5b      	ldrh	r3, [r3, #26]
 8012ebc:	f043 0302 	orr.w	r3, r3, #2
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f004 fcaa 	bl	8017820 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012ecc:	3710      	adds	r7, #16
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	08023124 	.word	0x08023124
 8012ed8:	080233c0 	.word	0x080233c0
 8012edc:	08023168 	.word	0x08023168
 8012ee0:	080233d8 	.word	0x080233d8

08012ee4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012eee:	4b1e      	ldr	r3, [pc, #120]	@ (8012f68 <tcp_new_port+0x84>)
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	b29a      	uxth	r2, r3
 8012ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8012f68 <tcp_new_port+0x84>)
 8012ef8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012efa:	4b1b      	ldr	r3, [pc, #108]	@ (8012f68 <tcp_new_port+0x84>)
 8012efc:	881b      	ldrh	r3, [r3, #0]
 8012efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d103      	bne.n	8012f0e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012f06:	4b18      	ldr	r3, [pc, #96]	@ (8012f68 <tcp_new_port+0x84>)
 8012f08:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012f0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012f0e:	2300      	movs	r3, #0
 8012f10:	71fb      	strb	r3, [r7, #7]
 8012f12:	e01e      	b.n	8012f52 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012f14:	79fb      	ldrb	r3, [r7, #7]
 8012f16:	4a15      	ldr	r2, [pc, #84]	@ (8012f6c <tcp_new_port+0x88>)
 8012f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	603b      	str	r3, [r7, #0]
 8012f20:	e011      	b.n	8012f46 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	8ada      	ldrh	r2, [r3, #22]
 8012f26:	4b10      	ldr	r3, [pc, #64]	@ (8012f68 <tcp_new_port+0x84>)
 8012f28:	881b      	ldrh	r3, [r3, #0]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d108      	bne.n	8012f40 <tcp_new_port+0x5c>
        n++;
 8012f2e:	88bb      	ldrh	r3, [r7, #4]
 8012f30:	3301      	adds	r3, #1
 8012f32:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012f34:	88bb      	ldrh	r3, [r7, #4]
 8012f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012f3a:	d3d8      	bcc.n	8012eee <tcp_new_port+0xa>
          return 0;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	e00d      	b.n	8012f5c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	68db      	ldr	r3, [r3, #12]
 8012f44:	603b      	str	r3, [r7, #0]
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1ea      	bne.n	8012f22 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	3301      	adds	r3, #1
 8012f50:	71fb      	strb	r3, [r7, #7]
 8012f52:	79fb      	ldrb	r3, [r7, #7]
 8012f54:	2b03      	cmp	r3, #3
 8012f56:	d9dd      	bls.n	8012f14 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012f58:	4b03      	ldr	r3, [pc, #12]	@ (8012f68 <tcp_new_port+0x84>)
 8012f5a:	881b      	ldrh	r3, [r3, #0]
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	370c      	adds	r7, #12
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	200000bc 	.word	0x200000bc
 8012f6c:	08071260 	.word	0x08071260

08012f70 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b08a      	sub	sp, #40	@ 0x28
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	603b      	str	r3, [r7, #0]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012f80:	2300      	movs	r3, #0
 8012f82:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d109      	bne.n	8012f9e <tcp_connect+0x2e>
 8012f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8013180 <tcp_connect+0x210>)
 8012f8c:	f240 4235 	movw	r2, #1077	@ 0x435
 8012f90:	497c      	ldr	r1, [pc, #496]	@ (8013184 <tcp_connect+0x214>)
 8012f92:	487d      	ldr	r0, [pc, #500]	@ (8013188 <tcp_connect+0x218>)
 8012f94:	f00b fe6e 	bl	801ec74 <iprintf>
 8012f98:	f06f 030f 	mvn.w	r3, #15
 8012f9c:	e0ec      	b.n	8013178 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d109      	bne.n	8012fb8 <tcp_connect+0x48>
 8012fa4:	4b76      	ldr	r3, [pc, #472]	@ (8013180 <tcp_connect+0x210>)
 8012fa6:	f240 4236 	movw	r2, #1078	@ 0x436
 8012faa:	4978      	ldr	r1, [pc, #480]	@ (801318c <tcp_connect+0x21c>)
 8012fac:	4876      	ldr	r0, [pc, #472]	@ (8013188 <tcp_connect+0x218>)
 8012fae:	f00b fe61 	bl	801ec74 <iprintf>
 8012fb2:	f06f 030f 	mvn.w	r3, #15
 8012fb6:	e0df      	b.n	8013178 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	7d1b      	ldrb	r3, [r3, #20]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d009      	beq.n	8012fd4 <tcp_connect+0x64>
 8012fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8013180 <tcp_connect+0x210>)
 8012fc2:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8012fc6:	4972      	ldr	r1, [pc, #456]	@ (8013190 <tcp_connect+0x220>)
 8012fc8:	486f      	ldr	r0, [pc, #444]	@ (8013188 <tcp_connect+0x218>)
 8012fca:	f00b fe53 	bl	801ec74 <iprintf>
 8012fce:	f06f 0309 	mvn.w	r3, #9
 8012fd2:	e0d1      	b.n	8013178 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d002      	beq.n	8012fe0 <tcp_connect+0x70>
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	e000      	b.n	8012fe2 <tcp_connect+0x72>
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	88fa      	ldrh	r2, [r7, #6]
 8012fea:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	7a1b      	ldrb	r3, [r3, #8]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d006      	beq.n	8013002 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	7a1b      	ldrb	r3, [r3, #8]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fe fbf1 	bl	80117e0 <netif_get_by_index>
 8012ffe:	6278      	str	r0, [r7, #36]	@ 0x24
 8013000:	e005      	b.n	801300e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	3304      	adds	r3, #4
 8013006:	4618      	mov	r0, r3
 8013008:	f009 fabe 	bl	801c588 <ip4_route>
 801300c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 801300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013010:	2b00      	cmp	r3, #0
 8013012:	d102      	bne.n	801301a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8013014:	f06f 0303 	mvn.w	r3, #3
 8013018:	e0ae      	b.n	8013178 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d003      	beq.n	8013028 <tcp_connect+0xb8>
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d111      	bne.n	801304c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8013028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801302a:	2b00      	cmp	r3, #0
 801302c:	d002      	beq.n	8013034 <tcp_connect+0xc4>
 801302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013030:	3304      	adds	r3, #4
 8013032:	e000      	b.n	8013036 <tcp_connect+0xc6>
 8013034:	2300      	movs	r3, #0
 8013036:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d102      	bne.n	8013044 <tcp_connect+0xd4>
      return ERR_RTE;
 801303e:	f06f 0303 	mvn.w	r3, #3
 8013042:	e099      	b.n	8013178 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	8adb      	ldrh	r3, [r3, #22]
 8013050:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	8adb      	ldrh	r3, [r3, #22]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d10c      	bne.n	8013074 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801305a:	f7ff ff43 	bl	8012ee4 <tcp_new_port>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	8adb      	ldrh	r3, [r3, #22]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d102      	bne.n	8013074 <tcp_connect+0x104>
      return ERR_BUF;
 801306e:	f06f 0301 	mvn.w	r3, #1
 8013072:	e081      	b.n	8013178 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8013074:	68f8      	ldr	r0, [r7, #12]
 8013076:	f000 ffd9 	bl	801402c <tcp_next_iss>
 801307a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2200      	movs	r2, #0
 8013080:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	697a      	ldr	r2, [r7, #20]
 8013086:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	1e5a      	subs	r2, r3, #1
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	1e5a      	subs	r2, r3, #1
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	1e5a      	subs	r2, r3, #1
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80130a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80130be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80130c8:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	3304      	adds	r3, #4
 80130d2:	461a      	mov	r2, r3
 80130d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80130d6:	f000 ffcf 	bl	8014078 <tcp_eff_send_mss_netif>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2201      	movs	r2, #1
 80130e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	683a      	ldr	r2, [r7, #0]
 80130ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80130f2:	2102      	movs	r1, #2
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f004 faa5 	bl	8017644 <tcp_enqueue_flags>
 80130fa:	4603      	mov	r3, r0
 80130fc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80130fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d136      	bne.n	8013174 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2202      	movs	r2, #2
 801310a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801310c:	8b7b      	ldrh	r3, [r7, #26]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d021      	beq.n	8013156 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8013112:	4b20      	ldr	r3, [pc, #128]	@ (8013194 <tcp_connect+0x224>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	68fa      	ldr	r2, [r7, #12]
 8013118:	429a      	cmp	r2, r3
 801311a:	d105      	bne.n	8013128 <tcp_connect+0x1b8>
 801311c:	4b1d      	ldr	r3, [pc, #116]	@ (8013194 <tcp_connect+0x224>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	4a1c      	ldr	r2, [pc, #112]	@ (8013194 <tcp_connect+0x224>)
 8013124:	6013      	str	r3, [r2, #0]
 8013126:	e013      	b.n	8013150 <tcp_connect+0x1e0>
 8013128:	4b1a      	ldr	r3, [pc, #104]	@ (8013194 <tcp_connect+0x224>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	623b      	str	r3, [r7, #32]
 801312e:	e00c      	b.n	801314a <tcp_connect+0x1da>
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	429a      	cmp	r2, r3
 8013138:	d104      	bne.n	8013144 <tcp_connect+0x1d4>
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	68da      	ldr	r2, [r3, #12]
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	60da      	str	r2, [r3, #12]
 8013142:	e005      	b.n	8013150 <tcp_connect+0x1e0>
 8013144:	6a3b      	ldr	r3, [r7, #32]
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	623b      	str	r3, [r7, #32]
 801314a:	6a3b      	ldr	r3, [r7, #32]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1ef      	bne.n	8013130 <tcp_connect+0x1c0>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2200      	movs	r2, #0
 8013154:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8013156:	4b10      	ldr	r3, [pc, #64]	@ (8013198 <tcp_connect+0x228>)
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	60da      	str	r2, [r3, #12]
 801315e:	4a0e      	ldr	r2, [pc, #56]	@ (8013198 <tcp_connect+0x228>)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6013      	str	r3, [r2, #0]
 8013164:	f005 fb00 	bl	8018768 <tcp_timer_needed>
 8013168:	4b0c      	ldr	r3, [pc, #48]	@ (801319c <tcp_connect+0x22c>)
 801316a:	2201      	movs	r2, #1
 801316c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f004 fb56 	bl	8017820 <tcp_output>
  }
  return ret;
 8013174:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8013178:	4618      	mov	r0, r3
 801317a:	3728      	adds	r7, #40	@ 0x28
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}
 8013180:	08023124 	.word	0x08023124
 8013184:	08023400 	.word	0x08023400
 8013188:	08023168 	.word	0x08023168
 801318c:	0802341c 	.word	0x0802341c
 8013190:	08023438 	.word	0x08023438
 8013194:	20013dc0 	.word	0x20013dc0
 8013198:	20013dc8 	.word	0x20013dc8
 801319c:	20013dd0 	.word	0x20013dd0

080131a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80131a0:	b5b0      	push	{r4, r5, r7, lr}
 80131a2:	b090      	sub	sp, #64	@ 0x40
 80131a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80131a6:	2300      	movs	r3, #0
 80131a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80131ac:	4b95      	ldr	r3, [pc, #596]	@ (8013404 <tcp_slowtmr+0x264>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	3301      	adds	r3, #1
 80131b2:	4a94      	ldr	r2, [pc, #592]	@ (8013404 <tcp_slowtmr+0x264>)
 80131b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80131b6:	4b94      	ldr	r3, [pc, #592]	@ (8013408 <tcp_slowtmr+0x268>)
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	3301      	adds	r3, #1
 80131bc:	b2da      	uxtb	r2, r3
 80131be:	4b92      	ldr	r3, [pc, #584]	@ (8013408 <tcp_slowtmr+0x268>)
 80131c0:	701a      	strb	r2, [r3, #0]
 80131c2:	e000      	b.n	80131c6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80131c4:	bf00      	nop
  prev = NULL;
 80131c6:	2300      	movs	r3, #0
 80131c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80131ca:	4b90      	ldr	r3, [pc, #576]	@ (801340c <tcp_slowtmr+0x26c>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80131d0:	e29f      	b.n	8013712 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80131d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d4:	7d1b      	ldrb	r3, [r3, #20]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <tcp_slowtmr+0x48>
 80131da:	4b8d      	ldr	r3, [pc, #564]	@ (8013410 <tcp_slowtmr+0x270>)
 80131dc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80131e0:	498c      	ldr	r1, [pc, #560]	@ (8013414 <tcp_slowtmr+0x274>)
 80131e2:	488d      	ldr	r0, [pc, #564]	@ (8013418 <tcp_slowtmr+0x278>)
 80131e4:	f00b fd46 	bl	801ec74 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80131e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ea:	7d1b      	ldrb	r3, [r3, #20]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d106      	bne.n	80131fe <tcp_slowtmr+0x5e>
 80131f0:	4b87      	ldr	r3, [pc, #540]	@ (8013410 <tcp_slowtmr+0x270>)
 80131f2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80131f6:	4989      	ldr	r1, [pc, #548]	@ (801341c <tcp_slowtmr+0x27c>)
 80131f8:	4887      	ldr	r0, [pc, #540]	@ (8013418 <tcp_slowtmr+0x278>)
 80131fa:	f00b fd3b 	bl	801ec74 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80131fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013200:	7d1b      	ldrb	r3, [r3, #20]
 8013202:	2b0a      	cmp	r3, #10
 8013204:	d106      	bne.n	8013214 <tcp_slowtmr+0x74>
 8013206:	4b82      	ldr	r3, [pc, #520]	@ (8013410 <tcp_slowtmr+0x270>)
 8013208:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801320c:	4984      	ldr	r1, [pc, #528]	@ (8013420 <tcp_slowtmr+0x280>)
 801320e:	4882      	ldr	r0, [pc, #520]	@ (8013418 <tcp_slowtmr+0x278>)
 8013210:	f00b fd30 	bl	801ec74 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013216:	7f9a      	ldrb	r2, [r3, #30]
 8013218:	4b7b      	ldr	r3, [pc, #492]	@ (8013408 <tcp_slowtmr+0x268>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	429a      	cmp	r2, r3
 801321e:	d105      	bne.n	801322c <tcp_slowtmr+0x8c>
      prev = pcb;
 8013220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013222:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801322a:	e272      	b.n	8013712 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 801322c:	4b76      	ldr	r3, [pc, #472]	@ (8013408 <tcp_slowtmr+0x268>)
 801322e:	781a      	ldrb	r2, [r3, #0]
 8013230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013232:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013234:	2300      	movs	r3, #0
 8013236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801323a:	2300      	movs	r3, #0
 801323c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013242:	7d1b      	ldrb	r3, [r3, #20]
 8013244:	2b02      	cmp	r3, #2
 8013246:	d10a      	bne.n	801325e <tcp_slowtmr+0xbe>
 8013248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801324e:	2b05      	cmp	r3, #5
 8013250:	d905      	bls.n	801325e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013256:	3301      	adds	r3, #1
 8013258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 801325c:	e11e      	b.n	801349c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013264:	2b0b      	cmp	r3, #11
 8013266:	d905      	bls.n	8013274 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801326c:	3301      	adds	r3, #1
 801326e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013272:	e113      	b.n	801349c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013276:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801327a:	2b00      	cmp	r3, #0
 801327c:	d075      	beq.n	801336a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013282:	2b00      	cmp	r3, #0
 8013284:	d006      	beq.n	8013294 <tcp_slowtmr+0xf4>
 8013286:	4b62      	ldr	r3, [pc, #392]	@ (8013410 <tcp_slowtmr+0x270>)
 8013288:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801328c:	4965      	ldr	r1, [pc, #404]	@ (8013424 <tcp_slowtmr+0x284>)
 801328e:	4862      	ldr	r0, [pc, #392]	@ (8013418 <tcp_slowtmr+0x278>)
 8013290:	f00b fcf0 	bl	801ec74 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013298:	2b00      	cmp	r3, #0
 801329a:	d106      	bne.n	80132aa <tcp_slowtmr+0x10a>
 801329c:	4b5c      	ldr	r3, [pc, #368]	@ (8013410 <tcp_slowtmr+0x270>)
 801329e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80132a2:	4961      	ldr	r1, [pc, #388]	@ (8013428 <tcp_slowtmr+0x288>)
 80132a4:	485c      	ldr	r0, [pc, #368]	@ (8013418 <tcp_slowtmr+0x278>)
 80132a6:	f00b fce5 	bl	801ec74 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80132aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80132b0:	2b0b      	cmp	r3, #11
 80132b2:	d905      	bls.n	80132c0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80132b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132b8:	3301      	adds	r3, #1
 80132ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80132be:	e0ed      	b.n	801349c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80132c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80132c6:	3b01      	subs	r3, #1
 80132c8:	4a58      	ldr	r2, [pc, #352]	@ (801342c <tcp_slowtmr+0x28c>)
 80132ca:	5cd3      	ldrb	r3, [r2, r3]
 80132cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80132ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80132d4:	7c7a      	ldrb	r2, [r7, #17]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d907      	bls.n	80132ea <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80132da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80132e0:	3301      	adds	r3, #1
 80132e2:	b2da      	uxtb	r2, r3
 80132e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80132ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80132f0:	7c7a      	ldrb	r2, [r7, #17]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	f200 80d2 	bhi.w	801349c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80132f8:	2301      	movs	r3, #1
 80132fa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80132fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013302:	2b00      	cmp	r3, #0
 8013304:	d108      	bne.n	8013318 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013308:	f005 f960 	bl	80185cc <tcp_zero_window_probe>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d014      	beq.n	801333c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013312:	2300      	movs	r3, #0
 8013314:	623b      	str	r3, [r7, #32]
 8013316:	e011      	b.n	801333c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801331a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801331e:	4619      	mov	r1, r3
 8013320:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013322:	f003 fff3 	bl	801730c <tcp_split_unsent_seg>
 8013326:	4603      	mov	r3, r0
 8013328:	2b00      	cmp	r3, #0
 801332a:	d107      	bne.n	801333c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801332c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801332e:	f004 fa77 	bl	8017820 <tcp_output>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d101      	bne.n	801333c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013338:	2300      	movs	r3, #0
 801333a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801333c:	6a3b      	ldr	r3, [r7, #32]
 801333e:	2b00      	cmp	r3, #0
 8013340:	f000 80ac 	beq.w	801349c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013346:	2200      	movs	r2, #0
 8013348:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801334e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013352:	2b06      	cmp	r3, #6
 8013354:	f200 80a2 	bhi.w	801349c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801335e:	3301      	adds	r3, #1
 8013360:	b2da      	uxtb	r2, r3
 8013362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013364:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013368:	e098      	b.n	801349c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801336c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013370:	2b00      	cmp	r3, #0
 8013372:	db0f      	blt.n	8013394 <tcp_slowtmr+0x1f4>
 8013374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013376:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801337a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801337e:	4293      	cmp	r3, r2
 8013380:	d008      	beq.n	8013394 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013384:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013388:	b29b      	uxth	r3, r3
 801338a:	3301      	adds	r3, #1
 801338c:	b29b      	uxth	r3, r3
 801338e:	b21a      	sxth	r2, r3
 8013390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013392:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013396:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801339c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80133a0:	429a      	cmp	r2, r3
 80133a2:	db7b      	blt.n	801349c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80133a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133a6:	f004 fd43 	bl	8017e30 <tcp_rexmit_rto_prepare>
 80133aa:	4603      	mov	r3, r0
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d007      	beq.n	80133c0 <tcp_slowtmr+0x220>
 80133b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d171      	bne.n	801349c <tcp_slowtmr+0x2fc>
 80133b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d06d      	beq.n	801349c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80133c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c2:	7d1b      	ldrb	r3, [r3, #20]
 80133c4:	2b02      	cmp	r3, #2
 80133c6:	d03a      	beq.n	801343e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80133c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80133ce:	2b0c      	cmp	r3, #12
 80133d0:	bf28      	it	cs
 80133d2:	230c      	movcs	r3, #12
 80133d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80133d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80133dc:	10db      	asrs	r3, r3, #3
 80133de:	b21b      	sxth	r3, r3
 80133e0:	461a      	mov	r2, r3
 80133e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80133e8:	4413      	add	r3, r2
 80133ea:	7efa      	ldrb	r2, [r7, #27]
 80133ec:	4910      	ldr	r1, [pc, #64]	@ (8013430 <tcp_slowtmr+0x290>)
 80133ee:	5c8a      	ldrb	r2, [r1, r2]
 80133f0:	4093      	lsls	r3, r2
 80133f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80133fa:	4293      	cmp	r3, r2
 80133fc:	dc1a      	bgt.n	8013434 <tcp_slowtmr+0x294>
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	b21a      	sxth	r2, r3
 8013402:	e019      	b.n	8013438 <tcp_slowtmr+0x298>
 8013404:	20013dbc 	.word	0x20013dbc
 8013408:	20013dd2 	.word	0x20013dd2
 801340c:	20013dc8 	.word	0x20013dc8
 8013410:	08023124 	.word	0x08023124
 8013414:	08023468 	.word	0x08023468
 8013418:	08023168 	.word	0x08023168
 801341c:	08023494 	.word	0x08023494
 8013420:	080234c0 	.word	0x080234c0
 8013424:	080234f0 	.word	0x080234f0
 8013428:	08023524 	.word	0x08023524
 801342c:	08071258 	.word	0x08071258
 8013430:	08071248 	.word	0x08071248
 8013434:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801343a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013440:	2200      	movs	r2, #0
 8013442:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013446:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801344c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013450:	4293      	cmp	r3, r2
 8013452:	bf28      	it	cs
 8013454:	4613      	movcs	r3, r2
 8013456:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013458:	8a7b      	ldrh	r3, [r7, #18]
 801345a:	085b      	lsrs	r3, r3, #1
 801345c:	b29a      	uxth	r2, r3
 801345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013460:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013466:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801346a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801346c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801346e:	005b      	lsls	r3, r3, #1
 8013470:	b29b      	uxth	r3, r3
 8013472:	429a      	cmp	r2, r3
 8013474:	d206      	bcs.n	8013484 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801347a:	005b      	lsls	r3, r3, #1
 801347c:	b29a      	uxth	r2, r3
 801347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013480:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8013484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013486:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8013488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013490:	2200      	movs	r2, #0
 8013492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8013496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013498:	f004 fd44 	bl	8017f24 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801349e:	7d1b      	ldrb	r3, [r3, #20]
 80134a0:	2b06      	cmp	r3, #6
 80134a2:	d111      	bne.n	80134c8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80134a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a6:	8b5b      	ldrh	r3, [r3, #26]
 80134a8:	f003 0310 	and.w	r3, r3, #16
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00b      	beq.n	80134c8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80134b0:	4b9d      	ldr	r3, [pc, #628]	@ (8013728 <tcp_slowtmr+0x588>)
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b6:	6a1b      	ldr	r3, [r3, #32]
 80134b8:	1ad3      	subs	r3, r2, r3
 80134ba:	2b28      	cmp	r3, #40	@ 0x28
 80134bc:	d904      	bls.n	80134c8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80134be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134c2:	3301      	adds	r3, #1
 80134c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80134c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ca:	7a5b      	ldrb	r3, [r3, #9]
 80134cc:	f003 0308 	and.w	r3, r3, #8
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d04c      	beq.n	801356e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80134d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80134d8:	2b04      	cmp	r3, #4
 80134da:	d003      	beq.n	80134e4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80134dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80134e0:	2b07      	cmp	r3, #7
 80134e2:	d144      	bne.n	801356e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80134e4:	4b90      	ldr	r3, [pc, #576]	@ (8013728 <tcp_slowtmr+0x588>)
 80134e6:	681a      	ldr	r2, [r3, #0]
 80134e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ea:	6a1b      	ldr	r3, [r3, #32]
 80134ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80134ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80134f4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80134f8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80134fc:	498b      	ldr	r1, [pc, #556]	@ (801372c <tcp_slowtmr+0x58c>)
 80134fe:	fba1 1303 	umull	r1, r3, r1, r3
 8013502:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013504:	429a      	cmp	r2, r3
 8013506:	d90a      	bls.n	801351e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8013508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801350c:	3301      	adds	r3, #1
 801350e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8013512:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013516:	3301      	adds	r3, #1
 8013518:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801351c:	e027      	b.n	801356e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801351e:	4b82      	ldr	r3, [pc, #520]	@ (8013728 <tcp_slowtmr+0x588>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013524:	6a1b      	ldr	r3, [r3, #32]
 8013526:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013530:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013534:	4618      	mov	r0, r3
 8013536:	4b7e      	ldr	r3, [pc, #504]	@ (8013730 <tcp_slowtmr+0x590>)
 8013538:	fb00 f303 	mul.w	r3, r0, r3
 801353c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801353e:	497b      	ldr	r1, [pc, #492]	@ (801372c <tcp_slowtmr+0x58c>)
 8013540:	fba1 1303 	umull	r1, r3, r1, r3
 8013544:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013546:	429a      	cmp	r2, r3
 8013548:	d911      	bls.n	801356e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 801354a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801354c:	f004 fffe 	bl	801854c <tcp_keepalive>
 8013550:	4603      	mov	r3, r0
 8013552:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8013556:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801355a:	2b00      	cmp	r3, #0
 801355c:	d107      	bne.n	801356e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 801355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013560:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013564:	3301      	adds	r3, #1
 8013566:	b2da      	uxtb	r2, r3
 8013568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013572:	2b00      	cmp	r3, #0
 8013574:	d011      	beq.n	801359a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013576:	4b6c      	ldr	r3, [pc, #432]	@ (8013728 <tcp_slowtmr+0x588>)
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801357c:	6a1b      	ldr	r3, [r3, #32]
 801357e:	1ad2      	subs	r2, r2, r3
 8013580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013582:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013586:	4619      	mov	r1, r3
 8013588:	460b      	mov	r3, r1
 801358a:	005b      	lsls	r3, r3, #1
 801358c:	440b      	add	r3, r1
 801358e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013590:	429a      	cmp	r2, r3
 8013592:	d302      	bcc.n	801359a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8013594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013596:	f000 fe19 	bl	80141cc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801359c:	7d1b      	ldrb	r3, [r3, #20]
 801359e:	2b03      	cmp	r3, #3
 80135a0:	d10b      	bne.n	80135ba <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80135a2:	4b61      	ldr	r3, [pc, #388]	@ (8013728 <tcp_slowtmr+0x588>)
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135a8:	6a1b      	ldr	r3, [r3, #32]
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	2b28      	cmp	r3, #40	@ 0x28
 80135ae:	d904      	bls.n	80135ba <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80135b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135b4:	3301      	adds	r3, #1
 80135b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80135ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135bc:	7d1b      	ldrb	r3, [r3, #20]
 80135be:	2b09      	cmp	r3, #9
 80135c0:	d10b      	bne.n	80135da <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80135c2:	4b59      	ldr	r3, [pc, #356]	@ (8013728 <tcp_slowtmr+0x588>)
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c8:	6a1b      	ldr	r3, [r3, #32]
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	2bf0      	cmp	r3, #240	@ 0xf0
 80135ce:	d904      	bls.n	80135da <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80135d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135d4:	3301      	adds	r3, #1
 80135d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80135da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d060      	beq.n	80136a4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80135e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80135e8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80135ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135ec:	f000 fc3a 	bl	8013e64 <tcp_pcb_purge>
      if (prev != NULL) {
 80135f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d010      	beq.n	8013618 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80135f6:	4b4f      	ldr	r3, [pc, #316]	@ (8013734 <tcp_slowtmr+0x594>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d106      	bne.n	801360e <tcp_slowtmr+0x46e>
 8013600:	4b4d      	ldr	r3, [pc, #308]	@ (8013738 <tcp_slowtmr+0x598>)
 8013602:	f240 526d 	movw	r2, #1389	@ 0x56d
 8013606:	494d      	ldr	r1, [pc, #308]	@ (801373c <tcp_slowtmr+0x59c>)
 8013608:	484d      	ldr	r0, [pc, #308]	@ (8013740 <tcp_slowtmr+0x5a0>)
 801360a:	f00b fb33 	bl	801ec74 <iprintf>
        prev->next = pcb->next;
 801360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013610:	68da      	ldr	r2, [r3, #12]
 8013612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013614:	60da      	str	r2, [r3, #12]
 8013616:	e00f      	b.n	8013638 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013618:	4b46      	ldr	r3, [pc, #280]	@ (8013734 <tcp_slowtmr+0x594>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801361e:	429a      	cmp	r2, r3
 8013620:	d006      	beq.n	8013630 <tcp_slowtmr+0x490>
 8013622:	4b45      	ldr	r3, [pc, #276]	@ (8013738 <tcp_slowtmr+0x598>)
 8013624:	f240 5271 	movw	r2, #1393	@ 0x571
 8013628:	4946      	ldr	r1, [pc, #280]	@ (8013744 <tcp_slowtmr+0x5a4>)
 801362a:	4845      	ldr	r0, [pc, #276]	@ (8013740 <tcp_slowtmr+0x5a0>)
 801362c:	f00b fb22 	bl	801ec74 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013632:	68db      	ldr	r3, [r3, #12]
 8013634:	4a3f      	ldr	r2, [pc, #252]	@ (8013734 <tcp_slowtmr+0x594>)
 8013636:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801363c:	2b00      	cmp	r3, #0
 801363e:	d013      	beq.n	8013668 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013642:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013646:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013648:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364c:	3304      	adds	r3, #4
 801364e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013650:	8ad2      	ldrh	r2, [r2, #22]
 8013652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013654:	8b09      	ldrh	r1, [r1, #24]
 8013656:	9102      	str	r1, [sp, #8]
 8013658:	9201      	str	r2, [sp, #4]
 801365a:	9300      	str	r3, [sp, #0]
 801365c:	462b      	mov	r3, r5
 801365e:	4622      	mov	r2, r4
 8013660:	4601      	mov	r1, r0
 8013662:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013664:	f004 febe 	bl	80183e4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013670:	7d1b      	ldrb	r3, [r3, #20]
 8013672:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013676:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801367e:	6838      	ldr	r0, [r7, #0]
 8013680:	f7ff f890 	bl	80127a4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013684:	4b30      	ldr	r3, [pc, #192]	@ (8013748 <tcp_slowtmr+0x5a8>)
 8013686:	2200      	movs	r2, #0
 8013688:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d004      	beq.n	801369a <tcp_slowtmr+0x4fa>
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	f06f 010c 	mvn.w	r1, #12
 8013696:	68b8      	ldr	r0, [r7, #8]
 8013698:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801369a:	4b2b      	ldr	r3, [pc, #172]	@ (8013748 <tcp_slowtmr+0x5a8>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d037      	beq.n	8013712 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80136a2:	e590      	b.n	80131c6 <tcp_slowtmr+0x26>
      prev = pcb;
 80136a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80136a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80136ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b0:	7f1b      	ldrb	r3, [r3, #28]
 80136b2:	3301      	adds	r3, #1
 80136b4:	b2da      	uxtb	r2, r3
 80136b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80136ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136bc:	7f1a      	ldrb	r2, [r3, #28]
 80136be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c0:	7f5b      	ldrb	r3, [r3, #29]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d325      	bcc.n	8013712 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80136c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c8:	2200      	movs	r2, #0
 80136ca:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80136cc:	4b1e      	ldr	r3, [pc, #120]	@ (8013748 <tcp_slowtmr+0x5a8>)
 80136ce:	2200      	movs	r2, #0
 80136d0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80136d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00b      	beq.n	80136f4 <tcp_slowtmr+0x554>
 80136dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80136e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136e4:	6912      	ldr	r2, [r2, #16]
 80136e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80136e8:	4610      	mov	r0, r2
 80136ea:	4798      	blx	r3
 80136ec:	4603      	mov	r3, r0
 80136ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80136f2:	e002      	b.n	80136fa <tcp_slowtmr+0x55a>
 80136f4:	2300      	movs	r3, #0
 80136f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80136fa:	4b13      	ldr	r3, [pc, #76]	@ (8013748 <tcp_slowtmr+0x5a8>)
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	f47f ad60 	bne.w	80131c4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013704:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013708:	2b00      	cmp	r3, #0
 801370a:	d102      	bne.n	8013712 <tcp_slowtmr+0x572>
          tcp_output(prev);
 801370c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801370e:	f004 f887 	bl	8017820 <tcp_output>
  while (pcb != NULL) {
 8013712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013714:	2b00      	cmp	r3, #0
 8013716:	f47f ad5c 	bne.w	80131d2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801371a:	2300      	movs	r3, #0
 801371c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801371e:	4b0b      	ldr	r3, [pc, #44]	@ (801374c <tcp_slowtmr+0x5ac>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013724:	e067      	b.n	80137f6 <tcp_slowtmr+0x656>
 8013726:	bf00      	nop
 8013728:	20013dbc 	.word	0x20013dbc
 801372c:	10624dd3 	.word	0x10624dd3
 8013730:	000124f8 	.word	0x000124f8
 8013734:	20013dc8 	.word	0x20013dc8
 8013738:	08023124 	.word	0x08023124
 801373c:	0802355c 	.word	0x0802355c
 8013740:	08023168 	.word	0x08023168
 8013744:	08023588 	.word	0x08023588
 8013748:	20013dd0 	.word	0x20013dd0
 801374c:	20013dcc 	.word	0x20013dcc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013752:	7d1b      	ldrb	r3, [r3, #20]
 8013754:	2b0a      	cmp	r3, #10
 8013756:	d006      	beq.n	8013766 <tcp_slowtmr+0x5c6>
 8013758:	4b2b      	ldr	r3, [pc, #172]	@ (8013808 <tcp_slowtmr+0x668>)
 801375a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801375e:	492b      	ldr	r1, [pc, #172]	@ (801380c <tcp_slowtmr+0x66c>)
 8013760:	482b      	ldr	r0, [pc, #172]	@ (8013810 <tcp_slowtmr+0x670>)
 8013762:	f00b fa87 	bl	801ec74 <iprintf>
    pcb_remove = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801376c:	4b29      	ldr	r3, [pc, #164]	@ (8013814 <tcp_slowtmr+0x674>)
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013772:	6a1b      	ldr	r3, [r3, #32]
 8013774:	1ad3      	subs	r3, r2, r3
 8013776:	2bf0      	cmp	r3, #240	@ 0xf0
 8013778:	d904      	bls.n	8013784 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801377a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801377e:	3301      	adds	r3, #1
 8013780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013788:	2b00      	cmp	r3, #0
 801378a:	d02f      	beq.n	80137ec <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801378c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801378e:	f000 fb69 	bl	8013e64 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013794:	2b00      	cmp	r3, #0
 8013796:	d010      	beq.n	80137ba <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013798:	4b1f      	ldr	r3, [pc, #124]	@ (8013818 <tcp_slowtmr+0x678>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801379e:	429a      	cmp	r2, r3
 80137a0:	d106      	bne.n	80137b0 <tcp_slowtmr+0x610>
 80137a2:	4b19      	ldr	r3, [pc, #100]	@ (8013808 <tcp_slowtmr+0x668>)
 80137a4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80137a8:	491c      	ldr	r1, [pc, #112]	@ (801381c <tcp_slowtmr+0x67c>)
 80137aa:	4819      	ldr	r0, [pc, #100]	@ (8013810 <tcp_slowtmr+0x670>)
 80137ac:	f00b fa62 	bl	801ec74 <iprintf>
        prev->next = pcb->next;
 80137b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b2:	68da      	ldr	r2, [r3, #12]
 80137b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b6:	60da      	str	r2, [r3, #12]
 80137b8:	e00f      	b.n	80137da <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80137ba:	4b17      	ldr	r3, [pc, #92]	@ (8013818 <tcp_slowtmr+0x678>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d006      	beq.n	80137d2 <tcp_slowtmr+0x632>
 80137c4:	4b10      	ldr	r3, [pc, #64]	@ (8013808 <tcp_slowtmr+0x668>)
 80137c6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80137ca:	4915      	ldr	r1, [pc, #84]	@ (8013820 <tcp_slowtmr+0x680>)
 80137cc:	4810      	ldr	r0, [pc, #64]	@ (8013810 <tcp_slowtmr+0x670>)
 80137ce:	f00b fa51 	bl	801ec74 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80137d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	4a10      	ldr	r2, [pc, #64]	@ (8013818 <tcp_slowtmr+0x678>)
 80137d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80137da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80137de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80137e4:	69f8      	ldr	r0, [r7, #28]
 80137e6:	f7fe ffdd 	bl	80127a4 <tcp_free>
 80137ea:	e004      	b.n	80137f6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80137ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80137f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d1a9      	bne.n	8013750 <tcp_slowtmr+0x5b0>
    }
  }
}
 80137fc:	bf00      	nop
 80137fe:	bf00      	nop
 8013800:	3730      	adds	r7, #48	@ 0x30
 8013802:	46bd      	mov	sp, r7
 8013804:	bdb0      	pop	{r4, r5, r7, pc}
 8013806:	bf00      	nop
 8013808:	08023124 	.word	0x08023124
 801380c:	080235b4 	.word	0x080235b4
 8013810:	08023168 	.word	0x08023168
 8013814:	20013dbc 	.word	0x20013dbc
 8013818:	20013dcc 	.word	0x20013dcc
 801381c:	080235e4 	.word	0x080235e4
 8013820:	0802360c 	.word	0x0802360c

08013824 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801382a:	4b2d      	ldr	r3, [pc, #180]	@ (80138e0 <tcp_fasttmr+0xbc>)
 801382c:	781b      	ldrb	r3, [r3, #0]
 801382e:	3301      	adds	r3, #1
 8013830:	b2da      	uxtb	r2, r3
 8013832:	4b2b      	ldr	r3, [pc, #172]	@ (80138e0 <tcp_fasttmr+0xbc>)
 8013834:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013836:	4b2b      	ldr	r3, [pc, #172]	@ (80138e4 <tcp_fasttmr+0xc0>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801383c:	e048      	b.n	80138d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	7f9a      	ldrb	r2, [r3, #30]
 8013842:	4b27      	ldr	r3, [pc, #156]	@ (80138e0 <tcp_fasttmr+0xbc>)
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	429a      	cmp	r2, r3
 8013848:	d03f      	beq.n	80138ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801384a:	4b25      	ldr	r3, [pc, #148]	@ (80138e0 <tcp_fasttmr+0xbc>)
 801384c:	781a      	ldrb	r2, [r3, #0]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	8b5b      	ldrh	r3, [r3, #26]
 8013856:	f003 0301 	and.w	r3, r3, #1
 801385a:	2b00      	cmp	r3, #0
 801385c:	d010      	beq.n	8013880 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	8b5b      	ldrh	r3, [r3, #26]
 8013862:	f043 0302 	orr.w	r3, r3, #2
 8013866:	b29a      	uxth	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f003 ffd7 	bl	8017820 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	8b5b      	ldrh	r3, [r3, #26]
 8013876:	f023 0303 	bic.w	r3, r3, #3
 801387a:	b29a      	uxth	r2, r3
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	8b5b      	ldrh	r3, [r3, #26]
 8013884:	f003 0308 	and.w	r3, r3, #8
 8013888:	2b00      	cmp	r3, #0
 801388a:	d009      	beq.n	80138a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	8b5b      	ldrh	r3, [r3, #26]
 8013890:	f023 0308 	bic.w	r3, r3, #8
 8013894:	b29a      	uxth	r2, r3
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f7ff f916 	bl	8012acc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00a      	beq.n	80138c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80138ae:	4b0e      	ldr	r3, [pc, #56]	@ (80138e8 <tcp_fasttmr+0xc4>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 f819 	bl	80138ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80138ba:	4b0b      	ldr	r3, [pc, #44]	@ (80138e8 <tcp_fasttmr+0xc4>)
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d000      	beq.n	80138c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80138c2:	e7b8      	b.n	8013836 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	607b      	str	r3, [r7, #4]
 80138c8:	e002      	b.n	80138d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1b3      	bne.n	801383e <tcp_fasttmr+0x1a>
    }
  }
}
 80138d6:	bf00      	nop
 80138d8:	bf00      	nop
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	20013dd2 	.word	0x20013dd2
 80138e4:	20013dc8 	.word	0x20013dc8
 80138e8:	20013dd0 	.word	0x20013dd0

080138ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80138ec:	b590      	push	{r4, r7, lr}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d109      	bne.n	801390e <tcp_process_refused_data+0x22>
 80138fa:	4b38      	ldr	r3, [pc, #224]	@ (80139dc <tcp_process_refused_data+0xf0>)
 80138fc:	f240 6209 	movw	r2, #1545	@ 0x609
 8013900:	4937      	ldr	r1, [pc, #220]	@ (80139e0 <tcp_process_refused_data+0xf4>)
 8013902:	4838      	ldr	r0, [pc, #224]	@ (80139e4 <tcp_process_refused_data+0xf8>)
 8013904:	f00b f9b6 	bl	801ec74 <iprintf>
 8013908:	f06f 030f 	mvn.w	r3, #15
 801390c:	e061      	b.n	80139d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013912:	7b5b      	ldrb	r3, [r3, #13]
 8013914:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801391a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2200      	movs	r2, #0
 8013920:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00b      	beq.n	8013944 <tcp_process_refused_data+0x58>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6918      	ldr	r0, [r3, #16]
 8013936:	2300      	movs	r3, #0
 8013938:	68ba      	ldr	r2, [r7, #8]
 801393a:	6879      	ldr	r1, [r7, #4]
 801393c:	47a0      	blx	r4
 801393e:	4603      	mov	r3, r0
 8013940:	73fb      	strb	r3, [r7, #15]
 8013942:	e007      	b.n	8013954 <tcp_process_refused_data+0x68>
 8013944:	2300      	movs	r3, #0
 8013946:	68ba      	ldr	r2, [r7, #8]
 8013948:	6879      	ldr	r1, [r7, #4]
 801394a:	2000      	movs	r0, #0
 801394c:	f000 f8a6 	bl	8013a9c <tcp_recv_null>
 8013950:	4603      	mov	r3, r0
 8013952:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d12b      	bne.n	80139b4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801395c:	7bbb      	ldrb	r3, [r7, #14]
 801395e:	f003 0320 	and.w	r3, r3, #32
 8013962:	2b00      	cmp	r3, #0
 8013964:	d034      	beq.n	80139d0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801396a:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801396e:	4293      	cmp	r3, r2
 8013970:	d005      	beq.n	801397e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013976:	3301      	adds	r3, #1
 8013978:	b29a      	uxth	r2, r3
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013984:	2b00      	cmp	r3, #0
 8013986:	d00b      	beq.n	80139a0 <tcp_process_refused_data+0xb4>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6918      	ldr	r0, [r3, #16]
 8013992:	2300      	movs	r3, #0
 8013994:	2200      	movs	r2, #0
 8013996:	6879      	ldr	r1, [r7, #4]
 8013998:	47a0      	blx	r4
 801399a:	4603      	mov	r3, r0
 801399c:	73fb      	strb	r3, [r7, #15]
 801399e:	e001      	b.n	80139a4 <tcp_process_refused_data+0xb8>
 80139a0:	2300      	movs	r3, #0
 80139a2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80139a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139a8:	f113 0f0d 	cmn.w	r3, #13
 80139ac:	d110      	bne.n	80139d0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80139ae:	f06f 030c 	mvn.w	r3, #12
 80139b2:	e00e      	b.n	80139d2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80139b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139b8:	f113 0f0d 	cmn.w	r3, #13
 80139bc:	d102      	bne.n	80139c4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80139be:	f06f 030c 	mvn.w	r3, #12
 80139c2:	e006      	b.n	80139d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	68ba      	ldr	r2, [r7, #8]
 80139c8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80139ca:	f06f 0304 	mvn.w	r3, #4
 80139ce:	e000      	b.n	80139d2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3714      	adds	r7, #20
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd90      	pop	{r4, r7, pc}
 80139da:	bf00      	nop
 80139dc:	08023124 	.word	0x08023124
 80139e0:	08023634 	.word	0x08023634
 80139e4:	08023168 	.word	0x08023168

080139e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b084      	sub	sp, #16
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80139f0:	e007      	b.n	8013a02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 f80a 	bl	8013a12 <tcp_seg_free>
    seg = next;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d1f4      	bne.n	80139f2 <tcp_segs_free+0xa>
  }
}
 8013a08:	bf00      	nop
 8013a0a:	bf00      	nop
 8013a0c:	3710      	adds	r7, #16
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}

08013a12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013a12:	b580      	push	{r7, lr}
 8013a14:	b082      	sub	sp, #8
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d00c      	beq.n	8013a3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d004      	beq.n	8013a32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fe fa69 	bl	8011f04 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013a32:	6879      	ldr	r1, [r7, #4]
 8013a34:	2003      	movs	r0, #3
 8013a36:	f7fd fbc3 	bl	80111c0 <memp_free>
  }
}
 8013a3a:	bf00      	nop
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
	...

08013a44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d106      	bne.n	8013a60 <tcp_seg_copy+0x1c>
 8013a52:	4b0f      	ldr	r3, [pc, #60]	@ (8013a90 <tcp_seg_copy+0x4c>)
 8013a54:	f240 6282 	movw	r2, #1666	@ 0x682
 8013a58:	490e      	ldr	r1, [pc, #56]	@ (8013a94 <tcp_seg_copy+0x50>)
 8013a5a:	480f      	ldr	r0, [pc, #60]	@ (8013a98 <tcp_seg_copy+0x54>)
 8013a5c:	f00b f90a 	bl	801ec74 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013a60:	2003      	movs	r0, #3
 8013a62:	f7fd fb5b 	bl	801111c <memp_malloc>
 8013a66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <tcp_seg_copy+0x2e>
    return NULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	e00a      	b.n	8013a88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013a72:	2214      	movs	r2, #20
 8013a74:	6879      	ldr	r1, [r7, #4]
 8013a76:	68f8      	ldr	r0, [r7, #12]
 8013a78:	f00b fb23 	bl	801f0c2 <memcpy>
  pbuf_ref(cseg->p);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7fe fae5 	bl	8012050 <pbuf_ref>
  return cseg;
 8013a86:	68fb      	ldr	r3, [r7, #12]
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3710      	adds	r7, #16
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	08023124 	.word	0x08023124
 8013a94:	08023678 	.word	0x08023678
 8013a98:	08023168 	.word	0x08023168

08013a9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d109      	bne.n	8013ac4 <tcp_recv_null+0x28>
 8013ab0:	4b12      	ldr	r3, [pc, #72]	@ (8013afc <tcp_recv_null+0x60>)
 8013ab2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013ab6:	4912      	ldr	r1, [pc, #72]	@ (8013b00 <tcp_recv_null+0x64>)
 8013ab8:	4812      	ldr	r0, [pc, #72]	@ (8013b04 <tcp_recv_null+0x68>)
 8013aba:	f00b f8db 	bl	801ec74 <iprintf>
 8013abe:	f06f 030f 	mvn.w	r3, #15
 8013ac2:	e016      	b.n	8013af2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d009      	beq.n	8013ade <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	891b      	ldrh	r3, [r3, #8]
 8013ace:	4619      	mov	r1, r3
 8013ad0:	68b8      	ldr	r0, [r7, #8]
 8013ad2:	f7ff f9b5 	bl	8012e40 <tcp_recved>
    pbuf_free(p);
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f7fe fa14 	bl	8011f04 <pbuf_free>
 8013adc:	e008      	b.n	8013af0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d104      	bne.n	8013af0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013ae6:	68b8      	ldr	r0, [r7, #8]
 8013ae8:	f7ff f85a 	bl	8012ba0 <tcp_close>
 8013aec:	4603      	mov	r3, r0
 8013aee:	e000      	b.n	8013af2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3710      	adds	r7, #16
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
 8013afa:	bf00      	nop
 8013afc:	08023124 	.word	0x08023124
 8013b00:	08023694 	.word	0x08023694
 8013b04:	08023168 	.word	0x08023168

08013b08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b086      	sub	sp, #24
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	4603      	mov	r3, r0
 8013b10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	db01      	blt.n	8013b1e <tcp_kill_prio+0x16>
 8013b1a:	79fb      	ldrb	r3, [r7, #7]
 8013b1c:	e000      	b.n	8013b20 <tcp_kill_prio+0x18>
 8013b1e:	237f      	movs	r3, #127	@ 0x7f
 8013b20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013b22:	7afb      	ldrb	r3, [r7, #11]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d034      	beq.n	8013b92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013b28:	7afb      	ldrb	r3, [r7, #11]
 8013b2a:	3b01      	subs	r3, #1
 8013b2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013b32:	2300      	movs	r3, #0
 8013b34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b36:	4b19      	ldr	r3, [pc, #100]	@ (8013b9c <tcp_kill_prio+0x94>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	e01f      	b.n	8013b7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	7d5b      	ldrb	r3, [r3, #21]
 8013b42:	7afa      	ldrb	r2, [r7, #11]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d80c      	bhi.n	8013b62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013b4c:	7afa      	ldrb	r2, [r7, #11]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d112      	bne.n	8013b78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013b52:	4b13      	ldr	r3, [pc, #76]	@ (8013ba0 <tcp_kill_prio+0x98>)
 8013b54:	681a      	ldr	r2, [r3, #0]
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	6a1b      	ldr	r3, [r3, #32]
 8013b5a:	1ad3      	subs	r3, r2, r3
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d80a      	bhi.n	8013b78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013b62:	4b0f      	ldr	r3, [pc, #60]	@ (8013ba0 <tcp_kill_prio+0x98>)
 8013b64:	681a      	ldr	r2, [r3, #0]
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	6a1b      	ldr	r3, [r3, #32]
 8013b6a:	1ad3      	subs	r3, r2, r3
 8013b6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	7d5b      	ldrb	r3, [r3, #21]
 8013b76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	617b      	str	r3, [r7, #20]
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1dc      	bne.n	8013b3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d004      	beq.n	8013b94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013b8a:	6938      	ldr	r0, [r7, #16]
 8013b8c:	f7ff f8f2 	bl	8012d74 <tcp_abort>
 8013b90:	e000      	b.n	8013b94 <tcp_kill_prio+0x8c>
    return;
 8013b92:	bf00      	nop
  }
}
 8013b94:	3718      	adds	r7, #24
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	20013dc8 	.word	0x20013dc8
 8013ba0:	20013dbc 	.word	0x20013dbc

08013ba4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	4603      	mov	r3, r0
 8013bac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013bae:	79fb      	ldrb	r3, [r7, #7]
 8013bb0:	2b08      	cmp	r3, #8
 8013bb2:	d009      	beq.n	8013bc8 <tcp_kill_state+0x24>
 8013bb4:	79fb      	ldrb	r3, [r7, #7]
 8013bb6:	2b09      	cmp	r3, #9
 8013bb8:	d006      	beq.n	8013bc8 <tcp_kill_state+0x24>
 8013bba:	4b1a      	ldr	r3, [pc, #104]	@ (8013c24 <tcp_kill_state+0x80>)
 8013bbc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013bc0:	4919      	ldr	r1, [pc, #100]	@ (8013c28 <tcp_kill_state+0x84>)
 8013bc2:	481a      	ldr	r0, [pc, #104]	@ (8013c2c <tcp_kill_state+0x88>)
 8013bc4:	f00b f856 	bl	801ec74 <iprintf>

  inactivity = 0;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bd0:	4b17      	ldr	r3, [pc, #92]	@ (8013c30 <tcp_kill_state+0x8c>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	617b      	str	r3, [r7, #20]
 8013bd6:	e017      	b.n	8013c08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	7d1b      	ldrb	r3, [r3, #20]
 8013bdc:	79fa      	ldrb	r2, [r7, #7]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d10f      	bne.n	8013c02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013be2:	4b14      	ldr	r3, [pc, #80]	@ (8013c34 <tcp_kill_state+0x90>)
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	6a1b      	ldr	r3, [r3, #32]
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	68fa      	ldr	r2, [r7, #12]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d807      	bhi.n	8013c02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013bf2:	4b10      	ldr	r3, [pc, #64]	@ (8013c34 <tcp_kill_state+0x90>)
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	6a1b      	ldr	r3, [r3, #32]
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	617b      	str	r3, [r7, #20]
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1e4      	bne.n	8013bd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d003      	beq.n	8013c1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013c14:	2100      	movs	r1, #0
 8013c16:	6938      	ldr	r0, [r7, #16]
 8013c18:	f7fe ffee 	bl	8012bf8 <tcp_abandon>
  }
}
 8013c1c:	bf00      	nop
 8013c1e:	3718      	adds	r7, #24
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	08023124 	.word	0x08023124
 8013c28:	080236b0 	.word	0x080236b0
 8013c2c:	08023168 	.word	0x08023168
 8013c30:	20013dc8 	.word	0x20013dc8
 8013c34:	20013dbc 	.word	0x20013dbc

08013c38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013c42:	2300      	movs	r3, #0
 8013c44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c46:	4b12      	ldr	r3, [pc, #72]	@ (8013c90 <tcp_kill_timewait+0x58>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	60fb      	str	r3, [r7, #12]
 8013c4c:	e012      	b.n	8013c74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013c4e:	4b11      	ldr	r3, [pc, #68]	@ (8013c94 <tcp_kill_timewait+0x5c>)
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	6a1b      	ldr	r3, [r3, #32]
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d807      	bhi.n	8013c6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8013c94 <tcp_kill_timewait+0x5c>)
 8013c60:	681a      	ldr	r2, [r3, #0]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	6a1b      	ldr	r3, [r3, #32]
 8013c66:	1ad3      	subs	r3, r2, r3
 8013c68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	60fb      	str	r3, [r7, #12]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1e9      	bne.n	8013c4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d002      	beq.n	8013c86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013c80:	68b8      	ldr	r0, [r7, #8]
 8013c82:	f7ff f877 	bl	8012d74 <tcp_abort>
  }
}
 8013c86:	bf00      	nop
 8013c88:	3710      	adds	r7, #16
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	20013dcc 	.word	0x20013dcc
 8013c94:	20013dbc 	.word	0x20013dbc

08013c98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013c9e:	4b10      	ldr	r3, [pc, #64]	@ (8013ce0 <tcp_handle_closepend+0x48>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013ca4:	e014      	b.n	8013cd0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	8b5b      	ldrh	r3, [r3, #26]
 8013cb0:	f003 0308 	and.w	r3, r3, #8
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d009      	beq.n	8013ccc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	8b5b      	ldrh	r3, [r3, #26]
 8013cbc:	f023 0308 	bic.w	r3, r3, #8
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f7fe ff00 	bl	8012acc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d1e7      	bne.n	8013ca6 <tcp_handle_closepend+0xe>
  }
}
 8013cd6:	bf00      	nop
 8013cd8:	bf00      	nop
 8013cda:	3708      	adds	r7, #8
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	20013dc8 	.word	0x20013dc8

08013ce4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013cee:	2001      	movs	r0, #1
 8013cf0:	f7fd fa14 	bl	801111c <memp_malloc>
 8013cf4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d126      	bne.n	8013d4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013cfc:	f7ff ffcc 	bl	8013c98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013d00:	f7ff ff9a 	bl	8013c38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d04:	2001      	movs	r0, #1
 8013d06:	f7fd fa09 	bl	801111c <memp_malloc>
 8013d0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d11b      	bne.n	8013d4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013d12:	2009      	movs	r0, #9
 8013d14:	f7ff ff46 	bl	8013ba4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d18:	2001      	movs	r0, #1
 8013d1a:	f7fd f9ff 	bl	801111c <memp_malloc>
 8013d1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d111      	bne.n	8013d4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013d26:	2008      	movs	r0, #8
 8013d28:	f7ff ff3c 	bl	8013ba4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d2c:	2001      	movs	r0, #1
 8013d2e:	f7fd f9f5 	bl	801111c <memp_malloc>
 8013d32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d107      	bne.n	8013d4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013d3a:	79fb      	ldrb	r3, [r7, #7]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ff fee3 	bl	8013b08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d42:	2001      	movs	r0, #1
 8013d44:	f7fd f9ea 	bl	801111c <memp_malloc>
 8013d48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d03f      	beq.n	8013dd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013d50:	229c      	movs	r2, #156	@ 0x9c
 8013d52:	2100      	movs	r1, #0
 8013d54:	68f8      	ldr	r0, [r7, #12]
 8013d56:	f00b f8f7 	bl	801ef48 <memset>
    pcb->prio = prio;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	79fa      	ldrb	r2, [r7, #7]
 8013d5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8013d66:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8013d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	22ff      	movs	r2, #255	@ 0xff
 8013d7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013d86:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2206      	movs	r2, #6
 8013d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2206      	movs	r2, #6
 8013d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d9c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2201      	movs	r2, #1
 8013da2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013da6:	4b0d      	ldr	r3, [pc, #52]	@ (8013ddc <tcp_alloc+0xf8>)
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013dae:	4b0c      	ldr	r3, [pc, #48]	@ (8013de0 <tcp_alloc+0xfc>)
 8013db0:	781a      	ldrb	r2, [r3, #0]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8013dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	4a08      	ldr	r2, [pc, #32]	@ (8013de4 <tcp_alloc+0x100>)
 8013dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	4a07      	ldr	r2, [pc, #28]	@ (8013de8 <tcp_alloc+0x104>)
 8013dcc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	20013dbc 	.word	0x20013dbc
 8013de0:	20013dd2 	.word	0x20013dd2
 8013de4:	08013a9d 	.word	0x08013a9d
 8013de8:	006ddd00 	.word	0x006ddd00

08013dec <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013df0:	2040      	movs	r0, #64	@ 0x40
 8013df2:	f7ff ff77 	bl	8013ce4 <tcp_alloc>
 8013df6:	4603      	mov	r3, r0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d002      	beq.n	8013e12 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	683a      	ldr	r2, [r7, #0]
 8013e10:	611a      	str	r2, [r3, #16]
  }
}
 8013e12:	bf00      	nop
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr
	...

08013e20 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d00e      	beq.n	8013e4e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	7d1b      	ldrb	r3, [r3, #20]
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d106      	bne.n	8013e46 <tcp_recv+0x26>
 8013e38:	4b07      	ldr	r3, [pc, #28]	@ (8013e58 <tcp_recv+0x38>)
 8013e3a:	f240 72df 	movw	r2, #2015	@ 0x7df
 8013e3e:	4907      	ldr	r1, [pc, #28]	@ (8013e5c <tcp_recv+0x3c>)
 8013e40:	4807      	ldr	r0, [pc, #28]	@ (8013e60 <tcp_recv+0x40>)
 8013e42:	f00a ff17 	bl	801ec74 <iprintf>
    pcb->recv = recv;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	683a      	ldr	r2, [r7, #0]
 8013e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8013e4e:	bf00      	nop
 8013e50:	3708      	adds	r7, #8
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	08023124 	.word	0x08023124
 8013e5c:	080236c0 	.word	0x080236c0
 8013e60:	08023168 	.word	0x08023168

08013e64 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d107      	bne.n	8013e82 <tcp_pcb_purge+0x1e>
 8013e72:	4b21      	ldr	r3, [pc, #132]	@ (8013ef8 <tcp_pcb_purge+0x94>)
 8013e74:	f640 0251 	movw	r2, #2129	@ 0x851
 8013e78:	4920      	ldr	r1, [pc, #128]	@ (8013efc <tcp_pcb_purge+0x98>)
 8013e7a:	4821      	ldr	r0, [pc, #132]	@ (8013f00 <tcp_pcb_purge+0x9c>)
 8013e7c:	f00a fefa 	bl	801ec74 <iprintf>
 8013e80:	e037      	b.n	8013ef2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	7d1b      	ldrb	r3, [r3, #20]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d033      	beq.n	8013ef2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013e8e:	2b0a      	cmp	r3, #10
 8013e90:	d02f      	beq.n	8013ef2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	d02b      	beq.n	8013ef2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d007      	beq.n	8013eb2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fe f82c 	bl	8011f04 <pbuf_free>
      pcb->refused_data = NULL;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d002      	beq.n	8013ec0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f000 f986 	bl	80141cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ec6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7ff fd8b 	bl	80139e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7ff fd86 	bl	80139e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2200      	movs	r2, #0
 8013eee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	08023124 	.word	0x08023124
 8013efc:	08023770 	.word	0x08023770
 8013f00:	08023168 	.word	0x08023168

08013f04 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d106      	bne.n	8013f22 <tcp_pcb_remove+0x1e>
 8013f14:	4b3e      	ldr	r3, [pc, #248]	@ (8014010 <tcp_pcb_remove+0x10c>)
 8013f16:	f640 0283 	movw	r2, #2179	@ 0x883
 8013f1a:	493e      	ldr	r1, [pc, #248]	@ (8014014 <tcp_pcb_remove+0x110>)
 8013f1c:	483e      	ldr	r0, [pc, #248]	@ (8014018 <tcp_pcb_remove+0x114>)
 8013f1e:	f00a fea9 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d106      	bne.n	8013f36 <tcp_pcb_remove+0x32>
 8013f28:	4b39      	ldr	r3, [pc, #228]	@ (8014010 <tcp_pcb_remove+0x10c>)
 8013f2a:	f640 0284 	movw	r2, #2180	@ 0x884
 8013f2e:	493b      	ldr	r1, [pc, #236]	@ (801401c <tcp_pcb_remove+0x118>)
 8013f30:	4839      	ldr	r0, [pc, #228]	@ (8014018 <tcp_pcb_remove+0x114>)
 8013f32:	f00a fe9f 	bl	801ec74 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	683a      	ldr	r2, [r7, #0]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d105      	bne.n	8013f4c <tcp_pcb_remove+0x48>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	68da      	ldr	r2, [r3, #12]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	601a      	str	r2, [r3, #0]
 8013f4a:	e013      	b.n	8013f74 <tcp_pcb_remove+0x70>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	e00c      	b.n	8013f6e <tcp_pcb_remove+0x6a>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d104      	bne.n	8013f68 <tcp_pcb_remove+0x64>
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	68da      	ldr	r2, [r3, #12]
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	60da      	str	r2, [r3, #12]
 8013f66:	e005      	b.n	8013f74 <tcp_pcb_remove+0x70>
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	60fb      	str	r3, [r7, #12]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d1ef      	bne.n	8013f54 <tcp_pcb_remove+0x50>
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	2200      	movs	r2, #0
 8013f78:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013f7a:	6838      	ldr	r0, [r7, #0]
 8013f7c:	f7ff ff72 	bl	8013e64 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	7d1b      	ldrb	r3, [r3, #20]
 8013f84:	2b0a      	cmp	r3, #10
 8013f86:	d013      	beq.n	8013fb0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d00f      	beq.n	8013fb0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	8b5b      	ldrh	r3, [r3, #26]
 8013f94:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d009      	beq.n	8013fb0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	8b5b      	ldrh	r3, [r3, #26]
 8013fa0:	f043 0302 	orr.w	r3, r3, #2
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013faa:	6838      	ldr	r0, [r7, #0]
 8013fac:	f003 fc38 	bl	8017820 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	7d1b      	ldrb	r3, [r3, #20]
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d020      	beq.n	8013ffa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d006      	beq.n	8013fce <tcp_pcb_remove+0xca>
 8013fc0:	4b13      	ldr	r3, [pc, #76]	@ (8014010 <tcp_pcb_remove+0x10c>)
 8013fc2:	f640 0293 	movw	r2, #2195	@ 0x893
 8013fc6:	4916      	ldr	r1, [pc, #88]	@ (8014020 <tcp_pcb_remove+0x11c>)
 8013fc8:	4813      	ldr	r0, [pc, #76]	@ (8014018 <tcp_pcb_remove+0x114>)
 8013fca:	f00a fe53 	bl	801ec74 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d006      	beq.n	8013fe4 <tcp_pcb_remove+0xe0>
 8013fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8014010 <tcp_pcb_remove+0x10c>)
 8013fd8:	f640 0294 	movw	r2, #2196	@ 0x894
 8013fdc:	4911      	ldr	r1, [pc, #68]	@ (8014024 <tcp_pcb_remove+0x120>)
 8013fde:	480e      	ldr	r0, [pc, #56]	@ (8014018 <tcp_pcb_remove+0x114>)
 8013fe0:	f00a fe48 	bl	801ec74 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d006      	beq.n	8013ffa <tcp_pcb_remove+0xf6>
 8013fec:	4b08      	ldr	r3, [pc, #32]	@ (8014010 <tcp_pcb_remove+0x10c>)
 8013fee:	f640 0296 	movw	r2, #2198	@ 0x896
 8013ff2:	490d      	ldr	r1, [pc, #52]	@ (8014028 <tcp_pcb_remove+0x124>)
 8013ff4:	4808      	ldr	r0, [pc, #32]	@ (8014018 <tcp_pcb_remove+0x114>)
 8013ff6:	f00a fe3d 	bl	801ec74 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	2200      	movs	r2, #0
 8014004:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014006:	bf00      	nop
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	08023124 	.word	0x08023124
 8014014:	0802378c 	.word	0x0802378c
 8014018:	08023168 	.word	0x08023168
 801401c:	080237a8 	.word	0x080237a8
 8014020:	080237c8 	.word	0x080237c8
 8014024:	080237e0 	.word	0x080237e0
 8014028:	080237fc 	.word	0x080237fc

0801402c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d106      	bne.n	8014048 <tcp_next_iss+0x1c>
 801403a:	4b0a      	ldr	r3, [pc, #40]	@ (8014064 <tcp_next_iss+0x38>)
 801403c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014040:	4909      	ldr	r1, [pc, #36]	@ (8014068 <tcp_next_iss+0x3c>)
 8014042:	480a      	ldr	r0, [pc, #40]	@ (801406c <tcp_next_iss+0x40>)
 8014044:	f00a fe16 	bl	801ec74 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014048:	4b09      	ldr	r3, [pc, #36]	@ (8014070 <tcp_next_iss+0x44>)
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	4b09      	ldr	r3, [pc, #36]	@ (8014074 <tcp_next_iss+0x48>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4413      	add	r3, r2
 8014052:	4a07      	ldr	r2, [pc, #28]	@ (8014070 <tcp_next_iss+0x44>)
 8014054:	6013      	str	r3, [r2, #0]
  return iss;
 8014056:	4b06      	ldr	r3, [pc, #24]	@ (8014070 <tcp_next_iss+0x44>)
 8014058:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801405a:	4618      	mov	r0, r3
 801405c:	3708      	adds	r7, #8
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	08023124 	.word	0x08023124
 8014068:	08023814 	.word	0x08023814
 801406c:	08023168 	.word	0x08023168
 8014070:	200000c0 	.word	0x200000c0
 8014074:	20013dbc 	.word	0x20013dbc

08014078 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	4603      	mov	r3, r0
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d106      	bne.n	801409a <tcp_eff_send_mss_netif+0x22>
 801408c:	4b14      	ldr	r3, [pc, #80]	@ (80140e0 <tcp_eff_send_mss_netif+0x68>)
 801408e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014092:	4914      	ldr	r1, [pc, #80]	@ (80140e4 <tcp_eff_send_mss_netif+0x6c>)
 8014094:	4814      	ldr	r0, [pc, #80]	@ (80140e8 <tcp_eff_send_mss_netif+0x70>)
 8014096:	f00a fded 	bl	801ec74 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d101      	bne.n	80140a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80140a0:	89fb      	ldrh	r3, [r7, #14]
 80140a2:	e019      	b.n	80140d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80140a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80140aa:	8afb      	ldrh	r3, [r7, #22]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d012      	beq.n	80140d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80140b0:	2328      	movs	r3, #40	@ 0x28
 80140b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80140b4:	8afa      	ldrh	r2, [r7, #22]
 80140b6:	8abb      	ldrh	r3, [r7, #20]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d904      	bls.n	80140c6 <tcp_eff_send_mss_netif+0x4e>
 80140bc:	8afa      	ldrh	r2, [r7, #22]
 80140be:	8abb      	ldrh	r3, [r7, #20]
 80140c0:	1ad3      	subs	r3, r2, r3
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	e000      	b.n	80140c8 <tcp_eff_send_mss_netif+0x50>
 80140c6:	2300      	movs	r3, #0
 80140c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80140ca:	8a7a      	ldrh	r2, [r7, #18]
 80140cc:	89fb      	ldrh	r3, [r7, #14]
 80140ce:	4293      	cmp	r3, r2
 80140d0:	bf28      	it	cs
 80140d2:	4613      	movcs	r3, r2
 80140d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80140d6:	89fb      	ldrh	r3, [r7, #14]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3718      	adds	r7, #24
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	08023124 	.word	0x08023124
 80140e4:	08023830 	.word	0x08023830
 80140e8:	08023168 	.word	0x08023168

080140ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d119      	bne.n	8014134 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014100:	4b10      	ldr	r3, [pc, #64]	@ (8014144 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014102:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014106:	4910      	ldr	r1, [pc, #64]	@ (8014148 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014108:	4810      	ldr	r0, [pc, #64]	@ (801414c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801410a:	f00a fdb3 	bl	801ec74 <iprintf>

  while (pcb != NULL) {
 801410e:	e011      	b.n	8014134 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	429a      	cmp	r2, r3
 801411a:	d108      	bne.n	801412e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f7fe fe26 	bl	8012d74 <tcp_abort>
      pcb = next;
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	60fb      	str	r3, [r7, #12]
 801412c:	e002      	b.n	8014134 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1ea      	bne.n	8014110 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801413a:	bf00      	nop
 801413c:	bf00      	nop
 801413e:	3710      	adds	r7, #16
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	08023124 	.word	0x08023124
 8014148:	08023858 	.word	0x08023858
 801414c:	08023168 	.word	0x08023168

08014150 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d02a      	beq.n	80141b6 <tcp_netif_ip_addr_changed+0x66>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d026      	beq.n	80141b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014168:	4b15      	ldr	r3, [pc, #84]	@ (80141c0 <tcp_netif_ip_addr_changed+0x70>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	4619      	mov	r1, r3
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7ff ffbc 	bl	80140ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014174:	4b13      	ldr	r3, [pc, #76]	@ (80141c4 <tcp_netif_ip_addr_changed+0x74>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4619      	mov	r1, r3
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7ff ffb6 	bl	80140ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d017      	beq.n	80141b6 <tcp_netif_ip_addr_changed+0x66>
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d013      	beq.n	80141b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801418e:	4b0e      	ldr	r3, [pc, #56]	@ (80141c8 <tcp_netif_ip_addr_changed+0x78>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	60fb      	str	r3, [r7, #12]
 8014194:	e00c      	b.n	80141b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d103      	bne.n	80141aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	60fb      	str	r3, [r7, #12]
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d1ef      	bne.n	8014196 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80141b6:	bf00      	nop
 80141b8:	3710      	adds	r7, #16
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}
 80141be:	bf00      	nop
 80141c0:	20013dc8 	.word	0x20013dc8
 80141c4:	20013dc0 	.word	0x20013dc0
 80141c8:	20013dc4 	.word	0x20013dc4

080141cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d007      	beq.n	80141ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7ff fc01 	bl	80139e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2200      	movs	r2, #0
 80141ea:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80141ec:	bf00      	nop
 80141ee:	3708      	adds	r7, #8
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80141f4:	b590      	push	{r4, r7, lr}
 80141f6:	b08d      	sub	sp, #52	@ 0x34
 80141f8:	af04      	add	r7, sp, #16
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d105      	bne.n	8014210 <tcp_input+0x1c>
 8014204:	4b8b      	ldr	r3, [pc, #556]	@ (8014434 <tcp_input+0x240>)
 8014206:	2283      	movs	r2, #131	@ 0x83
 8014208:	498b      	ldr	r1, [pc, #556]	@ (8014438 <tcp_input+0x244>)
 801420a:	488c      	ldr	r0, [pc, #560]	@ (801443c <tcp_input+0x248>)
 801420c:	f00a fd32 	bl	801ec74 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	4a8a      	ldr	r2, [pc, #552]	@ (8014440 <tcp_input+0x24c>)
 8014216:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	895b      	ldrh	r3, [r3, #10]
 801421c:	2b13      	cmp	r3, #19
 801421e:	f240 83e3 	bls.w	80149e8 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014222:	4b88      	ldr	r3, [pc, #544]	@ (8014444 <tcp_input+0x250>)
 8014224:	695b      	ldr	r3, [r3, #20]
 8014226:	4a87      	ldr	r2, [pc, #540]	@ (8014444 <tcp_input+0x250>)
 8014228:	6812      	ldr	r2, [r2, #0]
 801422a:	4611      	mov	r1, r2
 801422c:	4618      	mov	r0, r3
 801422e:	f008 fcd1 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	f040 83d9 	bne.w	80149ec <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801423a:	4b82      	ldr	r3, [pc, #520]	@ (8014444 <tcp_input+0x250>)
 801423c:	695b      	ldr	r3, [r3, #20]
 801423e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014242:	2be0      	cmp	r3, #224	@ 0xe0
 8014244:	f000 83d2 	beq.w	80149ec <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	891a      	ldrh	r2, [r3, #8]
 801424c:	4b7e      	ldr	r3, [pc, #504]	@ (8014448 <tcp_input+0x254>)
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4b7e      	ldr	r3, [pc, #504]	@ (801444c <tcp_input+0x258>)
 8014252:	2106      	movs	r1, #6
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f7fc fa65 	bl	8010724 <ip_chksum_pseudo>
 801425a:	4603      	mov	r3, r0
 801425c:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 801425e:	8a3b      	ldrh	r3, [r7, #16]
 8014260:	2b00      	cmp	r3, #0
 8014262:	f040 83c5 	bne.w	80149f0 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014266:	4b76      	ldr	r3, [pc, #472]	@ (8014440 <tcp_input+0x24c>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	899b      	ldrh	r3, [r3, #12]
 801426c:	b29b      	uxth	r3, r3
 801426e:	4618      	mov	r0, r3
 8014270:	f7fc f926 	bl	80104c0 <lwip_htons>
 8014274:	4603      	mov	r3, r0
 8014276:	0b1b      	lsrs	r3, r3, #12
 8014278:	b29b      	uxth	r3, r3
 801427a:	b2db      	uxtb	r3, r3
 801427c:	009b      	lsls	r3, r3, #2
 801427e:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014280:	7bfb      	ldrb	r3, [r7, #15]
 8014282:	2b13      	cmp	r3, #19
 8014284:	f240 83b6 	bls.w	80149f4 <tcp_input+0x800>
 8014288:	7bfb      	ldrb	r3, [r7, #15]
 801428a:	b29a      	uxth	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	891b      	ldrh	r3, [r3, #8]
 8014290:	429a      	cmp	r2, r3
 8014292:	f200 83af 	bhi.w	80149f4 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014296:	7bfb      	ldrb	r3, [r7, #15]
 8014298:	b29b      	uxth	r3, r3
 801429a:	3b14      	subs	r3, #20
 801429c:	b29a      	uxth	r2, r3
 801429e:	4b6c      	ldr	r3, [pc, #432]	@ (8014450 <tcp_input+0x25c>)
 80142a0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80142a2:	4b6c      	ldr	r3, [pc, #432]	@ (8014454 <tcp_input+0x260>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	895a      	ldrh	r2, [r3, #10]
 80142ac:	7bfb      	ldrb	r3, [r7, #15]
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d309      	bcc.n	80142c8 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80142b4:	4b66      	ldr	r3, [pc, #408]	@ (8014450 <tcp_input+0x25c>)
 80142b6:	881a      	ldrh	r2, [r3, #0]
 80142b8:	4b67      	ldr	r3, [pc, #412]	@ (8014458 <tcp_input+0x264>)
 80142ba:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80142bc:	7bfb      	ldrb	r3, [r7, #15]
 80142be:	4619      	mov	r1, r3
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f7fd fd99 	bl	8011df8 <pbuf_remove_header>
 80142c6:	e04e      	b.n	8014366 <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d105      	bne.n	80142dc <tcp_input+0xe8>
 80142d0:	4b58      	ldr	r3, [pc, #352]	@ (8014434 <tcp_input+0x240>)
 80142d2:	22c2      	movs	r2, #194	@ 0xc2
 80142d4:	4961      	ldr	r1, [pc, #388]	@ (801445c <tcp_input+0x268>)
 80142d6:	4859      	ldr	r0, [pc, #356]	@ (801443c <tcp_input+0x248>)
 80142d8:	f00a fccc 	bl	801ec74 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80142dc:	2114      	movs	r1, #20
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f7fd fd8a 	bl	8011df8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	895a      	ldrh	r2, [r3, #10]
 80142e8:	4b5b      	ldr	r3, [pc, #364]	@ (8014458 <tcp_input+0x264>)
 80142ea:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80142ec:	4b58      	ldr	r3, [pc, #352]	@ (8014450 <tcp_input+0x25c>)
 80142ee:	881a      	ldrh	r2, [r3, #0]
 80142f0:	4b59      	ldr	r3, [pc, #356]	@ (8014458 <tcp_input+0x264>)
 80142f2:	881b      	ldrh	r3, [r3, #0]
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80142f8:	4b57      	ldr	r3, [pc, #348]	@ (8014458 <tcp_input+0x264>)
 80142fa:	881b      	ldrh	r3, [r3, #0]
 80142fc:	4619      	mov	r1, r3
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f7fd fd7a 	bl	8011df8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	895b      	ldrh	r3, [r3, #10]
 801430a:	89ba      	ldrh	r2, [r7, #12]
 801430c:	429a      	cmp	r2, r3
 801430e:	f200 8373 	bhi.w	80149f8 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	4a4e      	ldr	r2, [pc, #312]	@ (8014454 <tcp_input+0x260>)
 801431a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	89ba      	ldrh	r2, [r7, #12]
 8014322:	4611      	mov	r1, r2
 8014324:	4618      	mov	r0, r3
 8014326:	f7fd fd67 	bl	8011df8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	891a      	ldrh	r2, [r3, #8]
 801432e:	89bb      	ldrh	r3, [r7, #12]
 8014330:	1ad3      	subs	r3, r2, r3
 8014332:	b29a      	uxth	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	895b      	ldrh	r3, [r3, #10]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d005      	beq.n	801434c <tcp_input+0x158>
 8014340:	4b3c      	ldr	r3, [pc, #240]	@ (8014434 <tcp_input+0x240>)
 8014342:	22df      	movs	r2, #223	@ 0xdf
 8014344:	4946      	ldr	r1, [pc, #280]	@ (8014460 <tcp_input+0x26c>)
 8014346:	483d      	ldr	r0, [pc, #244]	@ (801443c <tcp_input+0x248>)
 8014348:	f00a fc94 	bl	801ec74 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	891a      	ldrh	r2, [r3, #8]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	891b      	ldrh	r3, [r3, #8]
 8014356:	429a      	cmp	r2, r3
 8014358:	d005      	beq.n	8014366 <tcp_input+0x172>
 801435a:	4b36      	ldr	r3, [pc, #216]	@ (8014434 <tcp_input+0x240>)
 801435c:	22e0      	movs	r2, #224	@ 0xe0
 801435e:	4941      	ldr	r1, [pc, #260]	@ (8014464 <tcp_input+0x270>)
 8014360:	4836      	ldr	r0, [pc, #216]	@ (801443c <tcp_input+0x248>)
 8014362:	f00a fc87 	bl	801ec74 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014366:	4b36      	ldr	r3, [pc, #216]	@ (8014440 <tcp_input+0x24c>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	b29b      	uxth	r3, r3
 801436e:	4a34      	ldr	r2, [pc, #208]	@ (8014440 <tcp_input+0x24c>)
 8014370:	6814      	ldr	r4, [r2, #0]
 8014372:	4618      	mov	r0, r3
 8014374:	f7fc f8a4 	bl	80104c0 <lwip_htons>
 8014378:	4603      	mov	r3, r0
 801437a:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801437c:	4b30      	ldr	r3, [pc, #192]	@ (8014440 <tcp_input+0x24c>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	885b      	ldrh	r3, [r3, #2]
 8014382:	b29b      	uxth	r3, r3
 8014384:	4a2e      	ldr	r2, [pc, #184]	@ (8014440 <tcp_input+0x24c>)
 8014386:	6814      	ldr	r4, [r2, #0]
 8014388:	4618      	mov	r0, r3
 801438a:	f7fc f899 	bl	80104c0 <lwip_htons>
 801438e:	4603      	mov	r3, r0
 8014390:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014392:	4b2b      	ldr	r3, [pc, #172]	@ (8014440 <tcp_input+0x24c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	4a29      	ldr	r2, [pc, #164]	@ (8014440 <tcp_input+0x24c>)
 801439a:	6814      	ldr	r4, [r2, #0]
 801439c:	4618      	mov	r0, r3
 801439e:	f7fc f8a4 	bl	80104ea <lwip_htonl>
 80143a2:	4603      	mov	r3, r0
 80143a4:	6063      	str	r3, [r4, #4]
 80143a6:	6863      	ldr	r3, [r4, #4]
 80143a8:	4a2f      	ldr	r2, [pc, #188]	@ (8014468 <tcp_input+0x274>)
 80143aa:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80143ac:	4b24      	ldr	r3, [pc, #144]	@ (8014440 <tcp_input+0x24c>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	689b      	ldr	r3, [r3, #8]
 80143b2:	4a23      	ldr	r2, [pc, #140]	@ (8014440 <tcp_input+0x24c>)
 80143b4:	6814      	ldr	r4, [r2, #0]
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7fc f897 	bl	80104ea <lwip_htonl>
 80143bc:	4603      	mov	r3, r0
 80143be:	60a3      	str	r3, [r4, #8]
 80143c0:	68a3      	ldr	r3, [r4, #8]
 80143c2:	4a2a      	ldr	r2, [pc, #168]	@ (801446c <tcp_input+0x278>)
 80143c4:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80143c6:	4b1e      	ldr	r3, [pc, #120]	@ (8014440 <tcp_input+0x24c>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	89db      	ldrh	r3, [r3, #14]
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	4a1c      	ldr	r2, [pc, #112]	@ (8014440 <tcp_input+0x24c>)
 80143d0:	6814      	ldr	r4, [r2, #0]
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fc f874 	bl	80104c0 <lwip_htons>
 80143d8:	4603      	mov	r3, r0
 80143da:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80143dc:	4b18      	ldr	r3, [pc, #96]	@ (8014440 <tcp_input+0x24c>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	899b      	ldrh	r3, [r3, #12]
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7fc f86b 	bl	80104c0 <lwip_htons>
 80143ea:	4603      	mov	r3, r0
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80143f2:	b2da      	uxtb	r2, r3
 80143f4:	4b1e      	ldr	r3, [pc, #120]	@ (8014470 <tcp_input+0x27c>)
 80143f6:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	891a      	ldrh	r2, [r3, #8]
 80143fc:	4b1d      	ldr	r3, [pc, #116]	@ (8014474 <tcp_input+0x280>)
 80143fe:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014400:	4b1b      	ldr	r3, [pc, #108]	@ (8014470 <tcp_input+0x27c>)
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	f003 0303 	and.w	r3, r3, #3
 8014408:	2b00      	cmp	r3, #0
 801440a:	d00c      	beq.n	8014426 <tcp_input+0x232>
    tcplen++;
 801440c:	4b19      	ldr	r3, [pc, #100]	@ (8014474 <tcp_input+0x280>)
 801440e:	881b      	ldrh	r3, [r3, #0]
 8014410:	3301      	adds	r3, #1
 8014412:	b29a      	uxth	r2, r3
 8014414:	4b17      	ldr	r3, [pc, #92]	@ (8014474 <tcp_input+0x280>)
 8014416:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	891a      	ldrh	r2, [r3, #8]
 801441c:	4b15      	ldr	r3, [pc, #84]	@ (8014474 <tcp_input+0x280>)
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	429a      	cmp	r2, r3
 8014422:	f200 82eb 	bhi.w	80149fc <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014426:	2300      	movs	r3, #0
 8014428:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801442a:	4b13      	ldr	r3, [pc, #76]	@ (8014478 <tcp_input+0x284>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	61bb      	str	r3, [r7, #24]
 8014430:	e09b      	b.n	801456a <tcp_input+0x376>
 8014432:	bf00      	nop
 8014434:	0802388c 	.word	0x0802388c
 8014438:	080238c0 	.word	0x080238c0
 801443c:	080238d8 	.word	0x080238d8
 8014440:	20013de8 	.word	0x20013de8
 8014444:	2000a348 	.word	0x2000a348
 8014448:	2000a35c 	.word	0x2000a35c
 801444c:	2000a358 	.word	0x2000a358
 8014450:	20013dec 	.word	0x20013dec
 8014454:	20013df0 	.word	0x20013df0
 8014458:	20013dee 	.word	0x20013dee
 801445c:	08023900 	.word	0x08023900
 8014460:	08023910 	.word	0x08023910
 8014464:	0802391c 	.word	0x0802391c
 8014468:	20013df8 	.word	0x20013df8
 801446c:	20013dfc 	.word	0x20013dfc
 8014470:	20013e04 	.word	0x20013e04
 8014474:	20013e02 	.word	0x20013e02
 8014478:	20013dc8 	.word	0x20013dc8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	7d1b      	ldrb	r3, [r3, #20]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d105      	bne.n	8014490 <tcp_input+0x29c>
 8014484:	4b88      	ldr	r3, [pc, #544]	@ (80146a8 <tcp_input+0x4b4>)
 8014486:	22fb      	movs	r2, #251	@ 0xfb
 8014488:	4988      	ldr	r1, [pc, #544]	@ (80146ac <tcp_input+0x4b8>)
 801448a:	4889      	ldr	r0, [pc, #548]	@ (80146b0 <tcp_input+0x4bc>)
 801448c:	f00a fbf2 	bl	801ec74 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	7d1b      	ldrb	r3, [r3, #20]
 8014494:	2b0a      	cmp	r3, #10
 8014496:	d105      	bne.n	80144a4 <tcp_input+0x2b0>
 8014498:	4b83      	ldr	r3, [pc, #524]	@ (80146a8 <tcp_input+0x4b4>)
 801449a:	22fc      	movs	r2, #252	@ 0xfc
 801449c:	4985      	ldr	r1, [pc, #532]	@ (80146b4 <tcp_input+0x4c0>)
 801449e:	4884      	ldr	r0, [pc, #528]	@ (80146b0 <tcp_input+0x4bc>)
 80144a0:	f00a fbe8 	bl	801ec74 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80144a4:	69bb      	ldr	r3, [r7, #24]
 80144a6:	7d1b      	ldrb	r3, [r3, #20]
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d105      	bne.n	80144b8 <tcp_input+0x2c4>
 80144ac:	4b7e      	ldr	r3, [pc, #504]	@ (80146a8 <tcp_input+0x4b4>)
 80144ae:	22fd      	movs	r2, #253	@ 0xfd
 80144b0:	4981      	ldr	r1, [pc, #516]	@ (80146b8 <tcp_input+0x4c4>)
 80144b2:	487f      	ldr	r0, [pc, #508]	@ (80146b0 <tcp_input+0x4bc>)
 80144b4:	f00a fbde 	bl	801ec74 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	7a1b      	ldrb	r3, [r3, #8]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d00c      	beq.n	80144da <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	7a1a      	ldrb	r2, [r3, #8]
 80144c4:	4b7d      	ldr	r3, [pc, #500]	@ (80146bc <tcp_input+0x4c8>)
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80144cc:	3301      	adds	r3, #1
 80144ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d002      	beq.n	80144da <tcp_input+0x2e6>
      prev = pcb;
 80144d4:	69bb      	ldr	r3, [r7, #24]
 80144d6:	61fb      	str	r3, [r7, #28]
      continue;
 80144d8:	e044      	b.n	8014564 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	8b1a      	ldrh	r2, [r3, #24]
 80144de:	4b78      	ldr	r3, [pc, #480]	@ (80146c0 <tcp_input+0x4cc>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	881b      	ldrh	r3, [r3, #0]
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d13a      	bne.n	8014560 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 80144ea:	69bb      	ldr	r3, [r7, #24]
 80144ec:	8ada      	ldrh	r2, [r3, #22]
 80144ee:	4b74      	ldr	r3, [pc, #464]	@ (80146c0 <tcp_input+0x4cc>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	885b      	ldrh	r3, [r3, #2]
 80144f4:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d132      	bne.n	8014560 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	685a      	ldr	r2, [r3, #4]
 80144fe:	4b6f      	ldr	r3, [pc, #444]	@ (80146bc <tcp_input+0x4c8>)
 8014500:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014502:	429a      	cmp	r2, r3
 8014504:	d12c      	bne.n	8014560 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	4b6c      	ldr	r3, [pc, #432]	@ (80146bc <tcp_input+0x4c8>)
 801450c:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801450e:	429a      	cmp	r2, r3
 8014510:	d126      	bne.n	8014560 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	68db      	ldr	r3, [r3, #12]
 8014516:	69ba      	ldr	r2, [r7, #24]
 8014518:	429a      	cmp	r2, r3
 801451a:	d106      	bne.n	801452a <tcp_input+0x336>
 801451c:	4b62      	ldr	r3, [pc, #392]	@ (80146a8 <tcp_input+0x4b4>)
 801451e:	f240 120d 	movw	r2, #269	@ 0x10d
 8014522:	4968      	ldr	r1, [pc, #416]	@ (80146c4 <tcp_input+0x4d0>)
 8014524:	4862      	ldr	r0, [pc, #392]	@ (80146b0 <tcp_input+0x4bc>)
 8014526:	f00a fba5 	bl	801ec74 <iprintf>
      if (prev != NULL) {
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d00a      	beq.n	8014546 <tcp_input+0x352>
        prev->next = pcb->next;
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	68da      	ldr	r2, [r3, #12]
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014538:	4b63      	ldr	r3, [pc, #396]	@ (80146c8 <tcp_input+0x4d4>)
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	69bb      	ldr	r3, [r7, #24]
 801453e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014540:	4a61      	ldr	r2, [pc, #388]	@ (80146c8 <tcp_input+0x4d4>)
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014546:	69bb      	ldr	r3, [r7, #24]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	69ba      	ldr	r2, [r7, #24]
 801454c:	429a      	cmp	r2, r3
 801454e:	d110      	bne.n	8014572 <tcp_input+0x37e>
 8014550:	4b55      	ldr	r3, [pc, #340]	@ (80146a8 <tcp_input+0x4b4>)
 8014552:	f240 1215 	movw	r2, #277	@ 0x115
 8014556:	495d      	ldr	r1, [pc, #372]	@ (80146cc <tcp_input+0x4d8>)
 8014558:	4855      	ldr	r0, [pc, #340]	@ (80146b0 <tcp_input+0x4bc>)
 801455a:	f00a fb8b 	bl	801ec74 <iprintf>
      break;
 801455e:	e008      	b.n	8014572 <tcp_input+0x37e>
    }
    prev = pcb;
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014564:	69bb      	ldr	r3, [r7, #24]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	61bb      	str	r3, [r7, #24]
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d185      	bne.n	801447c <tcp_input+0x288>
 8014570:	e000      	b.n	8014574 <tcp_input+0x380>
      break;
 8014572:	bf00      	nop
  }

  if (pcb == NULL) {
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	2b00      	cmp	r3, #0
 8014578:	f040 80b0 	bne.w	80146dc <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801457c:	4b54      	ldr	r3, [pc, #336]	@ (80146d0 <tcp_input+0x4dc>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	61bb      	str	r3, [r7, #24]
 8014582:	e03f      	b.n	8014604 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014584:	69bb      	ldr	r3, [r7, #24]
 8014586:	7d1b      	ldrb	r3, [r3, #20]
 8014588:	2b0a      	cmp	r3, #10
 801458a:	d006      	beq.n	801459a <tcp_input+0x3a6>
 801458c:	4b46      	ldr	r3, [pc, #280]	@ (80146a8 <tcp_input+0x4b4>)
 801458e:	f240 121f 	movw	r2, #287	@ 0x11f
 8014592:	4950      	ldr	r1, [pc, #320]	@ (80146d4 <tcp_input+0x4e0>)
 8014594:	4846      	ldr	r0, [pc, #280]	@ (80146b0 <tcp_input+0x4bc>)
 8014596:	f00a fb6d 	bl	801ec74 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	7a1b      	ldrb	r3, [r3, #8]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d009      	beq.n	80145b6 <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	7a1a      	ldrb	r2, [r3, #8]
 80145a6:	4b45      	ldr	r3, [pc, #276]	@ (80146bc <tcp_input+0x4c8>)
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80145ae:	3301      	adds	r3, #1
 80145b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d122      	bne.n	80145fc <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	8b1a      	ldrh	r2, [r3, #24]
 80145ba:	4b41      	ldr	r3, [pc, #260]	@ (80146c0 <tcp_input+0x4cc>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d11b      	bne.n	80145fe <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	8ada      	ldrh	r2, [r3, #22]
 80145ca:	4b3d      	ldr	r3, [pc, #244]	@ (80146c0 <tcp_input+0x4cc>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	885b      	ldrh	r3, [r3, #2]
 80145d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d113      	bne.n	80145fe <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	685a      	ldr	r2, [r3, #4]
 80145da:	4b38      	ldr	r3, [pc, #224]	@ (80146bc <tcp_input+0x4c8>)
 80145dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80145de:	429a      	cmp	r2, r3
 80145e0:	d10d      	bne.n	80145fe <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	681a      	ldr	r2, [r3, #0]
 80145e6:	4b35      	ldr	r3, [pc, #212]	@ (80146bc <tcp_input+0x4c8>)
 80145e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d107      	bne.n	80145fe <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80145ee:	69b8      	ldr	r0, [r7, #24]
 80145f0:	f000 fb5e 	bl	8014cb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7fd fc85 	bl	8011f04 <pbuf_free>
        return;
 80145fa:	e205      	b.n	8014a08 <tcp_input+0x814>
        continue;
 80145fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	61bb      	str	r3, [r7, #24]
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1bc      	bne.n	8014584 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801460a:	2300      	movs	r3, #0
 801460c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801460e:	4b32      	ldr	r3, [pc, #200]	@ (80146d8 <tcp_input+0x4e4>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	617b      	str	r3, [r7, #20]
 8014614:	e02a      	b.n	801466c <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	7a1b      	ldrb	r3, [r3, #8]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d00c      	beq.n	8014638 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	7a1a      	ldrb	r2, [r3, #8]
 8014622:	4b26      	ldr	r3, [pc, #152]	@ (80146bc <tcp_input+0x4c8>)
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801462a:	3301      	adds	r3, #1
 801462c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801462e:	429a      	cmp	r2, r3
 8014630:	d002      	beq.n	8014638 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	61fb      	str	r3, [r7, #28]
        continue;
 8014636:	e016      	b.n	8014666 <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	8ada      	ldrh	r2, [r3, #22]
 801463c:	4b20      	ldr	r3, [pc, #128]	@ (80146c0 <tcp_input+0x4cc>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	885b      	ldrh	r3, [r3, #2]
 8014642:	b29b      	uxth	r3, r3
 8014644:	429a      	cmp	r2, r3
 8014646:	d10c      	bne.n	8014662 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	4b1b      	ldr	r3, [pc, #108]	@ (80146bc <tcp_input+0x4c8>)
 801464e:	695b      	ldr	r3, [r3, #20]
 8014650:	429a      	cmp	r2, r3
 8014652:	d00f      	beq.n	8014674 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00d      	beq.n	8014676 <tcp_input+0x482>
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d009      	beq.n	8014676 <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	617b      	str	r3, [r7, #20]
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d1d1      	bne.n	8014616 <tcp_input+0x422>
 8014672:	e000      	b.n	8014676 <tcp_input+0x482>
            break;
 8014674:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d02f      	beq.n	80146dc <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00a      	beq.n	8014698 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	68da      	ldr	r2, [r3, #12]
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801468a:	4b13      	ldr	r3, [pc, #76]	@ (80146d8 <tcp_input+0x4e4>)
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014692:	4a11      	ldr	r2, [pc, #68]	@ (80146d8 <tcp_input+0x4e4>)
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014698:	6978      	ldr	r0, [r7, #20]
 801469a:	f000 fa0b 	bl	8014ab4 <tcp_listen_input>
      }
      pbuf_free(p);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f7fd fc30 	bl	8011f04 <pbuf_free>
      return;
 80146a4:	e1b0      	b.n	8014a08 <tcp_input+0x814>
 80146a6:	bf00      	nop
 80146a8:	0802388c 	.word	0x0802388c
 80146ac:	0802393c 	.word	0x0802393c
 80146b0:	080238d8 	.word	0x080238d8
 80146b4:	08023964 	.word	0x08023964
 80146b8:	08023990 	.word	0x08023990
 80146bc:	2000a348 	.word	0x2000a348
 80146c0:	20013de8 	.word	0x20013de8
 80146c4:	080239b8 	.word	0x080239b8
 80146c8:	20013dc8 	.word	0x20013dc8
 80146cc:	080239e4 	.word	0x080239e4
 80146d0:	20013dcc 	.word	0x20013dcc
 80146d4:	08023a10 	.word	0x08023a10
 80146d8:	20013dc4 	.word	0x20013dc4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	f000 8158 	beq.w	8014994 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80146e4:	4b95      	ldr	r3, [pc, #596]	@ (801493c <tcp_input+0x748>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	891a      	ldrh	r2, [r3, #8]
 80146ee:	4b93      	ldr	r3, [pc, #588]	@ (801493c <tcp_input+0x748>)
 80146f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80146f2:	4a92      	ldr	r2, [pc, #584]	@ (801493c <tcp_input+0x748>)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80146f8:	4b91      	ldr	r3, [pc, #580]	@ (8014940 <tcp_input+0x74c>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	4a8f      	ldr	r2, [pc, #572]	@ (801493c <tcp_input+0x748>)
 80146fe:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8014700:	4b90      	ldr	r3, [pc, #576]	@ (8014944 <tcp_input+0x750>)
 8014702:	2200      	movs	r2, #0
 8014704:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014706:	4b90      	ldr	r3, [pc, #576]	@ (8014948 <tcp_input+0x754>)
 8014708:	2200      	movs	r2, #0
 801470a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801470c:	4b8f      	ldr	r3, [pc, #572]	@ (801494c <tcp_input+0x758>)
 801470e:	2200      	movs	r2, #0
 8014710:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014712:	4b8f      	ldr	r3, [pc, #572]	@ (8014950 <tcp_input+0x75c>)
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	f003 0308 	and.w	r3, r3, #8
 801471a:	2b00      	cmp	r3, #0
 801471c:	d006      	beq.n	801472c <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	7b5b      	ldrb	r3, [r3, #13]
 8014722:	f043 0301 	orr.w	r3, r3, #1
 8014726:	b2da      	uxtb	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014730:	2b00      	cmp	r3, #0
 8014732:	d017      	beq.n	8014764 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014734:	69b8      	ldr	r0, [r7, #24]
 8014736:	f7ff f8d9 	bl	80138ec <tcp_process_refused_data>
 801473a:	4603      	mov	r3, r0
 801473c:	f113 0f0d 	cmn.w	r3, #13
 8014740:	d007      	beq.n	8014752 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014746:	2b00      	cmp	r3, #0
 8014748:	d00c      	beq.n	8014764 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801474a:	4b82      	ldr	r3, [pc, #520]	@ (8014954 <tcp_input+0x760>)
 801474c:	881b      	ldrh	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d008      	beq.n	8014764 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014752:	69bb      	ldr	r3, [r7, #24]
 8014754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014756:	2b00      	cmp	r3, #0
 8014758:	f040 80e4 	bne.w	8014924 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801475c:	69b8      	ldr	r0, [r7, #24]
 801475e:	f003 fe93 	bl	8018488 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014762:	e0df      	b.n	8014924 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8014764:	4a7c      	ldr	r2, [pc, #496]	@ (8014958 <tcp_input+0x764>)
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801476a:	69b8      	ldr	r0, [r7, #24]
 801476c:	f000 fb1a 	bl	8014da4 <tcp_process>
 8014770:	4603      	mov	r3, r0
 8014772:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014778:	f113 0f0d 	cmn.w	r3, #13
 801477c:	f000 80d4 	beq.w	8014928 <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8014780:	4b71      	ldr	r3, [pc, #452]	@ (8014948 <tcp_input+0x754>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	f003 0308 	and.w	r3, r3, #8
 8014788:	2b00      	cmp	r3, #0
 801478a:	d015      	beq.n	80147b8 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014792:	2b00      	cmp	r3, #0
 8014794:	d008      	beq.n	80147a8 <tcp_input+0x5b4>
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801479c:	69ba      	ldr	r2, [r7, #24]
 801479e:	6912      	ldr	r2, [r2, #16]
 80147a0:	f06f 010d 	mvn.w	r1, #13
 80147a4:	4610      	mov	r0, r2
 80147a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80147a8:	69b9      	ldr	r1, [r7, #24]
 80147aa:	486c      	ldr	r0, [pc, #432]	@ (801495c <tcp_input+0x768>)
 80147ac:	f7ff fbaa 	bl	8013f04 <tcp_pcb_remove>
        tcp_free(pcb);
 80147b0:	69b8      	ldr	r0, [r7, #24]
 80147b2:	f7fd fff7 	bl	80127a4 <tcp_free>
 80147b6:	e0da      	b.n	801496e <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 80147b8:	2300      	movs	r3, #0
 80147ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80147bc:	4b63      	ldr	r3, [pc, #396]	@ (801494c <tcp_input+0x758>)
 80147be:	881b      	ldrh	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d01d      	beq.n	8014800 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80147c4:	4b61      	ldr	r3, [pc, #388]	@ (801494c <tcp_input+0x758>)
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d00a      	beq.n	80147ea <tcp_input+0x5f6>
 80147d4:	69bb      	ldr	r3, [r7, #24]
 80147d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80147da:	69ba      	ldr	r2, [r7, #24]
 80147dc:	6910      	ldr	r0, [r2, #16]
 80147de:	897a      	ldrh	r2, [r7, #10]
 80147e0:	69b9      	ldr	r1, [r7, #24]
 80147e2:	4798      	blx	r3
 80147e4:	4603      	mov	r3, r0
 80147e6:	74fb      	strb	r3, [r7, #19]
 80147e8:	e001      	b.n	80147ee <tcp_input+0x5fa>
 80147ea:	2300      	movs	r3, #0
 80147ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80147ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147f2:	f113 0f0d 	cmn.w	r3, #13
 80147f6:	f000 8099 	beq.w	801492c <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 80147fa:	4b54      	ldr	r3, [pc, #336]	@ (801494c <tcp_input+0x758>)
 80147fc:	2200      	movs	r2, #0
 80147fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014800:	69b8      	ldr	r0, [r7, #24]
 8014802:	f000 f917 	bl	8014a34 <tcp_input_delayed_close>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	f040 8091 	bne.w	8014930 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801480e:	4b4d      	ldr	r3, [pc, #308]	@ (8014944 <tcp_input+0x750>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d041      	beq.n	801489a <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801481a:	2b00      	cmp	r3, #0
 801481c:	d006      	beq.n	801482c <tcp_input+0x638>
 801481e:	4b50      	ldr	r3, [pc, #320]	@ (8014960 <tcp_input+0x76c>)
 8014820:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014824:	494f      	ldr	r1, [pc, #316]	@ (8014964 <tcp_input+0x770>)
 8014826:	4850      	ldr	r0, [pc, #320]	@ (8014968 <tcp_input+0x774>)
 8014828:	f00a fa24 	bl	801ec74 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	8b5b      	ldrh	r3, [r3, #26]
 8014830:	f003 0310 	and.w	r3, r3, #16
 8014834:	2b00      	cmp	r3, #0
 8014836:	d008      	beq.n	801484a <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014838:	4b42      	ldr	r3, [pc, #264]	@ (8014944 <tcp_input+0x750>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	f7fd fb61 	bl	8011f04 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014842:	69b8      	ldr	r0, [r7, #24]
 8014844:	f7fe fa96 	bl	8012d74 <tcp_abort>
            goto aborted;
 8014848:	e091      	b.n	801496e <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801484a:	69bb      	ldr	r3, [r7, #24]
 801484c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014850:	2b00      	cmp	r3, #0
 8014852:	d00c      	beq.n	801486e <tcp_input+0x67a>
 8014854:	69bb      	ldr	r3, [r7, #24]
 8014856:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	6918      	ldr	r0, [r3, #16]
 801485e:	4b39      	ldr	r3, [pc, #228]	@ (8014944 <tcp_input+0x750>)
 8014860:	681a      	ldr	r2, [r3, #0]
 8014862:	2300      	movs	r3, #0
 8014864:	69b9      	ldr	r1, [r7, #24]
 8014866:	47a0      	blx	r4
 8014868:	4603      	mov	r3, r0
 801486a:	74fb      	strb	r3, [r7, #19]
 801486c:	e008      	b.n	8014880 <tcp_input+0x68c>
 801486e:	4b35      	ldr	r3, [pc, #212]	@ (8014944 <tcp_input+0x750>)
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	2300      	movs	r3, #0
 8014874:	69b9      	ldr	r1, [r7, #24]
 8014876:	2000      	movs	r0, #0
 8014878:	f7ff f910 	bl	8013a9c <tcp_recv_null>
 801487c:	4603      	mov	r3, r0
 801487e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014884:	f113 0f0d 	cmn.w	r3, #13
 8014888:	d054      	beq.n	8014934 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801488a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d003      	beq.n	801489a <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014892:	4b2c      	ldr	r3, [pc, #176]	@ (8014944 <tcp_input+0x750>)
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801489a:	4b2b      	ldr	r3, [pc, #172]	@ (8014948 <tcp_input+0x754>)
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	f003 0320 	and.w	r3, r3, #32
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d031      	beq.n	801490a <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d009      	beq.n	80148c2 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80148b2:	7b5a      	ldrb	r2, [r3, #13]
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80148b8:	f042 0220 	orr.w	r2, r2, #32
 80148bc:	b2d2      	uxtb	r2, r2
 80148be:	735a      	strb	r2, [r3, #13]
 80148c0:	e023      	b.n	801490a <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148c6:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80148ca:	4293      	cmp	r3, r2
 80148cc:	d005      	beq.n	80148da <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148d2:	3301      	adds	r3, #1
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d00b      	beq.n	80148fc <tcp_input+0x708>
 80148e4:	69bb      	ldr	r3, [r7, #24]
 80148e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	6918      	ldr	r0, [r3, #16]
 80148ee:	2300      	movs	r3, #0
 80148f0:	2200      	movs	r2, #0
 80148f2:	69b9      	ldr	r1, [r7, #24]
 80148f4:	47a0      	blx	r4
 80148f6:	4603      	mov	r3, r0
 80148f8:	74fb      	strb	r3, [r7, #19]
 80148fa:	e001      	b.n	8014900 <tcp_input+0x70c>
 80148fc:	2300      	movs	r3, #0
 80148fe:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014900:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014904:	f113 0f0d 	cmn.w	r3, #13
 8014908:	d016      	beq.n	8014938 <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801490a:	4b13      	ldr	r3, [pc, #76]	@ (8014958 <tcp_input+0x764>)
 801490c:	2200      	movs	r2, #0
 801490e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014910:	69b8      	ldr	r0, [r7, #24]
 8014912:	f000 f88f 	bl	8014a34 <tcp_input_delayed_close>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d127      	bne.n	801496c <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801491c:	69b8      	ldr	r0, [r7, #24]
 801491e:	f002 ff7f 	bl	8017820 <tcp_output>
 8014922:	e024      	b.n	801496e <tcp_input+0x77a>
        goto aborted;
 8014924:	bf00      	nop
 8014926:	e022      	b.n	801496e <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014928:	bf00      	nop
 801492a:	e020      	b.n	801496e <tcp_input+0x77a>
              goto aborted;
 801492c:	bf00      	nop
 801492e:	e01e      	b.n	801496e <tcp_input+0x77a>
          goto aborted;
 8014930:	bf00      	nop
 8014932:	e01c      	b.n	801496e <tcp_input+0x77a>
            goto aborted;
 8014934:	bf00      	nop
 8014936:	e01a      	b.n	801496e <tcp_input+0x77a>
              goto aborted;
 8014938:	bf00      	nop
 801493a:	e018      	b.n	801496e <tcp_input+0x77a>
 801493c:	20013dd4 	.word	0x20013dd4
 8014940:	20013de8 	.word	0x20013de8
 8014944:	20013e08 	.word	0x20013e08
 8014948:	20013e05 	.word	0x20013e05
 801494c:	20013e00 	.word	0x20013e00
 8014950:	20013e04 	.word	0x20013e04
 8014954:	20013e02 	.word	0x20013e02
 8014958:	20013e0c 	.word	0x20013e0c
 801495c:	20013dc8 	.word	0x20013dc8
 8014960:	0802388c 	.word	0x0802388c
 8014964:	08023a40 	.word	0x08023a40
 8014968:	080238d8 	.word	0x080238d8
          goto aborted;
 801496c:	bf00      	nop
    tcp_input_pcb = NULL;
 801496e:	4b28      	ldr	r3, [pc, #160]	@ (8014a10 <tcp_input+0x81c>)
 8014970:	2200      	movs	r2, #0
 8014972:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014974:	4b27      	ldr	r3, [pc, #156]	@ (8014a14 <tcp_input+0x820>)
 8014976:	2200      	movs	r2, #0
 8014978:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801497a:	4b27      	ldr	r3, [pc, #156]	@ (8014a18 <tcp_input+0x824>)
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d041      	beq.n	8014a06 <tcp_input+0x812>
      pbuf_free(inseg.p);
 8014982:	4b25      	ldr	r3, [pc, #148]	@ (8014a18 <tcp_input+0x824>)
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	4618      	mov	r0, r3
 8014988:	f7fd fabc 	bl	8011f04 <pbuf_free>
      inseg.p = NULL;
 801498c:	4b22      	ldr	r3, [pc, #136]	@ (8014a18 <tcp_input+0x824>)
 801498e:	2200      	movs	r2, #0
 8014990:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014992:	e038      	b.n	8014a06 <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014994:	4b21      	ldr	r3, [pc, #132]	@ (8014a1c <tcp_input+0x828>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	899b      	ldrh	r3, [r3, #12]
 801499a:	b29b      	uxth	r3, r3
 801499c:	4618      	mov	r0, r3
 801499e:	f7fb fd8f 	bl	80104c0 <lwip_htons>
 80149a2:	4603      	mov	r3, r0
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	f003 0304 	and.w	r3, r3, #4
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d118      	bne.n	80149e0 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149ae:	4b1c      	ldr	r3, [pc, #112]	@ (8014a20 <tcp_input+0x82c>)
 80149b0:	6819      	ldr	r1, [r3, #0]
 80149b2:	4b1c      	ldr	r3, [pc, #112]	@ (8014a24 <tcp_input+0x830>)
 80149b4:	881b      	ldrh	r3, [r3, #0]
 80149b6:	461a      	mov	r2, r3
 80149b8:	4b1b      	ldr	r3, [pc, #108]	@ (8014a28 <tcp_input+0x834>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149be:	4b17      	ldr	r3, [pc, #92]	@ (8014a1c <tcp_input+0x828>)
 80149c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149c2:	885b      	ldrh	r3, [r3, #2]
 80149c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149c6:	4a15      	ldr	r2, [pc, #84]	@ (8014a1c <tcp_input+0x828>)
 80149c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149ca:	8812      	ldrh	r2, [r2, #0]
 80149cc:	b292      	uxth	r2, r2
 80149ce:	9202      	str	r2, [sp, #8]
 80149d0:	9301      	str	r3, [sp, #4]
 80149d2:	4b16      	ldr	r3, [pc, #88]	@ (8014a2c <tcp_input+0x838>)
 80149d4:	9300      	str	r3, [sp, #0]
 80149d6:	4b16      	ldr	r3, [pc, #88]	@ (8014a30 <tcp_input+0x83c>)
 80149d8:	4602      	mov	r2, r0
 80149da:	2000      	movs	r0, #0
 80149dc:	f003 fd02 	bl	80183e4 <tcp_rst>
    pbuf_free(p);
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f7fd fa8f 	bl	8011f04 <pbuf_free>
  return;
 80149e6:	e00e      	b.n	8014a06 <tcp_input+0x812>
    goto dropped;
 80149e8:	bf00      	nop
 80149ea:	e008      	b.n	80149fe <tcp_input+0x80a>
    goto dropped;
 80149ec:	bf00      	nop
 80149ee:	e006      	b.n	80149fe <tcp_input+0x80a>
      goto dropped;
 80149f0:	bf00      	nop
 80149f2:	e004      	b.n	80149fe <tcp_input+0x80a>
    goto dropped;
 80149f4:	bf00      	nop
 80149f6:	e002      	b.n	80149fe <tcp_input+0x80a>
      goto dropped;
 80149f8:	bf00      	nop
 80149fa:	e000      	b.n	80149fe <tcp_input+0x80a>
      goto dropped;
 80149fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f7fd fa80 	bl	8011f04 <pbuf_free>
 8014a04:	e000      	b.n	8014a08 <tcp_input+0x814>
  return;
 8014a06:	bf00      	nop
}
 8014a08:	3724      	adds	r7, #36	@ 0x24
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd90      	pop	{r4, r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	20013e0c 	.word	0x20013e0c
 8014a14:	20013e08 	.word	0x20013e08
 8014a18:	20013dd4 	.word	0x20013dd4
 8014a1c:	20013de8 	.word	0x20013de8
 8014a20:	20013dfc 	.word	0x20013dfc
 8014a24:	20013e02 	.word	0x20013e02
 8014a28:	20013df8 	.word	0x20013df8
 8014a2c:	2000a358 	.word	0x2000a358
 8014a30:	2000a35c 	.word	0x2000a35c

08014a34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d106      	bne.n	8014a50 <tcp_input_delayed_close+0x1c>
 8014a42:	4b17      	ldr	r3, [pc, #92]	@ (8014aa0 <tcp_input_delayed_close+0x6c>)
 8014a44:	f240 225a 	movw	r2, #602	@ 0x25a
 8014a48:	4916      	ldr	r1, [pc, #88]	@ (8014aa4 <tcp_input_delayed_close+0x70>)
 8014a4a:	4817      	ldr	r0, [pc, #92]	@ (8014aa8 <tcp_input_delayed_close+0x74>)
 8014a4c:	f00a f912 	bl	801ec74 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014a50:	4b16      	ldr	r3, [pc, #88]	@ (8014aac <tcp_input_delayed_close+0x78>)
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	f003 0310 	and.w	r3, r3, #16
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d01c      	beq.n	8014a96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	8b5b      	ldrh	r3, [r3, #26]
 8014a60:	f003 0310 	and.w	r3, r3, #16
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d10d      	bne.n	8014a84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d008      	beq.n	8014a84 <tcp_input_delayed_close+0x50>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	6912      	ldr	r2, [r2, #16]
 8014a7c:	f06f 010e 	mvn.w	r1, #14
 8014a80:	4610      	mov	r0, r2
 8014a82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014a84:	6879      	ldr	r1, [r7, #4]
 8014a86:	480a      	ldr	r0, [pc, #40]	@ (8014ab0 <tcp_input_delayed_close+0x7c>)
 8014a88:	f7ff fa3c 	bl	8013f04 <tcp_pcb_remove>
    tcp_free(pcb);
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f7fd fe89 	bl	80127a4 <tcp_free>
    return 1;
 8014a92:	2301      	movs	r3, #1
 8014a94:	e000      	b.n	8014a98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014a96:	2300      	movs	r3, #0
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3708      	adds	r7, #8
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	0802388c 	.word	0x0802388c
 8014aa4:	08023a5c 	.word	0x08023a5c
 8014aa8:	080238d8 	.word	0x080238d8
 8014aac:	20013e05 	.word	0x20013e05
 8014ab0:	20013dc8 	.word	0x20013dc8

08014ab4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014ab4:	b590      	push	{r4, r7, lr}
 8014ab6:	b08b      	sub	sp, #44	@ 0x2c
 8014ab8:	af04      	add	r7, sp, #16
 8014aba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014abc:	4b6f      	ldr	r3, [pc, #444]	@ (8014c7c <tcp_listen_input+0x1c8>)
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	f003 0304 	and.w	r3, r3, #4
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f040 80d2 	bne.w	8014c6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d106      	bne.n	8014ade <tcp_listen_input+0x2a>
 8014ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8014c80 <tcp_listen_input+0x1cc>)
 8014ad2:	f240 2281 	movw	r2, #641	@ 0x281
 8014ad6:	496b      	ldr	r1, [pc, #428]	@ (8014c84 <tcp_listen_input+0x1d0>)
 8014ad8:	486b      	ldr	r0, [pc, #428]	@ (8014c88 <tcp_listen_input+0x1d4>)
 8014ada:	f00a f8cb 	bl	801ec74 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014ade:	4b67      	ldr	r3, [pc, #412]	@ (8014c7c <tcp_listen_input+0x1c8>)
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	f003 0310 	and.w	r3, r3, #16
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d019      	beq.n	8014b1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aea:	4b68      	ldr	r3, [pc, #416]	@ (8014c8c <tcp_listen_input+0x1d8>)
 8014aec:	6819      	ldr	r1, [r3, #0]
 8014aee:	4b68      	ldr	r3, [pc, #416]	@ (8014c90 <tcp_listen_input+0x1dc>)
 8014af0:	881b      	ldrh	r3, [r3, #0]
 8014af2:	461a      	mov	r2, r3
 8014af4:	4b67      	ldr	r3, [pc, #412]	@ (8014c94 <tcp_listen_input+0x1e0>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014afa:	4b67      	ldr	r3, [pc, #412]	@ (8014c98 <tcp_listen_input+0x1e4>)
 8014afc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014afe:	885b      	ldrh	r3, [r3, #2]
 8014b00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b02:	4a65      	ldr	r2, [pc, #404]	@ (8014c98 <tcp_listen_input+0x1e4>)
 8014b04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b06:	8812      	ldrh	r2, [r2, #0]
 8014b08:	b292      	uxth	r2, r2
 8014b0a:	9202      	str	r2, [sp, #8]
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	4b63      	ldr	r3, [pc, #396]	@ (8014c9c <tcp_listen_input+0x1e8>)
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	4b63      	ldr	r3, [pc, #396]	@ (8014ca0 <tcp_listen_input+0x1ec>)
 8014b14:	4602      	mov	r2, r0
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f003 fc64 	bl	80183e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014b1c:	e0a9      	b.n	8014c72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014b1e:	4b57      	ldr	r3, [pc, #348]	@ (8014c7c <tcp_listen_input+0x1c8>)
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	f003 0302 	and.w	r3, r3, #2
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f000 80a3 	beq.w	8014c72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	7d5b      	ldrb	r3, [r3, #21]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff f8d7 	bl	8013ce4 <tcp_alloc>
 8014b36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d111      	bne.n	8014b62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	699b      	ldr	r3, [r3, #24]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d00a      	beq.n	8014b5c <tcp_listen_input+0xa8>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	699b      	ldr	r3, [r3, #24]
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	6910      	ldr	r0, [r2, #16]
 8014b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b52:	2100      	movs	r1, #0
 8014b54:	4798      	blx	r3
 8014b56:	4603      	mov	r3, r0
 8014b58:	73bb      	strb	r3, [r7, #14]
      return;
 8014b5a:	e08b      	b.n	8014c74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014b5c:	23f0      	movs	r3, #240	@ 0xf0
 8014b5e:	73bb      	strb	r3, [r7, #14]
      return;
 8014b60:	e088      	b.n	8014c74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014b62:	4b50      	ldr	r3, [pc, #320]	@ (8014ca4 <tcp_listen_input+0x1f0>)
 8014b64:	695a      	ldr	r2, [r3, #20]
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8014ca4 <tcp_listen_input+0x1f0>)
 8014b6c:	691a      	ldr	r2, [r3, #16]
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	8ada      	ldrh	r2, [r3, #22]
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014b7a:	4b47      	ldr	r3, [pc, #284]	@ (8014c98 <tcp_listen_input+0x1e4>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	b29a      	uxth	r2, r3
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	2203      	movs	r2, #3
 8014b8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014b8c:	4b41      	ldr	r3, [pc, #260]	@ (8014c94 <tcp_listen_input+0x1e0>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	1c5a      	adds	r2, r3, #1
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014b9e:	6978      	ldr	r0, [r7, #20]
 8014ba0:	f7ff fa44 	bl	801402c <tcp_next_iss>
 8014ba4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	693a      	ldr	r2, [r7, #16]
 8014baa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	693a      	ldr	r2, [r7, #16]
 8014bb0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	693a      	ldr	r2, [r7, #16]
 8014bb6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	693a      	ldr	r2, [r7, #16]
 8014bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014bbe:	4b35      	ldr	r3, [pc, #212]	@ (8014c94 <tcp_listen_input+0x1e0>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	1e5a      	subs	r2, r3, #1
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	691a      	ldr	r2, [r3, #16]
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	7a5b      	ldrb	r3, [r3, #9]
 8014bda:	f003 030c 	and.w	r3, r3, #12
 8014bde:	b2da      	uxtb	r2, r3
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	7a1a      	ldrb	r2, [r3, #8]
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014bec:	4b2e      	ldr	r3, [pc, #184]	@ (8014ca8 <tcp_listen_input+0x1f4>)
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	60da      	str	r2, [r3, #12]
 8014bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8014ca8 <tcp_listen_input+0x1f4>)
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	6013      	str	r3, [r2, #0]
 8014bfa:	f003 fdb5 	bl	8018768 <tcp_timer_needed>
 8014bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8014cac <tcp_listen_input+0x1f8>)
 8014c00:	2201      	movs	r2, #1
 8014c02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014c04:	6978      	ldr	r0, [r7, #20]
 8014c06:	f001 fd8b 	bl	8016720 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014c0a:	4b23      	ldr	r3, [pc, #140]	@ (8014c98 <tcp_listen_input+0x1e4>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	89db      	ldrh	r3, [r3, #14]
 8014c10:	b29a      	uxth	r2, r3
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f007 fcab 	bl	801c588 <ip4_route>
 8014c32:	4601      	mov	r1, r0
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	3304      	adds	r3, #4
 8014c38:	461a      	mov	r2, r3
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f7ff fa1c 	bl	8014078 <tcp_eff_send_mss_netif>
 8014c40:	4603      	mov	r3, r0
 8014c42:	461a      	mov	r2, r3
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014c48:	2112      	movs	r1, #18
 8014c4a:	6978      	ldr	r0, [r7, #20]
 8014c4c:	f002 fcfa 	bl	8017644 <tcp_enqueue_flags>
 8014c50:	4603      	mov	r3, r0
 8014c52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d004      	beq.n	8014c66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	6978      	ldr	r0, [r7, #20]
 8014c60:	f7fd ffca 	bl	8012bf8 <tcp_abandon>
      return;
 8014c64:	e006      	b.n	8014c74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014c66:	6978      	ldr	r0, [r7, #20]
 8014c68:	f002 fdda 	bl	8017820 <tcp_output>
  return;
 8014c6c:	e001      	b.n	8014c72 <tcp_listen_input+0x1be>
    return;
 8014c6e:	bf00      	nop
 8014c70:	e000      	b.n	8014c74 <tcp_listen_input+0x1c0>
  return;
 8014c72:	bf00      	nop
}
 8014c74:	371c      	adds	r7, #28
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd90      	pop	{r4, r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20013e04 	.word	0x20013e04
 8014c80:	0802388c 	.word	0x0802388c
 8014c84:	08023a84 	.word	0x08023a84
 8014c88:	080238d8 	.word	0x080238d8
 8014c8c:	20013dfc 	.word	0x20013dfc
 8014c90:	20013e02 	.word	0x20013e02
 8014c94:	20013df8 	.word	0x20013df8
 8014c98:	20013de8 	.word	0x20013de8
 8014c9c:	2000a358 	.word	0x2000a358
 8014ca0:	2000a35c 	.word	0x2000a35c
 8014ca4:	2000a348 	.word	0x2000a348
 8014ca8:	20013dc8 	.word	0x20013dc8
 8014cac:	20013dd0 	.word	0x20013dd0

08014cb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b086      	sub	sp, #24
 8014cb4:	af04      	add	r7, sp, #16
 8014cb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8014d78 <tcp_timewait_input+0xc8>)
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	f003 0304 	and.w	r3, r3, #4
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d153      	bne.n	8014d6c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d106      	bne.n	8014cd8 <tcp_timewait_input+0x28>
 8014cca:	4b2c      	ldr	r3, [pc, #176]	@ (8014d7c <tcp_timewait_input+0xcc>)
 8014ccc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014cd0:	492b      	ldr	r1, [pc, #172]	@ (8014d80 <tcp_timewait_input+0xd0>)
 8014cd2:	482c      	ldr	r0, [pc, #176]	@ (8014d84 <tcp_timewait_input+0xd4>)
 8014cd4:	f009 ffce 	bl	801ec74 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014cd8:	4b27      	ldr	r3, [pc, #156]	@ (8014d78 <tcp_timewait_input+0xc8>)
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	f003 0302 	and.w	r3, r3, #2
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d02a      	beq.n	8014d3a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014ce4:	4b28      	ldr	r3, [pc, #160]	@ (8014d88 <tcp_timewait_input+0xd8>)
 8014ce6:	681a      	ldr	r2, [r3, #0]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	db2d      	blt.n	8014d4e <tcp_timewait_input+0x9e>
 8014cf2:	4b25      	ldr	r3, [pc, #148]	@ (8014d88 <tcp_timewait_input+0xd8>)
 8014cf4:	681a      	ldr	r2, [r3, #0]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cfa:	6879      	ldr	r1, [r7, #4]
 8014cfc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014cfe:	440b      	add	r3, r1
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	dc23      	bgt.n	8014d4e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d06:	4b21      	ldr	r3, [pc, #132]	@ (8014d8c <tcp_timewait_input+0xdc>)
 8014d08:	6819      	ldr	r1, [r3, #0]
 8014d0a:	4b21      	ldr	r3, [pc, #132]	@ (8014d90 <tcp_timewait_input+0xe0>)
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	461a      	mov	r2, r3
 8014d10:	4b1d      	ldr	r3, [pc, #116]	@ (8014d88 <tcp_timewait_input+0xd8>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d16:	4b1f      	ldr	r3, [pc, #124]	@ (8014d94 <tcp_timewait_input+0xe4>)
 8014d18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d1a:	885b      	ldrh	r3, [r3, #2]
 8014d1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8014d94 <tcp_timewait_input+0xe4>)
 8014d20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d22:	8812      	ldrh	r2, [r2, #0]
 8014d24:	b292      	uxth	r2, r2
 8014d26:	9202      	str	r2, [sp, #8]
 8014d28:	9301      	str	r3, [sp, #4]
 8014d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8014d98 <tcp_timewait_input+0xe8>)
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8014d9c <tcp_timewait_input+0xec>)
 8014d30:	4602      	mov	r2, r0
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f003 fb56 	bl	80183e4 <tcp_rst>
      return;
 8014d38:	e01b      	b.n	8014d72 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8014d78 <tcp_timewait_input+0xc8>)
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	f003 0301 	and.w	r3, r3, #1
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d003      	beq.n	8014d4e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014d46:	4b16      	ldr	r3, [pc, #88]	@ (8014da0 <tcp_timewait_input+0xf0>)
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014d4e:	4b10      	ldr	r3, [pc, #64]	@ (8014d90 <tcp_timewait_input+0xe0>)
 8014d50:	881b      	ldrh	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d00c      	beq.n	8014d70 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	8b5b      	ldrh	r3, [r3, #26]
 8014d5a:	f043 0302 	orr.w	r3, r3, #2
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f002 fd5b 	bl	8017820 <tcp_output>
  }
  return;
 8014d6a:	e001      	b.n	8014d70 <tcp_timewait_input+0xc0>
    return;
 8014d6c:	bf00      	nop
 8014d6e:	e000      	b.n	8014d72 <tcp_timewait_input+0xc2>
  return;
 8014d70:	bf00      	nop
}
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	20013e04 	.word	0x20013e04
 8014d7c:	0802388c 	.word	0x0802388c
 8014d80:	08023aa4 	.word	0x08023aa4
 8014d84:	080238d8 	.word	0x080238d8
 8014d88:	20013df8 	.word	0x20013df8
 8014d8c:	20013dfc 	.word	0x20013dfc
 8014d90:	20013e02 	.word	0x20013e02
 8014d94:	20013de8 	.word	0x20013de8
 8014d98:	2000a358 	.word	0x2000a358
 8014d9c:	2000a35c 	.word	0x2000a35c
 8014da0:	20013dbc 	.word	0x20013dbc

08014da4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014da4:	b590      	push	{r4, r7, lr}
 8014da6:	b08d      	sub	sp, #52	@ 0x34
 8014da8:	af04      	add	r7, sp, #16
 8014daa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014dac:	2300      	movs	r3, #0
 8014dae:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8014db0:	2300      	movs	r3, #0
 8014db2:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d106      	bne.n	8014dc8 <tcp_process+0x24>
 8014dba:	4b9d      	ldr	r3, [pc, #628]	@ (8015030 <tcp_process+0x28c>)
 8014dbc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014dc0:	499c      	ldr	r1, [pc, #624]	@ (8015034 <tcp_process+0x290>)
 8014dc2:	489d      	ldr	r0, [pc, #628]	@ (8015038 <tcp_process+0x294>)
 8014dc4:	f009 ff56 	bl	801ec74 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014dc8:	4b9c      	ldr	r3, [pc, #624]	@ (801503c <tcp_process+0x298>)
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	f003 0304 	and.w	r3, r3, #4
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d04e      	beq.n	8014e72 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	7d1b      	ldrb	r3, [r3, #20]
 8014dd8:	2b02      	cmp	r3, #2
 8014dda:	d108      	bne.n	8014dee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014de0:	4b97      	ldr	r3, [pc, #604]	@ (8015040 <tcp_process+0x29c>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d123      	bne.n	8014e30 <tcp_process+0x8c>
        acceptable = 1;
 8014de8:	2301      	movs	r3, #1
 8014dea:	77fb      	strb	r3, [r7, #31]
 8014dec:	e020      	b.n	8014e30 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014df2:	4b94      	ldr	r3, [pc, #592]	@ (8015044 <tcp_process+0x2a0>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d102      	bne.n	8014e00 <tcp_process+0x5c>
        acceptable = 1;
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	77fb      	strb	r3, [r7, #31]
 8014dfe:	e017      	b.n	8014e30 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014e00:	4b90      	ldr	r3, [pc, #576]	@ (8015044 <tcp_process+0x2a0>)
 8014e02:	681a      	ldr	r2, [r3, #0]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e08:	1ad3      	subs	r3, r2, r3
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	db10      	blt.n	8014e30 <tcp_process+0x8c>
 8014e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8015044 <tcp_process+0x2a0>)
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e16:	6879      	ldr	r1, [r7, #4]
 8014e18:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014e1a:	440b      	add	r3, r1
 8014e1c:	1ad3      	subs	r3, r2, r3
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	dc06      	bgt.n	8014e30 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	8b5b      	ldrh	r3, [r3, #26]
 8014e26:	f043 0302 	orr.w	r3, r3, #2
 8014e2a:	b29a      	uxth	r2, r3
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014e30:	7ffb      	ldrb	r3, [r7, #31]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d01b      	beq.n	8014e6e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	7d1b      	ldrb	r3, [r3, #20]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d106      	bne.n	8014e4c <tcp_process+0xa8>
 8014e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8015030 <tcp_process+0x28c>)
 8014e40:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014e44:	4980      	ldr	r1, [pc, #512]	@ (8015048 <tcp_process+0x2a4>)
 8014e46:	487c      	ldr	r0, [pc, #496]	@ (8015038 <tcp_process+0x294>)
 8014e48:	f009 ff14 	bl	801ec74 <iprintf>
      recv_flags |= TF_RESET;
 8014e4c:	4b7f      	ldr	r3, [pc, #508]	@ (801504c <tcp_process+0x2a8>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	f043 0308 	orr.w	r3, r3, #8
 8014e54:	b2da      	uxtb	r2, r3
 8014e56:	4b7d      	ldr	r3, [pc, #500]	@ (801504c <tcp_process+0x2a8>)
 8014e58:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	8b5b      	ldrh	r3, [r3, #26]
 8014e5e:	f023 0301 	bic.w	r3, r3, #1
 8014e62:	b29a      	uxth	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014e68:	f06f 030d 	mvn.w	r3, #13
 8014e6c:	e37a      	b.n	8015564 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	e378      	b.n	8015564 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014e72:	4b72      	ldr	r3, [pc, #456]	@ (801503c <tcp_process+0x298>)
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	f003 0302 	and.w	r3, r3, #2
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d010      	beq.n	8014ea0 <tcp_process+0xfc>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	7d1b      	ldrb	r3, [r3, #20]
 8014e82:	2b02      	cmp	r3, #2
 8014e84:	d00c      	beq.n	8014ea0 <tcp_process+0xfc>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	7d1b      	ldrb	r3, [r3, #20]
 8014e8a:	2b03      	cmp	r3, #3
 8014e8c:	d008      	beq.n	8014ea0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	8b5b      	ldrh	r3, [r3, #26]
 8014e92:	f043 0302 	orr.w	r3, r3, #2
 8014e96:	b29a      	uxth	r2, r3
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	e361      	b.n	8015564 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	8b5b      	ldrh	r3, [r3, #26]
 8014ea4:	f003 0310 	and.w	r3, r3, #16
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d103      	bne.n	8014eb4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014eac:	4b68      	ldr	r3, [pc, #416]	@ (8015050 <tcp_process+0x2ac>)
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f001 fc2b 	bl	8016720 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	7d1b      	ldrb	r3, [r3, #20]
 8014ece:	3b02      	subs	r3, #2
 8014ed0:	2b07      	cmp	r3, #7
 8014ed2:	f200 8337 	bhi.w	8015544 <tcp_process+0x7a0>
 8014ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8014edc <tcp_process+0x138>)
 8014ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014edc:	08014efd 	.word	0x08014efd
 8014ee0:	0801512d 	.word	0x0801512d
 8014ee4:	080152a5 	.word	0x080152a5
 8014ee8:	080152cf 	.word	0x080152cf
 8014eec:	080153f3 	.word	0x080153f3
 8014ef0:	080152a5 	.word	0x080152a5
 8014ef4:	0801547f 	.word	0x0801547f
 8014ef8:	0801550f 	.word	0x0801550f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014efc:	4b4f      	ldr	r3, [pc, #316]	@ (801503c <tcp_process+0x298>)
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	f003 0310 	and.w	r3, r3, #16
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f000 80e4 	beq.w	80150d2 <tcp_process+0x32e>
 8014f0a:	4b4c      	ldr	r3, [pc, #304]	@ (801503c <tcp_process+0x298>)
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	f003 0302 	and.w	r3, r3, #2
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	f000 80dd 	beq.w	80150d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f1c:	1c5a      	adds	r2, r3, #1
 8014f1e:	4b48      	ldr	r3, [pc, #288]	@ (8015040 <tcp_process+0x29c>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	f040 80d5 	bne.w	80150d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014f28:	4b46      	ldr	r3, [pc, #280]	@ (8015044 <tcp_process+0x2a0>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	1c5a      	adds	r2, r3, #1
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014f3a:	4b41      	ldr	r3, [pc, #260]	@ (8015040 <tcp_process+0x29c>)
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014f42:	4b44      	ldr	r3, [pc, #272]	@ (8015054 <tcp_process+0x2b0>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	89db      	ldrh	r3, [r3, #14]
 8014f48:	b29a      	uxth	r2, r3
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014f5c:	4b39      	ldr	r3, [pc, #228]	@ (8015044 <tcp_process+0x2a0>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	1e5a      	subs	r2, r3, #1
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2204      	movs	r2, #4
 8014f6a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	3304      	adds	r3, #4
 8014f74:	4618      	mov	r0, r3
 8014f76:	f007 fb07 	bl	801c588 <ip4_route>
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	3304      	adds	r3, #4
 8014f80:	461a      	mov	r2, r3
 8014f82:	4620      	mov	r0, r4
 8014f84:	f7ff f878 	bl	8014078 <tcp_eff_send_mss_netif>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	461a      	mov	r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f94:	009a      	lsls	r2, r3, #2
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f9a:	005b      	lsls	r3, r3, #1
 8014f9c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014fa0:	428b      	cmp	r3, r1
 8014fa2:	bf38      	it	cc
 8014fa4:	460b      	movcc	r3, r1
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d204      	bcs.n	8014fb4 <tcp_process+0x210>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014fae:	009b      	lsls	r3, r3, #2
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	e00d      	b.n	8014fd0 <tcp_process+0x22c>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014fb8:	005b      	lsls	r3, r3, #1
 8014fba:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d904      	bls.n	8014fcc <tcp_process+0x228>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014fc6:	005b      	lsls	r3, r3, #1
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	e001      	b.n	8014fd0 <tcp_process+0x22c>
 8014fcc:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d106      	bne.n	8014fee <tcp_process+0x24a>
 8014fe0:	4b13      	ldr	r3, [pc, #76]	@ (8015030 <tcp_process+0x28c>)
 8014fe2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014fe6:	491c      	ldr	r1, [pc, #112]	@ (8015058 <tcp_process+0x2b4>)
 8014fe8:	4813      	ldr	r0, [pc, #76]	@ (8015038 <tcp_process+0x294>)
 8014fea:	f009 fe43 	bl	801ec74 <iprintf>
        --pcb->snd_queuelen;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015002:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d12a      	bne.n	8015060 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801500e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d106      	bne.n	8015024 <tcp_process+0x280>
 8015016:	4b06      	ldr	r3, [pc, #24]	@ (8015030 <tcp_process+0x28c>)
 8015018:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801501c:	490f      	ldr	r1, [pc, #60]	@ (801505c <tcp_process+0x2b8>)
 801501e:	4806      	ldr	r0, [pc, #24]	@ (8015038 <tcp_process+0x294>)
 8015020:	f009 fe28 	bl	801ec74 <iprintf>
          pcb->unsent = rseg->next;
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801502c:	e01c      	b.n	8015068 <tcp_process+0x2c4>
 801502e:	bf00      	nop
 8015030:	0802388c 	.word	0x0802388c
 8015034:	08023ac4 	.word	0x08023ac4
 8015038:	080238d8 	.word	0x080238d8
 801503c:	20013e04 	.word	0x20013e04
 8015040:	20013dfc 	.word	0x20013dfc
 8015044:	20013df8 	.word	0x20013df8
 8015048:	08023ae0 	.word	0x08023ae0
 801504c:	20013e05 	.word	0x20013e05
 8015050:	20013dbc 	.word	0x20013dbc
 8015054:	20013de8 	.word	0x20013de8
 8015058:	08023b00 	.word	0x08023b00
 801505c:	08023b18 	.word	0x08023b18
        } else {
          pcb->unacked = rseg->next;
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015068:	6978      	ldr	r0, [r7, #20]
 801506a:	f7fe fcd2 	bl	8013a12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015072:	2b00      	cmp	r3, #0
 8015074:	d104      	bne.n	8015080 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801507c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801507e:	e006      	b.n	801508e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2200      	movs	r2, #0
 8015084:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2200      	movs	r2, #0
 801508a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015094:	2b00      	cmp	r3, #0
 8015096:	d00a      	beq.n	80150ae <tcp_process+0x30a>
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	6910      	ldr	r0, [r2, #16]
 80150a2:	2200      	movs	r2, #0
 80150a4:	6879      	ldr	r1, [r7, #4]
 80150a6:	4798      	blx	r3
 80150a8:	4603      	mov	r3, r0
 80150aa:	77bb      	strb	r3, [r7, #30]
 80150ac:	e001      	b.n	80150b2 <tcp_process+0x30e>
 80150ae:	2300      	movs	r3, #0
 80150b0:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 80150b2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80150b6:	f113 0f0d 	cmn.w	r3, #13
 80150ba:	d102      	bne.n	80150c2 <tcp_process+0x31e>
          return ERR_ABRT;
 80150bc:	f06f 030c 	mvn.w	r3, #12
 80150c0:	e250      	b.n	8015564 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	8b5b      	ldrh	r3, [r3, #26]
 80150c6:	f043 0302 	orr.w	r3, r3, #2
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80150d0:	e23a      	b.n	8015548 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80150d2:	4b98      	ldr	r3, [pc, #608]	@ (8015334 <tcp_process+0x590>)
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	f003 0310 	and.w	r3, r3, #16
 80150da:	2b00      	cmp	r3, #0
 80150dc:	f000 8234 	beq.w	8015548 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150e0:	4b95      	ldr	r3, [pc, #596]	@ (8015338 <tcp_process+0x594>)
 80150e2:	6819      	ldr	r1, [r3, #0]
 80150e4:	4b95      	ldr	r3, [pc, #596]	@ (801533c <tcp_process+0x598>)
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	461a      	mov	r2, r3
 80150ea:	4b95      	ldr	r3, [pc, #596]	@ (8015340 <tcp_process+0x59c>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150f0:	4b94      	ldr	r3, [pc, #592]	@ (8015344 <tcp_process+0x5a0>)
 80150f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150f4:	885b      	ldrh	r3, [r3, #2]
 80150f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150f8:	4a92      	ldr	r2, [pc, #584]	@ (8015344 <tcp_process+0x5a0>)
 80150fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150fc:	8812      	ldrh	r2, [r2, #0]
 80150fe:	b292      	uxth	r2, r2
 8015100:	9202      	str	r2, [sp, #8]
 8015102:	9301      	str	r3, [sp, #4]
 8015104:	4b90      	ldr	r3, [pc, #576]	@ (8015348 <tcp_process+0x5a4>)
 8015106:	9300      	str	r3, [sp, #0]
 8015108:	4b90      	ldr	r3, [pc, #576]	@ (801534c <tcp_process+0x5a8>)
 801510a:	4602      	mov	r2, r0
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f003 f969 	bl	80183e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015118:	2b05      	cmp	r3, #5
 801511a:	f200 8215 	bhi.w	8015548 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2200      	movs	r2, #0
 8015122:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f002 ff25 	bl	8017f74 <tcp_rexmit_rto>
      break;
 801512a:	e20d      	b.n	8015548 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801512c:	4b81      	ldr	r3, [pc, #516]	@ (8015334 <tcp_process+0x590>)
 801512e:	781b      	ldrb	r3, [r3, #0]
 8015130:	f003 0310 	and.w	r3, r3, #16
 8015134:	2b00      	cmp	r3, #0
 8015136:	f000 80a1 	beq.w	801527c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801513a:	4b7f      	ldr	r3, [pc, #508]	@ (8015338 <tcp_process+0x594>)
 801513c:	681a      	ldr	r2, [r3, #0]
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015142:	1ad3      	subs	r3, r2, r3
 8015144:	3b01      	subs	r3, #1
 8015146:	2b00      	cmp	r3, #0
 8015148:	db7e      	blt.n	8015248 <tcp_process+0x4a4>
 801514a:	4b7b      	ldr	r3, [pc, #492]	@ (8015338 <tcp_process+0x594>)
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015152:	1ad3      	subs	r3, r2, r3
 8015154:	2b00      	cmp	r3, #0
 8015156:	dc77      	bgt.n	8015248 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2204      	movs	r2, #4
 801515c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015162:	2b00      	cmp	r3, #0
 8015164:	d102      	bne.n	801516c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015166:	23fa      	movs	r3, #250	@ 0xfa
 8015168:	77bb      	strb	r3, [r7, #30]
 801516a:	e01d      	b.n	80151a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015170:	699b      	ldr	r3, [r3, #24]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d106      	bne.n	8015184 <tcp_process+0x3e0>
 8015176:	4b76      	ldr	r3, [pc, #472]	@ (8015350 <tcp_process+0x5ac>)
 8015178:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801517c:	4975      	ldr	r1, [pc, #468]	@ (8015354 <tcp_process+0x5b0>)
 801517e:	4876      	ldr	r0, [pc, #472]	@ (8015358 <tcp_process+0x5b4>)
 8015180:	f009 fd78 	bl	801ec74 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015188:	699b      	ldr	r3, [r3, #24]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d00a      	beq.n	80151a4 <tcp_process+0x400>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015192:	699b      	ldr	r3, [r3, #24]
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	6910      	ldr	r0, [r2, #16]
 8015198:	2200      	movs	r2, #0
 801519a:	6879      	ldr	r1, [r7, #4]
 801519c:	4798      	blx	r3
 801519e:	4603      	mov	r3, r0
 80151a0:	77bb      	strb	r3, [r7, #30]
 80151a2:	e001      	b.n	80151a8 <tcp_process+0x404>
 80151a4:	23f0      	movs	r3, #240	@ 0xf0
 80151a6:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80151a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00a      	beq.n	80151c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80151b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80151b4:	f113 0f0d 	cmn.w	r3, #13
 80151b8:	d002      	beq.n	80151c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7fd fdda 	bl	8012d74 <tcp_abort>
            }
            return ERR_ABRT;
 80151c0:	f06f 030c 	mvn.w	r3, #12
 80151c4:	e1ce      	b.n	8015564 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f000 fae0 	bl	801578c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80151cc:	4b63      	ldr	r3, [pc, #396]	@ (801535c <tcp_process+0x5b8>)
 80151ce:	881b      	ldrh	r3, [r3, #0]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d005      	beq.n	80151e0 <tcp_process+0x43c>
            recv_acked--;
 80151d4:	4b61      	ldr	r3, [pc, #388]	@ (801535c <tcp_process+0x5b8>)
 80151d6:	881b      	ldrh	r3, [r3, #0]
 80151d8:	3b01      	subs	r3, #1
 80151da:	b29a      	uxth	r2, r3
 80151dc:	4b5f      	ldr	r3, [pc, #380]	@ (801535c <tcp_process+0x5b8>)
 80151de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151e4:	009a      	lsls	r2, r3, #2
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 80151f0:	428b      	cmp	r3, r1
 80151f2:	bf38      	it	cc
 80151f4:	460b      	movcc	r3, r1
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d204      	bcs.n	8015204 <tcp_process+0x460>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151fe:	009b      	lsls	r3, r3, #2
 8015200:	b29b      	uxth	r3, r3
 8015202:	e00d      	b.n	8015220 <tcp_process+0x47c>
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801520e:	4293      	cmp	r3, r2
 8015210:	d904      	bls.n	801521c <tcp_process+0x478>
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	b29b      	uxth	r3, r3
 801521a:	e001      	b.n	8015220 <tcp_process+0x47c>
 801521c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015220:	687a      	ldr	r2, [r7, #4]
 8015222:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015226:	4b4e      	ldr	r3, [pc, #312]	@ (8015360 <tcp_process+0x5bc>)
 8015228:	781b      	ldrb	r3, [r3, #0]
 801522a:	f003 0320 	and.w	r3, r3, #32
 801522e:	2b00      	cmp	r3, #0
 8015230:	d037      	beq.n	80152a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	8b5b      	ldrh	r3, [r3, #26]
 8015236:	f043 0302 	orr.w	r3, r3, #2
 801523a:	b29a      	uxth	r2, r3
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2207      	movs	r2, #7
 8015244:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015246:	e02c      	b.n	80152a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015248:	4b3b      	ldr	r3, [pc, #236]	@ (8015338 <tcp_process+0x594>)
 801524a:	6819      	ldr	r1, [r3, #0]
 801524c:	4b3b      	ldr	r3, [pc, #236]	@ (801533c <tcp_process+0x598>)
 801524e:	881b      	ldrh	r3, [r3, #0]
 8015250:	461a      	mov	r2, r3
 8015252:	4b3b      	ldr	r3, [pc, #236]	@ (8015340 <tcp_process+0x59c>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015258:	4b3a      	ldr	r3, [pc, #232]	@ (8015344 <tcp_process+0x5a0>)
 801525a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801525c:	885b      	ldrh	r3, [r3, #2]
 801525e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015260:	4a38      	ldr	r2, [pc, #224]	@ (8015344 <tcp_process+0x5a0>)
 8015262:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015264:	8812      	ldrh	r2, [r2, #0]
 8015266:	b292      	uxth	r2, r2
 8015268:	9202      	str	r2, [sp, #8]
 801526a:	9301      	str	r3, [sp, #4]
 801526c:	4b36      	ldr	r3, [pc, #216]	@ (8015348 <tcp_process+0x5a4>)
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	4b36      	ldr	r3, [pc, #216]	@ (801534c <tcp_process+0x5a8>)
 8015272:	4602      	mov	r2, r0
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f003 f8b5 	bl	80183e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801527a:	e167      	b.n	801554c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801527c:	4b2d      	ldr	r3, [pc, #180]	@ (8015334 <tcp_process+0x590>)
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	f003 0302 	and.w	r3, r3, #2
 8015284:	2b00      	cmp	r3, #0
 8015286:	f000 8161 	beq.w	801554c <tcp_process+0x7a8>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801528e:	1e5a      	subs	r2, r3, #1
 8015290:	4b2b      	ldr	r3, [pc, #172]	@ (8015340 <tcp_process+0x59c>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	429a      	cmp	r2, r3
 8015296:	f040 8159 	bne.w	801554c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f002 fe8c 	bl	8017fb8 <tcp_rexmit>
      break;
 80152a0:	e154      	b.n	801554c <tcp_process+0x7a8>
 80152a2:	e153      	b.n	801554c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f000 fa71 	bl	801578c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80152aa:	4b2d      	ldr	r3, [pc, #180]	@ (8015360 <tcp_process+0x5bc>)
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	f003 0320 	and.w	r3, r3, #32
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 814c 	beq.w	8015550 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	8b5b      	ldrh	r3, [r3, #26]
 80152bc:	f043 0302 	orr.w	r3, r3, #2
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2207      	movs	r2, #7
 80152ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80152cc:	e140      	b.n	8015550 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f000 fa5c 	bl	801578c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80152d4:	4b22      	ldr	r3, [pc, #136]	@ (8015360 <tcp_process+0x5bc>)
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	f003 0320 	and.w	r3, r3, #32
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d071      	beq.n	80153c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152e0:	4b14      	ldr	r3, [pc, #80]	@ (8015334 <tcp_process+0x590>)
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	f003 0310 	and.w	r3, r3, #16
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d060      	beq.n	80153ae <tcp_process+0x60a>
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152f0:	4b11      	ldr	r3, [pc, #68]	@ (8015338 <tcp_process+0x594>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d15a      	bne.n	80153ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d156      	bne.n	80153ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	8b5b      	ldrh	r3, [r3, #26]
 8015304:	f043 0302 	orr.w	r3, r3, #2
 8015308:	b29a      	uxth	r2, r3
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f7fe fda8 	bl	8013e64 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015314:	4b13      	ldr	r3, [pc, #76]	@ (8015364 <tcp_process+0x5c0>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	429a      	cmp	r2, r3
 801531c:	d105      	bne.n	801532a <tcp_process+0x586>
 801531e:	4b11      	ldr	r3, [pc, #68]	@ (8015364 <tcp_process+0x5c0>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	4a0f      	ldr	r2, [pc, #60]	@ (8015364 <tcp_process+0x5c0>)
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	e02e      	b.n	8015388 <tcp_process+0x5e4>
 801532a:	4b0e      	ldr	r3, [pc, #56]	@ (8015364 <tcp_process+0x5c0>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	613b      	str	r3, [r7, #16]
 8015330:	e027      	b.n	8015382 <tcp_process+0x5de>
 8015332:	bf00      	nop
 8015334:	20013e04 	.word	0x20013e04
 8015338:	20013dfc 	.word	0x20013dfc
 801533c:	20013e02 	.word	0x20013e02
 8015340:	20013df8 	.word	0x20013df8
 8015344:	20013de8 	.word	0x20013de8
 8015348:	2000a358 	.word	0x2000a358
 801534c:	2000a35c 	.word	0x2000a35c
 8015350:	0802388c 	.word	0x0802388c
 8015354:	08023b2c 	.word	0x08023b2c
 8015358:	080238d8 	.word	0x080238d8
 801535c:	20013e00 	.word	0x20013e00
 8015360:	20013e05 	.word	0x20013e05
 8015364:	20013dc8 	.word	0x20013dc8
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	429a      	cmp	r2, r3
 8015370:	d104      	bne.n	801537c <tcp_process+0x5d8>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	68da      	ldr	r2, [r3, #12]
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	60da      	str	r2, [r3, #12]
 801537a:	e005      	b.n	8015388 <tcp_process+0x5e4>
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	68db      	ldr	r3, [r3, #12]
 8015380:	613b      	str	r3, [r7, #16]
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d1ef      	bne.n	8015368 <tcp_process+0x5c4>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2200      	movs	r2, #0
 801538c:	60da      	str	r2, [r3, #12]
 801538e:	4b77      	ldr	r3, [pc, #476]	@ (801556c <tcp_process+0x7c8>)
 8015390:	2201      	movs	r2, #1
 8015392:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	220a      	movs	r2, #10
 8015398:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801539a:	4b75      	ldr	r3, [pc, #468]	@ (8015570 <tcp_process+0x7cc>)
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	60da      	str	r2, [r3, #12]
 80153a2:	4a73      	ldr	r2, [pc, #460]	@ (8015570 <tcp_process+0x7cc>)
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6013      	str	r3, [r2, #0]
 80153a8:	f003 f9de 	bl	8018768 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80153ac:	e0d2      	b.n	8015554 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	8b5b      	ldrh	r3, [r3, #26]
 80153b2:	f043 0302 	orr.w	r3, r3, #2
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2208      	movs	r2, #8
 80153c0:	751a      	strb	r2, [r3, #20]
      break;
 80153c2:	e0c7      	b.n	8015554 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153c4:	4b6b      	ldr	r3, [pc, #428]	@ (8015574 <tcp_process+0x7d0>)
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	f003 0310 	and.w	r3, r3, #16
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f000 80c1 	beq.w	8015554 <tcp_process+0x7b0>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153d6:	4b68      	ldr	r3, [pc, #416]	@ (8015578 <tcp_process+0x7d4>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	429a      	cmp	r2, r3
 80153dc:	f040 80ba 	bne.w	8015554 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	f040 80b5 	bne.w	8015554 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2206      	movs	r2, #6
 80153ee:	751a      	strb	r2, [r3, #20]
      break;
 80153f0:	e0b0      	b.n	8015554 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f000 f9ca 	bl	801578c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80153f8:	4b60      	ldr	r3, [pc, #384]	@ (801557c <tcp_process+0x7d8>)
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	f003 0320 	and.w	r3, r3, #32
 8015400:	2b00      	cmp	r3, #0
 8015402:	f000 80a9 	beq.w	8015558 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	8b5b      	ldrh	r3, [r3, #26]
 801540a:	f043 0302 	orr.w	r3, r3, #2
 801540e:	b29a      	uxth	r2, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f7fe fd25 	bl	8013e64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801541a:	4b59      	ldr	r3, [pc, #356]	@ (8015580 <tcp_process+0x7dc>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	429a      	cmp	r2, r3
 8015422:	d105      	bne.n	8015430 <tcp_process+0x68c>
 8015424:	4b56      	ldr	r3, [pc, #344]	@ (8015580 <tcp_process+0x7dc>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	68db      	ldr	r3, [r3, #12]
 801542a:	4a55      	ldr	r2, [pc, #340]	@ (8015580 <tcp_process+0x7dc>)
 801542c:	6013      	str	r3, [r2, #0]
 801542e:	e013      	b.n	8015458 <tcp_process+0x6b4>
 8015430:	4b53      	ldr	r3, [pc, #332]	@ (8015580 <tcp_process+0x7dc>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	60fb      	str	r3, [r7, #12]
 8015436:	e00c      	b.n	8015452 <tcp_process+0x6ae>
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	687a      	ldr	r2, [r7, #4]
 801543e:	429a      	cmp	r2, r3
 8015440:	d104      	bne.n	801544c <tcp_process+0x6a8>
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	68da      	ldr	r2, [r3, #12]
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	60da      	str	r2, [r3, #12]
 801544a:	e005      	b.n	8015458 <tcp_process+0x6b4>
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	60fb      	str	r3, [r7, #12]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d1ef      	bne.n	8015438 <tcp_process+0x694>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	60da      	str	r2, [r3, #12]
 801545e:	4b43      	ldr	r3, [pc, #268]	@ (801556c <tcp_process+0x7c8>)
 8015460:	2201      	movs	r2, #1
 8015462:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	220a      	movs	r2, #10
 8015468:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801546a:	4b41      	ldr	r3, [pc, #260]	@ (8015570 <tcp_process+0x7cc>)
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	60da      	str	r2, [r3, #12]
 8015472:	4a3f      	ldr	r2, [pc, #252]	@ (8015570 <tcp_process+0x7cc>)
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	6013      	str	r3, [r2, #0]
 8015478:	f003 f976 	bl	8018768 <tcp_timer_needed>
      }
      break;
 801547c:	e06c      	b.n	8015558 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f000 f984 	bl	801578c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015484:	4b3b      	ldr	r3, [pc, #236]	@ (8015574 <tcp_process+0x7d0>)
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	f003 0310 	and.w	r3, r3, #16
 801548c:	2b00      	cmp	r3, #0
 801548e:	d065      	beq.n	801555c <tcp_process+0x7b8>
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015494:	4b38      	ldr	r3, [pc, #224]	@ (8015578 <tcp_process+0x7d4>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	429a      	cmp	r2, r3
 801549a:	d15f      	bne.n	801555c <tcp_process+0x7b8>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d15b      	bne.n	801555c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f7fe fcdd 	bl	8013e64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80154aa:	4b35      	ldr	r3, [pc, #212]	@ (8015580 <tcp_process+0x7dc>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	687a      	ldr	r2, [r7, #4]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d105      	bne.n	80154c0 <tcp_process+0x71c>
 80154b4:	4b32      	ldr	r3, [pc, #200]	@ (8015580 <tcp_process+0x7dc>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	4a31      	ldr	r2, [pc, #196]	@ (8015580 <tcp_process+0x7dc>)
 80154bc:	6013      	str	r3, [r2, #0]
 80154be:	e013      	b.n	80154e8 <tcp_process+0x744>
 80154c0:	4b2f      	ldr	r3, [pc, #188]	@ (8015580 <tcp_process+0x7dc>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	61bb      	str	r3, [r7, #24]
 80154c6:	e00c      	b.n	80154e2 <tcp_process+0x73e>
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	68db      	ldr	r3, [r3, #12]
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d104      	bne.n	80154dc <tcp_process+0x738>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	68da      	ldr	r2, [r3, #12]
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	60da      	str	r2, [r3, #12]
 80154da:	e005      	b.n	80154e8 <tcp_process+0x744>
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	61bb      	str	r3, [r7, #24]
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d1ef      	bne.n	80154c8 <tcp_process+0x724>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2200      	movs	r2, #0
 80154ec:	60da      	str	r2, [r3, #12]
 80154ee:	4b1f      	ldr	r3, [pc, #124]	@ (801556c <tcp_process+0x7c8>)
 80154f0:	2201      	movs	r2, #1
 80154f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	220a      	movs	r2, #10
 80154f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80154fa:	4b1d      	ldr	r3, [pc, #116]	@ (8015570 <tcp_process+0x7cc>)
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	60da      	str	r2, [r3, #12]
 8015502:	4a1b      	ldr	r2, [pc, #108]	@ (8015570 <tcp_process+0x7cc>)
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6013      	str	r3, [r2, #0]
 8015508:	f003 f92e 	bl	8018768 <tcp_timer_needed>
      }
      break;
 801550c:	e026      	b.n	801555c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f000 f93c 	bl	801578c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015514:	4b17      	ldr	r3, [pc, #92]	@ (8015574 <tcp_process+0x7d0>)
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	f003 0310 	and.w	r3, r3, #16
 801551c:	2b00      	cmp	r3, #0
 801551e:	d01f      	beq.n	8015560 <tcp_process+0x7bc>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015524:	4b14      	ldr	r3, [pc, #80]	@ (8015578 <tcp_process+0x7d4>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	429a      	cmp	r2, r3
 801552a:	d119      	bne.n	8015560 <tcp_process+0x7bc>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015530:	2b00      	cmp	r3, #0
 8015532:	d115      	bne.n	8015560 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015534:	4b11      	ldr	r3, [pc, #68]	@ (801557c <tcp_process+0x7d8>)
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	f043 0310 	orr.w	r3, r3, #16
 801553c:	b2da      	uxtb	r2, r3
 801553e:	4b0f      	ldr	r3, [pc, #60]	@ (801557c <tcp_process+0x7d8>)
 8015540:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015542:	e00d      	b.n	8015560 <tcp_process+0x7bc>
    default:
      break;
 8015544:	bf00      	nop
 8015546:	e00c      	b.n	8015562 <tcp_process+0x7be>
      break;
 8015548:	bf00      	nop
 801554a:	e00a      	b.n	8015562 <tcp_process+0x7be>
      break;
 801554c:	bf00      	nop
 801554e:	e008      	b.n	8015562 <tcp_process+0x7be>
      break;
 8015550:	bf00      	nop
 8015552:	e006      	b.n	8015562 <tcp_process+0x7be>
      break;
 8015554:	bf00      	nop
 8015556:	e004      	b.n	8015562 <tcp_process+0x7be>
      break;
 8015558:	bf00      	nop
 801555a:	e002      	b.n	8015562 <tcp_process+0x7be>
      break;
 801555c:	bf00      	nop
 801555e:	e000      	b.n	8015562 <tcp_process+0x7be>
      break;
 8015560:	bf00      	nop
  }
  return ERR_OK;
 8015562:	2300      	movs	r3, #0
}
 8015564:	4618      	mov	r0, r3
 8015566:	3724      	adds	r7, #36	@ 0x24
 8015568:	46bd      	mov	sp, r7
 801556a:	bd90      	pop	{r4, r7, pc}
 801556c:	20013dd0 	.word	0x20013dd0
 8015570:	20013dcc 	.word	0x20013dcc
 8015574:	20013e04 	.word	0x20013e04
 8015578:	20013dfc 	.word	0x20013dfc
 801557c:	20013e05 	.word	0x20013e05
 8015580:	20013dc8 	.word	0x20013dc8

08015584 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015584:	b590      	push	{r4, r7, lr}
 8015586:	b085      	sub	sp, #20
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d106      	bne.n	80155a2 <tcp_oos_insert_segment+0x1e>
 8015594:	4b3b      	ldr	r3, [pc, #236]	@ (8015684 <tcp_oos_insert_segment+0x100>)
 8015596:	f240 421f 	movw	r2, #1055	@ 0x41f
 801559a:	493b      	ldr	r1, [pc, #236]	@ (8015688 <tcp_oos_insert_segment+0x104>)
 801559c:	483b      	ldr	r0, [pc, #236]	@ (801568c <tcp_oos_insert_segment+0x108>)
 801559e:	f009 fb69 	bl	801ec74 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	691b      	ldr	r3, [r3, #16]
 80155a6:	899b      	ldrh	r3, [r3, #12]
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7fa ff88 	bl	80104c0 <lwip_htons>
 80155b0:	4603      	mov	r3, r0
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	f003 0301 	and.w	r3, r3, #1
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d028      	beq.n	801560e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80155bc:	6838      	ldr	r0, [r7, #0]
 80155be:	f7fe fa13 	bl	80139e8 <tcp_segs_free>
    next = NULL;
 80155c2:	2300      	movs	r3, #0
 80155c4:	603b      	str	r3, [r7, #0]
 80155c6:	e056      	b.n	8015676 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	691b      	ldr	r3, [r3, #16]
 80155cc:	899b      	ldrh	r3, [r3, #12]
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fa ff75 	bl	80104c0 <lwip_htons>
 80155d6:	4603      	mov	r3, r0
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	f003 0301 	and.w	r3, r3, #1
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d00d      	beq.n	80155fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	691b      	ldr	r3, [r3, #16]
 80155e6:	899b      	ldrh	r3, [r3, #12]
 80155e8:	b29c      	uxth	r4, r3
 80155ea:	2001      	movs	r0, #1
 80155ec:	f7fa ff68 	bl	80104c0 <lwip_htons>
 80155f0:	4603      	mov	r3, r0
 80155f2:	461a      	mov	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	691b      	ldr	r3, [r3, #16]
 80155f8:	4322      	orrs	r2, r4
 80155fa:	b292      	uxth	r2, r2
 80155fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f7fe fa02 	bl	8013a12 <tcp_seg_free>
    while (next &&
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d00e      	beq.n	8015632 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	891b      	ldrh	r3, [r3, #8]
 8015618:	461a      	mov	r2, r3
 801561a:	4b1d      	ldr	r3, [pc, #116]	@ (8015690 <tcp_oos_insert_segment+0x10c>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	441a      	add	r2, r3
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	691b      	ldr	r3, [r3, #16]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	6839      	ldr	r1, [r7, #0]
 8015628:	8909      	ldrh	r1, [r1, #8]
 801562a:	440b      	add	r3, r1
 801562c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801562e:	2b00      	cmp	r3, #0
 8015630:	daca      	bge.n	80155c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d01e      	beq.n	8015676 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	891b      	ldrh	r3, [r3, #8]
 801563c:	461a      	mov	r2, r3
 801563e:	4b14      	ldr	r3, [pc, #80]	@ (8015690 <tcp_oos_insert_segment+0x10c>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	441a      	add	r2, r3
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	691b      	ldr	r3, [r3, #16]
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801564c:	2b00      	cmp	r3, #0
 801564e:	dd12      	ble.n	8015676 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	691b      	ldr	r3, [r3, #16]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	b29a      	uxth	r2, r3
 8015658:	4b0d      	ldr	r3, [pc, #52]	@ (8015690 <tcp_oos_insert_segment+0x10c>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	b29b      	uxth	r3, r3
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	b29a      	uxth	r2, r3
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	685a      	ldr	r2, [r3, #4]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	891b      	ldrh	r3, [r3, #8]
 801566e:	4619      	mov	r1, r3
 8015670:	4610      	mov	r0, r2
 8015672:	f7fc fac1 	bl	8011bf8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	683a      	ldr	r2, [r7, #0]
 801567a:	601a      	str	r2, [r3, #0]
}
 801567c:	bf00      	nop
 801567e:	3714      	adds	r7, #20
 8015680:	46bd      	mov	sp, r7
 8015682:	bd90      	pop	{r4, r7, pc}
 8015684:	0802388c 	.word	0x0802388c
 8015688:	08023b4c 	.word	0x08023b4c
 801568c:	080238d8 	.word	0x080238d8
 8015690:	20013df8 	.word	0x20013df8

08015694 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015694:	b5b0      	push	{r4, r5, r7, lr}
 8015696:	b086      	sub	sp, #24
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80156a2:	e03e      	b.n	8015722 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fc fcb4 	bl	8012020 <pbuf_clen>
 80156b8:	4603      	mov	r3, r0
 80156ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80156c2:	8a7a      	ldrh	r2, [r7, #18]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d906      	bls.n	80156d6 <tcp_free_acked_segments+0x42>
 80156c8:	4b2a      	ldr	r3, [pc, #168]	@ (8015774 <tcp_free_acked_segments+0xe0>)
 80156ca:	f240 4257 	movw	r2, #1111	@ 0x457
 80156ce:	492a      	ldr	r1, [pc, #168]	@ (8015778 <tcp_free_acked_segments+0xe4>)
 80156d0:	482a      	ldr	r0, [pc, #168]	@ (801577c <tcp_free_acked_segments+0xe8>)
 80156d2:	f009 facf 	bl	801ec74 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80156dc:	8a7b      	ldrh	r3, [r7, #18]
 80156de:	1ad3      	subs	r3, r2, r3
 80156e0:	b29a      	uxth	r2, r3
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	891a      	ldrh	r2, [r3, #8]
 80156ec:	4b24      	ldr	r3, [pc, #144]	@ (8015780 <tcp_free_acked_segments+0xec>)
 80156ee:	881b      	ldrh	r3, [r3, #0]
 80156f0:	4413      	add	r3, r2
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	4b22      	ldr	r3, [pc, #136]	@ (8015780 <tcp_free_acked_segments+0xec>)
 80156f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80156f8:	6978      	ldr	r0, [r7, #20]
 80156fa:	f7fe f98a 	bl	8013a12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00c      	beq.n	8015722 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d109      	bne.n	8015722 <tcp_free_acked_segments+0x8e>
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d106      	bne.n	8015722 <tcp_free_acked_segments+0x8e>
 8015714:	4b17      	ldr	r3, [pc, #92]	@ (8015774 <tcp_free_acked_segments+0xe0>)
 8015716:	f240 4261 	movw	r2, #1121	@ 0x461
 801571a:	491a      	ldr	r1, [pc, #104]	@ (8015784 <tcp_free_acked_segments+0xf0>)
 801571c:	4817      	ldr	r0, [pc, #92]	@ (801577c <tcp_free_acked_segments+0xe8>)
 801571e:	f009 faa9 	bl	801ec74 <iprintf>
  while (seg_list != NULL &&
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d020      	beq.n	801576a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	691b      	ldr	r3, [r3, #16]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	4618      	mov	r0, r3
 8015730:	f7fa fedb 	bl	80104ea <lwip_htonl>
 8015734:	4604      	mov	r4, r0
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	891b      	ldrh	r3, [r3, #8]
 801573a:	461d      	mov	r5, r3
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	691b      	ldr	r3, [r3, #16]
 8015740:	899b      	ldrh	r3, [r3, #12]
 8015742:	b29b      	uxth	r3, r3
 8015744:	4618      	mov	r0, r3
 8015746:	f7fa febb 	bl	80104c0 <lwip_htons>
 801574a:	4603      	mov	r3, r0
 801574c:	b2db      	uxtb	r3, r3
 801574e:	f003 0303 	and.w	r3, r3, #3
 8015752:	2b00      	cmp	r3, #0
 8015754:	d001      	beq.n	801575a <tcp_free_acked_segments+0xc6>
 8015756:	2301      	movs	r3, #1
 8015758:	e000      	b.n	801575c <tcp_free_acked_segments+0xc8>
 801575a:	2300      	movs	r3, #0
 801575c:	442b      	add	r3, r5
 801575e:	18e2      	adds	r2, r4, r3
 8015760:	4b09      	ldr	r3, [pc, #36]	@ (8015788 <tcp_free_acked_segments+0xf4>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015766:	2b00      	cmp	r3, #0
 8015768:	dd9c      	ble.n	80156a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801576a:	68bb      	ldr	r3, [r7, #8]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3718      	adds	r7, #24
 8015770:	46bd      	mov	sp, r7
 8015772:	bdb0      	pop	{r4, r5, r7, pc}
 8015774:	0802388c 	.word	0x0802388c
 8015778:	08023b74 	.word	0x08023b74
 801577c:	080238d8 	.word	0x080238d8
 8015780:	20013e00 	.word	0x20013e00
 8015784:	08023b9c 	.word	0x08023b9c
 8015788:	20013dfc 	.word	0x20013dfc

0801578c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801578c:	b5b0      	push	{r4, r5, r7, lr}
 801578e:	b094      	sub	sp, #80	@ 0x50
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015794:	2300      	movs	r3, #0
 8015796:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d106      	bne.n	80157ac <tcp_receive+0x20>
 801579e:	4b91      	ldr	r3, [pc, #580]	@ (80159e4 <tcp_receive+0x258>)
 80157a0:	f240 427b 	movw	r2, #1147	@ 0x47b
 80157a4:	4990      	ldr	r1, [pc, #576]	@ (80159e8 <tcp_receive+0x25c>)
 80157a6:	4891      	ldr	r0, [pc, #580]	@ (80159ec <tcp_receive+0x260>)
 80157a8:	f009 fa64 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	7d1b      	ldrb	r3, [r3, #20]
 80157b0:	2b03      	cmp	r3, #3
 80157b2:	d806      	bhi.n	80157c2 <tcp_receive+0x36>
 80157b4:	4b8b      	ldr	r3, [pc, #556]	@ (80159e4 <tcp_receive+0x258>)
 80157b6:	f240 427c 	movw	r2, #1148	@ 0x47c
 80157ba:	498d      	ldr	r1, [pc, #564]	@ (80159f0 <tcp_receive+0x264>)
 80157bc:	488b      	ldr	r0, [pc, #556]	@ (80159ec <tcp_receive+0x260>)
 80157be:	f009 fa59 	bl	801ec74 <iprintf>

  if (flags & TCP_ACK) {
 80157c2:	4b8c      	ldr	r3, [pc, #560]	@ (80159f4 <tcp_receive+0x268>)
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	f003 0310 	and.w	r3, r3, #16
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f000 8264 	beq.w	8015c98 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80157d6:	461a      	mov	r2, r3
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80157dc:	4413      	add	r3, r2
 80157de:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80157e4:	4b84      	ldr	r3, [pc, #528]	@ (80159f8 <tcp_receive+0x26c>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	1ad3      	subs	r3, r2, r3
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	db1b      	blt.n	8015826 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80157f2:	4b81      	ldr	r3, [pc, #516]	@ (80159f8 <tcp_receive+0x26c>)
 80157f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d106      	bne.n	8015808 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80157fe:	4b7f      	ldr	r3, [pc, #508]	@ (80159fc <tcp_receive+0x270>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	1ad3      	subs	r3, r2, r3
 8015804:	2b00      	cmp	r3, #0
 8015806:	db0e      	blt.n	8015826 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801580c:	4b7b      	ldr	r3, [pc, #492]	@ (80159fc <tcp_receive+0x270>)
 801580e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015810:	429a      	cmp	r2, r3
 8015812:	d125      	bne.n	8015860 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015814:	4b7a      	ldr	r3, [pc, #488]	@ (8015a00 <tcp_receive+0x274>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	89db      	ldrh	r3, [r3, #14]
 801581a:	b29a      	uxth	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015822:	429a      	cmp	r2, r3
 8015824:	d91c      	bls.n	8015860 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015826:	4b76      	ldr	r3, [pc, #472]	@ (8015a00 <tcp_receive+0x274>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	89db      	ldrh	r3, [r3, #14]
 801582c:	b29a      	uxth	r2, r3
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015840:	429a      	cmp	r2, r3
 8015842:	d205      	bcs.n	8015850 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015850:	4b69      	ldr	r3, [pc, #420]	@ (80159f8 <tcp_receive+0x26c>)
 8015852:	681a      	ldr	r2, [r3, #0]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015858:	4b68      	ldr	r3, [pc, #416]	@ (80159fc <tcp_receive+0x270>)
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015860:	4b66      	ldr	r3, [pc, #408]	@ (80159fc <tcp_receive+0x270>)
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015868:	1ad3      	subs	r3, r2, r3
 801586a:	2b00      	cmp	r3, #0
 801586c:	dc58      	bgt.n	8015920 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801586e:	4b65      	ldr	r3, [pc, #404]	@ (8015a04 <tcp_receive+0x278>)
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d14b      	bne.n	801590e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015880:	4413      	add	r3, r2
 8015882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015884:	429a      	cmp	r2, r3
 8015886:	d142      	bne.n	801590e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801588e:	2b00      	cmp	r3, #0
 8015890:	db3d      	blt.n	801590e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015896:	4b59      	ldr	r3, [pc, #356]	@ (80159fc <tcp_receive+0x270>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	429a      	cmp	r2, r3
 801589c:	d137      	bne.n	801590e <tcp_receive+0x182>
              found_dupack = 1;
 801589e:	2301      	movs	r3, #1
 80158a0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80158a8:	2bff      	cmp	r3, #255	@ 0xff
 80158aa:	d007      	beq.n	80158bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80158b2:	3301      	adds	r3, #1
 80158b4:	b2da      	uxtb	r2, r3
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80158c2:	2b03      	cmp	r3, #3
 80158c4:	d91b      	bls.n	80158fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80158d0:	4413      	add	r3, r2
 80158d2:	b29a      	uxth	r2, r3
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80158da:	429a      	cmp	r2, r3
 80158dc:	d30a      	bcc.n	80158f4 <tcp_receive+0x168>
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80158e8:	4413      	add	r3, r2
 80158ea:	b29a      	uxth	r2, r3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80158f2:	e004      	b.n	80158fe <tcp_receive+0x172>
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015904:	2b02      	cmp	r3, #2
 8015906:	d902      	bls.n	801590e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f002 fbc1 	bl	8018090 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801590e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015910:	2b00      	cmp	r3, #0
 8015912:	f040 8161 	bne.w	8015bd8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2200      	movs	r2, #0
 801591a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801591e:	e15b      	b.n	8015bd8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015920:	4b36      	ldr	r3, [pc, #216]	@ (80159fc <tcp_receive+0x270>)
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015928:	1ad3      	subs	r3, r2, r3
 801592a:	3b01      	subs	r3, #1
 801592c:	2b00      	cmp	r3, #0
 801592e:	f2c0 814e 	blt.w	8015bce <tcp_receive+0x442>
 8015932:	4b32      	ldr	r3, [pc, #200]	@ (80159fc <tcp_receive+0x270>)
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801593a:	1ad3      	subs	r3, r2, r3
 801593c:	2b00      	cmp	r3, #0
 801593e:	f300 8146 	bgt.w	8015bce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	8b5b      	ldrh	r3, [r3, #26]
 8015946:	f003 0304 	and.w	r3, r3, #4
 801594a:	2b00      	cmp	r3, #0
 801594c:	d010      	beq.n	8015970 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	8b5b      	ldrh	r3, [r3, #26]
 8015952:	f023 0304 	bic.w	r3, r3, #4
 8015956:	b29a      	uxth	r2, r3
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2200      	movs	r2, #0
 801596c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2200      	movs	r2, #0
 8015974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801597e:	10db      	asrs	r3, r3, #3
 8015980:	b21b      	sxth	r3, r3
 8015982:	b29a      	uxth	r2, r3
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801598a:	b29b      	uxth	r3, r3
 801598c:	4413      	add	r3, r2
 801598e:	b29b      	uxth	r3, r3
 8015990:	b21a      	sxth	r2, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015998:	4b18      	ldr	r3, [pc, #96]	@ (80159fc <tcp_receive+0x270>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	b29a      	uxth	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159a2:	b29b      	uxth	r3, r3
 80159a4:	1ad3      	subs	r3, r2, r3
 80159a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2200      	movs	r2, #0
 80159ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80159b0:	4b12      	ldr	r3, [pc, #72]	@ (80159fc <tcp_receive+0x270>)
 80159b2:	681a      	ldr	r2, [r3, #0]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	7d1b      	ldrb	r3, [r3, #20]
 80159bc:	2b03      	cmp	r3, #3
 80159be:	f240 8097 	bls.w	8015af0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d245      	bcs.n	8015a5e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	8b5b      	ldrh	r3, [r3, #26]
 80159d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d014      	beq.n	8015a08 <tcp_receive+0x27c>
 80159de:	2301      	movs	r3, #1
 80159e0:	e013      	b.n	8015a0a <tcp_receive+0x27e>
 80159e2:	bf00      	nop
 80159e4:	0802388c 	.word	0x0802388c
 80159e8:	08023bbc 	.word	0x08023bbc
 80159ec:	080238d8 	.word	0x080238d8
 80159f0:	08023bd8 	.word	0x08023bd8
 80159f4:	20013e04 	.word	0x20013e04
 80159f8:	20013df8 	.word	0x20013df8
 80159fc:	20013dfc 	.word	0x20013dfc
 8015a00:	20013de8 	.word	0x20013de8
 8015a04:	20013e02 	.word	0x20013e02
 8015a08:	2302      	movs	r3, #2
 8015a0a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015a0e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015a18:	fb12 f303 	smulbb	r3, r2, r3
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015a20:	4293      	cmp	r3, r2
 8015a22:	bf28      	it	cs
 8015a24:	4613      	movcs	r3, r2
 8015a26:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015a2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015a30:	4413      	add	r3, r2
 8015a32:	b29a      	uxth	r2, r3
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d309      	bcc.n	8015a52 <tcp_receive+0x2c6>
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015a44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015a46:	4413      	add	r3, r2
 8015a48:	b29a      	uxth	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015a50:	e04e      	b.n	8015af0 <tcp_receive+0x364>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015a5c:	e048      	b.n	8015af0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015a66:	4413      	add	r3, r2
 8015a68:	b29a      	uxth	r2, r3
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d309      	bcc.n	8015a88 <tcp_receive+0x2fc>
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015a7c:	4413      	add	r3, r2
 8015a7e:	b29a      	uxth	r2, r3
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015a86:	e004      	b.n	8015a92 <tcp_receive+0x306>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d326      	bcc.n	8015af0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015aae:	1ad3      	subs	r3, r2, r3
 8015ab0:	b29a      	uxth	r2, r3
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ac2:	4413      	add	r3, r2
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d30a      	bcc.n	8015ae6 <tcp_receive+0x35a>
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ada:	4413      	add	r3, r2
 8015adc:	b29a      	uxth	r2, r3
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015ae4:	e004      	b.n	8015af0 <tcp_receive+0x364>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015aec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015af8:	4a98      	ldr	r2, [pc, #608]	@ (8015d5c <tcp_receive+0x5d0>)
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7ff fdca 	bl	8015694 <tcp_free_acked_segments>
 8015b00:	4602      	mov	r2, r0
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b0e:	4a94      	ldr	r2, [pc, #592]	@ (8015d60 <tcp_receive+0x5d4>)
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f7ff fdbf 	bl	8015694 <tcp_free_acked_segments>
 8015b16:	4602      	mov	r2, r0
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d104      	bne.n	8015b2e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b2a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015b2c:	e002      	b.n	8015b34 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2200      	movs	r2, #0
 8015b32:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2200      	movs	r2, #0
 8015b38:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d103      	bne.n	8015b4a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2200      	movs	r2, #0
 8015b46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015b50:	4b84      	ldr	r3, [pc, #528]	@ (8015d64 <tcp_receive+0x5d8>)
 8015b52:	881b      	ldrh	r3, [r3, #0]
 8015b54:	4413      	add	r3, r2
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	8b5b      	ldrh	r3, [r3, #26]
 8015b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d035      	beq.n	8015bd6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d118      	bne.n	8015ba4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d00c      	beq.n	8015b94 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b82:	691b      	ldr	r3, [r3, #16]
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fa fcaf 	bl	80104ea <lwip_htonl>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	dc20      	bgt.n	8015bd6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	8b5b      	ldrh	r3, [r3, #26]
 8015b98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ba2:	e018      	b.n	8015bd6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015bac:	691b      	ldr	r3, [r3, #16]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7fa fc9a 	bl	80104ea <lwip_htonl>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	1ae3      	subs	r3, r4, r3
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	dc0b      	bgt.n	8015bd6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	8b5b      	ldrh	r3, [r3, #26]
 8015bc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015bc6:	b29a      	uxth	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015bcc:	e003      	b.n	8015bd6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f002 fc5a 	bl	8018488 <tcp_send_empty_ack>
 8015bd4:	e000      	b.n	8015bd8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015bd6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d05b      	beq.n	8015c98 <tcp_receive+0x50c>
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015be4:	4b60      	ldr	r3, [pc, #384]	@ (8015d68 <tcp_receive+0x5dc>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	da54      	bge.n	8015c98 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015bee:	4b5f      	ldr	r3, [pc, #380]	@ (8015d6c <tcp_receive+0x5e0>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015c02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015c0c:	10db      	asrs	r3, r3, #3
 8015c0e:	b21b      	sxth	r3, r3
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015c26:	4413      	add	r3, r2
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	b21a      	sxth	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015c30:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	da05      	bge.n	8015c44 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015c3c:	425b      	negs	r3, r3
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015c44:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015c4e:	109b      	asrs	r3, r3, #2
 8015c50:	b21b      	sxth	r3, r3
 8015c52:	b29b      	uxth	r3, r3
 8015c54:	1ad3      	subs	r3, r2, r3
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015c68:	4413      	add	r3, r2
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	b21a      	sxth	r2, r3
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015c78:	10db      	asrs	r3, r3, #3
 8015c7a:	b21b      	sxth	r3, r3
 8015c7c:	b29a      	uxth	r2, r3
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015c84:	b29b      	uxth	r3, r3
 8015c86:	4413      	add	r3, r2
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	b21a      	sxth	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2200      	movs	r2, #0
 8015c96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015c98:	4b35      	ldr	r3, [pc, #212]	@ (8015d70 <tcp_receive+0x5e4>)
 8015c9a:	881b      	ldrh	r3, [r3, #0]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	f000 84df 	beq.w	8016660 <tcp_receive+0xed4>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	7d1b      	ldrb	r3, [r3, #20]
 8015ca6:	2b06      	cmp	r3, #6
 8015ca8:	f200 84da 	bhi.w	8016660 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015cb0:	4b30      	ldr	r3, [pc, #192]	@ (8015d74 <tcp_receive+0x5e8>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	3b01      	subs	r3, #1
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	f2c0 808f 	blt.w	8015ddc <tcp_receive+0x650>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8015d70 <tcp_receive+0x5e4>)
 8015cc4:	881b      	ldrh	r3, [r3, #0]
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8015d74 <tcp_receive+0x5e8>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	440b      	add	r3, r1
 8015cce:	1ad3      	subs	r3, r2, r3
 8015cd0:	3301      	adds	r3, #1
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	f300 8082 	bgt.w	8015ddc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015cd8:	4b27      	ldr	r3, [pc, #156]	@ (8015d78 <tcp_receive+0x5ec>)
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ce2:	4b24      	ldr	r3, [pc, #144]	@ (8015d74 <tcp_receive+0x5e8>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	1ad3      	subs	r3, r2, r3
 8015ce8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015cea:	4b23      	ldr	r3, [pc, #140]	@ (8015d78 <tcp_receive+0x5ec>)
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d106      	bne.n	8015d00 <tcp_receive+0x574>
 8015cf2:	4b22      	ldr	r3, [pc, #136]	@ (8015d7c <tcp_receive+0x5f0>)
 8015cf4:	f240 5294 	movw	r2, #1428	@ 0x594
 8015cf8:	4921      	ldr	r1, [pc, #132]	@ (8015d80 <tcp_receive+0x5f4>)
 8015cfa:	4822      	ldr	r0, [pc, #136]	@ (8015d84 <tcp_receive+0x5f8>)
 8015cfc:	f008 ffba 	bl	801ec74 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015d06:	4293      	cmp	r3, r2
 8015d08:	d906      	bls.n	8015d18 <tcp_receive+0x58c>
 8015d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8015d7c <tcp_receive+0x5f0>)
 8015d0c:	f240 5295 	movw	r2, #1429	@ 0x595
 8015d10:	491d      	ldr	r1, [pc, #116]	@ (8015d88 <tcp_receive+0x5fc>)
 8015d12:	481c      	ldr	r0, [pc, #112]	@ (8015d84 <tcp_receive+0x5f8>)
 8015d14:	f008 ffae 	bl	801ec74 <iprintf>
      off = (u16_t)off32;
 8015d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015d1e:	4b16      	ldr	r3, [pc, #88]	@ (8015d78 <tcp_receive+0x5ec>)
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	891b      	ldrh	r3, [r3, #8]
 8015d24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d906      	bls.n	8015d3a <tcp_receive+0x5ae>
 8015d2c:	4b13      	ldr	r3, [pc, #76]	@ (8015d7c <tcp_receive+0x5f0>)
 8015d2e:	f240 5297 	movw	r2, #1431	@ 0x597
 8015d32:	4916      	ldr	r1, [pc, #88]	@ (8015d8c <tcp_receive+0x600>)
 8015d34:	4813      	ldr	r0, [pc, #76]	@ (8015d84 <tcp_receive+0x5f8>)
 8015d36:	f008 ff9d 	bl	801ec74 <iprintf>
      inseg.len -= off;
 8015d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8015d78 <tcp_receive+0x5ec>)
 8015d3c:	891a      	ldrh	r2, [r3, #8]
 8015d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	4b0c      	ldr	r3, [pc, #48]	@ (8015d78 <tcp_receive+0x5ec>)
 8015d48:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d78 <tcp_receive+0x5ec>)
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	891a      	ldrh	r2, [r3, #8]
 8015d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015d58:	e02a      	b.n	8015db0 <tcp_receive+0x624>
 8015d5a:	bf00      	nop
 8015d5c:	08023bf4 	.word	0x08023bf4
 8015d60:	08023bfc 	.word	0x08023bfc
 8015d64:	20013e00 	.word	0x20013e00
 8015d68:	20013dfc 	.word	0x20013dfc
 8015d6c:	20013dbc 	.word	0x20013dbc
 8015d70:	20013e02 	.word	0x20013e02
 8015d74:	20013df8 	.word	0x20013df8
 8015d78:	20013dd4 	.word	0x20013dd4
 8015d7c:	0802388c 	.word	0x0802388c
 8015d80:	08023c04 	.word	0x08023c04
 8015d84:	080238d8 	.word	0x080238d8
 8015d88:	08023c14 	.word	0x08023c14
 8015d8c:	08023c24 	.word	0x08023c24
        off -= p->len;
 8015d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d92:	895b      	ldrh	r3, [r3, #10]
 8015d94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d98:	1ad3      	subs	r3, r2, r3
 8015d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015da0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015da2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015da6:	2200      	movs	r2, #0
 8015da8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015db2:	895b      	ldrh	r3, [r3, #10]
 8015db4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d8e9      	bhi.n	8015d90 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015dbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015dc4:	f7fc f818 	bl	8011df8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dcc:	4a90      	ldr	r2, [pc, #576]	@ (8016010 <tcp_receive+0x884>)
 8015dce:	6013      	str	r3, [r2, #0]
 8015dd0:	4b90      	ldr	r3, [pc, #576]	@ (8016014 <tcp_receive+0x888>)
 8015dd2:	691b      	ldr	r3, [r3, #16]
 8015dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8016010 <tcp_receive+0x884>)
 8015dd6:	6812      	ldr	r2, [r2, #0]
 8015dd8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015dda:	e00d      	b.n	8015df8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8016010 <tcp_receive+0x884>)
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de4:	1ad3      	subs	r3, r2, r3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	da06      	bge.n	8015df8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	8b5b      	ldrh	r3, [r3, #26]
 8015dee:	f043 0302 	orr.w	r3, r3, #2
 8015df2:	b29a      	uxth	r2, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015df8:	4b85      	ldr	r3, [pc, #532]	@ (8016010 <tcp_receive+0x884>)
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e00:	1ad3      	subs	r3, r2, r3
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f2c0 8427 	blt.w	8016656 <tcp_receive+0xeca>
 8015e08:	4b81      	ldr	r3, [pc, #516]	@ (8016010 <tcp_receive+0x884>)
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e10:	6879      	ldr	r1, [r7, #4]
 8015e12:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015e14:	440b      	add	r3, r1
 8015e16:	1ad3      	subs	r3, r2, r3
 8015e18:	3301      	adds	r3, #1
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f300 841b 	bgt.w	8016656 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e24:	4b7a      	ldr	r3, [pc, #488]	@ (8016010 <tcp_receive+0x884>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	f040 8298 	bne.w	801635e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015e2e:	4b79      	ldr	r3, [pc, #484]	@ (8016014 <tcp_receive+0x888>)
 8015e30:	891c      	ldrh	r4, [r3, #8]
 8015e32:	4b78      	ldr	r3, [pc, #480]	@ (8016014 <tcp_receive+0x888>)
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	899b      	ldrh	r3, [r3, #12]
 8015e38:	b29b      	uxth	r3, r3
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fa fb40 	bl	80104c0 <lwip_htons>
 8015e40:	4603      	mov	r3, r0
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	f003 0303 	and.w	r3, r3, #3
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d001      	beq.n	8015e50 <tcp_receive+0x6c4>
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	e000      	b.n	8015e52 <tcp_receive+0x6c6>
 8015e50:	2300      	movs	r3, #0
 8015e52:	4423      	add	r3, r4
 8015e54:	b29a      	uxth	r2, r3
 8015e56:	4b70      	ldr	r3, [pc, #448]	@ (8016018 <tcp_receive+0x88c>)
 8015e58:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8016018 <tcp_receive+0x88c>)
 8015e60:	881b      	ldrh	r3, [r3, #0]
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d274      	bcs.n	8015f50 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015e66:	4b6b      	ldr	r3, [pc, #428]	@ (8016014 <tcp_receive+0x888>)
 8015e68:	691b      	ldr	r3, [r3, #16]
 8015e6a:	899b      	ldrh	r3, [r3, #12]
 8015e6c:	b29b      	uxth	r3, r3
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7fa fb26 	bl	80104c0 <lwip_htons>
 8015e74:	4603      	mov	r3, r0
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	f003 0301 	and.w	r3, r3, #1
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d01e      	beq.n	8015ebe <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015e80:	4b64      	ldr	r3, [pc, #400]	@ (8016014 <tcp_receive+0x888>)
 8015e82:	691b      	ldr	r3, [r3, #16]
 8015e84:	899b      	ldrh	r3, [r3, #12]
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	b21b      	sxth	r3, r3
 8015e8a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015e8e:	b21c      	sxth	r4, r3
 8015e90:	4b60      	ldr	r3, [pc, #384]	@ (8016014 <tcp_receive+0x888>)
 8015e92:	691b      	ldr	r3, [r3, #16]
 8015e94:	899b      	ldrh	r3, [r3, #12]
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7fa fb11 	bl	80104c0 <lwip_htons>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7fa fb09 	bl	80104c0 <lwip_htons>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	b21b      	sxth	r3, r3
 8015eb2:	4323      	orrs	r3, r4
 8015eb4:	b21a      	sxth	r2, r3
 8015eb6:	4b57      	ldr	r3, [pc, #348]	@ (8016014 <tcp_receive+0x888>)
 8015eb8:	691b      	ldr	r3, [r3, #16]
 8015eba:	b292      	uxth	r2, r2
 8015ebc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015ec2:	4b54      	ldr	r3, [pc, #336]	@ (8016014 <tcp_receive+0x888>)
 8015ec4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015ec6:	4b53      	ldr	r3, [pc, #332]	@ (8016014 <tcp_receive+0x888>)
 8015ec8:	691b      	ldr	r3, [r3, #16]
 8015eca:	899b      	ldrh	r3, [r3, #12]
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7fa faf6 	bl	80104c0 <lwip_htons>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	f003 0302 	and.w	r3, r3, #2
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d005      	beq.n	8015eec <tcp_receive+0x760>
            inseg.len -= 1;
 8015ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8016014 <tcp_receive+0x888>)
 8015ee2:	891b      	ldrh	r3, [r3, #8]
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	b29a      	uxth	r2, r3
 8015ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8016014 <tcp_receive+0x888>)
 8015eea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015eec:	4b49      	ldr	r3, [pc, #292]	@ (8016014 <tcp_receive+0x888>)
 8015eee:	685b      	ldr	r3, [r3, #4]
 8015ef0:	4a48      	ldr	r2, [pc, #288]	@ (8016014 <tcp_receive+0x888>)
 8015ef2:	8912      	ldrh	r2, [r2, #8]
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fb fe7e 	bl	8011bf8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015efc:	4b45      	ldr	r3, [pc, #276]	@ (8016014 <tcp_receive+0x888>)
 8015efe:	891c      	ldrh	r4, [r3, #8]
 8015f00:	4b44      	ldr	r3, [pc, #272]	@ (8016014 <tcp_receive+0x888>)
 8015f02:	691b      	ldr	r3, [r3, #16]
 8015f04:	899b      	ldrh	r3, [r3, #12]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7fa fad9 	bl	80104c0 <lwip_htons>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	b2db      	uxtb	r3, r3
 8015f12:	f003 0303 	and.w	r3, r3, #3
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d001      	beq.n	8015f1e <tcp_receive+0x792>
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	e000      	b.n	8015f20 <tcp_receive+0x794>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	4423      	add	r3, r4
 8015f22:	b29a      	uxth	r2, r3
 8015f24:	4b3c      	ldr	r3, [pc, #240]	@ (8016018 <tcp_receive+0x88c>)
 8015f26:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015f28:	4b3b      	ldr	r3, [pc, #236]	@ (8016018 <tcp_receive+0x88c>)
 8015f2a:	881b      	ldrh	r3, [r3, #0]
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	4b38      	ldr	r3, [pc, #224]	@ (8016010 <tcp_receive+0x884>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	441a      	add	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f38:	6879      	ldr	r1, [r7, #4]
 8015f3a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015f3c:	440b      	add	r3, r1
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d006      	beq.n	8015f50 <tcp_receive+0x7c4>
 8015f42:	4b36      	ldr	r3, [pc, #216]	@ (801601c <tcp_receive+0x890>)
 8015f44:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015f48:	4935      	ldr	r1, [pc, #212]	@ (8016020 <tcp_receive+0x894>)
 8015f4a:	4836      	ldr	r0, [pc, #216]	@ (8016024 <tcp_receive+0x898>)
 8015f4c:	f008 fe92 	bl	801ec74 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	f000 80e6 	beq.w	8016126 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8016014 <tcp_receive+0x888>)
 8015f5c:	691b      	ldr	r3, [r3, #16]
 8015f5e:	899b      	ldrh	r3, [r3, #12]
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	4618      	mov	r0, r3
 8015f64:	f7fa faac 	bl	80104c0 <lwip_htons>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	f003 0301 	and.w	r3, r3, #1
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d010      	beq.n	8015f96 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015f74:	e00a      	b.n	8015f8c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f7a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7fd fd43 	bl	8013a12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d1f0      	bne.n	8015f76 <tcp_receive+0x7ea>
 8015f94:	e0c7      	b.n	8016126 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015f9c:	e051      	b.n	8016042 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fa0:	691b      	ldr	r3, [r3, #16]
 8015fa2:	899b      	ldrh	r3, [r3, #12]
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7fa fa8a 	bl	80104c0 <lwip_htons>
 8015fac:	4603      	mov	r3, r0
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	f003 0301 	and.w	r3, r3, #1
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d03c      	beq.n	8016032 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015fb8:	4b16      	ldr	r3, [pc, #88]	@ (8016014 <tcp_receive+0x888>)
 8015fba:	691b      	ldr	r3, [r3, #16]
 8015fbc:	899b      	ldrh	r3, [r3, #12]
 8015fbe:	b29b      	uxth	r3, r3
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f7fa fa7d 	bl	80104c0 <lwip_htons>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d12f      	bne.n	8016032 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015fd2:	4b10      	ldr	r3, [pc, #64]	@ (8016014 <tcp_receive+0x888>)
 8015fd4:	691b      	ldr	r3, [r3, #16]
 8015fd6:	899b      	ldrh	r3, [r3, #12]
 8015fd8:	b29c      	uxth	r4, r3
 8015fda:	2001      	movs	r0, #1
 8015fdc:	f7fa fa70 	bl	80104c0 <lwip_htons>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8016014 <tcp_receive+0x888>)
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	4322      	orrs	r2, r4
 8015fea:	b292      	uxth	r2, r2
 8015fec:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015fee:	4b09      	ldr	r3, [pc, #36]	@ (8016014 <tcp_receive+0x888>)
 8015ff0:	891c      	ldrh	r4, [r3, #8]
 8015ff2:	4b08      	ldr	r3, [pc, #32]	@ (8016014 <tcp_receive+0x888>)
 8015ff4:	691b      	ldr	r3, [r3, #16]
 8015ff6:	899b      	ldrh	r3, [r3, #12]
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fa fa60 	bl	80104c0 <lwip_htons>
 8016000:	4603      	mov	r3, r0
 8016002:	b2db      	uxtb	r3, r3
 8016004:	f003 0303 	and.w	r3, r3, #3
 8016008:	2b00      	cmp	r3, #0
 801600a:	d00d      	beq.n	8016028 <tcp_receive+0x89c>
 801600c:	2301      	movs	r3, #1
 801600e:	e00c      	b.n	801602a <tcp_receive+0x89e>
 8016010:	20013df8 	.word	0x20013df8
 8016014:	20013dd4 	.word	0x20013dd4
 8016018:	20013e02 	.word	0x20013e02
 801601c:	0802388c 	.word	0x0802388c
 8016020:	08023c34 	.word	0x08023c34
 8016024:	080238d8 	.word	0x080238d8
 8016028:	2300      	movs	r3, #0
 801602a:	4423      	add	r3, r4
 801602c:	b29a      	uxth	r2, r3
 801602e:	4b98      	ldr	r3, [pc, #608]	@ (8016290 <tcp_receive+0xb04>)
 8016030:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016034:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801603c:	6938      	ldr	r0, [r7, #16]
 801603e:	f7fd fce8 	bl	8013a12 <tcp_seg_free>
            while (next &&
 8016042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016044:	2b00      	cmp	r3, #0
 8016046:	d00e      	beq.n	8016066 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016048:	4b91      	ldr	r3, [pc, #580]	@ (8016290 <tcp_receive+0xb04>)
 801604a:	881b      	ldrh	r3, [r3, #0]
 801604c:	461a      	mov	r2, r3
 801604e:	4b91      	ldr	r3, [pc, #580]	@ (8016294 <tcp_receive+0xb08>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	441a      	add	r2, r3
 8016054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016056:	691b      	ldr	r3, [r3, #16]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801605c:	8909      	ldrh	r1, [r1, #8]
 801605e:	440b      	add	r3, r1
 8016060:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016062:	2b00      	cmp	r3, #0
 8016064:	da9b      	bge.n	8015f9e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016068:	2b00      	cmp	r3, #0
 801606a:	d059      	beq.n	8016120 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801606c:	4b88      	ldr	r3, [pc, #544]	@ (8016290 <tcp_receive+0xb04>)
 801606e:	881b      	ldrh	r3, [r3, #0]
 8016070:	461a      	mov	r2, r3
 8016072:	4b88      	ldr	r3, [pc, #544]	@ (8016294 <tcp_receive+0xb08>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	441a      	add	r2, r3
 8016078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801607a:	691b      	ldr	r3, [r3, #16]
 801607c:	685b      	ldr	r3, [r3, #4]
 801607e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016080:	2b00      	cmp	r3, #0
 8016082:	dd4d      	ble.n	8016120 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016086:	691b      	ldr	r3, [r3, #16]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	b29a      	uxth	r2, r3
 801608c:	4b81      	ldr	r3, [pc, #516]	@ (8016294 <tcp_receive+0xb08>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	b29b      	uxth	r3, r3
 8016092:	1ad3      	subs	r3, r2, r3
 8016094:	b29a      	uxth	r2, r3
 8016096:	4b80      	ldr	r3, [pc, #512]	@ (8016298 <tcp_receive+0xb0c>)
 8016098:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801609a:	4b7f      	ldr	r3, [pc, #508]	@ (8016298 <tcp_receive+0xb0c>)
 801609c:	691b      	ldr	r3, [r3, #16]
 801609e:	899b      	ldrh	r3, [r3, #12]
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7fa fa0c 	bl	80104c0 <lwip_htons>
 80160a8:	4603      	mov	r3, r0
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	f003 0302 	and.w	r3, r3, #2
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d005      	beq.n	80160c0 <tcp_receive+0x934>
                inseg.len -= 1;
 80160b4:	4b78      	ldr	r3, [pc, #480]	@ (8016298 <tcp_receive+0xb0c>)
 80160b6:	891b      	ldrh	r3, [r3, #8]
 80160b8:	3b01      	subs	r3, #1
 80160ba:	b29a      	uxth	r2, r3
 80160bc:	4b76      	ldr	r3, [pc, #472]	@ (8016298 <tcp_receive+0xb0c>)
 80160be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80160c0:	4b75      	ldr	r3, [pc, #468]	@ (8016298 <tcp_receive+0xb0c>)
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	4a74      	ldr	r2, [pc, #464]	@ (8016298 <tcp_receive+0xb0c>)
 80160c6:	8912      	ldrh	r2, [r2, #8]
 80160c8:	4611      	mov	r1, r2
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7fb fd94 	bl	8011bf8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80160d0:	4b71      	ldr	r3, [pc, #452]	@ (8016298 <tcp_receive+0xb0c>)
 80160d2:	891c      	ldrh	r4, [r3, #8]
 80160d4:	4b70      	ldr	r3, [pc, #448]	@ (8016298 <tcp_receive+0xb0c>)
 80160d6:	691b      	ldr	r3, [r3, #16]
 80160d8:	899b      	ldrh	r3, [r3, #12]
 80160da:	b29b      	uxth	r3, r3
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fa f9ef 	bl	80104c0 <lwip_htons>
 80160e2:	4603      	mov	r3, r0
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	f003 0303 	and.w	r3, r3, #3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d001      	beq.n	80160f2 <tcp_receive+0x966>
 80160ee:	2301      	movs	r3, #1
 80160f0:	e000      	b.n	80160f4 <tcp_receive+0x968>
 80160f2:	2300      	movs	r3, #0
 80160f4:	4423      	add	r3, r4
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	4b65      	ldr	r3, [pc, #404]	@ (8016290 <tcp_receive+0xb04>)
 80160fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80160fc:	4b64      	ldr	r3, [pc, #400]	@ (8016290 <tcp_receive+0xb04>)
 80160fe:	881b      	ldrh	r3, [r3, #0]
 8016100:	461a      	mov	r2, r3
 8016102:	4b64      	ldr	r3, [pc, #400]	@ (8016294 <tcp_receive+0xb08>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	441a      	add	r2, r3
 8016108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801610a:	691b      	ldr	r3, [r3, #16]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	429a      	cmp	r2, r3
 8016110:	d006      	beq.n	8016120 <tcp_receive+0x994>
 8016112:	4b62      	ldr	r3, [pc, #392]	@ (801629c <tcp_receive+0xb10>)
 8016114:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016118:	4961      	ldr	r1, [pc, #388]	@ (80162a0 <tcp_receive+0xb14>)
 801611a:	4862      	ldr	r0, [pc, #392]	@ (80162a4 <tcp_receive+0xb18>)
 801611c:	f008 fdaa 	bl	801ec74 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016124:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016126:	4b5a      	ldr	r3, [pc, #360]	@ (8016290 <tcp_receive+0xb04>)
 8016128:	881b      	ldrh	r3, [r3, #0]
 801612a:	461a      	mov	r2, r3
 801612c:	4b59      	ldr	r3, [pc, #356]	@ (8016294 <tcp_receive+0xb08>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	441a      	add	r2, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801613a:	4b55      	ldr	r3, [pc, #340]	@ (8016290 <tcp_receive+0xb04>)
 801613c:	881b      	ldrh	r3, [r3, #0]
 801613e:	429a      	cmp	r2, r3
 8016140:	d206      	bcs.n	8016150 <tcp_receive+0x9c4>
 8016142:	4b56      	ldr	r3, [pc, #344]	@ (801629c <tcp_receive+0xb10>)
 8016144:	f240 6207 	movw	r2, #1543	@ 0x607
 8016148:	4957      	ldr	r1, [pc, #348]	@ (80162a8 <tcp_receive+0xb1c>)
 801614a:	4856      	ldr	r0, [pc, #344]	@ (80162a4 <tcp_receive+0xb18>)
 801614c:	f008 fd92 	bl	801ec74 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016154:	4b4e      	ldr	r3, [pc, #312]	@ (8016290 <tcp_receive+0xb04>)
 8016156:	881b      	ldrh	r3, [r3, #0]
 8016158:	1ad3      	subs	r3, r2, r3
 801615a:	b29a      	uxth	r2, r3
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f7fc fe13 	bl	8012d8c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016166:	4b4c      	ldr	r3, [pc, #304]	@ (8016298 <tcp_receive+0xb0c>)
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	891b      	ldrh	r3, [r3, #8]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d006      	beq.n	801617e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016170:	4b49      	ldr	r3, [pc, #292]	@ (8016298 <tcp_receive+0xb0c>)
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	4a4d      	ldr	r2, [pc, #308]	@ (80162ac <tcp_receive+0xb20>)
 8016176:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016178:	4b47      	ldr	r3, [pc, #284]	@ (8016298 <tcp_receive+0xb0c>)
 801617a:	2200      	movs	r2, #0
 801617c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801617e:	4b46      	ldr	r3, [pc, #280]	@ (8016298 <tcp_receive+0xb0c>)
 8016180:	691b      	ldr	r3, [r3, #16]
 8016182:	899b      	ldrh	r3, [r3, #12]
 8016184:	b29b      	uxth	r3, r3
 8016186:	4618      	mov	r0, r3
 8016188:	f7fa f99a 	bl	80104c0 <lwip_htons>
 801618c:	4603      	mov	r3, r0
 801618e:	b2db      	uxtb	r3, r3
 8016190:	f003 0301 	and.w	r3, r3, #1
 8016194:	2b00      	cmp	r3, #0
 8016196:	f000 80b8 	beq.w	801630a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801619a:	4b45      	ldr	r3, [pc, #276]	@ (80162b0 <tcp_receive+0xb24>)
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	f043 0320 	orr.w	r3, r3, #32
 80161a2:	b2da      	uxtb	r2, r3
 80161a4:	4b42      	ldr	r3, [pc, #264]	@ (80162b0 <tcp_receive+0xb24>)
 80161a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80161a8:	e0af      	b.n	801630a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161b4:	691b      	ldr	r3, [r3, #16]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	4a36      	ldr	r2, [pc, #216]	@ (8016294 <tcp_receive+0xb08>)
 80161ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	891b      	ldrh	r3, [r3, #8]
 80161c0:	461c      	mov	r4, r3
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	691b      	ldr	r3, [r3, #16]
 80161c6:	899b      	ldrh	r3, [r3, #12]
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	4618      	mov	r0, r3
 80161cc:	f7fa f978 	bl	80104c0 <lwip_htons>
 80161d0:	4603      	mov	r3, r0
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	f003 0303 	and.w	r3, r3, #3
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d001      	beq.n	80161e0 <tcp_receive+0xa54>
 80161dc:	2301      	movs	r3, #1
 80161de:	e000      	b.n	80161e2 <tcp_receive+0xa56>
 80161e0:	2300      	movs	r3, #0
 80161e2:	191a      	adds	r2, r3, r4
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161e8:	441a      	add	r2, r3
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161f2:	461c      	mov	r4, r3
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	891b      	ldrh	r3, [r3, #8]
 80161f8:	461d      	mov	r5, r3
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	691b      	ldr	r3, [r3, #16]
 80161fe:	899b      	ldrh	r3, [r3, #12]
 8016200:	b29b      	uxth	r3, r3
 8016202:	4618      	mov	r0, r3
 8016204:	f7fa f95c 	bl	80104c0 <lwip_htons>
 8016208:	4603      	mov	r3, r0
 801620a:	b2db      	uxtb	r3, r3
 801620c:	f003 0303 	and.w	r3, r3, #3
 8016210:	2b00      	cmp	r3, #0
 8016212:	d001      	beq.n	8016218 <tcp_receive+0xa8c>
 8016214:	2301      	movs	r3, #1
 8016216:	e000      	b.n	801621a <tcp_receive+0xa8e>
 8016218:	2300      	movs	r3, #0
 801621a:	442b      	add	r3, r5
 801621c:	429c      	cmp	r4, r3
 801621e:	d206      	bcs.n	801622e <tcp_receive+0xaa2>
 8016220:	4b1e      	ldr	r3, [pc, #120]	@ (801629c <tcp_receive+0xb10>)
 8016222:	f240 622b 	movw	r2, #1579	@ 0x62b
 8016226:	4923      	ldr	r1, [pc, #140]	@ (80162b4 <tcp_receive+0xb28>)
 8016228:	481e      	ldr	r0, [pc, #120]	@ (80162a4 <tcp_receive+0xb18>)
 801622a:	f008 fd23 	bl	801ec74 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	891b      	ldrh	r3, [r3, #8]
 8016232:	461c      	mov	r4, r3
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	691b      	ldr	r3, [r3, #16]
 8016238:	899b      	ldrh	r3, [r3, #12]
 801623a:	b29b      	uxth	r3, r3
 801623c:	4618      	mov	r0, r3
 801623e:	f7fa f93f 	bl	80104c0 <lwip_htons>
 8016242:	4603      	mov	r3, r0
 8016244:	b2db      	uxtb	r3, r3
 8016246:	f003 0303 	and.w	r3, r3, #3
 801624a:	2b00      	cmp	r3, #0
 801624c:	d001      	beq.n	8016252 <tcp_receive+0xac6>
 801624e:	2301      	movs	r3, #1
 8016250:	e000      	b.n	8016254 <tcp_receive+0xac8>
 8016252:	2300      	movs	r3, #0
 8016254:	1919      	adds	r1, r3, r4
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801625a:	b28b      	uxth	r3, r1
 801625c:	1ad3      	subs	r3, r2, r3
 801625e:	b29a      	uxth	r2, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f7fc fd91 	bl	8012d8c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	891b      	ldrh	r3, [r3, #8]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d028      	beq.n	80162c6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016274:	4b0d      	ldr	r3, [pc, #52]	@ (80162ac <tcp_receive+0xb20>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d01d      	beq.n	80162b8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801627c:	4b0b      	ldr	r3, [pc, #44]	@ (80162ac <tcp_receive+0xb20>)
 801627e:	681a      	ldr	r2, [r3, #0]
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	4619      	mov	r1, r3
 8016286:	4610      	mov	r0, r2
 8016288:	f7fb ff0a 	bl	80120a0 <pbuf_cat>
 801628c:	e018      	b.n	80162c0 <tcp_receive+0xb34>
 801628e:	bf00      	nop
 8016290:	20013e02 	.word	0x20013e02
 8016294:	20013df8 	.word	0x20013df8
 8016298:	20013dd4 	.word	0x20013dd4
 801629c:	0802388c 	.word	0x0802388c
 80162a0:	08023c6c 	.word	0x08023c6c
 80162a4:	080238d8 	.word	0x080238d8
 80162a8:	08023ca8 	.word	0x08023ca8
 80162ac:	20013e08 	.word	0x20013e08
 80162b0:	20013e05 	.word	0x20013e05
 80162b4:	08023cc8 	.word	0x08023cc8
            } else {
              recv_data = cseg->p;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	4a70      	ldr	r2, [pc, #448]	@ (8016480 <tcp_receive+0xcf4>)
 80162be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	2200      	movs	r2, #0
 80162c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	691b      	ldr	r3, [r3, #16]
 80162ca:	899b      	ldrh	r3, [r3, #12]
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7fa f8f6 	bl	80104c0 <lwip_htons>
 80162d4:	4603      	mov	r3, r0
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	f003 0301 	and.w	r3, r3, #1
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d00d      	beq.n	80162fc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80162e0:	4b68      	ldr	r3, [pc, #416]	@ (8016484 <tcp_receive+0xcf8>)
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	f043 0320 	orr.w	r3, r3, #32
 80162e8:	b2da      	uxtb	r2, r3
 80162ea:	4b66      	ldr	r3, [pc, #408]	@ (8016484 <tcp_receive+0xcf8>)
 80162ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	7d1b      	ldrb	r3, [r3, #20]
 80162f2:	2b04      	cmp	r3, #4
 80162f4:	d102      	bne.n	80162fc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2207      	movs	r2, #7
 80162fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	681a      	ldr	r2, [r3, #0]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8016304:	68b8      	ldr	r0, [r7, #8]
 8016306:	f7fd fb84 	bl	8013a12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801630e:	2b00      	cmp	r3, #0
 8016310:	d008      	beq.n	8016324 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016316:	691b      	ldr	r3, [r3, #16]
 8016318:	685a      	ldr	r2, [r3, #4]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801631e:	429a      	cmp	r2, r3
 8016320:	f43f af43 	beq.w	80161aa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	8b5b      	ldrh	r3, [r3, #26]
 8016328:	f003 0301 	and.w	r3, r3, #1
 801632c:	2b00      	cmp	r3, #0
 801632e:	d00e      	beq.n	801634e <tcp_receive+0xbc2>
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	8b5b      	ldrh	r3, [r3, #26]
 8016334:	f023 0301 	bic.w	r3, r3, #1
 8016338:	b29a      	uxth	r2, r3
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	835a      	strh	r2, [r3, #26]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	8b5b      	ldrh	r3, [r3, #26]
 8016342:	f043 0302 	orr.w	r3, r3, #2
 8016346:	b29a      	uxth	r2, r3
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801634c:	e187      	b.n	801665e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	8b5b      	ldrh	r3, [r3, #26]
 8016352:	f043 0301 	orr.w	r3, r3, #1
 8016356:	b29a      	uxth	r2, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801635c:	e17f      	b.n	801665e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016362:	2b00      	cmp	r3, #0
 8016364:	d106      	bne.n	8016374 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016366:	4848      	ldr	r0, [pc, #288]	@ (8016488 <tcp_receive+0xcfc>)
 8016368:	f7fd fb6c 	bl	8013a44 <tcp_seg_copy>
 801636c:	4602      	mov	r2, r0
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	675a      	str	r2, [r3, #116]	@ 0x74
 8016372:	e16c      	b.n	801664e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016374:	2300      	movs	r3, #0
 8016376:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801637c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801637e:	e156      	b.n	801662e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8016380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016382:	691b      	ldr	r3, [r3, #16]
 8016384:	685a      	ldr	r2, [r3, #4]
 8016386:	4b41      	ldr	r3, [pc, #260]	@ (801648c <tcp_receive+0xd00>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	429a      	cmp	r2, r3
 801638c:	d11d      	bne.n	80163ca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801638e:	4b3e      	ldr	r3, [pc, #248]	@ (8016488 <tcp_receive+0xcfc>)
 8016390:	891a      	ldrh	r2, [r3, #8]
 8016392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016394:	891b      	ldrh	r3, [r3, #8]
 8016396:	429a      	cmp	r2, r3
 8016398:	f240 814e 	bls.w	8016638 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801639c:	483a      	ldr	r0, [pc, #232]	@ (8016488 <tcp_receive+0xcfc>)
 801639e:	f7fd fb51 	bl	8013a44 <tcp_seg_copy>
 80163a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	f000 8148 	beq.w	801663c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80163ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d003      	beq.n	80163ba <tcp_receive+0xc2e>
                    prev->next = cseg;
 80163b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163b4:	697a      	ldr	r2, [r7, #20]
 80163b6:	601a      	str	r2, [r3, #0]
 80163b8:	e002      	b.n	80163c0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	697a      	ldr	r2, [r7, #20]
 80163be:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80163c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80163c2:	6978      	ldr	r0, [r7, #20]
 80163c4:	f7ff f8de 	bl	8015584 <tcp_oos_insert_segment>
                }
                break;
 80163c8:	e138      	b.n	801663c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80163ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d117      	bne.n	8016400 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80163d0:	4b2e      	ldr	r3, [pc, #184]	@ (801648c <tcp_receive+0xd00>)
 80163d2:	681a      	ldr	r2, [r3, #0]
 80163d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d6:	691b      	ldr	r3, [r3, #16]
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	1ad3      	subs	r3, r2, r3
 80163dc:	2b00      	cmp	r3, #0
 80163de:	da57      	bge.n	8016490 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80163e0:	4829      	ldr	r0, [pc, #164]	@ (8016488 <tcp_receive+0xcfc>)
 80163e2:	f7fd fb2f 	bl	8013a44 <tcp_seg_copy>
 80163e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80163e8:	69bb      	ldr	r3, [r7, #24]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	f000 8128 	beq.w	8016640 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	69ba      	ldr	r2, [r7, #24]
 80163f4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80163f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80163f8:	69b8      	ldr	r0, [r7, #24]
 80163fa:	f7ff f8c3 	bl	8015584 <tcp_oos_insert_segment>
                  }
                  break;
 80163fe:	e11f      	b.n	8016640 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016400:	4b22      	ldr	r3, [pc, #136]	@ (801648c <tcp_receive+0xd00>)
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016406:	691b      	ldr	r3, [r3, #16]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	1ad3      	subs	r3, r2, r3
 801640c:	3b01      	subs	r3, #1
 801640e:	2b00      	cmp	r3, #0
 8016410:	db3e      	blt.n	8016490 <tcp_receive+0xd04>
 8016412:	4b1e      	ldr	r3, [pc, #120]	@ (801648c <tcp_receive+0xd00>)
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016418:	691b      	ldr	r3, [r3, #16]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	1ad3      	subs	r3, r2, r3
 801641e:	3301      	adds	r3, #1
 8016420:	2b00      	cmp	r3, #0
 8016422:	dc35      	bgt.n	8016490 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016424:	4818      	ldr	r0, [pc, #96]	@ (8016488 <tcp_receive+0xcfc>)
 8016426:	f7fd fb0d 	bl	8013a44 <tcp_seg_copy>
 801642a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	2b00      	cmp	r3, #0
 8016430:	f000 8108 	beq.w	8016644 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016436:	691b      	ldr	r3, [r3, #16]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801643c:	8912      	ldrh	r2, [r2, #8]
 801643e:	441a      	add	r2, r3
 8016440:	4b12      	ldr	r3, [pc, #72]	@ (801648c <tcp_receive+0xd00>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	1ad3      	subs	r3, r2, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	dd12      	ble.n	8016470 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801644a:	4b10      	ldr	r3, [pc, #64]	@ (801648c <tcp_receive+0xd00>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	b29a      	uxth	r2, r3
 8016450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016452:	691b      	ldr	r3, [r3, #16]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	b29b      	uxth	r3, r3
 8016458:	1ad3      	subs	r3, r2, r3
 801645a:	b29a      	uxth	r2, r3
 801645c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801645e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016462:	685a      	ldr	r2, [r3, #4]
 8016464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016466:	891b      	ldrh	r3, [r3, #8]
 8016468:	4619      	mov	r1, r3
 801646a:	4610      	mov	r0, r2
 801646c:	f7fb fbc4 	bl	8011bf8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016472:	69fa      	ldr	r2, [r7, #28]
 8016474:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016476:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016478:	69f8      	ldr	r0, [r7, #28]
 801647a:	f7ff f883 	bl	8015584 <tcp_oos_insert_segment>
                  }
                  break;
 801647e:	e0e1      	b.n	8016644 <tcp_receive+0xeb8>
 8016480:	20013e08 	.word	0x20013e08
 8016484:	20013e05 	.word	0x20013e05
 8016488:	20013dd4 	.word	0x20013dd4
 801648c:	20013df8 	.word	0x20013df8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016492:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	2b00      	cmp	r3, #0
 801649a:	f040 80c5 	bne.w	8016628 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801649e:	4b7f      	ldr	r3, [pc, #508]	@ (801669c <tcp_receive+0xf10>)
 80164a0:	681a      	ldr	r2, [r3, #0]
 80164a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164a4:	691b      	ldr	r3, [r3, #16]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	f340 80bc 	ble.w	8016628 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80164b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164b2:	691b      	ldr	r3, [r3, #16]
 80164b4:	899b      	ldrh	r3, [r3, #12]
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7fa f801 	bl	80104c0 <lwip_htons>
 80164be:	4603      	mov	r3, r0
 80164c0:	b2db      	uxtb	r3, r3
 80164c2:	f003 0301 	and.w	r3, r3, #1
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	f040 80be 	bne.w	8016648 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80164cc:	4874      	ldr	r0, [pc, #464]	@ (80166a0 <tcp_receive+0xf14>)
 80164ce:	f7fd fab9 	bl	8013a44 <tcp_seg_copy>
 80164d2:	4602      	mov	r2, r0
 80164d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80164d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	f000 80b5 	beq.w	801664c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80164e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164e4:	691b      	ldr	r3, [r3, #16]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80164ea:	8912      	ldrh	r2, [r2, #8]
 80164ec:	441a      	add	r2, r3
 80164ee:	4b6b      	ldr	r3, [pc, #428]	@ (801669c <tcp_receive+0xf10>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	1ad3      	subs	r3, r2, r3
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	dd12      	ble.n	801651e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80164f8:	4b68      	ldr	r3, [pc, #416]	@ (801669c <tcp_receive+0xf10>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	b29a      	uxth	r2, r3
 80164fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016500:	691b      	ldr	r3, [r3, #16]
 8016502:	685b      	ldr	r3, [r3, #4]
 8016504:	b29b      	uxth	r3, r3
 8016506:	1ad3      	subs	r3, r2, r3
 8016508:	b29a      	uxth	r2, r3
 801650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801650c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016510:	685a      	ldr	r2, [r3, #4]
 8016512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016514:	891b      	ldrh	r3, [r3, #8]
 8016516:	4619      	mov	r1, r3
 8016518:	4610      	mov	r0, r2
 801651a:	f7fb fb6d 	bl	8011bf8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801651e:	4b61      	ldr	r3, [pc, #388]	@ (80166a4 <tcp_receive+0xf18>)
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	461a      	mov	r2, r3
 8016524:	4b5d      	ldr	r3, [pc, #372]	@ (801669c <tcp_receive+0xf10>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	441a      	add	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801652e:	6879      	ldr	r1, [r7, #4]
 8016530:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016532:	440b      	add	r3, r1
 8016534:	1ad3      	subs	r3, r2, r3
 8016536:	2b00      	cmp	r3, #0
 8016538:	f340 8088 	ble.w	801664c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	691b      	ldr	r3, [r3, #16]
 8016542:	899b      	ldrh	r3, [r3, #12]
 8016544:	b29b      	uxth	r3, r3
 8016546:	4618      	mov	r0, r3
 8016548:	f7f9 ffba 	bl	80104c0 <lwip_htons>
 801654c:	4603      	mov	r3, r0
 801654e:	b2db      	uxtb	r3, r3
 8016550:	f003 0301 	and.w	r3, r3, #1
 8016554:	2b00      	cmp	r3, #0
 8016556:	d021      	beq.n	801659c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	691b      	ldr	r3, [r3, #16]
 801655e:	899b      	ldrh	r3, [r3, #12]
 8016560:	b29b      	uxth	r3, r3
 8016562:	b21b      	sxth	r3, r3
 8016564:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016568:	b21c      	sxth	r4, r3
 801656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	691b      	ldr	r3, [r3, #16]
 8016570:	899b      	ldrh	r3, [r3, #12]
 8016572:	b29b      	uxth	r3, r3
 8016574:	4618      	mov	r0, r3
 8016576:	f7f9 ffa3 	bl	80104c0 <lwip_htons>
 801657a:	4603      	mov	r3, r0
 801657c:	b2db      	uxtb	r3, r3
 801657e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016582:	b29b      	uxth	r3, r3
 8016584:	4618      	mov	r0, r3
 8016586:	f7f9 ff9b 	bl	80104c0 <lwip_htons>
 801658a:	4603      	mov	r3, r0
 801658c:	b21b      	sxth	r3, r3
 801658e:	4323      	orrs	r3, r4
 8016590:	b21a      	sxth	r2, r3
 8016592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	691b      	ldr	r3, [r3, #16]
 8016598:	b292      	uxth	r2, r2
 801659a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165a0:	b29a      	uxth	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165a6:	4413      	add	r3, r2
 80165a8:	b299      	uxth	r1, r3
 80165aa:	4b3c      	ldr	r3, [pc, #240]	@ (801669c <tcp_receive+0xf10>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	b29a      	uxth	r2, r3
 80165b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	1a8a      	subs	r2, r1, r2
 80165b6:	b292      	uxth	r2, r2
 80165b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80165ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	685a      	ldr	r2, [r3, #4]
 80165c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	891b      	ldrh	r3, [r3, #8]
 80165c6:	4619      	mov	r1, r3
 80165c8:	4610      	mov	r0, r2
 80165ca:	f7fb fb15 	bl	8011bf8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80165ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	891c      	ldrh	r4, [r3, #8]
 80165d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	691b      	ldr	r3, [r3, #16]
 80165da:	899b      	ldrh	r3, [r3, #12]
 80165dc:	b29b      	uxth	r3, r3
 80165de:	4618      	mov	r0, r3
 80165e0:	f7f9 ff6e 	bl	80104c0 <lwip_htons>
 80165e4:	4603      	mov	r3, r0
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	f003 0303 	and.w	r3, r3, #3
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d001      	beq.n	80165f4 <tcp_receive+0xe68>
 80165f0:	2301      	movs	r3, #1
 80165f2:	e000      	b.n	80165f6 <tcp_receive+0xe6a>
 80165f4:	2300      	movs	r3, #0
 80165f6:	4423      	add	r3, r4
 80165f8:	b29a      	uxth	r2, r3
 80165fa:	4b2a      	ldr	r3, [pc, #168]	@ (80166a4 <tcp_receive+0xf18>)
 80165fc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80165fe:	4b29      	ldr	r3, [pc, #164]	@ (80166a4 <tcp_receive+0xf18>)
 8016600:	881b      	ldrh	r3, [r3, #0]
 8016602:	461a      	mov	r2, r3
 8016604:	4b25      	ldr	r3, [pc, #148]	@ (801669c <tcp_receive+0xf10>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	441a      	add	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801660e:	6879      	ldr	r1, [r7, #4]
 8016610:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016612:	440b      	add	r3, r1
 8016614:	429a      	cmp	r2, r3
 8016616:	d019      	beq.n	801664c <tcp_receive+0xec0>
 8016618:	4b23      	ldr	r3, [pc, #140]	@ (80166a8 <tcp_receive+0xf1c>)
 801661a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801661e:	4923      	ldr	r1, [pc, #140]	@ (80166ac <tcp_receive+0xf20>)
 8016620:	4823      	ldr	r0, [pc, #140]	@ (80166b0 <tcp_receive+0xf24>)
 8016622:	f008 fb27 	bl	801ec74 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016626:	e011      	b.n	801664c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016630:	2b00      	cmp	r3, #0
 8016632:	f47f aea5 	bne.w	8016380 <tcp_receive+0xbf4>
 8016636:	e00a      	b.n	801664e <tcp_receive+0xec2>
                break;
 8016638:	bf00      	nop
 801663a:	e008      	b.n	801664e <tcp_receive+0xec2>
                break;
 801663c:	bf00      	nop
 801663e:	e006      	b.n	801664e <tcp_receive+0xec2>
                  break;
 8016640:	bf00      	nop
 8016642:	e004      	b.n	801664e <tcp_receive+0xec2>
                  break;
 8016644:	bf00      	nop
 8016646:	e002      	b.n	801664e <tcp_receive+0xec2>
                  break;
 8016648:	bf00      	nop
 801664a:	e000      	b.n	801664e <tcp_receive+0xec2>
                break;
 801664c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f001 ff1a 	bl	8018488 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016654:	e003      	b.n	801665e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f001 ff16 	bl	8018488 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801665c:	e01a      	b.n	8016694 <tcp_receive+0xf08>
 801665e:	e019      	b.n	8016694 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016660:	4b0e      	ldr	r3, [pc, #56]	@ (801669c <tcp_receive+0xf10>)
 8016662:	681a      	ldr	r2, [r3, #0]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016668:	1ad3      	subs	r3, r2, r3
 801666a:	2b00      	cmp	r3, #0
 801666c:	db0a      	blt.n	8016684 <tcp_receive+0xef8>
 801666e:	4b0b      	ldr	r3, [pc, #44]	@ (801669c <tcp_receive+0xf10>)
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016676:	6879      	ldr	r1, [r7, #4]
 8016678:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801667a:	440b      	add	r3, r1
 801667c:	1ad3      	subs	r3, r2, r3
 801667e:	3301      	adds	r3, #1
 8016680:	2b00      	cmp	r3, #0
 8016682:	dd07      	ble.n	8016694 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	8b5b      	ldrh	r3, [r3, #26]
 8016688:	f043 0302 	orr.w	r3, r3, #2
 801668c:	b29a      	uxth	r2, r3
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016692:	e7ff      	b.n	8016694 <tcp_receive+0xf08>
 8016694:	bf00      	nop
 8016696:	3750      	adds	r7, #80	@ 0x50
 8016698:	46bd      	mov	sp, r7
 801669a:	bdb0      	pop	{r4, r5, r7, pc}
 801669c:	20013df8 	.word	0x20013df8
 80166a0:	20013dd4 	.word	0x20013dd4
 80166a4:	20013e02 	.word	0x20013e02
 80166a8:	0802388c 	.word	0x0802388c
 80166ac:	08023c34 	.word	0x08023c34
 80166b0:	080238d8 	.word	0x080238d8

080166b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80166b4:	b480      	push	{r7}
 80166b6:	b083      	sub	sp, #12
 80166b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80166ba:	4b15      	ldr	r3, [pc, #84]	@ (8016710 <tcp_get_next_optbyte+0x5c>)
 80166bc:	881b      	ldrh	r3, [r3, #0]
 80166be:	1c5a      	adds	r2, r3, #1
 80166c0:	b291      	uxth	r1, r2
 80166c2:	4a13      	ldr	r2, [pc, #76]	@ (8016710 <tcp_get_next_optbyte+0x5c>)
 80166c4:	8011      	strh	r1, [r2, #0]
 80166c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80166c8:	4b12      	ldr	r3, [pc, #72]	@ (8016714 <tcp_get_next_optbyte+0x60>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d004      	beq.n	80166da <tcp_get_next_optbyte+0x26>
 80166d0:	4b11      	ldr	r3, [pc, #68]	@ (8016718 <tcp_get_next_optbyte+0x64>)
 80166d2:	881b      	ldrh	r3, [r3, #0]
 80166d4:	88fa      	ldrh	r2, [r7, #6]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d208      	bcs.n	80166ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80166da:	4b10      	ldr	r3, [pc, #64]	@ (801671c <tcp_get_next_optbyte+0x68>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	3314      	adds	r3, #20
 80166e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80166e2:	88fb      	ldrh	r3, [r7, #6]
 80166e4:	683a      	ldr	r2, [r7, #0]
 80166e6:	4413      	add	r3, r2
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	e00b      	b.n	8016704 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80166ec:	88fb      	ldrh	r3, [r7, #6]
 80166ee:	b2da      	uxtb	r2, r3
 80166f0:	4b09      	ldr	r3, [pc, #36]	@ (8016718 <tcp_get_next_optbyte+0x64>)
 80166f2:	881b      	ldrh	r3, [r3, #0]
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	1ad3      	subs	r3, r2, r3
 80166f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80166fa:	4b06      	ldr	r3, [pc, #24]	@ (8016714 <tcp_get_next_optbyte+0x60>)
 80166fc:	681a      	ldr	r2, [r3, #0]
 80166fe:	797b      	ldrb	r3, [r7, #5]
 8016700:	4413      	add	r3, r2
 8016702:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016704:	4618      	mov	r0, r3
 8016706:	370c      	adds	r7, #12
 8016708:	46bd      	mov	sp, r7
 801670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670e:	4770      	bx	lr
 8016710:	20013df4 	.word	0x20013df4
 8016714:	20013df0 	.word	0x20013df0
 8016718:	20013dee 	.word	0x20013dee
 801671c:	20013de8 	.word	0x20013de8

08016720 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d106      	bne.n	801673c <tcp_parseopt+0x1c>
 801672e:	4b33      	ldr	r3, [pc, #204]	@ (80167fc <tcp_parseopt+0xdc>)
 8016730:	f240 727d 	movw	r2, #1917	@ 0x77d
 8016734:	4932      	ldr	r1, [pc, #200]	@ (8016800 <tcp_parseopt+0xe0>)
 8016736:	4833      	ldr	r0, [pc, #204]	@ (8016804 <tcp_parseopt+0xe4>)
 8016738:	f008 fa9c 	bl	801ec74 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801673c:	4b32      	ldr	r3, [pc, #200]	@ (8016808 <tcp_parseopt+0xe8>)
 801673e:	881b      	ldrh	r3, [r3, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d057      	beq.n	80167f4 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016744:	4b31      	ldr	r3, [pc, #196]	@ (801680c <tcp_parseopt+0xec>)
 8016746:	2200      	movs	r2, #0
 8016748:	801a      	strh	r2, [r3, #0]
 801674a:	e047      	b.n	80167dc <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801674c:	f7ff ffb2 	bl	80166b4 <tcp_get_next_optbyte>
 8016750:	4603      	mov	r3, r0
 8016752:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016754:	7bfb      	ldrb	r3, [r7, #15]
 8016756:	2b02      	cmp	r3, #2
 8016758:	d006      	beq.n	8016768 <tcp_parseopt+0x48>
 801675a:	2b02      	cmp	r3, #2
 801675c:	dc2b      	bgt.n	80167b6 <tcp_parseopt+0x96>
 801675e:	2b00      	cmp	r3, #0
 8016760:	d043      	beq.n	80167ea <tcp_parseopt+0xca>
 8016762:	2b01      	cmp	r3, #1
 8016764:	d039      	beq.n	80167da <tcp_parseopt+0xba>
 8016766:	e026      	b.n	80167b6 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016768:	f7ff ffa4 	bl	80166b4 <tcp_get_next_optbyte>
 801676c:	4603      	mov	r3, r0
 801676e:	2b04      	cmp	r3, #4
 8016770:	d13d      	bne.n	80167ee <tcp_parseopt+0xce>
 8016772:	4b26      	ldr	r3, [pc, #152]	@ (801680c <tcp_parseopt+0xec>)
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	3301      	adds	r3, #1
 8016778:	4a23      	ldr	r2, [pc, #140]	@ (8016808 <tcp_parseopt+0xe8>)
 801677a:	8812      	ldrh	r2, [r2, #0]
 801677c:	4293      	cmp	r3, r2
 801677e:	da36      	bge.n	80167ee <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016780:	f7ff ff98 	bl	80166b4 <tcp_get_next_optbyte>
 8016784:	4603      	mov	r3, r0
 8016786:	021b      	lsls	r3, r3, #8
 8016788:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801678a:	f7ff ff93 	bl	80166b4 <tcp_get_next_optbyte>
 801678e:	4603      	mov	r3, r0
 8016790:	461a      	mov	r2, r3
 8016792:	89bb      	ldrh	r3, [r7, #12]
 8016794:	4313      	orrs	r3, r2
 8016796:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016798:	89bb      	ldrh	r3, [r7, #12]
 801679a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801679e:	4293      	cmp	r3, r2
 80167a0:	d804      	bhi.n	80167ac <tcp_parseopt+0x8c>
 80167a2:	89bb      	ldrh	r3, [r7, #12]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <tcp_parseopt+0x8c>
 80167a8:	89ba      	ldrh	r2, [r7, #12]
 80167aa:	e001      	b.n	80167b0 <tcp_parseopt+0x90>
 80167ac:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80167b4:	e012      	b.n	80167dc <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80167b6:	f7ff ff7d 	bl	80166b4 <tcp_get_next_optbyte>
 80167ba:	4603      	mov	r3, r0
 80167bc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80167be:	7afb      	ldrb	r3, [r7, #11]
 80167c0:	2b01      	cmp	r3, #1
 80167c2:	d916      	bls.n	80167f2 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80167c4:	7afb      	ldrb	r3, [r7, #11]
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	4b10      	ldr	r3, [pc, #64]	@ (801680c <tcp_parseopt+0xec>)
 80167ca:	881b      	ldrh	r3, [r3, #0]
 80167cc:	4413      	add	r3, r2
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	3b02      	subs	r3, #2
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	4b0d      	ldr	r3, [pc, #52]	@ (801680c <tcp_parseopt+0xec>)
 80167d6:	801a      	strh	r2, [r3, #0]
 80167d8:	e000      	b.n	80167dc <tcp_parseopt+0xbc>
          break;
 80167da:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80167dc:	4b0b      	ldr	r3, [pc, #44]	@ (801680c <tcp_parseopt+0xec>)
 80167de:	881a      	ldrh	r2, [r3, #0]
 80167e0:	4b09      	ldr	r3, [pc, #36]	@ (8016808 <tcp_parseopt+0xe8>)
 80167e2:	881b      	ldrh	r3, [r3, #0]
 80167e4:	429a      	cmp	r2, r3
 80167e6:	d3b1      	bcc.n	801674c <tcp_parseopt+0x2c>
 80167e8:	e004      	b.n	80167f4 <tcp_parseopt+0xd4>
          return;
 80167ea:	bf00      	nop
 80167ec:	e002      	b.n	80167f4 <tcp_parseopt+0xd4>
            return;
 80167ee:	bf00      	nop
 80167f0:	e000      	b.n	80167f4 <tcp_parseopt+0xd4>
            return;
 80167f2:	bf00      	nop
      }
    }
  }
}
 80167f4:	3710      	adds	r7, #16
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	0802388c 	.word	0x0802388c
 8016800:	08023cf0 	.word	0x08023cf0
 8016804:	080238d8 	.word	0x080238d8
 8016808:	20013dec 	.word	0x20013dec
 801680c:	20013df4 	.word	0x20013df4

08016810 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016810:	b480      	push	{r7}
 8016812:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016814:	4b05      	ldr	r3, [pc, #20]	@ (801682c <tcp_trigger_input_pcb_close+0x1c>)
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	f043 0310 	orr.w	r3, r3, #16
 801681c:	b2da      	uxtb	r2, r3
 801681e:	4b03      	ldr	r3, [pc, #12]	@ (801682c <tcp_trigger_input_pcb_close+0x1c>)
 8016820:	701a      	strb	r2, [r3, #0]
}
 8016822:	bf00      	nop
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr
 801682c:	20013e05 	.word	0x20013e05

08016830 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b084      	sub	sp, #16
 8016834:	af00      	add	r7, sp, #0
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d00a      	beq.n	8016858 <tcp_route+0x28>
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	7a1b      	ldrb	r3, [r3, #8]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d006      	beq.n	8016858 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	7a1b      	ldrb	r3, [r3, #8]
 801684e:	4618      	mov	r0, r3
 8016850:	f7fa ffc6 	bl	80117e0 <netif_get_by_index>
 8016854:	4603      	mov	r3, r0
 8016856:	e003      	b.n	8016860 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f005 fe95 	bl	801c588 <ip4_route>
 801685e:	4603      	mov	r3, r0
  }
}
 8016860:	4618      	mov	r0, r3
 8016862:	3710      	adds	r7, #16
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}

08016868 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016868:	b590      	push	{r4, r7, lr}
 801686a:	b087      	sub	sp, #28
 801686c:	af00      	add	r7, sp, #0
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	603b      	str	r3, [r7, #0]
 8016874:	4613      	mov	r3, r2
 8016876:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d105      	bne.n	801688a <tcp_create_segment+0x22>
 801687e:	4b45      	ldr	r3, [pc, #276]	@ (8016994 <tcp_create_segment+0x12c>)
 8016880:	22a3      	movs	r2, #163	@ 0xa3
 8016882:	4945      	ldr	r1, [pc, #276]	@ (8016998 <tcp_create_segment+0x130>)
 8016884:	4845      	ldr	r0, [pc, #276]	@ (801699c <tcp_create_segment+0x134>)
 8016886:	f008 f9f5 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d105      	bne.n	801689c <tcp_create_segment+0x34>
 8016890:	4b40      	ldr	r3, [pc, #256]	@ (8016994 <tcp_create_segment+0x12c>)
 8016892:	22a4      	movs	r2, #164	@ 0xa4
 8016894:	4942      	ldr	r1, [pc, #264]	@ (80169a0 <tcp_create_segment+0x138>)
 8016896:	4841      	ldr	r0, [pc, #260]	@ (801699c <tcp_create_segment+0x134>)
 8016898:	f008 f9ec 	bl	801ec74 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801689c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	f003 0304 	and.w	r3, r3, #4
 80168a8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80168aa:	2003      	movs	r0, #3
 80168ac:	f7fa fc36 	bl	801111c <memp_malloc>
 80168b0:	6138      	str	r0, [r7, #16]
 80168b2:	693b      	ldr	r3, [r7, #16]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d104      	bne.n	80168c2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80168b8:	68b8      	ldr	r0, [r7, #8]
 80168ba:	f7fb fb23 	bl	8011f04 <pbuf_free>
    return NULL;
 80168be:	2300      	movs	r3, #0
 80168c0:	e063      	b.n	801698a <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80168c8:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	2200      	movs	r2, #0
 80168ce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	68ba      	ldr	r2, [r7, #8]
 80168d4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80168d6:	68bb      	ldr	r3, [r7, #8]
 80168d8:	891a      	ldrh	r2, [r3, #8]
 80168da:	7dfb      	ldrb	r3, [r7, #23]
 80168dc:	b29b      	uxth	r3, r3
 80168de:	429a      	cmp	r2, r3
 80168e0:	d205      	bcs.n	80168ee <tcp_create_segment+0x86>
 80168e2:	4b2c      	ldr	r3, [pc, #176]	@ (8016994 <tcp_create_segment+0x12c>)
 80168e4:	22b0      	movs	r2, #176	@ 0xb0
 80168e6:	492f      	ldr	r1, [pc, #188]	@ (80169a4 <tcp_create_segment+0x13c>)
 80168e8:	482c      	ldr	r0, [pc, #176]	@ (801699c <tcp_create_segment+0x134>)
 80168ea:	f008 f9c3 	bl	801ec74 <iprintf>
  seg->len = p->tot_len - optlen;
 80168ee:	68bb      	ldr	r3, [r7, #8]
 80168f0:	891a      	ldrh	r2, [r3, #8]
 80168f2:	7dfb      	ldrb	r3, [r7, #23]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	b29a      	uxth	r2, r3
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	2200      	movs	r2, #0
 8016902:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016904:	2114      	movs	r1, #20
 8016906:	68b8      	ldr	r0, [r7, #8]
 8016908:	f7fb fa66 	bl	8011dd8 <pbuf_add_header>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d004      	beq.n	801691c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016912:	6938      	ldr	r0, [r7, #16]
 8016914:	f7fd f87d 	bl	8013a12 <tcp_seg_free>
    return NULL;
 8016918:	2300      	movs	r3, #0
 801691a:	e036      	b.n	801698a <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	685a      	ldr	r2, [r3, #4]
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	8ada      	ldrh	r2, [r3, #22]
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	691c      	ldr	r4, [r3, #16]
 801692e:	4610      	mov	r0, r2
 8016930:	f7f9 fdc6 	bl	80104c0 <lwip_htons>
 8016934:	4603      	mov	r3, r0
 8016936:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	8b1a      	ldrh	r2, [r3, #24]
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	691c      	ldr	r4, [r3, #16]
 8016940:	4610      	mov	r0, r2
 8016942:	f7f9 fdbd 	bl	80104c0 <lwip_htons>
 8016946:	4603      	mov	r3, r0
 8016948:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801694a:	693b      	ldr	r3, [r7, #16]
 801694c:	691c      	ldr	r4, [r3, #16]
 801694e:	6838      	ldr	r0, [r7, #0]
 8016950:	f7f9 fdcb 	bl	80104ea <lwip_htonl>
 8016954:	4603      	mov	r3, r0
 8016956:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016958:	7dfb      	ldrb	r3, [r7, #23]
 801695a:	089b      	lsrs	r3, r3, #2
 801695c:	b2db      	uxtb	r3, r3
 801695e:	3305      	adds	r3, #5
 8016960:	b29b      	uxth	r3, r3
 8016962:	031b      	lsls	r3, r3, #12
 8016964:	b29a      	uxth	r2, r3
 8016966:	79fb      	ldrb	r3, [r7, #7]
 8016968:	b29b      	uxth	r3, r3
 801696a:	4313      	orrs	r3, r2
 801696c:	b29a      	uxth	r2, r3
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	691c      	ldr	r4, [r3, #16]
 8016972:	4610      	mov	r0, r2
 8016974:	f7f9 fda4 	bl	80104c0 <lwip_htons>
 8016978:	4603      	mov	r3, r0
 801697a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801697c:	693b      	ldr	r3, [r7, #16]
 801697e:	691b      	ldr	r3, [r3, #16]
 8016980:	2200      	movs	r2, #0
 8016982:	749a      	strb	r2, [r3, #18]
 8016984:	2200      	movs	r2, #0
 8016986:	74da      	strb	r2, [r3, #19]
  return seg;
 8016988:	693b      	ldr	r3, [r7, #16]
}
 801698a:	4618      	mov	r0, r3
 801698c:	371c      	adds	r7, #28
 801698e:	46bd      	mov	sp, r7
 8016990:	bd90      	pop	{r4, r7, pc}
 8016992:	bf00      	nop
 8016994:	08023d0c 	.word	0x08023d0c
 8016998:	08023d40 	.word	0x08023d40
 801699c:	08023d60 	.word	0x08023d60
 80169a0:	08023d88 	.word	0x08023d88
 80169a4:	08023dac 	.word	0x08023dac

080169a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b086      	sub	sp, #24
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	607b      	str	r3, [r7, #4]
 80169b0:	4603      	mov	r3, r0
 80169b2:	73fb      	strb	r3, [r7, #15]
 80169b4:	460b      	mov	r3, r1
 80169b6:	81bb      	strh	r3, [r7, #12]
 80169b8:	4613      	mov	r3, r2
 80169ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80169bc:	89bb      	ldrh	r3, [r7, #12]
 80169be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d105      	bne.n	80169d2 <tcp_pbuf_prealloc+0x2a>
 80169c6:	4b30      	ldr	r3, [pc, #192]	@ (8016a88 <tcp_pbuf_prealloc+0xe0>)
 80169c8:	22e8      	movs	r2, #232	@ 0xe8
 80169ca:	4930      	ldr	r1, [pc, #192]	@ (8016a8c <tcp_pbuf_prealloc+0xe4>)
 80169cc:	4830      	ldr	r0, [pc, #192]	@ (8016a90 <tcp_pbuf_prealloc+0xe8>)
 80169ce:	f008 f951 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80169d2:	6a3b      	ldr	r3, [r7, #32]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d105      	bne.n	80169e4 <tcp_pbuf_prealloc+0x3c>
 80169d8:	4b2b      	ldr	r3, [pc, #172]	@ (8016a88 <tcp_pbuf_prealloc+0xe0>)
 80169da:	22e9      	movs	r2, #233	@ 0xe9
 80169dc:	492d      	ldr	r1, [pc, #180]	@ (8016a94 <tcp_pbuf_prealloc+0xec>)
 80169de:	482c      	ldr	r0, [pc, #176]	@ (8016a90 <tcp_pbuf_prealloc+0xe8>)
 80169e0:	f008 f948 	bl	801ec74 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80169e4:	89ba      	ldrh	r2, [r7, #12]
 80169e6:	897b      	ldrh	r3, [r7, #10]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d221      	bcs.n	8016a30 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80169ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80169f0:	f003 0302 	and.w	r3, r3, #2
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d111      	bne.n	8016a1c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80169f8:	6a3b      	ldr	r3, [r7, #32]
 80169fa:	8b5b      	ldrh	r3, [r3, #26]
 80169fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d115      	bne.n	8016a30 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016a04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d007      	beq.n	8016a1c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016a0c:	6a3b      	ldr	r3, [r7, #32]
 8016a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d103      	bne.n	8016a1c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016a14:	6a3b      	ldr	r3, [r7, #32]
 8016a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d009      	beq.n	8016a30 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016a1c:	89bb      	ldrh	r3, [r7, #12]
 8016a1e:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8016a22:	f023 0203 	bic.w	r2, r3, #3
 8016a26:	897b      	ldrh	r3, [r7, #10]
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	bf28      	it	cs
 8016a2c:	4613      	movcs	r3, r2
 8016a2e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016a30:	8af9      	ldrh	r1, [r7, #22]
 8016a32:	7bfb      	ldrb	r3, [r7, #15]
 8016a34:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7fa ff7b 	bl	8011934 <pbuf_alloc>
 8016a3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d101      	bne.n	8016a4a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016a46:	2300      	movs	r3, #0
 8016a48:	e019      	b.n	8016a7e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016a4a:	693b      	ldr	r3, [r7, #16]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d006      	beq.n	8016a60 <tcp_pbuf_prealloc+0xb8>
 8016a52:	4b0d      	ldr	r3, [pc, #52]	@ (8016a88 <tcp_pbuf_prealloc+0xe0>)
 8016a54:	f240 120b 	movw	r2, #267	@ 0x10b
 8016a58:	490f      	ldr	r1, [pc, #60]	@ (8016a98 <tcp_pbuf_prealloc+0xf0>)
 8016a5a:	480d      	ldr	r0, [pc, #52]	@ (8016a90 <tcp_pbuf_prealloc+0xe8>)
 8016a5c:	f008 f90a 	bl	801ec74 <iprintf>
  *oversize = p->len - length;
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	895a      	ldrh	r2, [r3, #10]
 8016a64:	89bb      	ldrh	r3, [r7, #12]
 8016a66:	1ad3      	subs	r3, r2, r3
 8016a68:	b29a      	uxth	r2, r3
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	89ba      	ldrh	r2, [r7, #12]
 8016a72:	811a      	strh	r2, [r3, #8]
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	891a      	ldrh	r2, [r3, #8]
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	815a      	strh	r2, [r3, #10]
  return p;
 8016a7c:	693b      	ldr	r3, [r7, #16]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3718      	adds	r7, #24
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop
 8016a88:	08023d0c 	.word	0x08023d0c
 8016a8c:	08023dc4 	.word	0x08023dc4
 8016a90:	08023d60 	.word	0x08023d60
 8016a94:	08023de8 	.word	0x08023de8
 8016a98:	08023e08 	.word	0x08023e08

08016a9c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d106      	bne.n	8016abc <tcp_write_checks+0x20>
 8016aae:	4b33      	ldr	r3, [pc, #204]	@ (8016b7c <tcp_write_checks+0xe0>)
 8016ab0:	f240 1233 	movw	r2, #307	@ 0x133
 8016ab4:	4932      	ldr	r1, [pc, #200]	@ (8016b80 <tcp_write_checks+0xe4>)
 8016ab6:	4833      	ldr	r0, [pc, #204]	@ (8016b84 <tcp_write_checks+0xe8>)
 8016ab8:	f008 f8dc 	bl	801ec74 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	7d1b      	ldrb	r3, [r3, #20]
 8016ac0:	2b04      	cmp	r3, #4
 8016ac2:	d00e      	beq.n	8016ae2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016ac8:	2b07      	cmp	r3, #7
 8016aca:	d00a      	beq.n	8016ae2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016ad0:	2b02      	cmp	r3, #2
 8016ad2:	d006      	beq.n	8016ae2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016ad8:	2b03      	cmp	r3, #3
 8016ada:	d002      	beq.n	8016ae2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016adc:	f06f 030a 	mvn.w	r3, #10
 8016ae0:	e048      	b.n	8016b74 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016ae2:	887b      	ldrh	r3, [r7, #2]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d101      	bne.n	8016aec <tcp_write_checks+0x50>
    return ERR_OK;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	e043      	b.n	8016b74 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016af2:	887a      	ldrh	r2, [r7, #2]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d909      	bls.n	8016b0c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	8b5b      	ldrh	r3, [r3, #26]
 8016afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b00:	b29a      	uxth	r2, r3
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016b06:	f04f 33ff 	mov.w	r3, #4294967295
 8016b0a:	e033      	b.n	8016b74 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b12:	2b0f      	cmp	r3, #15
 8016b14:	d909      	bls.n	8016b2a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	8b5b      	ldrh	r3, [r3, #26]
 8016b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016b24:	f04f 33ff 	mov.w	r3, #4294967295
 8016b28:	e024      	b.n	8016b74 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d00f      	beq.n	8016b54 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d11a      	bne.n	8016b72 <tcp_write_checks+0xd6>
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d116      	bne.n	8016b72 <tcp_write_checks+0xd6>
 8016b44:	4b0d      	ldr	r3, [pc, #52]	@ (8016b7c <tcp_write_checks+0xe0>)
 8016b46:	f240 1255 	movw	r2, #341	@ 0x155
 8016b4a:	490f      	ldr	r1, [pc, #60]	@ (8016b88 <tcp_write_checks+0xec>)
 8016b4c:	480d      	ldr	r0, [pc, #52]	@ (8016b84 <tcp_write_checks+0xe8>)
 8016b4e:	f008 f891 	bl	801ec74 <iprintf>
 8016b52:	e00e      	b.n	8016b72 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d103      	bne.n	8016b64 <tcp_write_checks+0xc8>
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d006      	beq.n	8016b72 <tcp_write_checks+0xd6>
 8016b64:	4b05      	ldr	r3, [pc, #20]	@ (8016b7c <tcp_write_checks+0xe0>)
 8016b66:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8016b6a:	4908      	ldr	r1, [pc, #32]	@ (8016b8c <tcp_write_checks+0xf0>)
 8016b6c:	4805      	ldr	r0, [pc, #20]	@ (8016b84 <tcp_write_checks+0xe8>)
 8016b6e:	f008 f881 	bl	801ec74 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016b72:	2300      	movs	r3, #0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}
 8016b7c:	08023d0c 	.word	0x08023d0c
 8016b80:	08023e1c 	.word	0x08023e1c
 8016b84:	08023d60 	.word	0x08023d60
 8016b88:	08023e3c 	.word	0x08023e3c
 8016b8c:	08023e78 	.word	0x08023e78

08016b90 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016b90:	b590      	push	{r4, r7, lr}
 8016b92:	b09d      	sub	sp, #116	@ 0x74
 8016b94:	af04      	add	r7, sp, #16
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	4611      	mov	r1, r2
 8016b9c:	461a      	mov	r2, r3
 8016b9e:	460b      	mov	r3, r1
 8016ba0:	80fb      	strh	r3, [r7, #6]
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016baa:	2300      	movs	r3, #0
 8016bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8016bae:	2300      	movs	r3, #0
 8016bb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8016bba:	2300      	movs	r3, #0
 8016bbc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d109      	bne.n	8016bf6 <tcp_write+0x66>
 8016be2:	4b9c      	ldr	r3, [pc, #624]	@ (8016e54 <tcp_write+0x2c4>)
 8016be4:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8016be8:	499b      	ldr	r1, [pc, #620]	@ (8016e58 <tcp_write+0x2c8>)
 8016bea:	489c      	ldr	r0, [pc, #624]	@ (8016e5c <tcp_write+0x2cc>)
 8016bec:	f008 f842 	bl	801ec74 <iprintf>
 8016bf0:	f06f 030f 	mvn.w	r3, #15
 8016bf4:	e379      	b.n	80172ea <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016bfc:	085b      	lsrs	r3, r3, #1
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c04:	4293      	cmp	r3, r2
 8016c06:	bf28      	it	cs
 8016c08:	4613      	movcs	r3, r2
 8016c0a:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8016c0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d102      	bne.n	8016c18 <tcp_write+0x88>
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c16:	e000      	b.n	8016c1a <tcp_write+0x8a>
 8016c18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d109      	bne.n	8016c36 <tcp_write+0xa6>
 8016c22:	4b8c      	ldr	r3, [pc, #560]	@ (8016e54 <tcp_write+0x2c4>)
 8016c24:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8016c28:	498d      	ldr	r1, [pc, #564]	@ (8016e60 <tcp_write+0x2d0>)
 8016c2a:	488c      	ldr	r0, [pc, #560]	@ (8016e5c <tcp_write+0x2cc>)
 8016c2c:	f008 f822 	bl	801ec74 <iprintf>
 8016c30:	f06f 030f 	mvn.w	r3, #15
 8016c34:	e359      	b.n	80172ea <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016c36:	88fb      	ldrh	r3, [r7, #6]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	68f8      	ldr	r0, [r7, #12]
 8016c3c:	f7ff ff2e 	bl	8016a9c <tcp_write_checks>
 8016c40:	4603      	mov	r3, r0
 8016c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8016c46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d002      	beq.n	8016c54 <tcp_write+0xc4>
    return err;
 8016c4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016c52:	e34a      	b.n	80172ea <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016c5a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016c5e:	2300      	movs	r3, #0
 8016c60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	f000 8127 	beq.w	8016ebc <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8016c74:	e002      	b.n	8016c7c <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8016c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1f8      	bne.n	8016c76 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c86:	7b1b      	ldrb	r3, [r3, #12]
 8016c88:	009b      	lsls	r3, r3, #2
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	f003 0304 	and.w	r3, r3, #4
 8016c90:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016c92:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c96:	891b      	ldrh	r3, [r3, #8]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c9c:	440b      	add	r3, r1
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	da06      	bge.n	8016cb0 <tcp_write+0x120>
 8016ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8016e54 <tcp_write+0x2c4>)
 8016ca4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016ca8:	496e      	ldr	r1, [pc, #440]	@ (8016e64 <tcp_write+0x2d4>)
 8016caa:	486c      	ldr	r0, [pc, #432]	@ (8016e5c <tcp_write+0x2cc>)
 8016cac:	f007 ffe2 	bl	801ec74 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cb2:	891a      	ldrh	r2, [r3, #8]
 8016cb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016cb6:	4413      	add	r3, r2
 8016cb8:	b29b      	uxth	r3, r3
 8016cba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016cbc:	1ad3      	subs	r3, r2, r3
 8016cbe:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8016cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cca:	895b      	ldrh	r3, [r3, #10]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d006      	beq.n	8016cde <tcp_write+0x14e>
 8016cd0:	4b60      	ldr	r3, [pc, #384]	@ (8016e54 <tcp_write+0x2c4>)
 8016cd2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8016cd6:	4964      	ldr	r1, [pc, #400]	@ (8016e68 <tcp_write+0x2d8>)
 8016cd8:	4860      	ldr	r0, [pc, #384]	@ (8016e5c <tcp_write+0x2cc>)
 8016cda:	f007 ffcb 	bl	801ec74 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016ce4:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8016ce6:	8afb      	ldrh	r3, [r7, #22]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d02e      	beq.n	8016d4a <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016cec:	8afb      	ldrh	r3, [r7, #22]
 8016cee:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d206      	bcs.n	8016d04 <tcp_write+0x174>
 8016cf6:	4b57      	ldr	r3, [pc, #348]	@ (8016e54 <tcp_write+0x2c4>)
 8016cf8:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8016cfc:	495b      	ldr	r1, [pc, #364]	@ (8016e6c <tcp_write+0x2dc>)
 8016cfe:	4857      	ldr	r0, [pc, #348]	@ (8016e5c <tcp_write+0x2cc>)
 8016d00:	f007 ffb8 	bl	801ec74 <iprintf>
      seg = last_unsent;
 8016d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d06:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016d08:	8afb      	ldrh	r3, [r7, #22]
 8016d0a:	88fa      	ldrh	r2, [r7, #6]
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	bf28      	it	cs
 8016d10:	4613      	movcs	r3, r2
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016d18:	4293      	cmp	r3, r2
 8016d1a:	bf28      	it	cs
 8016d1c:	4613      	movcs	r3, r2
 8016d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 8016d22:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016d26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d2a:	4413      	add	r3, r2
 8016d2c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8016d30:	8afa      	ldrh	r2, [r7, #22]
 8016d32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d36:	1ad3      	subs	r3, r2, r3
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8016d3c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016d40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016d4a:	8afb      	ldrh	r3, [r7, #22]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d00b      	beq.n	8016d68 <tcp_write+0x1d8>
 8016d50:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016d54:	88fb      	ldrh	r3, [r7, #6]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d006      	beq.n	8016d68 <tcp_write+0x1d8>
 8016d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8016e54 <tcp_write+0x2c4>)
 8016d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016d60:	4943      	ldr	r1, [pc, #268]	@ (8016e70 <tcp_write+0x2e0>)
 8016d62:	483e      	ldr	r0, [pc, #248]	@ (8016e5c <tcp_write+0x2cc>)
 8016d64:	f007 ff86 	bl	801ec74 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016d68:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016d6c:	88fb      	ldrh	r3, [r7, #6]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	f080 8172 	bcs.w	8017058 <tcp_write+0x4c8>
 8016d74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	f000 816d 	beq.w	8017058 <tcp_write+0x4c8>
 8016d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d80:	891b      	ldrh	r3, [r3, #8]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	f000 8168 	beq.w	8017058 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016d88:	88fa      	ldrh	r2, [r7, #6]
 8016d8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016d8e:	1ad2      	subs	r2, r2, r3
 8016d90:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8016d94:	4293      	cmp	r3, r2
 8016d96:	bfa8      	it	ge
 8016d98:	4613      	movge	r3, r2
 8016d9a:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8016d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d9e:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016da0:	797b      	ldrb	r3, [r7, #5]
 8016da2:	f003 0301 	and.w	r3, r3, #1
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d02b      	beq.n	8016e02 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016daa:	f107 0016 	add.w	r0, r7, #22
 8016dae:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016db2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8016db4:	2301      	movs	r3, #1
 8016db6:	9302      	str	r3, [sp, #8]
 8016db8:	797b      	ldrb	r3, [r7, #5]
 8016dba:	9301      	str	r3, [sp, #4]
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	9300      	str	r3, [sp, #0]
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2000      	movs	r0, #0
 8016dc4:	f7ff fdf0 	bl	80169a8 <tcp_pbuf_prealloc>
 8016dc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8016dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 825a 	beq.w	8017286 <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8016dd2:	8afb      	ldrh	r3, [r7, #22]
 8016dd4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016dda:	6858      	ldr	r0, [r3, #4]
 8016ddc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016de0:	68ba      	ldr	r2, [r7, #8]
 8016de2:	4413      	add	r3, r2
 8016de4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016de6:	4619      	mov	r1, r3
 8016de8:	f008 f96b 	bl	801f0c2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016dec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016dee:	f7fb f917 	bl	8012020 <pbuf_clen>
 8016df2:	4603      	mov	r3, r0
 8016df4:	461a      	mov	r2, r3
 8016df6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016dfa:	4413      	add	r3, r2
 8016dfc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016e00:	e055      	b.n	8016eae <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016e08:	e002      	b.n	8016e10 <tcp_write+0x280>
 8016e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d1f8      	bne.n	8016e0a <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e1a:	7b1b      	ldrb	r3, [r3, #12]
 8016e1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d129      	bne.n	8016e78 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016e2a:	8952      	ldrh	r2, [r2, #10]
 8016e2c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016e2e:	68ba      	ldr	r2, [r7, #8]
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d121      	bne.n	8016e78 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016e34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d006      	beq.n	8016e4a <tcp_write+0x2ba>
 8016e3c:	4b05      	ldr	r3, [pc, #20]	@ (8016e54 <tcp_write+0x2c4>)
 8016e3e:	f240 2231 	movw	r2, #561	@ 0x231
 8016e42:	490c      	ldr	r1, [pc, #48]	@ (8016e74 <tcp_write+0x2e4>)
 8016e44:	4805      	ldr	r0, [pc, #20]	@ (8016e5c <tcp_write+0x2cc>)
 8016e46:	f007 ff15 	bl	801ec74 <iprintf>
          extendlen = seglen;
 8016e4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e4c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8016e50:	e02d      	b.n	8016eae <tcp_write+0x31e>
 8016e52:	bf00      	nop
 8016e54:	08023d0c 	.word	0x08023d0c
 8016e58:	08023eac 	.word	0x08023eac
 8016e5c:	08023d60 	.word	0x08023d60
 8016e60:	08023ec4 	.word	0x08023ec4
 8016e64:	08023ef8 	.word	0x08023ef8
 8016e68:	08023f10 	.word	0x08023f10
 8016e6c:	08023f40 	.word	0x08023f40
 8016e70:	08023f60 	.word	0x08023f60
 8016e74:	08023f80 	.word	0x08023f80
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	2000      	movs	r0, #0
 8016e80:	f7fa fd58 	bl	8011934 <pbuf_alloc>
 8016e84:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8016e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f000 81fe 	beq.w	801728a <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016e8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016e92:	68ba      	ldr	r2, [r7, #8]
 8016e94:	441a      	add	r2, r3
 8016e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e98:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016e9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016e9c:	f7fb f8c0 	bl	8012020 <pbuf_clen>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016ea8:	4413      	add	r3, r2
 8016eaa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016eae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016eb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016eb4:	4413      	add	r3, r2
 8016eb6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8016eba:	e0cd      	b.n	8017058 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f000 80c8 	beq.w	8017058 <tcp_write+0x4c8>
 8016ec8:	4b72      	ldr	r3, [pc, #456]	@ (8017094 <tcp_write+0x504>)
 8016eca:	f240 224a 	movw	r2, #586	@ 0x24a
 8016ece:	4972      	ldr	r1, [pc, #456]	@ (8017098 <tcp_write+0x508>)
 8016ed0:	4872      	ldr	r0, [pc, #456]	@ (801709c <tcp_write+0x50c>)
 8016ed2:	f007 fecf 	bl	801ec74 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016ed6:	e0bf      	b.n	8017058 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8016ed8:	88fa      	ldrh	r2, [r7, #6]
 8016eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016ede:	1ad3      	subs	r3, r2, r3
 8016ee0:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8016ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016ee6:	b29b      	uxth	r3, r3
 8016ee8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016eea:	1ad3      	subs	r3, r2, r3
 8016eec:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016eee:	8bfa      	ldrh	r2, [r7, #30]
 8016ef0:	8c3b      	ldrh	r3, [r7, #32]
 8016ef2:	4293      	cmp	r3, r2
 8016ef4:	bf28      	it	cs
 8016ef6:	4613      	movcs	r3, r2
 8016ef8:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016efa:	797b      	ldrb	r3, [r7, #5]
 8016efc:	f003 0301 	and.w	r3, r3, #1
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d036      	beq.n	8016f72 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016f08:	b29a      	uxth	r2, r3
 8016f0a:	8bbb      	ldrh	r3, [r7, #28]
 8016f0c:	4413      	add	r3, r2
 8016f0e:	b299      	uxth	r1, r3
 8016f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	bf0c      	ite	eq
 8016f16:	2301      	moveq	r3, #1
 8016f18:	2300      	movne	r3, #0
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	f107 0016 	add.w	r0, r7, #22
 8016f20:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016f22:	9302      	str	r3, [sp, #8]
 8016f24:	797b      	ldrb	r3, [r7, #5]
 8016f26:	9301      	str	r3, [sp, #4]
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	2036      	movs	r0, #54	@ 0x36
 8016f30:	f7ff fd3a 	bl	80169a8 <tcp_pbuf_prealloc>
 8016f34:	6378      	str	r0, [r7, #52]	@ 0x34
 8016f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	f000 81a8 	beq.w	801728e <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f40:	895b      	ldrh	r3, [r3, #10]
 8016f42:	8bba      	ldrh	r2, [r7, #28]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d906      	bls.n	8016f56 <tcp_write+0x3c6>
 8016f48:	4b52      	ldr	r3, [pc, #328]	@ (8017094 <tcp_write+0x504>)
 8016f4a:	f240 2266 	movw	r2, #614	@ 0x266
 8016f4e:	4954      	ldr	r1, [pc, #336]	@ (80170a0 <tcp_write+0x510>)
 8016f50:	4852      	ldr	r0, [pc, #328]	@ (801709c <tcp_write+0x50c>)
 8016f52:	f007 fe8f 	bl	801ec74 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f58:	685a      	ldr	r2, [r3, #4]
 8016f5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016f5e:	18d0      	adds	r0, r2, r3
 8016f60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	4413      	add	r3, r2
 8016f68:	8bba      	ldrh	r2, [r7, #28]
 8016f6a:	4619      	mov	r1, r3
 8016f6c:	f008 f8a9 	bl	801f0c2 <memcpy>
 8016f70:	e02f      	b.n	8016fd2 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016f72:	8afb      	ldrh	r3, [r7, #22]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d006      	beq.n	8016f86 <tcp_write+0x3f6>
 8016f78:	4b46      	ldr	r3, [pc, #280]	@ (8017094 <tcp_write+0x504>)
 8016f7a:	f240 2271 	movw	r2, #625	@ 0x271
 8016f7e:	4949      	ldr	r1, [pc, #292]	@ (80170a4 <tcp_write+0x514>)
 8016f80:	4846      	ldr	r0, [pc, #280]	@ (801709c <tcp_write+0x50c>)
 8016f82:	f007 fe77 	bl	801ec74 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016f86:	8bbb      	ldrh	r3, [r7, #28]
 8016f88:	2201      	movs	r2, #1
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	2036      	movs	r0, #54	@ 0x36
 8016f8e:	f7fa fcd1 	bl	8011934 <pbuf_alloc>
 8016f92:	61b8      	str	r0, [r7, #24]
 8016f94:	69bb      	ldr	r3, [r7, #24]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	f000 817b 	beq.w	8017292 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016f9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016fa0:	68ba      	ldr	r2, [r7, #8]
 8016fa2:	441a      	add	r2, r3
 8016fa4:	69bb      	ldr	r3, [r7, #24]
 8016fa6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	2036      	movs	r0, #54	@ 0x36
 8016fb6:	f7fa fcbd 	bl	8011934 <pbuf_alloc>
 8016fba:	6378      	str	r0, [r7, #52]	@ 0x34
 8016fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d103      	bne.n	8016fca <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016fc2:	69b8      	ldr	r0, [r7, #24]
 8016fc4:	f7fa ff9e 	bl	8011f04 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016fc8:	e166      	b.n	8017298 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016fca:	69b9      	ldr	r1, [r7, #24]
 8016fcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016fce:	f7fb f867 	bl	80120a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016fd2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016fd4:	f7fb f824 	bl	8012020 <pbuf_clen>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	461a      	mov	r2, r3
 8016fdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016fe0:	4413      	add	r3, r2
 8016fe2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016fe6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016fea:	2b10      	cmp	r3, #16
 8016fec:	d903      	bls.n	8016ff6 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016fee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016ff0:	f7fa ff88 	bl	8011f04 <pbuf_free>
      goto memerr;
 8016ff4:	e150      	b.n	8017298 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016ffa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016ffe:	441a      	add	r2, r3
 8017000:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017004:	9300      	str	r3, [sp, #0]
 8017006:	4613      	mov	r3, r2
 8017008:	2200      	movs	r2, #0
 801700a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801700c:	68f8      	ldr	r0, [r7, #12]
 801700e:	f7ff fc2b 	bl	8016868 <tcp_create_segment>
 8017012:	6578      	str	r0, [r7, #84]	@ 0x54
 8017014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017016:	2b00      	cmp	r3, #0
 8017018:	f000 813d 	beq.w	8017296 <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801701c:	8afa      	ldrh	r2, [r7, #22]
 801701e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017020:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017024:	2b00      	cmp	r3, #0
 8017026:	d102      	bne.n	801702e <tcp_write+0x49e>
      queue = seg;
 8017028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801702a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801702c:	e00c      	b.n	8017048 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801702e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017030:	2b00      	cmp	r3, #0
 8017032:	d106      	bne.n	8017042 <tcp_write+0x4b2>
 8017034:	4b17      	ldr	r3, [pc, #92]	@ (8017094 <tcp_write+0x504>)
 8017036:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801703a:	491b      	ldr	r1, [pc, #108]	@ (80170a8 <tcp_write+0x518>)
 801703c:	4817      	ldr	r0, [pc, #92]	@ (801709c <tcp_write+0x50c>)
 801703e:	f007 fe19 	bl	801ec74 <iprintf>
      prev_seg->next = seg;
 8017042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017046:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801704a:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801704c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8017050:	8bbb      	ldrh	r3, [r7, #28]
 8017052:	4413      	add	r3, r2
 8017054:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8017058:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801705c:	88fb      	ldrh	r3, [r7, #6]
 801705e:	429a      	cmp	r2, r3
 8017060:	f4ff af3a 	bcc.w	8016ed8 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8017064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017066:	2b00      	cmp	r3, #0
 8017068:	d00b      	beq.n	8017082 <tcp_write+0x4f2>
 801706a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801706e:	2b00      	cmp	r3, #0
 8017070:	d007      	beq.n	8017082 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8017072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017074:	895a      	ldrh	r2, [r3, #10]
 8017076:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801707a:	4413      	add	r3, r2
 801707c:	b29a      	uxth	r2, r3
 801707e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017080:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017086:	2b00      	cmp	r3, #0
 8017088:	d052      	beq.n	8017130 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801708a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801708c:	685b      	ldr	r3, [r3, #4]
 801708e:	633b      	str	r3, [r7, #48]	@ 0x30
 8017090:	e02e      	b.n	80170f0 <tcp_write+0x560>
 8017092:	bf00      	nop
 8017094:	08023d0c 	.word	0x08023d0c
 8017098:	08023fac 	.word	0x08023fac
 801709c:	08023d60 	.word	0x08023d60
 80170a0:	08023fdc 	.word	0x08023fdc
 80170a4:	0802401c 	.word	0x0802401c
 80170a8:	0802402c 	.word	0x0802402c
      p->tot_len += oversize_used;
 80170ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ae:	891a      	ldrh	r2, [r3, #8]
 80170b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80170b4:	4413      	add	r3, r2
 80170b6:	b29a      	uxth	r2, r3
 80170b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ba:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80170bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d112      	bne.n	80170ea <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80170c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170ca:	8952      	ldrh	r2, [r2, #10]
 80170cc:	4413      	add	r3, r2
 80170ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80170d2:	68b9      	ldr	r1, [r7, #8]
 80170d4:	4618      	mov	r0, r3
 80170d6:	f007 fff4 	bl	801f0c2 <memcpy>
        p->len += oversize_used;
 80170da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170dc:	895a      	ldrh	r2, [r3, #10]
 80170de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80170e2:	4413      	add	r3, r2
 80170e4:	b29a      	uxth	r2, r3
 80170e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170e8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80170ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80170f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1da      	bne.n	80170ac <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 80170f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80170f8:	891a      	ldrh	r2, [r3, #8]
 80170fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80170fe:	4413      	add	r3, r2
 8017100:	b29a      	uxth	r2, r3
 8017102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017104:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8017106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017108:	895b      	ldrh	r3, [r3, #10]
 801710a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801710e:	429a      	cmp	r2, r3
 8017110:	d906      	bls.n	8017120 <tcp_write+0x590>
 8017112:	4b78      	ldr	r3, [pc, #480]	@ (80172f4 <tcp_write+0x764>)
 8017114:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017118:	4977      	ldr	r1, [pc, #476]	@ (80172f8 <tcp_write+0x768>)
 801711a:	4878      	ldr	r0, [pc, #480]	@ (80172fc <tcp_write+0x76c>)
 801711c:	f007 fdaa 	bl	801ec74 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8017120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017122:	895a      	ldrh	r2, [r3, #10]
 8017124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	b29a      	uxth	r2, r3
 801712c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801712e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017130:	8afa      	ldrh	r2, [r7, #22]
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801713a:	2b00      	cmp	r3, #0
 801713c:	d018      	beq.n	8017170 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801713e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017140:	2b00      	cmp	r3, #0
 8017142:	d106      	bne.n	8017152 <tcp_write+0x5c2>
 8017144:	4b6b      	ldr	r3, [pc, #428]	@ (80172f4 <tcp_write+0x764>)
 8017146:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801714a:	496d      	ldr	r1, [pc, #436]	@ (8017300 <tcp_write+0x770>)
 801714c:	486b      	ldr	r0, [pc, #428]	@ (80172fc <tcp_write+0x76c>)
 801714e:	f007 fd91 	bl	801ec74 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017154:	685b      	ldr	r3, [r3, #4]
 8017156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017158:	4618      	mov	r0, r3
 801715a:	f7fa ffa1 	bl	80120a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801715e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017160:	891a      	ldrh	r2, [r3, #8]
 8017162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017164:	891b      	ldrh	r3, [r3, #8]
 8017166:	4413      	add	r3, r2
 8017168:	b29a      	uxth	r2, r3
 801716a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801716c:	811a      	strh	r2, [r3, #8]
 801716e:	e03c      	b.n	80171ea <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8017170:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8017174:	2b00      	cmp	r3, #0
 8017176:	d038      	beq.n	80171ea <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801717a:	2b00      	cmp	r3, #0
 801717c:	d003      	beq.n	8017186 <tcp_write+0x5f6>
 801717e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d106      	bne.n	8017194 <tcp_write+0x604>
 8017186:	4b5b      	ldr	r3, [pc, #364]	@ (80172f4 <tcp_write+0x764>)
 8017188:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801718c:	495d      	ldr	r1, [pc, #372]	@ (8017304 <tcp_write+0x774>)
 801718e:	485b      	ldr	r0, [pc, #364]	@ (80172fc <tcp_write+0x76c>)
 8017190:	f007 fd70 	bl	801ec74 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017196:	685b      	ldr	r3, [r3, #4]
 8017198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801719a:	e00a      	b.n	80171b2 <tcp_write+0x622>
      p->tot_len += extendlen;
 801719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801719e:	891a      	ldrh	r2, [r3, #8]
 80171a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80171a4:	4413      	add	r3, r2
 80171a6:	b29a      	uxth	r2, r3
 80171a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171aa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80171ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80171b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d1f0      	bne.n	801719c <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 80171ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171bc:	891a      	ldrh	r2, [r3, #8]
 80171be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80171c2:	4413      	add	r3, r2
 80171c4:	b29a      	uxth	r2, r3
 80171c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171c8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80171ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171cc:	895a      	ldrh	r2, [r3, #10]
 80171ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80171d2:	4413      	add	r3, r2
 80171d4:	b29a      	uxth	r2, r3
 80171d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171d8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80171da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171dc:	891a      	ldrh	r2, [r3, #8]
 80171de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80171e2:	4413      	add	r3, r2
 80171e4:	b29a      	uxth	r2, r3
 80171e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171e8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80171ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d103      	bne.n	80171f8 <tcp_write+0x668>
    pcb->unsent = queue;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80171f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80171f6:	e002      	b.n	80171fe <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 80171f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80171fc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017202:	88fb      	ldrh	r3, [r7, #6]
 8017204:	441a      	add	r2, r3
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017210:	88fb      	ldrh	r3, [r7, #6]
 8017212:	1ad3      	subs	r3, r2, r3
 8017214:	b29a      	uxth	r2, r3
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8017222:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801722c:	2b00      	cmp	r3, #0
 801722e:	d00e      	beq.n	801724e <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017234:	2b00      	cmp	r3, #0
 8017236:	d10a      	bne.n	801724e <tcp_write+0x6be>
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801723c:	2b00      	cmp	r3, #0
 801723e:	d106      	bne.n	801724e <tcp_write+0x6be>
 8017240:	4b2c      	ldr	r3, [pc, #176]	@ (80172f4 <tcp_write+0x764>)
 8017242:	f240 3212 	movw	r2, #786	@ 0x312
 8017246:	4930      	ldr	r1, [pc, #192]	@ (8017308 <tcp_write+0x778>)
 8017248:	482c      	ldr	r0, [pc, #176]	@ (80172fc <tcp_write+0x76c>)
 801724a:	f007 fd13 	bl	801ec74 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801724e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017250:	2b00      	cmp	r3, #0
 8017252:	d016      	beq.n	8017282 <tcp_write+0x6f2>
 8017254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017256:	691b      	ldr	r3, [r3, #16]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d012      	beq.n	8017282 <tcp_write+0x6f2>
 801725c:	797b      	ldrb	r3, [r7, #5]
 801725e:	f003 0302 	and.w	r3, r3, #2
 8017262:	2b00      	cmp	r3, #0
 8017264:	d10d      	bne.n	8017282 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017268:	691b      	ldr	r3, [r3, #16]
 801726a:	899b      	ldrh	r3, [r3, #12]
 801726c:	b29c      	uxth	r4, r3
 801726e:	2008      	movs	r0, #8
 8017270:	f7f9 f926 	bl	80104c0 <lwip_htons>
 8017274:	4603      	mov	r3, r0
 8017276:	461a      	mov	r2, r3
 8017278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801727a:	691b      	ldr	r3, [r3, #16]
 801727c:	4322      	orrs	r2, r4
 801727e:	b292      	uxth	r2, r2
 8017280:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017282:	2300      	movs	r3, #0
 8017284:	e031      	b.n	80172ea <tcp_write+0x75a>
          goto memerr;
 8017286:	bf00      	nop
 8017288:	e006      	b.n	8017298 <tcp_write+0x708>
            goto memerr;
 801728a:	bf00      	nop
 801728c:	e004      	b.n	8017298 <tcp_write+0x708>
        goto memerr;
 801728e:	bf00      	nop
 8017290:	e002      	b.n	8017298 <tcp_write+0x708>
        goto memerr;
 8017292:	bf00      	nop
 8017294:	e000      	b.n	8017298 <tcp_write+0x708>
      goto memerr;
 8017296:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	8b5b      	ldrh	r3, [r3, #26]
 801729c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80172a0:	b29a      	uxth	r2, r3
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80172a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d002      	beq.n	80172b2 <tcp_write+0x722>
    pbuf_free(concat_p);
 80172ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80172ae:	f7fa fe29 	bl	8011f04 <pbuf_free>
  }
  if (queue != NULL) {
 80172b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d002      	beq.n	80172be <tcp_write+0x72e>
    tcp_segs_free(queue);
 80172b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80172ba:	f7fc fb95 	bl	80139e8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d00e      	beq.n	80172e6 <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d10a      	bne.n	80172e6 <tcp_write+0x756>
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d106      	bne.n	80172e6 <tcp_write+0x756>
 80172d8:	4b06      	ldr	r3, [pc, #24]	@ (80172f4 <tcp_write+0x764>)
 80172da:	f240 3227 	movw	r2, #807	@ 0x327
 80172de:	490a      	ldr	r1, [pc, #40]	@ (8017308 <tcp_write+0x778>)
 80172e0:	4806      	ldr	r0, [pc, #24]	@ (80172fc <tcp_write+0x76c>)
 80172e2:	f007 fcc7 	bl	801ec74 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80172e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	3764      	adds	r7, #100	@ 0x64
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd90      	pop	{r4, r7, pc}
 80172f2:	bf00      	nop
 80172f4:	08023d0c 	.word	0x08023d0c
 80172f8:	08024040 	.word	0x08024040
 80172fc:	08023d60 	.word	0x08023d60
 8017300:	0802406c 	.word	0x0802406c
 8017304:	080240a4 	.word	0x080240a4
 8017308:	080240dc 	.word	0x080240dc

0801730c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801730c:	b590      	push	{r4, r7, lr}
 801730e:	b08b      	sub	sp, #44	@ 0x2c
 8017310:	af02      	add	r7, sp, #8
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	460b      	mov	r3, r1
 8017316:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017318:	2300      	movs	r3, #0
 801731a:	61bb      	str	r3, [r7, #24]
 801731c:	2300      	movs	r3, #0
 801731e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017320:	2300      	movs	r3, #0
 8017322:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d106      	bne.n	8017338 <tcp_split_unsent_seg+0x2c>
 801732a:	4b97      	ldr	r3, [pc, #604]	@ (8017588 <tcp_split_unsent_seg+0x27c>)
 801732c:	f240 324b 	movw	r2, #843	@ 0x34b
 8017330:	4996      	ldr	r1, [pc, #600]	@ (801758c <tcp_split_unsent_seg+0x280>)
 8017332:	4897      	ldr	r0, [pc, #604]	@ (8017590 <tcp_split_unsent_seg+0x284>)
 8017334:	f007 fc9e 	bl	801ec74 <iprintf>

  useg = pcb->unsent;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801733c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d102      	bne.n	801734a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017344:	f04f 33ff 	mov.w	r3, #4294967295
 8017348:	e119      	b.n	801757e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801734a:	887b      	ldrh	r3, [r7, #2]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d109      	bne.n	8017364 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017350:	4b8d      	ldr	r3, [pc, #564]	@ (8017588 <tcp_split_unsent_seg+0x27c>)
 8017352:	f240 3253 	movw	r2, #851	@ 0x353
 8017356:	498f      	ldr	r1, [pc, #572]	@ (8017594 <tcp_split_unsent_seg+0x288>)
 8017358:	488d      	ldr	r0, [pc, #564]	@ (8017590 <tcp_split_unsent_seg+0x284>)
 801735a:	f007 fc8b 	bl	801ec74 <iprintf>
    return ERR_VAL;
 801735e:	f06f 0305 	mvn.w	r3, #5
 8017362:	e10c      	b.n	801757e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	891b      	ldrh	r3, [r3, #8]
 8017368:	887a      	ldrh	r2, [r7, #2]
 801736a:	429a      	cmp	r2, r3
 801736c:	d301      	bcc.n	8017372 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801736e:	2300      	movs	r3, #0
 8017370:	e105      	b.n	801757e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017376:	887a      	ldrh	r2, [r7, #2]
 8017378:	429a      	cmp	r2, r3
 801737a:	d906      	bls.n	801738a <tcp_split_unsent_seg+0x7e>
 801737c:	4b82      	ldr	r3, [pc, #520]	@ (8017588 <tcp_split_unsent_seg+0x27c>)
 801737e:	f240 325b 	movw	r2, #859	@ 0x35b
 8017382:	4985      	ldr	r1, [pc, #532]	@ (8017598 <tcp_split_unsent_seg+0x28c>)
 8017384:	4882      	ldr	r0, [pc, #520]	@ (8017590 <tcp_split_unsent_seg+0x284>)
 8017386:	f007 fc75 	bl	801ec74 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	891b      	ldrh	r3, [r3, #8]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d106      	bne.n	80173a0 <tcp_split_unsent_seg+0x94>
 8017392:	4b7d      	ldr	r3, [pc, #500]	@ (8017588 <tcp_split_unsent_seg+0x27c>)
 8017394:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8017398:	4980      	ldr	r1, [pc, #512]	@ (801759c <tcp_split_unsent_seg+0x290>)
 801739a:	487d      	ldr	r0, [pc, #500]	@ (8017590 <tcp_split_unsent_seg+0x284>)
 801739c:	f007 fc6a 	bl	801ec74 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80173a0:	697b      	ldr	r3, [r7, #20]
 80173a2:	7b1b      	ldrb	r3, [r3, #12]
 80173a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80173a6:	7bfb      	ldrb	r3, [r7, #15]
 80173a8:	009b      	lsls	r3, r3, #2
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	f003 0304 	and.w	r3, r3, #4
 80173b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80173b2:	697b      	ldr	r3, [r7, #20]
 80173b4:	891a      	ldrh	r2, [r3, #8]
 80173b6:	887b      	ldrh	r3, [r7, #2]
 80173b8:	1ad3      	subs	r3, r2, r3
 80173ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80173bc:	7bbb      	ldrb	r3, [r7, #14]
 80173be:	b29a      	uxth	r2, r3
 80173c0:	89bb      	ldrh	r3, [r7, #12]
 80173c2:	4413      	add	r3, r2
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80173ca:	4619      	mov	r1, r3
 80173cc:	2036      	movs	r0, #54	@ 0x36
 80173ce:	f7fa fab1 	bl	8011934 <pbuf_alloc>
 80173d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	f000 80ba 	beq.w	8017550 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	685b      	ldr	r3, [r3, #4]
 80173e0:	891a      	ldrh	r2, [r3, #8]
 80173e2:	697b      	ldr	r3, [r7, #20]
 80173e4:	891b      	ldrh	r3, [r3, #8]
 80173e6:	1ad3      	subs	r3, r2, r3
 80173e8:	b29a      	uxth	r2, r3
 80173ea:	887b      	ldrh	r3, [r7, #2]
 80173ec:	4413      	add	r3, r2
 80173ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	6858      	ldr	r0, [r3, #4]
 80173f4:	693b      	ldr	r3, [r7, #16]
 80173f6:	685a      	ldr	r2, [r3, #4]
 80173f8:	7bbb      	ldrb	r3, [r7, #14]
 80173fa:	18d1      	adds	r1, r2, r3
 80173fc:	897b      	ldrh	r3, [r7, #10]
 80173fe:	89ba      	ldrh	r2, [r7, #12]
 8017400:	f7fa ff86 	bl	8012310 <pbuf_copy_partial>
 8017404:	4603      	mov	r3, r0
 8017406:	461a      	mov	r2, r3
 8017408:	89bb      	ldrh	r3, [r7, #12]
 801740a:	4293      	cmp	r3, r2
 801740c:	f040 80a2 	bne.w	8017554 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	691b      	ldr	r3, [r3, #16]
 8017414:	899b      	ldrh	r3, [r3, #12]
 8017416:	b29b      	uxth	r3, r3
 8017418:	4618      	mov	r0, r3
 801741a:	f7f9 f851 	bl	80104c0 <lwip_htons>
 801741e:	4603      	mov	r3, r0
 8017420:	b2db      	uxtb	r3, r3
 8017422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017426:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017428:	2300      	movs	r3, #0
 801742a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801742c:	7ffb      	ldrb	r3, [r7, #31]
 801742e:	f003 0308 	and.w	r3, r3, #8
 8017432:	2b00      	cmp	r3, #0
 8017434:	d007      	beq.n	8017446 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017436:	7ffb      	ldrb	r3, [r7, #31]
 8017438:	f023 0308 	bic.w	r3, r3, #8
 801743c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801743e:	7fbb      	ldrb	r3, [r7, #30]
 8017440:	f043 0308 	orr.w	r3, r3, #8
 8017444:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8017446:	7ffb      	ldrb	r3, [r7, #31]
 8017448:	f003 0301 	and.w	r3, r3, #1
 801744c:	2b00      	cmp	r3, #0
 801744e:	d007      	beq.n	8017460 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017450:	7ffb      	ldrb	r3, [r7, #31]
 8017452:	f023 0301 	bic.w	r3, r3, #1
 8017456:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8017458:	7fbb      	ldrb	r3, [r7, #30]
 801745a:	f043 0301 	orr.w	r3, r3, #1
 801745e:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	691b      	ldr	r3, [r3, #16]
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	4618      	mov	r0, r3
 8017468:	f7f9 f83f 	bl	80104ea <lwip_htonl>
 801746c:	4602      	mov	r2, r0
 801746e:	887b      	ldrh	r3, [r7, #2]
 8017470:	18d1      	adds	r1, r2, r3
 8017472:	7fba      	ldrb	r2, [r7, #30]
 8017474:	7bfb      	ldrb	r3, [r7, #15]
 8017476:	9300      	str	r3, [sp, #0]
 8017478:	460b      	mov	r3, r1
 801747a:	6939      	ldr	r1, [r7, #16]
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f7ff f9f3 	bl	8016868 <tcp_create_segment>
 8017482:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8017484:	69bb      	ldr	r3, [r7, #24]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d066      	beq.n	8017558 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801748a:	697b      	ldr	r3, [r7, #20]
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	4618      	mov	r0, r3
 8017490:	f7fa fdc6 	bl	8012020 <pbuf_clen>
 8017494:	4603      	mov	r3, r0
 8017496:	461a      	mov	r2, r3
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801749e:	1a9b      	subs	r3, r3, r2
 80174a0:	b29a      	uxth	r2, r3
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	6858      	ldr	r0, [r3, #4]
 80174ac:	697b      	ldr	r3, [r7, #20]
 80174ae:	685b      	ldr	r3, [r3, #4]
 80174b0:	891a      	ldrh	r2, [r3, #8]
 80174b2:	89bb      	ldrh	r3, [r7, #12]
 80174b4:	1ad3      	subs	r3, r2, r3
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	4619      	mov	r1, r3
 80174ba:	f7fa fb9d 	bl	8011bf8 <pbuf_realloc>
  useg->len -= remainder;
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	891a      	ldrh	r2, [r3, #8]
 80174c2:	89bb      	ldrh	r3, [r7, #12]
 80174c4:	1ad3      	subs	r3, r2, r3
 80174c6:	b29a      	uxth	r2, r3
 80174c8:	697b      	ldr	r3, [r7, #20]
 80174ca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	691b      	ldr	r3, [r3, #16]
 80174d0:	899b      	ldrh	r3, [r3, #12]
 80174d2:	b29c      	uxth	r4, r3
 80174d4:	7ffb      	ldrb	r3, [r7, #31]
 80174d6:	b29b      	uxth	r3, r3
 80174d8:	4618      	mov	r0, r3
 80174da:	f7f8 fff1 	bl	80104c0 <lwip_htons>
 80174de:	4603      	mov	r3, r0
 80174e0:	461a      	mov	r2, r3
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	691b      	ldr	r3, [r3, #16]
 80174e6:	4322      	orrs	r2, r4
 80174e8:	b292      	uxth	r2, r2
 80174ea:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80174ec:	697b      	ldr	r3, [r7, #20]
 80174ee:	2200      	movs	r2, #0
 80174f0:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	685b      	ldr	r3, [r3, #4]
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7fa fd92 	bl	8012020 <pbuf_clen>
 80174fc:	4603      	mov	r3, r0
 80174fe:	461a      	mov	r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017506:	4413      	add	r3, r2
 8017508:	b29a      	uxth	r2, r3
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017510:	69bb      	ldr	r3, [r7, #24]
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	4618      	mov	r0, r3
 8017516:	f7fa fd83 	bl	8012020 <pbuf_clen>
 801751a:	4603      	mov	r3, r0
 801751c:	461a      	mov	r2, r3
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017524:	4413      	add	r3, r2
 8017526:	b29a      	uxth	r2, r3
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801752e:	697b      	ldr	r3, [r7, #20]
 8017530:	681a      	ldr	r2, [r3, #0]
 8017532:	69bb      	ldr	r3, [r7, #24]
 8017534:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017536:	697b      	ldr	r3, [r7, #20]
 8017538:	69ba      	ldr	r2, [r7, #24]
 801753a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d103      	bne.n	801754c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2200      	movs	r2, #0
 8017548:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801754c:	2300      	movs	r3, #0
 801754e:	e016      	b.n	801757e <tcp_split_unsent_seg+0x272>
    goto memerr;
 8017550:	bf00      	nop
 8017552:	e002      	b.n	801755a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8017554:	bf00      	nop
 8017556:	e000      	b.n	801755a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8017558:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801755a:	69bb      	ldr	r3, [r7, #24]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d006      	beq.n	801756e <tcp_split_unsent_seg+0x262>
 8017560:	4b09      	ldr	r3, [pc, #36]	@ (8017588 <tcp_split_unsent_seg+0x27c>)
 8017562:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8017566:	490e      	ldr	r1, [pc, #56]	@ (80175a0 <tcp_split_unsent_seg+0x294>)
 8017568:	4809      	ldr	r0, [pc, #36]	@ (8017590 <tcp_split_unsent_seg+0x284>)
 801756a:	f007 fb83 	bl	801ec74 <iprintf>
  if (p != NULL) {
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d002      	beq.n	801757a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8017574:	6938      	ldr	r0, [r7, #16]
 8017576:	f7fa fcc5 	bl	8011f04 <pbuf_free>
  }

  return ERR_MEM;
 801757a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801757e:	4618      	mov	r0, r3
 8017580:	3724      	adds	r7, #36	@ 0x24
 8017582:	46bd      	mov	sp, r7
 8017584:	bd90      	pop	{r4, r7, pc}
 8017586:	bf00      	nop
 8017588:	08023d0c 	.word	0x08023d0c
 801758c:	080240fc 	.word	0x080240fc
 8017590:	08023d60 	.word	0x08023d60
 8017594:	08024120 	.word	0x08024120
 8017598:	08024144 	.word	0x08024144
 801759c:	08024154 	.word	0x08024154
 80175a0:	08024164 	.word	0x08024164

080175a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80175a4:	b590      	push	{r4, r7, lr}
 80175a6:	b085      	sub	sp, #20
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d106      	bne.n	80175c0 <tcp_send_fin+0x1c>
 80175b2:	4b21      	ldr	r3, [pc, #132]	@ (8017638 <tcp_send_fin+0x94>)
 80175b4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80175b8:	4920      	ldr	r1, [pc, #128]	@ (801763c <tcp_send_fin+0x98>)
 80175ba:	4821      	ldr	r0, [pc, #132]	@ (8017640 <tcp_send_fin+0x9c>)
 80175bc:	f007 fb5a 	bl	801ec74 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d02e      	beq.n	8017626 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175cc:	60fb      	str	r3, [r7, #12]
 80175ce:	e002      	b.n	80175d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d1f8      	bne.n	80175d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	691b      	ldr	r3, [r3, #16]
 80175e2:	899b      	ldrh	r3, [r3, #12]
 80175e4:	b29b      	uxth	r3, r3
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7f8 ff6a 	bl	80104c0 <lwip_htons>
 80175ec:	4603      	mov	r3, r0
 80175ee:	b2db      	uxtb	r3, r3
 80175f0:	f003 0307 	and.w	r3, r3, #7
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d116      	bne.n	8017626 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	691b      	ldr	r3, [r3, #16]
 80175fc:	899b      	ldrh	r3, [r3, #12]
 80175fe:	b29c      	uxth	r4, r3
 8017600:	2001      	movs	r0, #1
 8017602:	f7f8 ff5d 	bl	80104c0 <lwip_htons>
 8017606:	4603      	mov	r3, r0
 8017608:	461a      	mov	r2, r3
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	691b      	ldr	r3, [r3, #16]
 801760e:	4322      	orrs	r2, r4
 8017610:	b292      	uxth	r2, r2
 8017612:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	8b5b      	ldrh	r3, [r3, #26]
 8017618:	f043 0320 	orr.w	r3, r3, #32
 801761c:	b29a      	uxth	r2, r3
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017622:	2300      	movs	r3, #0
 8017624:	e004      	b.n	8017630 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017626:	2101      	movs	r1, #1
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f000 f80b 	bl	8017644 <tcp_enqueue_flags>
 801762e:	4603      	mov	r3, r0
}
 8017630:	4618      	mov	r0, r3
 8017632:	3714      	adds	r7, #20
 8017634:	46bd      	mov	sp, r7
 8017636:	bd90      	pop	{r4, r7, pc}
 8017638:	08023d0c 	.word	0x08023d0c
 801763c:	08024170 	.word	0x08024170
 8017640:	08023d60 	.word	0x08023d60

08017644 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b088      	sub	sp, #32
 8017648:	af02      	add	r7, sp, #8
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	460b      	mov	r3, r1
 801764e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017650:	2300      	movs	r3, #0
 8017652:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8017654:	2300      	movs	r3, #0
 8017656:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017658:	78fb      	ldrb	r3, [r7, #3]
 801765a:	f003 0303 	and.w	r3, r3, #3
 801765e:	2b00      	cmp	r3, #0
 8017660:	d106      	bne.n	8017670 <tcp_enqueue_flags+0x2c>
 8017662:	4b67      	ldr	r3, [pc, #412]	@ (8017800 <tcp_enqueue_flags+0x1bc>)
 8017664:	f240 4211 	movw	r2, #1041	@ 0x411
 8017668:	4966      	ldr	r1, [pc, #408]	@ (8017804 <tcp_enqueue_flags+0x1c0>)
 801766a:	4867      	ldr	r0, [pc, #412]	@ (8017808 <tcp_enqueue_flags+0x1c4>)
 801766c:	f007 fb02 	bl	801ec74 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d106      	bne.n	8017684 <tcp_enqueue_flags+0x40>
 8017676:	4b62      	ldr	r3, [pc, #392]	@ (8017800 <tcp_enqueue_flags+0x1bc>)
 8017678:	f240 4213 	movw	r2, #1043	@ 0x413
 801767c:	4963      	ldr	r1, [pc, #396]	@ (801780c <tcp_enqueue_flags+0x1c8>)
 801767e:	4862      	ldr	r0, [pc, #392]	@ (8017808 <tcp_enqueue_flags+0x1c4>)
 8017680:	f007 faf8 	bl	801ec74 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017684:	78fb      	ldrb	r3, [r7, #3]
 8017686:	f003 0302 	and.w	r3, r3, #2
 801768a:	2b00      	cmp	r3, #0
 801768c:	d001      	beq.n	8017692 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801768e:	2301      	movs	r3, #1
 8017690:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017692:	7dfb      	ldrb	r3, [r7, #23]
 8017694:	009b      	lsls	r3, r3, #2
 8017696:	b2db      	uxtb	r3, r3
 8017698:	f003 0304 	and.w	r3, r3, #4
 801769c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801769e:	7dbb      	ldrb	r3, [r7, #22]
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80176a6:	4619      	mov	r1, r3
 80176a8:	2036      	movs	r0, #54	@ 0x36
 80176aa:	f7fa f943 	bl	8011934 <pbuf_alloc>
 80176ae:	60f8      	str	r0, [r7, #12]
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d109      	bne.n	80176ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	8b5b      	ldrh	r3, [r3, #26]
 80176ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80176be:	b29a      	uxth	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80176c4:	f04f 33ff 	mov.w	r3, #4294967295
 80176c8:	e095      	b.n	80177f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	895a      	ldrh	r2, [r3, #10]
 80176ce:	7dbb      	ldrb	r3, [r7, #22]
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d206      	bcs.n	80176e4 <tcp_enqueue_flags+0xa0>
 80176d6:	4b4a      	ldr	r3, [pc, #296]	@ (8017800 <tcp_enqueue_flags+0x1bc>)
 80176d8:	f240 4239 	movw	r2, #1081	@ 0x439
 80176dc:	494c      	ldr	r1, [pc, #304]	@ (8017810 <tcp_enqueue_flags+0x1cc>)
 80176de:	484a      	ldr	r0, [pc, #296]	@ (8017808 <tcp_enqueue_flags+0x1c4>)
 80176e0:	f007 fac8 	bl	801ec74 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80176e8:	78fa      	ldrb	r2, [r7, #3]
 80176ea:	7dfb      	ldrb	r3, [r7, #23]
 80176ec:	9300      	str	r3, [sp, #0]
 80176ee:	460b      	mov	r3, r1
 80176f0:	68f9      	ldr	r1, [r7, #12]
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f7ff f8b8 	bl	8016868 <tcp_create_segment>
 80176f8:	60b8      	str	r0, [r7, #8]
 80176fa:	68bb      	ldr	r3, [r7, #8]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d109      	bne.n	8017714 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	8b5b      	ldrh	r3, [r3, #26]
 8017704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017708:	b29a      	uxth	r2, r3
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801770e:	f04f 33ff 	mov.w	r3, #4294967295
 8017712:	e070      	b.n	80177f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	691b      	ldr	r3, [r3, #16]
 8017718:	f003 0303 	and.w	r3, r3, #3
 801771c:	2b00      	cmp	r3, #0
 801771e:	d006      	beq.n	801772e <tcp_enqueue_flags+0xea>
 8017720:	4b37      	ldr	r3, [pc, #220]	@ (8017800 <tcp_enqueue_flags+0x1bc>)
 8017722:	f240 4242 	movw	r2, #1090	@ 0x442
 8017726:	493b      	ldr	r1, [pc, #236]	@ (8017814 <tcp_enqueue_flags+0x1d0>)
 8017728:	4837      	ldr	r0, [pc, #220]	@ (8017808 <tcp_enqueue_flags+0x1c4>)
 801772a:	f007 faa3 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	891b      	ldrh	r3, [r3, #8]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d006      	beq.n	8017744 <tcp_enqueue_flags+0x100>
 8017736:	4b32      	ldr	r3, [pc, #200]	@ (8017800 <tcp_enqueue_flags+0x1bc>)
 8017738:	f240 4243 	movw	r2, #1091	@ 0x443
 801773c:	4936      	ldr	r1, [pc, #216]	@ (8017818 <tcp_enqueue_flags+0x1d4>)
 801773e:	4832      	ldr	r0, [pc, #200]	@ (8017808 <tcp_enqueue_flags+0x1c4>)
 8017740:	f007 fa98 	bl	801ec74 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017748:	2b00      	cmp	r3, #0
 801774a:	d103      	bne.n	8017754 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	68ba      	ldr	r2, [r7, #8]
 8017750:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017752:	e00d      	b.n	8017770 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017758:	613b      	str	r3, [r7, #16]
 801775a:	e002      	b.n	8017762 <tcp_enqueue_flags+0x11e>
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	613b      	str	r3, [r7, #16]
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d1f8      	bne.n	801775c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801776a:	693b      	ldr	r3, [r7, #16]
 801776c:	68ba      	ldr	r2, [r7, #8]
 801776e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2200      	movs	r2, #0
 8017774:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017778:	78fb      	ldrb	r3, [r7, #3]
 801777a:	f003 0302 	and.w	r3, r3, #2
 801777e:	2b00      	cmp	r3, #0
 8017780:	d104      	bne.n	801778c <tcp_enqueue_flags+0x148>
 8017782:	78fb      	ldrb	r3, [r7, #3]
 8017784:	f003 0301 	and.w	r3, r3, #1
 8017788:	2b00      	cmp	r3, #0
 801778a:	d004      	beq.n	8017796 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017790:	1c5a      	adds	r2, r3, #1
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017796:	78fb      	ldrb	r3, [r7, #3]
 8017798:	f003 0301 	and.w	r3, r3, #1
 801779c:	2b00      	cmp	r3, #0
 801779e:	d006      	beq.n	80177ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	8b5b      	ldrh	r3, [r3, #26]
 80177a4:	f043 0320 	orr.w	r3, r3, #32
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	685b      	ldr	r3, [r3, #4]
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7fa fc34 	bl	8012020 <pbuf_clen>
 80177b8:	4603      	mov	r3, r0
 80177ba:	461a      	mov	r2, r3
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80177c2:	4413      	add	r3, r2
 80177c4:	b29a      	uxth	r2, r3
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d00e      	beq.n	80177f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d10a      	bne.n	80177f4 <tcp_enqueue_flags+0x1b0>
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d106      	bne.n	80177f4 <tcp_enqueue_flags+0x1b0>
 80177e6:	4b06      	ldr	r3, [pc, #24]	@ (8017800 <tcp_enqueue_flags+0x1bc>)
 80177e8:	f240 4265 	movw	r2, #1125	@ 0x465
 80177ec:	490b      	ldr	r1, [pc, #44]	@ (801781c <tcp_enqueue_flags+0x1d8>)
 80177ee:	4806      	ldr	r0, [pc, #24]	@ (8017808 <tcp_enqueue_flags+0x1c4>)
 80177f0:	f007 fa40 	bl	801ec74 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80177f4:	2300      	movs	r3, #0
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3718      	adds	r7, #24
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	08023d0c 	.word	0x08023d0c
 8017804:	0802418c 	.word	0x0802418c
 8017808:	08023d60 	.word	0x08023d60
 801780c:	080241e4 	.word	0x080241e4
 8017810:	08024204 	.word	0x08024204
 8017814:	08024240 	.word	0x08024240
 8017818:	08024258 	.word	0x08024258
 801781c:	08024284 	.word	0x08024284

08017820 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017820:	b5b0      	push	{r4, r5, r7, lr}
 8017822:	b08a      	sub	sp, #40	@ 0x28
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d106      	bne.n	801783c <tcp_output+0x1c>
 801782e:	4b8a      	ldr	r3, [pc, #552]	@ (8017a58 <tcp_output+0x238>)
 8017830:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8017834:	4989      	ldr	r1, [pc, #548]	@ (8017a5c <tcp_output+0x23c>)
 8017836:	488a      	ldr	r0, [pc, #552]	@ (8017a60 <tcp_output+0x240>)
 8017838:	f007 fa1c 	bl	801ec74 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	7d1b      	ldrb	r3, [r3, #20]
 8017840:	2b01      	cmp	r3, #1
 8017842:	d106      	bne.n	8017852 <tcp_output+0x32>
 8017844:	4b84      	ldr	r3, [pc, #528]	@ (8017a58 <tcp_output+0x238>)
 8017846:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801784a:	4986      	ldr	r1, [pc, #536]	@ (8017a64 <tcp_output+0x244>)
 801784c:	4884      	ldr	r0, [pc, #528]	@ (8017a60 <tcp_output+0x240>)
 801784e:	f007 fa11 	bl	801ec74 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017852:	4b85      	ldr	r3, [pc, #532]	@ (8017a68 <tcp_output+0x248>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	687a      	ldr	r2, [r7, #4]
 8017858:	429a      	cmp	r2, r3
 801785a:	d101      	bne.n	8017860 <tcp_output+0x40>
    return ERR_OK;
 801785c:	2300      	movs	r3, #0
 801785e:	e1d1      	b.n	8017c04 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801786c:	4293      	cmp	r3, r2
 801786e:	bf28      	it	cs
 8017870:	4613      	movcs	r3, r2
 8017872:	b29b      	uxth	r3, r3
 8017874:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801787a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801787e:	2b00      	cmp	r3, #0
 8017880:	d10b      	bne.n	801789a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	8b5b      	ldrh	r3, [r3, #26]
 8017886:	f003 0302 	and.w	r3, r3, #2
 801788a:	2b00      	cmp	r3, #0
 801788c:	f000 81ad 	beq.w	8017bea <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f000 fdf9 	bl	8018488 <tcp_send_empty_ack>
 8017896:	4603      	mov	r3, r0
 8017898:	e1b4      	b.n	8017c04 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801789a:	6879      	ldr	r1, [r7, #4]
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	3304      	adds	r3, #4
 80178a0:	461a      	mov	r2, r3
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f7fe ffc4 	bl	8016830 <tcp_route>
 80178a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d102      	bne.n	80178b6 <tcp_output+0x96>
    return ERR_RTE;
 80178b0:	f06f 0303 	mvn.w	r3, #3
 80178b4:	e1a6      	b.n	8017c04 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d003      	beq.n	80178c4 <tcp_output+0xa4>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d111      	bne.n	80178e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d002      	beq.n	80178d0 <tcp_output+0xb0>
 80178ca:	697b      	ldr	r3, [r7, #20]
 80178cc:	3304      	adds	r3, #4
 80178ce:	e000      	b.n	80178d2 <tcp_output+0xb2>
 80178d0:	2300      	movs	r3, #0
 80178d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80178d4:	693b      	ldr	r3, [r7, #16]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d102      	bne.n	80178e0 <tcp_output+0xc0>
      return ERR_RTE;
 80178da:	f06f 0303 	mvn.w	r3, #3
 80178de:	e191      	b.n	8017c04 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80178e0:	693b      	ldr	r3, [r7, #16]
 80178e2:	681a      	ldr	r2, [r3, #0]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80178e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ea:	691b      	ldr	r3, [r3, #16]
 80178ec:	685b      	ldr	r3, [r3, #4]
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7f8 fdfb 	bl	80104ea <lwip_htonl>
 80178f4:	4602      	mov	r2, r0
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178fa:	1ad3      	subs	r3, r2, r3
 80178fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80178fe:	8912      	ldrh	r2, [r2, #8]
 8017900:	4413      	add	r3, r2
 8017902:	69ba      	ldr	r2, [r7, #24]
 8017904:	429a      	cmp	r2, r3
 8017906:	d227      	bcs.n	8017958 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801790e:	461a      	mov	r2, r3
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	4293      	cmp	r3, r2
 8017914:	d114      	bne.n	8017940 <tcp_output+0x120>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801791a:	2b00      	cmp	r3, #0
 801791c:	d110      	bne.n	8017940 <tcp_output+0x120>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017924:	2b00      	cmp	r3, #0
 8017926:	d10b      	bne.n	8017940 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2200      	movs	r2, #0
 801792c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2201      	movs	r2, #1
 8017934:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2200      	movs	r2, #0
 801793c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	8b5b      	ldrh	r3, [r3, #26]
 8017944:	f003 0302 	and.w	r3, r3, #2
 8017948:	2b00      	cmp	r3, #0
 801794a:	f000 8150 	beq.w	8017bee <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801794e:	6878      	ldr	r0, [r7, #4]
 8017950:	f000 fd9a 	bl	8018488 <tcp_send_empty_ack>
 8017954:	4603      	mov	r3, r0
 8017956:	e155      	b.n	8017c04 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2200      	movs	r2, #0
 801795c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017964:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017966:	6a3b      	ldr	r3, [r7, #32]
 8017968:	2b00      	cmp	r3, #0
 801796a:	f000 811f 	beq.w	8017bac <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801796e:	e002      	b.n	8017976 <tcp_output+0x156>
 8017970:	6a3b      	ldr	r3, [r7, #32]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	623b      	str	r3, [r7, #32]
 8017976:	6a3b      	ldr	r3, [r7, #32]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d1f8      	bne.n	8017970 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801797e:	e115      	b.n	8017bac <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017982:	691b      	ldr	r3, [r3, #16]
 8017984:	899b      	ldrh	r3, [r3, #12]
 8017986:	b29b      	uxth	r3, r3
 8017988:	4618      	mov	r0, r3
 801798a:	f7f8 fd99 	bl	80104c0 <lwip_htons>
 801798e:	4603      	mov	r3, r0
 8017990:	b2db      	uxtb	r3, r3
 8017992:	f003 0304 	and.w	r3, r3, #4
 8017996:	2b00      	cmp	r3, #0
 8017998:	d006      	beq.n	80179a8 <tcp_output+0x188>
 801799a:	4b2f      	ldr	r3, [pc, #188]	@ (8017a58 <tcp_output+0x238>)
 801799c:	f240 5236 	movw	r2, #1334	@ 0x536
 80179a0:	4932      	ldr	r1, [pc, #200]	@ (8017a6c <tcp_output+0x24c>)
 80179a2:	482f      	ldr	r0, [pc, #188]	@ (8017a60 <tcp_output+0x240>)
 80179a4:	f007 f966 	bl	801ec74 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d01f      	beq.n	80179f0 <tcp_output+0x1d0>
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	8b5b      	ldrh	r3, [r3, #26]
 80179b4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d119      	bne.n	80179f0 <tcp_output+0x1d0>
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00b      	beq.n	80179dc <tcp_output+0x1bc>
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d110      	bne.n	80179f0 <tcp_output+0x1d0>
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179d2:	891a      	ldrh	r2, [r3, #8]
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179d8:	429a      	cmp	r2, r3
 80179da:	d209      	bcs.n	80179f0 <tcp_output+0x1d0>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d004      	beq.n	80179f0 <tcp_output+0x1d0>
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80179ec:	2b0f      	cmp	r3, #15
 80179ee:	d901      	bls.n	80179f4 <tcp_output+0x1d4>
 80179f0:	2301      	movs	r3, #1
 80179f2:	e000      	b.n	80179f6 <tcp_output+0x1d6>
 80179f4:	2300      	movs	r3, #0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d106      	bne.n	8017a08 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	8b5b      	ldrh	r3, [r3, #26]
 80179fe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	f000 80e7 	beq.w	8017bd6 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	7d1b      	ldrb	r3, [r3, #20]
 8017a0c:	2b02      	cmp	r3, #2
 8017a0e:	d00d      	beq.n	8017a2c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a12:	691b      	ldr	r3, [r3, #16]
 8017a14:	899b      	ldrh	r3, [r3, #12]
 8017a16:	b29c      	uxth	r4, r3
 8017a18:	2010      	movs	r0, #16
 8017a1a:	f7f8 fd51 	bl	80104c0 <lwip_htons>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	461a      	mov	r2, r3
 8017a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a24:	691b      	ldr	r3, [r3, #16]
 8017a26:	4322      	orrs	r2, r4
 8017a28:	b292      	uxth	r2, r2
 8017a2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017a2c:	697a      	ldr	r2, [r7, #20]
 8017a2e:	6879      	ldr	r1, [r7, #4]
 8017a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017a32:	f000 f90b 	bl	8017c4c <tcp_output_segment>
 8017a36:	4603      	mov	r3, r0
 8017a38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d016      	beq.n	8017a70 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	8b5b      	ldrh	r3, [r3, #26]
 8017a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a4a:	b29a      	uxth	r2, r3
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	835a      	strh	r2, [r3, #26]
      return err;
 8017a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a54:	e0d6      	b.n	8017c04 <tcp_output+0x3e4>
 8017a56:	bf00      	nop
 8017a58:	08023d0c 	.word	0x08023d0c
 8017a5c:	080242ac 	.word	0x080242ac
 8017a60:	08023d60 	.word	0x08023d60
 8017a64:	080242c4 	.word	0x080242c4
 8017a68:	20013e0c 	.word	0x20013e0c
 8017a6c:	080242ec 	.word	0x080242ec
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8017a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a72:	2200      	movs	r2, #0
 8017a74:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a78:	681a      	ldr	r2, [r3, #0]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	7d1b      	ldrb	r3, [r3, #20]
 8017a82:	2b02      	cmp	r3, #2
 8017a84:	d006      	beq.n	8017a94 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	8b5b      	ldrh	r3, [r3, #26]
 8017a8a:	f023 0303 	bic.w	r3, r3, #3
 8017a8e:	b29a      	uxth	r2, r3
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a96:	691b      	ldr	r3, [r3, #16]
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7f8 fd25 	bl	80104ea <lwip_htonl>
 8017aa0:	4604      	mov	r4, r0
 8017aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017aa4:	891b      	ldrh	r3, [r3, #8]
 8017aa6:	461d      	mov	r5, r3
 8017aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017aaa:	691b      	ldr	r3, [r3, #16]
 8017aac:	899b      	ldrh	r3, [r3, #12]
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7f8 fd05 	bl	80104c0 <lwip_htons>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	b2db      	uxtb	r3, r3
 8017aba:	f003 0303 	and.w	r3, r3, #3
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d001      	beq.n	8017ac6 <tcp_output+0x2a6>
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	e000      	b.n	8017ac8 <tcp_output+0x2a8>
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	442b      	add	r3, r5
 8017aca:	4423      	add	r3, r4
 8017acc:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ad2:	68bb      	ldr	r3, [r7, #8]
 8017ad4:	1ad3      	subs	r3, r2, r3
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	da02      	bge.n	8017ae0 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	68ba      	ldr	r2, [r7, #8]
 8017ade:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ae2:	891b      	ldrh	r3, [r3, #8]
 8017ae4:	461c      	mov	r4, r3
 8017ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ae8:	691b      	ldr	r3, [r3, #16]
 8017aea:	899b      	ldrh	r3, [r3, #12]
 8017aec:	b29b      	uxth	r3, r3
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7f8 fce6 	bl	80104c0 <lwip_htons>
 8017af4:	4603      	mov	r3, r0
 8017af6:	b2db      	uxtb	r3, r3
 8017af8:	f003 0303 	and.w	r3, r3, #3
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d001      	beq.n	8017b04 <tcp_output+0x2e4>
 8017b00:	2301      	movs	r3, #1
 8017b02:	e000      	b.n	8017b06 <tcp_output+0x2e6>
 8017b04:	2300      	movs	r3, #0
 8017b06:	4423      	add	r3, r4
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d049      	beq.n	8017ba0 <tcp_output+0x380>
      seg->next = NULL;
 8017b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b0e:	2200      	movs	r2, #0
 8017b10:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d105      	bne.n	8017b26 <tcp_output+0x306>
        pcb->unacked = seg;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b1e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8017b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b22:	623b      	str	r3, [r7, #32]
 8017b24:	e03f      	b.n	8017ba6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b28:	691b      	ldr	r3, [r3, #16]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7f8 fcdc 	bl	80104ea <lwip_htonl>
 8017b32:	4604      	mov	r4, r0
 8017b34:	6a3b      	ldr	r3, [r7, #32]
 8017b36:	691b      	ldr	r3, [r3, #16]
 8017b38:	685b      	ldr	r3, [r3, #4]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7f8 fcd5 	bl	80104ea <lwip_htonl>
 8017b40:	4603      	mov	r3, r0
 8017b42:	1ae3      	subs	r3, r4, r3
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	da24      	bge.n	8017b92 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	3370      	adds	r3, #112	@ 0x70
 8017b4c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017b4e:	e002      	b.n	8017b56 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017b56:	69fb      	ldr	r3, [r7, #28]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d011      	beq.n	8017b82 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017b5e:	69fb      	ldr	r3, [r7, #28]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	691b      	ldr	r3, [r3, #16]
 8017b64:	685b      	ldr	r3, [r3, #4]
 8017b66:	4618      	mov	r0, r3
 8017b68:	f7f8 fcbf 	bl	80104ea <lwip_htonl>
 8017b6c:	4604      	mov	r4, r0
 8017b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b70:	691b      	ldr	r3, [r3, #16]
 8017b72:	685b      	ldr	r3, [r3, #4]
 8017b74:	4618      	mov	r0, r3
 8017b76:	f7f8 fcb8 	bl	80104ea <lwip_htonl>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	dbe6      	blt.n	8017b50 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8017b82:	69fb      	ldr	r3, [r7, #28]
 8017b84:	681a      	ldr	r2, [r3, #0]
 8017b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b88:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b8e:	601a      	str	r2, [r3, #0]
 8017b90:	e009      	b.n	8017ba6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017b92:	6a3b      	ldr	r3, [r7, #32]
 8017b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b96:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017b98:	6a3b      	ldr	r3, [r7, #32]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	623b      	str	r3, [r7, #32]
 8017b9e:	e002      	b.n	8017ba6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017ba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ba2:	f7fb ff36 	bl	8013a12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017baa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8017bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d012      	beq.n	8017bd8 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bb4:	691b      	ldr	r3, [r3, #16]
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7f8 fc96 	bl	80104ea <lwip_htonl>
 8017bbe:	4602      	mov	r2, r0
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017bc4:	1ad3      	subs	r3, r2, r3
 8017bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bc8:	8912      	ldrh	r2, [r2, #8]
 8017bca:	4413      	add	r3, r2
  while (seg != NULL &&
 8017bcc:	69ba      	ldr	r2, [r7, #24]
 8017bce:	429a      	cmp	r2, r3
 8017bd0:	f4bf aed6 	bcs.w	8017980 <tcp_output+0x160>
 8017bd4:	e000      	b.n	8017bd8 <tcp_output+0x3b8>
      break;
 8017bd6:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d108      	bne.n	8017bf2 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2200      	movs	r2, #0
 8017be4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017be8:	e004      	b.n	8017bf4 <tcp_output+0x3d4>
    goto output_done;
 8017bea:	bf00      	nop
 8017bec:	e002      	b.n	8017bf4 <tcp_output+0x3d4>
    goto output_done;
 8017bee:	bf00      	nop
 8017bf0:	e000      	b.n	8017bf4 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017bf2:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	8b5b      	ldrh	r3, [r3, #26]
 8017bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017bfc:	b29a      	uxth	r2, r3
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017c02:	2300      	movs	r3, #0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3728      	adds	r7, #40	@ 0x28
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bdb0      	pop	{r4, r5, r7, pc}

08017c0c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b082      	sub	sp, #8
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d106      	bne.n	8017c28 <tcp_output_segment_busy+0x1c>
 8017c1a:	4b09      	ldr	r3, [pc, #36]	@ (8017c40 <tcp_output_segment_busy+0x34>)
 8017c1c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017c20:	4908      	ldr	r1, [pc, #32]	@ (8017c44 <tcp_output_segment_busy+0x38>)
 8017c22:	4809      	ldr	r0, [pc, #36]	@ (8017c48 <tcp_output_segment_busy+0x3c>)
 8017c24:	f007 f826 	bl	801ec74 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	685b      	ldr	r3, [r3, #4]
 8017c2c:	7b9b      	ldrb	r3, [r3, #14]
 8017c2e:	2b01      	cmp	r3, #1
 8017c30:	d001      	beq.n	8017c36 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017c32:	2301      	movs	r3, #1
 8017c34:	e000      	b.n	8017c38 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017c36:	2300      	movs	r3, #0
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3708      	adds	r7, #8
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	08023d0c 	.word	0x08023d0c
 8017c44:	08024304 	.word	0x08024304
 8017c48:	08023d60 	.word	0x08023d60

08017c4c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017c4c:	b5b0      	push	{r4, r5, r7, lr}
 8017c4e:	b08c      	sub	sp, #48	@ 0x30
 8017c50:	af04      	add	r7, sp, #16
 8017c52:	60f8      	str	r0, [r7, #12]
 8017c54:	60b9      	str	r1, [r7, #8]
 8017c56:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d106      	bne.n	8017c6c <tcp_output_segment+0x20>
 8017c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8017e14 <tcp_output_segment+0x1c8>)
 8017c60:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017c64:	496c      	ldr	r1, [pc, #432]	@ (8017e18 <tcp_output_segment+0x1cc>)
 8017c66:	486d      	ldr	r0, [pc, #436]	@ (8017e1c <tcp_output_segment+0x1d0>)
 8017c68:	f007 f804 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d106      	bne.n	8017c80 <tcp_output_segment+0x34>
 8017c72:	4b68      	ldr	r3, [pc, #416]	@ (8017e14 <tcp_output_segment+0x1c8>)
 8017c74:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017c78:	4969      	ldr	r1, [pc, #420]	@ (8017e20 <tcp_output_segment+0x1d4>)
 8017c7a:	4868      	ldr	r0, [pc, #416]	@ (8017e1c <tcp_output_segment+0x1d0>)
 8017c7c:	f006 fffa 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d106      	bne.n	8017c94 <tcp_output_segment+0x48>
 8017c86:	4b63      	ldr	r3, [pc, #396]	@ (8017e14 <tcp_output_segment+0x1c8>)
 8017c88:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017c8c:	4965      	ldr	r1, [pc, #404]	@ (8017e24 <tcp_output_segment+0x1d8>)
 8017c8e:	4863      	ldr	r0, [pc, #396]	@ (8017e1c <tcp_output_segment+0x1d0>)
 8017c90:	f006 fff0 	bl	801ec74 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017c94:	68f8      	ldr	r0, [r7, #12]
 8017c96:	f7ff ffb9 	bl	8017c0c <tcp_output_segment_busy>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d001      	beq.n	8017ca4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	e0b3      	b.n	8017e0c <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017ca4:	68bb      	ldr	r3, [r7, #8]
 8017ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	691c      	ldr	r4, [r3, #16]
 8017cac:	4610      	mov	r0, r2
 8017cae:	f7f8 fc1c 	bl	80104ea <lwip_htonl>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	691c      	ldr	r4, [r3, #16]
 8017cbe:	4610      	mov	r0, r2
 8017cc0:	f7f8 fbfe 	bl	80104c0 <lwip_htons>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ccc:	68ba      	ldr	r2, [r7, #8]
 8017cce:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017cd0:	441a      	add	r2, r3
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	691b      	ldr	r3, [r3, #16]
 8017cda:	3314      	adds	r3, #20
 8017cdc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	7b1b      	ldrb	r3, [r3, #12]
 8017ce2:	f003 0301 	and.w	r3, r3, #1
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d015      	beq.n	8017d16 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	3304      	adds	r3, #4
 8017cee:	461a      	mov	r2, r3
 8017cf0:	6879      	ldr	r1, [r7, #4]
 8017cf2:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8017cf6:	f7fc f9bf 	bl	8014078 <tcp_eff_send_mss_netif>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017cfe:	8b7b      	ldrh	r3, [r7, #26]
 8017d00:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7f8 fbf0 	bl	80104ea <lwip_htonl>
 8017d0a:	4602      	mov	r2, r0
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017d10:	69fb      	ldr	r3, [r7, #28]
 8017d12:	3304      	adds	r3, #4
 8017d14:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017d16:	68bb      	ldr	r3, [r7, #8]
 8017d18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	da02      	bge.n	8017d26 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	2200      	movs	r2, #0
 8017d24:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d10c      	bne.n	8017d48 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8017e28 <tcp_output_segment+0x1dc>)
 8017d30:	681a      	ldr	r2, [r3, #0]
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	691b      	ldr	r3, [r3, #16]
 8017d3a:	685b      	ldr	r3, [r3, #4]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7f8 fbd4 	bl	80104ea <lwip_htonl>
 8017d42:	4602      	mov	r2, r0
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	691a      	ldr	r2, [r3, #16]
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	1ad3      	subs	r3, r2, r3
 8017d54:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	8959      	ldrh	r1, [r3, #10]
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	685b      	ldr	r3, [r3, #4]
 8017d60:	8b3a      	ldrh	r2, [r7, #24]
 8017d62:	1a8a      	subs	r2, r1, r2
 8017d64:	b292      	uxth	r2, r2
 8017d66:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	8919      	ldrh	r1, [r3, #8]
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	685b      	ldr	r3, [r3, #4]
 8017d72:	8b3a      	ldrh	r2, [r7, #24]
 8017d74:	1a8a      	subs	r2, r1, r2
 8017d76:	b292      	uxth	r2, r2
 8017d78:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	685b      	ldr	r3, [r3, #4]
 8017d7e:	68fa      	ldr	r2, [r7, #12]
 8017d80:	6912      	ldr	r2, [r2, #16]
 8017d82:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	691b      	ldr	r3, [r3, #16]
 8017d88:	2200      	movs	r2, #0
 8017d8a:	741a      	strb	r2, [r3, #16]
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	691a      	ldr	r2, [r3, #16]
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	7b1b      	ldrb	r3, [r3, #12]
 8017d98:	f003 0301 	and.w	r3, r3, #1
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d001      	beq.n	8017da4 <tcp_output_segment+0x158>
 8017da0:	2318      	movs	r3, #24
 8017da2:	e000      	b.n	8017da6 <tcp_output_segment+0x15a>
 8017da4:	2314      	movs	r3, #20
 8017da6:	4413      	add	r3, r2
 8017da8:	69fa      	ldr	r2, [r7, #28]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d006      	beq.n	8017dbc <tcp_output_segment+0x170>
 8017dae:	4b19      	ldr	r3, [pc, #100]	@ (8017e14 <tcp_output_segment+0x1c8>)
 8017db0:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017db4:	491d      	ldr	r1, [pc, #116]	@ (8017e2c <tcp_output_segment+0x1e0>)
 8017db6:	4819      	ldr	r0, [pc, #100]	@ (8017e1c <tcp_output_segment+0x1d0>)
 8017db8:	f006 ff5c 	bl	801ec74 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8017dc4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8017dc6:	68bd      	ldr	r5, [r7, #8]
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8017dcc:	68fa      	ldr	r2, [r7, #12]
 8017dce:	6914      	ldr	r4, [r2, #16]
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	462b      	mov	r3, r5
 8017dd4:	460a      	mov	r2, r1
 8017dd6:	2106      	movs	r1, #6
 8017dd8:	f7f8 fca4 	bl	8010724 <ip_chksum_pseudo>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	6858      	ldr	r0, [r3, #4]
 8017de4:	68b9      	ldr	r1, [r7, #8]
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	1d1c      	adds	r4, r3, #4
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	7add      	ldrb	r5, [r3, #11]
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	7a9b      	ldrb	r3, [r3, #10]
 8017df2:	687a      	ldr	r2, [r7, #4]
 8017df4:	9202      	str	r2, [sp, #8]
 8017df6:	2206      	movs	r2, #6
 8017df8:	9201      	str	r2, [sp, #4]
 8017dfa:	9300      	str	r3, [sp, #0]
 8017dfc:	462b      	mov	r3, r5
 8017dfe:	4622      	mov	r2, r4
 8017e00:	f004 fdaa 	bl	801c958 <ip4_output_if>
 8017e04:	4603      	mov	r3, r0
 8017e06:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3720      	adds	r7, #32
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bdb0      	pop	{r4, r5, r7, pc}
 8017e14:	08023d0c 	.word	0x08023d0c
 8017e18:	0802432c 	.word	0x0802432c
 8017e1c:	08023d60 	.word	0x08023d60
 8017e20:	0802434c 	.word	0x0802434c
 8017e24:	0802436c 	.word	0x0802436c
 8017e28:	20013dbc 	.word	0x20013dbc
 8017e2c:	08024390 	.word	0x08024390

08017e30 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017e30:	b5b0      	push	{r4, r5, r7, lr}
 8017e32:	b084      	sub	sp, #16
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d106      	bne.n	8017e4c <tcp_rexmit_rto_prepare+0x1c>
 8017e3e:	4b36      	ldr	r3, [pc, #216]	@ (8017f18 <tcp_rexmit_rto_prepare+0xe8>)
 8017e40:	f240 6263 	movw	r2, #1635	@ 0x663
 8017e44:	4935      	ldr	r1, [pc, #212]	@ (8017f1c <tcp_rexmit_rto_prepare+0xec>)
 8017e46:	4836      	ldr	r0, [pc, #216]	@ (8017f20 <tcp_rexmit_rto_prepare+0xf0>)
 8017e48:	f006 ff14 	bl	801ec74 <iprintf>

  if (pcb->unacked == NULL) {
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d102      	bne.n	8017e5a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017e54:	f06f 0305 	mvn.w	r3, #5
 8017e58:	e059      	b.n	8017f0e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e5e:	60fb      	str	r3, [r7, #12]
 8017e60:	e00b      	b.n	8017e7a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	f7ff fed2 	bl	8017c0c <tcp_output_segment_busy>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d002      	beq.n	8017e74 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017e6e:	f06f 0305 	mvn.w	r3, #5
 8017e72:	e04c      	b.n	8017f0e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	60fb      	str	r3, [r7, #12]
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d1ef      	bne.n	8017e62 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017e82:	68f8      	ldr	r0, [r7, #12]
 8017e84:	f7ff fec2 	bl	8017c0c <tcp_output_segment_busy>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d002      	beq.n	8017e94 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017e8e:	f06f 0305 	mvn.w	r3, #5
 8017e92:	e03c      	b.n	8017f0e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d104      	bne.n	8017eae <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	895a      	ldrh	r2, [r3, #10]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	8b5b      	ldrh	r3, [r3, #26]
 8017ec0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	691b      	ldr	r3, [r3, #16]
 8017ece:	685b      	ldr	r3, [r3, #4]
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7f8 fb0a 	bl	80104ea <lwip_htonl>
 8017ed6:	4604      	mov	r4, r0
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	891b      	ldrh	r3, [r3, #8]
 8017edc:	461d      	mov	r5, r3
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	691b      	ldr	r3, [r3, #16]
 8017ee2:	899b      	ldrh	r3, [r3, #12]
 8017ee4:	b29b      	uxth	r3, r3
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7f8 faea 	bl	80104c0 <lwip_htons>
 8017eec:	4603      	mov	r3, r0
 8017eee:	b2db      	uxtb	r3, r3
 8017ef0:	f003 0303 	and.w	r3, r3, #3
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <tcp_rexmit_rto_prepare+0xcc>
 8017ef8:	2301      	movs	r3, #1
 8017efa:	e000      	b.n	8017efe <tcp_rexmit_rto_prepare+0xce>
 8017efc:	2300      	movs	r3, #0
 8017efe:	442b      	add	r3, r5
 8017f00:	18e2      	adds	r2, r4, r3
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017f0c:	2300      	movs	r3, #0
}
 8017f0e:	4618      	mov	r0, r3
 8017f10:	3710      	adds	r7, #16
 8017f12:	46bd      	mov	sp, r7
 8017f14:	bdb0      	pop	{r4, r5, r7, pc}
 8017f16:	bf00      	nop
 8017f18:	08023d0c 	.word	0x08023d0c
 8017f1c:	080243a4 	.word	0x080243a4
 8017f20:	08023d60 	.word	0x08023d60

08017f24 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b082      	sub	sp, #8
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d106      	bne.n	8017f40 <tcp_rexmit_rto_commit+0x1c>
 8017f32:	4b0d      	ldr	r3, [pc, #52]	@ (8017f68 <tcp_rexmit_rto_commit+0x44>)
 8017f34:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017f38:	490c      	ldr	r1, [pc, #48]	@ (8017f6c <tcp_rexmit_rto_commit+0x48>)
 8017f3a:	480d      	ldr	r0, [pc, #52]	@ (8017f70 <tcp_rexmit_rto_commit+0x4c>)
 8017f3c:	f006 fe9a 	bl	801ec74 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017f46:	2bff      	cmp	r3, #255	@ 0xff
 8017f48:	d007      	beq.n	8017f5a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017f50:	3301      	adds	r3, #1
 8017f52:	b2da      	uxtb	r2, r3
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f7ff fc60 	bl	8017820 <tcp_output>
}
 8017f60:	bf00      	nop
 8017f62:	3708      	adds	r7, #8
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	08023d0c 	.word	0x08023d0c
 8017f6c:	080243c8 	.word	0x080243c8
 8017f70:	08023d60 	.word	0x08023d60

08017f74 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b082      	sub	sp, #8
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d106      	bne.n	8017f90 <tcp_rexmit_rto+0x1c>
 8017f82:	4b0a      	ldr	r3, [pc, #40]	@ (8017fac <tcp_rexmit_rto+0x38>)
 8017f84:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017f88:	4909      	ldr	r1, [pc, #36]	@ (8017fb0 <tcp_rexmit_rto+0x3c>)
 8017f8a:	480a      	ldr	r0, [pc, #40]	@ (8017fb4 <tcp_rexmit_rto+0x40>)
 8017f8c:	f006 fe72 	bl	801ec74 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017f90:	6878      	ldr	r0, [r7, #4]
 8017f92:	f7ff ff4d 	bl	8017e30 <tcp_rexmit_rto_prepare>
 8017f96:	4603      	mov	r3, r0
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f7ff ffc1 	bl	8017f24 <tcp_rexmit_rto_commit>
  }
}
 8017fa2:	bf00      	nop
 8017fa4:	3708      	adds	r7, #8
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd80      	pop	{r7, pc}
 8017faa:	bf00      	nop
 8017fac:	08023d0c 	.word	0x08023d0c
 8017fb0:	080243ec 	.word	0x080243ec
 8017fb4:	08023d60 	.word	0x08023d60

08017fb8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017fb8:	b590      	push	{r4, r7, lr}
 8017fba:	b085      	sub	sp, #20
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d106      	bne.n	8017fd4 <tcp_rexmit+0x1c>
 8017fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8018084 <tcp_rexmit+0xcc>)
 8017fc8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017fcc:	492e      	ldr	r1, [pc, #184]	@ (8018088 <tcp_rexmit+0xd0>)
 8017fce:	482f      	ldr	r0, [pc, #188]	@ (801808c <tcp_rexmit+0xd4>)
 8017fd0:	f006 fe50 	bl	801ec74 <iprintf>

  if (pcb->unacked == NULL) {
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d102      	bne.n	8017fe2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017fdc:	f06f 0305 	mvn.w	r3, #5
 8017fe0:	e04c      	b.n	801807c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fe6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017fe8:	68b8      	ldr	r0, [r7, #8]
 8017fea:	f7ff fe0f 	bl	8017c0c <tcp_output_segment_busy>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d002      	beq.n	8017ffa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017ff4:	f06f 0305 	mvn.w	r3, #5
 8017ff8:	e040      	b.n	801807c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	681a      	ldr	r2, [r3, #0]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	336c      	adds	r3, #108	@ 0x6c
 8018006:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018008:	e002      	b.n	8018010 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d011      	beq.n	801803c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	691b      	ldr	r3, [r3, #16]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	4618      	mov	r0, r3
 8018022:	f7f8 fa62 	bl	80104ea <lwip_htonl>
 8018026:	4604      	mov	r4, r0
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	691b      	ldr	r3, [r3, #16]
 801802c:	685b      	ldr	r3, [r3, #4]
 801802e:	4618      	mov	r0, r3
 8018030:	f7f8 fa5b 	bl	80104ea <lwip_htonl>
 8018034:	4603      	mov	r3, r0
 8018036:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018038:	2b00      	cmp	r3, #0
 801803a:	dbe6      	blt.n	801800a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	681a      	ldr	r2, [r3, #0]
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	68ba      	ldr	r2, [r7, #8]
 8018048:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d103      	bne.n	801805a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	2200      	movs	r2, #0
 8018056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018060:	2bff      	cmp	r3, #255	@ 0xff
 8018062:	d007      	beq.n	8018074 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801806a:	3301      	adds	r3, #1
 801806c:	b2da      	uxtb	r2, r3
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2200      	movs	r2, #0
 8018078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801807a:	2300      	movs	r3, #0
}
 801807c:	4618      	mov	r0, r3
 801807e:	3714      	adds	r7, #20
 8018080:	46bd      	mov	sp, r7
 8018082:	bd90      	pop	{r4, r7, pc}
 8018084:	08023d0c 	.word	0x08023d0c
 8018088:	08024408 	.word	0x08024408
 801808c:	08023d60 	.word	0x08023d60

08018090 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d106      	bne.n	80180ac <tcp_rexmit_fast+0x1c>
 801809e:	4b2a      	ldr	r3, [pc, #168]	@ (8018148 <tcp_rexmit_fast+0xb8>)
 80180a0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80180a4:	4929      	ldr	r1, [pc, #164]	@ (801814c <tcp_rexmit_fast+0xbc>)
 80180a6:	482a      	ldr	r0, [pc, #168]	@ (8018150 <tcp_rexmit_fast+0xc0>)
 80180a8:	f006 fde4 	bl	801ec74 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d044      	beq.n	801813e <tcp_rexmit_fast+0xae>
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	8b5b      	ldrh	r3, [r3, #26]
 80180b8:	f003 0304 	and.w	r3, r3, #4
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d13e      	bne.n	801813e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80180c0:	6878      	ldr	r0, [r7, #4]
 80180c2:	f7ff ff79 	bl	8017fb8 <tcp_rexmit>
 80180c6:	4603      	mov	r3, r0
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d138      	bne.n	801813e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80180d8:	4293      	cmp	r3, r2
 80180da:	bf28      	it	cs
 80180dc:	4613      	movcs	r3, r2
 80180de:	b29b      	uxth	r3, r3
 80180e0:	0fda      	lsrs	r2, r3, #31
 80180e2:	4413      	add	r3, r2
 80180e4:	105b      	asrs	r3, r3, #1
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80180f4:	461a      	mov	r2, r3
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80180fa:	005b      	lsls	r3, r3, #1
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d206      	bcs.n	801810e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018104:	005b      	lsls	r3, r3, #1
 8018106:	b29a      	uxth	r2, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018118:	4619      	mov	r1, r3
 801811a:	0049      	lsls	r1, r1, #1
 801811c:	440b      	add	r3, r1
 801811e:	b29b      	uxth	r3, r3
 8018120:	4413      	add	r3, r2
 8018122:	b29a      	uxth	r2, r3
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	8b5b      	ldrh	r3, [r3, #26]
 801812e:	f043 0304 	orr.w	r3, r3, #4
 8018132:	b29a      	uxth	r2, r3
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2200      	movs	r2, #0
 801813c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801813e:	bf00      	nop
 8018140:	3708      	adds	r7, #8
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	08023d0c 	.word	0x08023d0c
 801814c:	08024420 	.word	0x08024420
 8018150:	08023d60 	.word	0x08023d60

08018154 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b086      	sub	sp, #24
 8018158:	af00      	add	r7, sp, #0
 801815a:	60f8      	str	r0, [r7, #12]
 801815c:	607b      	str	r3, [r7, #4]
 801815e:	460b      	mov	r3, r1
 8018160:	817b      	strh	r3, [r7, #10]
 8018162:	4613      	mov	r3, r2
 8018164:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018166:	897a      	ldrh	r2, [r7, #10]
 8018168:	893b      	ldrh	r3, [r7, #8]
 801816a:	4413      	add	r3, r2
 801816c:	b29b      	uxth	r3, r3
 801816e:	3314      	adds	r3, #20
 8018170:	b29b      	uxth	r3, r3
 8018172:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018176:	4619      	mov	r1, r3
 8018178:	2022      	movs	r0, #34	@ 0x22
 801817a:	f7f9 fbdb 	bl	8011934 <pbuf_alloc>
 801817e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d04d      	beq.n	8018222 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018186:	897b      	ldrh	r3, [r7, #10]
 8018188:	3313      	adds	r3, #19
 801818a:	697a      	ldr	r2, [r7, #20]
 801818c:	8952      	ldrh	r2, [r2, #10]
 801818e:	4293      	cmp	r3, r2
 8018190:	db06      	blt.n	80181a0 <tcp_output_alloc_header_common+0x4c>
 8018192:	4b26      	ldr	r3, [pc, #152]	@ (801822c <tcp_output_alloc_header_common+0xd8>)
 8018194:	f240 7223 	movw	r2, #1827	@ 0x723
 8018198:	4925      	ldr	r1, [pc, #148]	@ (8018230 <tcp_output_alloc_header_common+0xdc>)
 801819a:	4826      	ldr	r0, [pc, #152]	@ (8018234 <tcp_output_alloc_header_common+0xe0>)
 801819c:	f006 fd6a 	bl	801ec74 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80181a0:	697b      	ldr	r3, [r7, #20]
 80181a2:	685b      	ldr	r3, [r3, #4]
 80181a4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80181a6:	8c3b      	ldrh	r3, [r7, #32]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7f8 f989 	bl	80104c0 <lwip_htons>
 80181ae:	4603      	mov	r3, r0
 80181b0:	461a      	mov	r2, r3
 80181b2:	693b      	ldr	r3, [r7, #16]
 80181b4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80181b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7f8 f981 	bl	80104c0 <lwip_htons>
 80181be:	4603      	mov	r3, r0
 80181c0:	461a      	mov	r2, r3
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80181c6:	693b      	ldr	r3, [r7, #16]
 80181c8:	687a      	ldr	r2, [r7, #4]
 80181ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80181cc:	68f8      	ldr	r0, [r7, #12]
 80181ce:	f7f8 f98c 	bl	80104ea <lwip_htonl>
 80181d2:	4602      	mov	r2, r0
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80181d8:	897b      	ldrh	r3, [r7, #10]
 80181da:	089b      	lsrs	r3, r3, #2
 80181dc:	b29b      	uxth	r3, r3
 80181de:	3305      	adds	r3, #5
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	031b      	lsls	r3, r3, #12
 80181e4:	b29a      	uxth	r2, r3
 80181e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	4313      	orrs	r3, r2
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7f8 f965 	bl	80104c0 <lwip_htons>
 80181f6:	4603      	mov	r3, r0
 80181f8:	461a      	mov	r2, r3
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80181fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018200:	4618      	mov	r0, r3
 8018202:	f7f8 f95d 	bl	80104c0 <lwip_htons>
 8018206:	4603      	mov	r3, r0
 8018208:	461a      	mov	r2, r3
 801820a:	693b      	ldr	r3, [r7, #16]
 801820c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	2200      	movs	r2, #0
 8018212:	741a      	strb	r2, [r3, #16]
 8018214:	2200      	movs	r2, #0
 8018216:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	2200      	movs	r2, #0
 801821c:	749a      	strb	r2, [r3, #18]
 801821e:	2200      	movs	r2, #0
 8018220:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018222:	697b      	ldr	r3, [r7, #20]
}
 8018224:	4618      	mov	r0, r3
 8018226:	3718      	adds	r7, #24
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}
 801822c:	08023d0c 	.word	0x08023d0c
 8018230:	08024440 	.word	0x08024440
 8018234:	08023d60 	.word	0x08023d60

08018238 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018238:	b5b0      	push	{r4, r5, r7, lr}
 801823a:	b08a      	sub	sp, #40	@ 0x28
 801823c:	af04      	add	r7, sp, #16
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	607b      	str	r3, [r7, #4]
 8018242:	460b      	mov	r3, r1
 8018244:	817b      	strh	r3, [r7, #10]
 8018246:	4613      	mov	r3, r2
 8018248:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d106      	bne.n	801825e <tcp_output_alloc_header+0x26>
 8018250:	4b15      	ldr	r3, [pc, #84]	@ (80182a8 <tcp_output_alloc_header+0x70>)
 8018252:	f240 7242 	movw	r2, #1858	@ 0x742
 8018256:	4915      	ldr	r1, [pc, #84]	@ (80182ac <tcp_output_alloc_header+0x74>)
 8018258:	4815      	ldr	r0, [pc, #84]	@ (80182b0 <tcp_output_alloc_header+0x78>)
 801825a:	f006 fd0b 	bl	801ec74 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	8adb      	ldrh	r3, [r3, #22]
 8018266:	68fa      	ldr	r2, [r7, #12]
 8018268:	8b12      	ldrh	r2, [r2, #24]
 801826a:	68f9      	ldr	r1, [r7, #12]
 801826c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801826e:	893d      	ldrh	r5, [r7, #8]
 8018270:	897c      	ldrh	r4, [r7, #10]
 8018272:	9103      	str	r1, [sp, #12]
 8018274:	2110      	movs	r1, #16
 8018276:	9102      	str	r1, [sp, #8]
 8018278:	9201      	str	r2, [sp, #4]
 801827a:	9300      	str	r3, [sp, #0]
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	462a      	mov	r2, r5
 8018280:	4621      	mov	r1, r4
 8018282:	f7ff ff67 	bl	8018154 <tcp_output_alloc_header_common>
 8018286:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d006      	beq.n	801829c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018292:	68fa      	ldr	r2, [r7, #12]
 8018294:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018296:	441a      	add	r2, r3
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801829c:	697b      	ldr	r3, [r7, #20]
}
 801829e:	4618      	mov	r0, r3
 80182a0:	3718      	adds	r7, #24
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bdb0      	pop	{r4, r5, r7, pc}
 80182a6:	bf00      	nop
 80182a8:	08023d0c 	.word	0x08023d0c
 80182ac:	08024470 	.word	0x08024470
 80182b0:	08023d60 	.word	0x08023d60

080182b4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b088      	sub	sp, #32
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	60f8      	str	r0, [r7, #12]
 80182bc:	60b9      	str	r1, [r7, #8]
 80182be:	4611      	mov	r1, r2
 80182c0:	461a      	mov	r2, r3
 80182c2:	460b      	mov	r3, r1
 80182c4:	71fb      	strb	r3, [r7, #7]
 80182c6:	4613      	mov	r3, r2
 80182c8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80182ca:	2300      	movs	r3, #0
 80182cc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d106      	bne.n	80182e2 <tcp_output_fill_options+0x2e>
 80182d4:	4b12      	ldr	r3, [pc, #72]	@ (8018320 <tcp_output_fill_options+0x6c>)
 80182d6:	f240 7256 	movw	r2, #1878	@ 0x756
 80182da:	4912      	ldr	r1, [pc, #72]	@ (8018324 <tcp_output_fill_options+0x70>)
 80182dc:	4812      	ldr	r0, [pc, #72]	@ (8018328 <tcp_output_fill_options+0x74>)
 80182de:	f006 fcc9 	bl	801ec74 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80182e8:	69bb      	ldr	r3, [r7, #24]
 80182ea:	3314      	adds	r3, #20
 80182ec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80182ee:	8bfb      	ldrh	r3, [r7, #30]
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	461a      	mov	r2, r3
 80182f4:	79fb      	ldrb	r3, [r7, #7]
 80182f6:	009b      	lsls	r3, r3, #2
 80182f8:	f003 0304 	and.w	r3, r3, #4
 80182fc:	4413      	add	r3, r2
 80182fe:	3314      	adds	r3, #20
 8018300:	69ba      	ldr	r2, [r7, #24]
 8018302:	4413      	add	r3, r2
 8018304:	697a      	ldr	r2, [r7, #20]
 8018306:	429a      	cmp	r2, r3
 8018308:	d006      	beq.n	8018318 <tcp_output_fill_options+0x64>
 801830a:	4b05      	ldr	r3, [pc, #20]	@ (8018320 <tcp_output_fill_options+0x6c>)
 801830c:	f240 7275 	movw	r2, #1909	@ 0x775
 8018310:	4906      	ldr	r1, [pc, #24]	@ (801832c <tcp_output_fill_options+0x78>)
 8018312:	4805      	ldr	r0, [pc, #20]	@ (8018328 <tcp_output_fill_options+0x74>)
 8018314:	f006 fcae 	bl	801ec74 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018318:	bf00      	nop
 801831a:	3720      	adds	r7, #32
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}
 8018320:	08023d0c 	.word	0x08023d0c
 8018324:	08024498 	.word	0x08024498
 8018328:	08023d60 	.word	0x08023d60
 801832c:	08024390 	.word	0x08024390

08018330 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b08c      	sub	sp, #48	@ 0x30
 8018334:	af04      	add	r7, sp, #16
 8018336:	60f8      	str	r0, [r7, #12]
 8018338:	60b9      	str	r1, [r7, #8]
 801833a:	607a      	str	r2, [r7, #4]
 801833c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d106      	bne.n	8018352 <tcp_output_control_segment+0x22>
 8018344:	4b24      	ldr	r3, [pc, #144]	@ (80183d8 <tcp_output_control_segment+0xa8>)
 8018346:	f240 7287 	movw	r2, #1927	@ 0x787
 801834a:	4924      	ldr	r1, [pc, #144]	@ (80183dc <tcp_output_control_segment+0xac>)
 801834c:	4824      	ldr	r0, [pc, #144]	@ (80183e0 <tcp_output_control_segment+0xb0>)
 801834e:	f006 fc91 	bl	801ec74 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018352:	683a      	ldr	r2, [r7, #0]
 8018354:	6879      	ldr	r1, [r7, #4]
 8018356:	68f8      	ldr	r0, [r7, #12]
 8018358:	f7fe fa6a 	bl	8016830 <tcp_route>
 801835c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 801835e:	69bb      	ldr	r3, [r7, #24]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d102      	bne.n	801836a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018364:	23fc      	movs	r3, #252	@ 0xfc
 8018366:	77fb      	strb	r3, [r7, #31]
 8018368:	e02c      	b.n	80183c4 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	685b      	ldr	r3, [r3, #4]
 801836e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	891a      	ldrh	r2, [r3, #8]
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	9300      	str	r3, [sp, #0]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	2106      	movs	r1, #6
 801837c:	68b8      	ldr	r0, [r7, #8]
 801837e:	f7f8 f9d1 	bl	8010724 <ip_chksum_pseudo>
 8018382:	4603      	mov	r3, r0
 8018384:	461a      	mov	r2, r3
 8018386:	697b      	ldr	r3, [r7, #20]
 8018388:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d006      	beq.n	801839e <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	7adb      	ldrb	r3, [r3, #11]
 8018394:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	7a9b      	ldrb	r3, [r3, #10]
 801839a:	777b      	strb	r3, [r7, #29]
 801839c:	e003      	b.n	80183a6 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801839e:	23ff      	movs	r3, #255	@ 0xff
 80183a0:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80183a2:	2300      	movs	r3, #0
 80183a4:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80183a6:	7fba      	ldrb	r2, [r7, #30]
 80183a8:	69bb      	ldr	r3, [r7, #24]
 80183aa:	9302      	str	r3, [sp, #8]
 80183ac:	2306      	movs	r3, #6
 80183ae:	9301      	str	r3, [sp, #4]
 80183b0:	7f7b      	ldrb	r3, [r7, #29]
 80183b2:	9300      	str	r3, [sp, #0]
 80183b4:	4613      	mov	r3, r2
 80183b6:	683a      	ldr	r2, [r7, #0]
 80183b8:	6879      	ldr	r1, [r7, #4]
 80183ba:	68b8      	ldr	r0, [r7, #8]
 80183bc:	f004 facc 	bl	801c958 <ip4_output_if>
 80183c0:	4603      	mov	r3, r0
 80183c2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80183c4:	68b8      	ldr	r0, [r7, #8]
 80183c6:	f7f9 fd9d 	bl	8011f04 <pbuf_free>
  return err;
 80183ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80183ce:	4618      	mov	r0, r3
 80183d0:	3720      	adds	r7, #32
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}
 80183d6:	bf00      	nop
 80183d8:	08023d0c 	.word	0x08023d0c
 80183dc:	080244c0 	.word	0x080244c0
 80183e0:	08023d60 	.word	0x08023d60

080183e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80183e4:	b590      	push	{r4, r7, lr}
 80183e6:	b08b      	sub	sp, #44	@ 0x2c
 80183e8:	af04      	add	r7, sp, #16
 80183ea:	60f8      	str	r0, [r7, #12]
 80183ec:	60b9      	str	r1, [r7, #8]
 80183ee:	607a      	str	r2, [r7, #4]
 80183f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d106      	bne.n	8018406 <tcp_rst+0x22>
 80183f8:	4b1f      	ldr	r3, [pc, #124]	@ (8018478 <tcp_rst+0x94>)
 80183fa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80183fe:	491f      	ldr	r1, [pc, #124]	@ (801847c <tcp_rst+0x98>)
 8018400:	481f      	ldr	r0, [pc, #124]	@ (8018480 <tcp_rst+0x9c>)
 8018402:	f006 fc37 	bl	801ec74 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018408:	2b00      	cmp	r3, #0
 801840a:	d106      	bne.n	801841a <tcp_rst+0x36>
 801840c:	4b1a      	ldr	r3, [pc, #104]	@ (8018478 <tcp_rst+0x94>)
 801840e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8018412:	491c      	ldr	r1, [pc, #112]	@ (8018484 <tcp_rst+0xa0>)
 8018414:	481a      	ldr	r0, [pc, #104]	@ (8018480 <tcp_rst+0x9c>)
 8018416:	f006 fc2d 	bl	801ec74 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801841a:	2300      	movs	r3, #0
 801841c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801841e:	f24a 032d 	movw	r3, #41005	@ 0xa02d
 8018422:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018424:	7dfb      	ldrb	r3, [r7, #23]
 8018426:	b29c      	uxth	r4, r3
 8018428:	68b8      	ldr	r0, [r7, #8]
 801842a:	f7f8 f85e 	bl	80104ea <lwip_htonl>
 801842e:	4602      	mov	r2, r0
 8018430:	8abb      	ldrh	r3, [r7, #20]
 8018432:	9303      	str	r3, [sp, #12]
 8018434:	2314      	movs	r3, #20
 8018436:	9302      	str	r3, [sp, #8]
 8018438:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801843a:	9301      	str	r3, [sp, #4]
 801843c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801843e:	9300      	str	r3, [sp, #0]
 8018440:	4613      	mov	r3, r2
 8018442:	2200      	movs	r2, #0
 8018444:	4621      	mov	r1, r4
 8018446:	6878      	ldr	r0, [r7, #4]
 8018448:	f7ff fe84 	bl	8018154 <tcp_output_alloc_header_common>
 801844c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d00c      	beq.n	801846e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018454:	7dfb      	ldrb	r3, [r7, #23]
 8018456:	2200      	movs	r2, #0
 8018458:	6939      	ldr	r1, [r7, #16]
 801845a:	68f8      	ldr	r0, [r7, #12]
 801845c:	f7ff ff2a 	bl	80182b4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018462:	683a      	ldr	r2, [r7, #0]
 8018464:	6939      	ldr	r1, [r7, #16]
 8018466:	68f8      	ldr	r0, [r7, #12]
 8018468:	f7ff ff62 	bl	8018330 <tcp_output_control_segment>
 801846c:	e000      	b.n	8018470 <tcp_rst+0x8c>
    return;
 801846e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018470:	371c      	adds	r7, #28
 8018472:	46bd      	mov	sp, r7
 8018474:	bd90      	pop	{r4, r7, pc}
 8018476:	bf00      	nop
 8018478:	08023d0c 	.word	0x08023d0c
 801847c:	080244ec 	.word	0x080244ec
 8018480:	08023d60 	.word	0x08023d60
 8018484:	08024508 	.word	0x08024508

08018488 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018488:	b590      	push	{r4, r7, lr}
 801848a:	b087      	sub	sp, #28
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018490:	2300      	movs	r3, #0
 8018492:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018494:	2300      	movs	r3, #0
 8018496:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d106      	bne.n	80184ac <tcp_send_empty_ack+0x24>
 801849e:	4b28      	ldr	r3, [pc, #160]	@ (8018540 <tcp_send_empty_ack+0xb8>)
 80184a0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80184a4:	4927      	ldr	r1, [pc, #156]	@ (8018544 <tcp_send_empty_ack+0xbc>)
 80184a6:	4828      	ldr	r0, [pc, #160]	@ (8018548 <tcp_send_empty_ack+0xc0>)
 80184a8:	f006 fbe4 	bl	801ec74 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80184ac:	7dfb      	ldrb	r3, [r7, #23]
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	b2db      	uxtb	r3, r3
 80184b2:	f003 0304 	and.w	r3, r3, #4
 80184b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80184b8:	7d7b      	ldrb	r3, [r7, #21]
 80184ba:	b29c      	uxth	r4, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7f8 f812 	bl	80104ea <lwip_htonl>
 80184c6:	4603      	mov	r3, r0
 80184c8:	2200      	movs	r2, #0
 80184ca:	4621      	mov	r1, r4
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f7ff feb3 	bl	8018238 <tcp_output_alloc_header>
 80184d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80184d4:	693b      	ldr	r3, [r7, #16]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d109      	bne.n	80184ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	8b5b      	ldrh	r3, [r3, #26]
 80184de:	f043 0303 	orr.w	r3, r3, #3
 80184e2:	b29a      	uxth	r2, r3
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80184e8:	f06f 0301 	mvn.w	r3, #1
 80184ec:	e023      	b.n	8018536 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80184ee:	7dbb      	ldrb	r3, [r7, #22]
 80184f0:	7dfa      	ldrb	r2, [r7, #23]
 80184f2:	6939      	ldr	r1, [r7, #16]
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f7ff fedd 	bl	80182b4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	3304      	adds	r3, #4
 8018500:	6939      	ldr	r1, [r7, #16]
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f7ff ff14 	bl	8018330 <tcp_output_control_segment>
 8018508:	4603      	mov	r3, r0
 801850a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801850c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d007      	beq.n	8018524 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	8b5b      	ldrh	r3, [r3, #26]
 8018518:	f043 0303 	orr.w	r3, r3, #3
 801851c:	b29a      	uxth	r2, r3
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	835a      	strh	r2, [r3, #26]
 8018522:	e006      	b.n	8018532 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	8b5b      	ldrh	r3, [r3, #26]
 8018528:	f023 0303 	bic.w	r3, r3, #3
 801852c:	b29a      	uxth	r2, r3
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018536:	4618      	mov	r0, r3
 8018538:	371c      	adds	r7, #28
 801853a:	46bd      	mov	sp, r7
 801853c:	bd90      	pop	{r4, r7, pc}
 801853e:	bf00      	nop
 8018540:	08023d0c 	.word	0x08023d0c
 8018544:	08024524 	.word	0x08024524
 8018548:	08023d60 	.word	0x08023d60

0801854c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801854c:	b590      	push	{r4, r7, lr}
 801854e:	b085      	sub	sp, #20
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018554:	2300      	movs	r3, #0
 8018556:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d106      	bne.n	801856c <tcp_keepalive+0x20>
 801855e:	4b18      	ldr	r3, [pc, #96]	@ (80185c0 <tcp_keepalive+0x74>)
 8018560:	f640 0224 	movw	r2, #2084	@ 0x824
 8018564:	4917      	ldr	r1, [pc, #92]	@ (80185c4 <tcp_keepalive+0x78>)
 8018566:	4818      	ldr	r0, [pc, #96]	@ (80185c8 <tcp_keepalive+0x7c>)
 8018568:	f006 fb84 	bl	801ec74 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801856c:	7abb      	ldrb	r3, [r7, #10]
 801856e:	b29c      	uxth	r4, r3
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018574:	3b01      	subs	r3, #1
 8018576:	4618      	mov	r0, r3
 8018578:	f7f7 ffb7 	bl	80104ea <lwip_htonl>
 801857c:	4603      	mov	r3, r0
 801857e:	2200      	movs	r2, #0
 8018580:	4621      	mov	r1, r4
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f7ff fe58 	bl	8018238 <tcp_output_alloc_header>
 8018588:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d102      	bne.n	8018596 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018590:	f04f 33ff 	mov.w	r3, #4294967295
 8018594:	e010      	b.n	80185b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018596:	7abb      	ldrb	r3, [r7, #10]
 8018598:	2200      	movs	r2, #0
 801859a:	68f9      	ldr	r1, [r7, #12]
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f7ff fe89 	bl	80182b4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80185a2:	687a      	ldr	r2, [r7, #4]
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	3304      	adds	r3, #4
 80185a8:	68f9      	ldr	r1, [r7, #12]
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f7ff fec0 	bl	8018330 <tcp_output_control_segment>
 80185b0:	4603      	mov	r3, r0
 80185b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80185b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	3714      	adds	r7, #20
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd90      	pop	{r4, r7, pc}
 80185c0:	08023d0c 	.word	0x08023d0c
 80185c4:	08024544 	.word	0x08024544
 80185c8:	08023d60 	.word	0x08023d60

080185cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80185cc:	b590      	push	{r4, r7, lr}
 80185ce:	b08b      	sub	sp, #44	@ 0x2c
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80185d4:	2300      	movs	r3, #0
 80185d6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d106      	bne.n	80185ec <tcp_zero_window_probe+0x20>
 80185de:	4b4d      	ldr	r3, [pc, #308]	@ (8018714 <tcp_zero_window_probe+0x148>)
 80185e0:	f640 024f 	movw	r2, #2127	@ 0x84f
 80185e4:	494c      	ldr	r1, [pc, #304]	@ (8018718 <tcp_zero_window_probe+0x14c>)
 80185e6:	484d      	ldr	r0, [pc, #308]	@ (801871c <tcp_zero_window_probe+0x150>)
 80185e8:	f006 fb44 	bl	801ec74 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80185f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 80185f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d101      	bne.n	80185fc <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80185f8:	2300      	movs	r3, #0
 80185fa:	e087      	b.n	801870c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018602:	2bff      	cmp	r3, #255	@ 0xff
 8018604:	d007      	beq.n	8018616 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801860c:	3301      	adds	r3, #1
 801860e:	b2da      	uxtb	r2, r3
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018618:	691b      	ldr	r3, [r3, #16]
 801861a:	899b      	ldrh	r3, [r3, #12]
 801861c:	b29b      	uxth	r3, r3
 801861e:	4618      	mov	r0, r3
 8018620:	f7f7 ff4e 	bl	80104c0 <lwip_htons>
 8018624:	4603      	mov	r3, r0
 8018626:	b2db      	uxtb	r3, r3
 8018628:	f003 0301 	and.w	r3, r3, #1
 801862c:	2b00      	cmp	r3, #0
 801862e:	d005      	beq.n	801863c <tcp_zero_window_probe+0x70>
 8018630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018632:	891b      	ldrh	r3, [r3, #8]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d101      	bne.n	801863c <tcp_zero_window_probe+0x70>
 8018638:	2301      	movs	r3, #1
 801863a:	e000      	b.n	801863e <tcp_zero_window_probe+0x72>
 801863c:	2300      	movs	r3, #0
 801863e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018642:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018646:	2b00      	cmp	r3, #0
 8018648:	bf0c      	ite	eq
 801864a:	2301      	moveq	r3, #1
 801864c:	2300      	movne	r3, #0
 801864e:	b2db      	uxtb	r3, r3
 8018650:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018652:	7cfb      	ldrb	r3, [r7, #19]
 8018654:	b299      	uxth	r1, r3
 8018656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018658:	691b      	ldr	r3, [r3, #16]
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	8c3a      	ldrh	r2, [r7, #32]
 801865e:	6878      	ldr	r0, [r7, #4]
 8018660:	f7ff fdea 	bl	8018238 <tcp_output_alloc_header>
 8018664:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8018666:	69fb      	ldr	r3, [r7, #28]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d102      	bne.n	8018672 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801866c:	f04f 33ff 	mov.w	r3, #4294967295
 8018670:	e04c      	b.n	801870c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018672:	69fb      	ldr	r3, [r7, #28]
 8018674:	685b      	ldr	r3, [r3, #4]
 8018676:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8018678:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801867c:	2b00      	cmp	r3, #0
 801867e:	d011      	beq.n	80186a4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018680:	69bb      	ldr	r3, [r7, #24]
 8018682:	899b      	ldrh	r3, [r3, #12]
 8018684:	b29b      	uxth	r3, r3
 8018686:	b21b      	sxth	r3, r3
 8018688:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801868c:	b21c      	sxth	r4, r3
 801868e:	2011      	movs	r0, #17
 8018690:	f7f7 ff16 	bl	80104c0 <lwip_htons>
 8018694:	4603      	mov	r3, r0
 8018696:	b21b      	sxth	r3, r3
 8018698:	4323      	orrs	r3, r4
 801869a:	b21b      	sxth	r3, r3
 801869c:	b29a      	uxth	r2, r3
 801869e:	69bb      	ldr	r3, [r7, #24]
 80186a0:	819a      	strh	r2, [r3, #12]
 80186a2:	e010      	b.n	80186c6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80186a4:	69fb      	ldr	r3, [r7, #28]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	3314      	adds	r3, #20
 80186aa:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80186ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ae:	6858      	ldr	r0, [r3, #4]
 80186b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	891a      	ldrh	r2, [r3, #8]
 80186b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b8:	891b      	ldrh	r3, [r3, #8]
 80186ba:	1ad3      	subs	r3, r2, r3
 80186bc:	b29b      	uxth	r3, r3
 80186be:	2201      	movs	r2, #1
 80186c0:	6979      	ldr	r1, [r7, #20]
 80186c2:	f7f9 fe25 	bl	8012310 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80186c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c8:	691b      	ldr	r3, [r3, #16]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	4618      	mov	r0, r3
 80186ce:	f7f7 ff0c 	bl	80104ea <lwip_htonl>
 80186d2:	4603      	mov	r3, r0
 80186d4:	3301      	adds	r3, #1
 80186d6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	1ad3      	subs	r3, r2, r3
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	da02      	bge.n	80186ea <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	68fa      	ldr	r2, [r7, #12]
 80186e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80186ea:	7cfb      	ldrb	r3, [r7, #19]
 80186ec:	2200      	movs	r2, #0
 80186ee:	69f9      	ldr	r1, [r7, #28]
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f7ff fddf 	bl	80182b4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80186f6:	687a      	ldr	r2, [r7, #4]
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	3304      	adds	r3, #4
 80186fc:	69f9      	ldr	r1, [r7, #28]
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f7ff fe16 	bl	8018330 <tcp_output_control_segment>
 8018704:	4603      	mov	r3, r0
 8018706:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018708:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801870c:	4618      	mov	r0, r3
 801870e:	372c      	adds	r7, #44	@ 0x2c
 8018710:	46bd      	mov	sp, r7
 8018712:	bd90      	pop	{r4, r7, pc}
 8018714:	08023d0c 	.word	0x08023d0c
 8018718:	08024560 	.word	0x08024560
 801871c:	08023d60 	.word	0x08023d60

08018720 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018728:	f7fa f874 	bl	8012814 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801872c:	4b0a      	ldr	r3, [pc, #40]	@ (8018758 <tcpip_tcp_timer+0x38>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d103      	bne.n	801873c <tcpip_tcp_timer+0x1c>
 8018734:	4b09      	ldr	r3, [pc, #36]	@ (801875c <tcpip_tcp_timer+0x3c>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d005      	beq.n	8018748 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801873c:	2200      	movs	r2, #0
 801873e:	4908      	ldr	r1, [pc, #32]	@ (8018760 <tcpip_tcp_timer+0x40>)
 8018740:	20fa      	movs	r0, #250	@ 0xfa
 8018742:	f000 f8f3 	bl	801892c <sys_timeout>
 8018746:	e003      	b.n	8018750 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018748:	4b06      	ldr	r3, [pc, #24]	@ (8018764 <tcpip_tcp_timer+0x44>)
 801874a:	2200      	movs	r2, #0
 801874c:	601a      	str	r2, [r3, #0]
  }
}
 801874e:	bf00      	nop
 8018750:	bf00      	nop
 8018752:	3708      	adds	r7, #8
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}
 8018758:	20013dc8 	.word	0x20013dc8
 801875c:	20013dcc 	.word	0x20013dcc
 8018760:	08018721 	.word	0x08018721
 8018764:	20013e18 	.word	0x20013e18

08018768 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801876c:	4b0a      	ldr	r3, [pc, #40]	@ (8018798 <tcp_timer_needed+0x30>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d10f      	bne.n	8018794 <tcp_timer_needed+0x2c>
 8018774:	4b09      	ldr	r3, [pc, #36]	@ (801879c <tcp_timer_needed+0x34>)
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d103      	bne.n	8018784 <tcp_timer_needed+0x1c>
 801877c:	4b08      	ldr	r3, [pc, #32]	@ (80187a0 <tcp_timer_needed+0x38>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d007      	beq.n	8018794 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018784:	4b04      	ldr	r3, [pc, #16]	@ (8018798 <tcp_timer_needed+0x30>)
 8018786:	2201      	movs	r2, #1
 8018788:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801878a:	2200      	movs	r2, #0
 801878c:	4905      	ldr	r1, [pc, #20]	@ (80187a4 <tcp_timer_needed+0x3c>)
 801878e:	20fa      	movs	r0, #250	@ 0xfa
 8018790:	f000 f8cc 	bl	801892c <sys_timeout>
  }
}
 8018794:	bf00      	nop
 8018796:	bd80      	pop	{r7, pc}
 8018798:	20013e18 	.word	0x20013e18
 801879c:	20013dc8 	.word	0x20013dc8
 80187a0:	20013dcc 	.word	0x20013dcc
 80187a4:	08018721 	.word	0x08018721

080187a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b086      	sub	sp, #24
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	60f8      	str	r0, [r7, #12]
 80187b0:	60b9      	str	r1, [r7, #8]
 80187b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80187b4:	200a      	movs	r0, #10
 80187b6:	f7f8 fcb1 	bl	801111c <memp_malloc>
 80187ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80187bc:	693b      	ldr	r3, [r7, #16]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d109      	bne.n	80187d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80187c2:	693b      	ldr	r3, [r7, #16]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d151      	bne.n	801886c <sys_timeout_abs+0xc4>
 80187c8:	4b2a      	ldr	r3, [pc, #168]	@ (8018874 <sys_timeout_abs+0xcc>)
 80187ca:	22be      	movs	r2, #190	@ 0xbe
 80187cc:	492a      	ldr	r1, [pc, #168]	@ (8018878 <sys_timeout_abs+0xd0>)
 80187ce:	482b      	ldr	r0, [pc, #172]	@ (801887c <sys_timeout_abs+0xd4>)
 80187d0:	f006 fa50 	bl	801ec74 <iprintf>
    return;
 80187d4:	e04a      	b.n	801886c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80187d6:	693b      	ldr	r3, [r7, #16]
 80187d8:	2200      	movs	r2, #0
 80187da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	68ba      	ldr	r2, [r7, #8]
 80187e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80187e2:	693b      	ldr	r3, [r7, #16]
 80187e4:	687a      	ldr	r2, [r7, #4]
 80187e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80187e8:	693b      	ldr	r3, [r7, #16]
 80187ea:	68fa      	ldr	r2, [r7, #12]
 80187ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80187ee:	4b24      	ldr	r3, [pc, #144]	@ (8018880 <sys_timeout_abs+0xd8>)
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d103      	bne.n	80187fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80187f6:	4a22      	ldr	r2, [pc, #136]	@ (8018880 <sys_timeout_abs+0xd8>)
 80187f8:	693b      	ldr	r3, [r7, #16]
 80187fa:	6013      	str	r3, [r2, #0]
    return;
 80187fc:	e037      	b.n	801886e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	685a      	ldr	r2, [r3, #4]
 8018802:	4b1f      	ldr	r3, [pc, #124]	@ (8018880 <sys_timeout_abs+0xd8>)
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	1ad3      	subs	r3, r2, r3
 801880a:	0fdb      	lsrs	r3, r3, #31
 801880c:	f003 0301 	and.w	r3, r3, #1
 8018810:	b2db      	uxtb	r3, r3
 8018812:	2b00      	cmp	r3, #0
 8018814:	d007      	beq.n	8018826 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018816:	4b1a      	ldr	r3, [pc, #104]	@ (8018880 <sys_timeout_abs+0xd8>)
 8018818:	681a      	ldr	r2, [r3, #0]
 801881a:	693b      	ldr	r3, [r7, #16]
 801881c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801881e:	4a18      	ldr	r2, [pc, #96]	@ (8018880 <sys_timeout_abs+0xd8>)
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	6013      	str	r3, [r2, #0]
 8018824:	e023      	b.n	801886e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018826:	4b16      	ldr	r3, [pc, #88]	@ (8018880 <sys_timeout_abs+0xd8>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	617b      	str	r3, [r7, #20]
 801882c:	e01a      	b.n	8018864 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d00b      	beq.n	801884e <sys_timeout_abs+0xa6>
 8018836:	693b      	ldr	r3, [r7, #16]
 8018838:	685a      	ldr	r2, [r3, #4]
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	1ad3      	subs	r3, r2, r3
 8018842:	0fdb      	lsrs	r3, r3, #31
 8018844:	f003 0301 	and.w	r3, r3, #1
 8018848:	b2db      	uxtb	r3, r3
 801884a:	2b00      	cmp	r3, #0
 801884c:	d007      	beq.n	801885e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801884e:	697b      	ldr	r3, [r7, #20]
 8018850:	681a      	ldr	r2, [r3, #0]
 8018852:	693b      	ldr	r3, [r7, #16]
 8018854:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018856:	697b      	ldr	r3, [r7, #20]
 8018858:	693a      	ldr	r2, [r7, #16]
 801885a:	601a      	str	r2, [r3, #0]
        break;
 801885c:	e007      	b.n	801886e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801885e:	697b      	ldr	r3, [r7, #20]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	617b      	str	r3, [r7, #20]
 8018864:	697b      	ldr	r3, [r7, #20]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d1e1      	bne.n	801882e <sys_timeout_abs+0x86>
 801886a:	e000      	b.n	801886e <sys_timeout_abs+0xc6>
    return;
 801886c:	bf00      	nop
      }
    }
  }
}
 801886e:	3718      	adds	r7, #24
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	08024584 	.word	0x08024584
 8018878:	080245b8 	.word	0x080245b8
 801887c:	080245f8 	.word	0x080245f8
 8018880:	20013e10 	.word	0x20013e10

08018884 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b086      	sub	sp, #24
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018890:	697b      	ldr	r3, [r7, #20]
 8018892:	685b      	ldr	r3, [r3, #4]
 8018894:	4798      	blx	r3

  now = sys_now();
 8018896:	f7ed f8b5 	bl	8005a04 <sys_now>
 801889a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	4b0f      	ldr	r3, [pc, #60]	@ (80188e0 <lwip_cyclic_timer+0x5c>)
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	4413      	add	r3, r2
 80188a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80188a8:	68fa      	ldr	r2, [r7, #12]
 80188aa:	693b      	ldr	r3, [r7, #16]
 80188ac:	1ad3      	subs	r3, r2, r3
 80188ae:	0fdb      	lsrs	r3, r3, #31
 80188b0:	f003 0301 	and.w	r3, r3, #1
 80188b4:	b2db      	uxtb	r3, r3
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d009      	beq.n	80188ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80188ba:	697b      	ldr	r3, [r7, #20]
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	693b      	ldr	r3, [r7, #16]
 80188c0:	4413      	add	r3, r2
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	4907      	ldr	r1, [pc, #28]	@ (80188e4 <lwip_cyclic_timer+0x60>)
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7ff ff6e 	bl	80187a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80188cc:	e004      	b.n	80188d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	4904      	ldr	r1, [pc, #16]	@ (80188e4 <lwip_cyclic_timer+0x60>)
 80188d2:	68f8      	ldr	r0, [r7, #12]
 80188d4:	f7ff ff68 	bl	80187a8 <sys_timeout_abs>
}
 80188d8:	bf00      	nop
 80188da:	3718      	adds	r7, #24
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	20013e14 	.word	0x20013e14
 80188e4:	08018885 	.word	0x08018885

080188e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b082      	sub	sp, #8
 80188ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80188ee:	2301      	movs	r3, #1
 80188f0:	607b      	str	r3, [r7, #4]
 80188f2:	e00e      	b.n	8018912 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80188f4:	4a0b      	ldr	r2, [pc, #44]	@ (8018924 <sys_timeouts_init+0x3c>)
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	00db      	lsls	r3, r3, #3
 8018900:	4a08      	ldr	r2, [pc, #32]	@ (8018924 <sys_timeouts_init+0x3c>)
 8018902:	4413      	add	r3, r2
 8018904:	461a      	mov	r2, r3
 8018906:	4908      	ldr	r1, [pc, #32]	@ (8018928 <sys_timeouts_init+0x40>)
 8018908:	f000 f810 	bl	801892c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	3301      	adds	r3, #1
 8018910:	607b      	str	r3, [r7, #4]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2b04      	cmp	r3, #4
 8018916:	d9ed      	bls.n	80188f4 <sys_timeouts_init+0xc>
  }
}
 8018918:	bf00      	nop
 801891a:	bf00      	nop
 801891c:	3708      	adds	r7, #8
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}
 8018922:	bf00      	nop
 8018924:	08071270 	.word	0x08071270
 8018928:	08018885 	.word	0x08018885

0801892c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b086      	sub	sp, #24
 8018930:	af00      	add	r7, sp, #0
 8018932:	60f8      	str	r0, [r7, #12]
 8018934:	60b9      	str	r1, [r7, #8]
 8018936:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801893e:	d306      	bcc.n	801894e <sys_timeout+0x22>
 8018940:	4b0a      	ldr	r3, [pc, #40]	@ (801896c <sys_timeout+0x40>)
 8018942:	f240 1229 	movw	r2, #297	@ 0x129
 8018946:	490a      	ldr	r1, [pc, #40]	@ (8018970 <sys_timeout+0x44>)
 8018948:	480a      	ldr	r0, [pc, #40]	@ (8018974 <sys_timeout+0x48>)
 801894a:	f006 f993 	bl	801ec74 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801894e:	f7ed f859 	bl	8005a04 <sys_now>
 8018952:	4602      	mov	r2, r0
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	4413      	add	r3, r2
 8018958:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801895a:	687a      	ldr	r2, [r7, #4]
 801895c:	68b9      	ldr	r1, [r7, #8]
 801895e:	6978      	ldr	r0, [r7, #20]
 8018960:	f7ff ff22 	bl	80187a8 <sys_timeout_abs>
#endif
}
 8018964:	bf00      	nop
 8018966:	3718      	adds	r7, #24
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}
 801896c:	08024584 	.word	0x08024584
 8018970:	08024620 	.word	0x08024620
 8018974:	080245f8 	.word	0x080245f8

08018978 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801897e:	f7ed f841 	bl	8005a04 <sys_now>
 8018982:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018984:	4b17      	ldr	r3, [pc, #92]	@ (80189e4 <sys_check_timeouts+0x6c>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801898a:	68bb      	ldr	r3, [r7, #8]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d022      	beq.n	80189d6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	685b      	ldr	r3, [r3, #4]
 8018994:	68fa      	ldr	r2, [r7, #12]
 8018996:	1ad3      	subs	r3, r2, r3
 8018998:	0fdb      	lsrs	r3, r3, #31
 801899a:	f003 0301 	and.w	r3, r3, #1
 801899e:	b2db      	uxtb	r3, r3
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d11a      	bne.n	80189da <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	4a0e      	ldr	r2, [pc, #56]	@ (80189e4 <sys_check_timeouts+0x6c>)
 80189aa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	689b      	ldr	r3, [r3, #8]
 80189b0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	68db      	ldr	r3, [r3, #12]
 80189b6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	4a0a      	ldr	r2, [pc, #40]	@ (80189e8 <sys_check_timeouts+0x70>)
 80189be:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80189c0:	68b9      	ldr	r1, [r7, #8]
 80189c2:	200a      	movs	r0, #10
 80189c4:	f7f8 fbfc 	bl	80111c0 <memp_free>
    if (handler != NULL) {
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d0da      	beq.n	8018984 <sys_check_timeouts+0xc>
      handler(arg);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	6838      	ldr	r0, [r7, #0]
 80189d2:	4798      	blx	r3
  do {
 80189d4:	e7d6      	b.n	8018984 <sys_check_timeouts+0xc>
      return;
 80189d6:	bf00      	nop
 80189d8:	e000      	b.n	80189dc <sys_check_timeouts+0x64>
      return;
 80189da:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80189dc:	3710      	adds	r7, #16
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	20013e10 	.word	0x20013e10
 80189e8:	20013e14 	.word	0x20013e14

080189ec <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80189f2:	4b16      	ldr	r3, [pc, #88]	@ (8018a4c <sys_timeouts_sleeptime+0x60>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d102      	bne.n	8018a00 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80189fa:	f04f 33ff 	mov.w	r3, #4294967295
 80189fe:	e020      	b.n	8018a42 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018a00:	f7ed f800 	bl	8005a04 <sys_now>
 8018a04:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018a06:	4b11      	ldr	r3, [pc, #68]	@ (8018a4c <sys_timeouts_sleeptime+0x60>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	685a      	ldr	r2, [r3, #4]
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	1ad3      	subs	r3, r2, r3
 8018a10:	0fdb      	lsrs	r3, r3, #31
 8018a12:	f003 0301 	and.w	r3, r3, #1
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d001      	beq.n	8018a20 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	e010      	b.n	8018a42 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018a20:	4b0a      	ldr	r3, [pc, #40]	@ (8018a4c <sys_timeouts_sleeptime+0x60>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	685a      	ldr	r2, [r3, #4]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	1ad3      	subs	r3, r2, r3
 8018a2a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018a2c:	683b      	ldr	r3, [r7, #0]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	da06      	bge.n	8018a40 <sys_timeouts_sleeptime+0x54>
 8018a32:	4b07      	ldr	r3, [pc, #28]	@ (8018a50 <sys_timeouts_sleeptime+0x64>)
 8018a34:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018a38:	4906      	ldr	r1, [pc, #24]	@ (8018a54 <sys_timeouts_sleeptime+0x68>)
 8018a3a:	4807      	ldr	r0, [pc, #28]	@ (8018a58 <sys_timeouts_sleeptime+0x6c>)
 8018a3c:	f006 f91a 	bl	801ec74 <iprintf>
    return ret;
 8018a40:	683b      	ldr	r3, [r7, #0]
  }
}
 8018a42:	4618      	mov	r0, r3
 8018a44:	3708      	adds	r7, #8
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	20013e10 	.word	0x20013e10
 8018a50:	08024584 	.word	0x08024584
 8018a54:	08024658 	.word	0x08024658
 8018a58:	080245f8 	.word	0x080245f8

08018a5c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018a60:	f005 fb38 	bl	801e0d4 <rand>
 8018a64:	4603      	mov	r3, r0
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018a6c:	b29b      	uxth	r3, r3
 8018a6e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018a72:	b29a      	uxth	r2, r3
 8018a74:	4b01      	ldr	r3, [pc, #4]	@ (8018a7c <udp_init+0x20>)
 8018a76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018a78:	bf00      	nop
 8018a7a:	bd80      	pop	{r7, pc}
 8018a7c:	200000c4 	.word	0x200000c4

08018a80 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b083      	sub	sp, #12
 8018a84:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018a86:	2300      	movs	r3, #0
 8018a88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018a8a:	4b17      	ldr	r3, [pc, #92]	@ (8018ae8 <udp_new_port+0x68>)
 8018a8c:	881b      	ldrh	r3, [r3, #0]
 8018a8e:	1c5a      	adds	r2, r3, #1
 8018a90:	b291      	uxth	r1, r2
 8018a92:	4a15      	ldr	r2, [pc, #84]	@ (8018ae8 <udp_new_port+0x68>)
 8018a94:	8011      	strh	r1, [r2, #0]
 8018a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	d103      	bne.n	8018aa6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8018a9e:	4b12      	ldr	r3, [pc, #72]	@ (8018ae8 <udp_new_port+0x68>)
 8018aa0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8018aa4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018aa6:	4b11      	ldr	r3, [pc, #68]	@ (8018aec <udp_new_port+0x6c>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	603b      	str	r3, [r7, #0]
 8018aac:	e011      	b.n	8018ad2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018aae:	683b      	ldr	r3, [r7, #0]
 8018ab0:	8a5a      	ldrh	r2, [r3, #18]
 8018ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8018ae8 <udp_new_port+0x68>)
 8018ab4:	881b      	ldrh	r3, [r3, #0]
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d108      	bne.n	8018acc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018aba:	88fb      	ldrh	r3, [r7, #6]
 8018abc:	3301      	adds	r3, #1
 8018abe:	80fb      	strh	r3, [r7, #6]
 8018ac0:	88fb      	ldrh	r3, [r7, #6]
 8018ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018ac6:	d3e0      	bcc.n	8018a8a <udp_new_port+0xa>
        return 0;
 8018ac8:	2300      	movs	r3, #0
 8018aca:	e007      	b.n	8018adc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018acc:	683b      	ldr	r3, [r7, #0]
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	603b      	str	r3, [r7, #0]
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d1ea      	bne.n	8018aae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8018ad8:	4b03      	ldr	r3, [pc, #12]	@ (8018ae8 <udp_new_port+0x68>)
 8018ada:	881b      	ldrh	r3, [r3, #0]
}
 8018adc:	4618      	mov	r0, r3
 8018ade:	370c      	adds	r7, #12
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae6:	4770      	bx	lr
 8018ae8:	200000c4 	.word	0x200000c4
 8018aec:	20013e1c 	.word	0x20013e1c

08018af0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b084      	sub	sp, #16
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	60f8      	str	r0, [r7, #12]
 8018af8:	60b9      	str	r1, [r7, #8]
 8018afa:	4613      	mov	r3, r2
 8018afc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d105      	bne.n	8018b10 <udp_input_local_match+0x20>
 8018b04:	4b27      	ldr	r3, [pc, #156]	@ (8018ba4 <udp_input_local_match+0xb4>)
 8018b06:	2287      	movs	r2, #135	@ 0x87
 8018b08:	4927      	ldr	r1, [pc, #156]	@ (8018ba8 <udp_input_local_match+0xb8>)
 8018b0a:	4828      	ldr	r0, [pc, #160]	@ (8018bac <udp_input_local_match+0xbc>)
 8018b0c:	f006 f8b2 	bl	801ec74 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d105      	bne.n	8018b22 <udp_input_local_match+0x32>
 8018b16:	4b23      	ldr	r3, [pc, #140]	@ (8018ba4 <udp_input_local_match+0xb4>)
 8018b18:	2288      	movs	r2, #136	@ 0x88
 8018b1a:	4925      	ldr	r1, [pc, #148]	@ (8018bb0 <udp_input_local_match+0xc0>)
 8018b1c:	4823      	ldr	r0, [pc, #140]	@ (8018bac <udp_input_local_match+0xbc>)
 8018b1e:	f006 f8a9 	bl	801ec74 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	7a1b      	ldrb	r3, [r3, #8]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d00b      	beq.n	8018b42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	7a1a      	ldrb	r2, [r3, #8]
 8018b2e:	4b21      	ldr	r3, [pc, #132]	@ (8018bb4 <udp_input_local_match+0xc4>)
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018b36:	3301      	adds	r3, #1
 8018b38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d001      	beq.n	8018b42 <udp_input_local_match+0x52>
    return 0;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	e02b      	b.n	8018b9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018b42:	79fb      	ldrb	r3, [r7, #7]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d018      	beq.n	8018b7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d013      	beq.n	8018b76 <udp_input_local_match+0x86>
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d00f      	beq.n	8018b76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018b56:	4b17      	ldr	r3, [pc, #92]	@ (8018bb4 <udp_input_local_match+0xc4>)
 8018b58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b5e:	d00a      	beq.n	8018b76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	681a      	ldr	r2, [r3, #0]
 8018b64:	4b13      	ldr	r3, [pc, #76]	@ (8018bb4 <udp_input_local_match+0xc4>)
 8018b66:	695b      	ldr	r3, [r3, #20]
 8018b68:	405a      	eors	r2, r3
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	3308      	adds	r3, #8
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d110      	bne.n	8018b98 <udp_input_local_match+0xa8>
          return 1;
 8018b76:	2301      	movs	r3, #1
 8018b78:	e00f      	b.n	8018b9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d009      	beq.n	8018b94 <udp_input_local_match+0xa4>
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d005      	beq.n	8018b94 <udp_input_local_match+0xa4>
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	4b09      	ldr	r3, [pc, #36]	@ (8018bb4 <udp_input_local_match+0xc4>)
 8018b8e:	695b      	ldr	r3, [r3, #20]
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d101      	bne.n	8018b98 <udp_input_local_match+0xa8>
        return 1;
 8018b94:	2301      	movs	r3, #1
 8018b96:	e000      	b.n	8018b9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018b98:	2300      	movs	r3, #0
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	3710      	adds	r7, #16
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	bf00      	nop
 8018ba4:	0802466c 	.word	0x0802466c
 8018ba8:	0802469c 	.word	0x0802469c
 8018bac:	080246c0 	.word	0x080246c0
 8018bb0:	080246e8 	.word	0x080246e8
 8018bb4:	2000a348 	.word	0x2000a348

08018bb8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018bb8:	b590      	push	{r4, r7, lr}
 8018bba:	b08d      	sub	sp, #52	@ 0x34
 8018bbc:	af02      	add	r7, sp, #8
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d105      	bne.n	8018bd8 <udp_input+0x20>
 8018bcc:	4b87      	ldr	r3, [pc, #540]	@ (8018dec <udp_input+0x234>)
 8018bce:	22cf      	movs	r2, #207	@ 0xcf
 8018bd0:	4987      	ldr	r1, [pc, #540]	@ (8018df0 <udp_input+0x238>)
 8018bd2:	4888      	ldr	r0, [pc, #544]	@ (8018df4 <udp_input+0x23c>)
 8018bd4:	f006 f84e 	bl	801ec74 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d105      	bne.n	8018bea <udp_input+0x32>
 8018bde:	4b83      	ldr	r3, [pc, #524]	@ (8018dec <udp_input+0x234>)
 8018be0:	22d0      	movs	r2, #208	@ 0xd0
 8018be2:	4985      	ldr	r1, [pc, #532]	@ (8018df8 <udp_input+0x240>)
 8018be4:	4883      	ldr	r0, [pc, #524]	@ (8018df4 <udp_input+0x23c>)
 8018be6:	f006 f845 	bl	801ec74 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	895b      	ldrh	r3, [r3, #10]
 8018bee:	2b07      	cmp	r3, #7
 8018bf0:	d803      	bhi.n	8018bfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f7f9 f986 	bl	8011f04 <pbuf_free>
    goto end;
 8018bf8:	e0f0      	b.n	8018ddc <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	685b      	ldr	r3, [r3, #4]
 8018bfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018c00:	4b7e      	ldr	r3, [pc, #504]	@ (8018dfc <udp_input+0x244>)
 8018c02:	695b      	ldr	r3, [r3, #20]
 8018c04:	4a7d      	ldr	r2, [pc, #500]	@ (8018dfc <udp_input+0x244>)
 8018c06:	6812      	ldr	r2, [r2, #0]
 8018c08:	4611      	mov	r1, r2
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f003 ffe2 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 8018c10:	4603      	mov	r3, r0
 8018c12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018c14:	697b      	ldr	r3, [r7, #20]
 8018c16:	881b      	ldrh	r3, [r3, #0]
 8018c18:	b29b      	uxth	r3, r3
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f7f7 fc50 	bl	80104c0 <lwip_htons>
 8018c20:	4603      	mov	r3, r0
 8018c22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018c24:	697b      	ldr	r3, [r7, #20]
 8018c26:	885b      	ldrh	r3, [r3, #2]
 8018c28:	b29b      	uxth	r3, r3
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7f7 fc48 	bl	80104c0 <lwip_htons>
 8018c30:	4603      	mov	r3, r0
 8018c32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018c34:	2300      	movs	r3, #0
 8018c36:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018c40:	4b6f      	ldr	r3, [pc, #444]	@ (8018e00 <udp_input+0x248>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	61fb      	str	r3, [r7, #28]
 8018c46:	e054      	b.n	8018cf2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018c48:	69fb      	ldr	r3, [r7, #28]
 8018c4a:	8a5b      	ldrh	r3, [r3, #18]
 8018c4c:	89fa      	ldrh	r2, [r7, #14]
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	d14a      	bne.n	8018ce8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018c52:	7cfb      	ldrb	r3, [r7, #19]
 8018c54:	461a      	mov	r2, r3
 8018c56:	6839      	ldr	r1, [r7, #0]
 8018c58:	69f8      	ldr	r0, [r7, #28]
 8018c5a:	f7ff ff49 	bl	8018af0 <udp_input_local_match>
 8018c5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d041      	beq.n	8018ce8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018c64:	69fb      	ldr	r3, [r7, #28]
 8018c66:	7c1b      	ldrb	r3, [r3, #16]
 8018c68:	f003 0304 	and.w	r3, r3, #4
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d11d      	bne.n	8018cac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d102      	bne.n	8018c7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018c76:	69fb      	ldr	r3, [r7, #28]
 8018c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8018c7a:	e017      	b.n	8018cac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018c7c:	7cfb      	ldrb	r3, [r7, #19]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d014      	beq.n	8018cac <udp_input+0xf4>
 8018c82:	4b5e      	ldr	r3, [pc, #376]	@ (8018dfc <udp_input+0x244>)
 8018c84:	695b      	ldr	r3, [r3, #20]
 8018c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c8a:	d10f      	bne.n	8018cac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c8e:	681a      	ldr	r2, [r3, #0]
 8018c90:	683b      	ldr	r3, [r7, #0]
 8018c92:	3304      	adds	r3, #4
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d008      	beq.n	8018cac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018c9a:	69fb      	ldr	r3, [r7, #28]
 8018c9c:	681a      	ldr	r2, [r3, #0]
 8018c9e:	683b      	ldr	r3, [r7, #0]
 8018ca0:	3304      	adds	r3, #4
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d101      	bne.n	8018cac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018ca8:	69fb      	ldr	r3, [r7, #28]
 8018caa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018cac:	69fb      	ldr	r3, [r7, #28]
 8018cae:	8a9b      	ldrh	r3, [r3, #20]
 8018cb0:	8a3a      	ldrh	r2, [r7, #16]
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	d118      	bne.n	8018ce8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018cb6:	69fb      	ldr	r3, [r7, #28]
 8018cb8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d005      	beq.n	8018cca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018cbe:	69fb      	ldr	r3, [r7, #28]
 8018cc0:	685a      	ldr	r2, [r3, #4]
 8018cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8018dfc <udp_input+0x244>)
 8018cc4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d10e      	bne.n	8018ce8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018cca:	6a3b      	ldr	r3, [r7, #32]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d014      	beq.n	8018cfa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018cd0:	69fb      	ldr	r3, [r7, #28]
 8018cd2:	68da      	ldr	r2, [r3, #12]
 8018cd4:	6a3b      	ldr	r3, [r7, #32]
 8018cd6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018cd8:	4b49      	ldr	r3, [pc, #292]	@ (8018e00 <udp_input+0x248>)
 8018cda:	681a      	ldr	r2, [r3, #0]
 8018cdc:	69fb      	ldr	r3, [r7, #28]
 8018cde:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018ce0:	4a47      	ldr	r2, [pc, #284]	@ (8018e00 <udp_input+0x248>)
 8018ce2:	69fb      	ldr	r3, [r7, #28]
 8018ce4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018ce6:	e008      	b.n	8018cfa <udp_input+0x142>
      }
    }

    prev = pcb;
 8018ce8:	69fb      	ldr	r3, [r7, #28]
 8018cea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018cec:	69fb      	ldr	r3, [r7, #28]
 8018cee:	68db      	ldr	r3, [r3, #12]
 8018cf0:	61fb      	str	r3, [r7, #28]
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d1a7      	bne.n	8018c48 <udp_input+0x90>
 8018cf8:	e000      	b.n	8018cfc <udp_input+0x144>
        break;
 8018cfa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018cfc:	69fb      	ldr	r3, [r7, #28]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d101      	bne.n	8018d06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d04:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018d06:	69fb      	ldr	r3, [r7, #28]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d002      	beq.n	8018d12 <udp_input+0x15a>
    for_us = 1;
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	76fb      	strb	r3, [r7, #27]
 8018d10:	e00a      	b.n	8018d28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	3304      	adds	r3, #4
 8018d16:	681a      	ldr	r2, [r3, #0]
 8018d18:	4b38      	ldr	r3, [pc, #224]	@ (8018dfc <udp_input+0x244>)
 8018d1a:	695b      	ldr	r3, [r3, #20]
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	bf0c      	ite	eq
 8018d20:	2301      	moveq	r3, #1
 8018d22:	2300      	movne	r3, #0
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018d28:	7efb      	ldrb	r3, [r7, #27]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d052      	beq.n	8018dd4 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	88db      	ldrh	r3, [r3, #6]
 8018d32:	b29b      	uxth	r3, r3
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d00b      	beq.n	8018d50 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	891a      	ldrh	r2, [r3, #8]
 8018d3c:	4b31      	ldr	r3, [pc, #196]	@ (8018e04 <udp_input+0x24c>)
 8018d3e:	9300      	str	r3, [sp, #0]
 8018d40:	4b31      	ldr	r3, [pc, #196]	@ (8018e08 <udp_input+0x250>)
 8018d42:	2111      	movs	r1, #17
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f7f7 fced 	bl	8010724 <ip_chksum_pseudo>
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d146      	bne.n	8018dde <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018d50:	2108      	movs	r1, #8
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f7f9 f850 	bl	8011df8 <pbuf_remove_header>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d00a      	beq.n	8018d74 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018d5e:	4b23      	ldr	r3, [pc, #140]	@ (8018dec <udp_input+0x234>)
 8018d60:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8018d64:	4929      	ldr	r1, [pc, #164]	@ (8018e0c <udp_input+0x254>)
 8018d66:	4823      	ldr	r0, [pc, #140]	@ (8018df4 <udp_input+0x23c>)
 8018d68:	f005 ff84 	bl	801ec74 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018d6c:	6878      	ldr	r0, [r7, #4]
 8018d6e:	f7f9 f8c9 	bl	8011f04 <pbuf_free>
      goto end;
 8018d72:	e033      	b.n	8018ddc <udp_input+0x224>
    }

    if (pcb != NULL) {
 8018d74:	69fb      	ldr	r3, [r7, #28]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d012      	beq.n	8018da0 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018d7a:	69fb      	ldr	r3, [r7, #28]
 8018d7c:	699b      	ldr	r3, [r3, #24]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d00a      	beq.n	8018d98 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018d82:	69fb      	ldr	r3, [r7, #28]
 8018d84:	699c      	ldr	r4, [r3, #24]
 8018d86:	69fb      	ldr	r3, [r7, #28]
 8018d88:	69d8      	ldr	r0, [r3, #28]
 8018d8a:	8a3b      	ldrh	r3, [r7, #16]
 8018d8c:	9300      	str	r3, [sp, #0]
 8018d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8018e08 <udp_input+0x250>)
 8018d90:	687a      	ldr	r2, [r7, #4]
 8018d92:	69f9      	ldr	r1, [r7, #28]
 8018d94:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018d96:	e026      	b.n	8018de6 <udp_input+0x22e>
        pbuf_free(p);
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f7f9 f8b3 	bl	8011f04 <pbuf_free>
        goto end;
 8018d9e:	e01d      	b.n	8018ddc <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018da0:	7cfb      	ldrb	r3, [r7, #19]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d112      	bne.n	8018dcc <udp_input+0x214>
 8018da6:	4b15      	ldr	r3, [pc, #84]	@ (8018dfc <udp_input+0x244>)
 8018da8:	695b      	ldr	r3, [r3, #20]
 8018daa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018dae:	2be0      	cmp	r3, #224	@ 0xe0
 8018db0:	d00c      	beq.n	8018dcc <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018db2:	4b12      	ldr	r3, [pc, #72]	@ (8018dfc <udp_input+0x244>)
 8018db4:	899b      	ldrh	r3, [r3, #12]
 8018db6:	3308      	adds	r3, #8
 8018db8:	b29b      	uxth	r3, r3
 8018dba:	b21b      	sxth	r3, r3
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f7f9 f88d 	bl	8011ede <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018dc4:	2103      	movs	r1, #3
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f003 fb4a 	bl	801c460 <icmp_dest_unreach>
      pbuf_free(p);
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f7f9 f899 	bl	8011f04 <pbuf_free>
  return;
 8018dd2:	e008      	b.n	8018de6 <udp_input+0x22e>
    pbuf_free(p);
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f7f9 f895 	bl	8011f04 <pbuf_free>
  return;
 8018dda:	e004      	b.n	8018de6 <udp_input+0x22e>
 8018ddc:	e003      	b.n	8018de6 <udp_input+0x22e>
            goto chkerr;
 8018dde:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8018de0:	6878      	ldr	r0, [r7, #4]
 8018de2:	f7f9 f88f 	bl	8011f04 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018de6:	372c      	adds	r7, #44	@ 0x2c
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd90      	pop	{r4, r7, pc}
 8018dec:	0802466c 	.word	0x0802466c
 8018df0:	08024710 	.word	0x08024710
 8018df4:	080246c0 	.word	0x080246c0
 8018df8:	08024728 	.word	0x08024728
 8018dfc:	2000a348 	.word	0x2000a348
 8018e00:	20013e1c 	.word	0x20013e1c
 8018e04:	2000a35c 	.word	0x2000a35c
 8018e08:	2000a358 	.word	0x2000a358
 8018e0c:	08024744 	.word	0x08024744

08018e10 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b088      	sub	sp, #32
 8018e14:	af02      	add	r7, sp, #8
 8018e16:	60f8      	str	r0, [r7, #12]
 8018e18:	60b9      	str	r1, [r7, #8]
 8018e1a:	607a      	str	r2, [r7, #4]
 8018e1c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d109      	bne.n	8018e38 <udp_sendto+0x28>
 8018e24:	4b23      	ldr	r3, [pc, #140]	@ (8018eb4 <udp_sendto+0xa4>)
 8018e26:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8018e2a:	4923      	ldr	r1, [pc, #140]	@ (8018eb8 <udp_sendto+0xa8>)
 8018e2c:	4823      	ldr	r0, [pc, #140]	@ (8018ebc <udp_sendto+0xac>)
 8018e2e:	f005 ff21 	bl	801ec74 <iprintf>
 8018e32:	f06f 030f 	mvn.w	r3, #15
 8018e36:	e038      	b.n	8018eaa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018e38:	68bb      	ldr	r3, [r7, #8]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d109      	bne.n	8018e52 <udp_sendto+0x42>
 8018e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8018eb4 <udp_sendto+0xa4>)
 8018e40:	f240 2219 	movw	r2, #537	@ 0x219
 8018e44:	491e      	ldr	r1, [pc, #120]	@ (8018ec0 <udp_sendto+0xb0>)
 8018e46:	481d      	ldr	r0, [pc, #116]	@ (8018ebc <udp_sendto+0xac>)
 8018e48:	f005 ff14 	bl	801ec74 <iprintf>
 8018e4c:	f06f 030f 	mvn.w	r3, #15
 8018e50:	e02b      	b.n	8018eaa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d109      	bne.n	8018e6c <udp_sendto+0x5c>
 8018e58:	4b16      	ldr	r3, [pc, #88]	@ (8018eb4 <udp_sendto+0xa4>)
 8018e5a:	f240 221a 	movw	r2, #538	@ 0x21a
 8018e5e:	4919      	ldr	r1, [pc, #100]	@ (8018ec4 <udp_sendto+0xb4>)
 8018e60:	4816      	ldr	r0, [pc, #88]	@ (8018ebc <udp_sendto+0xac>)
 8018e62:	f005 ff07 	bl	801ec74 <iprintf>
 8018e66:	f06f 030f 	mvn.w	r3, #15
 8018e6a:	e01e      	b.n	8018eaa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	7a1b      	ldrb	r3, [r3, #8]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d006      	beq.n	8018e82 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	7a1b      	ldrb	r3, [r3, #8]
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7f8 fcb1 	bl	80117e0 <netif_get_by_index>
 8018e7e:	6178      	str	r0, [r7, #20]
 8018e80:	e003      	b.n	8018e8a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018e82:	6878      	ldr	r0, [r7, #4]
 8018e84:	f003 fb80 	bl	801c588 <ip4_route>
 8018e88:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d102      	bne.n	8018e96 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018e90:	f06f 0303 	mvn.w	r3, #3
 8018e94:	e009      	b.n	8018eaa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018e96:	887a      	ldrh	r2, [r7, #2]
 8018e98:	697b      	ldr	r3, [r7, #20]
 8018e9a:	9300      	str	r3, [sp, #0]
 8018e9c:	4613      	mov	r3, r2
 8018e9e:	687a      	ldr	r2, [r7, #4]
 8018ea0:	68b9      	ldr	r1, [r7, #8]
 8018ea2:	68f8      	ldr	r0, [r7, #12]
 8018ea4:	f000 f810 	bl	8018ec8 <udp_sendto_if>
 8018ea8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3718      	adds	r7, #24
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	0802466c 	.word	0x0802466c
 8018eb8:	08024790 	.word	0x08024790
 8018ebc:	080246c0 	.word	0x080246c0
 8018ec0:	080247a8 	.word	0x080247a8
 8018ec4:	080247c4 	.word	0x080247c4

08018ec8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b088      	sub	sp, #32
 8018ecc:	af02      	add	r7, sp, #8
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
 8018ed4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d109      	bne.n	8018ef0 <udp_sendto_if+0x28>
 8018edc:	4b2e      	ldr	r3, [pc, #184]	@ (8018f98 <udp_sendto_if+0xd0>)
 8018ede:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018ee2:	492e      	ldr	r1, [pc, #184]	@ (8018f9c <udp_sendto_if+0xd4>)
 8018ee4:	482e      	ldr	r0, [pc, #184]	@ (8018fa0 <udp_sendto_if+0xd8>)
 8018ee6:	f005 fec5 	bl	801ec74 <iprintf>
 8018eea:	f06f 030f 	mvn.w	r3, #15
 8018eee:	e04f      	b.n	8018f90 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018ef0:	68bb      	ldr	r3, [r7, #8]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d109      	bne.n	8018f0a <udp_sendto_if+0x42>
 8018ef6:	4b28      	ldr	r3, [pc, #160]	@ (8018f98 <udp_sendto_if+0xd0>)
 8018ef8:	f240 2281 	movw	r2, #641	@ 0x281
 8018efc:	4929      	ldr	r1, [pc, #164]	@ (8018fa4 <udp_sendto_if+0xdc>)
 8018efe:	4828      	ldr	r0, [pc, #160]	@ (8018fa0 <udp_sendto_if+0xd8>)
 8018f00:	f005 feb8 	bl	801ec74 <iprintf>
 8018f04:	f06f 030f 	mvn.w	r3, #15
 8018f08:	e042      	b.n	8018f90 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d109      	bne.n	8018f24 <udp_sendto_if+0x5c>
 8018f10:	4b21      	ldr	r3, [pc, #132]	@ (8018f98 <udp_sendto_if+0xd0>)
 8018f12:	f240 2282 	movw	r2, #642	@ 0x282
 8018f16:	4924      	ldr	r1, [pc, #144]	@ (8018fa8 <udp_sendto_if+0xe0>)
 8018f18:	4821      	ldr	r0, [pc, #132]	@ (8018fa0 <udp_sendto_if+0xd8>)
 8018f1a:	f005 feab 	bl	801ec74 <iprintf>
 8018f1e:	f06f 030f 	mvn.w	r3, #15
 8018f22:	e035      	b.n	8018f90 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018f24:	6a3b      	ldr	r3, [r7, #32]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d109      	bne.n	8018f3e <udp_sendto_if+0x76>
 8018f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8018f98 <udp_sendto_if+0xd0>)
 8018f2c:	f240 2283 	movw	r2, #643	@ 0x283
 8018f30:	491e      	ldr	r1, [pc, #120]	@ (8018fac <udp_sendto_if+0xe4>)
 8018f32:	481b      	ldr	r0, [pc, #108]	@ (8018fa0 <udp_sendto_if+0xd8>)
 8018f34:	f005 fe9e 	bl	801ec74 <iprintf>
 8018f38:	f06f 030f 	mvn.w	r3, #15
 8018f3c:	e028      	b.n	8018f90 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d009      	beq.n	8018f58 <udp_sendto_if+0x90>
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d005      	beq.n	8018f58 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018f54:	2be0      	cmp	r3, #224	@ 0xe0
 8018f56:	d103      	bne.n	8018f60 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018f58:	6a3b      	ldr	r3, [r7, #32]
 8018f5a:	3304      	adds	r3, #4
 8018f5c:	617b      	str	r3, [r7, #20]
 8018f5e:	e00b      	b.n	8018f78 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	6a3b      	ldr	r3, [r7, #32]
 8018f66:	3304      	adds	r3, #4
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	d002      	beq.n	8018f74 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018f6e:	f06f 0303 	mvn.w	r3, #3
 8018f72:	e00d      	b.n	8018f90 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018f78:	887a      	ldrh	r2, [r7, #2]
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	9301      	str	r3, [sp, #4]
 8018f7e:	6a3b      	ldr	r3, [r7, #32]
 8018f80:	9300      	str	r3, [sp, #0]
 8018f82:	4613      	mov	r3, r2
 8018f84:	687a      	ldr	r2, [r7, #4]
 8018f86:	68b9      	ldr	r1, [r7, #8]
 8018f88:	68f8      	ldr	r0, [r7, #12]
 8018f8a:	f000 f811 	bl	8018fb0 <udp_sendto_if_src>
 8018f8e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018f90:	4618      	mov	r0, r3
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	0802466c 	.word	0x0802466c
 8018f9c:	080247e0 	.word	0x080247e0
 8018fa0:	080246c0 	.word	0x080246c0
 8018fa4:	080247fc 	.word	0x080247fc
 8018fa8:	08024818 	.word	0x08024818
 8018fac:	08024838 	.word	0x08024838

08018fb0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b08c      	sub	sp, #48	@ 0x30
 8018fb4:	af04      	add	r7, sp, #16
 8018fb6:	60f8      	str	r0, [r7, #12]
 8018fb8:	60b9      	str	r1, [r7, #8]
 8018fba:	607a      	str	r2, [r7, #4]
 8018fbc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d109      	bne.n	8018fd8 <udp_sendto_if_src+0x28>
 8018fc4:	4b65      	ldr	r3, [pc, #404]	@ (801915c <udp_sendto_if_src+0x1ac>)
 8018fc6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8018fca:	4965      	ldr	r1, [pc, #404]	@ (8019160 <udp_sendto_if_src+0x1b0>)
 8018fcc:	4865      	ldr	r0, [pc, #404]	@ (8019164 <udp_sendto_if_src+0x1b4>)
 8018fce:	f005 fe51 	bl	801ec74 <iprintf>
 8018fd2:	f06f 030f 	mvn.w	r3, #15
 8018fd6:	e0bc      	b.n	8019152 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d109      	bne.n	8018ff2 <udp_sendto_if_src+0x42>
 8018fde:	4b5f      	ldr	r3, [pc, #380]	@ (801915c <udp_sendto_if_src+0x1ac>)
 8018fe0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018fe4:	4960      	ldr	r1, [pc, #384]	@ (8019168 <udp_sendto_if_src+0x1b8>)
 8018fe6:	485f      	ldr	r0, [pc, #380]	@ (8019164 <udp_sendto_if_src+0x1b4>)
 8018fe8:	f005 fe44 	bl	801ec74 <iprintf>
 8018fec:	f06f 030f 	mvn.w	r3, #15
 8018ff0:	e0af      	b.n	8019152 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d109      	bne.n	801900c <udp_sendto_if_src+0x5c>
 8018ff8:	4b58      	ldr	r3, [pc, #352]	@ (801915c <udp_sendto_if_src+0x1ac>)
 8018ffa:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8018ffe:	495b      	ldr	r1, [pc, #364]	@ (801916c <udp_sendto_if_src+0x1bc>)
 8019000:	4858      	ldr	r0, [pc, #352]	@ (8019164 <udp_sendto_if_src+0x1b4>)
 8019002:	f005 fe37 	bl	801ec74 <iprintf>
 8019006:	f06f 030f 	mvn.w	r3, #15
 801900a:	e0a2      	b.n	8019152 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801900c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801900e:	2b00      	cmp	r3, #0
 8019010:	d109      	bne.n	8019026 <udp_sendto_if_src+0x76>
 8019012:	4b52      	ldr	r3, [pc, #328]	@ (801915c <udp_sendto_if_src+0x1ac>)
 8019014:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019018:	4955      	ldr	r1, [pc, #340]	@ (8019170 <udp_sendto_if_src+0x1c0>)
 801901a:	4852      	ldr	r0, [pc, #328]	@ (8019164 <udp_sendto_if_src+0x1b4>)
 801901c:	f005 fe2a 	bl	801ec74 <iprintf>
 8019020:	f06f 030f 	mvn.w	r3, #15
 8019024:	e095      	b.n	8019152 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019028:	2b00      	cmp	r3, #0
 801902a:	d109      	bne.n	8019040 <udp_sendto_if_src+0x90>
 801902c:	4b4b      	ldr	r3, [pc, #300]	@ (801915c <udp_sendto_if_src+0x1ac>)
 801902e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8019032:	4950      	ldr	r1, [pc, #320]	@ (8019174 <udp_sendto_if_src+0x1c4>)
 8019034:	484b      	ldr	r0, [pc, #300]	@ (8019164 <udp_sendto_if_src+0x1b4>)
 8019036:	f005 fe1d 	bl	801ec74 <iprintf>
 801903a:	f06f 030f 	mvn.w	r3, #15
 801903e:	e088      	b.n	8019152 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	8a5b      	ldrh	r3, [r3, #18]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d10f      	bne.n	8019068 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019048:	68f9      	ldr	r1, [r7, #12]
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	8a5b      	ldrh	r3, [r3, #18]
 801904e:	461a      	mov	r2, r3
 8019050:	68f8      	ldr	r0, [r7, #12]
 8019052:	f000 f893 	bl	801917c <udp_bind>
 8019056:	4603      	mov	r3, r0
 8019058:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801905a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d002      	beq.n	8019068 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019062:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019066:	e074      	b.n	8019152 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019068:	68bb      	ldr	r3, [r7, #8]
 801906a:	891b      	ldrh	r3, [r3, #8]
 801906c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019070:	4293      	cmp	r3, r2
 8019072:	d902      	bls.n	801907a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019074:	f04f 33ff 	mov.w	r3, #4294967295
 8019078:	e06b      	b.n	8019152 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801907a:	2108      	movs	r1, #8
 801907c:	68b8      	ldr	r0, [r7, #8]
 801907e:	f7f8 feab 	bl	8011dd8 <pbuf_add_header>
 8019082:	4603      	mov	r3, r0
 8019084:	2b00      	cmp	r3, #0
 8019086:	d015      	beq.n	80190b4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019088:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801908c:	2108      	movs	r1, #8
 801908e:	2022      	movs	r0, #34	@ 0x22
 8019090:	f7f8 fc50 	bl	8011934 <pbuf_alloc>
 8019094:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019096:	69fb      	ldr	r3, [r7, #28]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d102      	bne.n	80190a2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801909c:	f04f 33ff 	mov.w	r3, #4294967295
 80190a0:	e057      	b.n	8019152 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	891b      	ldrh	r3, [r3, #8]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d006      	beq.n	80190b8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80190aa:	68b9      	ldr	r1, [r7, #8]
 80190ac:	69f8      	ldr	r0, [r7, #28]
 80190ae:	f7f9 f84d 	bl	801214c <pbuf_chain>
 80190b2:	e001      	b.n	80190b8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80190b4:	68bb      	ldr	r3, [r7, #8]
 80190b6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80190b8:	69fb      	ldr	r3, [r7, #28]
 80190ba:	895b      	ldrh	r3, [r3, #10]
 80190bc:	2b07      	cmp	r3, #7
 80190be:	d806      	bhi.n	80190ce <udp_sendto_if_src+0x11e>
 80190c0:	4b26      	ldr	r3, [pc, #152]	@ (801915c <udp_sendto_if_src+0x1ac>)
 80190c2:	f240 320d 	movw	r2, #781	@ 0x30d
 80190c6:	492c      	ldr	r1, [pc, #176]	@ (8019178 <udp_sendto_if_src+0x1c8>)
 80190c8:	4826      	ldr	r0, [pc, #152]	@ (8019164 <udp_sendto_if_src+0x1b4>)
 80190ca:	f005 fdd3 	bl	801ec74 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80190ce:	69fb      	ldr	r3, [r7, #28]
 80190d0:	685b      	ldr	r3, [r3, #4]
 80190d2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	8a5b      	ldrh	r3, [r3, #18]
 80190d8:	4618      	mov	r0, r3
 80190da:	f7f7 f9f1 	bl	80104c0 <lwip_htons>
 80190de:	4603      	mov	r3, r0
 80190e0:	461a      	mov	r2, r3
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80190e6:	887b      	ldrh	r3, [r7, #2]
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7f7 f9e9 	bl	80104c0 <lwip_htons>
 80190ee:	4603      	mov	r3, r0
 80190f0:	461a      	mov	r2, r3
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	2200      	movs	r2, #0
 80190fa:	719a      	strb	r2, [r3, #6]
 80190fc:	2200      	movs	r2, #0
 80190fe:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019100:	69fb      	ldr	r3, [r7, #28]
 8019102:	891b      	ldrh	r3, [r3, #8]
 8019104:	4618      	mov	r0, r3
 8019106:	f7f7 f9db 	bl	80104c0 <lwip_htons>
 801910a:	4603      	mov	r3, r0
 801910c:	461a      	mov	r2, r3
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019112:	2311      	movs	r3, #17
 8019114:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	7adb      	ldrb	r3, [r3, #11]
 801911a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	7a9b      	ldrb	r3, [r3, #10]
 8019120:	7cb9      	ldrb	r1, [r7, #18]
 8019122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019124:	9202      	str	r2, [sp, #8]
 8019126:	7cfa      	ldrb	r2, [r7, #19]
 8019128:	9201      	str	r2, [sp, #4]
 801912a:	9300      	str	r3, [sp, #0]
 801912c:	460b      	mov	r3, r1
 801912e:	687a      	ldr	r2, [r7, #4]
 8019130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019132:	69f8      	ldr	r0, [r7, #28]
 8019134:	f003 fc3a 	bl	801c9ac <ip4_output_if_src>
 8019138:	4603      	mov	r3, r0
 801913a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801913c:	69fa      	ldr	r2, [r7, #28]
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	429a      	cmp	r2, r3
 8019142:	d004      	beq.n	801914e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019144:	69f8      	ldr	r0, [r7, #28]
 8019146:	f7f8 fedd 	bl	8011f04 <pbuf_free>
    q = NULL;
 801914a:	2300      	movs	r3, #0
 801914c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801914e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019152:	4618      	mov	r0, r3
 8019154:	3720      	adds	r7, #32
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	0802466c 	.word	0x0802466c
 8019160:	08024858 	.word	0x08024858
 8019164:	080246c0 	.word	0x080246c0
 8019168:	08024878 	.word	0x08024878
 801916c:	08024898 	.word	0x08024898
 8019170:	080248bc 	.word	0x080248bc
 8019174:	080248e0 	.word	0x080248e0
 8019178:	08024904 	.word	0x08024904

0801917c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b086      	sub	sp, #24
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	4613      	mov	r3, r2
 8019188:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d101      	bne.n	8019194 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019190:	4b39      	ldr	r3, [pc, #228]	@ (8019278 <udp_bind+0xfc>)
 8019192:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d109      	bne.n	80191ae <udp_bind+0x32>
 801919a:	4b38      	ldr	r3, [pc, #224]	@ (801927c <udp_bind+0x100>)
 801919c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80191a0:	4937      	ldr	r1, [pc, #220]	@ (8019280 <udp_bind+0x104>)
 80191a2:	4838      	ldr	r0, [pc, #224]	@ (8019284 <udp_bind+0x108>)
 80191a4:	f005 fd66 	bl	801ec74 <iprintf>
 80191a8:	f06f 030f 	mvn.w	r3, #15
 80191ac:	e060      	b.n	8019270 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80191ae:	2300      	movs	r3, #0
 80191b0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80191b2:	4b35      	ldr	r3, [pc, #212]	@ (8019288 <udp_bind+0x10c>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	617b      	str	r3, [r7, #20]
 80191b8:	e009      	b.n	80191ce <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80191ba:	68fa      	ldr	r2, [r7, #12]
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	429a      	cmp	r2, r3
 80191c0:	d102      	bne.n	80191c8 <udp_bind+0x4c>
      rebind = 1;
 80191c2:	2301      	movs	r3, #1
 80191c4:	74fb      	strb	r3, [r7, #19]
      break;
 80191c6:	e005      	b.n	80191d4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	68db      	ldr	r3, [r3, #12]
 80191cc:	617b      	str	r3, [r7, #20]
 80191ce:	697b      	ldr	r3, [r7, #20]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d1f2      	bne.n	80191ba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80191d4:	88fb      	ldrh	r3, [r7, #6]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d109      	bne.n	80191ee <udp_bind+0x72>
    port = udp_new_port();
 80191da:	f7ff fc51 	bl	8018a80 <udp_new_port>
 80191de:	4603      	mov	r3, r0
 80191e0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80191e2:	88fb      	ldrh	r3, [r7, #6]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d12c      	bne.n	8019242 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80191e8:	f06f 0307 	mvn.w	r3, #7
 80191ec:	e040      	b.n	8019270 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80191ee:	4b26      	ldr	r3, [pc, #152]	@ (8019288 <udp_bind+0x10c>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	617b      	str	r3, [r7, #20]
 80191f4:	e022      	b.n	801923c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80191f6:	68fa      	ldr	r2, [r7, #12]
 80191f8:	697b      	ldr	r3, [r7, #20]
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d01b      	beq.n	8019236 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80191fe:	697b      	ldr	r3, [r7, #20]
 8019200:	8a5b      	ldrh	r3, [r3, #18]
 8019202:	88fa      	ldrh	r2, [r7, #6]
 8019204:	429a      	cmp	r2, r3
 8019206:	d116      	bne.n	8019236 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019208:	697b      	ldr	r3, [r7, #20]
 801920a:	681a      	ldr	r2, [r3, #0]
 801920c:	68bb      	ldr	r3, [r7, #8]
 801920e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019210:	429a      	cmp	r2, r3
 8019212:	d00d      	beq.n	8019230 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d00a      	beq.n	8019230 <udp_bind+0xb4>
 801921a:	68bb      	ldr	r3, [r7, #8]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d006      	beq.n	8019230 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019222:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019224:	2b00      	cmp	r3, #0
 8019226:	d003      	beq.n	8019230 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019228:	697b      	ldr	r3, [r7, #20]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d102      	bne.n	8019236 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019230:	f06f 0307 	mvn.w	r3, #7
 8019234:	e01c      	b.n	8019270 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	68db      	ldr	r3, [r3, #12]
 801923a:	617b      	str	r3, [r7, #20]
 801923c:	697b      	ldr	r3, [r7, #20]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d1d9      	bne.n	80191f6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d002      	beq.n	801924e <udp_bind+0xd2>
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	e000      	b.n	8019250 <udp_bind+0xd4>
 801924e:	2300      	movs	r3, #0
 8019250:	68fa      	ldr	r2, [r7, #12]
 8019252:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	88fa      	ldrh	r2, [r7, #6]
 8019258:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801925a:	7cfb      	ldrb	r3, [r7, #19]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d106      	bne.n	801926e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019260:	4b09      	ldr	r3, [pc, #36]	@ (8019288 <udp_bind+0x10c>)
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019268:	4a07      	ldr	r2, [pc, #28]	@ (8019288 <udp_bind+0x10c>)
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801926e:	2300      	movs	r3, #0
}
 8019270:	4618      	mov	r0, r3
 8019272:	3718      	adds	r7, #24
 8019274:	46bd      	mov	sp, r7
 8019276:	bd80      	pop	{r7, pc}
 8019278:	08071298 	.word	0x08071298
 801927c:	0802466c 	.word	0x0802466c
 8019280:	08024934 	.word	0x08024934
 8019284:	080246c0 	.word	0x080246c0
 8019288:	20013e1c 	.word	0x20013e1c

0801928c <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 801928c:	b480      	push	{r7}
 801928e:	b083      	sub	sp, #12
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d007      	beq.n	80192ac <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80192a2:	3301      	adds	r3, #1
 80192a4:	b2da      	uxtb	r2, r3
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80192aa:	e002      	b.n	80192b2 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	2200      	movs	r2, #0
 80192b0:	721a      	strb	r2, [r3, #8]
}
 80192b2:	bf00      	nop
 80192b4:	370c      	adds	r7, #12
 80192b6:	46bd      	mov	sp, r7
 80192b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192bc:	4770      	bx	lr
	...

080192c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b086      	sub	sp, #24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	60b9      	str	r1, [r7, #8]
 80192ca:	4613      	mov	r3, r2
 80192cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d109      	bne.n	80192e8 <udp_connect+0x28>
 80192d4:	4b2c      	ldr	r3, [pc, #176]	@ (8019388 <udp_connect+0xc8>)
 80192d6:	f240 4235 	movw	r2, #1077	@ 0x435
 80192da:	492c      	ldr	r1, [pc, #176]	@ (801938c <udp_connect+0xcc>)
 80192dc:	482c      	ldr	r0, [pc, #176]	@ (8019390 <udp_connect+0xd0>)
 80192de:	f005 fcc9 	bl	801ec74 <iprintf>
 80192e2:	f06f 030f 	mvn.w	r3, #15
 80192e6:	e04b      	b.n	8019380 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d109      	bne.n	8019302 <udp_connect+0x42>
 80192ee:	4b26      	ldr	r3, [pc, #152]	@ (8019388 <udp_connect+0xc8>)
 80192f0:	f240 4236 	movw	r2, #1078	@ 0x436
 80192f4:	4927      	ldr	r1, [pc, #156]	@ (8019394 <udp_connect+0xd4>)
 80192f6:	4826      	ldr	r0, [pc, #152]	@ (8019390 <udp_connect+0xd0>)
 80192f8:	f005 fcbc 	bl	801ec74 <iprintf>
 80192fc:	f06f 030f 	mvn.w	r3, #15
 8019300:	e03e      	b.n	8019380 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	8a5b      	ldrh	r3, [r3, #18]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d10f      	bne.n	801932a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801930a:	68f9      	ldr	r1, [r7, #12]
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	8a5b      	ldrh	r3, [r3, #18]
 8019310:	461a      	mov	r2, r3
 8019312:	68f8      	ldr	r0, [r7, #12]
 8019314:	f7ff ff32 	bl	801917c <udp_bind>
 8019318:	4603      	mov	r3, r0
 801931a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801931c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d002      	beq.n	801932a <udp_connect+0x6a>
      return err;
 8019324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019328:	e02a      	b.n	8019380 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801932a:	68bb      	ldr	r3, [r7, #8]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d002      	beq.n	8019336 <udp_connect+0x76>
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	e000      	b.n	8019338 <udp_connect+0x78>
 8019336:	2300      	movs	r3, #0
 8019338:	68fa      	ldr	r2, [r7, #12]
 801933a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	88fa      	ldrh	r2, [r7, #6]
 8019340:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	7c1b      	ldrb	r3, [r3, #16]
 8019346:	f043 0304 	orr.w	r3, r3, #4
 801934a:	b2da      	uxtb	r2, r3
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019350:	4b11      	ldr	r3, [pc, #68]	@ (8019398 <udp_connect+0xd8>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	613b      	str	r3, [r7, #16]
 8019356:	e008      	b.n	801936a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019358:	68fa      	ldr	r2, [r7, #12]
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	429a      	cmp	r2, r3
 801935e:	d101      	bne.n	8019364 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019360:	2300      	movs	r3, #0
 8019362:	e00d      	b.n	8019380 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019364:	693b      	ldr	r3, [r7, #16]
 8019366:	68db      	ldr	r3, [r3, #12]
 8019368:	613b      	str	r3, [r7, #16]
 801936a:	693b      	ldr	r3, [r7, #16]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d1f3      	bne.n	8019358 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019370:	4b09      	ldr	r3, [pc, #36]	@ (8019398 <udp_connect+0xd8>)
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019378:	4a07      	ldr	r2, [pc, #28]	@ (8019398 <udp_connect+0xd8>)
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801937e:	2300      	movs	r3, #0
}
 8019380:	4618      	mov	r0, r3
 8019382:	3718      	adds	r7, #24
 8019384:	46bd      	mov	sp, r7
 8019386:	bd80      	pop	{r7, pc}
 8019388:	0802466c 	.word	0x0802466c
 801938c:	0802494c 	.word	0x0802494c
 8019390:	080246c0 	.word	0x080246c0
 8019394:	08024968 	.word	0x08024968
 8019398:	20013e1c 	.word	0x20013e1c

0801939c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d107      	bne.n	80193ba <udp_disconnect+0x1e>
 80193aa:	4b0d      	ldr	r3, [pc, #52]	@ (80193e0 <udp_disconnect+0x44>)
 80193ac:	f240 426a 	movw	r2, #1130	@ 0x46a
 80193b0:	490c      	ldr	r1, [pc, #48]	@ (80193e4 <udp_disconnect+0x48>)
 80193b2:	480d      	ldr	r0, [pc, #52]	@ (80193e8 <udp_disconnect+0x4c>)
 80193b4:	f005 fc5e 	bl	801ec74 <iprintf>
 80193b8:	e00f      	b.n	80193da <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	2200      	movs	r2, #0
 80193be:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2200      	movs	r2, #0
 80193c4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	2200      	movs	r2, #0
 80193ca:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	7c1b      	ldrb	r3, [r3, #16]
 80193d0:	f023 0304 	bic.w	r3, r3, #4
 80193d4:	b2da      	uxtb	r2, r3
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	741a      	strb	r2, [r3, #16]
}
 80193da:	3708      	adds	r7, #8
 80193dc:	46bd      	mov	sp, r7
 80193de:	bd80      	pop	{r7, pc}
 80193e0:	0802466c 	.word	0x0802466c
 80193e4:	08024984 	.word	0x08024984
 80193e8:	080246c0 	.word	0x080246c0

080193ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	60f8      	str	r0, [r7, #12]
 80193f4:	60b9      	str	r1, [r7, #8]
 80193f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d107      	bne.n	801940e <udp_recv+0x22>
 80193fe:	4b08      	ldr	r3, [pc, #32]	@ (8019420 <udp_recv+0x34>)
 8019400:	f240 428a 	movw	r2, #1162	@ 0x48a
 8019404:	4907      	ldr	r1, [pc, #28]	@ (8019424 <udp_recv+0x38>)
 8019406:	4808      	ldr	r0, [pc, #32]	@ (8019428 <udp_recv+0x3c>)
 8019408:	f005 fc34 	bl	801ec74 <iprintf>
 801940c:	e005      	b.n	801941a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	68ba      	ldr	r2, [r7, #8]
 8019412:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	687a      	ldr	r2, [r7, #4]
 8019418:	61da      	str	r2, [r3, #28]
}
 801941a:	3710      	adds	r7, #16
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}
 8019420:	0802466c 	.word	0x0802466c
 8019424:	080249a0 	.word	0x080249a0
 8019428:	080246c0 	.word	0x080246c0

0801942c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b084      	sub	sp, #16
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d107      	bne.n	801944a <udp_remove+0x1e>
 801943a:	4b19      	ldr	r3, [pc, #100]	@ (80194a0 <udp_remove+0x74>)
 801943c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8019440:	4918      	ldr	r1, [pc, #96]	@ (80194a4 <udp_remove+0x78>)
 8019442:	4819      	ldr	r0, [pc, #100]	@ (80194a8 <udp_remove+0x7c>)
 8019444:	f005 fc16 	bl	801ec74 <iprintf>
 8019448:	e026      	b.n	8019498 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801944a:	4b18      	ldr	r3, [pc, #96]	@ (80194ac <udp_remove+0x80>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	687a      	ldr	r2, [r7, #4]
 8019450:	429a      	cmp	r2, r3
 8019452:	d105      	bne.n	8019460 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019454:	4b15      	ldr	r3, [pc, #84]	@ (80194ac <udp_remove+0x80>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	68db      	ldr	r3, [r3, #12]
 801945a:	4a14      	ldr	r2, [pc, #80]	@ (80194ac <udp_remove+0x80>)
 801945c:	6013      	str	r3, [r2, #0]
 801945e:	e017      	b.n	8019490 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019460:	4b12      	ldr	r3, [pc, #72]	@ (80194ac <udp_remove+0x80>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	60fb      	str	r3, [r7, #12]
 8019466:	e010      	b.n	801948a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	68db      	ldr	r3, [r3, #12]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d009      	beq.n	8019484 <udp_remove+0x58>
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	68db      	ldr	r3, [r3, #12]
 8019474:	687a      	ldr	r2, [r7, #4]
 8019476:	429a      	cmp	r2, r3
 8019478:	d104      	bne.n	8019484 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	68da      	ldr	r2, [r3, #12]
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	60da      	str	r2, [r3, #12]
        break;
 8019482:	e005      	b.n	8019490 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	68db      	ldr	r3, [r3, #12]
 8019488:	60fb      	str	r3, [r7, #12]
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d1eb      	bne.n	8019468 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019490:	6879      	ldr	r1, [r7, #4]
 8019492:	2000      	movs	r0, #0
 8019494:	f7f7 fe94 	bl	80111c0 <memp_free>
}
 8019498:	3710      	adds	r7, #16
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
 801949e:	bf00      	nop
 80194a0:	0802466c 	.word	0x0802466c
 80194a4:	080249b8 	.word	0x080249b8
 80194a8:	080246c0 	.word	0x080246c0
 80194ac:	20013e1c 	.word	0x20013e1c

080194b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b082      	sub	sp, #8
 80194b4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80194b6:	2000      	movs	r0, #0
 80194b8:	f7f7 fe30 	bl	801111c <memp_malloc>
 80194bc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d007      	beq.n	80194d4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80194c4:	2220      	movs	r2, #32
 80194c6:	2100      	movs	r1, #0
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	f005 fd3d 	bl	801ef48 <memset>
    pcb->ttl = UDP_TTL;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	22ff      	movs	r2, #255	@ 0xff
 80194d2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80194d4:	687b      	ldr	r3, [r7, #4]
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3708      	adds	r7, #8
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
	...

080194e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80194e0:	b480      	push	{r7}
 80194e2:	b085      	sub	sp, #20
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
 80194e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d01e      	beq.n	801952e <udp_netif_ip_addr_changed+0x4e>
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d01a      	beq.n	801952e <udp_netif_ip_addr_changed+0x4e>
 80194f8:	683b      	ldr	r3, [r7, #0]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d017      	beq.n	801952e <udp_netif_ip_addr_changed+0x4e>
 80194fe:	683b      	ldr	r3, [r7, #0]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d013      	beq.n	801952e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019506:	4b0d      	ldr	r3, [pc, #52]	@ (801953c <udp_netif_ip_addr_changed+0x5c>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	60fb      	str	r3, [r7, #12]
 801950c:	e00c      	b.n	8019528 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	681a      	ldr	r2, [r3, #0]
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	429a      	cmp	r2, r3
 8019518:	d103      	bne.n	8019522 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	681a      	ldr	r2, [r3, #0]
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	68db      	ldr	r3, [r3, #12]
 8019526:	60fb      	str	r3, [r7, #12]
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d1ef      	bne.n	801950e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801952e:	bf00      	nop
 8019530:	3714      	adds	r7, #20
 8019532:	46bd      	mov	sp, r7
 8019534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	20013e1c 	.word	0x20013e1c

08019540 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8019544:	4b20      	ldr	r3, [pc, #128]	@ (80195c8 <dhcp_inc_pcb_refcount+0x88>)
 8019546:	781b      	ldrb	r3, [r3, #0]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d133      	bne.n	80195b4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801954c:	4b1f      	ldr	r3, [pc, #124]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d005      	beq.n	8019560 <dhcp_inc_pcb_refcount+0x20>
 8019554:	4b1e      	ldr	r3, [pc, #120]	@ (80195d0 <dhcp_inc_pcb_refcount+0x90>)
 8019556:	22e5      	movs	r2, #229	@ 0xe5
 8019558:	491e      	ldr	r1, [pc, #120]	@ (80195d4 <dhcp_inc_pcb_refcount+0x94>)
 801955a:	481f      	ldr	r0, [pc, #124]	@ (80195d8 <dhcp_inc_pcb_refcount+0x98>)
 801955c:	f005 fb8a 	bl	801ec74 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019560:	f7ff ffa6 	bl	80194b0 <udp_new>
 8019564:	4603      	mov	r3, r0
 8019566:	4a19      	ldr	r2, [pc, #100]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 8019568:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801956a:	4b18      	ldr	r3, [pc, #96]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d102      	bne.n	8019578 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8019572:	f04f 33ff 	mov.w	r3, #4294967295
 8019576:	e024      	b.n	80195c2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019578:	4b14      	ldr	r3, [pc, #80]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	7a5a      	ldrb	r2, [r3, #9]
 801957e:	4b13      	ldr	r3, [pc, #76]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	f042 0220 	orr.w	r2, r2, #32
 8019586:	b2d2      	uxtb	r2, r2
 8019588:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801958a:	4b10      	ldr	r3, [pc, #64]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2244      	movs	r2, #68	@ 0x44
 8019590:	4912      	ldr	r1, [pc, #72]	@ (80195dc <dhcp_inc_pcb_refcount+0x9c>)
 8019592:	4618      	mov	r0, r3
 8019594:	f7ff fdf2 	bl	801917c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8019598:	4b0c      	ldr	r3, [pc, #48]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	2243      	movs	r2, #67	@ 0x43
 801959e:	490f      	ldr	r1, [pc, #60]	@ (80195dc <dhcp_inc_pcb_refcount+0x9c>)
 80195a0:	4618      	mov	r0, r3
 80195a2:	f7ff fe8d 	bl	80192c0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80195a6:	4b09      	ldr	r3, [pc, #36]	@ (80195cc <dhcp_inc_pcb_refcount+0x8c>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	2200      	movs	r2, #0
 80195ac:	490c      	ldr	r1, [pc, #48]	@ (80195e0 <dhcp_inc_pcb_refcount+0xa0>)
 80195ae:	4618      	mov	r0, r3
 80195b0:	f7ff ff1c 	bl	80193ec <udp_recv>
  }

  dhcp_pcb_refcount++;
 80195b4:	4b04      	ldr	r3, [pc, #16]	@ (80195c8 <dhcp_inc_pcb_refcount+0x88>)
 80195b6:	781b      	ldrb	r3, [r3, #0]
 80195b8:	3301      	adds	r3, #1
 80195ba:	b2da      	uxtb	r2, r3
 80195bc:	4b02      	ldr	r3, [pc, #8]	@ (80195c8 <dhcp_inc_pcb_refcount+0x88>)
 80195be:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80195c0:	2300      	movs	r3, #0
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	20013e4c 	.word	0x20013e4c
 80195cc:	20013e48 	.word	0x20013e48
 80195d0:	080249d0 	.word	0x080249d0
 80195d4:	08024a08 	.word	0x08024a08
 80195d8:	08024a30 	.word	0x08024a30
 80195dc:	08071298 	.word	0x08071298
 80195e0:	0801aea1 	.word	0x0801aea1

080195e4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80195e4:	b580      	push	{r7, lr}
 80195e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80195e8:	4b0e      	ldr	r3, [pc, #56]	@ (8019624 <dhcp_dec_pcb_refcount+0x40>)
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d105      	bne.n	80195fc <dhcp_dec_pcb_refcount+0x18>
 80195f0:	4b0d      	ldr	r3, [pc, #52]	@ (8019628 <dhcp_dec_pcb_refcount+0x44>)
 80195f2:	22ff      	movs	r2, #255	@ 0xff
 80195f4:	490d      	ldr	r1, [pc, #52]	@ (801962c <dhcp_dec_pcb_refcount+0x48>)
 80195f6:	480e      	ldr	r0, [pc, #56]	@ (8019630 <dhcp_dec_pcb_refcount+0x4c>)
 80195f8:	f005 fb3c 	bl	801ec74 <iprintf>
  dhcp_pcb_refcount--;
 80195fc:	4b09      	ldr	r3, [pc, #36]	@ (8019624 <dhcp_dec_pcb_refcount+0x40>)
 80195fe:	781b      	ldrb	r3, [r3, #0]
 8019600:	3b01      	subs	r3, #1
 8019602:	b2da      	uxtb	r2, r3
 8019604:	4b07      	ldr	r3, [pc, #28]	@ (8019624 <dhcp_dec_pcb_refcount+0x40>)
 8019606:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019608:	4b06      	ldr	r3, [pc, #24]	@ (8019624 <dhcp_dec_pcb_refcount+0x40>)
 801960a:	781b      	ldrb	r3, [r3, #0]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d107      	bne.n	8019620 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019610:	4b08      	ldr	r3, [pc, #32]	@ (8019634 <dhcp_dec_pcb_refcount+0x50>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	4618      	mov	r0, r3
 8019616:	f7ff ff09 	bl	801942c <udp_remove>
    dhcp_pcb = NULL;
 801961a:	4b06      	ldr	r3, [pc, #24]	@ (8019634 <dhcp_dec_pcb_refcount+0x50>)
 801961c:	2200      	movs	r2, #0
 801961e:	601a      	str	r2, [r3, #0]
  }
}
 8019620:	bf00      	nop
 8019622:	bd80      	pop	{r7, pc}
 8019624:	20013e4c 	.word	0x20013e4c
 8019628:	080249d0 	.word	0x080249d0
 801962c:	08024a58 	.word	0x08024a58
 8019630:	08024a30 	.word	0x08024a30
 8019634:	20013e48 	.word	0x20013e48

08019638 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b084      	sub	sp, #16
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019644:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019646:	210c      	movs	r1, #12
 8019648:	68f8      	ldr	r0, [r7, #12]
 801964a:	f001 f85a 	bl	801a702 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801964e:	4b06      	ldr	r3, [pc, #24]	@ (8019668 <dhcp_handle_nak+0x30>)
 8019650:	4a05      	ldr	r2, [pc, #20]	@ (8019668 <dhcp_handle_nak+0x30>)
 8019652:	4905      	ldr	r1, [pc, #20]	@ (8019668 <dhcp_handle_nak+0x30>)
 8019654:	6878      	ldr	r0, [r7, #4]
 8019656:	f7f7 ff55 	bl	8011504 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f000 fc48 	bl	8019ef0 <dhcp_discover>
}
 8019660:	bf00      	nop
 8019662:	3710      	adds	r7, #16
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}
 8019668:	08071298 	.word	0x08071298

0801966c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b084      	sub	sp, #16
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019678:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801967a:	2108      	movs	r1, #8
 801967c:	68f8      	ldr	r0, [r7, #12]
 801967e:	f001 f840 	bl	801a702 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	331c      	adds	r3, #28
 8019686:	2200      	movs	r2, #0
 8019688:	4619      	mov	r1, r3
 801968a:	6878      	ldr	r0, [r7, #4]
 801968c:	f002 fbbc 	bl	801be08 <etharp_query>
 8019690:	4603      	mov	r3, r0
 8019692:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	799b      	ldrb	r3, [r3, #6]
 8019698:	2bff      	cmp	r3, #255	@ 0xff
 801969a:	d005      	beq.n	80196a8 <dhcp_check+0x3c>
    dhcp->tries++;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	799b      	ldrb	r3, [r3, #6]
 80196a0:	3301      	adds	r3, #1
 80196a2:	b2da      	uxtb	r2, r3
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80196a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80196ac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80196ae:	893b      	ldrh	r3, [r7, #8]
 80196b0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80196b4:	4a06      	ldr	r2, [pc, #24]	@ (80196d0 <dhcp_check+0x64>)
 80196b6:	fb82 1203 	smull	r1, r2, r2, r3
 80196ba:	1152      	asrs	r2, r2, #5
 80196bc:	17db      	asrs	r3, r3, #31
 80196be:	1ad3      	subs	r3, r2, r3
 80196c0:	b29a      	uxth	r2, r3
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80196c6:	bf00      	nop
 80196c8:	3710      	adds	r7, #16
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}
 80196ce:	bf00      	nop
 80196d0:	10624dd3 	.word	0x10624dd3

080196d4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b084      	sub	sp, #16
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
 80196dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80196e4:	4b0c      	ldr	r3, [pc, #48]	@ (8019718 <dhcp_handle_offer+0x44>)
 80196e6:	789b      	ldrb	r3, [r3, #2]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d011      	beq.n	8019710 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	2200      	movs	r2, #0
 80196f0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80196f2:	4b0a      	ldr	r3, [pc, #40]	@ (801971c <dhcp_handle_offer+0x48>)
 80196f4:	689b      	ldr	r3, [r3, #8]
 80196f6:	4618      	mov	r0, r3
 80196f8:	f7f6 fef7 	bl	80104ea <lwip_htonl>
 80196fc:	4602      	mov	r2, r0
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019702:	683b      	ldr	r3, [r7, #0]
 8019704:	691a      	ldr	r2, [r3, #16]
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801970a:	6878      	ldr	r0, [r7, #4]
 801970c:	f000 f808 	bl	8019720 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019710:	bf00      	nop
 8019712:	3710      	adds	r7, #16
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	20013e40 	.word	0x20013e40
 801971c:	20013e20 	.word	0x20013e20

08019720 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019720:	b5b0      	push	{r4, r5, r7, lr}
 8019722:	b08a      	sub	sp, #40	@ 0x28
 8019724:	af02      	add	r7, sp, #8
 8019726:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d109      	bne.n	8019742 <dhcp_select+0x22>
 801972e:	4b71      	ldr	r3, [pc, #452]	@ (80198f4 <dhcp_select+0x1d4>)
 8019730:	f240 1277 	movw	r2, #375	@ 0x177
 8019734:	4970      	ldr	r1, [pc, #448]	@ (80198f8 <dhcp_select+0x1d8>)
 8019736:	4871      	ldr	r0, [pc, #452]	@ (80198fc <dhcp_select+0x1dc>)
 8019738:	f005 fa9c 	bl	801ec74 <iprintf>
 801973c:	f06f 030f 	mvn.w	r3, #15
 8019740:	e0d3      	b.n	80198ea <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019746:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019748:	69bb      	ldr	r3, [r7, #24]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d109      	bne.n	8019762 <dhcp_select+0x42>
 801974e:	4b69      	ldr	r3, [pc, #420]	@ (80198f4 <dhcp_select+0x1d4>)
 8019750:	f240 1279 	movw	r2, #377	@ 0x179
 8019754:	496a      	ldr	r1, [pc, #424]	@ (8019900 <dhcp_select+0x1e0>)
 8019756:	4869      	ldr	r0, [pc, #420]	@ (80198fc <dhcp_select+0x1dc>)
 8019758:	f005 fa8c 	bl	801ec74 <iprintf>
 801975c:	f06f 0305 	mvn.w	r3, #5
 8019760:	e0c3      	b.n	80198ea <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8019762:	2101      	movs	r1, #1
 8019764:	69b8      	ldr	r0, [r7, #24]
 8019766:	f000 ffcc 	bl	801a702 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801976a:	f107 030c 	add.w	r3, r7, #12
 801976e:	2203      	movs	r2, #3
 8019770:	69b9      	ldr	r1, [r7, #24]
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	f001 fc5e 	bl	801b034 <dhcp_create_msg>
 8019778:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	2b00      	cmp	r3, #0
 801977e:	f000 8085 	beq.w	801988c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019782:	697b      	ldr	r3, [r7, #20]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019788:	89b8      	ldrh	r0, [r7, #12]
 801978a:	693b      	ldr	r3, [r7, #16]
 801978c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019790:	2302      	movs	r3, #2
 8019792:	2239      	movs	r2, #57	@ 0x39
 8019794:	f000 ffd0 	bl	801a738 <dhcp_option>
 8019798:	4603      	mov	r3, r0
 801979a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801979c:	89b8      	ldrh	r0, [r7, #12]
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80197a8:	461a      	mov	r2, r3
 80197aa:	f001 f81f 	bl	801a7ec <dhcp_option_short>
 80197ae:	4603      	mov	r3, r0
 80197b0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80197b2:	89b8      	ldrh	r0, [r7, #12]
 80197b4:	693b      	ldr	r3, [r7, #16]
 80197b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197ba:	2304      	movs	r3, #4
 80197bc:	2232      	movs	r2, #50	@ 0x32
 80197be:	f000 ffbb 	bl	801a738 <dhcp_option>
 80197c2:	4603      	mov	r3, r0
 80197c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80197c6:	89bc      	ldrh	r4, [r7, #12]
 80197c8:	693b      	ldr	r3, [r7, #16]
 80197ca:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80197ce:	69bb      	ldr	r3, [r7, #24]
 80197d0:	69db      	ldr	r3, [r3, #28]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7f6 fe89 	bl	80104ea <lwip_htonl>
 80197d8:	4603      	mov	r3, r0
 80197da:	461a      	mov	r2, r3
 80197dc:	4629      	mov	r1, r5
 80197de:	4620      	mov	r0, r4
 80197e0:	f001 f836 	bl	801a850 <dhcp_option_long>
 80197e4:	4603      	mov	r3, r0
 80197e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80197e8:	89b8      	ldrh	r0, [r7, #12]
 80197ea:	693b      	ldr	r3, [r7, #16]
 80197ec:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197f0:	2304      	movs	r3, #4
 80197f2:	2236      	movs	r2, #54	@ 0x36
 80197f4:	f000 ffa0 	bl	801a738 <dhcp_option>
 80197f8:	4603      	mov	r3, r0
 80197fa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80197fc:	89bc      	ldrh	r4, [r7, #12]
 80197fe:	693b      	ldr	r3, [r7, #16]
 8019800:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019804:	69bb      	ldr	r3, [r7, #24]
 8019806:	699b      	ldr	r3, [r3, #24]
 8019808:	4618      	mov	r0, r3
 801980a:	f7f6 fe6e 	bl	80104ea <lwip_htonl>
 801980e:	4603      	mov	r3, r0
 8019810:	461a      	mov	r2, r3
 8019812:	4629      	mov	r1, r5
 8019814:	4620      	mov	r0, r4
 8019816:	f001 f81b 	bl	801a850 <dhcp_option_long>
 801981a:	4603      	mov	r3, r0
 801981c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801981e:	89b8      	ldrh	r0, [r7, #12]
 8019820:	693b      	ldr	r3, [r7, #16]
 8019822:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019826:	2303      	movs	r3, #3
 8019828:	2237      	movs	r2, #55	@ 0x37
 801982a:	f000 ff85 	bl	801a738 <dhcp_option>
 801982e:	4603      	mov	r3, r0
 8019830:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019832:	2300      	movs	r3, #0
 8019834:	77fb      	strb	r3, [r7, #31]
 8019836:	e00e      	b.n	8019856 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019838:	89b8      	ldrh	r0, [r7, #12]
 801983a:	693b      	ldr	r3, [r7, #16]
 801983c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019840:	7ffb      	ldrb	r3, [r7, #31]
 8019842:	4a30      	ldr	r2, [pc, #192]	@ (8019904 <dhcp_select+0x1e4>)
 8019844:	5cd3      	ldrb	r3, [r2, r3]
 8019846:	461a      	mov	r2, r3
 8019848:	f000 ffaa 	bl	801a7a0 <dhcp_option_byte>
 801984c:	4603      	mov	r3, r0
 801984e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019850:	7ffb      	ldrb	r3, [r7, #31]
 8019852:	3301      	adds	r3, #1
 8019854:	77fb      	strb	r3, [r7, #31]
 8019856:	7ffb      	ldrb	r3, [r7, #31]
 8019858:	2b02      	cmp	r3, #2
 801985a:	d9ed      	bls.n	8019838 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801985c:	89b8      	ldrh	r0, [r7, #12]
 801985e:	693b      	ldr	r3, [r7, #16]
 8019860:	33f0      	adds	r3, #240	@ 0xf0
 8019862:	697a      	ldr	r2, [r7, #20]
 8019864:	4619      	mov	r1, r3
 8019866:	f001 fcbb 	bl	801b1e0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801986a:	4b27      	ldr	r3, [pc, #156]	@ (8019908 <dhcp_select+0x1e8>)
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	4b27      	ldr	r3, [pc, #156]	@ (801990c <dhcp_select+0x1ec>)
 8019870:	9301      	str	r3, [sp, #4]
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	9300      	str	r3, [sp, #0]
 8019876:	2343      	movs	r3, #67	@ 0x43
 8019878:	4a25      	ldr	r2, [pc, #148]	@ (8019910 <dhcp_select+0x1f0>)
 801987a:	6979      	ldr	r1, [r7, #20]
 801987c:	f7ff fb98 	bl	8018fb0 <udp_sendto_if_src>
 8019880:	4603      	mov	r3, r0
 8019882:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8019884:	6978      	ldr	r0, [r7, #20]
 8019886:	f7f8 fb3d 	bl	8011f04 <pbuf_free>
 801988a:	e001      	b.n	8019890 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801988c:	23ff      	movs	r3, #255	@ 0xff
 801988e:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8019890:	69bb      	ldr	r3, [r7, #24]
 8019892:	799b      	ldrb	r3, [r3, #6]
 8019894:	2bff      	cmp	r3, #255	@ 0xff
 8019896:	d005      	beq.n	80198a4 <dhcp_select+0x184>
    dhcp->tries++;
 8019898:	69bb      	ldr	r3, [r7, #24]
 801989a:	799b      	ldrb	r3, [r3, #6]
 801989c:	3301      	adds	r3, #1
 801989e:	b2da      	uxtb	r2, r3
 80198a0:	69bb      	ldr	r3, [r7, #24]
 80198a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	799b      	ldrb	r3, [r3, #6]
 80198a8:	2b05      	cmp	r3, #5
 80198aa:	d80d      	bhi.n	80198c8 <dhcp_select+0x1a8>
 80198ac:	69bb      	ldr	r3, [r7, #24]
 80198ae:	799b      	ldrb	r3, [r3, #6]
 80198b0:	461a      	mov	r2, r3
 80198b2:	2301      	movs	r3, #1
 80198b4:	4093      	lsls	r3, r2
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	461a      	mov	r2, r3
 80198ba:	0152      	lsls	r2, r2, #5
 80198bc:	1ad2      	subs	r2, r2, r3
 80198be:	0092      	lsls	r2, r2, #2
 80198c0:	4413      	add	r3, r2
 80198c2:	00db      	lsls	r3, r3, #3
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	e001      	b.n	80198cc <dhcp_select+0x1ac>
 80198c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80198cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80198ce:	89fb      	ldrh	r3, [r7, #14]
 80198d0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80198d4:	4a0f      	ldr	r2, [pc, #60]	@ (8019914 <dhcp_select+0x1f4>)
 80198d6:	fb82 1203 	smull	r1, r2, r2, r3
 80198da:	1152      	asrs	r2, r2, #5
 80198dc:	17db      	asrs	r3, r3, #31
 80198de:	1ad3      	subs	r3, r2, r3
 80198e0:	b29a      	uxth	r2, r3
 80198e2:	69bb      	ldr	r3, [r7, #24]
 80198e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80198e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	3720      	adds	r7, #32
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bdb0      	pop	{r4, r5, r7, pc}
 80198f2:	bf00      	nop
 80198f4:	080249d0 	.word	0x080249d0
 80198f8:	08024a7c 	.word	0x08024a7c
 80198fc:	08024a30 	.word	0x08024a30
 8019900:	08024a98 	.word	0x08024a98
 8019904:	200000c8 	.word	0x200000c8
 8019908:	20013e48 	.word	0x20013e48
 801990c:	08071298 	.word	0x08071298
 8019910:	0807129c 	.word	0x0807129c
 8019914:	10624dd3 	.word	0x10624dd3

08019918 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019918:	b580      	push	{r7, lr}
 801991a:	b082      	sub	sp, #8
 801991c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801991e:	4b27      	ldr	r3, [pc, #156]	@ (80199bc <dhcp_coarse_tmr+0xa4>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	607b      	str	r3, [r7, #4]
 8019924:	e042      	b.n	80199ac <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801992a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801992c:	683b      	ldr	r3, [r7, #0]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d039      	beq.n	80199a6 <dhcp_coarse_tmr+0x8e>
 8019932:	683b      	ldr	r3, [r7, #0]
 8019934:	795b      	ldrb	r3, [r3, #5]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d035      	beq.n	80199a6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	8a9b      	ldrh	r3, [r3, #20]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d012      	beq.n	8019968 <dhcp_coarse_tmr+0x50>
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	8a5b      	ldrh	r3, [r3, #18]
 8019946:	3301      	adds	r3, #1
 8019948:	b29a      	uxth	r2, r3
 801994a:	683b      	ldr	r3, [r7, #0]
 801994c:	825a      	strh	r2, [r3, #18]
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	8a5a      	ldrh	r2, [r3, #18]
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	8a9b      	ldrh	r3, [r3, #20]
 8019956:	429a      	cmp	r2, r3
 8019958:	d106      	bne.n	8019968 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f000 fe2c 	bl	801a5b8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f000 f969 	bl	8019c38 <dhcp_start>
 8019966:	e01e      	b.n	80199a6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	8a1b      	ldrh	r3, [r3, #16]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d00b      	beq.n	8019988 <dhcp_coarse_tmr+0x70>
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	8a1b      	ldrh	r3, [r3, #16]
 8019974:	1e5a      	subs	r2, r3, #1
 8019976:	b291      	uxth	r1, r2
 8019978:	683a      	ldr	r2, [r7, #0]
 801997a:	8211      	strh	r1, [r2, #16]
 801997c:	2b01      	cmp	r3, #1
 801997e:	d103      	bne.n	8019988 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8019980:	6878      	ldr	r0, [r7, #4]
 8019982:	f000 f8c6 	bl	8019b12 <dhcp_t2_timeout>
 8019986:	e00e      	b.n	80199a6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	89db      	ldrh	r3, [r3, #14]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d00a      	beq.n	80199a6 <dhcp_coarse_tmr+0x8e>
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	89db      	ldrh	r3, [r3, #14]
 8019994:	1e5a      	subs	r2, r3, #1
 8019996:	b291      	uxth	r1, r2
 8019998:	683a      	ldr	r2, [r7, #0]
 801999a:	81d1      	strh	r1, [r2, #14]
 801999c:	2b01      	cmp	r3, #1
 801999e:	d102      	bne.n	80199a6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f000 f888 	bl	8019ab6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	607b      	str	r3, [r7, #4]
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d1b9      	bne.n	8019926 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80199b2:	bf00      	nop
 80199b4:	bf00      	nop
 80199b6:	3708      	adds	r7, #8
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}
 80199bc:	20013db0 	.word	0x20013db0

080199c0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b082      	sub	sp, #8
 80199c4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80199c6:	4b16      	ldr	r3, [pc, #88]	@ (8019a20 <dhcp_fine_tmr+0x60>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	607b      	str	r3, [r7, #4]
 80199cc:	e020      	b.n	8019a10 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199d2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d017      	beq.n	8019a0a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80199da:	683b      	ldr	r3, [r7, #0]
 80199dc:	891b      	ldrh	r3, [r3, #8]
 80199de:	2b01      	cmp	r3, #1
 80199e0:	d906      	bls.n	80199f0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	891b      	ldrh	r3, [r3, #8]
 80199e6:	3b01      	subs	r3, #1
 80199e8:	b29a      	uxth	r2, r3
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	811a      	strh	r2, [r3, #8]
 80199ee:	e00c      	b.n	8019a0a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	891b      	ldrh	r3, [r3, #8]
 80199f4:	2b01      	cmp	r3, #1
 80199f6:	d108      	bne.n	8019a0a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	891b      	ldrh	r3, [r3, #8]
 80199fc:	3b01      	subs	r3, #1
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8019a04:	6878      	ldr	r0, [r7, #4]
 8019a06:	f000 f80d 	bl	8019a24 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	607b      	str	r3, [r7, #4]
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d1db      	bne.n	80199ce <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8019a16:	bf00      	nop
 8019a18:	bf00      	nop
 8019a1a:	3708      	adds	r7, #8
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}
 8019a20:	20013db0 	.word	0x20013db0

08019a24 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b084      	sub	sp, #16
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	795b      	ldrb	r3, [r3, #5]
 8019a36:	2b0c      	cmp	r3, #12
 8019a38:	d003      	beq.n	8019a42 <dhcp_timeout+0x1e>
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	795b      	ldrb	r3, [r3, #5]
 8019a3e:	2b06      	cmp	r3, #6
 8019a40:	d103      	bne.n	8019a4a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	f000 fa54 	bl	8019ef0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019a48:	e031      	b.n	8019aae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	795b      	ldrb	r3, [r3, #5]
 8019a4e:	2b01      	cmp	r3, #1
 8019a50:	d10e      	bne.n	8019a70 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	799b      	ldrb	r3, [r3, #6]
 8019a56:	2b05      	cmp	r3, #5
 8019a58:	d803      	bhi.n	8019a62 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8019a5a:	6878      	ldr	r0, [r7, #4]
 8019a5c:	f7ff fe60 	bl	8019720 <dhcp_select>
}
 8019a60:	e025      	b.n	8019aae <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f000 fda8 	bl	801a5b8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f000 f8e5 	bl	8019c38 <dhcp_start>
}
 8019a6e:	e01e      	b.n	8019aae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	795b      	ldrb	r3, [r3, #5]
 8019a74:	2b08      	cmp	r3, #8
 8019a76:	d10b      	bne.n	8019a90 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	799b      	ldrb	r3, [r3, #6]
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	d803      	bhi.n	8019a88 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8019a80:	6878      	ldr	r0, [r7, #4]
 8019a82:	f7ff fdf3 	bl	801966c <dhcp_check>
}
 8019a86:	e012      	b.n	8019aae <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8019a88:	6878      	ldr	r0, [r7, #4]
 8019a8a:	f000 fad3 	bl	801a034 <dhcp_bind>
}
 8019a8e:	e00e      	b.n	8019aae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	795b      	ldrb	r3, [r3, #5]
 8019a94:	2b03      	cmp	r3, #3
 8019a96:	d10a      	bne.n	8019aae <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	799b      	ldrb	r3, [r3, #6]
 8019a9c:	2b01      	cmp	r3, #1
 8019a9e:	d803      	bhi.n	8019aa8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8019aa0:	6878      	ldr	r0, [r7, #4]
 8019aa2:	f000 fcd5 	bl	801a450 <dhcp_reboot>
}
 8019aa6:	e002      	b.n	8019aae <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f000 fa21 	bl	8019ef0 <dhcp_discover>
}
 8019aae:	bf00      	nop
 8019ab0:	3710      	adds	r7, #16
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}

08019ab6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8019ab6:	b580      	push	{r7, lr}
 8019ab8:	b084      	sub	sp, #16
 8019aba:	af00      	add	r7, sp, #0
 8019abc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ac2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	795b      	ldrb	r3, [r3, #5]
 8019ac8:	2b01      	cmp	r3, #1
 8019aca:	d007      	beq.n	8019adc <dhcp_t1_timeout+0x26>
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	795b      	ldrb	r3, [r3, #5]
 8019ad0:	2b0a      	cmp	r3, #10
 8019ad2:	d003      	beq.n	8019adc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019ad8:	2b05      	cmp	r3, #5
 8019ada:	d116      	bne.n	8019b0a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8019adc:	6878      	ldr	r0, [r7, #4]
 8019ade:	f000 fb83 	bl	801a1e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	899b      	ldrh	r3, [r3, #12]
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	8a5b      	ldrh	r3, [r3, #18]
 8019aec:	1ad3      	subs	r3, r2, r3
 8019aee:	2b01      	cmp	r3, #1
 8019af0:	dd0b      	ble.n	8019b0a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	899b      	ldrh	r3, [r3, #12]
 8019af6:	461a      	mov	r2, r3
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	8a5b      	ldrh	r3, [r3, #18]
 8019afc:	1ad3      	subs	r3, r2, r3
 8019afe:	0fda      	lsrs	r2, r3, #31
 8019b00:	4413      	add	r3, r2
 8019b02:	105b      	asrs	r3, r3, #1
 8019b04:	b29a      	uxth	r2, r3
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8019b0a:	bf00      	nop
 8019b0c:	3710      	adds	r7, #16
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}

08019b12 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8019b12:	b580      	push	{r7, lr}
 8019b14:	b084      	sub	sp, #16
 8019b16:	af00      	add	r7, sp, #0
 8019b18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	795b      	ldrb	r3, [r3, #5]
 8019b24:	2b01      	cmp	r3, #1
 8019b26:	d00b      	beq.n	8019b40 <dhcp_t2_timeout+0x2e>
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	795b      	ldrb	r3, [r3, #5]
 8019b2c:	2b0a      	cmp	r3, #10
 8019b2e:	d007      	beq.n	8019b40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019b34:	2b05      	cmp	r3, #5
 8019b36:	d003      	beq.n	8019b40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	795b      	ldrb	r3, [r3, #5]
 8019b3c:	2b04      	cmp	r3, #4
 8019b3e:	d116      	bne.n	8019b6e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	f000 fbeb 	bl	801a31c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	8a9b      	ldrh	r3, [r3, #20]
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	8a5b      	ldrh	r3, [r3, #18]
 8019b50:	1ad3      	subs	r3, r2, r3
 8019b52:	2b01      	cmp	r3, #1
 8019b54:	dd0b      	ble.n	8019b6e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	8a9b      	ldrh	r3, [r3, #20]
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	8a5b      	ldrh	r3, [r3, #18]
 8019b60:	1ad3      	subs	r3, r2, r3
 8019b62:	0fda      	lsrs	r2, r3, #31
 8019b64:	4413      	add	r3, r2
 8019b66:	105b      	asrs	r3, r3, #1
 8019b68:	b29a      	uxth	r2, r3
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8019b6e:	bf00      	nop
 8019b70:	3710      	adds	r7, #16
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
	...

08019b78 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b084      	sub	sp, #16
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
 8019b80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b86:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	2200      	movs	r2, #0
 8019b92:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019b94:	4b26      	ldr	r3, [pc, #152]	@ (8019c30 <dhcp_handle_ack+0xb8>)
 8019b96:	78db      	ldrb	r3, [r3, #3]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d003      	beq.n	8019ba4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8019b9c:	4b25      	ldr	r3, [pc, #148]	@ (8019c34 <dhcp_handle_ack+0xbc>)
 8019b9e:	68da      	ldr	r2, [r3, #12]
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019ba4:	4b22      	ldr	r3, [pc, #136]	@ (8019c30 <dhcp_handle_ack+0xb8>)
 8019ba6:	791b      	ldrb	r3, [r3, #4]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d004      	beq.n	8019bb6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8019bac:	4b21      	ldr	r3, [pc, #132]	@ (8019c34 <dhcp_handle_ack+0xbc>)
 8019bae:	691a      	ldr	r2, [r3, #16]
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019bb4:	e004      	b.n	8019bc0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019bba:	085a      	lsrs	r2, r3, #1
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8019c30 <dhcp_handle_ack+0xb8>)
 8019bc2:	795b      	ldrb	r3, [r3, #5]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d004      	beq.n	8019bd2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8019c34 <dhcp_handle_ack+0xbc>)
 8019bca:	695a      	ldr	r2, [r3, #20]
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	631a      	str	r2, [r3, #48]	@ 0x30
 8019bd0:	e007      	b.n	8019be2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019bd6:	4613      	mov	r3, r2
 8019bd8:	00db      	lsls	r3, r3, #3
 8019bda:	1a9b      	subs	r3, r3, r2
 8019bdc:	08da      	lsrs	r2, r3, #3
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	691a      	ldr	r2, [r3, #16]
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019bea:	4b11      	ldr	r3, [pc, #68]	@ (8019c30 <dhcp_handle_ack+0xb8>)
 8019bec:	799b      	ldrb	r3, [r3, #6]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d00b      	beq.n	8019c0a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019bf2:	4b10      	ldr	r3, [pc, #64]	@ (8019c34 <dhcp_handle_ack+0xbc>)
 8019bf4:	699b      	ldr	r3, [r3, #24]
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	f7f6 fc77 	bl	80104ea <lwip_htonl>
 8019bfc:	4602      	mov	r2, r0
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2201      	movs	r2, #1
 8019c06:	71da      	strb	r2, [r3, #7]
 8019c08:	e002      	b.n	8019c10 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019c10:	4b07      	ldr	r3, [pc, #28]	@ (8019c30 <dhcp_handle_ack+0xb8>)
 8019c12:	79db      	ldrb	r3, [r3, #7]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d007      	beq.n	8019c28 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019c18:	4b06      	ldr	r3, [pc, #24]	@ (8019c34 <dhcp_handle_ack+0xbc>)
 8019c1a:	69db      	ldr	r3, [r3, #28]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7f6 fc64 	bl	80104ea <lwip_htonl>
 8019c22:	4602      	mov	r2, r0
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8019c28:	bf00      	nop
 8019c2a:	3710      	adds	r7, #16
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}
 8019c30:	20013e40 	.word	0x20013e40
 8019c34:	20013e20 	.word	0x20013e20

08019c38 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d109      	bne.n	8019c5a <dhcp_start+0x22>
 8019c46:	4b37      	ldr	r3, [pc, #220]	@ (8019d24 <dhcp_start+0xec>)
 8019c48:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8019c4c:	4936      	ldr	r1, [pc, #216]	@ (8019d28 <dhcp_start+0xf0>)
 8019c4e:	4837      	ldr	r0, [pc, #220]	@ (8019d2c <dhcp_start+0xf4>)
 8019c50:	f005 f810 	bl	801ec74 <iprintf>
 8019c54:	f06f 030f 	mvn.w	r3, #15
 8019c58:	e060      	b.n	8019d1c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019c60:	f003 0301 	and.w	r3, r3, #1
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d109      	bne.n	8019c7c <dhcp_start+0x44>
 8019c68:	4b2e      	ldr	r3, [pc, #184]	@ (8019d24 <dhcp_start+0xec>)
 8019c6a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8019c6e:	4930      	ldr	r1, [pc, #192]	@ (8019d30 <dhcp_start+0xf8>)
 8019c70:	482e      	ldr	r0, [pc, #184]	@ (8019d2c <dhcp_start+0xf4>)
 8019c72:	f004 ffff 	bl	801ec74 <iprintf>
 8019c76:	f06f 030f 	mvn.w	r3, #15
 8019c7a:	e04f      	b.n	8019d1c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c80:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019c86:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8019c8a:	d202      	bcs.n	8019c92 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8019c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019c90:	e044      	b.n	8019d1c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d10d      	bne.n	8019cb4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8019c98:	2034      	movs	r0, #52	@ 0x34
 8019c9a:	f7f7 f8bd 	bl	8010e18 <mem_malloc>
 8019c9e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d102      	bne.n	8019cac <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8019ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8019caa:	e037      	b.n	8019d1c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	68fa      	ldr	r2, [r7, #12]
 8019cb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8019cb2:	e005      	b.n	8019cc0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	791b      	ldrb	r3, [r3, #4]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d001      	beq.n	8019cc0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019cbc:	f7ff fc92 	bl	80195e4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019cc0:	2234      	movs	r2, #52	@ 0x34
 8019cc2:	2100      	movs	r1, #0
 8019cc4:	68f8      	ldr	r0, [r7, #12]
 8019cc6:	f005 f93f 	bl	801ef48 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8019cca:	f7ff fc39 	bl	8019540 <dhcp_inc_pcb_refcount>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d002      	beq.n	8019cda <dhcp_start+0xa2>
    return ERR_MEM;
 8019cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8019cd8:	e020      	b.n	8019d1c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	2201      	movs	r2, #1
 8019cde:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ce6:	f003 0304 	and.w	r3, r3, #4
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d105      	bne.n	8019cfa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8019cee:	2102      	movs	r1, #2
 8019cf0:	68f8      	ldr	r0, [r7, #12]
 8019cf2:	f000 fd06 	bl	801a702 <dhcp_set_state>
    return ERR_OK;
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	e010      	b.n	8019d1c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8019cfa:	6878      	ldr	r0, [r7, #4]
 8019cfc:	f000 f8f8 	bl	8019ef0 <dhcp_discover>
 8019d00:	4603      	mov	r3, r0
 8019d02:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019d04:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d005      	beq.n	8019d18 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f000 fc53 	bl	801a5b8 <dhcp_release_and_stop>
    return ERR_MEM;
 8019d12:	f04f 33ff 	mov.w	r3, #4294967295
 8019d16:	e001      	b.n	8019d1c <dhcp_start+0xe4>
  }
  return result;
 8019d18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	3710      	adds	r7, #16
 8019d20:	46bd      	mov	sp, r7
 8019d22:	bd80      	pop	{r7, pc}
 8019d24:	080249d0 	.word	0x080249d0
 8019d28:	08024ab4 	.word	0x08024ab4
 8019d2c:	08024a30 	.word	0x08024a30
 8019d30:	08024af8 	.word	0x08024af8

08019d34 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b084      	sub	sp, #16
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d40:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d025      	beq.n	8019d94 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	795b      	ldrb	r3, [r3, #5]
 8019d4c:	2b0a      	cmp	r3, #10
 8019d4e:	d008      	beq.n	8019d62 <dhcp_network_changed+0x2e>
 8019d50:	2b0a      	cmp	r3, #10
 8019d52:	dc0d      	bgt.n	8019d70 <dhcp_network_changed+0x3c>
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d01f      	beq.n	8019d98 <dhcp_network_changed+0x64>
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	db09      	blt.n	8019d70 <dhcp_network_changed+0x3c>
 8019d5c:	3b03      	subs	r3, #3
 8019d5e:	2b02      	cmp	r3, #2
 8019d60:	d806      	bhi.n	8019d70 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	2200      	movs	r2, #0
 8019d66:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f000 fb71 	bl	801a450 <dhcp_reboot>
      break;
 8019d6e:	e014      	b.n	8019d9a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	795b      	ldrb	r3, [r3, #5]
 8019d74:	2b0c      	cmp	r3, #12
 8019d76:	d906      	bls.n	8019d86 <dhcp_network_changed+0x52>
 8019d78:	4b09      	ldr	r3, [pc, #36]	@ (8019da0 <dhcp_network_changed+0x6c>)
 8019d7a:	f240 326d 	movw	r2, #877	@ 0x36d
 8019d7e:	4909      	ldr	r1, [pc, #36]	@ (8019da4 <dhcp_network_changed+0x70>)
 8019d80:	4809      	ldr	r0, [pc, #36]	@ (8019da8 <dhcp_network_changed+0x74>)
 8019d82:	f004 ff77 	bl	801ec74 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8019d8c:	6878      	ldr	r0, [r7, #4]
 8019d8e:	f000 f8af 	bl	8019ef0 <dhcp_discover>
      break;
 8019d92:	e002      	b.n	8019d9a <dhcp_network_changed+0x66>
    return;
 8019d94:	bf00      	nop
 8019d96:	e000      	b.n	8019d9a <dhcp_network_changed+0x66>
      break;
 8019d98:	bf00      	nop
  }
}
 8019d9a:	3710      	adds	r7, #16
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd80      	pop	{r7, pc}
 8019da0:	080249d0 	.word	0x080249d0
 8019da4:	08024b1c 	.word	0x08024b1c
 8019da8:	08024a30 	.word	0x08024a30

08019dac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b084      	sub	sp, #16
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
 8019db4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d107      	bne.n	8019dcc <dhcp_arp_reply+0x20>
 8019dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8019df8 <dhcp_arp_reply+0x4c>)
 8019dbe:	f240 328b 	movw	r2, #907	@ 0x38b
 8019dc2:	490e      	ldr	r1, [pc, #56]	@ (8019dfc <dhcp_arp_reply+0x50>)
 8019dc4:	480e      	ldr	r0, [pc, #56]	@ (8019e00 <dhcp_arp_reply+0x54>)
 8019dc6:	f004 ff55 	bl	801ec74 <iprintf>
 8019dca:	e012      	b.n	8019df2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019dd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d00c      	beq.n	8019df2 <dhcp_arp_reply+0x46>
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	795b      	ldrb	r3, [r3, #5]
 8019ddc:	2b08      	cmp	r3, #8
 8019dde:	d108      	bne.n	8019df2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	69db      	ldr	r3, [r3, #28]
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d102      	bne.n	8019df2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f000 f809 	bl	8019e04 <dhcp_decline>
    }
  }
}
 8019df2:	3710      	adds	r7, #16
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	080249d0 	.word	0x080249d0
 8019dfc:	08024ab4 	.word	0x08024ab4
 8019e00:	08024a30 	.word	0x08024a30

08019e04 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019e04:	b5b0      	push	{r4, r5, r7, lr}
 8019e06:	b08a      	sub	sp, #40	@ 0x28
 8019e08:	af02      	add	r7, sp, #8
 8019e0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e10:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019e12:	210c      	movs	r1, #12
 8019e14:	69b8      	ldr	r0, [r7, #24]
 8019e16:	f000 fc74 	bl	801a702 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8019e1a:	f107 030c 	add.w	r3, r7, #12
 8019e1e:	2204      	movs	r2, #4
 8019e20:	69b9      	ldr	r1, [r7, #24]
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f001 f906 	bl	801b034 <dhcp_create_msg>
 8019e28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d035      	beq.n	8019e9c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019e30:	697b      	ldr	r3, [r7, #20]
 8019e32:	685b      	ldr	r3, [r3, #4]
 8019e34:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019e36:	89b8      	ldrh	r0, [r7, #12]
 8019e38:	693b      	ldr	r3, [r7, #16]
 8019e3a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e3e:	2304      	movs	r3, #4
 8019e40:	2232      	movs	r2, #50	@ 0x32
 8019e42:	f000 fc79 	bl	801a738 <dhcp_option>
 8019e46:	4603      	mov	r3, r0
 8019e48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019e4a:	89bc      	ldrh	r4, [r7, #12]
 8019e4c:	693b      	ldr	r3, [r7, #16]
 8019e4e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	69db      	ldr	r3, [r3, #28]
 8019e56:	4618      	mov	r0, r3
 8019e58:	f7f6 fb47 	bl	80104ea <lwip_htonl>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	461a      	mov	r2, r3
 8019e60:	4629      	mov	r1, r5
 8019e62:	4620      	mov	r0, r4
 8019e64:	f000 fcf4 	bl	801a850 <dhcp_option_long>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019e6c:	89b8      	ldrh	r0, [r7, #12]
 8019e6e:	693b      	ldr	r3, [r7, #16]
 8019e70:	33f0      	adds	r3, #240	@ 0xf0
 8019e72:	697a      	ldr	r2, [r7, #20]
 8019e74:	4619      	mov	r1, r3
 8019e76:	f001 f9b3 	bl	801b1e0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019e7a:	4b19      	ldr	r3, [pc, #100]	@ (8019ee0 <dhcp_decline+0xdc>)
 8019e7c:	6818      	ldr	r0, [r3, #0]
 8019e7e:	4b19      	ldr	r3, [pc, #100]	@ (8019ee4 <dhcp_decline+0xe0>)
 8019e80:	9301      	str	r3, [sp, #4]
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	9300      	str	r3, [sp, #0]
 8019e86:	2343      	movs	r3, #67	@ 0x43
 8019e88:	4a17      	ldr	r2, [pc, #92]	@ (8019ee8 <dhcp_decline+0xe4>)
 8019e8a:	6979      	ldr	r1, [r7, #20]
 8019e8c:	f7ff f890 	bl	8018fb0 <udp_sendto_if_src>
 8019e90:	4603      	mov	r3, r0
 8019e92:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019e94:	6978      	ldr	r0, [r7, #20]
 8019e96:	f7f8 f835 	bl	8011f04 <pbuf_free>
 8019e9a:	e001      	b.n	8019ea0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019e9c:	23ff      	movs	r3, #255	@ 0xff
 8019e9e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019ea0:	69bb      	ldr	r3, [r7, #24]
 8019ea2:	799b      	ldrb	r3, [r3, #6]
 8019ea4:	2bff      	cmp	r3, #255	@ 0xff
 8019ea6:	d005      	beq.n	8019eb4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8019ea8:	69bb      	ldr	r3, [r7, #24]
 8019eaa:	799b      	ldrb	r3, [r3, #6]
 8019eac:	3301      	adds	r3, #1
 8019eae:	b2da      	uxtb	r2, r3
 8019eb0:	69bb      	ldr	r3, [r7, #24]
 8019eb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019eb4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019eb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019eba:	89fb      	ldrh	r3, [r7, #14]
 8019ebc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8019eec <dhcp_decline+0xe8>)
 8019ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8019ec6:	1152      	asrs	r2, r2, #5
 8019ec8:	17db      	asrs	r3, r3, #31
 8019eca:	1ad3      	subs	r3, r2, r3
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	69bb      	ldr	r3, [r7, #24]
 8019ed0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3720      	adds	r7, #32
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bdb0      	pop	{r4, r5, r7, pc}
 8019ede:	bf00      	nop
 8019ee0:	20013e48 	.word	0x20013e48
 8019ee4:	08071298 	.word	0x08071298
 8019ee8:	0807129c 	.word	0x0807129c
 8019eec:	10624dd3 	.word	0x10624dd3

08019ef0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b08a      	sub	sp, #40	@ 0x28
 8019ef4:	af02      	add	r7, sp, #8
 8019ef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019efc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8019efe:	2300      	movs	r3, #0
 8019f00:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019f02:	69bb      	ldr	r3, [r7, #24]
 8019f04:	2200      	movs	r2, #0
 8019f06:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8019f08:	2106      	movs	r1, #6
 8019f0a:	69b8      	ldr	r0, [r7, #24]
 8019f0c:	f000 fbf9 	bl	801a702 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019f10:	f107 0308 	add.w	r3, r7, #8
 8019f14:	2201      	movs	r2, #1
 8019f16:	69b9      	ldr	r1, [r7, #24]
 8019f18:	6878      	ldr	r0, [r7, #4]
 8019f1a:	f001 f88b 	bl	801b034 <dhcp_create_msg>
 8019f1e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8019f20:	693b      	ldr	r3, [r7, #16]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d04b      	beq.n	8019fbe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019f26:	693b      	ldr	r3, [r7, #16]
 8019f28:	685b      	ldr	r3, [r3, #4]
 8019f2a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019f2c:	8938      	ldrh	r0, [r7, #8]
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019f34:	2302      	movs	r3, #2
 8019f36:	2239      	movs	r2, #57	@ 0x39
 8019f38:	f000 fbfe 	bl	801a738 <dhcp_option>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019f40:	8938      	ldrh	r0, [r7, #8]
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	f000 fc4d 	bl	801a7ec <dhcp_option_short>
 8019f52:	4603      	mov	r3, r0
 8019f54:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019f56:	8938      	ldrh	r0, [r7, #8]
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019f5e:	2303      	movs	r3, #3
 8019f60:	2237      	movs	r2, #55	@ 0x37
 8019f62:	f000 fbe9 	bl	801a738 <dhcp_option>
 8019f66:	4603      	mov	r3, r0
 8019f68:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	77fb      	strb	r3, [r7, #31]
 8019f6e:	e00e      	b.n	8019f8e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019f70:	8938      	ldrh	r0, [r7, #8]
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019f78:	7ffb      	ldrb	r3, [r7, #31]
 8019f7a:	4a29      	ldr	r2, [pc, #164]	@ (801a020 <dhcp_discover+0x130>)
 8019f7c:	5cd3      	ldrb	r3, [r2, r3]
 8019f7e:	461a      	mov	r2, r3
 8019f80:	f000 fc0e 	bl	801a7a0 <dhcp_option_byte>
 8019f84:	4603      	mov	r3, r0
 8019f86:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019f88:	7ffb      	ldrb	r3, [r7, #31]
 8019f8a:	3301      	adds	r3, #1
 8019f8c:	77fb      	strb	r3, [r7, #31]
 8019f8e:	7ffb      	ldrb	r3, [r7, #31]
 8019f90:	2b02      	cmp	r3, #2
 8019f92:	d9ed      	bls.n	8019f70 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019f94:	8938      	ldrh	r0, [r7, #8]
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	33f0      	adds	r3, #240	@ 0xf0
 8019f9a:	693a      	ldr	r2, [r7, #16]
 8019f9c:	4619      	mov	r1, r3
 8019f9e:	f001 f91f 	bl	801b1e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019fa2:	4b20      	ldr	r3, [pc, #128]	@ (801a024 <dhcp_discover+0x134>)
 8019fa4:	6818      	ldr	r0, [r3, #0]
 8019fa6:	4b20      	ldr	r3, [pc, #128]	@ (801a028 <dhcp_discover+0x138>)
 8019fa8:	9301      	str	r3, [sp, #4]
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	9300      	str	r3, [sp, #0]
 8019fae:	2343      	movs	r3, #67	@ 0x43
 8019fb0:	4a1e      	ldr	r2, [pc, #120]	@ (801a02c <dhcp_discover+0x13c>)
 8019fb2:	6939      	ldr	r1, [r7, #16]
 8019fb4:	f7fe fffc 	bl	8018fb0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8019fb8:	6938      	ldr	r0, [r7, #16]
 8019fba:	f7f7 ffa3 	bl	8011f04 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8019fbe:	69bb      	ldr	r3, [r7, #24]
 8019fc0:	799b      	ldrb	r3, [r3, #6]
 8019fc2:	2bff      	cmp	r3, #255	@ 0xff
 8019fc4:	d005      	beq.n	8019fd2 <dhcp_discover+0xe2>
    dhcp->tries++;
 8019fc6:	69bb      	ldr	r3, [r7, #24]
 8019fc8:	799b      	ldrb	r3, [r3, #6]
 8019fca:	3301      	adds	r3, #1
 8019fcc:	b2da      	uxtb	r2, r3
 8019fce:	69bb      	ldr	r3, [r7, #24]
 8019fd0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019fd2:	69bb      	ldr	r3, [r7, #24]
 8019fd4:	799b      	ldrb	r3, [r3, #6]
 8019fd6:	2b05      	cmp	r3, #5
 8019fd8:	d80d      	bhi.n	8019ff6 <dhcp_discover+0x106>
 8019fda:	69bb      	ldr	r3, [r7, #24]
 8019fdc:	799b      	ldrb	r3, [r3, #6]
 8019fde:	461a      	mov	r2, r3
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	4093      	lsls	r3, r2
 8019fe4:	b29b      	uxth	r3, r3
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	0152      	lsls	r2, r2, #5
 8019fea:	1ad2      	subs	r2, r2, r3
 8019fec:	0092      	lsls	r2, r2, #2
 8019fee:	4413      	add	r3, r2
 8019ff0:	00db      	lsls	r3, r3, #3
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	e001      	b.n	8019ffa <dhcp_discover+0x10a>
 8019ff6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8019ffa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019ffc:	897b      	ldrh	r3, [r7, #10]
 8019ffe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801a002:	4a0b      	ldr	r2, [pc, #44]	@ (801a030 <dhcp_discover+0x140>)
 801a004:	fb82 1203 	smull	r1, r2, r2, r3
 801a008:	1152      	asrs	r2, r2, #5
 801a00a:	17db      	asrs	r3, r3, #31
 801a00c:	1ad3      	subs	r3, r2, r3
 801a00e:	b29a      	uxth	r2, r3
 801a010:	69bb      	ldr	r3, [r7, #24]
 801a012:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a018:	4618      	mov	r0, r3
 801a01a:	3720      	adds	r7, #32
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}
 801a020:	200000c8 	.word	0x200000c8
 801a024:	20013e48 	.word	0x20013e48
 801a028:	08071298 	.word	0x08071298
 801a02c:	0807129c 	.word	0x0807129c
 801a030:	10624dd3 	.word	0x10624dd3

0801a034 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b088      	sub	sp, #32
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d107      	bne.n	801a052 <dhcp_bind+0x1e>
 801a042:	4b64      	ldr	r3, [pc, #400]	@ (801a1d4 <dhcp_bind+0x1a0>)
 801a044:	f240 4215 	movw	r2, #1045	@ 0x415
 801a048:	4963      	ldr	r1, [pc, #396]	@ (801a1d8 <dhcp_bind+0x1a4>)
 801a04a:	4864      	ldr	r0, [pc, #400]	@ (801a1dc <dhcp_bind+0x1a8>)
 801a04c:	f004 fe12 	bl	801ec74 <iprintf>
 801a050:	e0bc      	b.n	801a1cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a056:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d107      	bne.n	801a06e <dhcp_bind+0x3a>
 801a05e:	4b5d      	ldr	r3, [pc, #372]	@ (801a1d4 <dhcp_bind+0x1a0>)
 801a060:	f240 4217 	movw	r2, #1047	@ 0x417
 801a064:	495e      	ldr	r1, [pc, #376]	@ (801a1e0 <dhcp_bind+0x1ac>)
 801a066:	485d      	ldr	r0, [pc, #372]	@ (801a1dc <dhcp_bind+0x1a8>)
 801a068:	f004 fe04 	bl	801ec74 <iprintf>
 801a06c:	e0ae      	b.n	801a1cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801a06e:	69fb      	ldr	r3, [r7, #28]
 801a070:	2200      	movs	r2, #0
 801a072:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a07c:	d019      	beq.n	801a0b2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a07e:	69fb      	ldr	r3, [r7, #28]
 801a080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a082:	331e      	adds	r3, #30
 801a084:	4a57      	ldr	r2, [pc, #348]	@ (801a1e4 <dhcp_bind+0x1b0>)
 801a086:	fba2 2303 	umull	r2, r3, r2, r3
 801a08a:	095b      	lsrs	r3, r3, #5
 801a08c:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801a08e:	69bb      	ldr	r3, [r7, #24]
 801a090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a094:	d302      	bcc.n	801a09c <dhcp_bind+0x68>
      timeout = 0xffff;
 801a096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a09a:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801a09c:	69bb      	ldr	r3, [r7, #24]
 801a09e:	b29a      	uxth	r2, r3
 801a0a0:	69fb      	ldr	r3, [r7, #28]
 801a0a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801a0a4:	69fb      	ldr	r3, [r7, #28]
 801a0a6:	8a9b      	ldrh	r3, [r3, #20]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d102      	bne.n	801a0b2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801a0ac:	69fb      	ldr	r3, [r7, #28]
 801a0ae:	2201      	movs	r2, #1
 801a0b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801a0b2:	69fb      	ldr	r3, [r7, #28]
 801a0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0ba:	d01d      	beq.n	801a0f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0c0:	331e      	adds	r3, #30
 801a0c2:	4a48      	ldr	r2, [pc, #288]	@ (801a1e4 <dhcp_bind+0x1b0>)
 801a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0c8:	095b      	lsrs	r3, r3, #5
 801a0ca:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801a0cc:	69bb      	ldr	r3, [r7, #24]
 801a0ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a0d2:	d302      	bcc.n	801a0da <dhcp_bind+0xa6>
      timeout = 0xffff;
 801a0d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a0d8:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801a0da:	69bb      	ldr	r3, [r7, #24]
 801a0dc:	b29a      	uxth	r2, r3
 801a0de:	69fb      	ldr	r3, [r7, #28]
 801a0e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801a0e2:	69fb      	ldr	r3, [r7, #28]
 801a0e4:	895b      	ldrh	r3, [r3, #10]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d102      	bne.n	801a0f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801a0ea:	69fb      	ldr	r3, [r7, #28]
 801a0ec:	2201      	movs	r2, #1
 801a0ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801a0f0:	69fb      	ldr	r3, [r7, #28]
 801a0f2:	895a      	ldrh	r2, [r3, #10]
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801a0f8:	69fb      	ldr	r3, [r7, #28]
 801a0fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a100:	d01d      	beq.n	801a13e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a102:	69fb      	ldr	r3, [r7, #28]
 801a104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a106:	331e      	adds	r3, #30
 801a108:	4a36      	ldr	r2, [pc, #216]	@ (801a1e4 <dhcp_bind+0x1b0>)
 801a10a:	fba2 2303 	umull	r2, r3, r2, r3
 801a10e:	095b      	lsrs	r3, r3, #5
 801a110:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801a112:	69bb      	ldr	r3, [r7, #24]
 801a114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a118:	d302      	bcc.n	801a120 <dhcp_bind+0xec>
      timeout = 0xffff;
 801a11a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a11e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801a120:	69bb      	ldr	r3, [r7, #24]
 801a122:	b29a      	uxth	r2, r3
 801a124:	69fb      	ldr	r3, [r7, #28]
 801a126:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801a128:	69fb      	ldr	r3, [r7, #28]
 801a12a:	899b      	ldrh	r3, [r3, #12]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d102      	bne.n	801a136 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801a130:	69fb      	ldr	r3, [r7, #28]
 801a132:	2201      	movs	r2, #1
 801a134:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801a136:	69fb      	ldr	r3, [r7, #28]
 801a138:	899a      	ldrh	r2, [r3, #12]
 801a13a:	69fb      	ldr	r3, [r7, #28]
 801a13c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801a13e:	69fb      	ldr	r3, [r7, #28]
 801a140:	895a      	ldrh	r2, [r3, #10]
 801a142:	69fb      	ldr	r3, [r7, #28]
 801a144:	899b      	ldrh	r3, [r3, #12]
 801a146:	429a      	cmp	r2, r3
 801a148:	d306      	bcc.n	801a158 <dhcp_bind+0x124>
 801a14a:	69fb      	ldr	r3, [r7, #28]
 801a14c:	899b      	ldrh	r3, [r3, #12]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d002      	beq.n	801a158 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801a152:	69fb      	ldr	r3, [r7, #28]
 801a154:	2200      	movs	r2, #0
 801a156:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801a158:	69fb      	ldr	r3, [r7, #28]
 801a15a:	79db      	ldrb	r3, [r3, #7]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d003      	beq.n	801a168 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801a160:	69fb      	ldr	r3, [r7, #28]
 801a162:	6a1b      	ldr	r3, [r3, #32]
 801a164:	613b      	str	r3, [r7, #16]
 801a166:	e014      	b.n	801a192 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801a168:	69fb      	ldr	r3, [r7, #28]
 801a16a:	331c      	adds	r3, #28
 801a16c:	781b      	ldrb	r3, [r3, #0]
 801a16e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801a170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a174:	2b00      	cmp	r3, #0
 801a176:	db02      	blt.n	801a17e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801a178:	23ff      	movs	r3, #255	@ 0xff
 801a17a:	613b      	str	r3, [r7, #16]
 801a17c:	e009      	b.n	801a192 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801a17e:	7dfb      	ldrb	r3, [r7, #23]
 801a180:	2bbf      	cmp	r3, #191	@ 0xbf
 801a182:	d903      	bls.n	801a18c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801a184:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801a188:	613b      	str	r3, [r7, #16]
 801a18a:	e002      	b.n	801a192 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801a18c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a190:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801a192:	69fb      	ldr	r3, [r7, #28]
 801a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a196:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d108      	bne.n	801a1b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801a19e:	69fb      	ldr	r3, [r7, #28]
 801a1a0:	69da      	ldr	r2, [r3, #28]
 801a1a2:	693b      	ldr	r3, [r7, #16]
 801a1a4:	4013      	ands	r3, r2
 801a1a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a1ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801a1b0:	210a      	movs	r1, #10
 801a1b2:	69f8      	ldr	r0, [r7, #28]
 801a1b4:	f000 faa5 	bl	801a702 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801a1b8:	69fb      	ldr	r3, [r7, #28]
 801a1ba:	f103 011c 	add.w	r1, r3, #28
 801a1be:	f107 030c 	add.w	r3, r7, #12
 801a1c2:	f107 0210 	add.w	r2, r7, #16
 801a1c6:	6878      	ldr	r0, [r7, #4]
 801a1c8:	f7f7 f99c 	bl	8011504 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801a1cc:	3720      	adds	r7, #32
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	bd80      	pop	{r7, pc}
 801a1d2:	bf00      	nop
 801a1d4:	080249d0 	.word	0x080249d0
 801a1d8:	08024b30 	.word	0x08024b30
 801a1dc:	08024a30 	.word	0x08024a30
 801a1e0:	08024b4c 	.word	0x08024b4c
 801a1e4:	88888889 	.word	0x88888889

0801a1e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b08a      	sub	sp, #40	@ 0x28
 801a1ec:	af02      	add	r7, sp, #8
 801a1ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1f4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801a1f6:	2105      	movs	r1, #5
 801a1f8:	69b8      	ldr	r0, [r7, #24]
 801a1fa:	f000 fa82 	bl	801a702 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a1fe:	f107 030c 	add.w	r3, r7, #12
 801a202:	2203      	movs	r2, #3
 801a204:	69b9      	ldr	r1, [r7, #24]
 801a206:	6878      	ldr	r0, [r7, #4]
 801a208:	f000 ff14 	bl	801b034 <dhcp_create_msg>
 801a20c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a20e:	697b      	ldr	r3, [r7, #20]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d04e      	beq.n	801a2b2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a214:	697b      	ldr	r3, [r7, #20]
 801a216:	685b      	ldr	r3, [r3, #4]
 801a218:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a21a:	89b8      	ldrh	r0, [r7, #12]
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a222:	2302      	movs	r3, #2
 801a224:	2239      	movs	r2, #57	@ 0x39
 801a226:	f000 fa87 	bl	801a738 <dhcp_option>
 801a22a:	4603      	mov	r3, r0
 801a22c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a22e:	89b8      	ldrh	r0, [r7, #12]
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a23a:	461a      	mov	r2, r3
 801a23c:	f000 fad6 	bl	801a7ec <dhcp_option_short>
 801a240:	4603      	mov	r3, r0
 801a242:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a244:	89b8      	ldrh	r0, [r7, #12]
 801a246:	693b      	ldr	r3, [r7, #16]
 801a248:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a24c:	2303      	movs	r3, #3
 801a24e:	2237      	movs	r2, #55	@ 0x37
 801a250:	f000 fa72 	bl	801a738 <dhcp_option>
 801a254:	4603      	mov	r3, r0
 801a256:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a258:	2300      	movs	r3, #0
 801a25a:	77bb      	strb	r3, [r7, #30]
 801a25c:	e00e      	b.n	801a27c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a25e:	89b8      	ldrh	r0, [r7, #12]
 801a260:	693b      	ldr	r3, [r7, #16]
 801a262:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a266:	7fbb      	ldrb	r3, [r7, #30]
 801a268:	4a29      	ldr	r2, [pc, #164]	@ (801a310 <dhcp_renew+0x128>)
 801a26a:	5cd3      	ldrb	r3, [r2, r3]
 801a26c:	461a      	mov	r2, r3
 801a26e:	f000 fa97 	bl	801a7a0 <dhcp_option_byte>
 801a272:	4603      	mov	r3, r0
 801a274:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a276:	7fbb      	ldrb	r3, [r7, #30]
 801a278:	3301      	adds	r3, #1
 801a27a:	77bb      	strb	r3, [r7, #30]
 801a27c:	7fbb      	ldrb	r3, [r7, #30]
 801a27e:	2b02      	cmp	r3, #2
 801a280:	d9ed      	bls.n	801a25e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a282:	89b8      	ldrh	r0, [r7, #12]
 801a284:	693b      	ldr	r3, [r7, #16]
 801a286:	33f0      	adds	r3, #240	@ 0xf0
 801a288:	697a      	ldr	r2, [r7, #20]
 801a28a:	4619      	mov	r1, r3
 801a28c:	f000 ffa8 	bl	801b1e0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a290:	4b20      	ldr	r3, [pc, #128]	@ (801a314 <dhcp_renew+0x12c>)
 801a292:	6818      	ldr	r0, [r3, #0]
 801a294:	69bb      	ldr	r3, [r7, #24]
 801a296:	f103 0218 	add.w	r2, r3, #24
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	9300      	str	r3, [sp, #0]
 801a29e:	2343      	movs	r3, #67	@ 0x43
 801a2a0:	6979      	ldr	r1, [r7, #20]
 801a2a2:	f7fe fe11 	bl	8018ec8 <udp_sendto_if>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a2aa:	6978      	ldr	r0, [r7, #20]
 801a2ac:	f7f7 fe2a 	bl	8011f04 <pbuf_free>
 801a2b0:	e001      	b.n	801a2b6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a2b2:	23ff      	movs	r3, #255	@ 0xff
 801a2b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a2b6:	69bb      	ldr	r3, [r7, #24]
 801a2b8:	799b      	ldrb	r3, [r3, #6]
 801a2ba:	2bff      	cmp	r3, #255	@ 0xff
 801a2bc:	d005      	beq.n	801a2ca <dhcp_renew+0xe2>
    dhcp->tries++;
 801a2be:	69bb      	ldr	r3, [r7, #24]
 801a2c0:	799b      	ldrb	r3, [r3, #6]
 801a2c2:	3301      	adds	r3, #1
 801a2c4:	b2da      	uxtb	r2, r3
 801a2c6:	69bb      	ldr	r3, [r7, #24]
 801a2c8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801a2ca:	69bb      	ldr	r3, [r7, #24]
 801a2cc:	799b      	ldrb	r3, [r3, #6]
 801a2ce:	2b09      	cmp	r3, #9
 801a2d0:	d809      	bhi.n	801a2e6 <dhcp_renew+0xfe>
 801a2d2:	69bb      	ldr	r3, [r7, #24]
 801a2d4:	799b      	ldrb	r3, [r3, #6]
 801a2d6:	461a      	mov	r2, r3
 801a2d8:	0152      	lsls	r2, r2, #5
 801a2da:	1ad2      	subs	r2, r2, r3
 801a2dc:	0092      	lsls	r2, r2, #2
 801a2de:	4413      	add	r3, r2
 801a2e0:	011b      	lsls	r3, r3, #4
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	e001      	b.n	801a2ea <dhcp_renew+0x102>
 801a2e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801a2ea:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a2ec:	89fb      	ldrh	r3, [r7, #14]
 801a2ee:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801a2f2:	4a09      	ldr	r2, [pc, #36]	@ (801a318 <dhcp_renew+0x130>)
 801a2f4:	fb82 1203 	smull	r1, r2, r2, r3
 801a2f8:	1152      	asrs	r2, r2, #5
 801a2fa:	17db      	asrs	r3, r3, #31
 801a2fc:	1ad3      	subs	r3, r2, r3
 801a2fe:	b29a      	uxth	r2, r3
 801a300:	69bb      	ldr	r3, [r7, #24]
 801a302:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a304:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3720      	adds	r7, #32
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	200000c8 	.word	0x200000c8
 801a314:	20013e48 	.word	0x20013e48
 801a318:	10624dd3 	.word	0x10624dd3

0801a31c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b08a      	sub	sp, #40	@ 0x28
 801a320:	af02      	add	r7, sp, #8
 801a322:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a328:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801a32a:	2104      	movs	r1, #4
 801a32c:	69b8      	ldr	r0, [r7, #24]
 801a32e:	f000 f9e8 	bl	801a702 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a332:	f107 030c 	add.w	r3, r7, #12
 801a336:	2203      	movs	r2, #3
 801a338:	69b9      	ldr	r1, [r7, #24]
 801a33a:	6878      	ldr	r0, [r7, #4]
 801a33c:	f000 fe7a 	bl	801b034 <dhcp_create_msg>
 801a340:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a342:	697b      	ldr	r3, [r7, #20]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d04c      	beq.n	801a3e2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a348:	697b      	ldr	r3, [r7, #20]
 801a34a:	685b      	ldr	r3, [r3, #4]
 801a34c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a34e:	89b8      	ldrh	r0, [r7, #12]
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a356:	2302      	movs	r3, #2
 801a358:	2239      	movs	r2, #57	@ 0x39
 801a35a:	f000 f9ed 	bl	801a738 <dhcp_option>
 801a35e:	4603      	mov	r3, r0
 801a360:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a362:	89b8      	ldrh	r0, [r7, #12]
 801a364:	693b      	ldr	r3, [r7, #16]
 801a366:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a36e:	461a      	mov	r2, r3
 801a370:	f000 fa3c 	bl	801a7ec <dhcp_option_short>
 801a374:	4603      	mov	r3, r0
 801a376:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a378:	89b8      	ldrh	r0, [r7, #12]
 801a37a:	693b      	ldr	r3, [r7, #16]
 801a37c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a380:	2303      	movs	r3, #3
 801a382:	2237      	movs	r2, #55	@ 0x37
 801a384:	f000 f9d8 	bl	801a738 <dhcp_option>
 801a388:	4603      	mov	r3, r0
 801a38a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a38c:	2300      	movs	r3, #0
 801a38e:	77bb      	strb	r3, [r7, #30]
 801a390:	e00e      	b.n	801a3b0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a392:	89b8      	ldrh	r0, [r7, #12]
 801a394:	693b      	ldr	r3, [r7, #16]
 801a396:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a39a:	7fbb      	ldrb	r3, [r7, #30]
 801a39c:	4a28      	ldr	r2, [pc, #160]	@ (801a440 <dhcp_rebind+0x124>)
 801a39e:	5cd3      	ldrb	r3, [r2, r3]
 801a3a0:	461a      	mov	r2, r3
 801a3a2:	f000 f9fd 	bl	801a7a0 <dhcp_option_byte>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a3aa:	7fbb      	ldrb	r3, [r7, #30]
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	77bb      	strb	r3, [r7, #30]
 801a3b0:	7fbb      	ldrb	r3, [r7, #30]
 801a3b2:	2b02      	cmp	r3, #2
 801a3b4:	d9ed      	bls.n	801a392 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a3b6:	89b8      	ldrh	r0, [r7, #12]
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	33f0      	adds	r3, #240	@ 0xf0
 801a3bc:	697a      	ldr	r2, [r7, #20]
 801a3be:	4619      	mov	r1, r3
 801a3c0:	f000 ff0e 	bl	801b1e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a3c4:	4b1f      	ldr	r3, [pc, #124]	@ (801a444 <dhcp_rebind+0x128>)
 801a3c6:	6818      	ldr	r0, [r3, #0]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	9300      	str	r3, [sp, #0]
 801a3cc:	2343      	movs	r3, #67	@ 0x43
 801a3ce:	4a1e      	ldr	r2, [pc, #120]	@ (801a448 <dhcp_rebind+0x12c>)
 801a3d0:	6979      	ldr	r1, [r7, #20]
 801a3d2:	f7fe fd79 	bl	8018ec8 <udp_sendto_if>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a3da:	6978      	ldr	r0, [r7, #20]
 801a3dc:	f7f7 fd92 	bl	8011f04 <pbuf_free>
 801a3e0:	e001      	b.n	801a3e6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a3e2:	23ff      	movs	r3, #255	@ 0xff
 801a3e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a3e6:	69bb      	ldr	r3, [r7, #24]
 801a3e8:	799b      	ldrb	r3, [r3, #6]
 801a3ea:	2bff      	cmp	r3, #255	@ 0xff
 801a3ec:	d005      	beq.n	801a3fa <dhcp_rebind+0xde>
    dhcp->tries++;
 801a3ee:	69bb      	ldr	r3, [r7, #24]
 801a3f0:	799b      	ldrb	r3, [r3, #6]
 801a3f2:	3301      	adds	r3, #1
 801a3f4:	b2da      	uxtb	r2, r3
 801a3f6:	69bb      	ldr	r3, [r7, #24]
 801a3f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a3fa:	69bb      	ldr	r3, [r7, #24]
 801a3fc:	799b      	ldrb	r3, [r3, #6]
 801a3fe:	2b09      	cmp	r3, #9
 801a400:	d809      	bhi.n	801a416 <dhcp_rebind+0xfa>
 801a402:	69bb      	ldr	r3, [r7, #24]
 801a404:	799b      	ldrb	r3, [r3, #6]
 801a406:	461a      	mov	r2, r3
 801a408:	0152      	lsls	r2, r2, #5
 801a40a:	1ad2      	subs	r2, r2, r3
 801a40c:	0092      	lsls	r2, r2, #2
 801a40e:	4413      	add	r3, r2
 801a410:	00db      	lsls	r3, r3, #3
 801a412:	b29b      	uxth	r3, r3
 801a414:	e001      	b.n	801a41a <dhcp_rebind+0xfe>
 801a416:	f242 7310 	movw	r3, #10000	@ 0x2710
 801a41a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a41c:	89fb      	ldrh	r3, [r7, #14]
 801a41e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801a422:	4a0a      	ldr	r2, [pc, #40]	@ (801a44c <dhcp_rebind+0x130>)
 801a424:	fb82 1203 	smull	r1, r2, r2, r3
 801a428:	1152      	asrs	r2, r2, #5
 801a42a:	17db      	asrs	r3, r3, #31
 801a42c:	1ad3      	subs	r3, r2, r3
 801a42e:	b29a      	uxth	r2, r3
 801a430:	69bb      	ldr	r3, [r7, #24]
 801a432:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a434:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a438:	4618      	mov	r0, r3
 801a43a:	3720      	adds	r7, #32
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd80      	pop	{r7, pc}
 801a440:	200000c8 	.word	0x200000c8
 801a444:	20013e48 	.word	0x20013e48
 801a448:	0807129c 	.word	0x0807129c
 801a44c:	10624dd3 	.word	0x10624dd3

0801a450 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801a450:	b5b0      	push	{r4, r5, r7, lr}
 801a452:	b08a      	sub	sp, #40	@ 0x28
 801a454:	af02      	add	r7, sp, #8
 801a456:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a45c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801a45e:	2103      	movs	r1, #3
 801a460:	69b8      	ldr	r0, [r7, #24]
 801a462:	f000 f94e 	bl	801a702 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a466:	f107 030c 	add.w	r3, r7, #12
 801a46a:	2203      	movs	r2, #3
 801a46c:	69b9      	ldr	r1, [r7, #24]
 801a46e:	6878      	ldr	r0, [r7, #4]
 801a470:	f000 fde0 	bl	801b034 <dhcp_create_msg>
 801a474:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a476:	697b      	ldr	r3, [r7, #20]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d066      	beq.n	801a54a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a482:	89b8      	ldrh	r0, [r7, #12]
 801a484:	693b      	ldr	r3, [r7, #16]
 801a486:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a48a:	2302      	movs	r3, #2
 801a48c:	2239      	movs	r2, #57	@ 0x39
 801a48e:	f000 f953 	bl	801a738 <dhcp_option>
 801a492:	4603      	mov	r3, r0
 801a494:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801a496:	89b8      	ldrh	r0, [r7, #12]
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	33f0      	adds	r3, #240	@ 0xf0
 801a49c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801a4a0:	4619      	mov	r1, r3
 801a4a2:	f000 f9a3 	bl	801a7ec <dhcp_option_short>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a4aa:	89b8      	ldrh	r0, [r7, #12]
 801a4ac:	693b      	ldr	r3, [r7, #16]
 801a4ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a4b2:	2304      	movs	r3, #4
 801a4b4:	2232      	movs	r2, #50	@ 0x32
 801a4b6:	f000 f93f 	bl	801a738 <dhcp_option>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a4be:	89bc      	ldrh	r4, [r7, #12]
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801a4c6:	69bb      	ldr	r3, [r7, #24]
 801a4c8:	69db      	ldr	r3, [r3, #28]
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f7f6 f80d 	bl	80104ea <lwip_htonl>
 801a4d0:	4603      	mov	r3, r0
 801a4d2:	461a      	mov	r2, r3
 801a4d4:	4629      	mov	r1, r5
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	f000 f9ba 	bl	801a850 <dhcp_option_long>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a4e0:	89b8      	ldrh	r0, [r7, #12]
 801a4e2:	693b      	ldr	r3, [r7, #16]
 801a4e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a4e8:	2303      	movs	r3, #3
 801a4ea:	2237      	movs	r2, #55	@ 0x37
 801a4ec:	f000 f924 	bl	801a738 <dhcp_option>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	77bb      	strb	r3, [r7, #30]
 801a4f8:	e00e      	b.n	801a518 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a4fa:	89b8      	ldrh	r0, [r7, #12]
 801a4fc:	693b      	ldr	r3, [r7, #16]
 801a4fe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a502:	7fbb      	ldrb	r3, [r7, #30]
 801a504:	4a28      	ldr	r2, [pc, #160]	@ (801a5a8 <dhcp_reboot+0x158>)
 801a506:	5cd3      	ldrb	r3, [r2, r3]
 801a508:	461a      	mov	r2, r3
 801a50a:	f000 f949 	bl	801a7a0 <dhcp_option_byte>
 801a50e:	4603      	mov	r3, r0
 801a510:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a512:	7fbb      	ldrb	r3, [r7, #30]
 801a514:	3301      	adds	r3, #1
 801a516:	77bb      	strb	r3, [r7, #30]
 801a518:	7fbb      	ldrb	r3, [r7, #30]
 801a51a:	2b02      	cmp	r3, #2
 801a51c:	d9ed      	bls.n	801a4fa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a51e:	89b8      	ldrh	r0, [r7, #12]
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	33f0      	adds	r3, #240	@ 0xf0
 801a524:	697a      	ldr	r2, [r7, #20]
 801a526:	4619      	mov	r1, r3
 801a528:	f000 fe5a 	bl	801b1e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a52c:	4b1f      	ldr	r3, [pc, #124]	@ (801a5ac <dhcp_reboot+0x15c>)
 801a52e:	6818      	ldr	r0, [r3, #0]
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	9300      	str	r3, [sp, #0]
 801a534:	2343      	movs	r3, #67	@ 0x43
 801a536:	4a1e      	ldr	r2, [pc, #120]	@ (801a5b0 <dhcp_reboot+0x160>)
 801a538:	6979      	ldr	r1, [r7, #20]
 801a53a:	f7fe fcc5 	bl	8018ec8 <udp_sendto_if>
 801a53e:	4603      	mov	r3, r0
 801a540:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a542:	6978      	ldr	r0, [r7, #20]
 801a544:	f7f7 fcde 	bl	8011f04 <pbuf_free>
 801a548:	e001      	b.n	801a54e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a54a:	23ff      	movs	r3, #255	@ 0xff
 801a54c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a54e:	69bb      	ldr	r3, [r7, #24]
 801a550:	799b      	ldrb	r3, [r3, #6]
 801a552:	2bff      	cmp	r3, #255	@ 0xff
 801a554:	d005      	beq.n	801a562 <dhcp_reboot+0x112>
    dhcp->tries++;
 801a556:	69bb      	ldr	r3, [r7, #24]
 801a558:	799b      	ldrb	r3, [r3, #6]
 801a55a:	3301      	adds	r3, #1
 801a55c:	b2da      	uxtb	r2, r3
 801a55e:	69bb      	ldr	r3, [r7, #24]
 801a560:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a562:	69bb      	ldr	r3, [r7, #24]
 801a564:	799b      	ldrb	r3, [r3, #6]
 801a566:	2b09      	cmp	r3, #9
 801a568:	d809      	bhi.n	801a57e <dhcp_reboot+0x12e>
 801a56a:	69bb      	ldr	r3, [r7, #24]
 801a56c:	799b      	ldrb	r3, [r3, #6]
 801a56e:	461a      	mov	r2, r3
 801a570:	0152      	lsls	r2, r2, #5
 801a572:	1ad2      	subs	r2, r2, r3
 801a574:	0092      	lsls	r2, r2, #2
 801a576:	4413      	add	r3, r2
 801a578:	00db      	lsls	r3, r3, #3
 801a57a:	b29b      	uxth	r3, r3
 801a57c:	e001      	b.n	801a582 <dhcp_reboot+0x132>
 801a57e:	f242 7310 	movw	r3, #10000	@ 0x2710
 801a582:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a584:	89fb      	ldrh	r3, [r7, #14]
 801a586:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801a58a:	4a0a      	ldr	r2, [pc, #40]	@ (801a5b4 <dhcp_reboot+0x164>)
 801a58c:	fb82 1203 	smull	r1, r2, r2, r3
 801a590:	1152      	asrs	r2, r2, #5
 801a592:	17db      	asrs	r3, r3, #31
 801a594:	1ad3      	subs	r3, r2, r3
 801a596:	b29a      	uxth	r2, r3
 801a598:	69bb      	ldr	r3, [r7, #24]
 801a59a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a59c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3720      	adds	r7, #32
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bdb0      	pop	{r4, r5, r7, pc}
 801a5a8:	200000c8 	.word	0x200000c8
 801a5ac:	20013e48 	.word	0x20013e48
 801a5b0:	0807129c 	.word	0x0807129c
 801a5b4:	10624dd3 	.word	0x10624dd3

0801a5b8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801a5b8:	b5b0      	push	{r4, r5, r7, lr}
 801a5ba:	b08a      	sub	sp, #40	@ 0x28
 801a5bc:	af02      	add	r7, sp, #8
 801a5be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801a5c6:	69fb      	ldr	r3, [r7, #28]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	f000 8084 	beq.w	801a6d6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801a5ce:	69fb      	ldr	r3, [r7, #28]
 801a5d0:	795b      	ldrb	r3, [r3, #5]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	f000 8081 	beq.w	801a6da <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	699b      	ldr	r3, [r3, #24]
 801a5dc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801a5e4:	69fb      	ldr	r3, [r7, #28]
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a5ea:	69fb      	ldr	r3, [r7, #28]
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a5f0:	69fb      	ldr	r3, [r7, #28]
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801a5f6:	69fb      	ldr	r3, [r7, #28]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	631a      	str	r2, [r3, #48]	@ 0x30
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a600:	69fb      	ldr	r3, [r7, #28]
 801a602:	62da      	str	r2, [r3, #44]	@ 0x2c
 801a604:	69fb      	ldr	r3, [r7, #28]
 801a606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a608:	69fb      	ldr	r3, [r7, #28]
 801a60a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	2200      	movs	r2, #0
 801a610:	829a      	strh	r2, [r3, #20]
 801a612:	69fb      	ldr	r3, [r7, #28]
 801a614:	8a9a      	ldrh	r2, [r3, #20]
 801a616:	69fb      	ldr	r3, [r7, #28]
 801a618:	825a      	strh	r2, [r3, #18]
 801a61a:	69fb      	ldr	r3, [r7, #28]
 801a61c:	8a5a      	ldrh	r2, [r3, #18]
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	821a      	strh	r2, [r3, #16]
 801a622:	69fb      	ldr	r3, [r7, #28]
 801a624:	8a1a      	ldrh	r2, [r3, #16]
 801a626:	69fb      	ldr	r3, [r7, #28]
 801a628:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f000 fe06 	bl	801b23c <dhcp_supplied_address>
 801a630:	4603      	mov	r3, r0
 801a632:	2b00      	cmp	r3, #0
 801a634:	d03b      	beq.n	801a6ae <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801a636:	f107 030e 	add.w	r3, r7, #14
 801a63a:	2207      	movs	r2, #7
 801a63c:	69f9      	ldr	r1, [r7, #28]
 801a63e:	6878      	ldr	r0, [r7, #4]
 801a640:	f000 fcf8 	bl	801b034 <dhcp_create_msg>
 801a644:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801a646:	69bb      	ldr	r3, [r7, #24]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d030      	beq.n	801a6ae <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a64c:	69bb      	ldr	r3, [r7, #24]
 801a64e:	685b      	ldr	r3, [r3, #4]
 801a650:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a652:	89f8      	ldrh	r0, [r7, #14]
 801a654:	697b      	ldr	r3, [r7, #20]
 801a656:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a65a:	2304      	movs	r3, #4
 801a65c:	2236      	movs	r2, #54	@ 0x36
 801a65e:	f000 f86b 	bl	801a738 <dhcp_option>
 801a662:	4603      	mov	r3, r0
 801a664:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801a666:	89fc      	ldrh	r4, [r7, #14]
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801a66e:	693b      	ldr	r3, [r7, #16]
 801a670:	4618      	mov	r0, r3
 801a672:	f7f5 ff3a 	bl	80104ea <lwip_htonl>
 801a676:	4603      	mov	r3, r0
 801a678:	461a      	mov	r2, r3
 801a67a:	4629      	mov	r1, r5
 801a67c:	4620      	mov	r0, r4
 801a67e:	f000 f8e7 	bl	801a850 <dhcp_option_long>
 801a682:	4603      	mov	r3, r0
 801a684:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a686:	89f8      	ldrh	r0, [r7, #14]
 801a688:	697b      	ldr	r3, [r7, #20]
 801a68a:	33f0      	adds	r3, #240	@ 0xf0
 801a68c:	69ba      	ldr	r2, [r7, #24]
 801a68e:	4619      	mov	r1, r3
 801a690:	f000 fda6 	bl	801b1e0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a694:	4b13      	ldr	r3, [pc, #76]	@ (801a6e4 <dhcp_release_and_stop+0x12c>)
 801a696:	6818      	ldr	r0, [r3, #0]
 801a698:	f107 0210 	add.w	r2, r7, #16
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	9300      	str	r3, [sp, #0]
 801a6a0:	2343      	movs	r3, #67	@ 0x43
 801a6a2:	69b9      	ldr	r1, [r7, #24]
 801a6a4:	f7fe fc10 	bl	8018ec8 <udp_sendto_if>
      pbuf_free(p_out);
 801a6a8:	69b8      	ldr	r0, [r7, #24]
 801a6aa:	f7f7 fc2b 	bl	8011f04 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a6ae:	4b0e      	ldr	r3, [pc, #56]	@ (801a6e8 <dhcp_release_and_stop+0x130>)
 801a6b0:	4a0d      	ldr	r2, [pc, #52]	@ (801a6e8 <dhcp_release_and_stop+0x130>)
 801a6b2:	490d      	ldr	r1, [pc, #52]	@ (801a6e8 <dhcp_release_and_stop+0x130>)
 801a6b4:	6878      	ldr	r0, [r7, #4]
 801a6b6:	f7f6 ff25 	bl	8011504 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801a6ba:	2100      	movs	r1, #0
 801a6bc:	69f8      	ldr	r0, [r7, #28]
 801a6be:	f000 f820 	bl	801a702 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801a6c2:	69fb      	ldr	r3, [r7, #28]
 801a6c4:	791b      	ldrb	r3, [r3, #4]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d008      	beq.n	801a6dc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a6ca:	f7fe ff8b 	bl	80195e4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801a6ce:	69fb      	ldr	r3, [r7, #28]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	711a      	strb	r2, [r3, #4]
 801a6d4:	e002      	b.n	801a6dc <dhcp_release_and_stop+0x124>
    return;
 801a6d6:	bf00      	nop
 801a6d8:	e000      	b.n	801a6dc <dhcp_release_and_stop+0x124>
    return;
 801a6da:	bf00      	nop
  }
}
 801a6dc:	3720      	adds	r7, #32
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bdb0      	pop	{r4, r5, r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	20013e48 	.word	0x20013e48
 801a6e8:	08071298 	.word	0x08071298

0801a6ec <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 801a6f4:	6878      	ldr	r0, [r7, #4]
 801a6f6:	f7ff ff5f 	bl	801a5b8 <dhcp_release_and_stop>
}
 801a6fa:	bf00      	nop
 801a6fc:	3708      	adds	r7, #8
 801a6fe:	46bd      	mov	sp, r7
 801a700:	bd80      	pop	{r7, pc}

0801a702 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801a702:	b480      	push	{r7}
 801a704:	b083      	sub	sp, #12
 801a706:	af00      	add	r7, sp, #0
 801a708:	6078      	str	r0, [r7, #4]
 801a70a:	460b      	mov	r3, r1
 801a70c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	795b      	ldrb	r3, [r3, #5]
 801a712:	78fa      	ldrb	r2, [r7, #3]
 801a714:	429a      	cmp	r2, r3
 801a716:	d008      	beq.n	801a72a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	78fa      	ldrb	r2, [r7, #3]
 801a71c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	2200      	movs	r2, #0
 801a722:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	2200      	movs	r2, #0
 801a728:	811a      	strh	r2, [r3, #8]
  }
}
 801a72a:	bf00      	nop
 801a72c:	370c      	adds	r7, #12
 801a72e:	46bd      	mov	sp, r7
 801a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a734:	4770      	bx	lr
	...

0801a738 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801a738:	b580      	push	{r7, lr}
 801a73a:	b082      	sub	sp, #8
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6039      	str	r1, [r7, #0]
 801a740:	4611      	mov	r1, r2
 801a742:	461a      	mov	r2, r3
 801a744:	4603      	mov	r3, r0
 801a746:	80fb      	strh	r3, [r7, #6]
 801a748:	460b      	mov	r3, r1
 801a74a:	717b      	strb	r3, [r7, #5]
 801a74c:	4613      	mov	r3, r2
 801a74e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801a750:	88fa      	ldrh	r2, [r7, #6]
 801a752:	793b      	ldrb	r3, [r7, #4]
 801a754:	4413      	add	r3, r2
 801a756:	3302      	adds	r3, #2
 801a758:	2b44      	cmp	r3, #68	@ 0x44
 801a75a:	d906      	bls.n	801a76a <dhcp_option+0x32>
 801a75c:	4b0d      	ldr	r3, [pc, #52]	@ (801a794 <dhcp_option+0x5c>)
 801a75e:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a762:	490d      	ldr	r1, [pc, #52]	@ (801a798 <dhcp_option+0x60>)
 801a764:	480d      	ldr	r0, [pc, #52]	@ (801a79c <dhcp_option+0x64>)
 801a766:	f004 fa85 	bl	801ec74 <iprintf>
  options[options_out_len++] = option_type;
 801a76a:	88fb      	ldrh	r3, [r7, #6]
 801a76c:	1c5a      	adds	r2, r3, #1
 801a76e:	80fa      	strh	r2, [r7, #6]
 801a770:	461a      	mov	r2, r3
 801a772:	683b      	ldr	r3, [r7, #0]
 801a774:	4413      	add	r3, r2
 801a776:	797a      	ldrb	r2, [r7, #5]
 801a778:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801a77a:	88fb      	ldrh	r3, [r7, #6]
 801a77c:	1c5a      	adds	r2, r3, #1
 801a77e:	80fa      	strh	r2, [r7, #6]
 801a780:	461a      	mov	r2, r3
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	4413      	add	r3, r2
 801a786:	793a      	ldrb	r2, [r7, #4]
 801a788:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a78a:	88fb      	ldrh	r3, [r7, #6]
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	3708      	adds	r7, #8
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}
 801a794:	080249d0 	.word	0x080249d0
 801a798:	08024b64 	.word	0x08024b64
 801a79c:	08024a30 	.word	0x08024a30

0801a7a0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b082      	sub	sp, #8
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	4603      	mov	r3, r0
 801a7a8:	6039      	str	r1, [r7, #0]
 801a7aa:	80fb      	strh	r3, [r7, #6]
 801a7ac:	4613      	mov	r3, r2
 801a7ae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801a7b0:	88fb      	ldrh	r3, [r7, #6]
 801a7b2:	2b43      	cmp	r3, #67	@ 0x43
 801a7b4:	d906      	bls.n	801a7c4 <dhcp_option_byte+0x24>
 801a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (801a7e0 <dhcp_option_byte+0x40>)
 801a7b8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 801a7bc:	4909      	ldr	r1, [pc, #36]	@ (801a7e4 <dhcp_option_byte+0x44>)
 801a7be:	480a      	ldr	r0, [pc, #40]	@ (801a7e8 <dhcp_option_byte+0x48>)
 801a7c0:	f004 fa58 	bl	801ec74 <iprintf>
  options[options_out_len++] = value;
 801a7c4:	88fb      	ldrh	r3, [r7, #6]
 801a7c6:	1c5a      	adds	r2, r3, #1
 801a7c8:	80fa      	strh	r2, [r7, #6]
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	683b      	ldr	r3, [r7, #0]
 801a7ce:	4413      	add	r3, r2
 801a7d0:	797a      	ldrb	r2, [r7, #5]
 801a7d2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a7d4:	88fb      	ldrh	r3, [r7, #6]
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	3708      	adds	r7, #8
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	080249d0 	.word	0x080249d0
 801a7e4:	08024ba8 	.word	0x08024ba8
 801a7e8:	08024a30 	.word	0x08024a30

0801a7ec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	6039      	str	r1, [r7, #0]
 801a7f6:	80fb      	strh	r3, [r7, #6]
 801a7f8:	4613      	mov	r3, r2
 801a7fa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801a7fc:	88fb      	ldrh	r3, [r7, #6]
 801a7fe:	3302      	adds	r3, #2
 801a800:	2b44      	cmp	r3, #68	@ 0x44
 801a802:	d906      	bls.n	801a812 <dhcp_option_short+0x26>
 801a804:	4b0f      	ldr	r3, [pc, #60]	@ (801a844 <dhcp_option_short+0x58>)
 801a806:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801a80a:	490f      	ldr	r1, [pc, #60]	@ (801a848 <dhcp_option_short+0x5c>)
 801a80c:	480f      	ldr	r0, [pc, #60]	@ (801a84c <dhcp_option_short+0x60>)
 801a80e:	f004 fa31 	bl	801ec74 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801a812:	88bb      	ldrh	r3, [r7, #4]
 801a814:	0a1b      	lsrs	r3, r3, #8
 801a816:	b29a      	uxth	r2, r3
 801a818:	88fb      	ldrh	r3, [r7, #6]
 801a81a:	1c59      	adds	r1, r3, #1
 801a81c:	80f9      	strh	r1, [r7, #6]
 801a81e:	4619      	mov	r1, r3
 801a820:	683b      	ldr	r3, [r7, #0]
 801a822:	440b      	add	r3, r1
 801a824:	b2d2      	uxtb	r2, r2
 801a826:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801a828:	88fb      	ldrh	r3, [r7, #6]
 801a82a:	1c5a      	adds	r2, r3, #1
 801a82c:	80fa      	strh	r2, [r7, #6]
 801a82e:	461a      	mov	r2, r3
 801a830:	683b      	ldr	r3, [r7, #0]
 801a832:	4413      	add	r3, r2
 801a834:	88ba      	ldrh	r2, [r7, #4]
 801a836:	b2d2      	uxtb	r2, r2
 801a838:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a83a:	88fb      	ldrh	r3, [r7, #6]
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	3708      	adds	r7, #8
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}
 801a844:	080249d0 	.word	0x080249d0
 801a848:	08024be0 	.word	0x08024be0
 801a84c:	08024a30 	.word	0x08024a30

0801a850 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801a850:	b580      	push	{r7, lr}
 801a852:	b084      	sub	sp, #16
 801a854:	af00      	add	r7, sp, #0
 801a856:	4603      	mov	r3, r0
 801a858:	60b9      	str	r1, [r7, #8]
 801a85a:	607a      	str	r2, [r7, #4]
 801a85c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801a85e:	89fb      	ldrh	r3, [r7, #14]
 801a860:	3304      	adds	r3, #4
 801a862:	2b44      	cmp	r3, #68	@ 0x44
 801a864:	d906      	bls.n	801a874 <dhcp_option_long+0x24>
 801a866:	4b19      	ldr	r3, [pc, #100]	@ (801a8cc <dhcp_option_long+0x7c>)
 801a868:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801a86c:	4918      	ldr	r1, [pc, #96]	@ (801a8d0 <dhcp_option_long+0x80>)
 801a86e:	4819      	ldr	r0, [pc, #100]	@ (801a8d4 <dhcp_option_long+0x84>)
 801a870:	f004 fa00 	bl	801ec74 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	0e1a      	lsrs	r2, r3, #24
 801a878:	89fb      	ldrh	r3, [r7, #14]
 801a87a:	1c59      	adds	r1, r3, #1
 801a87c:	81f9      	strh	r1, [r7, #14]
 801a87e:	4619      	mov	r1, r3
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	440b      	add	r3, r1
 801a884:	b2d2      	uxtb	r2, r2
 801a886:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	0c1a      	lsrs	r2, r3, #16
 801a88c:	89fb      	ldrh	r3, [r7, #14]
 801a88e:	1c59      	adds	r1, r3, #1
 801a890:	81f9      	strh	r1, [r7, #14]
 801a892:	4619      	mov	r1, r3
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	440b      	add	r3, r1
 801a898:	b2d2      	uxtb	r2, r2
 801a89a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	0a1a      	lsrs	r2, r3, #8
 801a8a0:	89fb      	ldrh	r3, [r7, #14]
 801a8a2:	1c59      	adds	r1, r3, #1
 801a8a4:	81f9      	strh	r1, [r7, #14]
 801a8a6:	4619      	mov	r1, r3
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	440b      	add	r3, r1
 801a8ac:	b2d2      	uxtb	r2, r2
 801a8ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a8b0:	89fb      	ldrh	r3, [r7, #14]
 801a8b2:	1c5a      	adds	r2, r3, #1
 801a8b4:	81fa      	strh	r2, [r7, #14]
 801a8b6:	461a      	mov	r2, r3
 801a8b8:	68bb      	ldr	r3, [r7, #8]
 801a8ba:	4413      	add	r3, r2
 801a8bc:	687a      	ldr	r2, [r7, #4]
 801a8be:	b2d2      	uxtb	r2, r2
 801a8c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a8c2:	89fb      	ldrh	r3, [r7, #14]
}
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	3710      	adds	r7, #16
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bd80      	pop	{r7, pc}
 801a8cc:	080249d0 	.word	0x080249d0
 801a8d0:	08024c1c 	.word	0x08024c1c
 801a8d4:	08024a30 	.word	0x08024a30

0801a8d8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b092      	sub	sp, #72	@ 0x48
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
 801a8e0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a8ea:	2208      	movs	r2, #8
 801a8ec:	2100      	movs	r1, #0
 801a8ee:	48b8      	ldr	r0, [pc, #736]	@ (801abd0 <dhcp_parse_reply+0x2f8>)
 801a8f0:	f004 fb2a 	bl	801ef48 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	895b      	ldrh	r3, [r3, #10]
 801a8f8:	2b2b      	cmp	r3, #43	@ 0x2b
 801a8fa:	d802      	bhi.n	801a902 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a8fc:	f06f 0301 	mvn.w	r3, #1
 801a900:	e2b8      	b.n	801ae74 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	685b      	ldr	r3, [r3, #4]
 801a906:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a908:	23f0      	movs	r3, #240	@ 0xf0
 801a90a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	891b      	ldrh	r3, [r3, #8]
 801a910:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801a916:	e00c      	b.n	801a932 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a91a:	895b      	ldrh	r3, [r3, #10]
 801a91c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801a91e:	1ad3      	subs	r3, r2, r3
 801a920:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a924:	895b      	ldrh	r3, [r3, #10]
 801a926:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a928:	1ad3      	subs	r3, r2, r3
 801a92a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 801a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a934:	2b00      	cmp	r3, #0
 801a936:	d004      	beq.n	801a942 <dhcp_parse_reply+0x6a>
 801a938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a93a:	895b      	ldrh	r3, [r3, #10]
 801a93c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801a93e:	429a      	cmp	r2, r3
 801a940:	d2ea      	bcs.n	801a918 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a944:	2b00      	cmp	r3, #0
 801a946:	d102      	bne.n	801a94e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a948:	f06f 0301 	mvn.w	r3, #1
 801a94c:	e292      	b.n	801ae74 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 801a94e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a950:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 801a954:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a956:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 801a958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a95a:	685b      	ldr	r3, [r3, #4]
 801a95c:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a95e:	e247      	b.n	801adf0 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 801a960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a964:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a966:	4413      	add	r3, r2
 801a968:	781b      	ldrb	r3, [r3, #0]
 801a96a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801a96c:	2300      	movs	r3, #0
 801a96e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 801a972:	f04f 33ff 	mov.w	r3, #4294967295
 801a976:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 801a978:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a97c:	3302      	adds	r3, #2
 801a97e:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 801a980:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a982:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a986:	429a      	cmp	r2, r3
 801a988:	d202      	bcs.n	801a990 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801a98a:	f06f 0301 	mvn.w	r3, #1
 801a98e:	e271      	b.n	801ae74 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a990:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a994:	3301      	adds	r3, #1
 801a996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a998:	8952      	ldrh	r2, [r2, #10]
 801a99a:	4293      	cmp	r3, r2
 801a99c:	da08      	bge.n	801a9b0 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801a99e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a9a2:	3301      	adds	r3, #1
 801a9a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a9a6:	4413      	add	r3, r2
 801a9a8:	781b      	ldrb	r3, [r3, #0]
 801a9aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801a9ae:	e00b      	b.n	801a9c8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d004      	beq.n	801a9c2 <dhcp_parse_reply+0xea>
 801a9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	781b      	ldrb	r3, [r3, #0]
 801a9c0:	e000      	b.n	801a9c4 <dhcp_parse_reply+0xec>
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a9c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a9cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 801a9d0:	7efb      	ldrb	r3, [r7, #27]
 801a9d2:	2b3b      	cmp	r3, #59	@ 0x3b
 801a9d4:	f200 812c 	bhi.w	801ac30 <dhcp_parse_reply+0x358>
 801a9d8:	a201      	add	r2, pc, #4	@ (adr r2, 801a9e0 <dhcp_parse_reply+0x108>)
 801a9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9de:	bf00      	nop
 801a9e0:	0801aad1 	.word	0x0801aad1
 801a9e4:	0801aae1 	.word	0x0801aae1
 801a9e8:	0801ac31 	.word	0x0801ac31
 801a9ec:	0801ab03 	.word	0x0801ab03
 801a9f0:	0801ac31 	.word	0x0801ac31
 801a9f4:	0801ac31 	.word	0x0801ac31
 801a9f8:	0801ac31 	.word	0x0801ac31
 801a9fc:	0801ac31 	.word	0x0801ac31
 801aa00:	0801ac31 	.word	0x0801ac31
 801aa04:	0801ac31 	.word	0x0801ac31
 801aa08:	0801ac31 	.word	0x0801ac31
 801aa0c:	0801ac31 	.word	0x0801ac31
 801aa10:	0801ac31 	.word	0x0801ac31
 801aa14:	0801ac31 	.word	0x0801ac31
 801aa18:	0801ac31 	.word	0x0801ac31
 801aa1c:	0801ac31 	.word	0x0801ac31
 801aa20:	0801ac31 	.word	0x0801ac31
 801aa24:	0801ac31 	.word	0x0801ac31
 801aa28:	0801ac31 	.word	0x0801ac31
 801aa2c:	0801ac31 	.word	0x0801ac31
 801aa30:	0801ac31 	.word	0x0801ac31
 801aa34:	0801ac31 	.word	0x0801ac31
 801aa38:	0801ac31 	.word	0x0801ac31
 801aa3c:	0801ac31 	.word	0x0801ac31
 801aa40:	0801ac31 	.word	0x0801ac31
 801aa44:	0801ac31 	.word	0x0801ac31
 801aa48:	0801ac31 	.word	0x0801ac31
 801aa4c:	0801ac31 	.word	0x0801ac31
 801aa50:	0801ac31 	.word	0x0801ac31
 801aa54:	0801ac31 	.word	0x0801ac31
 801aa58:	0801ac31 	.word	0x0801ac31
 801aa5c:	0801ac31 	.word	0x0801ac31
 801aa60:	0801ac31 	.word	0x0801ac31
 801aa64:	0801ac31 	.word	0x0801ac31
 801aa68:	0801ac31 	.word	0x0801ac31
 801aa6c:	0801ac31 	.word	0x0801ac31
 801aa70:	0801ac31 	.word	0x0801ac31
 801aa74:	0801ac31 	.word	0x0801ac31
 801aa78:	0801ac31 	.word	0x0801ac31
 801aa7c:	0801ac31 	.word	0x0801ac31
 801aa80:	0801ac31 	.word	0x0801ac31
 801aa84:	0801ac31 	.word	0x0801ac31
 801aa88:	0801ac31 	.word	0x0801ac31
 801aa8c:	0801ac31 	.word	0x0801ac31
 801aa90:	0801ac31 	.word	0x0801ac31
 801aa94:	0801ac31 	.word	0x0801ac31
 801aa98:	0801ac31 	.word	0x0801ac31
 801aa9c:	0801ac31 	.word	0x0801ac31
 801aaa0:	0801ac31 	.word	0x0801ac31
 801aaa4:	0801ac31 	.word	0x0801ac31
 801aaa8:	0801ac31 	.word	0x0801ac31
 801aaac:	0801ab2f 	.word	0x0801ab2f
 801aab0:	0801ab51 	.word	0x0801ab51
 801aab4:	0801ab8d 	.word	0x0801ab8d
 801aab8:	0801abaf 	.word	0x0801abaf
 801aabc:	0801ac31 	.word	0x0801ac31
 801aac0:	0801ac31 	.word	0x0801ac31
 801aac4:	0801ac31 	.word	0x0801ac31
 801aac8:	0801abed 	.word	0x0801abed
 801aacc:	0801ac0f 	.word	0x0801ac0f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801aad0:	2300      	movs	r3, #0
 801aad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801aad6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801aada:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 801aade:	e0ab      	b.n	801ac38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801aae0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801aae4:	2b04      	cmp	r3, #4
 801aae6:	d009      	beq.n	801aafc <dhcp_parse_reply+0x224>
 801aae8:	4b3a      	ldr	r3, [pc, #232]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801aaea:	f240 622e 	movw	r2, #1582	@ 0x62e
 801aaee:	493a      	ldr	r1, [pc, #232]	@ (801abd8 <dhcp_parse_reply+0x300>)
 801aaf0:	483a      	ldr	r0, [pc, #232]	@ (801abdc <dhcp_parse_reply+0x304>)
 801aaf2:	f004 f8bf 	bl	801ec74 <iprintf>
 801aaf6:	f06f 0305 	mvn.w	r3, #5
 801aafa:	e1bb      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801aafc:	2306      	movs	r3, #6
 801aafe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801ab00:	e09a      	b.n	801ac38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801ab02:	2304      	movs	r3, #4
 801ab04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ab08:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801ab0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801ab10:	429a      	cmp	r2, r3
 801ab12:	d209      	bcs.n	801ab28 <dhcp_parse_reply+0x250>
 801ab14:	4b2f      	ldr	r3, [pc, #188]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801ab16:	f240 6233 	movw	r2, #1587	@ 0x633
 801ab1a:	4931      	ldr	r1, [pc, #196]	@ (801abe0 <dhcp_parse_reply+0x308>)
 801ab1c:	482f      	ldr	r0, [pc, #188]	@ (801abdc <dhcp_parse_reply+0x304>)
 801ab1e:	f004 f8a9 	bl	801ec74 <iprintf>
 801ab22:	f06f 0305 	mvn.w	r3, #5
 801ab26:	e1a5      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801ab28:	2307      	movs	r3, #7
 801ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801ab2c:	e084      	b.n	801ac38 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ab2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801ab32:	2b04      	cmp	r3, #4
 801ab34:	d009      	beq.n	801ab4a <dhcp_parse_reply+0x272>
 801ab36:	4b27      	ldr	r3, [pc, #156]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801ab38:	f240 6241 	movw	r2, #1601	@ 0x641
 801ab3c:	4926      	ldr	r1, [pc, #152]	@ (801abd8 <dhcp_parse_reply+0x300>)
 801ab3e:	4827      	ldr	r0, [pc, #156]	@ (801abdc <dhcp_parse_reply+0x304>)
 801ab40:	f004 f898 	bl	801ec74 <iprintf>
 801ab44:	f06f 0305 	mvn.w	r3, #5
 801ab48:	e194      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801ab4a:	2303      	movs	r3, #3
 801ab4c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801ab4e:	e073      	b.n	801ac38 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ab50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801ab54:	2b01      	cmp	r3, #1
 801ab56:	d009      	beq.n	801ab6c <dhcp_parse_reply+0x294>
 801ab58:	4b1e      	ldr	r3, [pc, #120]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801ab5a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801ab5e:	4921      	ldr	r1, [pc, #132]	@ (801abe4 <dhcp_parse_reply+0x30c>)
 801ab60:	481e      	ldr	r0, [pc, #120]	@ (801abdc <dhcp_parse_reply+0x304>)
 801ab62:	f004 f887 	bl	801ec74 <iprintf>
 801ab66:	f06f 0305 	mvn.w	r3, #5
 801ab6a:	e183      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ab6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab6e:	2bf0      	cmp	r3, #240	@ 0xf0
 801ab70:	d009      	beq.n	801ab86 <dhcp_parse_reply+0x2ae>
 801ab72:	4b18      	ldr	r3, [pc, #96]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801ab74:	f240 6251 	movw	r2, #1617	@ 0x651
 801ab78:	491b      	ldr	r1, [pc, #108]	@ (801abe8 <dhcp_parse_reply+0x310>)
 801ab7a:	4818      	ldr	r0, [pc, #96]	@ (801abdc <dhcp_parse_reply+0x304>)
 801ab7c:	f004 f87a 	bl	801ec74 <iprintf>
 801ab80:	f06f 0305 	mvn.w	r3, #5
 801ab84:	e176      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801ab86:	2300      	movs	r3, #0
 801ab88:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801ab8a:	e055      	b.n	801ac38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ab8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801ab90:	2b01      	cmp	r3, #1
 801ab92:	d009      	beq.n	801aba8 <dhcp_parse_reply+0x2d0>
 801ab94:	4b0f      	ldr	r3, [pc, #60]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801ab96:	f240 6255 	movw	r2, #1621	@ 0x655
 801ab9a:	4912      	ldr	r1, [pc, #72]	@ (801abe4 <dhcp_parse_reply+0x30c>)
 801ab9c:	480f      	ldr	r0, [pc, #60]	@ (801abdc <dhcp_parse_reply+0x304>)
 801ab9e:	f004 f869 	bl	801ec74 <iprintf>
 801aba2:	f06f 0305 	mvn.w	r3, #5
 801aba6:	e165      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801aba8:	2301      	movs	r3, #1
 801abaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801abac:	e044      	b.n	801ac38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801abae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801abb2:	2b04      	cmp	r3, #4
 801abb4:	d009      	beq.n	801abca <dhcp_parse_reply+0x2f2>
 801abb6:	4b07      	ldr	r3, [pc, #28]	@ (801abd4 <dhcp_parse_reply+0x2fc>)
 801abb8:	f240 6259 	movw	r2, #1625	@ 0x659
 801abbc:	4906      	ldr	r1, [pc, #24]	@ (801abd8 <dhcp_parse_reply+0x300>)
 801abbe:	4807      	ldr	r0, [pc, #28]	@ (801abdc <dhcp_parse_reply+0x304>)
 801abc0:	f004 f858 	bl	801ec74 <iprintf>
 801abc4:	f06f 0305 	mvn.w	r3, #5
 801abc8:	e154      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801abca:	2302      	movs	r3, #2
 801abcc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801abce:	e033      	b.n	801ac38 <dhcp_parse_reply+0x360>
 801abd0:	20013e40 	.word	0x20013e40
 801abd4:	080249d0 	.word	0x080249d0
 801abd8:	08024c58 	.word	0x08024c58
 801abdc:	08024a30 	.word	0x08024a30
 801abe0:	08024c64 	.word	0x08024c64
 801abe4:	08024c78 	.word	0x08024c78
 801abe8:	08024c84 	.word	0x08024c84
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801abec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801abf0:	2b04      	cmp	r3, #4
 801abf2:	d009      	beq.n	801ac08 <dhcp_parse_reply+0x330>
 801abf4:	4ba1      	ldr	r3, [pc, #644]	@ (801ae7c <dhcp_parse_reply+0x5a4>)
 801abf6:	f240 625d 	movw	r2, #1629	@ 0x65d
 801abfa:	49a1      	ldr	r1, [pc, #644]	@ (801ae80 <dhcp_parse_reply+0x5a8>)
 801abfc:	48a1      	ldr	r0, [pc, #644]	@ (801ae84 <dhcp_parse_reply+0x5ac>)
 801abfe:	f004 f839 	bl	801ec74 <iprintf>
 801ac02:	f06f 0305 	mvn.w	r3, #5
 801ac06:	e135      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801ac08:	2304      	movs	r3, #4
 801ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801ac0c:	e014      	b.n	801ac38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ac0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801ac12:	2b04      	cmp	r3, #4
 801ac14:	d009      	beq.n	801ac2a <dhcp_parse_reply+0x352>
 801ac16:	4b99      	ldr	r3, [pc, #612]	@ (801ae7c <dhcp_parse_reply+0x5a4>)
 801ac18:	f240 6261 	movw	r2, #1633	@ 0x661
 801ac1c:	4998      	ldr	r1, [pc, #608]	@ (801ae80 <dhcp_parse_reply+0x5a8>)
 801ac1e:	4899      	ldr	r0, [pc, #612]	@ (801ae84 <dhcp_parse_reply+0x5ac>)
 801ac20:	f004 f828 	bl	801ec74 <iprintf>
 801ac24:	f06f 0305 	mvn.w	r3, #5
 801ac28:	e124      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801ac2a:	2305      	movs	r3, #5
 801ac2c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801ac2e:	e003      	b.n	801ac38 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 801ac30:	2300      	movs	r3, #0
 801ac32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801ac36:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801ac38:	7efb      	ldrb	r3, [r7, #27]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d105      	bne.n	801ac4a <dhcp_parse_reply+0x372>
      offset++;
 801ac3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac42:	3301      	adds	r3, #1
 801ac44:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 801ac48:	e0a4      	b.n	801ad94 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801ac4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ac4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801ac52:	4413      	add	r3, r2
 801ac54:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801ac58:	4293      	cmp	r3, r2
 801ac5a:	dd02      	ble.n	801ac62 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 801ac5c:	f06f 0301 	mvn.w	r3, #1
 801ac60:	e108      	b.n	801ae74 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 801ac62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801ac66:	b29a      	uxth	r2, r3
 801ac68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac6c:	4413      	add	r3, r2
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	3302      	adds	r3, #2
 801ac72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 801ac76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	f000 808a 	beq.w	801ad94 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 801ac80:	2300      	movs	r3, #0
 801ac82:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	db02      	blt.n	801ac90 <dhcp_parse_reply+0x3b8>
 801ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac8c:	2b07      	cmp	r3, #7
 801ac8e:	dd06      	ble.n	801ac9e <dhcp_parse_reply+0x3c6>
 801ac90:	4b7a      	ldr	r3, [pc, #488]	@ (801ae7c <dhcp_parse_reply+0x5a4>)
 801ac92:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801ac96:	497c      	ldr	r1, [pc, #496]	@ (801ae88 <dhcp_parse_reply+0x5b0>)
 801ac98:	487a      	ldr	r0, [pc, #488]	@ (801ae84 <dhcp_parse_reply+0x5ac>)
 801ac9a:	f003 ffeb 	bl	801ec74 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801ac9e:	4a7b      	ldr	r2, [pc, #492]	@ (801ae8c <dhcp_parse_reply+0x5b4>)
 801aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca2:	4413      	add	r3, r2
 801aca4:	781b      	ldrb	r3, [r3, #0]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d174      	bne.n	801ad94 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 801acaa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801acae:	2b04      	cmp	r3, #4
 801acb0:	bf28      	it	cs
 801acb2:	2304      	movcs	r3, #4
 801acb4:	b2db      	uxtb	r3, r3
 801acb6:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801acb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801acba:	8b3a      	ldrh	r2, [r7, #24]
 801acbc:	f107 010c 	add.w	r1, r7, #12
 801acc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801acc2:	f7f7 fb25 	bl	8012310 <pbuf_copy_partial>
 801acc6:	4603      	mov	r3, r0
 801acc8:	461a      	mov	r2, r3
 801acca:	8b3b      	ldrh	r3, [r7, #24]
 801accc:	4293      	cmp	r3, r2
 801acce:	d002      	beq.n	801acd6 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 801acd0:	f06f 0301 	mvn.w	r3, #1
 801acd4:	e0ce      	b.n	801ae74 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 801acd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801acda:	2b04      	cmp	r3, #4
 801acdc:	d933      	bls.n	801ad46 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801acde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801ace2:	f003 0303 	and.w	r3, r3, #3
 801ace6:	b2db      	uxtb	r3, r3
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d009      	beq.n	801ad00 <dhcp_parse_reply+0x428>
 801acec:	4b63      	ldr	r3, [pc, #396]	@ (801ae7c <dhcp_parse_reply+0x5a4>)
 801acee:	f240 6281 	movw	r2, #1665	@ 0x681
 801acf2:	4967      	ldr	r1, [pc, #412]	@ (801ae90 <dhcp_parse_reply+0x5b8>)
 801acf4:	4863      	ldr	r0, [pc, #396]	@ (801ae84 <dhcp_parse_reply+0x5ac>)
 801acf6:	f003 ffbd 	bl	801ec74 <iprintf>
 801acfa:	f06f 0305 	mvn.w	r3, #5
 801acfe:	e0b9      	b.n	801ae74 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 801ad00:	4a62      	ldr	r2, [pc, #392]	@ (801ae8c <dhcp_parse_reply+0x5b4>)
 801ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad04:	4413      	add	r3, r2
 801ad06:	2201      	movs	r2, #1
 801ad08:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	f7f5 fbec 	bl	80104ea <lwip_htonl>
 801ad12:	4602      	mov	r2, r0
 801ad14:	495f      	ldr	r1, [pc, #380]	@ (801ae94 <dhcp_parse_reply+0x5bc>)
 801ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801ad1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801ad20:	3b04      	subs	r3, #4
 801ad22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 801ad26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ad28:	3304      	adds	r3, #4
 801ad2a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801ad2c:	8afa      	ldrh	r2, [r7, #22]
 801ad2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ad30:	429a      	cmp	r2, r3
 801ad32:	d202      	bcs.n	801ad3a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 801ad34:	f06f 0301 	mvn.w	r3, #1
 801ad38:	e09c      	b.n	801ae74 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 801ad3a:	8afb      	ldrh	r3, [r7, #22]
 801ad3c:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 801ad3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad40:	3301      	adds	r3, #1
 801ad42:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 801ad44:	e79e      	b.n	801ac84 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 801ad46:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801ad4a:	2b04      	cmp	r3, #4
 801ad4c:	d106      	bne.n	801ad5c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	4618      	mov	r0, r3
 801ad52:	f7f5 fbca 	bl	80104ea <lwip_htonl>
 801ad56:	4603      	mov	r3, r0
 801ad58:	60fb      	str	r3, [r7, #12]
 801ad5a:	e011      	b.n	801ad80 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ad5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801ad60:	2b01      	cmp	r3, #1
 801ad62:	d009      	beq.n	801ad78 <dhcp_parse_reply+0x4a0>
 801ad64:	4b45      	ldr	r3, [pc, #276]	@ (801ae7c <dhcp_parse_reply+0x5a4>)
 801ad66:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801ad6a:	494b      	ldr	r1, [pc, #300]	@ (801ae98 <dhcp_parse_reply+0x5c0>)
 801ad6c:	4845      	ldr	r0, [pc, #276]	@ (801ae84 <dhcp_parse_reply+0x5ac>)
 801ad6e:	f003 ff81 	bl	801ec74 <iprintf>
 801ad72:	f06f 0305 	mvn.w	r3, #5
 801ad76:	e07d      	b.n	801ae74 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 801ad78:	f107 030c 	add.w	r3, r7, #12
 801ad7c:	781b      	ldrb	r3, [r3, #0]
 801ad7e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ad80:	4a42      	ldr	r2, [pc, #264]	@ (801ae8c <dhcp_parse_reply+0x5b4>)
 801ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad84:	4413      	add	r3, r2
 801ad86:	2201      	movs	r2, #1
 801ad88:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ad8a:	68fa      	ldr	r2, [r7, #12]
 801ad8c:	4941      	ldr	r1, [pc, #260]	@ (801ae94 <dhcp_parse_reply+0x5bc>)
 801ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad96:	895b      	ldrh	r3, [r3, #10]
 801ad98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d327      	bcc.n	801adf0 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 801ada0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ada2:	895b      	ldrh	r3, [r3, #10]
 801ada4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ada8:	1ad3      	subs	r3, r2, r3
 801adaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801adae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adb0:	895b      	ldrh	r3, [r3, #10]
 801adb2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801adb4:	1ad3      	subs	r3, r2, r3
 801adb6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 801adb8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801adbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801adbe:	429a      	cmp	r2, r3
 801adc0:	d213      	bcs.n	801adea <dhcp_parse_reply+0x512>
        q = q->next;
 801adc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801adc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d109      	bne.n	801ade2 <dhcp_parse_reply+0x50a>
 801adce:	4b2b      	ldr	r3, [pc, #172]	@ (801ae7c <dhcp_parse_reply+0x5a4>)
 801add0:	f240 629d 	movw	r2, #1693	@ 0x69d
 801add4:	4931      	ldr	r1, [pc, #196]	@ (801ae9c <dhcp_parse_reply+0x5c4>)
 801add6:	482b      	ldr	r0, [pc, #172]	@ (801ae84 <dhcp_parse_reply+0x5ac>)
 801add8:	f003 ff4c 	bl	801ec74 <iprintf>
 801addc:	f06f 0305 	mvn.w	r3, #5
 801ade0:	e048      	b.n	801ae74 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 801ade2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ade4:	685b      	ldr	r3, [r3, #4]
 801ade6:	643b      	str	r3, [r7, #64]	@ 0x40
 801ade8:	e002      	b.n	801adf0 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801adea:	f06f 0301 	mvn.w	r3, #1
 801adee:	e041      	b.n	801ae74 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801adf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d00c      	beq.n	801ae10 <dhcp_parse_reply+0x538>
 801adf6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801adfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d207      	bcs.n	801ae10 <dhcp_parse_reply+0x538>
 801ae00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ae04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ae06:	4413      	add	r3, r2
 801ae08:	781b      	ldrb	r3, [r3, #0]
 801ae0a:	2bff      	cmp	r3, #255	@ 0xff
 801ae0c:	f47f ada8 	bne.w	801a960 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801ae10:	4b1e      	ldr	r3, [pc, #120]	@ (801ae8c <dhcp_parse_reply+0x5b4>)
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d018      	beq.n	801ae4a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ae18:	4b1e      	ldr	r3, [pc, #120]	@ (801ae94 <dhcp_parse_reply+0x5bc>)
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ae1e:	4b1b      	ldr	r3, [pc, #108]	@ (801ae8c <dhcp_parse_reply+0x5b4>)
 801ae20:	2200      	movs	r2, #0
 801ae22:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801ae24:	693b      	ldr	r3, [r7, #16]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	d102      	bne.n	801ae30 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	633b      	str	r3, [r7, #48]	@ 0x30
 801ae2e:	e00c      	b.n	801ae4a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801ae30:	693b      	ldr	r3, [r7, #16]
 801ae32:	2b02      	cmp	r3, #2
 801ae34:	d102      	bne.n	801ae3c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 801ae36:	2301      	movs	r3, #1
 801ae38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae3a:	e006      	b.n	801ae4a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801ae3c:	693b      	ldr	r3, [r7, #16]
 801ae3e:	2b03      	cmp	r3, #3
 801ae40:	d103      	bne.n	801ae4a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 801ae42:	2301      	movs	r3, #1
 801ae44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 801ae46:	2301      	movs	r3, #1
 801ae48:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d006      	beq.n	801ae5e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801ae50:	2300      	movs	r3, #0
 801ae52:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 801ae54:	236c      	movs	r3, #108	@ 0x6c
 801ae56:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801ae58:	23ec      	movs	r3, #236	@ 0xec
 801ae5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801ae5c:	e559      	b.n	801a912 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d006      	beq.n	801ae72 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 801ae64:	2300      	movs	r3, #0
 801ae66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 801ae68:	232c      	movs	r3, #44	@ 0x2c
 801ae6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801ae6c:	236c      	movs	r3, #108	@ 0x6c
 801ae6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 801ae70:	e54f      	b.n	801a912 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801ae72:	2300      	movs	r3, #0
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3748      	adds	r7, #72	@ 0x48
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}
 801ae7c:	080249d0 	.word	0x080249d0
 801ae80:	08024c58 	.word	0x08024c58
 801ae84:	08024a30 	.word	0x08024a30
 801ae88:	08024c9c 	.word	0x08024c9c
 801ae8c:	20013e40 	.word	0x20013e40
 801ae90:	08024cb0 	.word	0x08024cb0
 801ae94:	20013e20 	.word	0x20013e20
 801ae98:	08024cc8 	.word	0x08024cc8
 801ae9c:	08024cdc 	.word	0x08024cdc

0801aea0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b08a      	sub	sp, #40	@ 0x28
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	60f8      	str	r0, [r7, #12]
 801aea8:	60b9      	str	r1, [r7, #8]
 801aeaa:	607a      	str	r2, [r7, #4]
 801aeac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801aeae:	4b5e      	ldr	r3, [pc, #376]	@ (801b028 <dhcp_recv+0x188>)
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aeb4:	69fb      	ldr	r3, [r7, #28]
 801aeb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aeb8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	685b      	ldr	r3, [r3, #4]
 801aebe:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801aec0:	69bb      	ldr	r3, [r7, #24]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	f000 809a 	beq.w	801affc <dhcp_recv+0x15c>
 801aec8:	69bb      	ldr	r3, [r7, #24]
 801aeca:	791b      	ldrb	r3, [r3, #4]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	f000 8095 	beq.w	801affc <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	895b      	ldrh	r3, [r3, #10]
 801aed6:	2b2b      	cmp	r3, #43	@ 0x2b
 801aed8:	f240 8092 	bls.w	801b000 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	2b02      	cmp	r3, #2
 801aee2:	f040 808f 	bne.w	801b004 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801aee6:	2300      	movs	r3, #0
 801aee8:	74fb      	strb	r3, [r7, #19]
 801aeea:	e00e      	b.n	801af0a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801aeec:	7cfb      	ldrb	r3, [r7, #19]
 801aeee:	69fa      	ldr	r2, [r7, #28]
 801aef0:	4413      	add	r3, r2
 801aef2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801aef6:	7cfb      	ldrb	r3, [r7, #19]
 801aef8:	6979      	ldr	r1, [r7, #20]
 801aefa:	440b      	add	r3, r1
 801aefc:	7f1b      	ldrb	r3, [r3, #28]
 801aefe:	429a      	cmp	r2, r3
 801af00:	f040 8082 	bne.w	801b008 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801af04:	7cfb      	ldrb	r3, [r7, #19]
 801af06:	3301      	adds	r3, #1
 801af08:	74fb      	strb	r3, [r7, #19]
 801af0a:	69fb      	ldr	r3, [r7, #28]
 801af0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801af10:	7cfa      	ldrb	r2, [r7, #19]
 801af12:	429a      	cmp	r2, r3
 801af14:	d202      	bcs.n	801af1c <dhcp_recv+0x7c>
 801af16:	7cfb      	ldrb	r3, [r7, #19]
 801af18:	2b05      	cmp	r3, #5
 801af1a:	d9e7      	bls.n	801aeec <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801af1c:	697b      	ldr	r3, [r7, #20]
 801af1e:	685b      	ldr	r3, [r3, #4]
 801af20:	4618      	mov	r0, r3
 801af22:	f7f5 fae2 	bl	80104ea <lwip_htonl>
 801af26:	4602      	mov	r2, r0
 801af28:	69bb      	ldr	r3, [r7, #24]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	429a      	cmp	r2, r3
 801af2e:	d16d      	bne.n	801b00c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801af30:	69b9      	ldr	r1, [r7, #24]
 801af32:	6878      	ldr	r0, [r7, #4]
 801af34:	f7ff fcd0 	bl	801a8d8 <dhcp_parse_reply>
 801af38:	4603      	mov	r3, r0
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d168      	bne.n	801b010 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801af3e:	4b3b      	ldr	r3, [pc, #236]	@ (801b02c <dhcp_recv+0x18c>)
 801af40:	785b      	ldrb	r3, [r3, #1]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d066      	beq.n	801b014 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	685b      	ldr	r3, [r3, #4]
 801af4a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801af4c:	4b38      	ldr	r3, [pc, #224]	@ (801b030 <dhcp_recv+0x190>)
 801af4e:	685b      	ldr	r3, [r3, #4]
 801af50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801af54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801af58:	2b05      	cmp	r3, #5
 801af5a:	d12a      	bne.n	801afb2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801af5c:	69bb      	ldr	r3, [r7, #24]
 801af5e:	795b      	ldrb	r3, [r3, #5]
 801af60:	2b01      	cmp	r3, #1
 801af62:	d112      	bne.n	801af8a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 801af64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801af66:	69f8      	ldr	r0, [r7, #28]
 801af68:	f7fe fe06 	bl	8019b78 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801af6c:	69fb      	ldr	r3, [r7, #28]
 801af6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801af72:	f003 0308 	and.w	r3, r3, #8
 801af76:	2b00      	cmp	r3, #0
 801af78:	d003      	beq.n	801af82 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801af7a:	69f8      	ldr	r0, [r7, #28]
 801af7c:	f7fe fb76 	bl	801966c <dhcp_check>
 801af80:	e04b      	b.n	801b01a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801af82:	69f8      	ldr	r0, [r7, #28]
 801af84:	f7ff f856 	bl	801a034 <dhcp_bind>
 801af88:	e047      	b.n	801b01a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801af8a:	69bb      	ldr	r3, [r7, #24]
 801af8c:	795b      	ldrb	r3, [r3, #5]
 801af8e:	2b03      	cmp	r3, #3
 801af90:	d007      	beq.n	801afa2 <dhcp_recv+0x102>
 801af92:	69bb      	ldr	r3, [r7, #24]
 801af94:	795b      	ldrb	r3, [r3, #5]
 801af96:	2b04      	cmp	r3, #4
 801af98:	d003      	beq.n	801afa2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801af9a:	69bb      	ldr	r3, [r7, #24]
 801af9c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801af9e:	2b05      	cmp	r3, #5
 801afa0:	d13b      	bne.n	801b01a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 801afa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801afa4:	69f8      	ldr	r0, [r7, #28]
 801afa6:	f7fe fde7 	bl	8019b78 <dhcp_handle_ack>
      dhcp_bind(netif);
 801afaa:	69f8      	ldr	r0, [r7, #28]
 801afac:	f7ff f842 	bl	801a034 <dhcp_bind>
 801afb0:	e033      	b.n	801b01a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801afb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801afb6:	2b06      	cmp	r3, #6
 801afb8:	d113      	bne.n	801afe2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801afba:	69bb      	ldr	r3, [r7, #24]
 801afbc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801afbe:	2b03      	cmp	r3, #3
 801afc0:	d00b      	beq.n	801afda <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801afc2:	69bb      	ldr	r3, [r7, #24]
 801afc4:	795b      	ldrb	r3, [r3, #5]
 801afc6:	2b01      	cmp	r3, #1
 801afc8:	d007      	beq.n	801afda <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801afca:	69bb      	ldr	r3, [r7, #24]
 801afcc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801afce:	2b04      	cmp	r3, #4
 801afd0:	d003      	beq.n	801afda <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801afd2:	69bb      	ldr	r3, [r7, #24]
 801afd4:	795b      	ldrb	r3, [r3, #5]
 801afd6:	2b05      	cmp	r3, #5
 801afd8:	d103      	bne.n	801afe2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801afda:	69f8      	ldr	r0, [r7, #28]
 801afdc:	f7fe fb2c 	bl	8019638 <dhcp_handle_nak>
 801afe0:	e01b      	b.n	801b01a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801afe2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801afe6:	2b02      	cmp	r3, #2
 801afe8:	d116      	bne.n	801b018 <dhcp_recv+0x178>
 801afea:	69bb      	ldr	r3, [r7, #24]
 801afec:	795b      	ldrb	r3, [r3, #5]
 801afee:	2b06      	cmp	r3, #6
 801aff0:	d112      	bne.n	801b018 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801aff2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801aff4:	69f8      	ldr	r0, [r7, #28]
 801aff6:	f7fe fb6d 	bl	80196d4 <dhcp_handle_offer>
 801affa:	e00e      	b.n	801b01a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801affc:	bf00      	nop
 801affe:	e00c      	b.n	801b01a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801b000:	bf00      	nop
 801b002:	e00a      	b.n	801b01a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801b004:	bf00      	nop
 801b006:	e008      	b.n	801b01a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 801b008:	bf00      	nop
 801b00a:	e006      	b.n	801b01a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801b00c:	bf00      	nop
 801b00e:	e004      	b.n	801b01a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801b010:	bf00      	nop
 801b012:	e002      	b.n	801b01a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801b014:	bf00      	nop
 801b016:	e000      	b.n	801b01a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 801b018:	bf00      	nop
  pbuf_free(p);
 801b01a:	6878      	ldr	r0, [r7, #4]
 801b01c:	f7f6 ff72 	bl	8011f04 <pbuf_free>
}
 801b020:	bf00      	nop
 801b022:	3728      	adds	r7, #40	@ 0x28
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}
 801b028:	2000a348 	.word	0x2000a348
 801b02c:	20013e40 	.word	0x20013e40
 801b030:	20013e20 	.word	0x20013e20

0801b034 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b088      	sub	sp, #32
 801b038:	af00      	add	r7, sp, #0
 801b03a:	60f8      	str	r0, [r7, #12]
 801b03c:	60b9      	str	r1, [r7, #8]
 801b03e:	603b      	str	r3, [r7, #0]
 801b040:	4613      	mov	r3, r2
 801b042:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d108      	bne.n	801b05c <dhcp_create_msg+0x28>
 801b04a:	4b5f      	ldr	r3, [pc, #380]	@ (801b1c8 <dhcp_create_msg+0x194>)
 801b04c:	f240 7269 	movw	r2, #1897	@ 0x769
 801b050:	495e      	ldr	r1, [pc, #376]	@ (801b1cc <dhcp_create_msg+0x198>)
 801b052:	485f      	ldr	r0, [pc, #380]	@ (801b1d0 <dhcp_create_msg+0x19c>)
 801b054:	f003 fe0e 	bl	801ec74 <iprintf>
 801b058:	2300      	movs	r3, #0
 801b05a:	e0b1      	b.n	801b1c0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801b05c:	68bb      	ldr	r3, [r7, #8]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d108      	bne.n	801b074 <dhcp_create_msg+0x40>
 801b062:	4b59      	ldr	r3, [pc, #356]	@ (801b1c8 <dhcp_create_msg+0x194>)
 801b064:	f240 726a 	movw	r2, #1898	@ 0x76a
 801b068:	495a      	ldr	r1, [pc, #360]	@ (801b1d4 <dhcp_create_msg+0x1a0>)
 801b06a:	4859      	ldr	r0, [pc, #356]	@ (801b1d0 <dhcp_create_msg+0x19c>)
 801b06c:	f003 fe02 	bl	801ec74 <iprintf>
 801b070:	2300      	movs	r3, #0
 801b072:	e0a5      	b.n	801b1c0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801b074:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b078:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801b07c:	2036      	movs	r0, #54	@ 0x36
 801b07e:	f7f6 fc59 	bl	8011934 <pbuf_alloc>
 801b082:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801b084:	69bb      	ldr	r3, [r7, #24]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d101      	bne.n	801b08e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801b08a:	2300      	movs	r3, #0
 801b08c:	e098      	b.n	801b1c0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801b08e:	69bb      	ldr	r3, [r7, #24]
 801b090:	895b      	ldrh	r3, [r3, #10]
 801b092:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801b096:	d206      	bcs.n	801b0a6 <dhcp_create_msg+0x72>
 801b098:	4b4b      	ldr	r3, [pc, #300]	@ (801b1c8 <dhcp_create_msg+0x194>)
 801b09a:	f240 7271 	movw	r2, #1905	@ 0x771
 801b09e:	494e      	ldr	r1, [pc, #312]	@ (801b1d8 <dhcp_create_msg+0x1a4>)
 801b0a0:	484b      	ldr	r0, [pc, #300]	@ (801b1d0 <dhcp_create_msg+0x19c>)
 801b0a2:	f003 fde7 	bl	801ec74 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801b0a6:	79fb      	ldrb	r3, [r7, #7]
 801b0a8:	2b03      	cmp	r3, #3
 801b0aa:	d103      	bne.n	801b0b4 <dhcp_create_msg+0x80>
 801b0ac:	68bb      	ldr	r3, [r7, #8]
 801b0ae:	795b      	ldrb	r3, [r3, #5]
 801b0b0:	2b03      	cmp	r3, #3
 801b0b2:	d10d      	bne.n	801b0d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801b0b4:	68bb      	ldr	r3, [r7, #8]
 801b0b6:	799b      	ldrb	r3, [r3, #6]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d105      	bne.n	801b0c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801b0bc:	f003 f80a 	bl	801e0d4 <rand>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	461a      	mov	r2, r3
 801b0c4:	4b45      	ldr	r3, [pc, #276]	@ (801b1dc <dhcp_create_msg+0x1a8>)
 801b0c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801b0c8:	4b44      	ldr	r3, [pc, #272]	@ (801b1dc <dhcp_create_msg+0x1a8>)
 801b0ca:	681a      	ldr	r2, [r3, #0]
 801b0cc:	68bb      	ldr	r3, [r7, #8]
 801b0ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801b0d0:	69bb      	ldr	r3, [r7, #24]
 801b0d2:	685b      	ldr	r3, [r3, #4]
 801b0d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801b0d6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801b0da:	2100      	movs	r1, #0
 801b0dc:	6978      	ldr	r0, [r7, #20]
 801b0de:	f003 ff33 	bl	801ef48 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	2201      	movs	r2, #1
 801b0e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	2201      	movs	r2, #1
 801b0ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801b0f4:	697b      	ldr	r3, [r7, #20]
 801b0f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801b0f8:	68bb      	ldr	r3, [r7, #8]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7f5 f9f4 	bl	80104ea <lwip_htonl>
 801b102:	4602      	mov	r2, r0
 801b104:	697b      	ldr	r3, [r7, #20]
 801b106:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801b108:	79fb      	ldrb	r3, [r7, #7]
 801b10a:	2b08      	cmp	r3, #8
 801b10c:	d010      	beq.n	801b130 <dhcp_create_msg+0xfc>
 801b10e:	79fb      	ldrb	r3, [r7, #7]
 801b110:	2b04      	cmp	r3, #4
 801b112:	d00d      	beq.n	801b130 <dhcp_create_msg+0xfc>
 801b114:	79fb      	ldrb	r3, [r7, #7]
 801b116:	2b07      	cmp	r3, #7
 801b118:	d00a      	beq.n	801b130 <dhcp_create_msg+0xfc>
 801b11a:	79fb      	ldrb	r3, [r7, #7]
 801b11c:	2b03      	cmp	r3, #3
 801b11e:	d10c      	bne.n	801b13a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801b124:	2b05      	cmp	r3, #5
 801b126:	d003      	beq.n	801b130 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	795b      	ldrb	r3, [r3, #5]
 801b12c:	2b04      	cmp	r3, #4
 801b12e:	d104      	bne.n	801b13a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	3304      	adds	r3, #4
 801b134:	681a      	ldr	r2, [r3, #0]
 801b136:	697b      	ldr	r3, [r7, #20]
 801b138:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b13a:	2300      	movs	r3, #0
 801b13c:	83fb      	strh	r3, [r7, #30]
 801b13e:	e00c      	b.n	801b15a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801b140:	8bfa      	ldrh	r2, [r7, #30]
 801b142:	8bfb      	ldrh	r3, [r7, #30]
 801b144:	68f9      	ldr	r1, [r7, #12]
 801b146:	440a      	add	r2, r1
 801b148:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801b14c:	697a      	ldr	r2, [r7, #20]
 801b14e:	4413      	add	r3, r2
 801b150:	460a      	mov	r2, r1
 801b152:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b154:	8bfb      	ldrh	r3, [r7, #30]
 801b156:	3301      	adds	r3, #1
 801b158:	83fb      	strh	r3, [r7, #30]
 801b15a:	8bfb      	ldrh	r3, [r7, #30]
 801b15c:	2b05      	cmp	r3, #5
 801b15e:	d9ef      	bls.n	801b140 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801b160:	697b      	ldr	r3, [r7, #20]
 801b162:	2200      	movs	r2, #0
 801b164:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801b168:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801b16c:	2200      	movs	r2, #0
 801b16e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801b172:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801b176:	2200      	movs	r2, #0
 801b178:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801b17c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801b180:	2200      	movs	r2, #0
 801b182:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801b186:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801b18a:	697b      	ldr	r3, [r7, #20]
 801b18c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b190:	2301      	movs	r3, #1
 801b192:	2235      	movs	r2, #53	@ 0x35
 801b194:	2000      	movs	r0, #0
 801b196:	f7ff facf 	bl	801a738 <dhcp_option>
 801b19a:	4603      	mov	r3, r0
 801b19c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801b19e:	697b      	ldr	r3, [r7, #20]
 801b1a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b1a4:	79fa      	ldrb	r2, [r7, #7]
 801b1a6:	8a7b      	ldrh	r3, [r7, #18]
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7ff faf9 	bl	801a7a0 <dhcp_option_byte>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801b1b2:	683b      	ldr	r3, [r7, #0]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d002      	beq.n	801b1be <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	8a7a      	ldrh	r2, [r7, #18]
 801b1bc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801b1be:	69bb      	ldr	r3, [r7, #24]
}
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	3720      	adds	r7, #32
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}
 801b1c8:	080249d0 	.word	0x080249d0
 801b1cc:	08024cf0 	.word	0x08024cf0
 801b1d0:	08024a30 	.word	0x08024a30
 801b1d4:	08024d10 	.word	0x08024d10
 801b1d8:	08024d30 	.word	0x08024d30
 801b1dc:	20013e50 	.word	0x20013e50

0801b1e0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b084      	sub	sp, #16
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	60b9      	str	r1, [r7, #8]
 801b1ea:	607a      	str	r2, [r7, #4]
 801b1ec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801b1ee:	89fb      	ldrh	r3, [r7, #14]
 801b1f0:	1c5a      	adds	r2, r3, #1
 801b1f2:	81fa      	strh	r2, [r7, #14]
 801b1f4:	461a      	mov	r2, r3
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	4413      	add	r3, r2
 801b1fa:	22ff      	movs	r2, #255	@ 0xff
 801b1fc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b1fe:	e007      	b.n	801b210 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801b200:	89fb      	ldrh	r3, [r7, #14]
 801b202:	1c5a      	adds	r2, r3, #1
 801b204:	81fa      	strh	r2, [r7, #14]
 801b206:	461a      	mov	r2, r3
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	4413      	add	r3, r2
 801b20c:	2200      	movs	r2, #0
 801b20e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b210:	89fb      	ldrh	r3, [r7, #14]
 801b212:	2b43      	cmp	r3, #67	@ 0x43
 801b214:	d904      	bls.n	801b220 <dhcp_option_trailer+0x40>
 801b216:	89fb      	ldrh	r3, [r7, #14]
 801b218:	f003 0303 	and.w	r3, r3, #3
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d002      	beq.n	801b226 <dhcp_option_trailer+0x46>
 801b220:	89fb      	ldrh	r3, [r7, #14]
 801b222:	2b43      	cmp	r3, #67	@ 0x43
 801b224:	d9ec      	bls.n	801b200 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801b226:	89fb      	ldrh	r3, [r7, #14]
 801b228:	33f0      	adds	r3, #240	@ 0xf0
 801b22a:	b29b      	uxth	r3, r3
 801b22c:	4619      	mov	r1, r3
 801b22e:	6878      	ldr	r0, [r7, #4]
 801b230:	f7f6 fce2 	bl	8011bf8 <pbuf_realloc>
}
 801b234:	bf00      	nop
 801b236:	3710      	adds	r7, #16
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}

0801b23c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801b23c:	b480      	push	{r7}
 801b23e:	b085      	sub	sp, #20
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d017      	beq.n	801b27a <dhcp_supplied_address+0x3e>
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d013      	beq.n	801b27a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b256:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	795b      	ldrb	r3, [r3, #5]
 801b25c:	2b0a      	cmp	r3, #10
 801b25e:	d007      	beq.n	801b270 <dhcp_supplied_address+0x34>
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	795b      	ldrb	r3, [r3, #5]
 801b264:	2b05      	cmp	r3, #5
 801b266:	d003      	beq.n	801b270 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b26c:	2b04      	cmp	r3, #4
 801b26e:	d101      	bne.n	801b274 <dhcp_supplied_address+0x38>
 801b270:	2301      	movs	r3, #1
 801b272:	e000      	b.n	801b276 <dhcp_supplied_address+0x3a>
 801b274:	2300      	movs	r3, #0
 801b276:	b2db      	uxtb	r3, r3
 801b278:	e000      	b.n	801b27c <dhcp_supplied_address+0x40>
  }
  return 0;
 801b27a:	2300      	movs	r3, #0
}
 801b27c:	4618      	mov	r0, r3
 801b27e:	3714      	adds	r7, #20
 801b280:	46bd      	mov	sp, r7
 801b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b286:	4770      	bx	lr

0801b288 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b082      	sub	sp, #8
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b290:	492b      	ldr	r1, [pc, #172]	@ (801b340 <etharp_free_entry+0xb8>)
 801b292:	687a      	ldr	r2, [r7, #4]
 801b294:	4613      	mov	r3, r2
 801b296:	005b      	lsls	r3, r3, #1
 801b298:	4413      	add	r3, r2
 801b29a:	00db      	lsls	r3, r3, #3
 801b29c:	440b      	add	r3, r1
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d013      	beq.n	801b2cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b2a4:	4926      	ldr	r1, [pc, #152]	@ (801b340 <etharp_free_entry+0xb8>)
 801b2a6:	687a      	ldr	r2, [r7, #4]
 801b2a8:	4613      	mov	r3, r2
 801b2aa:	005b      	lsls	r3, r3, #1
 801b2ac:	4413      	add	r3, r2
 801b2ae:	00db      	lsls	r3, r3, #3
 801b2b0:	440b      	add	r3, r1
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	f7f6 fe25 	bl	8011f04 <pbuf_free>
    arp_table[i].q = NULL;
 801b2ba:	4921      	ldr	r1, [pc, #132]	@ (801b340 <etharp_free_entry+0xb8>)
 801b2bc:	687a      	ldr	r2, [r7, #4]
 801b2be:	4613      	mov	r3, r2
 801b2c0:	005b      	lsls	r3, r3, #1
 801b2c2:	4413      	add	r3, r2
 801b2c4:	00db      	lsls	r3, r3, #3
 801b2c6:	440b      	add	r3, r1
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b2cc:	491c      	ldr	r1, [pc, #112]	@ (801b340 <etharp_free_entry+0xb8>)
 801b2ce:	687a      	ldr	r2, [r7, #4]
 801b2d0:	4613      	mov	r3, r2
 801b2d2:	005b      	lsls	r3, r3, #1
 801b2d4:	4413      	add	r3, r2
 801b2d6:	00db      	lsls	r3, r3, #3
 801b2d8:	440b      	add	r3, r1
 801b2da:	3314      	adds	r3, #20
 801b2dc:	2200      	movs	r2, #0
 801b2de:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801b2e0:	4917      	ldr	r1, [pc, #92]	@ (801b340 <etharp_free_entry+0xb8>)
 801b2e2:	687a      	ldr	r2, [r7, #4]
 801b2e4:	4613      	mov	r3, r2
 801b2e6:	005b      	lsls	r3, r3, #1
 801b2e8:	4413      	add	r3, r2
 801b2ea:	00db      	lsls	r3, r3, #3
 801b2ec:	440b      	add	r3, r1
 801b2ee:	3312      	adds	r3, #18
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801b2f4:	4912      	ldr	r1, [pc, #72]	@ (801b340 <etharp_free_entry+0xb8>)
 801b2f6:	687a      	ldr	r2, [r7, #4]
 801b2f8:	4613      	mov	r3, r2
 801b2fa:	005b      	lsls	r3, r3, #1
 801b2fc:	4413      	add	r3, r2
 801b2fe:	00db      	lsls	r3, r3, #3
 801b300:	440b      	add	r3, r1
 801b302:	3308      	adds	r3, #8
 801b304:	2200      	movs	r2, #0
 801b306:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801b308:	490d      	ldr	r1, [pc, #52]	@ (801b340 <etharp_free_entry+0xb8>)
 801b30a:	687a      	ldr	r2, [r7, #4]
 801b30c:	4613      	mov	r3, r2
 801b30e:	005b      	lsls	r3, r3, #1
 801b310:	4413      	add	r3, r2
 801b312:	00db      	lsls	r3, r3, #3
 801b314:	440b      	add	r3, r1
 801b316:	3304      	adds	r3, #4
 801b318:	2200      	movs	r2, #0
 801b31a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801b31c:	4908      	ldr	r1, [pc, #32]	@ (801b340 <etharp_free_entry+0xb8>)
 801b31e:	687a      	ldr	r2, [r7, #4]
 801b320:	4613      	mov	r3, r2
 801b322:	005b      	lsls	r3, r3, #1
 801b324:	4413      	add	r3, r2
 801b326:	00db      	lsls	r3, r3, #3
 801b328:	440b      	add	r3, r1
 801b32a:	3308      	adds	r3, #8
 801b32c:	4a05      	ldr	r2, [pc, #20]	@ (801b344 <etharp_free_entry+0xbc>)
 801b32e:	3304      	adds	r3, #4
 801b330:	6810      	ldr	r0, [r2, #0]
 801b332:	6018      	str	r0, [r3, #0]
 801b334:	8892      	ldrh	r2, [r2, #4]
 801b336:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801b338:	bf00      	nop
 801b33a:	3708      	adds	r7, #8
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	20013e54 	.word	0x20013e54
 801b344:	080712a8 	.word	0x080712a8

0801b348 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b082      	sub	sp, #8
 801b34c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b34e:	2300      	movs	r3, #0
 801b350:	607b      	str	r3, [r7, #4]
 801b352:	e09a      	b.n	801b48a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 801b354:	4951      	ldr	r1, [pc, #324]	@ (801b49c <etharp_tmr+0x154>)
 801b356:	687a      	ldr	r2, [r7, #4]
 801b358:	4613      	mov	r3, r2
 801b35a:	005b      	lsls	r3, r3, #1
 801b35c:	4413      	add	r3, r2
 801b35e:	00db      	lsls	r3, r3, #3
 801b360:	440b      	add	r3, r1
 801b362:	3314      	adds	r3, #20
 801b364:	781b      	ldrb	r3, [r3, #0]
 801b366:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b368:	78fb      	ldrb	r3, [r7, #3]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	f000 808a 	beq.w	801b484 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 801b370:	78fb      	ldrb	r3, [r7, #3]
 801b372:	2b05      	cmp	r3, #5
 801b374:	f000 8086 	beq.w	801b484 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b378:	4948      	ldr	r1, [pc, #288]	@ (801b49c <etharp_tmr+0x154>)
 801b37a:	687a      	ldr	r2, [r7, #4]
 801b37c:	4613      	mov	r3, r2
 801b37e:	005b      	lsls	r3, r3, #1
 801b380:	4413      	add	r3, r2
 801b382:	00db      	lsls	r3, r3, #3
 801b384:	440b      	add	r3, r1
 801b386:	3312      	adds	r3, #18
 801b388:	881b      	ldrh	r3, [r3, #0]
 801b38a:	3301      	adds	r3, #1
 801b38c:	b298      	uxth	r0, r3
 801b38e:	4943      	ldr	r1, [pc, #268]	@ (801b49c <etharp_tmr+0x154>)
 801b390:	687a      	ldr	r2, [r7, #4]
 801b392:	4613      	mov	r3, r2
 801b394:	005b      	lsls	r3, r3, #1
 801b396:	4413      	add	r3, r2
 801b398:	00db      	lsls	r3, r3, #3
 801b39a:	440b      	add	r3, r1
 801b39c:	3312      	adds	r3, #18
 801b39e:	4602      	mov	r2, r0
 801b3a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b3a2:	493e      	ldr	r1, [pc, #248]	@ (801b49c <etharp_tmr+0x154>)
 801b3a4:	687a      	ldr	r2, [r7, #4]
 801b3a6:	4613      	mov	r3, r2
 801b3a8:	005b      	lsls	r3, r3, #1
 801b3aa:	4413      	add	r3, r2
 801b3ac:	00db      	lsls	r3, r3, #3
 801b3ae:	440b      	add	r3, r1
 801b3b0:	3312      	adds	r3, #18
 801b3b2:	881b      	ldrh	r3, [r3, #0]
 801b3b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801b3b8:	d215      	bcs.n	801b3e6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b3ba:	4938      	ldr	r1, [pc, #224]	@ (801b49c <etharp_tmr+0x154>)
 801b3bc:	687a      	ldr	r2, [r7, #4]
 801b3be:	4613      	mov	r3, r2
 801b3c0:	005b      	lsls	r3, r3, #1
 801b3c2:	4413      	add	r3, r2
 801b3c4:	00db      	lsls	r3, r3, #3
 801b3c6:	440b      	add	r3, r1
 801b3c8:	3314      	adds	r3, #20
 801b3ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b3cc:	2b01      	cmp	r3, #1
 801b3ce:	d10e      	bne.n	801b3ee <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b3d0:	4932      	ldr	r1, [pc, #200]	@ (801b49c <etharp_tmr+0x154>)
 801b3d2:	687a      	ldr	r2, [r7, #4]
 801b3d4:	4613      	mov	r3, r2
 801b3d6:	005b      	lsls	r3, r3, #1
 801b3d8:	4413      	add	r3, r2
 801b3da:	00db      	lsls	r3, r3, #3
 801b3dc:	440b      	add	r3, r1
 801b3de:	3312      	adds	r3, #18
 801b3e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b3e2:	2b04      	cmp	r3, #4
 801b3e4:	d903      	bls.n	801b3ee <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b3e6:	6878      	ldr	r0, [r7, #4]
 801b3e8:	f7ff ff4e 	bl	801b288 <etharp_free_entry>
 801b3ec:	e04a      	b.n	801b484 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b3ee:	492b      	ldr	r1, [pc, #172]	@ (801b49c <etharp_tmr+0x154>)
 801b3f0:	687a      	ldr	r2, [r7, #4]
 801b3f2:	4613      	mov	r3, r2
 801b3f4:	005b      	lsls	r3, r3, #1
 801b3f6:	4413      	add	r3, r2
 801b3f8:	00db      	lsls	r3, r3, #3
 801b3fa:	440b      	add	r3, r1
 801b3fc:	3314      	adds	r3, #20
 801b3fe:	781b      	ldrb	r3, [r3, #0]
 801b400:	2b03      	cmp	r3, #3
 801b402:	d10a      	bne.n	801b41a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b404:	4925      	ldr	r1, [pc, #148]	@ (801b49c <etharp_tmr+0x154>)
 801b406:	687a      	ldr	r2, [r7, #4]
 801b408:	4613      	mov	r3, r2
 801b40a:	005b      	lsls	r3, r3, #1
 801b40c:	4413      	add	r3, r2
 801b40e:	00db      	lsls	r3, r3, #3
 801b410:	440b      	add	r3, r1
 801b412:	3314      	adds	r3, #20
 801b414:	2204      	movs	r2, #4
 801b416:	701a      	strb	r2, [r3, #0]
 801b418:	e034      	b.n	801b484 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b41a:	4920      	ldr	r1, [pc, #128]	@ (801b49c <etharp_tmr+0x154>)
 801b41c:	687a      	ldr	r2, [r7, #4]
 801b41e:	4613      	mov	r3, r2
 801b420:	005b      	lsls	r3, r3, #1
 801b422:	4413      	add	r3, r2
 801b424:	00db      	lsls	r3, r3, #3
 801b426:	440b      	add	r3, r1
 801b428:	3314      	adds	r3, #20
 801b42a:	781b      	ldrb	r3, [r3, #0]
 801b42c:	2b04      	cmp	r3, #4
 801b42e:	d10a      	bne.n	801b446 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b430:	491a      	ldr	r1, [pc, #104]	@ (801b49c <etharp_tmr+0x154>)
 801b432:	687a      	ldr	r2, [r7, #4]
 801b434:	4613      	mov	r3, r2
 801b436:	005b      	lsls	r3, r3, #1
 801b438:	4413      	add	r3, r2
 801b43a:	00db      	lsls	r3, r3, #3
 801b43c:	440b      	add	r3, r1
 801b43e:	3314      	adds	r3, #20
 801b440:	2202      	movs	r2, #2
 801b442:	701a      	strb	r2, [r3, #0]
 801b444:	e01e      	b.n	801b484 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b446:	4915      	ldr	r1, [pc, #84]	@ (801b49c <etharp_tmr+0x154>)
 801b448:	687a      	ldr	r2, [r7, #4]
 801b44a:	4613      	mov	r3, r2
 801b44c:	005b      	lsls	r3, r3, #1
 801b44e:	4413      	add	r3, r2
 801b450:	00db      	lsls	r3, r3, #3
 801b452:	440b      	add	r3, r1
 801b454:	3314      	adds	r3, #20
 801b456:	781b      	ldrb	r3, [r3, #0]
 801b458:	2b01      	cmp	r3, #1
 801b45a:	d113      	bne.n	801b484 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b45c:	490f      	ldr	r1, [pc, #60]	@ (801b49c <etharp_tmr+0x154>)
 801b45e:	687a      	ldr	r2, [r7, #4]
 801b460:	4613      	mov	r3, r2
 801b462:	005b      	lsls	r3, r3, #1
 801b464:	4413      	add	r3, r2
 801b466:	00db      	lsls	r3, r3, #3
 801b468:	440b      	add	r3, r1
 801b46a:	3308      	adds	r3, #8
 801b46c:	6818      	ldr	r0, [r3, #0]
 801b46e:	687a      	ldr	r2, [r7, #4]
 801b470:	4613      	mov	r3, r2
 801b472:	005b      	lsls	r3, r3, #1
 801b474:	4413      	add	r3, r2
 801b476:	00db      	lsls	r3, r3, #3
 801b478:	4a08      	ldr	r2, [pc, #32]	@ (801b49c <etharp_tmr+0x154>)
 801b47a:	4413      	add	r3, r2
 801b47c:	3304      	adds	r3, #4
 801b47e:	4619      	mov	r1, r3
 801b480:	f000 feae 	bl	801c1e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	3301      	adds	r3, #1
 801b488:	607b      	str	r3, [r7, #4]
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2b09      	cmp	r3, #9
 801b48e:	f77f af61 	ble.w	801b354 <etharp_tmr+0xc>
      }
    }
  }
}
 801b492:	bf00      	nop
 801b494:	bf00      	nop
 801b496:	3708      	adds	r7, #8
 801b498:	46bd      	mov	sp, r7
 801b49a:	bd80      	pop	{r7, pc}
 801b49c:	20013e54 	.word	0x20013e54

0801b4a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b08a      	sub	sp, #40	@ 0x28
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	60f8      	str	r0, [r7, #12]
 801b4a8:	460b      	mov	r3, r1
 801b4aa:	607a      	str	r2, [r7, #4]
 801b4ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b4ae:	230a      	movs	r3, #10
 801b4b0:	843b      	strh	r3, [r7, #32]
 801b4b2:	230a      	movs	r3, #10
 801b4b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801b4b6:	230a      	movs	r3, #10
 801b4b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b4be:	230a      	movs	r3, #10
 801b4c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	83bb      	strh	r3, [r7, #28]
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	837b      	strh	r3, [r7, #26]
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b4d2:	e0b1      	b.n	801b638 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 801b4d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b4d8:	49a7      	ldr	r1, [pc, #668]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b4da:	4613      	mov	r3, r2
 801b4dc:	005b      	lsls	r3, r3, #1
 801b4de:	4413      	add	r3, r2
 801b4e0:	00db      	lsls	r3, r3, #3
 801b4e2:	440b      	add	r3, r1
 801b4e4:	3314      	adds	r3, #20
 801b4e6:	781b      	ldrb	r3, [r3, #0]
 801b4e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b4ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b4ee:	2b0a      	cmp	r3, #10
 801b4f0:	d105      	bne.n	801b4fe <etharp_find_entry+0x5e>
 801b4f2:	7dfb      	ldrb	r3, [r7, #23]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d102      	bne.n	801b4fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b4f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b4fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801b4fc:	e098      	b.n	801b630 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b4fe:	7dfb      	ldrb	r3, [r7, #23]
 801b500:	2b00      	cmp	r3, #0
 801b502:	f000 8095 	beq.w	801b630 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b506:	7dfb      	ldrb	r3, [r7, #23]
 801b508:	2b01      	cmp	r3, #1
 801b50a:	d009      	beq.n	801b520 <etharp_find_entry+0x80>
 801b50c:	7dfb      	ldrb	r3, [r7, #23]
 801b50e:	2b01      	cmp	r3, #1
 801b510:	d806      	bhi.n	801b520 <etharp_find_entry+0x80>
 801b512:	4b9a      	ldr	r3, [pc, #616]	@ (801b77c <etharp_find_entry+0x2dc>)
 801b514:	f240 1223 	movw	r2, #291	@ 0x123
 801b518:	4999      	ldr	r1, [pc, #612]	@ (801b780 <etharp_find_entry+0x2e0>)
 801b51a:	489a      	ldr	r0, [pc, #616]	@ (801b784 <etharp_find_entry+0x2e4>)
 801b51c:	f003 fbaa 	bl	801ec74 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d020      	beq.n	801b568 <etharp_find_entry+0xc8>
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	6819      	ldr	r1, [r3, #0]
 801b52a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b52e:	4892      	ldr	r0, [pc, #584]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b530:	4613      	mov	r3, r2
 801b532:	005b      	lsls	r3, r3, #1
 801b534:	4413      	add	r3, r2
 801b536:	00db      	lsls	r3, r3, #3
 801b538:	4403      	add	r3, r0
 801b53a:	3304      	adds	r3, #4
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	4299      	cmp	r1, r3
 801b540:	d112      	bne.n	801b568 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d00c      	beq.n	801b562 <etharp_find_entry+0xc2>
 801b548:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b54c:	498a      	ldr	r1, [pc, #552]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b54e:	4613      	mov	r3, r2
 801b550:	005b      	lsls	r3, r3, #1
 801b552:	4413      	add	r3, r2
 801b554:	00db      	lsls	r3, r3, #3
 801b556:	440b      	add	r3, r1
 801b558:	3308      	adds	r3, #8
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	429a      	cmp	r2, r3
 801b560:	d102      	bne.n	801b568 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b562:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b566:	e103      	b.n	801b770 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b568:	7dfb      	ldrb	r3, [r7, #23]
 801b56a:	2b01      	cmp	r3, #1
 801b56c:	d140      	bne.n	801b5f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b56e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b572:	4981      	ldr	r1, [pc, #516]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b574:	4613      	mov	r3, r2
 801b576:	005b      	lsls	r3, r3, #1
 801b578:	4413      	add	r3, r2
 801b57a:	00db      	lsls	r3, r3, #3
 801b57c:	440b      	add	r3, r1
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d01a      	beq.n	801b5ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b584:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b588:	497b      	ldr	r1, [pc, #492]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b58a:	4613      	mov	r3, r2
 801b58c:	005b      	lsls	r3, r3, #1
 801b58e:	4413      	add	r3, r2
 801b590:	00db      	lsls	r3, r3, #3
 801b592:	440b      	add	r3, r1
 801b594:	3312      	adds	r3, #18
 801b596:	881b      	ldrh	r3, [r3, #0]
 801b598:	8bba      	ldrh	r2, [r7, #28]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d848      	bhi.n	801b630 <etharp_find_entry+0x190>
            old_queue = i;
 801b59e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b5a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b5a2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b5a6:	4974      	ldr	r1, [pc, #464]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b5a8:	4613      	mov	r3, r2
 801b5aa:	005b      	lsls	r3, r3, #1
 801b5ac:	4413      	add	r3, r2
 801b5ae:	00db      	lsls	r3, r3, #3
 801b5b0:	440b      	add	r3, r1
 801b5b2:	3312      	adds	r3, #18
 801b5b4:	881b      	ldrh	r3, [r3, #0]
 801b5b6:	83bb      	strh	r3, [r7, #28]
 801b5b8:	e03a      	b.n	801b630 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b5ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b5be:	496e      	ldr	r1, [pc, #440]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b5c0:	4613      	mov	r3, r2
 801b5c2:	005b      	lsls	r3, r3, #1
 801b5c4:	4413      	add	r3, r2
 801b5c6:	00db      	lsls	r3, r3, #3
 801b5c8:	440b      	add	r3, r1
 801b5ca:	3312      	adds	r3, #18
 801b5cc:	881b      	ldrh	r3, [r3, #0]
 801b5ce:	8b7a      	ldrh	r2, [r7, #26]
 801b5d0:	429a      	cmp	r2, r3
 801b5d2:	d82d      	bhi.n	801b630 <etharp_find_entry+0x190>
            old_pending = i;
 801b5d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b5d6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801b5d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b5dc:	4966      	ldr	r1, [pc, #408]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b5de:	4613      	mov	r3, r2
 801b5e0:	005b      	lsls	r3, r3, #1
 801b5e2:	4413      	add	r3, r2
 801b5e4:	00db      	lsls	r3, r3, #3
 801b5e6:	440b      	add	r3, r1
 801b5e8:	3312      	adds	r3, #18
 801b5ea:	881b      	ldrh	r3, [r3, #0]
 801b5ec:	837b      	strh	r3, [r7, #26]
 801b5ee:	e01f      	b.n	801b630 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b5f0:	7dfb      	ldrb	r3, [r7, #23]
 801b5f2:	2b01      	cmp	r3, #1
 801b5f4:	d91c      	bls.n	801b630 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 801b5f6:	7dfb      	ldrb	r3, [r7, #23]
 801b5f8:	2b04      	cmp	r3, #4
 801b5fa:	d819      	bhi.n	801b630 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b5fc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b600:	495d      	ldr	r1, [pc, #372]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b602:	4613      	mov	r3, r2
 801b604:	005b      	lsls	r3, r3, #1
 801b606:	4413      	add	r3, r2
 801b608:	00db      	lsls	r3, r3, #3
 801b60a:	440b      	add	r3, r1
 801b60c:	3312      	adds	r3, #18
 801b60e:	881b      	ldrh	r3, [r3, #0]
 801b610:	8b3a      	ldrh	r2, [r7, #24]
 801b612:	429a      	cmp	r2, r3
 801b614:	d80c      	bhi.n	801b630 <etharp_find_entry+0x190>
            old_stable = i;
 801b616:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b618:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801b61a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b61e:	4956      	ldr	r1, [pc, #344]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b620:	4613      	mov	r3, r2
 801b622:	005b      	lsls	r3, r3, #1
 801b624:	4413      	add	r3, r2
 801b626:	00db      	lsls	r3, r3, #3
 801b628:	440b      	add	r3, r1
 801b62a:	3312      	adds	r3, #18
 801b62c:	881b      	ldrh	r3, [r3, #0]
 801b62e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b630:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b632:	3301      	adds	r3, #1
 801b634:	b29b      	uxth	r3, r3
 801b636:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b638:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b63c:	2b09      	cmp	r3, #9
 801b63e:	f77f af49 	ble.w	801b4d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b642:	7afb      	ldrb	r3, [r7, #11]
 801b644:	f003 0302 	and.w	r3, r3, #2
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d108      	bne.n	801b65e <etharp_find_entry+0x1be>
 801b64c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b650:	2b0a      	cmp	r3, #10
 801b652:	d107      	bne.n	801b664 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b654:	7afb      	ldrb	r3, [r7, #11]
 801b656:	f003 0301 	and.w	r3, r3, #1
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d102      	bne.n	801b664 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b65e:	f04f 33ff 	mov.w	r3, #4294967295
 801b662:	e085      	b.n	801b770 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b664:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b668:	2b09      	cmp	r3, #9
 801b66a:	dc02      	bgt.n	801b672 <etharp_find_entry+0x1d2>
    i = empty;
 801b66c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b66e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b670:	e039      	b.n	801b6e6 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b672:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b676:	2b09      	cmp	r3, #9
 801b678:	dc14      	bgt.n	801b6a4 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 801b67a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b67c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b67e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b682:	493d      	ldr	r1, [pc, #244]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b684:	4613      	mov	r3, r2
 801b686:	005b      	lsls	r3, r3, #1
 801b688:	4413      	add	r3, r2
 801b68a:	00db      	lsls	r3, r3, #3
 801b68c:	440b      	add	r3, r1
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d018      	beq.n	801b6c6 <etharp_find_entry+0x226>
 801b694:	4b39      	ldr	r3, [pc, #228]	@ (801b77c <etharp_find_entry+0x2dc>)
 801b696:	f240 126d 	movw	r2, #365	@ 0x16d
 801b69a:	493b      	ldr	r1, [pc, #236]	@ (801b788 <etharp_find_entry+0x2e8>)
 801b69c:	4839      	ldr	r0, [pc, #228]	@ (801b784 <etharp_find_entry+0x2e4>)
 801b69e:	f003 fae9 	bl	801ec74 <iprintf>
 801b6a2:	e010      	b.n	801b6c6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b6a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b6a8:	2b09      	cmp	r3, #9
 801b6aa:	dc02      	bgt.n	801b6b2 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 801b6ac:	8c3b      	ldrh	r3, [r7, #32]
 801b6ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b6b0:	e009      	b.n	801b6c6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b6b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b6b6:	2b09      	cmp	r3, #9
 801b6b8:	dc02      	bgt.n	801b6c0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b6ba:	8bfb      	ldrh	r3, [r7, #30]
 801b6bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b6be:	e002      	b.n	801b6c6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b6c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b6c4:	e054      	b.n	801b770 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b6c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b6ca:	2b09      	cmp	r3, #9
 801b6cc:	dd06      	ble.n	801b6dc <etharp_find_entry+0x23c>
 801b6ce:	4b2b      	ldr	r3, [pc, #172]	@ (801b77c <etharp_find_entry+0x2dc>)
 801b6d0:	f240 127f 	movw	r2, #383	@ 0x17f
 801b6d4:	492d      	ldr	r1, [pc, #180]	@ (801b78c <etharp_find_entry+0x2ec>)
 801b6d6:	482b      	ldr	r0, [pc, #172]	@ (801b784 <etharp_find_entry+0x2e4>)
 801b6d8:	f003 facc 	bl	801ec74 <iprintf>
    etharp_free_entry(i);
 801b6dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	f7ff fdd1 	bl	801b288 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b6e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b6ea:	2b09      	cmp	r3, #9
 801b6ec:	dd06      	ble.n	801b6fc <etharp_find_entry+0x25c>
 801b6ee:	4b23      	ldr	r3, [pc, #140]	@ (801b77c <etharp_find_entry+0x2dc>)
 801b6f0:	f240 1283 	movw	r2, #387	@ 0x183
 801b6f4:	4925      	ldr	r1, [pc, #148]	@ (801b78c <etharp_find_entry+0x2ec>)
 801b6f6:	4823      	ldr	r0, [pc, #140]	@ (801b784 <etharp_find_entry+0x2e4>)
 801b6f8:	f003 fabc 	bl	801ec74 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b6fc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b700:	491d      	ldr	r1, [pc, #116]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b702:	4613      	mov	r3, r2
 801b704:	005b      	lsls	r3, r3, #1
 801b706:	4413      	add	r3, r2
 801b708:	00db      	lsls	r3, r3, #3
 801b70a:	440b      	add	r3, r1
 801b70c:	3314      	adds	r3, #20
 801b70e:	781b      	ldrb	r3, [r3, #0]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d006      	beq.n	801b722 <etharp_find_entry+0x282>
 801b714:	4b19      	ldr	r3, [pc, #100]	@ (801b77c <etharp_find_entry+0x2dc>)
 801b716:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801b71a:	491d      	ldr	r1, [pc, #116]	@ (801b790 <etharp_find_entry+0x2f0>)
 801b71c:	4819      	ldr	r0, [pc, #100]	@ (801b784 <etharp_find_entry+0x2e4>)
 801b71e:	f003 faa9 	bl	801ec74 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b722:	68fb      	ldr	r3, [r7, #12]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d00b      	beq.n	801b740 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b728:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	6819      	ldr	r1, [r3, #0]
 801b730:	4811      	ldr	r0, [pc, #68]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b732:	4613      	mov	r3, r2
 801b734:	005b      	lsls	r3, r3, #1
 801b736:	4413      	add	r3, r2
 801b738:	00db      	lsls	r3, r3, #3
 801b73a:	4403      	add	r3, r0
 801b73c:	3304      	adds	r3, #4
 801b73e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b740:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b744:	490c      	ldr	r1, [pc, #48]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b746:	4613      	mov	r3, r2
 801b748:	005b      	lsls	r3, r3, #1
 801b74a:	4413      	add	r3, r2
 801b74c:	00db      	lsls	r3, r3, #3
 801b74e:	440b      	add	r3, r1
 801b750:	3312      	adds	r3, #18
 801b752:	2200      	movs	r2, #0
 801b754:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b756:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b75a:	4907      	ldr	r1, [pc, #28]	@ (801b778 <etharp_find_entry+0x2d8>)
 801b75c:	4613      	mov	r3, r2
 801b75e:	005b      	lsls	r3, r3, #1
 801b760:	4413      	add	r3, r2
 801b762:	00db      	lsls	r3, r3, #3
 801b764:	440b      	add	r3, r1
 801b766:	3308      	adds	r3, #8
 801b768:	687a      	ldr	r2, [r7, #4]
 801b76a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b76c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801b770:	4618      	mov	r0, r3
 801b772:	3728      	adds	r7, #40	@ 0x28
 801b774:	46bd      	mov	sp, r7
 801b776:	bd80      	pop	{r7, pc}
 801b778:	20013e54 	.word	0x20013e54
 801b77c:	08024d70 	.word	0x08024d70
 801b780:	08024da8 	.word	0x08024da8
 801b784:	08024de8 	.word	0x08024de8
 801b788:	08024e10 	.word	0x08024e10
 801b78c:	08024e28 	.word	0x08024e28
 801b790:	08024e3c 	.word	0x08024e3c

0801b794 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b088      	sub	sp, #32
 801b798:	af02      	add	r7, sp, #8
 801b79a:	60f8      	str	r0, [r7, #12]
 801b79c:	60b9      	str	r1, [r7, #8]
 801b79e:	607a      	str	r2, [r7, #4]
 801b7a0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b7a8:	2b06      	cmp	r3, #6
 801b7aa:	d006      	beq.n	801b7ba <etharp_update_arp_entry+0x26>
 801b7ac:	4b58      	ldr	r3, [pc, #352]	@ (801b910 <etharp_update_arp_entry+0x17c>)
 801b7ae:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b7b2:	4958      	ldr	r1, [pc, #352]	@ (801b914 <etharp_update_arp_entry+0x180>)
 801b7b4:	4858      	ldr	r0, [pc, #352]	@ (801b918 <etharp_update_arp_entry+0x184>)
 801b7b6:	f003 fa5d 	bl	801ec74 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d012      	beq.n	801b7e6 <etharp_update_arp_entry+0x52>
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d00e      	beq.n	801b7e6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b7c8:	68bb      	ldr	r3, [r7, #8]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	68f9      	ldr	r1, [r7, #12]
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	f001 fa00 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801b7d4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d105      	bne.n	801b7e6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b7e2:	2be0      	cmp	r3, #224	@ 0xe0
 801b7e4:	d102      	bne.n	801b7ec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b7e6:	f06f 030f 	mvn.w	r3, #15
 801b7ea:	e08c      	b.n	801b906 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b7ec:	78fb      	ldrb	r3, [r7, #3]
 801b7ee:	68fa      	ldr	r2, [r7, #12]
 801b7f0:	4619      	mov	r1, r3
 801b7f2:	68b8      	ldr	r0, [r7, #8]
 801b7f4:	f7ff fe54 	bl	801b4a0 <etharp_find_entry>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b7fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b800:	2b00      	cmp	r3, #0
 801b802:	da02      	bge.n	801b80a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b804:	8afb      	ldrh	r3, [r7, #22]
 801b806:	b25b      	sxtb	r3, r3
 801b808:	e07d      	b.n	801b906 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 801b80a:	78fb      	ldrb	r3, [r7, #3]
 801b80c:	f003 0304 	and.w	r3, r3, #4
 801b810:	2b00      	cmp	r3, #0
 801b812:	d00b      	beq.n	801b82c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 801b814:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b818:	4940      	ldr	r1, [pc, #256]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b81a:	4613      	mov	r3, r2
 801b81c:	005b      	lsls	r3, r3, #1
 801b81e:	4413      	add	r3, r2
 801b820:	00db      	lsls	r3, r3, #3
 801b822:	440b      	add	r3, r1
 801b824:	3314      	adds	r3, #20
 801b826:	2205      	movs	r2, #5
 801b828:	701a      	strb	r2, [r3, #0]
 801b82a:	e019      	b.n	801b860 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 801b82c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b830:	493a      	ldr	r1, [pc, #232]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b832:	4613      	mov	r3, r2
 801b834:	005b      	lsls	r3, r3, #1
 801b836:	4413      	add	r3, r2
 801b838:	00db      	lsls	r3, r3, #3
 801b83a:	440b      	add	r3, r1
 801b83c:	3314      	adds	r3, #20
 801b83e:	781b      	ldrb	r3, [r3, #0]
 801b840:	2b05      	cmp	r3, #5
 801b842:	d102      	bne.n	801b84a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 801b844:	f06f 0305 	mvn.w	r3, #5
 801b848:	e05d      	b.n	801b906 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b84a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b84e:	4933      	ldr	r1, [pc, #204]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b850:	4613      	mov	r3, r2
 801b852:	005b      	lsls	r3, r3, #1
 801b854:	4413      	add	r3, r2
 801b856:	00db      	lsls	r3, r3, #3
 801b858:	440b      	add	r3, r1
 801b85a:	3314      	adds	r3, #20
 801b85c:	2202      	movs	r2, #2
 801b85e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b860:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b864:	492d      	ldr	r1, [pc, #180]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b866:	4613      	mov	r3, r2
 801b868:	005b      	lsls	r3, r3, #1
 801b86a:	4413      	add	r3, r2
 801b86c:	00db      	lsls	r3, r3, #3
 801b86e:	440b      	add	r3, r1
 801b870:	3308      	adds	r3, #8
 801b872:	68fa      	ldr	r2, [r7, #12]
 801b874:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b876:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b87a:	4613      	mov	r3, r2
 801b87c:	005b      	lsls	r3, r3, #1
 801b87e:	4413      	add	r3, r2
 801b880:	00db      	lsls	r3, r3, #3
 801b882:	3308      	adds	r3, #8
 801b884:	4a25      	ldr	r2, [pc, #148]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b886:	4413      	add	r3, r2
 801b888:	3304      	adds	r3, #4
 801b88a:	2206      	movs	r2, #6
 801b88c:	6879      	ldr	r1, [r7, #4]
 801b88e:	4618      	mov	r0, r3
 801b890:	f003 fc17 	bl	801f0c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b894:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b898:	4920      	ldr	r1, [pc, #128]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b89a:	4613      	mov	r3, r2
 801b89c:	005b      	lsls	r3, r3, #1
 801b89e:	4413      	add	r3, r2
 801b8a0:	00db      	lsls	r3, r3, #3
 801b8a2:	440b      	add	r3, r1
 801b8a4:	3312      	adds	r3, #18
 801b8a6:	2200      	movs	r2, #0
 801b8a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b8aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8ae:	491b      	ldr	r1, [pc, #108]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b8b0:	4613      	mov	r3, r2
 801b8b2:	005b      	lsls	r3, r3, #1
 801b8b4:	4413      	add	r3, r2
 801b8b6:	00db      	lsls	r3, r3, #3
 801b8b8:	440b      	add	r3, r1
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d021      	beq.n	801b904 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 801b8c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8c4:	4915      	ldr	r1, [pc, #84]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b8c6:	4613      	mov	r3, r2
 801b8c8:	005b      	lsls	r3, r3, #1
 801b8ca:	4413      	add	r3, r2
 801b8cc:	00db      	lsls	r3, r3, #3
 801b8ce:	440b      	add	r3, r1
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b8d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8d8:	4910      	ldr	r1, [pc, #64]	@ (801b91c <etharp_update_arp_entry+0x188>)
 801b8da:	4613      	mov	r3, r2
 801b8dc:	005b      	lsls	r3, r3, #1
 801b8de:	4413      	add	r3, r2
 801b8e0:	00db      	lsls	r3, r3, #3
 801b8e2:	440b      	add	r3, r1
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b8ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b8f2:	9300      	str	r3, [sp, #0]
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	6939      	ldr	r1, [r7, #16]
 801b8f8:	68f8      	ldr	r0, [r7, #12]
 801b8fa:	f002 f9b3 	bl	801dc64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b8fe:	6938      	ldr	r0, [r7, #16]
 801b900:	f7f6 fb00 	bl	8011f04 <pbuf_free>
  }
  return ERR_OK;
 801b904:	2300      	movs	r3, #0
}
 801b906:	4618      	mov	r0, r3
 801b908:	3718      	adds	r7, #24
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	08024d70 	.word	0x08024d70
 801b914:	08024e68 	.word	0x08024e68
 801b918:	08024de8 	.word	0x08024de8
 801b91c:	20013e54 	.word	0x20013e54

0801b920 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
 801b928:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 801b92a:	6878      	ldr	r0, [r7, #4]
 801b92c:	f000 fe2c 	bl	801c588 <ip4_route>
 801b930:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d102      	bne.n	801b93e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 801b938:	f06f 0303 	mvn.w	r3, #3
 801b93c:	e006      	b.n	801b94c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 801b93e:	2305      	movs	r3, #5
 801b940:	683a      	ldr	r2, [r7, #0]
 801b942:	6879      	ldr	r1, [r7, #4]
 801b944:	68f8      	ldr	r0, [r7, #12]
 801b946:	f7ff ff25 	bl	801b794 <etharp_update_arp_entry>
 801b94a:	4603      	mov	r3, r0
}
 801b94c:	4618      	mov	r0, r3
 801b94e:	3710      	adds	r7, #16
 801b950:	46bd      	mov	sp, r7
 801b952:	bd80      	pop	{r7, pc}

0801b954 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b084      	sub	sp, #16
 801b958:	af00      	add	r7, sp, #0
 801b95a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b95c:	2300      	movs	r3, #0
 801b95e:	60fb      	str	r3, [r7, #12]
 801b960:	e01e      	b.n	801b9a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b962:	4913      	ldr	r1, [pc, #76]	@ (801b9b0 <etharp_cleanup_netif+0x5c>)
 801b964:	68fa      	ldr	r2, [r7, #12]
 801b966:	4613      	mov	r3, r2
 801b968:	005b      	lsls	r3, r3, #1
 801b96a:	4413      	add	r3, r2
 801b96c:	00db      	lsls	r3, r3, #3
 801b96e:	440b      	add	r3, r1
 801b970:	3314      	adds	r3, #20
 801b972:	781b      	ldrb	r3, [r3, #0]
 801b974:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b976:	7afb      	ldrb	r3, [r7, #11]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d00e      	beq.n	801b99a <etharp_cleanup_netif+0x46>
 801b97c:	490c      	ldr	r1, [pc, #48]	@ (801b9b0 <etharp_cleanup_netif+0x5c>)
 801b97e:	68fa      	ldr	r2, [r7, #12]
 801b980:	4613      	mov	r3, r2
 801b982:	005b      	lsls	r3, r3, #1
 801b984:	4413      	add	r3, r2
 801b986:	00db      	lsls	r3, r3, #3
 801b988:	440b      	add	r3, r1
 801b98a:	3308      	adds	r3, #8
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	687a      	ldr	r2, [r7, #4]
 801b990:	429a      	cmp	r2, r3
 801b992:	d102      	bne.n	801b99a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b994:	68f8      	ldr	r0, [r7, #12]
 801b996:	f7ff fc77 	bl	801b288 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	3301      	adds	r3, #1
 801b99e:	60fb      	str	r3, [r7, #12]
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	2b09      	cmp	r3, #9
 801b9a4:	dddd      	ble.n	801b962 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b9a6:	bf00      	nop
 801b9a8:	bf00      	nop
 801b9aa:	3710      	adds	r7, #16
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	bd80      	pop	{r7, pc}
 801b9b0:	20013e54 	.word	0x20013e54

0801b9b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b9b4:	b5b0      	push	{r4, r5, r7, lr}
 801b9b6:	b08a      	sub	sp, #40	@ 0x28
 801b9b8:	af04      	add	r7, sp, #16
 801b9ba:	6078      	str	r0, [r7, #4]
 801b9bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b9be:	683b      	ldr	r3, [r7, #0]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d107      	bne.n	801b9d4 <etharp_input+0x20>
 801b9c4:	4b3f      	ldr	r3, [pc, #252]	@ (801bac4 <etharp_input+0x110>)
 801b9c6:	f240 228a 	movw	r2, #650	@ 0x28a
 801b9ca:	493f      	ldr	r1, [pc, #252]	@ (801bac8 <etharp_input+0x114>)
 801b9cc:	483f      	ldr	r0, [pc, #252]	@ (801bacc <etharp_input+0x118>)
 801b9ce:	f003 f951 	bl	801ec74 <iprintf>
 801b9d2:	e074      	b.n	801babe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	685b      	ldr	r3, [r3, #4]
 801b9d8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	881b      	ldrh	r3, [r3, #0]
 801b9de:	b29b      	uxth	r3, r3
 801b9e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b9e4:	d10c      	bne.n	801ba00 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b9ea:	2b06      	cmp	r3, #6
 801b9ec:	d108      	bne.n	801ba00 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b9ee:	697b      	ldr	r3, [r7, #20]
 801b9f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b9f2:	2b04      	cmp	r3, #4
 801b9f4:	d104      	bne.n	801ba00 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b9f6:	697b      	ldr	r3, [r7, #20]
 801b9f8:	885b      	ldrh	r3, [r3, #2]
 801b9fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b9fc:	2b08      	cmp	r3, #8
 801b9fe:	d003      	beq.n	801ba08 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ba00:	6878      	ldr	r0, [r7, #4]
 801ba02:	f7f6 fa7f 	bl	8011f04 <pbuf_free>
    return;
 801ba06:	e05a      	b.n	801babe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ba08:	697b      	ldr	r3, [r7, #20]
 801ba0a:	330e      	adds	r3, #14
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ba10:	697b      	ldr	r3, [r7, #20]
 801ba12:	3318      	adds	r3, #24
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ba18:	683b      	ldr	r3, [r7, #0]
 801ba1a:	3304      	adds	r3, #4
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d102      	bne.n	801ba28 <etharp_input+0x74>
    for_us = 0;
 801ba22:	2300      	movs	r3, #0
 801ba24:	74fb      	strb	r3, [r7, #19]
 801ba26:	e009      	b.n	801ba3c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ba28:	68ba      	ldr	r2, [r7, #8]
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	3304      	adds	r3, #4
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	429a      	cmp	r2, r3
 801ba32:	bf0c      	ite	eq
 801ba34:	2301      	moveq	r3, #1
 801ba36:	2300      	movne	r3, #0
 801ba38:	b2db      	uxtb	r3, r3
 801ba3a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ba3c:	697b      	ldr	r3, [r7, #20]
 801ba3e:	f103 0208 	add.w	r2, r3, #8
 801ba42:	7cfb      	ldrb	r3, [r7, #19]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d001      	beq.n	801ba4c <etharp_input+0x98>
 801ba48:	2301      	movs	r3, #1
 801ba4a:	e000      	b.n	801ba4e <etharp_input+0x9a>
 801ba4c:	2302      	movs	r3, #2
 801ba4e:	f107 010c 	add.w	r1, r7, #12
 801ba52:	6838      	ldr	r0, [r7, #0]
 801ba54:	f7ff fe9e 	bl	801b794 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	88db      	ldrh	r3, [r3, #6]
 801ba5c:	b29b      	uxth	r3, r3
 801ba5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ba62:	d003      	beq.n	801ba6c <etharp_input+0xb8>
 801ba64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ba68:	d01e      	beq.n	801baa8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ba6a:	e025      	b.n	801bab8 <etharp_input+0x104>
      if (for_us) {
 801ba6c:	7cfb      	ldrb	r3, [r7, #19]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d021      	beq.n	801bab6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ba72:	683b      	ldr	r3, [r7, #0]
 801ba74:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801ba78:	697b      	ldr	r3, [r7, #20]
 801ba7a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ba7e:	683b      	ldr	r3, [r7, #0]
 801ba80:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801ba84:	683b      	ldr	r3, [r7, #0]
 801ba86:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ba88:	697a      	ldr	r2, [r7, #20]
 801ba8a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ba8c:	2102      	movs	r1, #2
 801ba8e:	9103      	str	r1, [sp, #12]
 801ba90:	f107 010c 	add.w	r1, r7, #12
 801ba94:	9102      	str	r1, [sp, #8]
 801ba96:	9201      	str	r2, [sp, #4]
 801ba98:	9300      	str	r3, [sp, #0]
 801ba9a:	462b      	mov	r3, r5
 801ba9c:	4622      	mov	r2, r4
 801ba9e:	4601      	mov	r1, r0
 801baa0:	6838      	ldr	r0, [r7, #0]
 801baa2:	f000 faef 	bl	801c084 <etharp_raw>
      break;
 801baa6:	e006      	b.n	801bab6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801baa8:	f107 030c 	add.w	r3, r7, #12
 801baac:	4619      	mov	r1, r3
 801baae:	6838      	ldr	r0, [r7, #0]
 801bab0:	f7fe f97c 	bl	8019dac <dhcp_arp_reply>
      break;
 801bab4:	e000      	b.n	801bab8 <etharp_input+0x104>
      break;
 801bab6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bab8:	6878      	ldr	r0, [r7, #4]
 801baba:	f7f6 fa23 	bl	8011f04 <pbuf_free>
}
 801babe:	3718      	adds	r7, #24
 801bac0:	46bd      	mov	sp, r7
 801bac2:	bdb0      	pop	{r4, r5, r7, pc}
 801bac4:	08024d70 	.word	0x08024d70
 801bac8:	08024ec0 	.word	0x08024ec0
 801bacc:	08024de8 	.word	0x08024de8

0801bad0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b086      	sub	sp, #24
 801bad4:	af02      	add	r7, sp, #8
 801bad6:	60f8      	str	r0, [r7, #12]
 801bad8:	60b9      	str	r1, [r7, #8]
 801bada:	4613      	mov	r3, r2
 801badc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bade:	79fa      	ldrb	r2, [r7, #7]
 801bae0:	4944      	ldr	r1, [pc, #272]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bae2:	4613      	mov	r3, r2
 801bae4:	005b      	lsls	r3, r3, #1
 801bae6:	4413      	add	r3, r2
 801bae8:	00db      	lsls	r3, r3, #3
 801baea:	440b      	add	r3, r1
 801baec:	3314      	adds	r3, #20
 801baee:	781b      	ldrb	r3, [r3, #0]
 801baf0:	2b01      	cmp	r3, #1
 801baf2:	d806      	bhi.n	801bb02 <etharp_output_to_arp_index+0x32>
 801baf4:	4b40      	ldr	r3, [pc, #256]	@ (801bbf8 <etharp_output_to_arp_index+0x128>)
 801baf6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801bafa:	4940      	ldr	r1, [pc, #256]	@ (801bbfc <etharp_output_to_arp_index+0x12c>)
 801bafc:	4840      	ldr	r0, [pc, #256]	@ (801bc00 <etharp_output_to_arp_index+0x130>)
 801bafe:	f003 f8b9 	bl	801ec74 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bb02:	79fa      	ldrb	r2, [r7, #7]
 801bb04:	493b      	ldr	r1, [pc, #236]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb06:	4613      	mov	r3, r2
 801bb08:	005b      	lsls	r3, r3, #1
 801bb0a:	4413      	add	r3, r2
 801bb0c:	00db      	lsls	r3, r3, #3
 801bb0e:	440b      	add	r3, r1
 801bb10:	3314      	adds	r3, #20
 801bb12:	781b      	ldrb	r3, [r3, #0]
 801bb14:	2b02      	cmp	r3, #2
 801bb16:	d153      	bne.n	801bbc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bb18:	79fa      	ldrb	r2, [r7, #7]
 801bb1a:	4936      	ldr	r1, [pc, #216]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb1c:	4613      	mov	r3, r2
 801bb1e:	005b      	lsls	r3, r3, #1
 801bb20:	4413      	add	r3, r2
 801bb22:	00db      	lsls	r3, r3, #3
 801bb24:	440b      	add	r3, r1
 801bb26:	3312      	adds	r3, #18
 801bb28:	881b      	ldrh	r3, [r3, #0]
 801bb2a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801bb2e:	d919      	bls.n	801bb64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bb30:	79fa      	ldrb	r2, [r7, #7]
 801bb32:	4613      	mov	r3, r2
 801bb34:	005b      	lsls	r3, r3, #1
 801bb36:	4413      	add	r3, r2
 801bb38:	00db      	lsls	r3, r3, #3
 801bb3a:	4a2e      	ldr	r2, [pc, #184]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb3c:	4413      	add	r3, r2
 801bb3e:	3304      	adds	r3, #4
 801bb40:	4619      	mov	r1, r3
 801bb42:	68f8      	ldr	r0, [r7, #12]
 801bb44:	f000 fb4c 	bl	801c1e0 <etharp_request>
 801bb48:	4603      	mov	r3, r0
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d138      	bne.n	801bbc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bb4e:	79fa      	ldrb	r2, [r7, #7]
 801bb50:	4928      	ldr	r1, [pc, #160]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb52:	4613      	mov	r3, r2
 801bb54:	005b      	lsls	r3, r3, #1
 801bb56:	4413      	add	r3, r2
 801bb58:	00db      	lsls	r3, r3, #3
 801bb5a:	440b      	add	r3, r1
 801bb5c:	3314      	adds	r3, #20
 801bb5e:	2203      	movs	r2, #3
 801bb60:	701a      	strb	r2, [r3, #0]
 801bb62:	e02d      	b.n	801bbc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bb64:	79fa      	ldrb	r2, [r7, #7]
 801bb66:	4923      	ldr	r1, [pc, #140]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb68:	4613      	mov	r3, r2
 801bb6a:	005b      	lsls	r3, r3, #1
 801bb6c:	4413      	add	r3, r2
 801bb6e:	00db      	lsls	r3, r3, #3
 801bb70:	440b      	add	r3, r1
 801bb72:	3312      	adds	r3, #18
 801bb74:	881b      	ldrh	r3, [r3, #0]
 801bb76:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801bb7a:	d321      	bcc.n	801bbc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bb7c:	79fa      	ldrb	r2, [r7, #7]
 801bb7e:	4613      	mov	r3, r2
 801bb80:	005b      	lsls	r3, r3, #1
 801bb82:	4413      	add	r3, r2
 801bb84:	00db      	lsls	r3, r3, #3
 801bb86:	4a1b      	ldr	r2, [pc, #108]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb88:	4413      	add	r3, r2
 801bb8a:	1d19      	adds	r1, r3, #4
 801bb8c:	79fa      	ldrb	r2, [r7, #7]
 801bb8e:	4613      	mov	r3, r2
 801bb90:	005b      	lsls	r3, r3, #1
 801bb92:	4413      	add	r3, r2
 801bb94:	00db      	lsls	r3, r3, #3
 801bb96:	3308      	adds	r3, #8
 801bb98:	4a16      	ldr	r2, [pc, #88]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bb9a:	4413      	add	r3, r2
 801bb9c:	3304      	adds	r3, #4
 801bb9e:	461a      	mov	r2, r3
 801bba0:	68f8      	ldr	r0, [r7, #12]
 801bba2:	f000 fafb 	bl	801c19c <etharp_request_dst>
 801bba6:	4603      	mov	r3, r0
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d109      	bne.n	801bbc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bbac:	79fa      	ldrb	r2, [r7, #7]
 801bbae:	4911      	ldr	r1, [pc, #68]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bbb0:	4613      	mov	r3, r2
 801bbb2:	005b      	lsls	r3, r3, #1
 801bbb4:	4413      	add	r3, r2
 801bbb6:	00db      	lsls	r3, r3, #3
 801bbb8:	440b      	add	r3, r1
 801bbba:	3314      	adds	r3, #20
 801bbbc:	2203      	movs	r2, #3
 801bbbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801bbc6:	79fa      	ldrb	r2, [r7, #7]
 801bbc8:	4613      	mov	r3, r2
 801bbca:	005b      	lsls	r3, r3, #1
 801bbcc:	4413      	add	r3, r2
 801bbce:	00db      	lsls	r3, r3, #3
 801bbd0:	3308      	adds	r3, #8
 801bbd2:	4a08      	ldr	r2, [pc, #32]	@ (801bbf4 <etharp_output_to_arp_index+0x124>)
 801bbd4:	4413      	add	r3, r2
 801bbd6:	3304      	adds	r3, #4
 801bbd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bbdc:	9200      	str	r2, [sp, #0]
 801bbde:	460a      	mov	r2, r1
 801bbe0:	68b9      	ldr	r1, [r7, #8]
 801bbe2:	68f8      	ldr	r0, [r7, #12]
 801bbe4:	f002 f83e 	bl	801dc64 <ethernet_output>
 801bbe8:	4603      	mov	r3, r0
}
 801bbea:	4618      	mov	r0, r3
 801bbec:	3710      	adds	r7, #16
 801bbee:	46bd      	mov	sp, r7
 801bbf0:	bd80      	pop	{r7, pc}
 801bbf2:	bf00      	nop
 801bbf4:	20013e54 	.word	0x20013e54
 801bbf8:	08024d70 	.word	0x08024d70
 801bbfc:	08024ee0 	.word	0x08024ee0
 801bc00:	08024de8 	.word	0x08024de8

0801bc04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b08a      	sub	sp, #40	@ 0x28
 801bc08:	af02      	add	r7, sp, #8
 801bc0a:	60f8      	str	r0, [r7, #12]
 801bc0c:	60b9      	str	r1, [r7, #8]
 801bc0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d106      	bne.n	801bc28 <etharp_output+0x24>
 801bc1a:	4b73      	ldr	r3, [pc, #460]	@ (801bde8 <etharp_output+0x1e4>)
 801bc1c:	f240 321e 	movw	r2, #798	@ 0x31e
 801bc20:	4972      	ldr	r1, [pc, #456]	@ (801bdec <etharp_output+0x1e8>)
 801bc22:	4873      	ldr	r0, [pc, #460]	@ (801bdf0 <etharp_output+0x1ec>)
 801bc24:	f003 f826 	bl	801ec74 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d106      	bne.n	801bc3c <etharp_output+0x38>
 801bc2e:	4b6e      	ldr	r3, [pc, #440]	@ (801bde8 <etharp_output+0x1e4>)
 801bc30:	f240 321f 	movw	r2, #799	@ 0x31f
 801bc34:	496f      	ldr	r1, [pc, #444]	@ (801bdf4 <etharp_output+0x1f0>)
 801bc36:	486e      	ldr	r0, [pc, #440]	@ (801bdf0 <etharp_output+0x1ec>)
 801bc38:	f003 f81c 	bl	801ec74 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d106      	bne.n	801bc50 <etharp_output+0x4c>
 801bc42:	4b69      	ldr	r3, [pc, #420]	@ (801bde8 <etharp_output+0x1e4>)
 801bc44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801bc48:	496b      	ldr	r1, [pc, #428]	@ (801bdf8 <etharp_output+0x1f4>)
 801bc4a:	4869      	ldr	r0, [pc, #420]	@ (801bdf0 <etharp_output+0x1ec>)
 801bc4c:	f003 f812 	bl	801ec74 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	68f9      	ldr	r1, [r7, #12]
 801bc56:	4618      	mov	r0, r3
 801bc58:	f000 ffbc 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801bc5c:	4603      	mov	r3, r0
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d002      	beq.n	801bc68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801bc62:	4b66      	ldr	r3, [pc, #408]	@ (801bdfc <etharp_output+0x1f8>)
 801bc64:	61fb      	str	r3, [r7, #28]
 801bc66:	e0af      	b.n	801bdc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bc70:	2be0      	cmp	r3, #224	@ 0xe0
 801bc72:	d118      	bne.n	801bca6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801bc74:	2301      	movs	r3, #1
 801bc76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801bc78:	2300      	movs	r3, #0
 801bc7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801bc7c:	235e      	movs	r3, #94	@ 0x5e
 801bc7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	3301      	adds	r3, #1
 801bc84:	781b      	ldrb	r3, [r3, #0]
 801bc86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bc8a:	b2db      	uxtb	r3, r3
 801bc8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	3302      	adds	r3, #2
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	3303      	adds	r3, #3
 801bc9a:	781b      	ldrb	r3, [r3, #0]
 801bc9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801bc9e:	f107 0310 	add.w	r3, r7, #16
 801bca2:	61fb      	str	r3, [r7, #28]
 801bca4:	e090      	b.n	801bdc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681a      	ldr	r2, [r3, #0]
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	3304      	adds	r3, #4
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	405a      	eors	r2, r3
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	3308      	adds	r3, #8
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	4013      	ands	r3, r2
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d012      	beq.n	801bce4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bcc4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	d00b      	beq.n	801bce4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	330c      	adds	r3, #12
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d003      	beq.n	801bcde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	330c      	adds	r3, #12
 801bcda:	61bb      	str	r3, [r7, #24]
 801bcdc:	e002      	b.n	801bce4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801bcde:	f06f 0303 	mvn.w	r3, #3
 801bce2:	e07d      	b.n	801bde0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bce4:	4b46      	ldr	r3, [pc, #280]	@ (801be00 <etharp_output+0x1fc>)
 801bce6:	781b      	ldrb	r3, [r3, #0]
 801bce8:	4619      	mov	r1, r3
 801bcea:	4a46      	ldr	r2, [pc, #280]	@ (801be04 <etharp_output+0x200>)
 801bcec:	460b      	mov	r3, r1
 801bcee:	005b      	lsls	r3, r3, #1
 801bcf0:	440b      	add	r3, r1
 801bcf2:	00db      	lsls	r3, r3, #3
 801bcf4:	4413      	add	r3, r2
 801bcf6:	3314      	adds	r3, #20
 801bcf8:	781b      	ldrb	r3, [r3, #0]
 801bcfa:	2b01      	cmp	r3, #1
 801bcfc:	d925      	bls.n	801bd4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bcfe:	4b40      	ldr	r3, [pc, #256]	@ (801be00 <etharp_output+0x1fc>)
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	4619      	mov	r1, r3
 801bd04:	4a3f      	ldr	r2, [pc, #252]	@ (801be04 <etharp_output+0x200>)
 801bd06:	460b      	mov	r3, r1
 801bd08:	005b      	lsls	r3, r3, #1
 801bd0a:	440b      	add	r3, r1
 801bd0c:	00db      	lsls	r3, r3, #3
 801bd0e:	4413      	add	r3, r2
 801bd10:	3308      	adds	r3, #8
 801bd12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bd14:	68fa      	ldr	r2, [r7, #12]
 801bd16:	429a      	cmp	r2, r3
 801bd18:	d117      	bne.n	801bd4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801bd1a:	69bb      	ldr	r3, [r7, #24]
 801bd1c:	681a      	ldr	r2, [r3, #0]
 801bd1e:	4b38      	ldr	r3, [pc, #224]	@ (801be00 <etharp_output+0x1fc>)
 801bd20:	781b      	ldrb	r3, [r3, #0]
 801bd22:	4618      	mov	r0, r3
 801bd24:	4937      	ldr	r1, [pc, #220]	@ (801be04 <etharp_output+0x200>)
 801bd26:	4603      	mov	r3, r0
 801bd28:	005b      	lsls	r3, r3, #1
 801bd2a:	4403      	add	r3, r0
 801bd2c:	00db      	lsls	r3, r3, #3
 801bd2e:	440b      	add	r3, r1
 801bd30:	3304      	adds	r3, #4
 801bd32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d108      	bne.n	801bd4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801bd38:	4b31      	ldr	r3, [pc, #196]	@ (801be00 <etharp_output+0x1fc>)
 801bd3a:	781b      	ldrb	r3, [r3, #0]
 801bd3c:	461a      	mov	r2, r3
 801bd3e:	68b9      	ldr	r1, [r7, #8]
 801bd40:	68f8      	ldr	r0, [r7, #12]
 801bd42:	f7ff fec5 	bl	801bad0 <etharp_output_to_arp_index>
 801bd46:	4603      	mov	r3, r0
 801bd48:	e04a      	b.n	801bde0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	75fb      	strb	r3, [r7, #23]
 801bd4e:	e031      	b.n	801bdb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bd50:	7dfa      	ldrb	r2, [r7, #23]
 801bd52:	492c      	ldr	r1, [pc, #176]	@ (801be04 <etharp_output+0x200>)
 801bd54:	4613      	mov	r3, r2
 801bd56:	005b      	lsls	r3, r3, #1
 801bd58:	4413      	add	r3, r2
 801bd5a:	00db      	lsls	r3, r3, #3
 801bd5c:	440b      	add	r3, r1
 801bd5e:	3314      	adds	r3, #20
 801bd60:	781b      	ldrb	r3, [r3, #0]
 801bd62:	2b01      	cmp	r3, #1
 801bd64:	d923      	bls.n	801bdae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801bd66:	7dfa      	ldrb	r2, [r7, #23]
 801bd68:	4926      	ldr	r1, [pc, #152]	@ (801be04 <etharp_output+0x200>)
 801bd6a:	4613      	mov	r3, r2
 801bd6c:	005b      	lsls	r3, r3, #1
 801bd6e:	4413      	add	r3, r2
 801bd70:	00db      	lsls	r3, r3, #3
 801bd72:	440b      	add	r3, r1
 801bd74:	3308      	adds	r3, #8
 801bd76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bd78:	68fa      	ldr	r2, [r7, #12]
 801bd7a:	429a      	cmp	r2, r3
 801bd7c:	d117      	bne.n	801bdae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801bd7e:	69bb      	ldr	r3, [r7, #24]
 801bd80:	6819      	ldr	r1, [r3, #0]
 801bd82:	7dfa      	ldrb	r2, [r7, #23]
 801bd84:	481f      	ldr	r0, [pc, #124]	@ (801be04 <etharp_output+0x200>)
 801bd86:	4613      	mov	r3, r2
 801bd88:	005b      	lsls	r3, r3, #1
 801bd8a:	4413      	add	r3, r2
 801bd8c:	00db      	lsls	r3, r3, #3
 801bd8e:	4403      	add	r3, r0
 801bd90:	3304      	adds	r3, #4
 801bd92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801bd94:	4299      	cmp	r1, r3
 801bd96:	d10a      	bne.n	801bdae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801bd98:	4a19      	ldr	r2, [pc, #100]	@ (801be00 <etharp_output+0x1fc>)
 801bd9a:	7dfb      	ldrb	r3, [r7, #23]
 801bd9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801bd9e:	7dfb      	ldrb	r3, [r7, #23]
 801bda0:	461a      	mov	r2, r3
 801bda2:	68b9      	ldr	r1, [r7, #8]
 801bda4:	68f8      	ldr	r0, [r7, #12]
 801bda6:	f7ff fe93 	bl	801bad0 <etharp_output_to_arp_index>
 801bdaa:	4603      	mov	r3, r0
 801bdac:	e018      	b.n	801bde0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bdae:	7dfb      	ldrb	r3, [r7, #23]
 801bdb0:	3301      	adds	r3, #1
 801bdb2:	75fb      	strb	r3, [r7, #23]
 801bdb4:	7dfb      	ldrb	r3, [r7, #23]
 801bdb6:	2b09      	cmp	r3, #9
 801bdb8:	d9ca      	bls.n	801bd50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801bdba:	68ba      	ldr	r2, [r7, #8]
 801bdbc:	69b9      	ldr	r1, [r7, #24]
 801bdbe:	68f8      	ldr	r0, [r7, #12]
 801bdc0:	f000 f822 	bl	801be08 <etharp_query>
 801bdc4:	4603      	mov	r3, r0
 801bdc6:	e00b      	b.n	801bde0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801bdce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bdd2:	9300      	str	r3, [sp, #0]
 801bdd4:	69fb      	ldr	r3, [r7, #28]
 801bdd6:	68b9      	ldr	r1, [r7, #8]
 801bdd8:	68f8      	ldr	r0, [r7, #12]
 801bdda:	f001 ff43 	bl	801dc64 <ethernet_output>
 801bdde:	4603      	mov	r3, r0
}
 801bde0:	4618      	mov	r0, r3
 801bde2:	3720      	adds	r7, #32
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd80      	pop	{r7, pc}
 801bde8:	08024d70 	.word	0x08024d70
 801bdec:	08024ec0 	.word	0x08024ec0
 801bdf0:	08024de8 	.word	0x08024de8
 801bdf4:	08024f10 	.word	0x08024f10
 801bdf8:	08024eb0 	.word	0x08024eb0
 801bdfc:	080712a0 	.word	0x080712a0
 801be00:	20013f44 	.word	0x20013f44
 801be04:	20013e54 	.word	0x20013e54

0801be08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b08c      	sub	sp, #48	@ 0x30
 801be0c:	af02      	add	r7, sp, #8
 801be0e:	60f8      	str	r0, [r7, #12]
 801be10:	60b9      	str	r1, [r7, #8]
 801be12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	332a      	adds	r3, #42	@ 0x2a
 801be18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801be1a:	23ff      	movs	r3, #255	@ 0xff
 801be1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801be20:	2300      	movs	r3, #0
 801be22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	68f9      	ldr	r1, [r7, #12]
 801be2a:	4618      	mov	r0, r3
 801be2c:	f000 fed2 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801be30:	4603      	mov	r3, r0
 801be32:	2b00      	cmp	r3, #0
 801be34:	d10c      	bne.n	801be50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801be36:	68bb      	ldr	r3, [r7, #8]
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801be3e:	2be0      	cmp	r3, #224	@ 0xe0
 801be40:	d006      	beq.n	801be50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801be42:	68bb      	ldr	r3, [r7, #8]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d003      	beq.n	801be50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d102      	bne.n	801be56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801be50:	f06f 030f 	mvn.w	r3, #15
 801be54:	e101      	b.n	801c05a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	2101      	movs	r1, #1
 801be5a:	68b8      	ldr	r0, [r7, #8]
 801be5c:	f7ff fb20 	bl	801b4a0 <etharp_find_entry>
 801be60:	4603      	mov	r3, r0
 801be62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801be64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	da02      	bge.n	801be72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801be6c:	8a7b      	ldrh	r3, [r7, #18]
 801be6e:	b25b      	sxtb	r3, r3
 801be70:	e0f3      	b.n	801c05a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801be72:	8a7b      	ldrh	r3, [r7, #18]
 801be74:	2b7e      	cmp	r3, #126	@ 0x7e
 801be76:	d906      	bls.n	801be86 <etharp_query+0x7e>
 801be78:	4b7a      	ldr	r3, [pc, #488]	@ (801c064 <etharp_query+0x25c>)
 801be7a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801be7e:	497a      	ldr	r1, [pc, #488]	@ (801c068 <etharp_query+0x260>)
 801be80:	487a      	ldr	r0, [pc, #488]	@ (801c06c <etharp_query+0x264>)
 801be82:	f002 fef7 	bl	801ec74 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801be86:	8a7b      	ldrh	r3, [r7, #18]
 801be88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801be8a:	7c7a      	ldrb	r2, [r7, #17]
 801be8c:	4978      	ldr	r1, [pc, #480]	@ (801c070 <etharp_query+0x268>)
 801be8e:	4613      	mov	r3, r2
 801be90:	005b      	lsls	r3, r3, #1
 801be92:	4413      	add	r3, r2
 801be94:	00db      	lsls	r3, r3, #3
 801be96:	440b      	add	r3, r1
 801be98:	3314      	adds	r3, #20
 801be9a:	781b      	ldrb	r3, [r3, #0]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d115      	bne.n	801becc <etharp_query+0xc4>
    is_new_entry = 1;
 801bea0:	2301      	movs	r3, #1
 801bea2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801bea4:	7c7a      	ldrb	r2, [r7, #17]
 801bea6:	4972      	ldr	r1, [pc, #456]	@ (801c070 <etharp_query+0x268>)
 801bea8:	4613      	mov	r3, r2
 801beaa:	005b      	lsls	r3, r3, #1
 801beac:	4413      	add	r3, r2
 801beae:	00db      	lsls	r3, r3, #3
 801beb0:	440b      	add	r3, r1
 801beb2:	3314      	adds	r3, #20
 801beb4:	2201      	movs	r2, #1
 801beb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801beb8:	7c7a      	ldrb	r2, [r7, #17]
 801beba:	496d      	ldr	r1, [pc, #436]	@ (801c070 <etharp_query+0x268>)
 801bebc:	4613      	mov	r3, r2
 801bebe:	005b      	lsls	r3, r3, #1
 801bec0:	4413      	add	r3, r2
 801bec2:	00db      	lsls	r3, r3, #3
 801bec4:	440b      	add	r3, r1
 801bec6:	3308      	adds	r3, #8
 801bec8:	68fa      	ldr	r2, [r7, #12]
 801beca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801becc:	7c7a      	ldrb	r2, [r7, #17]
 801bece:	4968      	ldr	r1, [pc, #416]	@ (801c070 <etharp_query+0x268>)
 801bed0:	4613      	mov	r3, r2
 801bed2:	005b      	lsls	r3, r3, #1
 801bed4:	4413      	add	r3, r2
 801bed6:	00db      	lsls	r3, r3, #3
 801bed8:	440b      	add	r3, r1
 801beda:	3314      	adds	r3, #20
 801bedc:	781b      	ldrb	r3, [r3, #0]
 801bede:	2b01      	cmp	r3, #1
 801bee0:	d011      	beq.n	801bf06 <etharp_query+0xfe>
 801bee2:	7c7a      	ldrb	r2, [r7, #17]
 801bee4:	4962      	ldr	r1, [pc, #392]	@ (801c070 <etharp_query+0x268>)
 801bee6:	4613      	mov	r3, r2
 801bee8:	005b      	lsls	r3, r3, #1
 801beea:	4413      	add	r3, r2
 801beec:	00db      	lsls	r3, r3, #3
 801beee:	440b      	add	r3, r1
 801bef0:	3314      	adds	r3, #20
 801bef2:	781b      	ldrb	r3, [r3, #0]
 801bef4:	2b01      	cmp	r3, #1
 801bef6:	d806      	bhi.n	801bf06 <etharp_query+0xfe>
 801bef8:	4b5a      	ldr	r3, [pc, #360]	@ (801c064 <etharp_query+0x25c>)
 801befa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801befe:	495d      	ldr	r1, [pc, #372]	@ (801c074 <etharp_query+0x26c>)
 801bf00:	485a      	ldr	r0, [pc, #360]	@ (801c06c <etharp_query+0x264>)
 801bf02:	f002 feb7 	bl	801ec74 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801bf06:	6a3b      	ldr	r3, [r7, #32]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d102      	bne.n	801bf12 <etharp_query+0x10a>
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d10c      	bne.n	801bf2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801bf12:	68b9      	ldr	r1, [r7, #8]
 801bf14:	68f8      	ldr	r0, [r7, #12]
 801bf16:	f000 f963 	bl	801c1e0 <etharp_request>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d102      	bne.n	801bf2c <etharp_query+0x124>
      return result;
 801bf26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801bf2a:	e096      	b.n	801c05a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d106      	bne.n	801bf40 <etharp_query+0x138>
 801bf32:	4b4c      	ldr	r3, [pc, #304]	@ (801c064 <etharp_query+0x25c>)
 801bf34:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801bf38:	494f      	ldr	r1, [pc, #316]	@ (801c078 <etharp_query+0x270>)
 801bf3a:	484c      	ldr	r0, [pc, #304]	@ (801c06c <etharp_query+0x264>)
 801bf3c:	f002 fe9a 	bl	801ec74 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801bf40:	7c7a      	ldrb	r2, [r7, #17]
 801bf42:	494b      	ldr	r1, [pc, #300]	@ (801c070 <etharp_query+0x268>)
 801bf44:	4613      	mov	r3, r2
 801bf46:	005b      	lsls	r3, r3, #1
 801bf48:	4413      	add	r3, r2
 801bf4a:	00db      	lsls	r3, r3, #3
 801bf4c:	440b      	add	r3, r1
 801bf4e:	3314      	adds	r3, #20
 801bf50:	781b      	ldrb	r3, [r3, #0]
 801bf52:	2b01      	cmp	r3, #1
 801bf54:	d917      	bls.n	801bf86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801bf56:	4a49      	ldr	r2, [pc, #292]	@ (801c07c <etharp_query+0x274>)
 801bf58:	7c7b      	ldrb	r3, [r7, #17]
 801bf5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801bf5c:	7c7a      	ldrb	r2, [r7, #17]
 801bf5e:	4613      	mov	r3, r2
 801bf60:	005b      	lsls	r3, r3, #1
 801bf62:	4413      	add	r3, r2
 801bf64:	00db      	lsls	r3, r3, #3
 801bf66:	3308      	adds	r3, #8
 801bf68:	4a41      	ldr	r2, [pc, #260]	@ (801c070 <etharp_query+0x268>)
 801bf6a:	4413      	add	r3, r2
 801bf6c:	3304      	adds	r3, #4
 801bf6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bf72:	9200      	str	r2, [sp, #0]
 801bf74:	697a      	ldr	r2, [r7, #20]
 801bf76:	6879      	ldr	r1, [r7, #4]
 801bf78:	68f8      	ldr	r0, [r7, #12]
 801bf7a:	f001 fe73 	bl	801dc64 <ethernet_output>
 801bf7e:	4603      	mov	r3, r0
 801bf80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801bf84:	e067      	b.n	801c056 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bf86:	7c7a      	ldrb	r2, [r7, #17]
 801bf88:	4939      	ldr	r1, [pc, #228]	@ (801c070 <etharp_query+0x268>)
 801bf8a:	4613      	mov	r3, r2
 801bf8c:	005b      	lsls	r3, r3, #1
 801bf8e:	4413      	add	r3, r2
 801bf90:	00db      	lsls	r3, r3, #3
 801bf92:	440b      	add	r3, r1
 801bf94:	3314      	adds	r3, #20
 801bf96:	781b      	ldrb	r3, [r3, #0]
 801bf98:	2b01      	cmp	r3, #1
 801bf9a:	d15c      	bne.n	801c056 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bfa4:	e01c      	b.n	801bfe0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801bfa6:	69fb      	ldr	r3, [r7, #28]
 801bfa8:	895a      	ldrh	r2, [r3, #10]
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	891b      	ldrh	r3, [r3, #8]
 801bfae:	429a      	cmp	r2, r3
 801bfb0:	d10a      	bne.n	801bfc8 <etharp_query+0x1c0>
 801bfb2:	69fb      	ldr	r3, [r7, #28]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d006      	beq.n	801bfc8 <etharp_query+0x1c0>
 801bfba:	4b2a      	ldr	r3, [pc, #168]	@ (801c064 <etharp_query+0x25c>)
 801bfbc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801bfc0:	492f      	ldr	r1, [pc, #188]	@ (801c080 <etharp_query+0x278>)
 801bfc2:	482a      	ldr	r0, [pc, #168]	@ (801c06c <etharp_query+0x264>)
 801bfc4:	f002 fe56 	bl	801ec74 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801bfc8:	69fb      	ldr	r3, [r7, #28]
 801bfca:	7b1b      	ldrb	r3, [r3, #12]
 801bfcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d002      	beq.n	801bfda <etharp_query+0x1d2>
        copy_needed = 1;
 801bfd4:	2301      	movs	r3, #1
 801bfd6:	61bb      	str	r3, [r7, #24]
        break;
 801bfd8:	e005      	b.n	801bfe6 <etharp_query+0x1de>
      }
      p = p->next;
 801bfda:	69fb      	ldr	r3, [r7, #28]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bfe0:	69fb      	ldr	r3, [r7, #28]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d1df      	bne.n	801bfa6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801bfe6:	69bb      	ldr	r3, [r7, #24]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d007      	beq.n	801bffc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801bfec:	687a      	ldr	r2, [r7, #4]
 801bfee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801bff2:	200e      	movs	r0, #14
 801bff4:	f7f6 fb36 	bl	8012664 <pbuf_clone>
 801bff8:	61f8      	str	r0, [r7, #28]
 801bffa:	e004      	b.n	801c006 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c000:	69f8      	ldr	r0, [r7, #28]
 801c002:	f7f6 f825 	bl	8012050 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c006:	69fb      	ldr	r3, [r7, #28]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d021      	beq.n	801c050 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c00c:	7c7a      	ldrb	r2, [r7, #17]
 801c00e:	4918      	ldr	r1, [pc, #96]	@ (801c070 <etharp_query+0x268>)
 801c010:	4613      	mov	r3, r2
 801c012:	005b      	lsls	r3, r3, #1
 801c014:	4413      	add	r3, r2
 801c016:	00db      	lsls	r3, r3, #3
 801c018:	440b      	add	r3, r1
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d00a      	beq.n	801c036 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c020:	7c7a      	ldrb	r2, [r7, #17]
 801c022:	4913      	ldr	r1, [pc, #76]	@ (801c070 <etharp_query+0x268>)
 801c024:	4613      	mov	r3, r2
 801c026:	005b      	lsls	r3, r3, #1
 801c028:	4413      	add	r3, r2
 801c02a:	00db      	lsls	r3, r3, #3
 801c02c:	440b      	add	r3, r1
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	4618      	mov	r0, r3
 801c032:	f7f5 ff67 	bl	8011f04 <pbuf_free>
      }
      arp_table[i].q = p;
 801c036:	7c7a      	ldrb	r2, [r7, #17]
 801c038:	490d      	ldr	r1, [pc, #52]	@ (801c070 <etharp_query+0x268>)
 801c03a:	4613      	mov	r3, r2
 801c03c:	005b      	lsls	r3, r3, #1
 801c03e:	4413      	add	r3, r2
 801c040:	00db      	lsls	r3, r3, #3
 801c042:	440b      	add	r3, r1
 801c044:	69fa      	ldr	r2, [r7, #28]
 801c046:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c048:	2300      	movs	r3, #0
 801c04a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c04e:	e002      	b.n	801c056 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c050:	23ff      	movs	r3, #255	@ 0xff
 801c052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801c056:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801c05a:	4618      	mov	r0, r3
 801c05c:	3728      	adds	r7, #40	@ 0x28
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
 801c062:	bf00      	nop
 801c064:	08024d70 	.word	0x08024d70
 801c068:	08024f1c 	.word	0x08024f1c
 801c06c:	08024de8 	.word	0x08024de8
 801c070:	20013e54 	.word	0x20013e54
 801c074:	08024f2c 	.word	0x08024f2c
 801c078:	08024f10 	.word	0x08024f10
 801c07c:	20013f44 	.word	0x20013f44
 801c080:	08024f54 	.word	0x08024f54

0801c084 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b08a      	sub	sp, #40	@ 0x28
 801c088:	af02      	add	r7, sp, #8
 801c08a:	60f8      	str	r0, [r7, #12]
 801c08c:	60b9      	str	r1, [r7, #8]
 801c08e:	607a      	str	r2, [r7, #4]
 801c090:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c092:	2300      	movs	r3, #0
 801c094:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d106      	bne.n	801c0aa <etharp_raw+0x26>
 801c09c:	4b3a      	ldr	r3, [pc, #232]	@ (801c188 <etharp_raw+0x104>)
 801c09e:	f240 4257 	movw	r2, #1111	@ 0x457
 801c0a2:	493a      	ldr	r1, [pc, #232]	@ (801c18c <etharp_raw+0x108>)
 801c0a4:	483a      	ldr	r0, [pc, #232]	@ (801c190 <etharp_raw+0x10c>)
 801c0a6:	f002 fde5 	bl	801ec74 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c0aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c0ae:	211c      	movs	r1, #28
 801c0b0:	200e      	movs	r0, #14
 801c0b2:	f7f5 fc3f 	bl	8011934 <pbuf_alloc>
 801c0b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c0b8:	69bb      	ldr	r3, [r7, #24]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d102      	bne.n	801c0c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c0be:	f04f 33ff 	mov.w	r3, #4294967295
 801c0c2:	e05d      	b.n	801c180 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c0c4:	69bb      	ldr	r3, [r7, #24]
 801c0c6:	895b      	ldrh	r3, [r3, #10]
 801c0c8:	2b1b      	cmp	r3, #27
 801c0ca:	d806      	bhi.n	801c0da <etharp_raw+0x56>
 801c0cc:	4b2e      	ldr	r3, [pc, #184]	@ (801c188 <etharp_raw+0x104>)
 801c0ce:	f240 4262 	movw	r2, #1122	@ 0x462
 801c0d2:	4930      	ldr	r1, [pc, #192]	@ (801c194 <etharp_raw+0x110>)
 801c0d4:	482e      	ldr	r0, [pc, #184]	@ (801c190 <etharp_raw+0x10c>)
 801c0d6:	f002 fdcd 	bl	801ec74 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c0da:	69bb      	ldr	r3, [r7, #24]
 801c0dc:	685b      	ldr	r3, [r3, #4]
 801c0de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c0e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7f4 f9ec 	bl	80104c0 <lwip_htons>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	697b      	ldr	r3, [r7, #20]
 801c0ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c0f6:	2b06      	cmp	r3, #6
 801c0f8:	d006      	beq.n	801c108 <etharp_raw+0x84>
 801c0fa:	4b23      	ldr	r3, [pc, #140]	@ (801c188 <etharp_raw+0x104>)
 801c0fc:	f240 4269 	movw	r2, #1129	@ 0x469
 801c100:	4925      	ldr	r1, [pc, #148]	@ (801c198 <etharp_raw+0x114>)
 801c102:	4823      	ldr	r0, [pc, #140]	@ (801c190 <etharp_raw+0x10c>)
 801c104:	f002 fdb6 	bl	801ec74 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c108:	697b      	ldr	r3, [r7, #20]
 801c10a:	3308      	adds	r3, #8
 801c10c:	2206      	movs	r2, #6
 801c10e:	6839      	ldr	r1, [r7, #0]
 801c110:	4618      	mov	r0, r3
 801c112:	f002 ffd6 	bl	801f0c2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c116:	697b      	ldr	r3, [r7, #20]
 801c118:	3312      	adds	r3, #18
 801c11a:	2206      	movs	r2, #6
 801c11c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c11e:	4618      	mov	r0, r3
 801c120:	f002 ffcf 	bl	801f0c2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c124:	697b      	ldr	r3, [r7, #20]
 801c126:	330e      	adds	r3, #14
 801c128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c12a:	6812      	ldr	r2, [r2, #0]
 801c12c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c12e:	697b      	ldr	r3, [r7, #20]
 801c130:	3318      	adds	r3, #24
 801c132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c134:	6812      	ldr	r2, [r2, #0]
 801c136:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c138:	697b      	ldr	r3, [r7, #20]
 801c13a:	2200      	movs	r2, #0
 801c13c:	701a      	strb	r2, [r3, #0]
 801c13e:	2200      	movs	r2, #0
 801c140:	f042 0201 	orr.w	r2, r2, #1
 801c144:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	2200      	movs	r2, #0
 801c14a:	f042 0208 	orr.w	r2, r2, #8
 801c14e:	709a      	strb	r2, [r3, #2]
 801c150:	2200      	movs	r2, #0
 801c152:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c154:	697b      	ldr	r3, [r7, #20]
 801c156:	2206      	movs	r2, #6
 801c158:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	2204      	movs	r2, #4
 801c15e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c160:	f640 0306 	movw	r3, #2054	@ 0x806
 801c164:	9300      	str	r3, [sp, #0]
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	68ba      	ldr	r2, [r7, #8]
 801c16a:	69b9      	ldr	r1, [r7, #24]
 801c16c:	68f8      	ldr	r0, [r7, #12]
 801c16e:	f001 fd79 	bl	801dc64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c172:	69b8      	ldr	r0, [r7, #24]
 801c174:	f7f5 fec6 	bl	8011f04 <pbuf_free>
  p = NULL;
 801c178:	2300      	movs	r3, #0
 801c17a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c17c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c180:	4618      	mov	r0, r3
 801c182:	3720      	adds	r7, #32
 801c184:	46bd      	mov	sp, r7
 801c186:	bd80      	pop	{r7, pc}
 801c188:	08024d70 	.word	0x08024d70
 801c18c:	08024ec0 	.word	0x08024ec0
 801c190:	08024de8 	.word	0x08024de8
 801c194:	08024f70 	.word	0x08024f70
 801c198:	08024fa4 	.word	0x08024fa4

0801c19c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b088      	sub	sp, #32
 801c1a0:	af04      	add	r7, sp, #16
 801c1a2:	60f8      	str	r0, [r7, #12]
 801c1a4:	60b9      	str	r1, [r7, #8]
 801c1a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c1b8:	2201      	movs	r2, #1
 801c1ba:	9203      	str	r2, [sp, #12]
 801c1bc:	68ba      	ldr	r2, [r7, #8]
 801c1be:	9202      	str	r2, [sp, #8]
 801c1c0:	4a06      	ldr	r2, [pc, #24]	@ (801c1dc <etharp_request_dst+0x40>)
 801c1c2:	9201      	str	r2, [sp, #4]
 801c1c4:	9300      	str	r3, [sp, #0]
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	687a      	ldr	r2, [r7, #4]
 801c1ca:	68f8      	ldr	r0, [r7, #12]
 801c1cc:	f7ff ff5a 	bl	801c084 <etharp_raw>
 801c1d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	3710      	adds	r7, #16
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}
 801c1da:	bf00      	nop
 801c1dc:	080712a8 	.word	0x080712a8

0801c1e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b082      	sub	sp, #8
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
 801c1e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c1ea:	4a05      	ldr	r2, [pc, #20]	@ (801c200 <etharp_request+0x20>)
 801c1ec:	6839      	ldr	r1, [r7, #0]
 801c1ee:	6878      	ldr	r0, [r7, #4]
 801c1f0:	f7ff ffd4 	bl	801c19c <etharp_request_dst>
 801c1f4:	4603      	mov	r3, r0
}
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	3708      	adds	r7, #8
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop
 801c200:	080712a0 	.word	0x080712a0

0801c204 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c204:	b580      	push	{r7, lr}
 801c206:	b08e      	sub	sp, #56	@ 0x38
 801c208:	af04      	add	r7, sp, #16
 801c20a:	6078      	str	r0, [r7, #4]
 801c20c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c20e:	4b8e      	ldr	r3, [pc, #568]	@ (801c448 <icmp_input+0x244>)
 801c210:	689b      	ldr	r3, [r3, #8]
 801c212:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c216:	781b      	ldrb	r3, [r3, #0]
 801c218:	f003 030f 	and.w	r3, r3, #15
 801c21c:	b2db      	uxtb	r3, r3
 801c21e:	009b      	lsls	r3, r3, #2
 801c220:	b2db      	uxtb	r3, r3
 801c222:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801c224:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c226:	2b13      	cmp	r3, #19
 801c228:	f240 80f6 	bls.w	801c418 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	895b      	ldrh	r3, [r3, #10]
 801c230:	2b03      	cmp	r3, #3
 801c232:	f240 80f3 	bls.w	801c41c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	685b      	ldr	r3, [r3, #4]
 801c23a:	781b      	ldrb	r3, [r3, #0]
 801c23c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	685b      	ldr	r3, [r3, #4]
 801c244:	785b      	ldrb	r3, [r3, #1]
 801c246:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c24a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801c24e:	2b00      	cmp	r3, #0
 801c250:	f000 80db 	beq.w	801c40a <icmp_input+0x206>
 801c254:	2b08      	cmp	r3, #8
 801c256:	f040 80db 	bne.w	801c410 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c25a:	4b7c      	ldr	r3, [pc, #496]	@ (801c44c <icmp_input+0x248>)
 801c25c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c25e:	4b7a      	ldr	r3, [pc, #488]	@ (801c448 <icmp_input+0x244>)
 801c260:	695b      	ldr	r3, [r3, #20]
 801c262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c266:	2be0      	cmp	r3, #224	@ 0xe0
 801c268:	f000 80df 	beq.w	801c42a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c26c:	4b76      	ldr	r3, [pc, #472]	@ (801c448 <icmp_input+0x244>)
 801c26e:	695b      	ldr	r3, [r3, #20]
 801c270:	4a75      	ldr	r2, [pc, #468]	@ (801c448 <icmp_input+0x244>)
 801c272:	6812      	ldr	r2, [r2, #0]
 801c274:	4611      	mov	r1, r2
 801c276:	4618      	mov	r0, r3
 801c278:	f000 fcac 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801c27c:	4603      	mov	r3, r0
 801c27e:	2b00      	cmp	r3, #0
 801c280:	f040 80d5 	bne.w	801c42e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	891b      	ldrh	r3, [r3, #8]
 801c288:	2b07      	cmp	r3, #7
 801c28a:	f240 80c9 	bls.w	801c420 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801c28e:	6878      	ldr	r0, [r7, #4]
 801c290:	f7f4 fa70 	bl	8010774 <inet_chksum_pbuf>
 801c294:	4603      	mov	r3, r0
 801c296:	2b00      	cmp	r3, #0
 801c298:	d003      	beq.n	801c2a2 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801c29a:	6878      	ldr	r0, [r7, #4]
 801c29c:	f7f5 fe32 	bl	8011f04 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801c2a0:	e0ce      	b.n	801c440 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c2a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2a4:	330e      	adds	r3, #14
 801c2a6:	4619      	mov	r1, r3
 801c2a8:	6878      	ldr	r0, [r7, #4]
 801c2aa:	f7f5 fd95 	bl	8011dd8 <pbuf_add_header>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d04b      	beq.n	801c34c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	891a      	ldrh	r2, [r3, #8]
 801c2b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2ba:	4413      	add	r3, r2
 801c2bc:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	891b      	ldrh	r3, [r3, #8]
 801c2c2:	8b7a      	ldrh	r2, [r7, #26]
 801c2c4:	429a      	cmp	r2, r3
 801c2c6:	f0c0 80b4 	bcc.w	801c432 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c2ca:	8b7b      	ldrh	r3, [r7, #26]
 801c2cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c2d0:	4619      	mov	r1, r3
 801c2d2:	200e      	movs	r0, #14
 801c2d4:	f7f5 fb2e 	bl	8011934 <pbuf_alloc>
 801c2d8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c2da:	697b      	ldr	r3, [r7, #20]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	f000 80aa 	beq.w	801c436 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c2e2:	697b      	ldr	r3, [r7, #20]
 801c2e4:	895b      	ldrh	r3, [r3, #10]
 801c2e6:	461a      	mov	r2, r3
 801c2e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2ea:	3308      	adds	r3, #8
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	d203      	bcs.n	801c2f8 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c2f0:	6978      	ldr	r0, [r7, #20]
 801c2f2:	f7f5 fe07 	bl	8011f04 <pbuf_free>
          goto icmperr;
 801c2f6:	e09f      	b.n	801c438 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	685b      	ldr	r3, [r3, #4]
 801c2fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801c2fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c300:	4618      	mov	r0, r3
 801c302:	f002 fede 	bl	801f0c2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c306:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c308:	4619      	mov	r1, r3
 801c30a:	6978      	ldr	r0, [r7, #20]
 801c30c:	f7f5 fd74 	bl	8011df8 <pbuf_remove_header>
 801c310:	4603      	mov	r3, r0
 801c312:	2b00      	cmp	r3, #0
 801c314:	d009      	beq.n	801c32a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c316:	4b4e      	ldr	r3, [pc, #312]	@ (801c450 <icmp_input+0x24c>)
 801c318:	22b6      	movs	r2, #182	@ 0xb6
 801c31a:	494e      	ldr	r1, [pc, #312]	@ (801c454 <icmp_input+0x250>)
 801c31c:	484e      	ldr	r0, [pc, #312]	@ (801c458 <icmp_input+0x254>)
 801c31e:	f002 fca9 	bl	801ec74 <iprintf>
          pbuf_free(r);
 801c322:	6978      	ldr	r0, [r7, #20]
 801c324:	f7f5 fdee 	bl	8011f04 <pbuf_free>
          goto icmperr;
 801c328:	e086      	b.n	801c438 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c32a:	6879      	ldr	r1, [r7, #4]
 801c32c:	6978      	ldr	r0, [r7, #20]
 801c32e:	f7f5 ff1d 	bl	801216c <pbuf_copy>
 801c332:	4603      	mov	r3, r0
 801c334:	2b00      	cmp	r3, #0
 801c336:	d003      	beq.n	801c340 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c338:	6978      	ldr	r0, [r7, #20]
 801c33a:	f7f5 fde3 	bl	8011f04 <pbuf_free>
          goto icmperr;
 801c33e:	e07b      	b.n	801c438 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 801c340:	6878      	ldr	r0, [r7, #4]
 801c342:	f7f5 fddf 	bl	8011f04 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c346:	697b      	ldr	r3, [r7, #20]
 801c348:	607b      	str	r3, [r7, #4]
 801c34a:	e00f      	b.n	801c36c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c34c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c34e:	330e      	adds	r3, #14
 801c350:	4619      	mov	r1, r3
 801c352:	6878      	ldr	r0, [r7, #4]
 801c354:	f7f5 fd50 	bl	8011df8 <pbuf_remove_header>
 801c358:	4603      	mov	r3, r0
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d006      	beq.n	801c36c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c35e:	4b3c      	ldr	r3, [pc, #240]	@ (801c450 <icmp_input+0x24c>)
 801c360:	22c7      	movs	r2, #199	@ 0xc7
 801c362:	493e      	ldr	r1, [pc, #248]	@ (801c45c <icmp_input+0x258>)
 801c364:	483c      	ldr	r0, [pc, #240]	@ (801c458 <icmp_input+0x254>)
 801c366:	f002 fc85 	bl	801ec74 <iprintf>
          goto icmperr;
 801c36a:	e065      	b.n	801c438 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	685b      	ldr	r3, [r3, #4]
 801c370:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c372:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c374:	4619      	mov	r1, r3
 801c376:	6878      	ldr	r0, [r7, #4]
 801c378:	f7f5 fd2e 	bl	8011dd8 <pbuf_add_header>
 801c37c:	4603      	mov	r3, r0
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d145      	bne.n	801c40e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	685b      	ldr	r3, [r3, #4]
 801c386:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c388:	69fb      	ldr	r3, [r7, #28]
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c390:	4b2d      	ldr	r3, [pc, #180]	@ (801c448 <icmp_input+0x244>)
 801c392:	691a      	ldr	r2, [r3, #16]
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c398:	693b      	ldr	r3, [r7, #16]
 801c39a:	2200      	movs	r2, #0
 801c39c:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801c39e:	693b      	ldr	r3, [r7, #16]
 801c3a0:	885b      	ldrh	r3, [r3, #2]
 801c3a2:	b29b      	uxth	r3, r3
 801c3a4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801c3a8:	4293      	cmp	r3, r2
 801c3aa:	d907      	bls.n	801c3bc <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801c3ac:	693b      	ldr	r3, [r7, #16]
 801c3ae:	885b      	ldrh	r3, [r3, #2]
 801c3b0:	b29b      	uxth	r3, r3
 801c3b2:	3309      	adds	r3, #9
 801c3b4:	b29a      	uxth	r2, r3
 801c3b6:	693b      	ldr	r3, [r7, #16]
 801c3b8:	805a      	strh	r2, [r3, #2]
 801c3ba:	e006      	b.n	801c3ca <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801c3bc:	693b      	ldr	r3, [r7, #16]
 801c3be:	885b      	ldrh	r3, [r3, #2]
 801c3c0:	b29b      	uxth	r3, r3
 801c3c2:	3308      	adds	r3, #8
 801c3c4:	b29a      	uxth	r2, r3
 801c3c6:	693b      	ldr	r3, [r7, #16]
 801c3c8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	22ff      	movs	r2, #255	@ 0xff
 801c3ce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	2200      	movs	r2, #0
 801c3d4:	729a      	strb	r2, [r3, #10]
 801c3d6:	2200      	movs	r2, #0
 801c3d8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801c3da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c3dc:	4619      	mov	r1, r3
 801c3de:	68f8      	ldr	r0, [r7, #12]
 801c3e0:	f7f4 f9b6 	bl	8010750 <inet_chksum>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	461a      	mov	r2, r3
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	9302      	str	r3, [sp, #8]
 801c3f0:	2301      	movs	r3, #1
 801c3f2:	9301      	str	r3, [sp, #4]
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	9300      	str	r3, [sp, #0]
 801c3f8:	23ff      	movs	r3, #255	@ 0xff
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	69f9      	ldr	r1, [r7, #28]
 801c3fe:	6878      	ldr	r0, [r7, #4]
 801c400:	f000 faaa 	bl	801c958 <ip4_output_if>
 801c404:	4603      	mov	r3, r0
 801c406:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c408:	e001      	b.n	801c40e <icmp_input+0x20a>
      break;
 801c40a:	bf00      	nop
 801c40c:	e000      	b.n	801c410 <icmp_input+0x20c>
      break;
 801c40e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c410:	6878      	ldr	r0, [r7, #4]
 801c412:	f7f5 fd77 	bl	8011f04 <pbuf_free>
  return;
 801c416:	e013      	b.n	801c440 <icmp_input+0x23c>
    goto lenerr;
 801c418:	bf00      	nop
 801c41a:	e002      	b.n	801c422 <icmp_input+0x21e>
    goto lenerr;
 801c41c:	bf00      	nop
 801c41e:	e000      	b.n	801c422 <icmp_input+0x21e>
        goto lenerr;
 801c420:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c422:	6878      	ldr	r0, [r7, #4]
 801c424:	f7f5 fd6e 	bl	8011f04 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c428:	e00a      	b.n	801c440 <icmp_input+0x23c>
        goto icmperr;
 801c42a:	bf00      	nop
 801c42c:	e004      	b.n	801c438 <icmp_input+0x234>
        goto icmperr;
 801c42e:	bf00      	nop
 801c430:	e002      	b.n	801c438 <icmp_input+0x234>
          goto icmperr;
 801c432:	bf00      	nop
 801c434:	e000      	b.n	801c438 <icmp_input+0x234>
          goto icmperr;
 801c436:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c438:	6878      	ldr	r0, [r7, #4]
 801c43a:	f7f5 fd63 	bl	8011f04 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c43e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c440:	3728      	adds	r7, #40	@ 0x28
 801c442:	46bd      	mov	sp, r7
 801c444:	bd80      	pop	{r7, pc}
 801c446:	bf00      	nop
 801c448:	2000a348 	.word	0x2000a348
 801c44c:	2000a35c 	.word	0x2000a35c
 801c450:	08024fe8 	.word	0x08024fe8
 801c454:	08025020 	.word	0x08025020
 801c458:	08025058 	.word	0x08025058
 801c45c:	08025080 	.word	0x08025080

0801c460 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c460:	b580      	push	{r7, lr}
 801c462:	b082      	sub	sp, #8
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
 801c468:	460b      	mov	r3, r1
 801c46a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c46c:	78fb      	ldrb	r3, [r7, #3]
 801c46e:	461a      	mov	r2, r3
 801c470:	2103      	movs	r1, #3
 801c472:	6878      	ldr	r0, [r7, #4]
 801c474:	f000 f814 	bl	801c4a0 <icmp_send_response>
}
 801c478:	bf00      	nop
 801c47a:	3708      	adds	r7, #8
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}

0801c480 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b082      	sub	sp, #8
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	460b      	mov	r3, r1
 801c48a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c48c:	78fb      	ldrb	r3, [r7, #3]
 801c48e:	461a      	mov	r2, r3
 801c490:	210b      	movs	r1, #11
 801c492:	6878      	ldr	r0, [r7, #4]
 801c494:	f000 f804 	bl	801c4a0 <icmp_send_response>
}
 801c498:	bf00      	nop
 801c49a:	3708      	adds	r7, #8
 801c49c:	46bd      	mov	sp, r7
 801c49e:	bd80      	pop	{r7, pc}

0801c4a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b08c      	sub	sp, #48	@ 0x30
 801c4a4:	af04      	add	r7, sp, #16
 801c4a6:	6078      	str	r0, [r7, #4]
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	70fb      	strb	r3, [r7, #3]
 801c4ac:	4613      	mov	r3, r2
 801c4ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c4b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c4b4:	2124      	movs	r1, #36	@ 0x24
 801c4b6:	2022      	movs	r0, #34	@ 0x22
 801c4b8:	f7f5 fa3c 	bl	8011934 <pbuf_alloc>
 801c4bc:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801c4be:	69bb      	ldr	r3, [r7, #24]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d056      	beq.n	801c572 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c4c4:	69bb      	ldr	r3, [r7, #24]
 801c4c6:	895b      	ldrh	r3, [r3, #10]
 801c4c8:	2b23      	cmp	r3, #35	@ 0x23
 801c4ca:	d806      	bhi.n	801c4da <icmp_send_response+0x3a>
 801c4cc:	4b2b      	ldr	r3, [pc, #172]	@ (801c57c <icmp_send_response+0xdc>)
 801c4ce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801c4d2:	492b      	ldr	r1, [pc, #172]	@ (801c580 <icmp_send_response+0xe0>)
 801c4d4:	482b      	ldr	r0, [pc, #172]	@ (801c584 <icmp_send_response+0xe4>)
 801c4d6:	f002 fbcd 	bl	801ec74 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	685b      	ldr	r3, [r3, #4]
 801c4de:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c4e0:	69bb      	ldr	r3, [r7, #24]
 801c4e2:	685b      	ldr	r3, [r3, #4]
 801c4e4:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801c4e6:	693b      	ldr	r3, [r7, #16]
 801c4e8:	78fa      	ldrb	r2, [r7, #3]
 801c4ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c4ec:	693b      	ldr	r3, [r7, #16]
 801c4ee:	78ba      	ldrb	r2, [r7, #2]
 801c4f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c4f2:	693b      	ldr	r3, [r7, #16]
 801c4f4:	2200      	movs	r2, #0
 801c4f6:	711a      	strb	r2, [r3, #4]
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c4fc:	693b      	ldr	r3, [r7, #16]
 801c4fe:	2200      	movs	r2, #0
 801c500:	719a      	strb	r2, [r3, #6]
 801c502:	2200      	movs	r2, #0
 801c504:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c506:	69bb      	ldr	r3, [r7, #24]
 801c508:	685b      	ldr	r3, [r3, #4]
 801c50a:	f103 0008 	add.w	r0, r3, #8
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	685b      	ldr	r3, [r3, #4]
 801c512:	221c      	movs	r2, #28
 801c514:	4619      	mov	r1, r3
 801c516:	f002 fdd4 	bl	801f0c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c51a:	697b      	ldr	r3, [r7, #20]
 801c51c:	68db      	ldr	r3, [r3, #12]
 801c51e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c520:	f107 030c 	add.w	r3, r7, #12
 801c524:	4618      	mov	r0, r3
 801c526:	f000 f82f 	bl	801c588 <ip4_route>
 801c52a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801c52c:	69fb      	ldr	r3, [r7, #28]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d01b      	beq.n	801c56a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c532:	693b      	ldr	r3, [r7, #16]
 801c534:	2200      	movs	r2, #0
 801c536:	709a      	strb	r2, [r3, #2]
 801c538:	2200      	movs	r2, #0
 801c53a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801c53c:	69bb      	ldr	r3, [r7, #24]
 801c53e:	895b      	ldrh	r3, [r3, #10]
 801c540:	4619      	mov	r1, r3
 801c542:	6938      	ldr	r0, [r7, #16]
 801c544:	f7f4 f904 	bl	8010750 <inet_chksum>
 801c548:	4603      	mov	r3, r0
 801c54a:	461a      	mov	r2, r3
 801c54c:	693b      	ldr	r3, [r7, #16]
 801c54e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c550:	f107 020c 	add.w	r2, r7, #12
 801c554:	69fb      	ldr	r3, [r7, #28]
 801c556:	9302      	str	r3, [sp, #8]
 801c558:	2301      	movs	r3, #1
 801c55a:	9301      	str	r3, [sp, #4]
 801c55c:	2300      	movs	r3, #0
 801c55e:	9300      	str	r3, [sp, #0]
 801c560:	23ff      	movs	r3, #255	@ 0xff
 801c562:	2100      	movs	r1, #0
 801c564:	69b8      	ldr	r0, [r7, #24]
 801c566:	f000 f9f7 	bl	801c958 <ip4_output_if>
  }
  pbuf_free(q);
 801c56a:	69b8      	ldr	r0, [r7, #24]
 801c56c:	f7f5 fcca 	bl	8011f04 <pbuf_free>
 801c570:	e000      	b.n	801c574 <icmp_send_response+0xd4>
    return;
 801c572:	bf00      	nop
}
 801c574:	3720      	adds	r7, #32
 801c576:	46bd      	mov	sp, r7
 801c578:	bd80      	pop	{r7, pc}
 801c57a:	bf00      	nop
 801c57c:	08024fe8 	.word	0x08024fe8
 801c580:	080250b4 	.word	0x080250b4
 801c584:	08025058 	.word	0x08025058

0801c588 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c588:	b480      	push	{r7}
 801c58a:	b085      	sub	sp, #20
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c590:	4b33      	ldr	r3, [pc, #204]	@ (801c660 <ip4_route+0xd8>)
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	60fb      	str	r3, [r7, #12]
 801c596:	e036      	b.n	801c606 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c59e:	f003 0301 	and.w	r3, r3, #1
 801c5a2:	b2db      	uxtb	r3, r3
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d02b      	beq.n	801c600 <ip4_route+0x78>
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c5ae:	089b      	lsrs	r3, r3, #2
 801c5b0:	f003 0301 	and.w	r3, r3, #1
 801c5b4:	b2db      	uxtb	r3, r3
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d022      	beq.n	801c600 <ip4_route+0x78>
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	3304      	adds	r3, #4
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d01d      	beq.n	801c600 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	681a      	ldr	r2, [r3, #0]
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	3304      	adds	r3, #4
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	405a      	eors	r2, r3
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	3308      	adds	r3, #8
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	4013      	ands	r3, r2
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d101      	bne.n	801c5e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	e038      	b.n	801c652 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c5e6:	f003 0302 	and.w	r3, r3, #2
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d108      	bne.n	801c600 <ip4_route+0x78>
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	681a      	ldr	r2, [r3, #0]
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	330c      	adds	r3, #12
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d101      	bne.n	801c600 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	e028      	b.n	801c652 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	60fb      	str	r3, [r7, #12]
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d1c5      	bne.n	801c598 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c60c:	4b15      	ldr	r3, [pc, #84]	@ (801c664 <ip4_route+0xdc>)
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	2b00      	cmp	r3, #0
 801c612:	d01a      	beq.n	801c64a <ip4_route+0xc2>
 801c614:	4b13      	ldr	r3, [pc, #76]	@ (801c664 <ip4_route+0xdc>)
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c61c:	f003 0301 	and.w	r3, r3, #1
 801c620:	2b00      	cmp	r3, #0
 801c622:	d012      	beq.n	801c64a <ip4_route+0xc2>
 801c624:	4b0f      	ldr	r3, [pc, #60]	@ (801c664 <ip4_route+0xdc>)
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c62c:	f003 0304 	and.w	r3, r3, #4
 801c630:	2b00      	cmp	r3, #0
 801c632:	d00a      	beq.n	801c64a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c634:	4b0b      	ldr	r3, [pc, #44]	@ (801c664 <ip4_route+0xdc>)
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	3304      	adds	r3, #4
 801c63a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d004      	beq.n	801c64a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	b2db      	uxtb	r3, r3
 801c646:	2b7f      	cmp	r3, #127	@ 0x7f
 801c648:	d101      	bne.n	801c64e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c64a:	2300      	movs	r3, #0
 801c64c:	e001      	b.n	801c652 <ip4_route+0xca>
  }

  return netif_default;
 801c64e:	4b05      	ldr	r3, [pc, #20]	@ (801c664 <ip4_route+0xdc>)
 801c650:	681b      	ldr	r3, [r3, #0]
}
 801c652:	4618      	mov	r0, r3
 801c654:	3714      	adds	r7, #20
 801c656:	46bd      	mov	sp, r7
 801c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c65c:	4770      	bx	lr
 801c65e:	bf00      	nop
 801c660:	20013db0 	.word	0x20013db0
 801c664:	20013db4 	.word	0x20013db4

0801c668 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c668:	b580      	push	{r7, lr}
 801c66a:	b082      	sub	sp, #8
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c676:	f003 0301 	and.w	r3, r3, #1
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d016      	beq.n	801c6ae <ip4_input_accept+0x46>
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	3304      	adds	r3, #4
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d011      	beq.n	801c6ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c68a:	4b0b      	ldr	r3, [pc, #44]	@ (801c6b8 <ip4_input_accept+0x50>)
 801c68c:	695a      	ldr	r2, [r3, #20]
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	3304      	adds	r3, #4
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	429a      	cmp	r2, r3
 801c696:	d008      	beq.n	801c6aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c698:	4b07      	ldr	r3, [pc, #28]	@ (801c6b8 <ip4_input_accept+0x50>)
 801c69a:	695b      	ldr	r3, [r3, #20]
 801c69c:	6879      	ldr	r1, [r7, #4]
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f000 fa98 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801c6a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d001      	beq.n	801c6ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c6aa:	2301      	movs	r3, #1
 801c6ac:	e000      	b.n	801c6b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c6ae:	2300      	movs	r3, #0
}
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	3708      	adds	r7, #8
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}
 801c6b8:	2000a348 	.word	0x2000a348

0801c6bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	b088      	sub	sp, #32
 801c6c0:	af00      	add	r7, sp, #0
 801c6c2:	6078      	str	r0, [r7, #4]
 801c6c4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	685b      	ldr	r3, [r3, #4]
 801c6ce:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801c6d0:	693b      	ldr	r3, [r7, #16]
 801c6d2:	781b      	ldrb	r3, [r3, #0]
 801c6d4:	091b      	lsrs	r3, r3, #4
 801c6d6:	b2db      	uxtb	r3, r3
 801c6d8:	2b04      	cmp	r3, #4
 801c6da:	d004      	beq.n	801c6e6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c6dc:	6878      	ldr	r0, [r7, #4]
 801c6de:	f7f5 fc11 	bl	8011f04 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	e130      	b.n	801c948 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c6e6:	693b      	ldr	r3, [r7, #16]
 801c6e8:	781b      	ldrb	r3, [r3, #0]
 801c6ea:	f003 030f 	and.w	r3, r3, #15
 801c6ee:	b2db      	uxtb	r3, r3
 801c6f0:	009b      	lsls	r3, r3, #2
 801c6f2:	b2db      	uxtb	r3, r3
 801c6f4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c6f6:	693b      	ldr	r3, [r7, #16]
 801c6f8:	885b      	ldrh	r3, [r3, #2]
 801c6fa:	b29b      	uxth	r3, r3
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	f7f3 fedf 	bl	80104c0 <lwip_htons>
 801c702:	4603      	mov	r3, r0
 801c704:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	891b      	ldrh	r3, [r3, #8]
 801c70a:	89ba      	ldrh	r2, [r7, #12]
 801c70c:	429a      	cmp	r2, r3
 801c70e:	d204      	bcs.n	801c71a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801c710:	89bb      	ldrh	r3, [r7, #12]
 801c712:	4619      	mov	r1, r3
 801c714:	6878      	ldr	r0, [r7, #4]
 801c716:	f7f5 fa6f 	bl	8011bf8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	895b      	ldrh	r3, [r3, #10]
 801c71e:	89fa      	ldrh	r2, [r7, #14]
 801c720:	429a      	cmp	r2, r3
 801c722:	d807      	bhi.n	801c734 <ip4_input+0x78>
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	891b      	ldrh	r3, [r3, #8]
 801c728:	89ba      	ldrh	r2, [r7, #12]
 801c72a:	429a      	cmp	r2, r3
 801c72c:	d802      	bhi.n	801c734 <ip4_input+0x78>
 801c72e:	89fb      	ldrh	r3, [r7, #14]
 801c730:	2b13      	cmp	r3, #19
 801c732:	d804      	bhi.n	801c73e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c734:	6878      	ldr	r0, [r7, #4]
 801c736:	f7f5 fbe5 	bl	8011f04 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c73a:	2300      	movs	r3, #0
 801c73c:	e104      	b.n	801c948 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 801c73e:	89fb      	ldrh	r3, [r7, #14]
 801c740:	4619      	mov	r1, r3
 801c742:	6938      	ldr	r0, [r7, #16]
 801c744:	f7f4 f804 	bl	8010750 <inet_chksum>
 801c748:	4603      	mov	r3, r0
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d004      	beq.n	801c758 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 801c74e:	6878      	ldr	r0, [r7, #4]
 801c750:	f7f5 fbd8 	bl	8011f04 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 801c754:	2300      	movs	r3, #0
 801c756:	e0f7      	b.n	801c948 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c758:	693b      	ldr	r3, [r7, #16]
 801c75a:	691b      	ldr	r3, [r3, #16]
 801c75c:	4a7c      	ldr	r2, [pc, #496]	@ (801c950 <ip4_input+0x294>)
 801c75e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c760:	693b      	ldr	r3, [r7, #16]
 801c762:	68db      	ldr	r3, [r3, #12]
 801c764:	4a7a      	ldr	r2, [pc, #488]	@ (801c950 <ip4_input+0x294>)
 801c766:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c768:	4b79      	ldr	r3, [pc, #484]	@ (801c950 <ip4_input+0x294>)
 801c76a:	695b      	ldr	r3, [r3, #20]
 801c76c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c770:	2be0      	cmp	r3, #224	@ 0xe0
 801c772:	d112      	bne.n	801c79a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c774:	683b      	ldr	r3, [r7, #0]
 801c776:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c77a:	f003 0301 	and.w	r3, r3, #1
 801c77e:	b2db      	uxtb	r3, r3
 801c780:	2b00      	cmp	r3, #0
 801c782:	d007      	beq.n	801c794 <ip4_input+0xd8>
 801c784:	683b      	ldr	r3, [r7, #0]
 801c786:	3304      	adds	r3, #4
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d002      	beq.n	801c794 <ip4_input+0xd8>
      netif = inp;
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	61fb      	str	r3, [r7, #28]
 801c792:	e02a      	b.n	801c7ea <ip4_input+0x12e>
    } else {
      netif = NULL;
 801c794:	2300      	movs	r3, #0
 801c796:	61fb      	str	r3, [r7, #28]
 801c798:	e027      	b.n	801c7ea <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c79a:	6838      	ldr	r0, [r7, #0]
 801c79c:	f7ff ff64 	bl	801c668 <ip4_input_accept>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d002      	beq.n	801c7ac <ip4_input+0xf0>
      netif = inp;
 801c7a6:	683b      	ldr	r3, [r7, #0]
 801c7a8:	61fb      	str	r3, [r7, #28]
 801c7aa:	e01e      	b.n	801c7ea <ip4_input+0x12e>
    } else {
      netif = NULL;
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c7b0:	4b67      	ldr	r3, [pc, #412]	@ (801c950 <ip4_input+0x294>)
 801c7b2:	695b      	ldr	r3, [r3, #20]
 801c7b4:	b2db      	uxtb	r3, r3
 801c7b6:	2b7f      	cmp	r3, #127	@ 0x7f
 801c7b8:	d017      	beq.n	801c7ea <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c7ba:	4b66      	ldr	r3, [pc, #408]	@ (801c954 <ip4_input+0x298>)
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	61fb      	str	r3, [r7, #28]
 801c7c0:	e00e      	b.n	801c7e0 <ip4_input+0x124>
          if (netif == inp) {
 801c7c2:	69fa      	ldr	r2, [r7, #28]
 801c7c4:	683b      	ldr	r3, [r7, #0]
 801c7c6:	429a      	cmp	r2, r3
 801c7c8:	d006      	beq.n	801c7d8 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c7ca:	69f8      	ldr	r0, [r7, #28]
 801c7cc:	f7ff ff4c 	bl	801c668 <ip4_input_accept>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d108      	bne.n	801c7e8 <ip4_input+0x12c>
 801c7d6:	e000      	b.n	801c7da <ip4_input+0x11e>
            continue;
 801c7d8:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c7da:	69fb      	ldr	r3, [r7, #28]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	61fb      	str	r3, [r7, #28]
 801c7e0:	69fb      	ldr	r3, [r7, #28]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d1ed      	bne.n	801c7c2 <ip4_input+0x106>
 801c7e6:	e000      	b.n	801c7ea <ip4_input+0x12e>
            break;
 801c7e8:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801c7ea:	69fb      	ldr	r3, [r7, #28]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d111      	bne.n	801c814 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801c7f0:	693b      	ldr	r3, [r7, #16]
 801c7f2:	7a5b      	ldrb	r3, [r3, #9]
 801c7f4:	2b11      	cmp	r3, #17
 801c7f6:	d10d      	bne.n	801c814 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801c7f8:	89fb      	ldrh	r3, [r7, #14]
 801c7fa:	693a      	ldr	r2, [r7, #16]
 801c7fc:	4413      	add	r3, r2
 801c7fe:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801c800:	69bb      	ldr	r3, [r7, #24]
 801c802:	885b      	ldrh	r3, [r3, #2]
 801c804:	b29b      	uxth	r3, r3
 801c806:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801c80a:	d103      	bne.n	801c814 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801c80c:	683b      	ldr	r3, [r7, #0]
 801c80e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 801c810:	2300      	movs	r3, #0
 801c812:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d017      	beq.n	801c84a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801c81a:	4b4d      	ldr	r3, [pc, #308]	@ (801c950 <ip4_input+0x294>)
 801c81c:	691b      	ldr	r3, [r3, #16]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d013      	beq.n	801c84a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c822:	4b4b      	ldr	r3, [pc, #300]	@ (801c950 <ip4_input+0x294>)
 801c824:	691b      	ldr	r3, [r3, #16]
 801c826:	6839      	ldr	r1, [r7, #0]
 801c828:	4618      	mov	r0, r3
 801c82a:	f000 f9d3 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801c82e:	4603      	mov	r3, r0
 801c830:	2b00      	cmp	r3, #0
 801c832:	d105      	bne.n	801c840 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c834:	4b46      	ldr	r3, [pc, #280]	@ (801c950 <ip4_input+0x294>)
 801c836:	691b      	ldr	r3, [r3, #16]
 801c838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c83c:	2be0      	cmp	r3, #224	@ 0xe0
 801c83e:	d104      	bne.n	801c84a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c840:	6878      	ldr	r0, [r7, #4]
 801c842:	f7f5 fb5f 	bl	8011f04 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c846:	2300      	movs	r3, #0
 801c848:	e07e      	b.n	801c948 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c84a:	69fb      	ldr	r3, [r7, #28]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d104      	bne.n	801c85a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c850:	6878      	ldr	r0, [r7, #4]
 801c852:	f7f5 fb57 	bl	8011f04 <pbuf_free>
    return ERR_OK;
 801c856:	2300      	movs	r3, #0
 801c858:	e076      	b.n	801c948 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c85a:	693b      	ldr	r3, [r7, #16]
 801c85c:	88db      	ldrh	r3, [r3, #6]
 801c85e:	b29b      	uxth	r3, r3
 801c860:	461a      	mov	r2, r3
 801c862:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801c866:	4013      	ands	r3, r2
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d00b      	beq.n	801c884 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c86c:	6878      	ldr	r0, [r7, #4]
 801c86e:	f000 fe21 	bl	801d4b4 <ip4_reass>
 801c872:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	2b00      	cmp	r3, #0
 801c878:	d101      	bne.n	801c87e <ip4_input+0x1c2>
      return ERR_OK;
 801c87a:	2300      	movs	r3, #0
 801c87c:	e064      	b.n	801c948 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	685b      	ldr	r3, [r3, #4]
 801c882:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c884:	4a32      	ldr	r2, [pc, #200]	@ (801c950 <ip4_input+0x294>)
 801c886:	69fb      	ldr	r3, [r7, #28]
 801c888:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c88a:	4a31      	ldr	r2, [pc, #196]	@ (801c950 <ip4_input+0x294>)
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c890:	4a2f      	ldr	r2, [pc, #188]	@ (801c950 <ip4_input+0x294>)
 801c892:	693b      	ldr	r3, [r7, #16]
 801c894:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c896:	693b      	ldr	r3, [r7, #16]
 801c898:	781b      	ldrb	r3, [r3, #0]
 801c89a:	f003 030f 	and.w	r3, r3, #15
 801c89e:	b2db      	uxtb	r3, r3
 801c8a0:	009b      	lsls	r3, r3, #2
 801c8a2:	b2db      	uxtb	r3, r3
 801c8a4:	461a      	mov	r2, r3
 801c8a6:	4b2a      	ldr	r3, [pc, #168]	@ (801c950 <ip4_input+0x294>)
 801c8a8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c8aa:	89fb      	ldrh	r3, [r7, #14]
 801c8ac:	4619      	mov	r1, r3
 801c8ae:	6878      	ldr	r0, [r7, #4]
 801c8b0:	f7f5 faa2 	bl	8011df8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c8b4:	693b      	ldr	r3, [r7, #16]
 801c8b6:	7a5b      	ldrb	r3, [r3, #9]
 801c8b8:	2b11      	cmp	r3, #17
 801c8ba:	d006      	beq.n	801c8ca <ip4_input+0x20e>
 801c8bc:	2b11      	cmp	r3, #17
 801c8be:	dc13      	bgt.n	801c8e8 <ip4_input+0x22c>
 801c8c0:	2b01      	cmp	r3, #1
 801c8c2:	d00c      	beq.n	801c8de <ip4_input+0x222>
 801c8c4:	2b06      	cmp	r3, #6
 801c8c6:	d005      	beq.n	801c8d4 <ip4_input+0x218>
 801c8c8:	e00e      	b.n	801c8e8 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c8ca:	6839      	ldr	r1, [r7, #0]
 801c8cc:	6878      	ldr	r0, [r7, #4]
 801c8ce:	f7fc f973 	bl	8018bb8 <udp_input>
        break;
 801c8d2:	e026      	b.n	801c922 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c8d4:	6839      	ldr	r1, [r7, #0]
 801c8d6:	6878      	ldr	r0, [r7, #4]
 801c8d8:	f7f7 fc8c 	bl	80141f4 <tcp_input>
        break;
 801c8dc:	e021      	b.n	801c922 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c8de:	6839      	ldr	r1, [r7, #0]
 801c8e0:	6878      	ldr	r0, [r7, #4]
 801c8e2:	f7ff fc8f 	bl	801c204 <icmp_input>
        break;
 801c8e6:	e01c      	b.n	801c922 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c8e8:	4b19      	ldr	r3, [pc, #100]	@ (801c950 <ip4_input+0x294>)
 801c8ea:	695b      	ldr	r3, [r3, #20]
 801c8ec:	69f9      	ldr	r1, [r7, #28]
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f000 f970 	bl	801cbd4 <ip4_addr_isbroadcast_u32>
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d10f      	bne.n	801c91a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c8fa:	4b15      	ldr	r3, [pc, #84]	@ (801c950 <ip4_input+0x294>)
 801c8fc:	695b      	ldr	r3, [r3, #20]
 801c8fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c902:	2be0      	cmp	r3, #224	@ 0xe0
 801c904:	d009      	beq.n	801c91a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c90a:	4619      	mov	r1, r3
 801c90c:	6878      	ldr	r0, [r7, #4]
 801c90e:	f7f5 fae6 	bl	8011ede <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c912:	2102      	movs	r1, #2
 801c914:	6878      	ldr	r0, [r7, #4]
 801c916:	f7ff fda3 	bl	801c460 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c91a:	6878      	ldr	r0, [r7, #4]
 801c91c:	f7f5 faf2 	bl	8011f04 <pbuf_free>
        break;
 801c920:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c922:	4b0b      	ldr	r3, [pc, #44]	@ (801c950 <ip4_input+0x294>)
 801c924:	2200      	movs	r2, #0
 801c926:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c928:	4b09      	ldr	r3, [pc, #36]	@ (801c950 <ip4_input+0x294>)
 801c92a:	2200      	movs	r2, #0
 801c92c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c92e:	4b08      	ldr	r3, [pc, #32]	@ (801c950 <ip4_input+0x294>)
 801c930:	2200      	movs	r2, #0
 801c932:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c934:	4b06      	ldr	r3, [pc, #24]	@ (801c950 <ip4_input+0x294>)
 801c936:	2200      	movs	r2, #0
 801c938:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c93a:	4b05      	ldr	r3, [pc, #20]	@ (801c950 <ip4_input+0x294>)
 801c93c:	2200      	movs	r2, #0
 801c93e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c940:	4b03      	ldr	r3, [pc, #12]	@ (801c950 <ip4_input+0x294>)
 801c942:	2200      	movs	r2, #0
 801c944:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c946:	2300      	movs	r3, #0
}
 801c948:	4618      	mov	r0, r3
 801c94a:	3720      	adds	r7, #32
 801c94c:	46bd      	mov	sp, r7
 801c94e:	bd80      	pop	{r7, pc}
 801c950:	2000a348 	.word	0x2000a348
 801c954:	20013db0 	.word	0x20013db0

0801c958 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b08a      	sub	sp, #40	@ 0x28
 801c95c:	af04      	add	r7, sp, #16
 801c95e:	60f8      	str	r0, [r7, #12]
 801c960:	60b9      	str	r1, [r7, #8]
 801c962:	607a      	str	r2, [r7, #4]
 801c964:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c966:	68bb      	ldr	r3, [r7, #8]
 801c968:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d009      	beq.n	801c984 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c970:	68bb      	ldr	r3, [r7, #8]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d003      	beq.n	801c97e <ip4_output_if+0x26>
 801c976:	68bb      	ldr	r3, [r7, #8]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d102      	bne.n	801c984 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c980:	3304      	adds	r3, #4
 801c982:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c984:	78fa      	ldrb	r2, [r7, #3]
 801c986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c988:	9302      	str	r3, [sp, #8]
 801c98a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c98e:	9301      	str	r3, [sp, #4]
 801c990:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c994:	9300      	str	r3, [sp, #0]
 801c996:	4613      	mov	r3, r2
 801c998:	687a      	ldr	r2, [r7, #4]
 801c99a:	6979      	ldr	r1, [r7, #20]
 801c99c:	68f8      	ldr	r0, [r7, #12]
 801c99e:	f000 f805 	bl	801c9ac <ip4_output_if_src>
 801c9a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	3718      	adds	r7, #24
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}

0801c9ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b088      	sub	sp, #32
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	607a      	str	r2, [r7, #4]
 801c9b8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	7b9b      	ldrb	r3, [r3, #14]
 801c9c2:	2b01      	cmp	r3, #1
 801c9c4:	d006      	beq.n	801c9d4 <ip4_output_if_src+0x28>
 801c9c6:	4b7d      	ldr	r3, [pc, #500]	@ (801cbbc <ip4_output_if_src+0x210>)
 801c9c8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c9cc:	497c      	ldr	r1, [pc, #496]	@ (801cbc0 <ip4_output_if_src+0x214>)
 801c9ce:	487d      	ldr	r0, [pc, #500]	@ (801cbc4 <ip4_output_if_src+0x218>)
 801c9d0:	f002 f950 	bl	801ec74 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	f000 80c4 	beq.w	801cb64 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801c9dc:	2314      	movs	r3, #20
 801c9de:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c9e0:	2114      	movs	r1, #20
 801c9e2:	68f8      	ldr	r0, [r7, #12]
 801c9e4:	f7f5 f9f8 	bl	8011dd8 <pbuf_add_header>
 801c9e8:	4603      	mov	r3, r0
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d002      	beq.n	801c9f4 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c9ee:	f06f 0301 	mvn.w	r3, #1
 801c9f2:	e0df      	b.n	801cbb4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	685b      	ldr	r3, [r3, #4]
 801c9f8:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	895b      	ldrh	r3, [r3, #10]
 801c9fe:	2b13      	cmp	r3, #19
 801ca00:	d806      	bhi.n	801ca10 <ip4_output_if_src+0x64>
 801ca02:	4b6e      	ldr	r3, [pc, #440]	@ (801cbbc <ip4_output_if_src+0x210>)
 801ca04:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801ca08:	496f      	ldr	r1, [pc, #444]	@ (801cbc8 <ip4_output_if_src+0x21c>)
 801ca0a:	486e      	ldr	r0, [pc, #440]	@ (801cbc4 <ip4_output_if_src+0x218>)
 801ca0c:	f002 f932 	bl	801ec74 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ca10:	69bb      	ldr	r3, [r7, #24]
 801ca12:	78fa      	ldrb	r2, [r7, #3]
 801ca14:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ca16:	69bb      	ldr	r3, [r7, #24]
 801ca18:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801ca1c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801ca1e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801ca22:	78fb      	ldrb	r3, [r7, #3]
 801ca24:	021b      	lsls	r3, r3, #8
 801ca26:	4313      	orrs	r3, r2
 801ca28:	021b      	lsls	r3, r3, #8
 801ca2a:	b21a      	sxth	r2, r3
 801ca2c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 801ca30:	78fb      	ldrb	r3, [r7, #3]
 801ca32:	021b      	lsls	r3, r3, #8
 801ca34:	430b      	orrs	r3, r1
 801ca36:	121b      	asrs	r3, r3, #8
 801ca38:	b21b      	sxth	r3, r3
 801ca3a:	b2db      	uxtb	r3, r3
 801ca3c:	b21b      	sxth	r3, r3
 801ca3e:	4313      	orrs	r3, r2
 801ca40:	b21b      	sxth	r3, r3
 801ca42:	b29b      	uxth	r3, r3
 801ca44:	461a      	mov	r2, r3
 801ca46:	69fb      	ldr	r3, [r7, #28]
 801ca48:	4413      	add	r3, r2
 801ca4a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681a      	ldr	r2, [r3, #0]
 801ca50:	69bb      	ldr	r3, [r7, #24]
 801ca52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 801ca54:	69bb      	ldr	r3, [r7, #24]
 801ca56:	691b      	ldr	r3, [r3, #16]
 801ca58:	b29b      	uxth	r3, r3
 801ca5a:	69fa      	ldr	r2, [r7, #28]
 801ca5c:	4413      	add	r3, r2
 801ca5e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801ca60:	69bb      	ldr	r3, [r7, #24]
 801ca62:	691b      	ldr	r3, [r3, #16]
 801ca64:	0c1b      	lsrs	r3, r3, #16
 801ca66:	69fa      	ldr	r2, [r7, #28]
 801ca68:	4413      	add	r3, r2
 801ca6a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ca6c:	8afb      	ldrh	r3, [r7, #22]
 801ca6e:	089b      	lsrs	r3, r3, #2
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	b2db      	uxtb	r3, r3
 801ca74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca78:	b2da      	uxtb	r2, r3
 801ca7a:	69bb      	ldr	r3, [r7, #24]
 801ca7c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ca7e:	69bb      	ldr	r3, [r7, #24]
 801ca80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801ca84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801ca86:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801ca8a:	69bb      	ldr	r3, [r7, #24]
 801ca8c:	781b      	ldrb	r3, [r3, #0]
 801ca8e:	021b      	lsls	r3, r3, #8
 801ca90:	4313      	orrs	r3, r2
 801ca92:	021b      	lsls	r3, r3, #8
 801ca94:	b21a      	sxth	r2, r3
 801ca96:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 801ca9a:	69bb      	ldr	r3, [r7, #24]
 801ca9c:	781b      	ldrb	r3, [r3, #0]
 801ca9e:	021b      	lsls	r3, r3, #8
 801caa0:	430b      	orrs	r3, r1
 801caa2:	121b      	asrs	r3, r3, #8
 801caa4:	b21b      	sxth	r3, r3
 801caa6:	b2db      	uxtb	r3, r3
 801caa8:	b21b      	sxth	r3, r3
 801caaa:	4313      	orrs	r3, r2
 801caac:	b21b      	sxth	r3, r3
 801caae:	b29b      	uxth	r3, r3
 801cab0:	461a      	mov	r2, r3
 801cab2:	69fb      	ldr	r3, [r7, #28]
 801cab4:	4413      	add	r3, r2
 801cab6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	891b      	ldrh	r3, [r3, #8]
 801cabc:	4618      	mov	r0, r3
 801cabe:	f7f3 fcff 	bl	80104c0 <lwip_htons>
 801cac2:	4603      	mov	r3, r0
 801cac4:	461a      	mov	r2, r3
 801cac6:	69bb      	ldr	r3, [r7, #24]
 801cac8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801caca:	69bb      	ldr	r3, [r7, #24]
 801cacc:	885b      	ldrh	r3, [r3, #2]
 801cace:	b29b      	uxth	r3, r3
 801cad0:	461a      	mov	r2, r3
 801cad2:	69fb      	ldr	r3, [r7, #28]
 801cad4:	4413      	add	r3, r2
 801cad6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cad8:	69bb      	ldr	r3, [r7, #24]
 801cada:	2200      	movs	r2, #0
 801cadc:	719a      	strb	r2, [r3, #6]
 801cade:	2200      	movs	r2, #0
 801cae0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cae2:	4b3a      	ldr	r3, [pc, #232]	@ (801cbcc <ip4_output_if_src+0x220>)
 801cae4:	881b      	ldrh	r3, [r3, #0]
 801cae6:	4618      	mov	r0, r3
 801cae8:	f7f3 fcea 	bl	80104c0 <lwip_htons>
 801caec:	4603      	mov	r3, r0
 801caee:	461a      	mov	r2, r3
 801caf0:	69bb      	ldr	r3, [r7, #24]
 801caf2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 801caf4:	69bb      	ldr	r3, [r7, #24]
 801caf6:	889b      	ldrh	r3, [r3, #4]
 801caf8:	b29b      	uxth	r3, r3
 801cafa:	461a      	mov	r2, r3
 801cafc:	69fb      	ldr	r3, [r7, #28]
 801cafe:	4413      	add	r3, r2
 801cb00:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801cb02:	4b32      	ldr	r3, [pc, #200]	@ (801cbcc <ip4_output_if_src+0x220>)
 801cb04:	881b      	ldrh	r3, [r3, #0]
 801cb06:	3301      	adds	r3, #1
 801cb08:	b29a      	uxth	r2, r3
 801cb0a:	4b30      	ldr	r3, [pc, #192]	@ (801cbcc <ip4_output_if_src+0x220>)
 801cb0c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cb0e:	68bb      	ldr	r3, [r7, #8]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d104      	bne.n	801cb1e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cb14:	4b2e      	ldr	r3, [pc, #184]	@ (801cbd0 <ip4_output_if_src+0x224>)
 801cb16:	681a      	ldr	r2, [r3, #0]
 801cb18:	69bb      	ldr	r3, [r7, #24]
 801cb1a:	60da      	str	r2, [r3, #12]
 801cb1c:	e003      	b.n	801cb26 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cb1e:	68bb      	ldr	r3, [r7, #8]
 801cb20:	681a      	ldr	r2, [r3, #0]
 801cb22:	69bb      	ldr	r3, [r7, #24]
 801cb24:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801cb26:	69bb      	ldr	r3, [r7, #24]
 801cb28:	68db      	ldr	r3, [r3, #12]
 801cb2a:	b29b      	uxth	r3, r3
 801cb2c:	69fa      	ldr	r2, [r7, #28]
 801cb2e:	4413      	add	r3, r2
 801cb30:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801cb32:	69bb      	ldr	r3, [r7, #24]
 801cb34:	68db      	ldr	r3, [r3, #12]
 801cb36:	0c1b      	lsrs	r3, r3, #16
 801cb38:	69fa      	ldr	r2, [r7, #28]
 801cb3a:	4413      	add	r3, r2
 801cb3c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801cb3e:	69fb      	ldr	r3, [r7, #28]
 801cb40:	0c1a      	lsrs	r2, r3, #16
 801cb42:	69fb      	ldr	r3, [r7, #28]
 801cb44:	b29b      	uxth	r3, r3
 801cb46:	4413      	add	r3, r2
 801cb48:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801cb4a:	69fb      	ldr	r3, [r7, #28]
 801cb4c:	0c1b      	lsrs	r3, r3, #16
 801cb4e:	69fa      	ldr	r2, [r7, #28]
 801cb50:	4413      	add	r3, r2
 801cb52:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	43db      	mvns	r3, r3
 801cb58:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801cb5a:	69fb      	ldr	r3, [r7, #28]
 801cb5c:	b29a      	uxth	r2, r3
 801cb5e:	69bb      	ldr	r3, [r7, #24]
 801cb60:	815a      	strh	r2, [r3, #10]
 801cb62:	e00f      	b.n	801cb84 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	895b      	ldrh	r3, [r3, #10]
 801cb68:	2b13      	cmp	r3, #19
 801cb6a:	d802      	bhi.n	801cb72 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cb6c:	f06f 0301 	mvn.w	r3, #1
 801cb70:	e020      	b.n	801cbb4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	685b      	ldr	r3, [r3, #4]
 801cb76:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cb78:	69bb      	ldr	r3, [r7, #24]
 801cb7a:	691b      	ldr	r3, [r3, #16]
 801cb7c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801cb7e:	f107 0310 	add.w	r3, r7, #16
 801cb82:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d00c      	beq.n	801cba6 <ip4_output_if_src+0x1fa>
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	891a      	ldrh	r2, [r3, #8]
 801cb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d906      	bls.n	801cba6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 801cb98:	687a      	ldr	r2, [r7, #4]
 801cb9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801cb9c:	68f8      	ldr	r0, [r7, #12]
 801cb9e:	f000 fe85 	bl	801d8ac <ip4_frag>
 801cba2:	4603      	mov	r3, r0
 801cba4:	e006      	b.n	801cbb4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cba8:	695b      	ldr	r3, [r3, #20]
 801cbaa:	687a      	ldr	r2, [r7, #4]
 801cbac:	68f9      	ldr	r1, [r7, #12]
 801cbae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cbb0:	4798      	blx	r3
 801cbb2:	4603      	mov	r3, r0
}
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	3720      	adds	r7, #32
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	bd80      	pop	{r7, pc}
 801cbbc:	080250e0 	.word	0x080250e0
 801cbc0:	08025114 	.word	0x08025114
 801cbc4:	08025120 	.word	0x08025120
 801cbc8:	08025148 	.word	0x08025148
 801cbcc:	20013f46 	.word	0x20013f46
 801cbd0:	08071298 	.word	0x08071298

0801cbd4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cbd4:	b480      	push	{r7}
 801cbd6:	b085      	sub	sp, #20
 801cbd8:	af00      	add	r7, sp, #0
 801cbda:	6078      	str	r0, [r7, #4]
 801cbdc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbe8:	d002      	beq.n	801cbf0 <ip4_addr_isbroadcast_u32+0x1c>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d101      	bne.n	801cbf4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cbf0:	2301      	movs	r3, #1
 801cbf2:	e02a      	b.n	801cc4a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cbf4:	683b      	ldr	r3, [r7, #0]
 801cbf6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cbfa:	f003 0302 	and.w	r3, r3, #2
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d101      	bne.n	801cc06 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cc02:	2300      	movs	r3, #0
 801cc04:	e021      	b.n	801cc4a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cc06:	683b      	ldr	r3, [r7, #0]
 801cc08:	3304      	adds	r3, #4
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	687a      	ldr	r2, [r7, #4]
 801cc0e:	429a      	cmp	r2, r3
 801cc10:	d101      	bne.n	801cc16 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801cc12:	2300      	movs	r3, #0
 801cc14:	e019      	b.n	801cc4a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801cc16:	68fa      	ldr	r2, [r7, #12]
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	3304      	adds	r3, #4
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	405a      	eors	r2, r3
 801cc20:	683b      	ldr	r3, [r7, #0]
 801cc22:	3308      	adds	r3, #8
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	4013      	ands	r3, r2
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d10d      	bne.n	801cc48 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	3308      	adds	r3, #8
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	43da      	mvns	r2, r3
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cc38:	683b      	ldr	r3, [r7, #0]
 801cc3a:	3308      	adds	r3, #8
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cc40:	429a      	cmp	r2, r3
 801cc42:	d101      	bne.n	801cc48 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cc44:	2301      	movs	r3, #1
 801cc46:	e000      	b.n	801cc4a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cc48:	2300      	movs	r3, #0
  }
}
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	3714      	adds	r7, #20
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc54:	4770      	bx	lr
	...

0801cc58 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b08a      	sub	sp, #40	@ 0x28
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
 801cc60:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801cc62:	f107 030c 	add.w	r3, r7, #12
 801cc66:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	781b      	ldrb	r3, [r3, #0]
 801cc6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801cc70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801cc74:	3301      	adds	r3, #1
 801cc76:	4a89      	ldr	r2, [pc, #548]	@ (801ce9c <ip4addr_aton+0x244>)
 801cc78:	4413      	add	r3, r2
 801cc7a:	781b      	ldrb	r3, [r3, #0]
 801cc7c:	f003 0304 	and.w	r3, r3, #4
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d101      	bne.n	801cc88 <ip4addr_aton+0x30>
      return 0;
 801cc84:	2300      	movs	r3, #0
 801cc86:	e105      	b.n	801ce94 <ip4addr_aton+0x23c>
    }
    val = 0;
 801cc88:	2300      	movs	r3, #0
 801cc8a:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801cc8c:	230a      	movs	r3, #10
 801cc8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801cc92:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801cc96:	2b30      	cmp	r3, #48	@ 0x30
 801cc98:	d11c      	bne.n	801ccd4 <ip4addr_aton+0x7c>
      c = *++cp;
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	3301      	adds	r3, #1
 801cc9e:	607b      	str	r3, [r7, #4]
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	781b      	ldrb	r3, [r3, #0]
 801cca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801cca8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ccac:	2b78      	cmp	r3, #120	@ 0x78
 801ccae:	d003      	beq.n	801ccb8 <ip4addr_aton+0x60>
 801ccb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ccb4:	2b58      	cmp	r3, #88	@ 0x58
 801ccb6:	d10a      	bne.n	801ccce <ip4addr_aton+0x76>
        base = 16;
 801ccb8:	2310      	movs	r3, #16
 801ccba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	3301      	adds	r3, #1
 801ccc2:	607b      	str	r3, [r7, #4]
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	781b      	ldrb	r3, [r3, #0]
 801ccc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801cccc:	e002      	b.n	801ccd4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801ccce:	2308      	movs	r3, #8
 801ccd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801ccd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ccd8:	3301      	adds	r3, #1
 801ccda:	4a70      	ldr	r2, [pc, #448]	@ (801ce9c <ip4addr_aton+0x244>)
 801ccdc:	4413      	add	r3, r2
 801ccde:	781b      	ldrb	r3, [r3, #0]
 801cce0:	f003 0304 	and.w	r3, r3, #4
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d011      	beq.n	801cd0c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801cce8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ccec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ccee:	fb03 f202 	mul.w	r2, r3, r2
 801ccf2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ccf6:	4413      	add	r3, r2
 801ccf8:	3b30      	subs	r3, #48	@ 0x30
 801ccfa:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	607b      	str	r3, [r7, #4]
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	781b      	ldrb	r3, [r3, #0]
 801cd06:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801cd0a:	e7e3      	b.n	801ccd4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801cd0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cd10:	2b10      	cmp	r3, #16
 801cd12:	d127      	bne.n	801cd64 <ip4addr_aton+0x10c>
 801cd14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801cd18:	3301      	adds	r3, #1
 801cd1a:	4a60      	ldr	r2, [pc, #384]	@ (801ce9c <ip4addr_aton+0x244>)
 801cd1c:	4413      	add	r3, r2
 801cd1e:	781b      	ldrb	r3, [r3, #0]
 801cd20:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d01d      	beq.n	801cd64 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801cd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd2a:	011b      	lsls	r3, r3, #4
 801cd2c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801cd30:	f102 010a 	add.w	r1, r2, #10
 801cd34:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801cd38:	3201      	adds	r2, #1
 801cd3a:	4858      	ldr	r0, [pc, #352]	@ (801ce9c <ip4addr_aton+0x244>)
 801cd3c:	4402      	add	r2, r0
 801cd3e:	7812      	ldrb	r2, [r2, #0]
 801cd40:	f002 0203 	and.w	r2, r2, #3
 801cd44:	2a02      	cmp	r2, #2
 801cd46:	d101      	bne.n	801cd4c <ip4addr_aton+0xf4>
 801cd48:	2261      	movs	r2, #97	@ 0x61
 801cd4a:	e000      	b.n	801cd4e <ip4addr_aton+0xf6>
 801cd4c:	2241      	movs	r2, #65	@ 0x41
 801cd4e:	1a8a      	subs	r2, r1, r2
 801cd50:	4313      	orrs	r3, r2
 801cd52:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	3301      	adds	r3, #1
 801cd58:	607b      	str	r3, [r7, #4]
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	781b      	ldrb	r3, [r3, #0]
 801cd5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801cd62:	e7b7      	b.n	801ccd4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801cd64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801cd68:	2b2e      	cmp	r3, #46	@ 0x2e
 801cd6a:	d114      	bne.n	801cd96 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801cd6c:	f107 030c 	add.w	r3, r7, #12
 801cd70:	330c      	adds	r3, #12
 801cd72:	69fa      	ldr	r2, [r7, #28]
 801cd74:	429a      	cmp	r2, r3
 801cd76:	d301      	bcc.n	801cd7c <ip4addr_aton+0x124>
        return 0;
 801cd78:	2300      	movs	r3, #0
 801cd7a:	e08b      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801cd7c:	69fb      	ldr	r3, [r7, #28]
 801cd7e:	1d1a      	adds	r2, r3, #4
 801cd80:	61fa      	str	r2, [r7, #28]
 801cd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cd84:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	3301      	adds	r3, #1
 801cd8a:	607b      	str	r3, [r7, #4]
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801cd94:	e76c      	b.n	801cc70 <ip4addr_aton+0x18>
    } else {
      break;
 801cd96:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801cd98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d00b      	beq.n	801cdb8 <ip4addr_aton+0x160>
 801cda0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801cda4:	3301      	adds	r3, #1
 801cda6:	4a3d      	ldr	r2, [pc, #244]	@ (801ce9c <ip4addr_aton+0x244>)
 801cda8:	4413      	add	r3, r2
 801cdaa:	781b      	ldrb	r3, [r3, #0]
 801cdac:	f003 0308 	and.w	r3, r3, #8
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d101      	bne.n	801cdb8 <ip4addr_aton+0x160>
    return 0;
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	e06d      	b.n	801ce94 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801cdb8:	f107 030c 	add.w	r3, r7, #12
 801cdbc:	69fa      	ldr	r2, [r7, #28]
 801cdbe:	1ad3      	subs	r3, r2, r3
 801cdc0:	109b      	asrs	r3, r3, #2
 801cdc2:	3301      	adds	r3, #1
 801cdc4:	2b04      	cmp	r3, #4
 801cdc6:	d853      	bhi.n	801ce70 <ip4addr_aton+0x218>
 801cdc8:	a201      	add	r2, pc, #4	@ (adr r2, 801cdd0 <ip4addr_aton+0x178>)
 801cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cdce:	bf00      	nop
 801cdd0:	0801cde5 	.word	0x0801cde5
 801cdd4:	0801ce7f 	.word	0x0801ce7f
 801cdd8:	0801cde9 	.word	0x0801cde9
 801cddc:	0801ce0b 	.word	0x0801ce0b
 801cde0:	0801ce39 	.word	0x0801ce39

    case 0:
      return 0;       /* initial nondigit */
 801cde4:	2300      	movs	r3, #0
 801cde6:	e055      	b.n	801ce94 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801cde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cdee:	d301      	bcc.n	801cdf4 <ip4addr_aton+0x19c>
        return 0;
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	e04f      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	2bff      	cmp	r3, #255	@ 0xff
 801cdf8:	d901      	bls.n	801cdfe <ip4addr_aton+0x1a6>
        return 0;
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	e04a      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	061b      	lsls	r3, r3, #24
 801ce02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ce04:	4313      	orrs	r3, r2
 801ce06:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801ce08:	e03a      	b.n	801ce80 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ce10:	d301      	bcc.n	801ce16 <ip4addr_aton+0x1be>
        return 0;
 801ce12:	2300      	movs	r3, #0
 801ce14:	e03e      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	2bff      	cmp	r3, #255	@ 0xff
 801ce1a:	d802      	bhi.n	801ce22 <ip4addr_aton+0x1ca>
 801ce1c:	693b      	ldr	r3, [r7, #16]
 801ce1e:	2bff      	cmp	r3, #255	@ 0xff
 801ce20:	d901      	bls.n	801ce26 <ip4addr_aton+0x1ce>
        return 0;
 801ce22:	2300      	movs	r3, #0
 801ce24:	e036      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	061a      	lsls	r2, r3, #24
 801ce2a:	693b      	ldr	r3, [r7, #16]
 801ce2c:	041b      	lsls	r3, r3, #16
 801ce2e:	4313      	orrs	r3, r2
 801ce30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ce32:	4313      	orrs	r3, r2
 801ce34:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801ce36:	e023      	b.n	801ce80 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801ce38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce3a:	2bff      	cmp	r3, #255	@ 0xff
 801ce3c:	d901      	bls.n	801ce42 <ip4addr_aton+0x1ea>
        return 0;
 801ce3e:	2300      	movs	r3, #0
 801ce40:	e028      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	2bff      	cmp	r3, #255	@ 0xff
 801ce46:	d805      	bhi.n	801ce54 <ip4addr_aton+0x1fc>
 801ce48:	693b      	ldr	r3, [r7, #16]
 801ce4a:	2bff      	cmp	r3, #255	@ 0xff
 801ce4c:	d802      	bhi.n	801ce54 <ip4addr_aton+0x1fc>
 801ce4e:	697b      	ldr	r3, [r7, #20]
 801ce50:	2bff      	cmp	r3, #255	@ 0xff
 801ce52:	d901      	bls.n	801ce58 <ip4addr_aton+0x200>
        return 0;
 801ce54:	2300      	movs	r3, #0
 801ce56:	e01d      	b.n	801ce94 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	061a      	lsls	r2, r3, #24
 801ce5c:	693b      	ldr	r3, [r7, #16]
 801ce5e:	041b      	lsls	r3, r3, #16
 801ce60:	431a      	orrs	r2, r3
 801ce62:	697b      	ldr	r3, [r7, #20]
 801ce64:	021b      	lsls	r3, r3, #8
 801ce66:	4313      	orrs	r3, r2
 801ce68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ce6a:	4313      	orrs	r3, r2
 801ce6c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801ce6e:	e007      	b.n	801ce80 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801ce70:	4b0b      	ldr	r3, [pc, #44]	@ (801cea0 <ip4addr_aton+0x248>)
 801ce72:	22f9      	movs	r2, #249	@ 0xf9
 801ce74:	490b      	ldr	r1, [pc, #44]	@ (801cea4 <ip4addr_aton+0x24c>)
 801ce76:	480c      	ldr	r0, [pc, #48]	@ (801cea8 <ip4addr_aton+0x250>)
 801ce78:	f001 fefc 	bl	801ec74 <iprintf>
      break;
 801ce7c:	e000      	b.n	801ce80 <ip4addr_aton+0x228>
      break;
 801ce7e:	bf00      	nop
  }
  if (addr) {
 801ce80:	683b      	ldr	r3, [r7, #0]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d005      	beq.n	801ce92 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801ce86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ce88:	f7f3 fb2f 	bl	80104ea <lwip_htonl>
 801ce8c:	4602      	mov	r2, r0
 801ce8e:	683b      	ldr	r3, [r7, #0]
 801ce90:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801ce92:	2301      	movs	r3, #1
}
 801ce94:	4618      	mov	r0, r3
 801ce96:	3728      	adds	r7, #40	@ 0x28
 801ce98:	46bd      	mov	sp, r7
 801ce9a:	bd80      	pop	{r7, pc}
 801ce9c:	08071323 	.word	0x08071323
 801cea0:	08025178 	.word	0x08025178
 801cea4:	080251b4 	.word	0x080251b4
 801cea8:	080251c0 	.word	0x080251c0

0801ceac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b084      	sub	sp, #16
 801ceb0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ceb2:	2300      	movs	r3, #0
 801ceb4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ceb6:	4b12      	ldr	r3, [pc, #72]	@ (801cf00 <ip_reass_tmr+0x54>)
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cebc:	e018      	b.n	801cef0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	7fdb      	ldrb	r3, [r3, #31]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d00b      	beq.n	801cede <ip_reass_tmr+0x32>
      r->timer--;
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	7fdb      	ldrb	r3, [r3, #31]
 801ceca:	3b01      	subs	r3, #1
 801cecc:	b2da      	uxtb	r2, r3
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	60fb      	str	r3, [r7, #12]
 801cedc:	e008      	b.n	801cef0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cee8:	68b9      	ldr	r1, [r7, #8]
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f000 f80a 	bl	801cf04 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d1e3      	bne.n	801cebe <ip_reass_tmr+0x12>
    }
  }
}
 801cef6:	bf00      	nop
 801cef8:	bf00      	nop
 801cefa:	3710      	adds	r7, #16
 801cefc:	46bd      	mov	sp, r7
 801cefe:	bd80      	pop	{r7, pc}
 801cf00:	20013f48 	.word	0x20013f48

0801cf04 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b088      	sub	sp, #32
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
 801cf0c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cf0e:	2300      	movs	r3, #0
 801cf10:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cf12:	683a      	ldr	r2, [r7, #0]
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	429a      	cmp	r2, r3
 801cf18:	d105      	bne.n	801cf26 <ip_reass_free_complete_datagram+0x22>
 801cf1a:	4b45      	ldr	r3, [pc, #276]	@ (801d030 <ip_reass_free_complete_datagram+0x12c>)
 801cf1c:	22ab      	movs	r2, #171	@ 0xab
 801cf1e:	4945      	ldr	r1, [pc, #276]	@ (801d034 <ip_reass_free_complete_datagram+0x130>)
 801cf20:	4845      	ldr	r0, [pc, #276]	@ (801d038 <ip_reass_free_complete_datagram+0x134>)
 801cf22:	f001 fea7 	bl	801ec74 <iprintf>
  if (prev != NULL) {
 801cf26:	683b      	ldr	r3, [r7, #0]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d00a      	beq.n	801cf42 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cf2c:	683b      	ldr	r3, [r7, #0]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	687a      	ldr	r2, [r7, #4]
 801cf32:	429a      	cmp	r2, r3
 801cf34:	d005      	beq.n	801cf42 <ip_reass_free_complete_datagram+0x3e>
 801cf36:	4b3e      	ldr	r3, [pc, #248]	@ (801d030 <ip_reass_free_complete_datagram+0x12c>)
 801cf38:	22ad      	movs	r2, #173	@ 0xad
 801cf3a:	4940      	ldr	r1, [pc, #256]	@ (801d03c <ip_reass_free_complete_datagram+0x138>)
 801cf3c:	483e      	ldr	r0, [pc, #248]	@ (801d038 <ip_reass_free_complete_datagram+0x134>)
 801cf3e:	f001 fe99 	bl	801ec74 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	685b      	ldr	r3, [r3, #4]
 801cf46:	685b      	ldr	r3, [r3, #4]
 801cf48:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cf4a:	697b      	ldr	r3, [r7, #20]
 801cf4c:	889b      	ldrh	r3, [r3, #4]
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d12a      	bne.n	801cfaa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cf5a:	697b      	ldr	r3, [r7, #20]
 801cf5c:	681a      	ldr	r2, [r3, #0]
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cf62:	69bb      	ldr	r3, [r7, #24]
 801cf64:	6858      	ldr	r0, [r3, #4]
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	3308      	adds	r3, #8
 801cf6a:	2214      	movs	r2, #20
 801cf6c:	4619      	mov	r1, r3
 801cf6e:	f002 f8a8 	bl	801f0c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cf72:	2101      	movs	r1, #1
 801cf74:	69b8      	ldr	r0, [r7, #24]
 801cf76:	f7ff fa83 	bl	801c480 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cf7a:	69b8      	ldr	r0, [r7, #24]
 801cf7c:	f7f5 f850 	bl	8012020 <pbuf_clen>
 801cf80:	4603      	mov	r3, r0
 801cf82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cf84:	8bfa      	ldrh	r2, [r7, #30]
 801cf86:	8a7b      	ldrh	r3, [r7, #18]
 801cf88:	4413      	add	r3, r2
 801cf8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cf8e:	db05      	blt.n	801cf9c <ip_reass_free_complete_datagram+0x98>
 801cf90:	4b27      	ldr	r3, [pc, #156]	@ (801d030 <ip_reass_free_complete_datagram+0x12c>)
 801cf92:	22bc      	movs	r2, #188	@ 0xbc
 801cf94:	492a      	ldr	r1, [pc, #168]	@ (801d040 <ip_reass_free_complete_datagram+0x13c>)
 801cf96:	4828      	ldr	r0, [pc, #160]	@ (801d038 <ip_reass_free_complete_datagram+0x134>)
 801cf98:	f001 fe6c 	bl	801ec74 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cf9c:	8bfa      	ldrh	r2, [r7, #30]
 801cf9e:	8a7b      	ldrh	r3, [r7, #18]
 801cfa0:	4413      	add	r3, r2
 801cfa2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cfa4:	69b8      	ldr	r0, [r7, #24]
 801cfa6:	f7f4 ffad 	bl	8011f04 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	685b      	ldr	r3, [r3, #4]
 801cfae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cfb0:	e01f      	b.n	801cff2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cfb2:	69bb      	ldr	r3, [r7, #24]
 801cfb4:	685b      	ldr	r3, [r3, #4]
 801cfb6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cfb8:	69bb      	ldr	r3, [r7, #24]
 801cfba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cfbc:	697b      	ldr	r3, [r7, #20]
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cfc2:	68f8      	ldr	r0, [r7, #12]
 801cfc4:	f7f5 f82c 	bl	8012020 <pbuf_clen>
 801cfc8:	4603      	mov	r3, r0
 801cfca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cfcc:	8bfa      	ldrh	r2, [r7, #30]
 801cfce:	8a7b      	ldrh	r3, [r7, #18]
 801cfd0:	4413      	add	r3, r2
 801cfd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cfd6:	db05      	blt.n	801cfe4 <ip_reass_free_complete_datagram+0xe0>
 801cfd8:	4b15      	ldr	r3, [pc, #84]	@ (801d030 <ip_reass_free_complete_datagram+0x12c>)
 801cfda:	22cc      	movs	r2, #204	@ 0xcc
 801cfdc:	4918      	ldr	r1, [pc, #96]	@ (801d040 <ip_reass_free_complete_datagram+0x13c>)
 801cfde:	4816      	ldr	r0, [pc, #88]	@ (801d038 <ip_reass_free_complete_datagram+0x134>)
 801cfe0:	f001 fe48 	bl	801ec74 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cfe4:	8bfa      	ldrh	r2, [r7, #30]
 801cfe6:	8a7b      	ldrh	r3, [r7, #18]
 801cfe8:	4413      	add	r3, r2
 801cfea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cfec:	68f8      	ldr	r0, [r7, #12]
 801cfee:	f7f4 ff89 	bl	8011f04 <pbuf_free>
  while (p != NULL) {
 801cff2:	69bb      	ldr	r3, [r7, #24]
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d1dc      	bne.n	801cfb2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cff8:	6839      	ldr	r1, [r7, #0]
 801cffa:	6878      	ldr	r0, [r7, #4]
 801cffc:	f000 f8c2 	bl	801d184 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d000:	4b10      	ldr	r3, [pc, #64]	@ (801d044 <ip_reass_free_complete_datagram+0x140>)
 801d002:	881b      	ldrh	r3, [r3, #0]
 801d004:	8bfa      	ldrh	r2, [r7, #30]
 801d006:	429a      	cmp	r2, r3
 801d008:	d905      	bls.n	801d016 <ip_reass_free_complete_datagram+0x112>
 801d00a:	4b09      	ldr	r3, [pc, #36]	@ (801d030 <ip_reass_free_complete_datagram+0x12c>)
 801d00c:	22d2      	movs	r2, #210	@ 0xd2
 801d00e:	490e      	ldr	r1, [pc, #56]	@ (801d048 <ip_reass_free_complete_datagram+0x144>)
 801d010:	4809      	ldr	r0, [pc, #36]	@ (801d038 <ip_reass_free_complete_datagram+0x134>)
 801d012:	f001 fe2f 	bl	801ec74 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d016:	4b0b      	ldr	r3, [pc, #44]	@ (801d044 <ip_reass_free_complete_datagram+0x140>)
 801d018:	881a      	ldrh	r2, [r3, #0]
 801d01a:	8bfb      	ldrh	r3, [r7, #30]
 801d01c:	1ad3      	subs	r3, r2, r3
 801d01e:	b29a      	uxth	r2, r3
 801d020:	4b08      	ldr	r3, [pc, #32]	@ (801d044 <ip_reass_free_complete_datagram+0x140>)
 801d022:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d024:	8bfb      	ldrh	r3, [r7, #30]
}
 801d026:	4618      	mov	r0, r3
 801d028:	3720      	adds	r7, #32
 801d02a:	46bd      	mov	sp, r7
 801d02c:	bd80      	pop	{r7, pc}
 801d02e:	bf00      	nop
 801d030:	080251e8 	.word	0x080251e8
 801d034:	08025224 	.word	0x08025224
 801d038:	08025230 	.word	0x08025230
 801d03c:	08025258 	.word	0x08025258
 801d040:	0802526c 	.word	0x0802526c
 801d044:	20013f4c 	.word	0x20013f4c
 801d048:	0802528c 	.word	0x0802528c

0801d04c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b08a      	sub	sp, #40	@ 0x28
 801d050:	af00      	add	r7, sp, #0
 801d052:	6078      	str	r0, [r7, #4]
 801d054:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d056:	2300      	movs	r3, #0
 801d058:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d05a:	2300      	movs	r3, #0
 801d05c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d05e:	2300      	movs	r3, #0
 801d060:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d062:	2300      	movs	r3, #0
 801d064:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d066:	2300      	movs	r3, #0
 801d068:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d06a:	4b28      	ldr	r3, [pc, #160]	@ (801d10c <ip_reass_remove_oldest_datagram+0xc0>)
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d070:	e030      	b.n	801d0d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d074:	695a      	ldr	r2, [r3, #20]
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	68db      	ldr	r3, [r3, #12]
 801d07a:	429a      	cmp	r2, r3
 801d07c:	d10c      	bne.n	801d098 <ip_reass_remove_oldest_datagram+0x4c>
 801d07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d080:	699a      	ldr	r2, [r3, #24]
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	691b      	ldr	r3, [r3, #16]
 801d086:	429a      	cmp	r2, r3
 801d088:	d106      	bne.n	801d098 <ip_reass_remove_oldest_datagram+0x4c>
 801d08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d08c:	899a      	ldrh	r2, [r3, #12]
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	889b      	ldrh	r3, [r3, #4]
 801d092:	b29b      	uxth	r3, r3
 801d094:	429a      	cmp	r2, r3
 801d096:	d014      	beq.n	801d0c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d098:	693b      	ldr	r3, [r7, #16]
 801d09a:	3301      	adds	r3, #1
 801d09c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d09e:	6a3b      	ldr	r3, [r7, #32]
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d104      	bne.n	801d0ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d0a8:	69fb      	ldr	r3, [r7, #28]
 801d0aa:	61bb      	str	r3, [r7, #24]
 801d0ac:	e009      	b.n	801d0c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0b0:	7fda      	ldrb	r2, [r3, #31]
 801d0b2:	6a3b      	ldr	r3, [r7, #32]
 801d0b4:	7fdb      	ldrb	r3, [r3, #31]
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d803      	bhi.n	801d0c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d0be:	69fb      	ldr	r3, [r7, #28]
 801d0c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d001      	beq.n	801d0ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d1cb      	bne.n	801d072 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d0da:	6a3b      	ldr	r3, [r7, #32]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d008      	beq.n	801d0f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d0e0:	69b9      	ldr	r1, [r7, #24]
 801d0e2:	6a38      	ldr	r0, [r7, #32]
 801d0e4:	f7ff ff0e 	bl	801cf04 <ip_reass_free_complete_datagram>
 801d0e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d0ea:	697a      	ldr	r2, [r7, #20]
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	4413      	add	r3, r2
 801d0f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d0f2:	697a      	ldr	r2, [r7, #20]
 801d0f4:	683b      	ldr	r3, [r7, #0]
 801d0f6:	429a      	cmp	r2, r3
 801d0f8:	da02      	bge.n	801d100 <ip_reass_remove_oldest_datagram+0xb4>
 801d0fa:	693b      	ldr	r3, [r7, #16]
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	dcac      	bgt.n	801d05a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d100:	697b      	ldr	r3, [r7, #20]
}
 801d102:	4618      	mov	r0, r3
 801d104:	3728      	adds	r7, #40	@ 0x28
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	20013f48 	.word	0x20013f48

0801d110 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b084      	sub	sp, #16
 801d114:	af00      	add	r7, sp, #0
 801d116:	6078      	str	r0, [r7, #4]
 801d118:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d11a:	2004      	movs	r0, #4
 801d11c:	f7f3 fffe 	bl	801111c <memp_malloc>
 801d120:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d110      	bne.n	801d14a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d128:	6839      	ldr	r1, [r7, #0]
 801d12a:	6878      	ldr	r0, [r7, #4]
 801d12c:	f7ff ff8e 	bl	801d04c <ip_reass_remove_oldest_datagram>
 801d130:	4602      	mov	r2, r0
 801d132:	683b      	ldr	r3, [r7, #0]
 801d134:	4293      	cmp	r3, r2
 801d136:	dc03      	bgt.n	801d140 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d138:	2004      	movs	r0, #4
 801d13a:	f7f3 ffef 	bl	801111c <memp_malloc>
 801d13e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d101      	bne.n	801d14a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d146:	2300      	movs	r3, #0
 801d148:	e016      	b.n	801d178 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d14a:	2220      	movs	r2, #32
 801d14c:	2100      	movs	r1, #0
 801d14e:	68f8      	ldr	r0, [r7, #12]
 801d150:	f001 fefa 	bl	801ef48 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	220f      	movs	r2, #15
 801d158:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d15a:	4b09      	ldr	r3, [pc, #36]	@ (801d180 <ip_reass_enqueue_new_datagram+0x70>)
 801d15c:	681a      	ldr	r2, [r3, #0]
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d162:	4a07      	ldr	r2, [pc, #28]	@ (801d180 <ip_reass_enqueue_new_datagram+0x70>)
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	3308      	adds	r3, #8
 801d16c:	2214      	movs	r2, #20
 801d16e:	6879      	ldr	r1, [r7, #4]
 801d170:	4618      	mov	r0, r3
 801d172:	f001 ffa6 	bl	801f0c2 <memcpy>
  return ipr;
 801d176:	68fb      	ldr	r3, [r7, #12]
}
 801d178:	4618      	mov	r0, r3
 801d17a:	3710      	adds	r7, #16
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}
 801d180:	20013f48 	.word	0x20013f48

0801d184 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d184:	b580      	push	{r7, lr}
 801d186:	b082      	sub	sp, #8
 801d188:	af00      	add	r7, sp, #0
 801d18a:	6078      	str	r0, [r7, #4]
 801d18c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d18e:	4b10      	ldr	r3, [pc, #64]	@ (801d1d0 <ip_reass_dequeue_datagram+0x4c>)
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	687a      	ldr	r2, [r7, #4]
 801d194:	429a      	cmp	r2, r3
 801d196:	d104      	bne.n	801d1a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	4a0c      	ldr	r2, [pc, #48]	@ (801d1d0 <ip_reass_dequeue_datagram+0x4c>)
 801d19e:	6013      	str	r3, [r2, #0]
 801d1a0:	e00d      	b.n	801d1be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d106      	bne.n	801d1b6 <ip_reass_dequeue_datagram+0x32>
 801d1a8:	4b0a      	ldr	r3, [pc, #40]	@ (801d1d4 <ip_reass_dequeue_datagram+0x50>)
 801d1aa:	f240 1245 	movw	r2, #325	@ 0x145
 801d1ae:	490a      	ldr	r1, [pc, #40]	@ (801d1d8 <ip_reass_dequeue_datagram+0x54>)
 801d1b0:	480a      	ldr	r0, [pc, #40]	@ (801d1dc <ip_reass_dequeue_datagram+0x58>)
 801d1b2:	f001 fd5f 	bl	801ec74 <iprintf>
    prev->next = ipr->next;
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	681a      	ldr	r2, [r3, #0]
 801d1ba:	683b      	ldr	r3, [r7, #0]
 801d1bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d1be:	6879      	ldr	r1, [r7, #4]
 801d1c0:	2004      	movs	r0, #4
 801d1c2:	f7f3 fffd 	bl	80111c0 <memp_free>
}
 801d1c6:	bf00      	nop
 801d1c8:	3708      	adds	r7, #8
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}
 801d1ce:	bf00      	nop
 801d1d0:	20013f48 	.word	0x20013f48
 801d1d4:	080251e8 	.word	0x080251e8
 801d1d8:	080252b0 	.word	0x080252b0
 801d1dc:	08025230 	.word	0x08025230

0801d1e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b08c      	sub	sp, #48	@ 0x30
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	60f8      	str	r0, [r7, #12]
 801d1e8:	60b9      	str	r1, [r7, #8]
 801d1ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d1ec:	2300      	movs	r3, #0
 801d1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d1f0:	2301      	movs	r3, #1
 801d1f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d1f4:	68bb      	ldr	r3, [r7, #8]
 801d1f6:	685b      	ldr	r3, [r3, #4]
 801d1f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d1fa:	69fb      	ldr	r3, [r7, #28]
 801d1fc:	885b      	ldrh	r3, [r3, #2]
 801d1fe:	b29b      	uxth	r3, r3
 801d200:	4618      	mov	r0, r3
 801d202:	f7f3 f95d 	bl	80104c0 <lwip_htons>
 801d206:	4603      	mov	r3, r0
 801d208:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d20a:	69fb      	ldr	r3, [r7, #28]
 801d20c:	781b      	ldrb	r3, [r3, #0]
 801d20e:	f003 030f 	and.w	r3, r3, #15
 801d212:	b2db      	uxtb	r3, r3
 801d214:	009b      	lsls	r3, r3, #2
 801d216:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d218:	7e7b      	ldrb	r3, [r7, #25]
 801d21a:	b29b      	uxth	r3, r3
 801d21c:	8b7a      	ldrh	r2, [r7, #26]
 801d21e:	429a      	cmp	r2, r3
 801d220:	d202      	bcs.n	801d228 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d222:	f04f 33ff 	mov.w	r3, #4294967295
 801d226:	e135      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d228:	7e7b      	ldrb	r3, [r7, #25]
 801d22a:	b29b      	uxth	r3, r3
 801d22c:	8b7a      	ldrh	r2, [r7, #26]
 801d22e:	1ad3      	subs	r3, r2, r3
 801d230:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	88db      	ldrh	r3, [r3, #6]
 801d236:	b29b      	uxth	r3, r3
 801d238:	4618      	mov	r0, r3
 801d23a:	f7f3 f941 	bl	80104c0 <lwip_htons>
 801d23e:	4603      	mov	r3, r0
 801d240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d244:	b29b      	uxth	r3, r3
 801d246:	00db      	lsls	r3, r3, #3
 801d248:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d24a:	68bb      	ldr	r3, [r7, #8]
 801d24c:	685b      	ldr	r3, [r3, #4]
 801d24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d252:	2200      	movs	r2, #0
 801d254:	701a      	strb	r2, [r3, #0]
 801d256:	2200      	movs	r2, #0
 801d258:	705a      	strb	r2, [r3, #1]
 801d25a:	2200      	movs	r2, #0
 801d25c:	709a      	strb	r2, [r3, #2]
 801d25e:	2200      	movs	r2, #0
 801d260:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d264:	8afa      	ldrh	r2, [r7, #22]
 801d266:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d268:	8afa      	ldrh	r2, [r7, #22]
 801d26a:	8b7b      	ldrh	r3, [r7, #26]
 801d26c:	4413      	add	r3, r2
 801d26e:	b29a      	uxth	r2, r3
 801d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d272:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d276:	88db      	ldrh	r3, [r3, #6]
 801d278:	b29b      	uxth	r3, r3
 801d27a:	8afa      	ldrh	r2, [r7, #22]
 801d27c:	429a      	cmp	r2, r3
 801d27e:	d902      	bls.n	801d286 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d280:	f04f 33ff 	mov.w	r3, #4294967295
 801d284:	e106      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	685b      	ldr	r3, [r3, #4]
 801d28a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d28c:	e068      	b.n	801d360 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d290:	685b      	ldr	r3, [r3, #4]
 801d292:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d296:	889b      	ldrh	r3, [r3, #4]
 801d298:	b29a      	uxth	r2, r3
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	889b      	ldrh	r3, [r3, #4]
 801d29e:	b29b      	uxth	r3, r3
 801d2a0:	429a      	cmp	r2, r3
 801d2a2:	d235      	bcs.n	801d310 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d2a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d020      	beq.n	801d2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2b2:	889b      	ldrh	r3, [r3, #4]
 801d2b4:	b29a      	uxth	r2, r3
 801d2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2b8:	88db      	ldrh	r3, [r3, #6]
 801d2ba:	b29b      	uxth	r3, r3
 801d2bc:	429a      	cmp	r2, r3
 801d2be:	d307      	bcc.n	801d2d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2c2:	88db      	ldrh	r3, [r3, #6]
 801d2c4:	b29a      	uxth	r2, r3
 801d2c6:	693b      	ldr	r3, [r7, #16]
 801d2c8:	889b      	ldrh	r3, [r3, #4]
 801d2ca:	b29b      	uxth	r3, r3
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	d902      	bls.n	801d2d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d2d0:	f04f 33ff 	mov.w	r3, #4294967295
 801d2d4:	e0de      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2d8:	68ba      	ldr	r2, [r7, #8]
 801d2da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2de:	88db      	ldrh	r3, [r3, #6]
 801d2e0:	b29a      	uxth	r2, r3
 801d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2e4:	889b      	ldrh	r3, [r3, #4]
 801d2e6:	b29b      	uxth	r3, r3
 801d2e8:	429a      	cmp	r2, r3
 801d2ea:	d03d      	beq.n	801d368 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d2f0:	e03a      	b.n	801d368 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2f4:	88db      	ldrh	r3, [r3, #6]
 801d2f6:	b29a      	uxth	r2, r3
 801d2f8:	693b      	ldr	r3, [r7, #16]
 801d2fa:	889b      	ldrh	r3, [r3, #4]
 801d2fc:	b29b      	uxth	r3, r3
 801d2fe:	429a      	cmp	r2, r3
 801d300:	d902      	bls.n	801d308 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d302:	f04f 33ff 	mov.w	r3, #4294967295
 801d306:	e0c5      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	68ba      	ldr	r2, [r7, #8]
 801d30c:	605a      	str	r2, [r3, #4]
      break;
 801d30e:	e02b      	b.n	801d368 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d312:	889b      	ldrh	r3, [r3, #4]
 801d314:	b29a      	uxth	r2, r3
 801d316:	693b      	ldr	r3, [r7, #16]
 801d318:	889b      	ldrh	r3, [r3, #4]
 801d31a:	b29b      	uxth	r3, r3
 801d31c:	429a      	cmp	r2, r3
 801d31e:	d102      	bne.n	801d326 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d320:	f04f 33ff 	mov.w	r3, #4294967295
 801d324:	e0b6      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d328:	889b      	ldrh	r3, [r3, #4]
 801d32a:	b29a      	uxth	r2, r3
 801d32c:	693b      	ldr	r3, [r7, #16]
 801d32e:	88db      	ldrh	r3, [r3, #6]
 801d330:	b29b      	uxth	r3, r3
 801d332:	429a      	cmp	r2, r3
 801d334:	d202      	bcs.n	801d33c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d336:	f04f 33ff 	mov.w	r3, #4294967295
 801d33a:	e0ab      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d009      	beq.n	801d356 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d344:	88db      	ldrh	r3, [r3, #6]
 801d346:	b29a      	uxth	r2, r3
 801d348:	693b      	ldr	r3, [r7, #16]
 801d34a:	889b      	ldrh	r3, [r3, #4]
 801d34c:	b29b      	uxth	r3, r3
 801d34e:	429a      	cmp	r2, r3
 801d350:	d001      	beq.n	801d356 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d352:	2300      	movs	r3, #0
 801d354:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d356:	693b      	ldr	r3, [r7, #16]
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801d35c:	693b      	ldr	r3, [r7, #16]
 801d35e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d362:	2b00      	cmp	r3, #0
 801d364:	d193      	bne.n	801d28e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d366:	e000      	b.n	801d36a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d368:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d12d      	bne.n	801d3cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d372:	2b00      	cmp	r3, #0
 801d374:	d01c      	beq.n	801d3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d378:	88db      	ldrh	r3, [r3, #6]
 801d37a:	b29a      	uxth	r2, r3
 801d37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d37e:	889b      	ldrh	r3, [r3, #4]
 801d380:	b29b      	uxth	r3, r3
 801d382:	429a      	cmp	r2, r3
 801d384:	d906      	bls.n	801d394 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d386:	4b45      	ldr	r3, [pc, #276]	@ (801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d388:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801d38c:	4944      	ldr	r1, [pc, #272]	@ (801d4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d38e:	4845      	ldr	r0, [pc, #276]	@ (801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d390:	f001 fc70 	bl	801ec74 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d396:	68ba      	ldr	r2, [r7, #8]
 801d398:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d39c:	88db      	ldrh	r3, [r3, #6]
 801d39e:	b29a      	uxth	r2, r3
 801d3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d3a2:	889b      	ldrh	r3, [r3, #4]
 801d3a4:	b29b      	uxth	r3, r3
 801d3a6:	429a      	cmp	r2, r3
 801d3a8:	d010      	beq.n	801d3cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	623b      	str	r3, [r7, #32]
 801d3ae:	e00d      	b.n	801d3cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	685b      	ldr	r3, [r3, #4]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d006      	beq.n	801d3c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d3b8:	4b38      	ldr	r3, [pc, #224]	@ (801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d3ba:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801d3be:	493a      	ldr	r1, [pc, #232]	@ (801d4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d3c0:	4838      	ldr	r0, [pc, #224]	@ (801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d3c2:	f001 fc57 	bl	801ec74 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	68ba      	ldr	r2, [r7, #8]
 801d3ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d105      	bne.n	801d3de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	7f9b      	ldrb	r3, [r3, #30]
 801d3d6:	f003 0301 	and.w	r3, r3, #1
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d059      	beq.n	801d492 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d3de:	6a3b      	ldr	r3, [r7, #32]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d04f      	beq.n	801d484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	685b      	ldr	r3, [r3, #4]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d006      	beq.n	801d3fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	685b      	ldr	r3, [r3, #4]
 801d3f0:	685b      	ldr	r3, [r3, #4]
 801d3f2:	889b      	ldrh	r3, [r3, #4]
 801d3f4:	b29b      	uxth	r3, r3
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d002      	beq.n	801d400 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	623b      	str	r3, [r7, #32]
 801d3fe:	e041      	b.n	801d484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d402:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801d404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d40a:	e012      	b.n	801d432 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d40e:	685b      	ldr	r3, [r3, #4]
 801d410:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801d412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d414:	88db      	ldrh	r3, [r3, #6]
 801d416:	b29a      	uxth	r2, r3
 801d418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d41a:	889b      	ldrh	r3, [r3, #4]
 801d41c:	b29b      	uxth	r3, r3
 801d41e:	429a      	cmp	r2, r3
 801d420:	d002      	beq.n	801d428 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d422:	2300      	movs	r3, #0
 801d424:	623b      	str	r3, [r7, #32]
            break;
 801d426:	e007      	b.n	801d438 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d42a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801d42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d434:	2b00      	cmp	r3, #0
 801d436:	d1e9      	bne.n	801d40c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d438:	6a3b      	ldr	r3, [r7, #32]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d022      	beq.n	801d484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	685b      	ldr	r3, [r3, #4]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d106      	bne.n	801d454 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d446:	4b15      	ldr	r3, [pc, #84]	@ (801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d448:	f240 12df 	movw	r2, #479	@ 0x1df
 801d44c:	4917      	ldr	r1, [pc, #92]	@ (801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d44e:	4815      	ldr	r0, [pc, #84]	@ (801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d450:	f001 fc10 	bl	801ec74 <iprintf>
          LWIP_ASSERT("sanity check",
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	685b      	ldr	r3, [r3, #4]
 801d458:	685b      	ldr	r3, [r3, #4]
 801d45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d106      	bne.n	801d46e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d460:	4b0e      	ldr	r3, [pc, #56]	@ (801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d462:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801d466:	4911      	ldr	r1, [pc, #68]	@ (801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d468:	480e      	ldr	r0, [pc, #56]	@ (801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d46a:	f001 fc03 	bl	801ec74 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d006      	beq.n	801d484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d476:	4b09      	ldr	r3, [pc, #36]	@ (801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d478:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801d47c:	490c      	ldr	r1, [pc, #48]	@ (801d4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d47e:	4809      	ldr	r0, [pc, #36]	@ (801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d480:	f001 fbf8 	bl	801ec74 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d484:	6a3b      	ldr	r3, [r7, #32]
 801d486:	2b00      	cmp	r3, #0
 801d488:	bf14      	ite	ne
 801d48a:	2301      	movne	r3, #1
 801d48c:	2300      	moveq	r3, #0
 801d48e:	b2db      	uxtb	r3, r3
 801d490:	e000      	b.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d492:	2300      	movs	r3, #0
}
 801d494:	4618      	mov	r0, r3
 801d496:	3730      	adds	r7, #48	@ 0x30
 801d498:	46bd      	mov	sp, r7
 801d49a:	bd80      	pop	{r7, pc}
 801d49c:	080251e8 	.word	0x080251e8
 801d4a0:	080252cc 	.word	0x080252cc
 801d4a4:	08025230 	.word	0x08025230
 801d4a8:	080252ec 	.word	0x080252ec
 801d4ac:	08025324 	.word	0x08025324
 801d4b0:	08025334 	.word	0x08025334

0801d4b4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d4b4:	b580      	push	{r7, lr}
 801d4b6:	b08e      	sub	sp, #56	@ 0x38
 801d4b8:	af00      	add	r7, sp, #0
 801d4ba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	685b      	ldr	r3, [r3, #4]
 801d4c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4c4:	781b      	ldrb	r3, [r3, #0]
 801d4c6:	f003 030f 	and.w	r3, r3, #15
 801d4ca:	b2db      	uxtb	r3, r3
 801d4cc:	009b      	lsls	r3, r3, #2
 801d4ce:	b2db      	uxtb	r3, r3
 801d4d0:	2b14      	cmp	r3, #20
 801d4d2:	f040 8179 	bne.w	801d7c8 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4d8:	88db      	ldrh	r3, [r3, #6]
 801d4da:	b29b      	uxth	r3, r3
 801d4dc:	4618      	mov	r0, r3
 801d4de:	f7f2 ffef 	bl	80104c0 <lwip_htons>
 801d4e2:	4603      	mov	r3, r0
 801d4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d4e8:	b29b      	uxth	r3, r3
 801d4ea:	00db      	lsls	r3, r3, #3
 801d4ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4f0:	885b      	ldrh	r3, [r3, #2]
 801d4f2:	b29b      	uxth	r3, r3
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	f7f2 ffe3 	bl	80104c0 <lwip_htons>
 801d4fa:	4603      	mov	r3, r0
 801d4fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d500:	781b      	ldrb	r3, [r3, #0]
 801d502:	f003 030f 	and.w	r3, r3, #15
 801d506:	b2db      	uxtb	r3, r3
 801d508:	009b      	lsls	r3, r3, #2
 801d50a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801d50e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d512:	b29b      	uxth	r3, r3
 801d514:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d516:	429a      	cmp	r2, r3
 801d518:	f0c0 8158 	bcc.w	801d7cc <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d51c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d520:	b29b      	uxth	r3, r3
 801d522:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d524:	1ad3      	subs	r3, r2, r3
 801d526:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d528:	6878      	ldr	r0, [r7, #4]
 801d52a:	f7f4 fd79 	bl	8012020 <pbuf_clen>
 801d52e:	4603      	mov	r3, r0
 801d530:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d532:	4b90      	ldr	r3, [pc, #576]	@ (801d774 <ip4_reass+0x2c0>)
 801d534:	881b      	ldrh	r3, [r3, #0]
 801d536:	461a      	mov	r2, r3
 801d538:	8c3b      	ldrh	r3, [r7, #32]
 801d53a:	4413      	add	r3, r2
 801d53c:	2b0a      	cmp	r3, #10
 801d53e:	dd10      	ble.n	801d562 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d540:	8c3b      	ldrh	r3, [r7, #32]
 801d542:	4619      	mov	r1, r3
 801d544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d546:	f7ff fd81 	bl	801d04c <ip_reass_remove_oldest_datagram>
 801d54a:	4603      	mov	r3, r0
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	f000 813f 	beq.w	801d7d0 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d552:	4b88      	ldr	r3, [pc, #544]	@ (801d774 <ip4_reass+0x2c0>)
 801d554:	881b      	ldrh	r3, [r3, #0]
 801d556:	461a      	mov	r2, r3
 801d558:	8c3b      	ldrh	r3, [r7, #32]
 801d55a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d55c:	2b0a      	cmp	r3, #10
 801d55e:	f300 8137 	bgt.w	801d7d0 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d562:	4b85      	ldr	r3, [pc, #532]	@ (801d778 <ip4_reass+0x2c4>)
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	633b      	str	r3, [r7, #48]	@ 0x30
 801d568:	e015      	b.n	801d596 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d56c:	695a      	ldr	r2, [r3, #20]
 801d56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d570:	68db      	ldr	r3, [r3, #12]
 801d572:	429a      	cmp	r2, r3
 801d574:	d10c      	bne.n	801d590 <ip4_reass+0xdc>
 801d576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d578:	699a      	ldr	r2, [r3, #24]
 801d57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d57c:	691b      	ldr	r3, [r3, #16]
 801d57e:	429a      	cmp	r2, r3
 801d580:	d106      	bne.n	801d590 <ip4_reass+0xdc>
 801d582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d584:	899a      	ldrh	r2, [r3, #12]
 801d586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d588:	889b      	ldrh	r3, [r3, #4]
 801d58a:	b29b      	uxth	r3, r3
 801d58c:	429a      	cmp	r2, r3
 801d58e:	d006      	beq.n	801d59e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	633b      	str	r3, [r7, #48]	@ 0x30
 801d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d1e6      	bne.n	801d56a <ip4_reass+0xb6>
 801d59c:	e000      	b.n	801d5a0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d59e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d109      	bne.n	801d5ba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d5a6:	8c3b      	ldrh	r3, [r7, #32]
 801d5a8:	4619      	mov	r1, r3
 801d5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d5ac:	f7ff fdb0 	bl	801d110 <ip_reass_enqueue_new_datagram>
 801d5b0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d11c      	bne.n	801d5f2 <ip4_reass+0x13e>
      goto nullreturn;
 801d5b8:	e10d      	b.n	801d7d6 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5bc:	88db      	ldrh	r3, [r3, #6]
 801d5be:	b29b      	uxth	r3, r3
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	f7f2 ff7d 	bl	80104c0 <lwip_htons>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d110      	bne.n	801d5f2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5d2:	89db      	ldrh	r3, [r3, #14]
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f7f2 ff73 	bl	80104c0 <lwip_htons>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d006      	beq.n	801d5f2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5e6:	3308      	adds	r3, #8
 801d5e8:	2214      	movs	r2, #20
 801d5ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f001 fd68 	bl	801f0c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5f4:	88db      	ldrh	r3, [r3, #6]
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	f003 0320 	and.w	r3, r3, #32
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	bf0c      	ite	eq
 801d600:	2301      	moveq	r3, #1
 801d602:	2300      	movne	r3, #0
 801d604:	b2db      	uxtb	r3, r3
 801d606:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d608:	69fb      	ldr	r3, [r7, #28]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d00e      	beq.n	801d62c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d60e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801d610:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d612:	4413      	add	r3, r2
 801d614:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d616:	8b7a      	ldrh	r2, [r7, #26]
 801d618:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d61a:	429a      	cmp	r2, r3
 801d61c:	f0c0 80a8 	bcc.w	801d770 <ip4_reass+0x2bc>
 801d620:	8b7b      	ldrh	r3, [r7, #26]
 801d622:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801d626:	4293      	cmp	r3, r2
 801d628:	f200 80a2 	bhi.w	801d770 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d62c:	69fa      	ldr	r2, [r7, #28]
 801d62e:	6879      	ldr	r1, [r7, #4]
 801d630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d632:	f7ff fdd5 	bl	801d1e0 <ip_reass_chain_frag_into_datagram_and_validate>
 801d636:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d638:	697b      	ldr	r3, [r7, #20]
 801d63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d63e:	f000 80a3 	beq.w	801d788 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d642:	4b4c      	ldr	r3, [pc, #304]	@ (801d774 <ip4_reass+0x2c0>)
 801d644:	881a      	ldrh	r2, [r3, #0]
 801d646:	8c3b      	ldrh	r3, [r7, #32]
 801d648:	4413      	add	r3, r2
 801d64a:	b29a      	uxth	r2, r3
 801d64c:	4b49      	ldr	r3, [pc, #292]	@ (801d774 <ip4_reass+0x2c0>)
 801d64e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d650:	69fb      	ldr	r3, [r7, #28]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d00d      	beq.n	801d672 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d656:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801d658:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d65a:	4413      	add	r3, r2
 801d65c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d660:	8a7a      	ldrh	r2, [r7, #18]
 801d662:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d666:	7f9b      	ldrb	r3, [r3, #30]
 801d668:	f043 0301 	orr.w	r3, r3, #1
 801d66c:	b2da      	uxtb	r2, r3
 801d66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d670:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d672:	697b      	ldr	r3, [r7, #20]
 801d674:	2b01      	cmp	r3, #1
 801d676:	d179      	bne.n	801d76c <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d67a:	8b9b      	ldrh	r3, [r3, #28]
 801d67c:	3314      	adds	r3, #20
 801d67e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d682:	685b      	ldr	r3, [r3, #4]
 801d684:	685b      	ldr	r3, [r3, #4]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d68c:	685b      	ldr	r3, [r3, #4]
 801d68e:	685b      	ldr	r3, [r3, #4]
 801d690:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d694:	3308      	adds	r3, #8
 801d696:	2214      	movs	r2, #20
 801d698:	4619      	mov	r1, r3
 801d69a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d69c:	f001 fd11 	bl	801f0c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d6a0:	8a3b      	ldrh	r3, [r7, #16]
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f7f2 ff0c 	bl	80104c0 <lwip_htons>
 801d6a8:	4603      	mov	r3, r0
 801d6aa:	461a      	mov	r2, r3
 801d6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6b2:	2200      	movs	r2, #0
 801d6b4:	719a      	strb	r2, [r3, #6]
 801d6b6:	2200      	movs	r2, #0
 801d6b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6bc:	2200      	movs	r2, #0
 801d6be:	729a      	strb	r2, [r3, #10]
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801d6c4:	2114      	movs	r1, #20
 801d6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d6c8:	f7f3 f842 	bl	8010750 <inet_chksum>
 801d6cc:	4603      	mov	r3, r0
 801d6ce:	461a      	mov	r2, r3
 801d6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6d2:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6d6:	685b      	ldr	r3, [r3, #4]
 801d6d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d6da:	e00d      	b.n	801d6f8 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801d6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6de:	685b      	ldr	r3, [r3, #4]
 801d6e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d6e2:	2114      	movs	r1, #20
 801d6e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d6e6:	f7f4 fb87 	bl	8011df8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d6ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d6ec:	6878      	ldr	r0, [r7, #4]
 801d6ee:	f7f4 fcd7 	bl	80120a0 <pbuf_cat>
      r = iprh->next_pbuf;
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d1ee      	bne.n	801d6dc <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d6fe:	4b1e      	ldr	r3, [pc, #120]	@ (801d778 <ip4_reass+0x2c4>)
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d704:	429a      	cmp	r2, r3
 801d706:	d102      	bne.n	801d70e <ip4_reass+0x25a>
      ipr_prev = NULL;
 801d708:	2300      	movs	r3, #0
 801d70a:	637b      	str	r3, [r7, #52]	@ 0x34
 801d70c:	e010      	b.n	801d730 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d70e:	4b1a      	ldr	r3, [pc, #104]	@ (801d778 <ip4_reass+0x2c4>)
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	637b      	str	r3, [r7, #52]	@ 0x34
 801d714:	e007      	b.n	801d726 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801d716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d71c:	429a      	cmp	r2, r3
 801d71e:	d006      	beq.n	801d72e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	637b      	str	r3, [r7, #52]	@ 0x34
 801d726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d1f4      	bne.n	801d716 <ip4_reass+0x262>
 801d72c:	e000      	b.n	801d730 <ip4_reass+0x27c>
          break;
 801d72e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d730:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d734:	f7ff fd26 	bl	801d184 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d738:	6878      	ldr	r0, [r7, #4]
 801d73a:	f7f4 fc71 	bl	8012020 <pbuf_clen>
 801d73e:	4603      	mov	r3, r0
 801d740:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d742:	4b0c      	ldr	r3, [pc, #48]	@ (801d774 <ip4_reass+0x2c0>)
 801d744:	881b      	ldrh	r3, [r3, #0]
 801d746:	8c3a      	ldrh	r2, [r7, #32]
 801d748:	429a      	cmp	r2, r3
 801d74a:	d906      	bls.n	801d75a <ip4_reass+0x2a6>
 801d74c:	4b0b      	ldr	r3, [pc, #44]	@ (801d77c <ip4_reass+0x2c8>)
 801d74e:	f240 229b 	movw	r2, #667	@ 0x29b
 801d752:	490b      	ldr	r1, [pc, #44]	@ (801d780 <ip4_reass+0x2cc>)
 801d754:	480b      	ldr	r0, [pc, #44]	@ (801d784 <ip4_reass+0x2d0>)
 801d756:	f001 fa8d 	bl	801ec74 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d75a:	4b06      	ldr	r3, [pc, #24]	@ (801d774 <ip4_reass+0x2c0>)
 801d75c:	881a      	ldrh	r2, [r3, #0]
 801d75e:	8c3b      	ldrh	r3, [r7, #32]
 801d760:	1ad3      	subs	r3, r2, r3
 801d762:	b29a      	uxth	r2, r3
 801d764:	4b03      	ldr	r3, [pc, #12]	@ (801d774 <ip4_reass+0x2c0>)
 801d766:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	e038      	b.n	801d7de <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d76c:	2300      	movs	r3, #0
 801d76e:	e036      	b.n	801d7de <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801d770:	bf00      	nop
 801d772:	e00a      	b.n	801d78a <ip4_reass+0x2d6>
 801d774:	20013f4c 	.word	0x20013f4c
 801d778:	20013f48 	.word	0x20013f48
 801d77c:	080251e8 	.word	0x080251e8
 801d780:	08025358 	.word	0x08025358
 801d784:	08025230 	.word	0x08025230
    goto nullreturn_ipr;
 801d788:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d106      	bne.n	801d79e <ip4_reass+0x2ea>
 801d790:	4b15      	ldr	r3, [pc, #84]	@ (801d7e8 <ip4_reass+0x334>)
 801d792:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801d796:	4915      	ldr	r1, [pc, #84]	@ (801d7ec <ip4_reass+0x338>)
 801d798:	4815      	ldr	r0, [pc, #84]	@ (801d7f0 <ip4_reass+0x33c>)
 801d79a:	f001 fa6b 	bl	801ec74 <iprintf>
  if (ipr->p == NULL) {
 801d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7a0:	685b      	ldr	r3, [r3, #4]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d116      	bne.n	801d7d4 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d7a6:	4b13      	ldr	r3, [pc, #76]	@ (801d7f4 <ip4_reass+0x340>)
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d7ac:	429a      	cmp	r2, r3
 801d7ae:	d006      	beq.n	801d7be <ip4_reass+0x30a>
 801d7b0:	4b0d      	ldr	r3, [pc, #52]	@ (801d7e8 <ip4_reass+0x334>)
 801d7b2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801d7b6:	4910      	ldr	r1, [pc, #64]	@ (801d7f8 <ip4_reass+0x344>)
 801d7b8:	480d      	ldr	r0, [pc, #52]	@ (801d7f0 <ip4_reass+0x33c>)
 801d7ba:	f001 fa5b 	bl	801ec74 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d7be:	2100      	movs	r1, #0
 801d7c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d7c2:	f7ff fcdf 	bl	801d184 <ip_reass_dequeue_datagram>
 801d7c6:	e006      	b.n	801d7d6 <ip4_reass+0x322>
    goto nullreturn;
 801d7c8:	bf00      	nop
 801d7ca:	e004      	b.n	801d7d6 <ip4_reass+0x322>
    goto nullreturn;
 801d7cc:	bf00      	nop
 801d7ce:	e002      	b.n	801d7d6 <ip4_reass+0x322>
      goto nullreturn;
 801d7d0:	bf00      	nop
 801d7d2:	e000      	b.n	801d7d6 <ip4_reass+0x322>
  }

nullreturn:
 801d7d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d7d6:	6878      	ldr	r0, [r7, #4]
 801d7d8:	f7f4 fb94 	bl	8011f04 <pbuf_free>
  return NULL;
 801d7dc:	2300      	movs	r3, #0
}
 801d7de:	4618      	mov	r0, r3
 801d7e0:	3738      	adds	r7, #56	@ 0x38
 801d7e2:	46bd      	mov	sp, r7
 801d7e4:	bd80      	pop	{r7, pc}
 801d7e6:	bf00      	nop
 801d7e8:	080251e8 	.word	0x080251e8
 801d7ec:	08025374 	.word	0x08025374
 801d7f0:	08025230 	.word	0x08025230
 801d7f4:	20013f48 	.word	0x20013f48
 801d7f8:	08025380 	.word	0x08025380

0801d7fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d800:	2005      	movs	r0, #5
 801d802:	f7f3 fc8b 	bl	801111c <memp_malloc>
 801d806:	4603      	mov	r3, r0
}
 801d808:	4618      	mov	r0, r3
 801d80a:	bd80      	pop	{r7, pc}

0801d80c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d80c:	b580      	push	{r7, lr}
 801d80e:	b082      	sub	sp, #8
 801d810:	af00      	add	r7, sp, #0
 801d812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d106      	bne.n	801d828 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d81a:	4b07      	ldr	r3, [pc, #28]	@ (801d838 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d81c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801d820:	4906      	ldr	r1, [pc, #24]	@ (801d83c <ip_frag_free_pbuf_custom_ref+0x30>)
 801d822:	4807      	ldr	r0, [pc, #28]	@ (801d840 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d824:	f001 fa26 	bl	801ec74 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d828:	6879      	ldr	r1, [r7, #4]
 801d82a:	2005      	movs	r0, #5
 801d82c:	f7f3 fcc8 	bl	80111c0 <memp_free>
}
 801d830:	bf00      	nop
 801d832:	3708      	adds	r7, #8
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}
 801d838:	080251e8 	.word	0x080251e8
 801d83c:	080253a0 	.word	0x080253a0
 801d840:	08025230 	.word	0x08025230

0801d844 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b084      	sub	sp, #16
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	2b00      	cmp	r3, #0
 801d854:	d106      	bne.n	801d864 <ipfrag_free_pbuf_custom+0x20>
 801d856:	4b11      	ldr	r3, [pc, #68]	@ (801d89c <ipfrag_free_pbuf_custom+0x58>)
 801d858:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801d85c:	4910      	ldr	r1, [pc, #64]	@ (801d8a0 <ipfrag_free_pbuf_custom+0x5c>)
 801d85e:	4811      	ldr	r0, [pc, #68]	@ (801d8a4 <ipfrag_free_pbuf_custom+0x60>)
 801d860:	f001 fa08 	bl	801ec74 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d864:	68fa      	ldr	r2, [r7, #12]
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	429a      	cmp	r2, r3
 801d86a:	d006      	beq.n	801d87a <ipfrag_free_pbuf_custom+0x36>
 801d86c:	4b0b      	ldr	r3, [pc, #44]	@ (801d89c <ipfrag_free_pbuf_custom+0x58>)
 801d86e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801d872:	490d      	ldr	r1, [pc, #52]	@ (801d8a8 <ipfrag_free_pbuf_custom+0x64>)
 801d874:	480b      	ldr	r0, [pc, #44]	@ (801d8a4 <ipfrag_free_pbuf_custom+0x60>)
 801d876:	f001 f9fd 	bl	801ec74 <iprintf>
  if (pcr->original != NULL) {
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	695b      	ldr	r3, [r3, #20]
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d004      	beq.n	801d88c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	695b      	ldr	r3, [r3, #20]
 801d886:	4618      	mov	r0, r3
 801d888:	f7f4 fb3c 	bl	8011f04 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d88c:	68f8      	ldr	r0, [r7, #12]
 801d88e:	f7ff ffbd 	bl	801d80c <ip_frag_free_pbuf_custom_ref>
}
 801d892:	bf00      	nop
 801d894:	3710      	adds	r7, #16
 801d896:	46bd      	mov	sp, r7
 801d898:	bd80      	pop	{r7, pc}
 801d89a:	bf00      	nop
 801d89c:	080251e8 	.word	0x080251e8
 801d8a0:	080253ac 	.word	0x080253ac
 801d8a4:	08025230 	.word	0x08025230
 801d8a8:	080253b8 	.word	0x080253b8

0801d8ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b094      	sub	sp, #80	@ 0x50
 801d8b0:	af02      	add	r7, sp, #8
 801d8b2:	60f8      	str	r0, [r7, #12]
 801d8b4:	60b9      	str	r1, [r7, #8]
 801d8b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d8be:	68bb      	ldr	r3, [r7, #8]
 801d8c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d8c2:	3b14      	subs	r3, #20
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	da00      	bge.n	801d8ca <ip4_frag+0x1e>
 801d8c8:	3307      	adds	r3, #7
 801d8ca:	10db      	asrs	r3, r3, #3
 801d8cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d8ce:	2314      	movs	r3, #20
 801d8d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	685b      	ldr	r3, [r3, #4]
 801d8d6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801d8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d8de:	781b      	ldrb	r3, [r3, #0]
 801d8e0:	f003 030f 	and.w	r3, r3, #15
 801d8e4:	b2db      	uxtb	r3, r3
 801d8e6:	009b      	lsls	r3, r3, #2
 801d8e8:	b2db      	uxtb	r3, r3
 801d8ea:	2b14      	cmp	r3, #20
 801d8ec:	d002      	beq.n	801d8f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d8ee:	f06f 0305 	mvn.w	r3, #5
 801d8f2:	e118      	b.n	801db26 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	895b      	ldrh	r3, [r3, #10]
 801d8f8:	2b13      	cmp	r3, #19
 801d8fa:	d809      	bhi.n	801d910 <ip4_frag+0x64>
 801d8fc:	4b8c      	ldr	r3, [pc, #560]	@ (801db30 <ip4_frag+0x284>)
 801d8fe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801d902:	498c      	ldr	r1, [pc, #560]	@ (801db34 <ip4_frag+0x288>)
 801d904:	488c      	ldr	r0, [pc, #560]	@ (801db38 <ip4_frag+0x28c>)
 801d906:	f001 f9b5 	bl	801ec74 <iprintf>
 801d90a:	f06f 0305 	mvn.w	r3, #5
 801d90e:	e10a      	b.n	801db26 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d912:	88db      	ldrh	r3, [r3, #6]
 801d914:	b29b      	uxth	r3, r3
 801d916:	4618      	mov	r0, r3
 801d918:	f7f2 fdd2 	bl	80104c0 <lwip_htons>
 801d91c:	4603      	mov	r3, r0
 801d91e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801d920:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d926:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d92a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d92c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d930:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	891b      	ldrh	r3, [r3, #8]
 801d936:	3b14      	subs	r3, #20
 801d938:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801d93c:	e0e9      	b.n	801db12 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d93e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d940:	00db      	lsls	r3, r3, #3
 801d942:	b29b      	uxth	r3, r3
 801d944:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d948:	4293      	cmp	r3, r2
 801d94a:	bf28      	it	cs
 801d94c:	4613      	movcs	r3, r2
 801d94e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d950:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d954:	2114      	movs	r1, #20
 801d956:	200e      	movs	r0, #14
 801d958:	f7f3 ffec 	bl	8011934 <pbuf_alloc>
 801d95c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d960:	2b00      	cmp	r3, #0
 801d962:	f000 80dd 	beq.w	801db20 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d968:	895b      	ldrh	r3, [r3, #10]
 801d96a:	2b13      	cmp	r3, #19
 801d96c:	d806      	bhi.n	801d97c <ip4_frag+0xd0>
 801d96e:	4b70      	ldr	r3, [pc, #448]	@ (801db30 <ip4_frag+0x284>)
 801d970:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801d974:	4971      	ldr	r1, [pc, #452]	@ (801db3c <ip4_frag+0x290>)
 801d976:	4870      	ldr	r0, [pc, #448]	@ (801db38 <ip4_frag+0x28c>)
 801d978:	f001 f97c 	bl	801ec74 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d97e:	685b      	ldr	r3, [r3, #4]
 801d980:	2214      	movs	r2, #20
 801d982:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d984:	4618      	mov	r0, r3
 801d986:	f001 fb9c 	bl	801f0c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d98c:	685b      	ldr	r3, [r3, #4]
 801d98e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801d990:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d992:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801d996:	e064      	b.n	801da62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	895a      	ldrh	r2, [r3, #10]
 801d99c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d99e:	1ad3      	subs	r3, r2, r3
 801d9a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	895b      	ldrh	r3, [r3, #10]
 801d9a6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	d906      	bls.n	801d9ba <ip4_frag+0x10e>
 801d9ac:	4b60      	ldr	r3, [pc, #384]	@ (801db30 <ip4_frag+0x284>)
 801d9ae:	f240 322d 	movw	r2, #813	@ 0x32d
 801d9b2:	4963      	ldr	r1, [pc, #396]	@ (801db40 <ip4_frag+0x294>)
 801d9b4:	4860      	ldr	r0, [pc, #384]	@ (801db38 <ip4_frag+0x28c>)
 801d9b6:	f001 f95d 	bl	801ec74 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d9ba:	8bfa      	ldrh	r2, [r7, #30]
 801d9bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d9c0:	4293      	cmp	r3, r2
 801d9c2:	bf28      	it	cs
 801d9c4:	4613      	movcs	r3, r2
 801d9c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d9ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d105      	bne.n	801d9de <ip4_frag+0x132>
        poff = 0;
 801d9d2:	2300      	movs	r3, #0
 801d9d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	60fb      	str	r3, [r7, #12]
        continue;
 801d9dc:	e041      	b.n	801da62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d9de:	f7ff ff0d 	bl	801d7fc <ip_frag_alloc_pbuf_custom_ref>
 801d9e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d9e4:	69bb      	ldr	r3, [r7, #24]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d103      	bne.n	801d9f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d9ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d9ec:	f7f4 fa8a 	bl	8011f04 <pbuf_free>
        goto memerr;
 801d9f0:	e097      	b.n	801db22 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d9f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d9f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d9fa:	4413      	add	r3, r2
 801d9fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801da00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801da04:	9201      	str	r2, [sp, #4]
 801da06:	9300      	str	r3, [sp, #0]
 801da08:	4603      	mov	r3, r0
 801da0a:	2241      	movs	r2, #65	@ 0x41
 801da0c:	2000      	movs	r0, #0
 801da0e:	f7f4 f8bf 	bl	8011b90 <pbuf_alloced_custom>
 801da12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801da14:	697b      	ldr	r3, [r7, #20]
 801da16:	2b00      	cmp	r3, #0
 801da18:	d106      	bne.n	801da28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801da1a:	69b8      	ldr	r0, [r7, #24]
 801da1c:	f7ff fef6 	bl	801d80c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801da20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801da22:	f7f4 fa6f 	bl	8011f04 <pbuf_free>
        goto memerr;
 801da26:	e07c      	b.n	801db22 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 801da28:	68f8      	ldr	r0, [r7, #12]
 801da2a:	f7f4 fb11 	bl	8012050 <pbuf_ref>
      pcr->original = p;
 801da2e:	69bb      	ldr	r3, [r7, #24]
 801da30:	68fa      	ldr	r2, [r7, #12]
 801da32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801da34:	69bb      	ldr	r3, [r7, #24]
 801da36:	4a43      	ldr	r2, [pc, #268]	@ (801db44 <ip4_frag+0x298>)
 801da38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801da3a:	6979      	ldr	r1, [r7, #20]
 801da3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801da3e:	f7f4 fb2f 	bl	80120a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801da42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801da46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801da4a:	1ad3      	subs	r3, r2, r3
 801da4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801da50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801da54:	2b00      	cmp	r3, #0
 801da56:	d004      	beq.n	801da62 <ip4_frag+0x1b6>
        poff = 0;
 801da58:	2300      	movs	r3, #0
 801da5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801da62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801da66:	2b00      	cmp	r3, #0
 801da68:	d196      	bne.n	801d998 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801da6a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801da6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801da70:	4413      	add	r3, r2
 801da72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801da74:	68bb      	ldr	r3, [r7, #8]
 801da76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801da78:	f1a3 0213 	sub.w	r2, r3, #19
 801da7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801da80:	429a      	cmp	r2, r3
 801da82:	bfcc      	ite	gt
 801da84:	2301      	movgt	r3, #1
 801da86:	2300      	movle	r3, #0
 801da88:	b2db      	uxtb	r3, r3
 801da8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801da8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801da90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801da96:	6a3b      	ldr	r3, [r7, #32]
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d002      	beq.n	801daa2 <ip4_frag+0x1f6>
 801da9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d003      	beq.n	801daaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801daa2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801daa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801daa8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801daaa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801daac:	4618      	mov	r0, r3
 801daae:	f7f2 fd07 	bl	80104c0 <lwip_htons>
 801dab2:	4603      	mov	r3, r0
 801dab4:	461a      	mov	r2, r3
 801dab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dab8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801daba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dabc:	3314      	adds	r3, #20
 801dabe:	b29b      	uxth	r3, r3
 801dac0:	4618      	mov	r0, r3
 801dac2:	f7f2 fcfd 	bl	80104c0 <lwip_htons>
 801dac6:	4603      	mov	r3, r0
 801dac8:	461a      	mov	r2, r3
 801daca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dacc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801dace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dad0:	2200      	movs	r2, #0
 801dad2:	729a      	strb	r2, [r3, #10]
 801dad4:	2200      	movs	r2, #0
 801dad6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801dad8:	2114      	movs	r1, #20
 801dada:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dadc:	f7f2 fe38 	bl	8010750 <inet_chksum>
 801dae0:	4603      	mov	r3, r0
 801dae2:	461a      	mov	r2, r3
 801dae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dae6:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801dae8:	68bb      	ldr	r3, [r7, #8]
 801daea:	695b      	ldr	r3, [r3, #20]
 801daec:	687a      	ldr	r2, [r7, #4]
 801daee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801daf0:	68b8      	ldr	r0, [r7, #8]
 801daf2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801daf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801daf6:	f7f4 fa05 	bl	8011f04 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801dafa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801dafe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801db00:	1ad3      	subs	r3, r2, r3
 801db02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801db06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801db0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801db0c:	4413      	add	r3, r2
 801db0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801db12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801db16:	2b00      	cmp	r3, #0
 801db18:	f47f af11 	bne.w	801d93e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801db1c:	2300      	movs	r3, #0
 801db1e:	e002      	b.n	801db26 <ip4_frag+0x27a>
      goto memerr;
 801db20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801db22:	f04f 33ff 	mov.w	r3, #4294967295
}
 801db26:	4618      	mov	r0, r3
 801db28:	3748      	adds	r7, #72	@ 0x48
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}
 801db2e:	bf00      	nop
 801db30:	080251e8 	.word	0x080251e8
 801db34:	080253c4 	.word	0x080253c4
 801db38:	08025230 	.word	0x08025230
 801db3c:	080253e0 	.word	0x080253e0
 801db40:	08025400 	.word	0x08025400
 801db44:	0801d845 	.word	0x0801d845

0801db48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b086      	sub	sp, #24
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
 801db50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801db52:	230e      	movs	r3, #14
 801db54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	895b      	ldrh	r3, [r3, #10]
 801db5a:	2b0e      	cmp	r3, #14
 801db5c:	d96e      	bls.n	801dc3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	7bdb      	ldrb	r3, [r3, #15]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d106      	bne.n	801db74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801db6c:	3301      	adds	r3, #1
 801db6e:	b2da      	uxtb	r2, r3
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	685b      	ldr	r3, [r3, #4]
 801db78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801db7a:	693b      	ldr	r3, [r7, #16]
 801db7c:	7b1a      	ldrb	r2, [r3, #12]
 801db7e:	7b5b      	ldrb	r3, [r3, #13]
 801db80:	021b      	lsls	r3, r3, #8
 801db82:	4313      	orrs	r3, r2
 801db84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801db86:	693b      	ldr	r3, [r7, #16]
 801db88:	781b      	ldrb	r3, [r3, #0]
 801db8a:	f003 0301 	and.w	r3, r3, #1
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d023      	beq.n	801dbda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801db92:	693b      	ldr	r3, [r7, #16]
 801db94:	781b      	ldrb	r3, [r3, #0]
 801db96:	2b01      	cmp	r3, #1
 801db98:	d10f      	bne.n	801dbba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801db9a:	693b      	ldr	r3, [r7, #16]
 801db9c:	785b      	ldrb	r3, [r3, #1]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d11b      	bne.n	801dbda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dba2:	693b      	ldr	r3, [r7, #16]
 801dba4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dba6:	2b5e      	cmp	r3, #94	@ 0x5e
 801dba8:	d117      	bne.n	801dbda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	7b5b      	ldrb	r3, [r3, #13]
 801dbae:	f043 0310 	orr.w	r3, r3, #16
 801dbb2:	b2da      	uxtb	r2, r3
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	735a      	strb	r2, [r3, #13]
 801dbb8:	e00f      	b.n	801dbda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dbba:	693b      	ldr	r3, [r7, #16]
 801dbbc:	2206      	movs	r2, #6
 801dbbe:	4928      	ldr	r1, [pc, #160]	@ (801dc60 <ethernet_input+0x118>)
 801dbc0:	4618      	mov	r0, r3
 801dbc2:	f001 f9b1 	bl	801ef28 <memcmp>
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d106      	bne.n	801dbda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	7b5b      	ldrb	r3, [r3, #13]
 801dbd0:	f043 0308 	orr.w	r3, r3, #8
 801dbd4:	b2da      	uxtb	r2, r3
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dbda:	89fb      	ldrh	r3, [r7, #14]
 801dbdc:	2b08      	cmp	r3, #8
 801dbde:	d003      	beq.n	801dbe8 <ethernet_input+0xa0>
 801dbe0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801dbe4:	d014      	beq.n	801dc10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dbe6:	e032      	b.n	801dc4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dbe8:	683b      	ldr	r3, [r7, #0]
 801dbea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801dbee:	f003 0308 	and.w	r3, r3, #8
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d024      	beq.n	801dc40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dbf6:	8afb      	ldrh	r3, [r7, #22]
 801dbf8:	4619      	mov	r1, r3
 801dbfa:	6878      	ldr	r0, [r7, #4]
 801dbfc:	f7f4 f8fc 	bl	8011df8 <pbuf_remove_header>
 801dc00:	4603      	mov	r3, r0
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d11e      	bne.n	801dc44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dc06:	6839      	ldr	r1, [r7, #0]
 801dc08:	6878      	ldr	r0, [r7, #4]
 801dc0a:	f7fe fd57 	bl	801c6bc <ip4_input>
      break;
 801dc0e:	e013      	b.n	801dc38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc10:	683b      	ldr	r3, [r7, #0]
 801dc12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801dc16:	f003 0308 	and.w	r3, r3, #8
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d014      	beq.n	801dc48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc1e:	8afb      	ldrh	r3, [r7, #22]
 801dc20:	4619      	mov	r1, r3
 801dc22:	6878      	ldr	r0, [r7, #4]
 801dc24:	f7f4 f8e8 	bl	8011df8 <pbuf_remove_header>
 801dc28:	4603      	mov	r3, r0
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d10e      	bne.n	801dc4c <ethernet_input+0x104>
        etharp_input(p, netif);
 801dc2e:	6839      	ldr	r1, [r7, #0]
 801dc30:	6878      	ldr	r0, [r7, #4]
 801dc32:	f7fd febf 	bl	801b9b4 <etharp_input>
      break;
 801dc36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801dc38:	2300      	movs	r3, #0
 801dc3a:	e00c      	b.n	801dc56 <ethernet_input+0x10e>
    goto free_and_return;
 801dc3c:	bf00      	nop
 801dc3e:	e006      	b.n	801dc4e <ethernet_input+0x106>
        goto free_and_return;
 801dc40:	bf00      	nop
 801dc42:	e004      	b.n	801dc4e <ethernet_input+0x106>
        goto free_and_return;
 801dc44:	bf00      	nop
 801dc46:	e002      	b.n	801dc4e <ethernet_input+0x106>
        goto free_and_return;
 801dc48:	bf00      	nop
 801dc4a:	e000      	b.n	801dc4e <ethernet_input+0x106>
        goto free_and_return;
 801dc4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801dc4e:	6878      	ldr	r0, [r7, #4]
 801dc50:	f7f4 f958 	bl	8011f04 <pbuf_free>
  return ERR_OK;
 801dc54:	2300      	movs	r3, #0
}
 801dc56:	4618      	mov	r0, r3
 801dc58:	3718      	adds	r7, #24
 801dc5a:	46bd      	mov	sp, r7
 801dc5c:	bd80      	pop	{r7, pc}
 801dc5e:	bf00      	nop
 801dc60:	080712a0 	.word	0x080712a0

0801dc64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b086      	sub	sp, #24
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	60f8      	str	r0, [r7, #12]
 801dc6c:	60b9      	str	r1, [r7, #8]
 801dc6e:	607a      	str	r2, [r7, #4]
 801dc70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dc72:	8c3b      	ldrh	r3, [r7, #32]
 801dc74:	4618      	mov	r0, r3
 801dc76:	f7f2 fc23 	bl	80104c0 <lwip_htons>
 801dc7a:	4603      	mov	r3, r0
 801dc7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dc7e:	210e      	movs	r1, #14
 801dc80:	68b8      	ldr	r0, [r7, #8]
 801dc82:	f7f4 f8a9 	bl	8011dd8 <pbuf_add_header>
 801dc86:	4603      	mov	r3, r0
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d125      	bne.n	801dcd8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dc8c:	68bb      	ldr	r3, [r7, #8]
 801dc8e:	685b      	ldr	r3, [r3, #4]
 801dc90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801dc92:	693b      	ldr	r3, [r7, #16]
 801dc94:	8afa      	ldrh	r2, [r7, #22]
 801dc96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801dc98:	693b      	ldr	r3, [r7, #16]
 801dc9a:	2206      	movs	r2, #6
 801dc9c:	6839      	ldr	r1, [r7, #0]
 801dc9e:	4618      	mov	r0, r3
 801dca0:	f001 fa0f 	bl	801f0c2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801dca4:	693b      	ldr	r3, [r7, #16]
 801dca6:	3306      	adds	r3, #6
 801dca8:	2206      	movs	r2, #6
 801dcaa:	6879      	ldr	r1, [r7, #4]
 801dcac:	4618      	mov	r0, r3
 801dcae:	f001 fa08 	bl	801f0c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801dcb8:	2b06      	cmp	r3, #6
 801dcba:	d006      	beq.n	801dcca <ethernet_output+0x66>
 801dcbc:	4b0a      	ldr	r3, [pc, #40]	@ (801dce8 <ethernet_output+0x84>)
 801dcbe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801dcc2:	490a      	ldr	r1, [pc, #40]	@ (801dcec <ethernet_output+0x88>)
 801dcc4:	480a      	ldr	r0, [pc, #40]	@ (801dcf0 <ethernet_output+0x8c>)
 801dcc6:	f000 ffd5 	bl	801ec74 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	699b      	ldr	r3, [r3, #24]
 801dcce:	68b9      	ldr	r1, [r7, #8]
 801dcd0:	68f8      	ldr	r0, [r7, #12]
 801dcd2:	4798      	blx	r3
 801dcd4:	4603      	mov	r3, r0
 801dcd6:	e002      	b.n	801dcde <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801dcd8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801dcda:	f06f 0301 	mvn.w	r3, #1
}
 801dcde:	4618      	mov	r0, r3
 801dce0:	3718      	adds	r7, #24
 801dce2:	46bd      	mov	sp, r7
 801dce4:	bd80      	pop	{r7, pc}
 801dce6:	bf00      	nop
 801dce8:	08025410 	.word	0x08025410
 801dcec:	08025448 	.word	0x08025448
 801dcf0:	0802547c 	.word	0x0802547c

0801dcf4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b084      	sub	sp, #16
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	6078      	str	r0, [r7, #4]
 801dcfc:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801dcfe:	683b      	ldr	r3, [r7, #0]
 801dd00:	60bb      	str	r3, [r7, #8]
 801dd02:	2304      	movs	r3, #4
 801dd04:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801dd06:	f107 0308 	add.w	r3, r7, #8
 801dd0a:	2100      	movs	r1, #0
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7ee fe7e 	bl	800ca0e <osMessageCreate>
 801dd12:	4602      	mov	r2, r0
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d102      	bne.n	801dd26 <sys_mbox_new+0x32>
  return ERR_MEM;
 801dd20:	f04f 33ff 	mov.w	r3, #4294967295
 801dd24:	e000      	b.n	801dd28 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801dd26:	2300      	movs	r3, #0
}
 801dd28:	4618      	mov	r0, r3
 801dd2a:	3710      	adds	r7, #16
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	bd80      	pop	{r7, pc}

0801dd30 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801dd30:	b580      	push	{r7, lr}
 801dd32:	b082      	sub	sp, #8
 801dd34:	af00      	add	r7, sp, #0
 801dd36:	6078      	str	r0, [r7, #4]
 801dd38:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801dd3a:	bf00      	nop
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	6839      	ldr	r1, [r7, #0]
 801dd42:	f04f 32ff 	mov.w	r2, #4294967295
 801dd46:	4618      	mov	r0, r3
 801dd48:	f7ee fe74 	bl	800ca34 <osMessagePut>
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d1f4      	bne.n	801dd3c <sys_mbox_post+0xc>
}
 801dd52:	bf00      	nop
 801dd54:	bf00      	nop
 801dd56:	3708      	adds	r7, #8
 801dd58:	46bd      	mov	sp, r7
 801dd5a:	bd80      	pop	{r7, pc}

0801dd5c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b084      	sub	sp, #16
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	6078      	str	r0, [r7, #4]
 801dd64:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	6839      	ldr	r1, [r7, #0]
 801dd6c:	2200      	movs	r2, #0
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f7ee fe60 	bl	800ca34 <osMessagePut>
 801dd74:	4603      	mov	r3, r0
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d102      	bne.n	801dd80 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	73fb      	strb	r3, [r7, #15]
 801dd7e:	e001      	b.n	801dd84 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801dd80:	23ff      	movs	r3, #255	@ 0xff
 801dd82:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801dd84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	3710      	adds	r7, #16
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}

0801dd90 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b08c      	sub	sp, #48	@ 0x30
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	61f8      	str	r0, [r7, #28]
 801dd98:	61b9      	str	r1, [r7, #24]
 801dd9a:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801dd9c:	f7ee fd19 	bl	800c7d2 <osKernelSysTick>
 801dda0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  
  if(timeout != 0)
 801dda2:	697b      	ldr	r3, [r7, #20]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d017      	beq.n	801ddd8 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801dda8:	69fb      	ldr	r3, [r7, #28]
 801ddaa:	6819      	ldr	r1, [r3, #0]
 801ddac:	f107 0320 	add.w	r3, r7, #32
 801ddb0:	697a      	ldr	r2, [r7, #20]
 801ddb2:	4618      	mov	r0, r3
 801ddb4:	f7ee fe82 	bl	800cabc <osMessageGet>
    
    if(event.status == osEventMessage)
 801ddb8:	6a3b      	ldr	r3, [r7, #32]
 801ddba:	2b10      	cmp	r3, #16
 801ddbc:	d109      	bne.n	801ddd2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ddbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddc0:	461a      	mov	r2, r3
 801ddc2:	69bb      	ldr	r3, [r7, #24]
 801ddc4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ddc6:	f7ee fd04 	bl	800c7d2 <osKernelSysTick>
 801ddca:	4602      	mov	r2, r0
 801ddcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddce:	1ad3      	subs	r3, r2, r3
 801ddd0:	e019      	b.n	801de06 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ddd2:	f04f 33ff 	mov.w	r3, #4294967295
 801ddd6:	e016      	b.n	801de06 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801ddd8:	69fb      	ldr	r3, [r7, #28]
 801ddda:	6819      	ldr	r1, [r3, #0]
 801dddc:	463b      	mov	r3, r7
 801ddde:	f04f 32ff 	mov.w	r2, #4294967295
 801dde2:	4618      	mov	r0, r3
 801dde4:	f7ee fe6a 	bl	800cabc <osMessageGet>
 801dde8:	f107 0320 	add.w	r3, r7, #32
 801ddec:	463a      	mov	r2, r7
 801ddee:	ca07      	ldmia	r2, {r0, r1, r2}
 801ddf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ddf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddf6:	461a      	mov	r2, r3
 801ddf8:	69bb      	ldr	r3, [r7, #24]
 801ddfa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ddfc:	f7ee fce9 	bl	800c7d2 <osKernelSysTick>
 801de00:	4602      	mov	r2, r0
 801de02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de04:	1ad3      	subs	r3, r2, r3
  }
}
 801de06:	4618      	mov	r0, r3
 801de08:	3730      	adds	r7, #48	@ 0x30
 801de0a:	46bd      	mov	sp, r7
 801de0c:	bd80      	pop	{r7, pc}

0801de0e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801de0e:	b480      	push	{r7}
 801de10:	b083      	sub	sp, #12
 801de12:	af00      	add	r7, sp, #0
 801de14:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d101      	bne.n	801de22 <sys_mbox_valid+0x14>
    return 0;
 801de1e:	2300      	movs	r3, #0
 801de20:	e000      	b.n	801de24 <sys_mbox_valid+0x16>
  else
    return 1;
 801de22:	2301      	movs	r3, #1
}                                             
 801de24:	4618      	mov	r0, r3
 801de26:	370c      	adds	r7, #12
 801de28:	46bd      	mov	sp, r7
 801de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de2e:	4770      	bx	lr

0801de30 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801de30:	b580      	push	{r7, lr}
 801de32:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801de34:	4803      	ldr	r0, [pc, #12]	@ (801de44 <sys_init+0x14>)
 801de36:	f7ee fd26 	bl	800c886 <osMutexCreate>
 801de3a:	4603      	mov	r3, r0
 801de3c:	4a02      	ldr	r2, [pc, #8]	@ (801de48 <sys_init+0x18>)
 801de3e:	6013      	str	r3, [r2, #0]
}
 801de40:	bf00      	nop
 801de42:	bd80      	pop	{r7, pc}
 801de44:	080712b0 	.word	0x080712b0
 801de48:	20013f50 	.word	0x20013f50

0801de4c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801de4c:	b580      	push	{r7, lr}
 801de4e:	b084      	sub	sp, #16
 801de50:	af00      	add	r7, sp, #0
 801de52:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801de54:	2300      	movs	r3, #0
 801de56:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801de58:	f107 030c 	add.w	r3, r7, #12
 801de5c:	4618      	mov	r0, r3
 801de5e:	f7ee fd12 	bl	800c886 <osMutexCreate>
 801de62:	4602      	mov	r2, r0
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d102      	bne.n	801de76 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801de70:	f04f 33ff 	mov.w	r3, #4294967295
 801de74:	e000      	b.n	801de78 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801de76:	2300      	movs	r3, #0
}
 801de78:	4618      	mov	r0, r3
 801de7a:	3710      	adds	r7, #16
 801de7c:	46bd      	mov	sp, r7
 801de7e:	bd80      	pop	{r7, pc}

0801de80 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b082      	sub	sp, #8
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	f04f 31ff 	mov.w	r1, #4294967295
 801de90:	4618      	mov	r0, r3
 801de92:	f7ee fd05 	bl	800c8a0 <osMutexWait>
}
 801de96:	bf00      	nop
 801de98:	3708      	adds	r7, #8
 801de9a:	46bd      	mov	sp, r7
 801de9c:	bd80      	pop	{r7, pc}

0801de9e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801de9e:	b580      	push	{r7, lr}
 801dea0:	b082      	sub	sp, #8
 801dea2:	af00      	add	r7, sp, #0
 801dea4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	4618      	mov	r0, r3
 801deac:	f7ee fd48 	bl	800c940 <osMutexRelease>
}
 801deb0:	bf00      	nop
 801deb2:	3708      	adds	r7, #8
 801deb4:	46bd      	mov	sp, r7
 801deb6:	bd80      	pop	{r7, pc}

0801deb8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b08a      	sub	sp, #40	@ 0x28
 801debc:	af00      	add	r7, sp, #0
 801debe:	60f8      	str	r0, [r7, #12]
 801dec0:	60b9      	str	r1, [r7, #8]
 801dec2:	607a      	str	r2, [r7, #4]
 801dec4:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	617b      	str	r3, [r7, #20]
 801deca:	68bb      	ldr	r3, [r7, #8]
 801decc:	61bb      	str	r3, [r7, #24]
 801dece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ded0:	b21b      	sxth	r3, r3
 801ded2:	83bb      	strh	r3, [r7, #28]
 801ded4:	2300      	movs	r3, #0
 801ded6:	623b      	str	r3, [r7, #32]
 801ded8:	683b      	ldr	r3, [r7, #0]
 801deda:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801dedc:	f107 0314 	add.w	r3, r7, #20
 801dee0:	6879      	ldr	r1, [r7, #4]
 801dee2:	4618      	mov	r0, r3
 801dee4:	f7ee fc85 	bl	800c7f2 <osThreadCreate>
 801dee8:	4603      	mov	r3, r0
}
 801deea:	4618      	mov	r0, r3
 801deec:	3728      	adds	r7, #40	@ 0x28
 801deee:	46bd      	mov	sp, r7
 801def0:	bd80      	pop	{r7, pc}
	...

0801def4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801def4:	b580      	push	{r7, lr}
 801def6:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801def8:	4b04      	ldr	r3, [pc, #16]	@ (801df0c <sys_arch_protect+0x18>)
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	f04f 31ff 	mov.w	r1, #4294967295
 801df00:	4618      	mov	r0, r3
 801df02:	f7ee fccd 	bl	800c8a0 <osMutexWait>
  return (sys_prot_t)1;
 801df06:	2301      	movs	r3, #1
}
 801df08:	4618      	mov	r0, r3
 801df0a:	bd80      	pop	{r7, pc}
 801df0c:	20013f50 	.word	0x20013f50

0801df10 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801df10:	b580      	push	{r7, lr}
 801df12:	b082      	sub	sp, #8
 801df14:	af00      	add	r7, sp, #0
 801df16:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801df18:	4b04      	ldr	r3, [pc, #16]	@ (801df2c <sys_arch_unprotect+0x1c>)
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	4618      	mov	r0, r3
 801df1e:	f7ee fd0f 	bl	800c940 <osMutexRelease>
}
 801df22:	bf00      	nop
 801df24:	3708      	adds	r7, #8
 801df26:	46bd      	mov	sp, r7
 801df28:	bd80      	pop	{r7, pc}
 801df2a:	bf00      	nop
 801df2c:	20013f50 	.word	0x20013f50

0801df30 <_calloc_r>:
 801df30:	b570      	push	{r4, r5, r6, lr}
 801df32:	fba1 5402 	umull	r5, r4, r1, r2
 801df36:	b93c      	cbnz	r4, 801df48 <_calloc_r+0x18>
 801df38:	4629      	mov	r1, r5
 801df3a:	f000 f83f 	bl	801dfbc <_malloc_r>
 801df3e:	4606      	mov	r6, r0
 801df40:	b928      	cbnz	r0, 801df4e <_calloc_r+0x1e>
 801df42:	2600      	movs	r6, #0
 801df44:	4630      	mov	r0, r6
 801df46:	bd70      	pop	{r4, r5, r6, pc}
 801df48:	220c      	movs	r2, #12
 801df4a:	6002      	str	r2, [r0, #0]
 801df4c:	e7f9      	b.n	801df42 <_calloc_r+0x12>
 801df4e:	462a      	mov	r2, r5
 801df50:	4621      	mov	r1, r4
 801df52:	f000 fff9 	bl	801ef48 <memset>
 801df56:	e7f5      	b.n	801df44 <_calloc_r+0x14>

0801df58 <malloc>:
 801df58:	4b02      	ldr	r3, [pc, #8]	@ (801df64 <malloc+0xc>)
 801df5a:	4601      	mov	r1, r0
 801df5c:	6818      	ldr	r0, [r3, #0]
 801df5e:	f000 b82d 	b.w	801dfbc <_malloc_r>
 801df62:	bf00      	nop
 801df64:	200000d8 	.word	0x200000d8

0801df68 <free>:
 801df68:	4b02      	ldr	r3, [pc, #8]	@ (801df74 <free+0xc>)
 801df6a:	4601      	mov	r1, r0
 801df6c:	6818      	ldr	r0, [r3, #0]
 801df6e:	f001 bf23 	b.w	801fdb8 <_free_r>
 801df72:	bf00      	nop
 801df74:	200000d8 	.word	0x200000d8

0801df78 <sbrk_aligned>:
 801df78:	b570      	push	{r4, r5, r6, lr}
 801df7a:	4e0f      	ldr	r6, [pc, #60]	@ (801dfb8 <sbrk_aligned+0x40>)
 801df7c:	460c      	mov	r4, r1
 801df7e:	6831      	ldr	r1, [r6, #0]
 801df80:	4605      	mov	r5, r0
 801df82:	b911      	cbnz	r1, 801df8a <sbrk_aligned+0x12>
 801df84:	f001 f846 	bl	801f014 <_sbrk_r>
 801df88:	6030      	str	r0, [r6, #0]
 801df8a:	4621      	mov	r1, r4
 801df8c:	4628      	mov	r0, r5
 801df8e:	f001 f841 	bl	801f014 <_sbrk_r>
 801df92:	1c43      	adds	r3, r0, #1
 801df94:	d103      	bne.n	801df9e <sbrk_aligned+0x26>
 801df96:	f04f 34ff 	mov.w	r4, #4294967295
 801df9a:	4620      	mov	r0, r4
 801df9c:	bd70      	pop	{r4, r5, r6, pc}
 801df9e:	1cc4      	adds	r4, r0, #3
 801dfa0:	f024 0403 	bic.w	r4, r4, #3
 801dfa4:	42a0      	cmp	r0, r4
 801dfa6:	d0f8      	beq.n	801df9a <sbrk_aligned+0x22>
 801dfa8:	1a21      	subs	r1, r4, r0
 801dfaa:	4628      	mov	r0, r5
 801dfac:	f001 f832 	bl	801f014 <_sbrk_r>
 801dfb0:	3001      	adds	r0, #1
 801dfb2:	d1f2      	bne.n	801df9a <sbrk_aligned+0x22>
 801dfb4:	e7ef      	b.n	801df96 <sbrk_aligned+0x1e>
 801dfb6:	bf00      	nop
 801dfb8:	20013f54 	.word	0x20013f54

0801dfbc <_malloc_r>:
 801dfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfc0:	1ccd      	adds	r5, r1, #3
 801dfc2:	f025 0503 	bic.w	r5, r5, #3
 801dfc6:	3508      	adds	r5, #8
 801dfc8:	2d0c      	cmp	r5, #12
 801dfca:	bf38      	it	cc
 801dfcc:	250c      	movcc	r5, #12
 801dfce:	2d00      	cmp	r5, #0
 801dfd0:	4606      	mov	r6, r0
 801dfd2:	db01      	blt.n	801dfd8 <_malloc_r+0x1c>
 801dfd4:	42a9      	cmp	r1, r5
 801dfd6:	d904      	bls.n	801dfe2 <_malloc_r+0x26>
 801dfd8:	230c      	movs	r3, #12
 801dfda:	6033      	str	r3, [r6, #0]
 801dfdc:	2000      	movs	r0, #0
 801dfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e0b8 <_malloc_r+0xfc>
 801dfe6:	f000 f869 	bl	801e0bc <__malloc_lock>
 801dfea:	f8d8 3000 	ldr.w	r3, [r8]
 801dfee:	461c      	mov	r4, r3
 801dff0:	bb44      	cbnz	r4, 801e044 <_malloc_r+0x88>
 801dff2:	4629      	mov	r1, r5
 801dff4:	4630      	mov	r0, r6
 801dff6:	f7ff ffbf 	bl	801df78 <sbrk_aligned>
 801dffa:	1c43      	adds	r3, r0, #1
 801dffc:	4604      	mov	r4, r0
 801dffe:	d158      	bne.n	801e0b2 <_malloc_r+0xf6>
 801e000:	f8d8 4000 	ldr.w	r4, [r8]
 801e004:	4627      	mov	r7, r4
 801e006:	2f00      	cmp	r7, #0
 801e008:	d143      	bne.n	801e092 <_malloc_r+0xd6>
 801e00a:	2c00      	cmp	r4, #0
 801e00c:	d04b      	beq.n	801e0a6 <_malloc_r+0xea>
 801e00e:	6823      	ldr	r3, [r4, #0]
 801e010:	4639      	mov	r1, r7
 801e012:	4630      	mov	r0, r6
 801e014:	eb04 0903 	add.w	r9, r4, r3
 801e018:	f000 fffc 	bl	801f014 <_sbrk_r>
 801e01c:	4581      	cmp	r9, r0
 801e01e:	d142      	bne.n	801e0a6 <_malloc_r+0xea>
 801e020:	6821      	ldr	r1, [r4, #0]
 801e022:	1a6d      	subs	r5, r5, r1
 801e024:	4629      	mov	r1, r5
 801e026:	4630      	mov	r0, r6
 801e028:	f7ff ffa6 	bl	801df78 <sbrk_aligned>
 801e02c:	3001      	adds	r0, #1
 801e02e:	d03a      	beq.n	801e0a6 <_malloc_r+0xea>
 801e030:	6823      	ldr	r3, [r4, #0]
 801e032:	442b      	add	r3, r5
 801e034:	6023      	str	r3, [r4, #0]
 801e036:	f8d8 3000 	ldr.w	r3, [r8]
 801e03a:	685a      	ldr	r2, [r3, #4]
 801e03c:	bb62      	cbnz	r2, 801e098 <_malloc_r+0xdc>
 801e03e:	f8c8 7000 	str.w	r7, [r8]
 801e042:	e00f      	b.n	801e064 <_malloc_r+0xa8>
 801e044:	6822      	ldr	r2, [r4, #0]
 801e046:	1b52      	subs	r2, r2, r5
 801e048:	d420      	bmi.n	801e08c <_malloc_r+0xd0>
 801e04a:	2a0b      	cmp	r2, #11
 801e04c:	d917      	bls.n	801e07e <_malloc_r+0xc2>
 801e04e:	1961      	adds	r1, r4, r5
 801e050:	42a3      	cmp	r3, r4
 801e052:	6025      	str	r5, [r4, #0]
 801e054:	bf18      	it	ne
 801e056:	6059      	strne	r1, [r3, #4]
 801e058:	6863      	ldr	r3, [r4, #4]
 801e05a:	bf08      	it	eq
 801e05c:	f8c8 1000 	streq.w	r1, [r8]
 801e060:	5162      	str	r2, [r4, r5]
 801e062:	604b      	str	r3, [r1, #4]
 801e064:	4630      	mov	r0, r6
 801e066:	f000 f82f 	bl	801e0c8 <__malloc_unlock>
 801e06a:	f104 000b 	add.w	r0, r4, #11
 801e06e:	1d23      	adds	r3, r4, #4
 801e070:	f020 0007 	bic.w	r0, r0, #7
 801e074:	1ac2      	subs	r2, r0, r3
 801e076:	bf1c      	itt	ne
 801e078:	1a1b      	subne	r3, r3, r0
 801e07a:	50a3      	strne	r3, [r4, r2]
 801e07c:	e7af      	b.n	801dfde <_malloc_r+0x22>
 801e07e:	6862      	ldr	r2, [r4, #4]
 801e080:	42a3      	cmp	r3, r4
 801e082:	bf0c      	ite	eq
 801e084:	f8c8 2000 	streq.w	r2, [r8]
 801e088:	605a      	strne	r2, [r3, #4]
 801e08a:	e7eb      	b.n	801e064 <_malloc_r+0xa8>
 801e08c:	4623      	mov	r3, r4
 801e08e:	6864      	ldr	r4, [r4, #4]
 801e090:	e7ae      	b.n	801dff0 <_malloc_r+0x34>
 801e092:	463c      	mov	r4, r7
 801e094:	687f      	ldr	r7, [r7, #4]
 801e096:	e7b6      	b.n	801e006 <_malloc_r+0x4a>
 801e098:	461a      	mov	r2, r3
 801e09a:	685b      	ldr	r3, [r3, #4]
 801e09c:	42a3      	cmp	r3, r4
 801e09e:	d1fb      	bne.n	801e098 <_malloc_r+0xdc>
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	6053      	str	r3, [r2, #4]
 801e0a4:	e7de      	b.n	801e064 <_malloc_r+0xa8>
 801e0a6:	230c      	movs	r3, #12
 801e0a8:	6033      	str	r3, [r6, #0]
 801e0aa:	4630      	mov	r0, r6
 801e0ac:	f000 f80c 	bl	801e0c8 <__malloc_unlock>
 801e0b0:	e794      	b.n	801dfdc <_malloc_r+0x20>
 801e0b2:	6005      	str	r5, [r0, #0]
 801e0b4:	e7d6      	b.n	801e064 <_malloc_r+0xa8>
 801e0b6:	bf00      	nop
 801e0b8:	20013f58 	.word	0x20013f58

0801e0bc <__malloc_lock>:
 801e0bc:	4801      	ldr	r0, [pc, #4]	@ (801e0c4 <__malloc_lock+0x8>)
 801e0be:	f000 bff6 	b.w	801f0ae <__retarget_lock_acquire_recursive>
 801e0c2:	bf00      	nop
 801e0c4:	2001409c 	.word	0x2001409c

0801e0c8 <__malloc_unlock>:
 801e0c8:	4801      	ldr	r0, [pc, #4]	@ (801e0d0 <__malloc_unlock+0x8>)
 801e0ca:	f000 bff1 	b.w	801f0b0 <__retarget_lock_release_recursive>
 801e0ce:	bf00      	nop
 801e0d0:	2001409c 	.word	0x2001409c

0801e0d4 <rand>:
 801e0d4:	4b16      	ldr	r3, [pc, #88]	@ (801e130 <rand+0x5c>)
 801e0d6:	b510      	push	{r4, lr}
 801e0d8:	681c      	ldr	r4, [r3, #0]
 801e0da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e0dc:	b9b3      	cbnz	r3, 801e10c <rand+0x38>
 801e0de:	2018      	movs	r0, #24
 801e0e0:	f7ff ff3a 	bl	801df58 <malloc>
 801e0e4:	4602      	mov	r2, r0
 801e0e6:	6320      	str	r0, [r4, #48]	@ 0x30
 801e0e8:	b920      	cbnz	r0, 801e0f4 <rand+0x20>
 801e0ea:	4b12      	ldr	r3, [pc, #72]	@ (801e134 <rand+0x60>)
 801e0ec:	4812      	ldr	r0, [pc, #72]	@ (801e138 <rand+0x64>)
 801e0ee:	2152      	movs	r1, #82	@ 0x52
 801e0f0:	f000 fff6 	bl	801f0e0 <__assert_func>
 801e0f4:	4911      	ldr	r1, [pc, #68]	@ (801e13c <rand+0x68>)
 801e0f6:	4b12      	ldr	r3, [pc, #72]	@ (801e140 <rand+0x6c>)
 801e0f8:	e9c0 1300 	strd	r1, r3, [r0]
 801e0fc:	4b11      	ldr	r3, [pc, #68]	@ (801e144 <rand+0x70>)
 801e0fe:	6083      	str	r3, [r0, #8]
 801e100:	230b      	movs	r3, #11
 801e102:	8183      	strh	r3, [r0, #12]
 801e104:	2100      	movs	r1, #0
 801e106:	2001      	movs	r0, #1
 801e108:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e10c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e10e:	480e      	ldr	r0, [pc, #56]	@ (801e148 <rand+0x74>)
 801e110:	690b      	ldr	r3, [r1, #16]
 801e112:	694c      	ldr	r4, [r1, #20]
 801e114:	4a0d      	ldr	r2, [pc, #52]	@ (801e14c <rand+0x78>)
 801e116:	4358      	muls	r0, r3
 801e118:	fb02 0004 	mla	r0, r2, r4, r0
 801e11c:	fba3 3202 	umull	r3, r2, r3, r2
 801e120:	3301      	adds	r3, #1
 801e122:	eb40 0002 	adc.w	r0, r0, r2
 801e126:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e12a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801e12e:	bd10      	pop	{r4, pc}
 801e130:	200000d8 	.word	0x200000d8
 801e134:	080712b4 	.word	0x080712b4
 801e138:	080712cb 	.word	0x080712cb
 801e13c:	abcd330e 	.word	0xabcd330e
 801e140:	e66d1234 	.word	0xe66d1234
 801e144:	0005deec 	.word	0x0005deec
 801e148:	5851f42d 	.word	0x5851f42d
 801e14c:	4c957f2d 	.word	0x4c957f2d

0801e150 <_strtoul_l.constprop.0>:
 801e150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e154:	4e34      	ldr	r6, [pc, #208]	@ (801e228 <_strtoul_l.constprop.0+0xd8>)
 801e156:	4686      	mov	lr, r0
 801e158:	460d      	mov	r5, r1
 801e15a:	4628      	mov	r0, r5
 801e15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e160:	5d37      	ldrb	r7, [r6, r4]
 801e162:	f017 0708 	ands.w	r7, r7, #8
 801e166:	d1f8      	bne.n	801e15a <_strtoul_l.constprop.0+0xa>
 801e168:	2c2d      	cmp	r4, #45	@ 0x2d
 801e16a:	d12f      	bne.n	801e1cc <_strtoul_l.constprop.0+0x7c>
 801e16c:	782c      	ldrb	r4, [r5, #0]
 801e16e:	2701      	movs	r7, #1
 801e170:	1c85      	adds	r5, r0, #2
 801e172:	f033 0010 	bics.w	r0, r3, #16
 801e176:	d109      	bne.n	801e18c <_strtoul_l.constprop.0+0x3c>
 801e178:	2c30      	cmp	r4, #48	@ 0x30
 801e17a:	d12c      	bne.n	801e1d6 <_strtoul_l.constprop.0+0x86>
 801e17c:	7828      	ldrb	r0, [r5, #0]
 801e17e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e182:	2858      	cmp	r0, #88	@ 0x58
 801e184:	d127      	bne.n	801e1d6 <_strtoul_l.constprop.0+0x86>
 801e186:	786c      	ldrb	r4, [r5, #1]
 801e188:	2310      	movs	r3, #16
 801e18a:	3502      	adds	r5, #2
 801e18c:	f04f 38ff 	mov.w	r8, #4294967295
 801e190:	2600      	movs	r6, #0
 801e192:	fbb8 f8f3 	udiv	r8, r8, r3
 801e196:	fb03 f908 	mul.w	r9, r3, r8
 801e19a:	ea6f 0909 	mvn.w	r9, r9
 801e19e:	4630      	mov	r0, r6
 801e1a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e1a4:	f1bc 0f09 	cmp.w	ip, #9
 801e1a8:	d81c      	bhi.n	801e1e4 <_strtoul_l.constprop.0+0x94>
 801e1aa:	4664      	mov	r4, ip
 801e1ac:	42a3      	cmp	r3, r4
 801e1ae:	dd2a      	ble.n	801e206 <_strtoul_l.constprop.0+0xb6>
 801e1b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 801e1b4:	d007      	beq.n	801e1c6 <_strtoul_l.constprop.0+0x76>
 801e1b6:	4580      	cmp	r8, r0
 801e1b8:	d322      	bcc.n	801e200 <_strtoul_l.constprop.0+0xb0>
 801e1ba:	d101      	bne.n	801e1c0 <_strtoul_l.constprop.0+0x70>
 801e1bc:	45a1      	cmp	r9, r4
 801e1be:	db1f      	blt.n	801e200 <_strtoul_l.constprop.0+0xb0>
 801e1c0:	fb00 4003 	mla	r0, r0, r3, r4
 801e1c4:	2601      	movs	r6, #1
 801e1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e1ca:	e7e9      	b.n	801e1a0 <_strtoul_l.constprop.0+0x50>
 801e1cc:	2c2b      	cmp	r4, #43	@ 0x2b
 801e1ce:	bf04      	itt	eq
 801e1d0:	782c      	ldrbeq	r4, [r5, #0]
 801e1d2:	1c85      	addeq	r5, r0, #2
 801e1d4:	e7cd      	b.n	801e172 <_strtoul_l.constprop.0+0x22>
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d1d8      	bne.n	801e18c <_strtoul_l.constprop.0+0x3c>
 801e1da:	2c30      	cmp	r4, #48	@ 0x30
 801e1dc:	bf0c      	ite	eq
 801e1de:	2308      	moveq	r3, #8
 801e1e0:	230a      	movne	r3, #10
 801e1e2:	e7d3      	b.n	801e18c <_strtoul_l.constprop.0+0x3c>
 801e1e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e1e8:	f1bc 0f19 	cmp.w	ip, #25
 801e1ec:	d801      	bhi.n	801e1f2 <_strtoul_l.constprop.0+0xa2>
 801e1ee:	3c37      	subs	r4, #55	@ 0x37
 801e1f0:	e7dc      	b.n	801e1ac <_strtoul_l.constprop.0+0x5c>
 801e1f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e1f6:	f1bc 0f19 	cmp.w	ip, #25
 801e1fa:	d804      	bhi.n	801e206 <_strtoul_l.constprop.0+0xb6>
 801e1fc:	3c57      	subs	r4, #87	@ 0x57
 801e1fe:	e7d5      	b.n	801e1ac <_strtoul_l.constprop.0+0x5c>
 801e200:	f04f 36ff 	mov.w	r6, #4294967295
 801e204:	e7df      	b.n	801e1c6 <_strtoul_l.constprop.0+0x76>
 801e206:	1c73      	adds	r3, r6, #1
 801e208:	d106      	bne.n	801e218 <_strtoul_l.constprop.0+0xc8>
 801e20a:	2322      	movs	r3, #34	@ 0x22
 801e20c:	f8ce 3000 	str.w	r3, [lr]
 801e210:	4630      	mov	r0, r6
 801e212:	b932      	cbnz	r2, 801e222 <_strtoul_l.constprop.0+0xd2>
 801e214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e218:	b107      	cbz	r7, 801e21c <_strtoul_l.constprop.0+0xcc>
 801e21a:	4240      	negs	r0, r0
 801e21c:	2a00      	cmp	r2, #0
 801e21e:	d0f9      	beq.n	801e214 <_strtoul_l.constprop.0+0xc4>
 801e220:	b106      	cbz	r6, 801e224 <_strtoul_l.constprop.0+0xd4>
 801e222:	1e69      	subs	r1, r5, #1
 801e224:	6011      	str	r1, [r2, #0]
 801e226:	e7f5      	b.n	801e214 <_strtoul_l.constprop.0+0xc4>
 801e228:	08071324 	.word	0x08071324

0801e22c <strtoul>:
 801e22c:	4613      	mov	r3, r2
 801e22e:	460a      	mov	r2, r1
 801e230:	4601      	mov	r1, r0
 801e232:	4802      	ldr	r0, [pc, #8]	@ (801e23c <strtoul+0x10>)
 801e234:	6800      	ldr	r0, [r0, #0]
 801e236:	f7ff bf8b 	b.w	801e150 <_strtoul_l.constprop.0>
 801e23a:	bf00      	nop
 801e23c:	200000d8 	.word	0x200000d8

0801e240 <__cvt>:
 801e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e244:	ec57 6b10 	vmov	r6, r7, d0
 801e248:	2f00      	cmp	r7, #0
 801e24a:	460c      	mov	r4, r1
 801e24c:	4619      	mov	r1, r3
 801e24e:	463b      	mov	r3, r7
 801e250:	bfbb      	ittet	lt
 801e252:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801e256:	461f      	movlt	r7, r3
 801e258:	2300      	movge	r3, #0
 801e25a:	232d      	movlt	r3, #45	@ 0x2d
 801e25c:	700b      	strb	r3, [r1, #0]
 801e25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e260:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801e264:	4691      	mov	r9, r2
 801e266:	f023 0820 	bic.w	r8, r3, #32
 801e26a:	bfbc      	itt	lt
 801e26c:	4632      	movlt	r2, r6
 801e26e:	4616      	movlt	r6, r2
 801e270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801e274:	d005      	beq.n	801e282 <__cvt+0x42>
 801e276:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801e27a:	d100      	bne.n	801e27e <__cvt+0x3e>
 801e27c:	3401      	adds	r4, #1
 801e27e:	2102      	movs	r1, #2
 801e280:	e000      	b.n	801e284 <__cvt+0x44>
 801e282:	2103      	movs	r1, #3
 801e284:	ab03      	add	r3, sp, #12
 801e286:	9301      	str	r3, [sp, #4]
 801e288:	ab02      	add	r3, sp, #8
 801e28a:	9300      	str	r3, [sp, #0]
 801e28c:	ec47 6b10 	vmov	d0, r6, r7
 801e290:	4653      	mov	r3, sl
 801e292:	4622      	mov	r2, r4
 801e294:	f000 ffcc 	bl	801f230 <_dtoa_r>
 801e298:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801e29c:	4605      	mov	r5, r0
 801e29e:	d119      	bne.n	801e2d4 <__cvt+0x94>
 801e2a0:	f019 0f01 	tst.w	r9, #1
 801e2a4:	d00e      	beq.n	801e2c4 <__cvt+0x84>
 801e2a6:	eb00 0904 	add.w	r9, r0, r4
 801e2aa:	2200      	movs	r2, #0
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	4630      	mov	r0, r6
 801e2b0:	4639      	mov	r1, r7
 801e2b2:	f7e2 fc21 	bl	8000af8 <__aeabi_dcmpeq>
 801e2b6:	b108      	cbz	r0, 801e2bc <__cvt+0x7c>
 801e2b8:	f8cd 900c 	str.w	r9, [sp, #12]
 801e2bc:	2230      	movs	r2, #48	@ 0x30
 801e2be:	9b03      	ldr	r3, [sp, #12]
 801e2c0:	454b      	cmp	r3, r9
 801e2c2:	d31e      	bcc.n	801e302 <__cvt+0xc2>
 801e2c4:	9b03      	ldr	r3, [sp, #12]
 801e2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e2c8:	1b5b      	subs	r3, r3, r5
 801e2ca:	4628      	mov	r0, r5
 801e2cc:	6013      	str	r3, [r2, #0]
 801e2ce:	b004      	add	sp, #16
 801e2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801e2d8:	eb00 0904 	add.w	r9, r0, r4
 801e2dc:	d1e5      	bne.n	801e2aa <__cvt+0x6a>
 801e2de:	7803      	ldrb	r3, [r0, #0]
 801e2e0:	2b30      	cmp	r3, #48	@ 0x30
 801e2e2:	d10a      	bne.n	801e2fa <__cvt+0xba>
 801e2e4:	2200      	movs	r2, #0
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	4630      	mov	r0, r6
 801e2ea:	4639      	mov	r1, r7
 801e2ec:	f7e2 fc04 	bl	8000af8 <__aeabi_dcmpeq>
 801e2f0:	b918      	cbnz	r0, 801e2fa <__cvt+0xba>
 801e2f2:	f1c4 0401 	rsb	r4, r4, #1
 801e2f6:	f8ca 4000 	str.w	r4, [sl]
 801e2fa:	f8da 3000 	ldr.w	r3, [sl]
 801e2fe:	4499      	add	r9, r3
 801e300:	e7d3      	b.n	801e2aa <__cvt+0x6a>
 801e302:	1c59      	adds	r1, r3, #1
 801e304:	9103      	str	r1, [sp, #12]
 801e306:	701a      	strb	r2, [r3, #0]
 801e308:	e7d9      	b.n	801e2be <__cvt+0x7e>

0801e30a <__exponent>:
 801e30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e30c:	2900      	cmp	r1, #0
 801e30e:	bfba      	itte	lt
 801e310:	4249      	neglt	r1, r1
 801e312:	232d      	movlt	r3, #45	@ 0x2d
 801e314:	232b      	movge	r3, #43	@ 0x2b
 801e316:	2909      	cmp	r1, #9
 801e318:	7002      	strb	r2, [r0, #0]
 801e31a:	7043      	strb	r3, [r0, #1]
 801e31c:	dd29      	ble.n	801e372 <__exponent+0x68>
 801e31e:	f10d 0307 	add.w	r3, sp, #7
 801e322:	461d      	mov	r5, r3
 801e324:	270a      	movs	r7, #10
 801e326:	461a      	mov	r2, r3
 801e328:	fbb1 f6f7 	udiv	r6, r1, r7
 801e32c:	fb07 1416 	mls	r4, r7, r6, r1
 801e330:	3430      	adds	r4, #48	@ 0x30
 801e332:	f802 4c01 	strb.w	r4, [r2, #-1]
 801e336:	460c      	mov	r4, r1
 801e338:	2c63      	cmp	r4, #99	@ 0x63
 801e33a:	f103 33ff 	add.w	r3, r3, #4294967295
 801e33e:	4631      	mov	r1, r6
 801e340:	dcf1      	bgt.n	801e326 <__exponent+0x1c>
 801e342:	3130      	adds	r1, #48	@ 0x30
 801e344:	1e94      	subs	r4, r2, #2
 801e346:	f803 1c01 	strb.w	r1, [r3, #-1]
 801e34a:	1c41      	adds	r1, r0, #1
 801e34c:	4623      	mov	r3, r4
 801e34e:	42ab      	cmp	r3, r5
 801e350:	d30a      	bcc.n	801e368 <__exponent+0x5e>
 801e352:	f10d 0309 	add.w	r3, sp, #9
 801e356:	1a9b      	subs	r3, r3, r2
 801e358:	42ac      	cmp	r4, r5
 801e35a:	bf88      	it	hi
 801e35c:	2300      	movhi	r3, #0
 801e35e:	3302      	adds	r3, #2
 801e360:	4403      	add	r3, r0
 801e362:	1a18      	subs	r0, r3, r0
 801e364:	b003      	add	sp, #12
 801e366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e368:	f813 6b01 	ldrb.w	r6, [r3], #1
 801e36c:	f801 6f01 	strb.w	r6, [r1, #1]!
 801e370:	e7ed      	b.n	801e34e <__exponent+0x44>
 801e372:	2330      	movs	r3, #48	@ 0x30
 801e374:	3130      	adds	r1, #48	@ 0x30
 801e376:	7083      	strb	r3, [r0, #2]
 801e378:	70c1      	strb	r1, [r0, #3]
 801e37a:	1d03      	adds	r3, r0, #4
 801e37c:	e7f1      	b.n	801e362 <__exponent+0x58>
	...

0801e380 <_printf_float>:
 801e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e384:	b08d      	sub	sp, #52	@ 0x34
 801e386:	460c      	mov	r4, r1
 801e388:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e38c:	4616      	mov	r6, r2
 801e38e:	461f      	mov	r7, r3
 801e390:	4605      	mov	r5, r0
 801e392:	f000 fe07 	bl	801efa4 <_localeconv_r>
 801e396:	6803      	ldr	r3, [r0, #0]
 801e398:	9304      	str	r3, [sp, #16]
 801e39a:	4618      	mov	r0, r3
 801e39c:	f7e1 ff80 	bl	80002a0 <strlen>
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e3a4:	f8d8 3000 	ldr.w	r3, [r8]
 801e3a8:	9005      	str	r0, [sp, #20]
 801e3aa:	3307      	adds	r3, #7
 801e3ac:	f023 0307 	bic.w	r3, r3, #7
 801e3b0:	f103 0208 	add.w	r2, r3, #8
 801e3b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801e3b8:	f8d4 b000 	ldr.w	fp, [r4]
 801e3bc:	f8c8 2000 	str.w	r2, [r8]
 801e3c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e3c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801e3c8:	9307      	str	r3, [sp, #28]
 801e3ca:	f8cd 8018 	str.w	r8, [sp, #24]
 801e3ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801e3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e3d6:	4b9c      	ldr	r3, [pc, #624]	@ (801e648 <_printf_float+0x2c8>)
 801e3d8:	f04f 32ff 	mov.w	r2, #4294967295
 801e3dc:	f7e2 fbbe 	bl	8000b5c <__aeabi_dcmpun>
 801e3e0:	bb70      	cbnz	r0, 801e440 <_printf_float+0xc0>
 801e3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e3e6:	4b98      	ldr	r3, [pc, #608]	@ (801e648 <_printf_float+0x2c8>)
 801e3e8:	f04f 32ff 	mov.w	r2, #4294967295
 801e3ec:	f7e2 fb98 	bl	8000b20 <__aeabi_dcmple>
 801e3f0:	bb30      	cbnz	r0, 801e440 <_printf_float+0xc0>
 801e3f2:	2200      	movs	r2, #0
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	4640      	mov	r0, r8
 801e3f8:	4649      	mov	r1, r9
 801e3fa:	f7e2 fb87 	bl	8000b0c <__aeabi_dcmplt>
 801e3fe:	b110      	cbz	r0, 801e406 <_printf_float+0x86>
 801e400:	232d      	movs	r3, #45	@ 0x2d
 801e402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e406:	4a91      	ldr	r2, [pc, #580]	@ (801e64c <_printf_float+0x2cc>)
 801e408:	4b91      	ldr	r3, [pc, #580]	@ (801e650 <_printf_float+0x2d0>)
 801e40a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801e40e:	bf94      	ite	ls
 801e410:	4690      	movls	r8, r2
 801e412:	4698      	movhi	r8, r3
 801e414:	2303      	movs	r3, #3
 801e416:	6123      	str	r3, [r4, #16]
 801e418:	f02b 0304 	bic.w	r3, fp, #4
 801e41c:	6023      	str	r3, [r4, #0]
 801e41e:	f04f 0900 	mov.w	r9, #0
 801e422:	9700      	str	r7, [sp, #0]
 801e424:	4633      	mov	r3, r6
 801e426:	aa0b      	add	r2, sp, #44	@ 0x2c
 801e428:	4621      	mov	r1, r4
 801e42a:	4628      	mov	r0, r5
 801e42c:	f000 f9d2 	bl	801e7d4 <_printf_common>
 801e430:	3001      	adds	r0, #1
 801e432:	f040 808d 	bne.w	801e550 <_printf_float+0x1d0>
 801e436:	f04f 30ff 	mov.w	r0, #4294967295
 801e43a:	b00d      	add	sp, #52	@ 0x34
 801e43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e440:	4642      	mov	r2, r8
 801e442:	464b      	mov	r3, r9
 801e444:	4640      	mov	r0, r8
 801e446:	4649      	mov	r1, r9
 801e448:	f7e2 fb88 	bl	8000b5c <__aeabi_dcmpun>
 801e44c:	b140      	cbz	r0, 801e460 <_printf_float+0xe0>
 801e44e:	464b      	mov	r3, r9
 801e450:	2b00      	cmp	r3, #0
 801e452:	bfbc      	itt	lt
 801e454:	232d      	movlt	r3, #45	@ 0x2d
 801e456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801e45a:	4a7e      	ldr	r2, [pc, #504]	@ (801e654 <_printf_float+0x2d4>)
 801e45c:	4b7e      	ldr	r3, [pc, #504]	@ (801e658 <_printf_float+0x2d8>)
 801e45e:	e7d4      	b.n	801e40a <_printf_float+0x8a>
 801e460:	6863      	ldr	r3, [r4, #4]
 801e462:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801e466:	9206      	str	r2, [sp, #24]
 801e468:	1c5a      	adds	r2, r3, #1
 801e46a:	d13b      	bne.n	801e4e4 <_printf_float+0x164>
 801e46c:	2306      	movs	r3, #6
 801e46e:	6063      	str	r3, [r4, #4]
 801e470:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801e474:	2300      	movs	r3, #0
 801e476:	6022      	str	r2, [r4, #0]
 801e478:	9303      	str	r3, [sp, #12]
 801e47a:	ab0a      	add	r3, sp, #40	@ 0x28
 801e47c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801e480:	ab09      	add	r3, sp, #36	@ 0x24
 801e482:	9300      	str	r3, [sp, #0]
 801e484:	6861      	ldr	r1, [r4, #4]
 801e486:	ec49 8b10 	vmov	d0, r8, r9
 801e48a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801e48e:	4628      	mov	r0, r5
 801e490:	f7ff fed6 	bl	801e240 <__cvt>
 801e494:	9b06      	ldr	r3, [sp, #24]
 801e496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e498:	2b47      	cmp	r3, #71	@ 0x47
 801e49a:	4680      	mov	r8, r0
 801e49c:	d129      	bne.n	801e4f2 <_printf_float+0x172>
 801e49e:	1cc8      	adds	r0, r1, #3
 801e4a0:	db02      	blt.n	801e4a8 <_printf_float+0x128>
 801e4a2:	6863      	ldr	r3, [r4, #4]
 801e4a4:	4299      	cmp	r1, r3
 801e4a6:	dd41      	ble.n	801e52c <_printf_float+0x1ac>
 801e4a8:	f1aa 0a02 	sub.w	sl, sl, #2
 801e4ac:	fa5f fa8a 	uxtb.w	sl, sl
 801e4b0:	3901      	subs	r1, #1
 801e4b2:	4652      	mov	r2, sl
 801e4b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801e4b8:	9109      	str	r1, [sp, #36]	@ 0x24
 801e4ba:	f7ff ff26 	bl	801e30a <__exponent>
 801e4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4c0:	1813      	adds	r3, r2, r0
 801e4c2:	2a01      	cmp	r2, #1
 801e4c4:	4681      	mov	r9, r0
 801e4c6:	6123      	str	r3, [r4, #16]
 801e4c8:	dc02      	bgt.n	801e4d0 <_printf_float+0x150>
 801e4ca:	6822      	ldr	r2, [r4, #0]
 801e4cc:	07d2      	lsls	r2, r2, #31
 801e4ce:	d501      	bpl.n	801e4d4 <_printf_float+0x154>
 801e4d0:	3301      	adds	r3, #1
 801e4d2:	6123      	str	r3, [r4, #16]
 801e4d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d0a2      	beq.n	801e422 <_printf_float+0xa2>
 801e4dc:	232d      	movs	r3, #45	@ 0x2d
 801e4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e4e2:	e79e      	b.n	801e422 <_printf_float+0xa2>
 801e4e4:	9a06      	ldr	r2, [sp, #24]
 801e4e6:	2a47      	cmp	r2, #71	@ 0x47
 801e4e8:	d1c2      	bne.n	801e470 <_printf_float+0xf0>
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d1c0      	bne.n	801e470 <_printf_float+0xf0>
 801e4ee:	2301      	movs	r3, #1
 801e4f0:	e7bd      	b.n	801e46e <_printf_float+0xee>
 801e4f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801e4f6:	d9db      	bls.n	801e4b0 <_printf_float+0x130>
 801e4f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801e4fc:	d118      	bne.n	801e530 <_printf_float+0x1b0>
 801e4fe:	2900      	cmp	r1, #0
 801e500:	6863      	ldr	r3, [r4, #4]
 801e502:	dd0b      	ble.n	801e51c <_printf_float+0x19c>
 801e504:	6121      	str	r1, [r4, #16]
 801e506:	b913      	cbnz	r3, 801e50e <_printf_float+0x18e>
 801e508:	6822      	ldr	r2, [r4, #0]
 801e50a:	07d0      	lsls	r0, r2, #31
 801e50c:	d502      	bpl.n	801e514 <_printf_float+0x194>
 801e50e:	3301      	adds	r3, #1
 801e510:	440b      	add	r3, r1
 801e512:	6123      	str	r3, [r4, #16]
 801e514:	65a1      	str	r1, [r4, #88]	@ 0x58
 801e516:	f04f 0900 	mov.w	r9, #0
 801e51a:	e7db      	b.n	801e4d4 <_printf_float+0x154>
 801e51c:	b913      	cbnz	r3, 801e524 <_printf_float+0x1a4>
 801e51e:	6822      	ldr	r2, [r4, #0]
 801e520:	07d2      	lsls	r2, r2, #31
 801e522:	d501      	bpl.n	801e528 <_printf_float+0x1a8>
 801e524:	3302      	adds	r3, #2
 801e526:	e7f4      	b.n	801e512 <_printf_float+0x192>
 801e528:	2301      	movs	r3, #1
 801e52a:	e7f2      	b.n	801e512 <_printf_float+0x192>
 801e52c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801e530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e532:	4299      	cmp	r1, r3
 801e534:	db05      	blt.n	801e542 <_printf_float+0x1c2>
 801e536:	6823      	ldr	r3, [r4, #0]
 801e538:	6121      	str	r1, [r4, #16]
 801e53a:	07d8      	lsls	r0, r3, #31
 801e53c:	d5ea      	bpl.n	801e514 <_printf_float+0x194>
 801e53e:	1c4b      	adds	r3, r1, #1
 801e540:	e7e7      	b.n	801e512 <_printf_float+0x192>
 801e542:	2900      	cmp	r1, #0
 801e544:	bfd4      	ite	le
 801e546:	f1c1 0202 	rsble	r2, r1, #2
 801e54a:	2201      	movgt	r2, #1
 801e54c:	4413      	add	r3, r2
 801e54e:	e7e0      	b.n	801e512 <_printf_float+0x192>
 801e550:	6823      	ldr	r3, [r4, #0]
 801e552:	055a      	lsls	r2, r3, #21
 801e554:	d407      	bmi.n	801e566 <_printf_float+0x1e6>
 801e556:	6923      	ldr	r3, [r4, #16]
 801e558:	4642      	mov	r2, r8
 801e55a:	4631      	mov	r1, r6
 801e55c:	4628      	mov	r0, r5
 801e55e:	47b8      	blx	r7
 801e560:	3001      	adds	r0, #1
 801e562:	d12b      	bne.n	801e5bc <_printf_float+0x23c>
 801e564:	e767      	b.n	801e436 <_printf_float+0xb6>
 801e566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801e56a:	f240 80dd 	bls.w	801e728 <_printf_float+0x3a8>
 801e56e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e572:	2200      	movs	r2, #0
 801e574:	2300      	movs	r3, #0
 801e576:	f7e2 fabf 	bl	8000af8 <__aeabi_dcmpeq>
 801e57a:	2800      	cmp	r0, #0
 801e57c:	d033      	beq.n	801e5e6 <_printf_float+0x266>
 801e57e:	4a37      	ldr	r2, [pc, #220]	@ (801e65c <_printf_float+0x2dc>)
 801e580:	2301      	movs	r3, #1
 801e582:	4631      	mov	r1, r6
 801e584:	4628      	mov	r0, r5
 801e586:	47b8      	blx	r7
 801e588:	3001      	adds	r0, #1
 801e58a:	f43f af54 	beq.w	801e436 <_printf_float+0xb6>
 801e58e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801e592:	4543      	cmp	r3, r8
 801e594:	db02      	blt.n	801e59c <_printf_float+0x21c>
 801e596:	6823      	ldr	r3, [r4, #0]
 801e598:	07d8      	lsls	r0, r3, #31
 801e59a:	d50f      	bpl.n	801e5bc <_printf_float+0x23c>
 801e59c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e5a0:	4631      	mov	r1, r6
 801e5a2:	4628      	mov	r0, r5
 801e5a4:	47b8      	blx	r7
 801e5a6:	3001      	adds	r0, #1
 801e5a8:	f43f af45 	beq.w	801e436 <_printf_float+0xb6>
 801e5ac:	f04f 0900 	mov.w	r9, #0
 801e5b0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5b4:	f104 0a1a 	add.w	sl, r4, #26
 801e5b8:	45c8      	cmp	r8, r9
 801e5ba:	dc09      	bgt.n	801e5d0 <_printf_float+0x250>
 801e5bc:	6823      	ldr	r3, [r4, #0]
 801e5be:	079b      	lsls	r3, r3, #30
 801e5c0:	f100 8103 	bmi.w	801e7ca <_printf_float+0x44a>
 801e5c4:	68e0      	ldr	r0, [r4, #12]
 801e5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e5c8:	4298      	cmp	r0, r3
 801e5ca:	bfb8      	it	lt
 801e5cc:	4618      	movlt	r0, r3
 801e5ce:	e734      	b.n	801e43a <_printf_float+0xba>
 801e5d0:	2301      	movs	r3, #1
 801e5d2:	4652      	mov	r2, sl
 801e5d4:	4631      	mov	r1, r6
 801e5d6:	4628      	mov	r0, r5
 801e5d8:	47b8      	blx	r7
 801e5da:	3001      	adds	r0, #1
 801e5dc:	f43f af2b 	beq.w	801e436 <_printf_float+0xb6>
 801e5e0:	f109 0901 	add.w	r9, r9, #1
 801e5e4:	e7e8      	b.n	801e5b8 <_printf_float+0x238>
 801e5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	dc39      	bgt.n	801e660 <_printf_float+0x2e0>
 801e5ec:	4a1b      	ldr	r2, [pc, #108]	@ (801e65c <_printf_float+0x2dc>)
 801e5ee:	2301      	movs	r3, #1
 801e5f0:	4631      	mov	r1, r6
 801e5f2:	4628      	mov	r0, r5
 801e5f4:	47b8      	blx	r7
 801e5f6:	3001      	adds	r0, #1
 801e5f8:	f43f af1d 	beq.w	801e436 <_printf_float+0xb6>
 801e5fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801e600:	ea59 0303 	orrs.w	r3, r9, r3
 801e604:	d102      	bne.n	801e60c <_printf_float+0x28c>
 801e606:	6823      	ldr	r3, [r4, #0]
 801e608:	07d9      	lsls	r1, r3, #31
 801e60a:	d5d7      	bpl.n	801e5bc <_printf_float+0x23c>
 801e60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e610:	4631      	mov	r1, r6
 801e612:	4628      	mov	r0, r5
 801e614:	47b8      	blx	r7
 801e616:	3001      	adds	r0, #1
 801e618:	f43f af0d 	beq.w	801e436 <_printf_float+0xb6>
 801e61c:	f04f 0a00 	mov.w	sl, #0
 801e620:	f104 0b1a 	add.w	fp, r4, #26
 801e624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e626:	425b      	negs	r3, r3
 801e628:	4553      	cmp	r3, sl
 801e62a:	dc01      	bgt.n	801e630 <_printf_float+0x2b0>
 801e62c:	464b      	mov	r3, r9
 801e62e:	e793      	b.n	801e558 <_printf_float+0x1d8>
 801e630:	2301      	movs	r3, #1
 801e632:	465a      	mov	r2, fp
 801e634:	4631      	mov	r1, r6
 801e636:	4628      	mov	r0, r5
 801e638:	47b8      	blx	r7
 801e63a:	3001      	adds	r0, #1
 801e63c:	f43f aefb 	beq.w	801e436 <_printf_float+0xb6>
 801e640:	f10a 0a01 	add.w	sl, sl, #1
 801e644:	e7ee      	b.n	801e624 <_printf_float+0x2a4>
 801e646:	bf00      	nop
 801e648:	7fefffff 	.word	0x7fefffff
 801e64c:	08071424 	.word	0x08071424
 801e650:	08071428 	.word	0x08071428
 801e654:	0807142c 	.word	0x0807142c
 801e658:	08071430 	.word	0x08071430
 801e65c:	08071434 	.word	0x08071434
 801e660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e662:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e666:	4553      	cmp	r3, sl
 801e668:	bfa8      	it	ge
 801e66a:	4653      	movge	r3, sl
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	4699      	mov	r9, r3
 801e670:	dc36      	bgt.n	801e6e0 <_printf_float+0x360>
 801e672:	f04f 0b00 	mov.w	fp, #0
 801e676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e67a:	f104 021a 	add.w	r2, r4, #26
 801e67e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e680:	9306      	str	r3, [sp, #24]
 801e682:	eba3 0309 	sub.w	r3, r3, r9
 801e686:	455b      	cmp	r3, fp
 801e688:	dc31      	bgt.n	801e6ee <_printf_float+0x36e>
 801e68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e68c:	459a      	cmp	sl, r3
 801e68e:	dc3a      	bgt.n	801e706 <_printf_float+0x386>
 801e690:	6823      	ldr	r3, [r4, #0]
 801e692:	07da      	lsls	r2, r3, #31
 801e694:	d437      	bmi.n	801e706 <_printf_float+0x386>
 801e696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e698:	ebaa 0903 	sub.w	r9, sl, r3
 801e69c:	9b06      	ldr	r3, [sp, #24]
 801e69e:	ebaa 0303 	sub.w	r3, sl, r3
 801e6a2:	4599      	cmp	r9, r3
 801e6a4:	bfa8      	it	ge
 801e6a6:	4699      	movge	r9, r3
 801e6a8:	f1b9 0f00 	cmp.w	r9, #0
 801e6ac:	dc33      	bgt.n	801e716 <_printf_float+0x396>
 801e6ae:	f04f 0800 	mov.w	r8, #0
 801e6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e6b6:	f104 0b1a 	add.w	fp, r4, #26
 801e6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6bc:	ebaa 0303 	sub.w	r3, sl, r3
 801e6c0:	eba3 0309 	sub.w	r3, r3, r9
 801e6c4:	4543      	cmp	r3, r8
 801e6c6:	f77f af79 	ble.w	801e5bc <_printf_float+0x23c>
 801e6ca:	2301      	movs	r3, #1
 801e6cc:	465a      	mov	r2, fp
 801e6ce:	4631      	mov	r1, r6
 801e6d0:	4628      	mov	r0, r5
 801e6d2:	47b8      	blx	r7
 801e6d4:	3001      	adds	r0, #1
 801e6d6:	f43f aeae 	beq.w	801e436 <_printf_float+0xb6>
 801e6da:	f108 0801 	add.w	r8, r8, #1
 801e6de:	e7ec      	b.n	801e6ba <_printf_float+0x33a>
 801e6e0:	4642      	mov	r2, r8
 801e6e2:	4631      	mov	r1, r6
 801e6e4:	4628      	mov	r0, r5
 801e6e6:	47b8      	blx	r7
 801e6e8:	3001      	adds	r0, #1
 801e6ea:	d1c2      	bne.n	801e672 <_printf_float+0x2f2>
 801e6ec:	e6a3      	b.n	801e436 <_printf_float+0xb6>
 801e6ee:	2301      	movs	r3, #1
 801e6f0:	4631      	mov	r1, r6
 801e6f2:	4628      	mov	r0, r5
 801e6f4:	9206      	str	r2, [sp, #24]
 801e6f6:	47b8      	blx	r7
 801e6f8:	3001      	adds	r0, #1
 801e6fa:	f43f ae9c 	beq.w	801e436 <_printf_float+0xb6>
 801e6fe:	9a06      	ldr	r2, [sp, #24]
 801e700:	f10b 0b01 	add.w	fp, fp, #1
 801e704:	e7bb      	b.n	801e67e <_printf_float+0x2fe>
 801e706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e70a:	4631      	mov	r1, r6
 801e70c:	4628      	mov	r0, r5
 801e70e:	47b8      	blx	r7
 801e710:	3001      	adds	r0, #1
 801e712:	d1c0      	bne.n	801e696 <_printf_float+0x316>
 801e714:	e68f      	b.n	801e436 <_printf_float+0xb6>
 801e716:	9a06      	ldr	r2, [sp, #24]
 801e718:	464b      	mov	r3, r9
 801e71a:	4442      	add	r2, r8
 801e71c:	4631      	mov	r1, r6
 801e71e:	4628      	mov	r0, r5
 801e720:	47b8      	blx	r7
 801e722:	3001      	adds	r0, #1
 801e724:	d1c3      	bne.n	801e6ae <_printf_float+0x32e>
 801e726:	e686      	b.n	801e436 <_printf_float+0xb6>
 801e728:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e72c:	f1ba 0f01 	cmp.w	sl, #1
 801e730:	dc01      	bgt.n	801e736 <_printf_float+0x3b6>
 801e732:	07db      	lsls	r3, r3, #31
 801e734:	d536      	bpl.n	801e7a4 <_printf_float+0x424>
 801e736:	2301      	movs	r3, #1
 801e738:	4642      	mov	r2, r8
 801e73a:	4631      	mov	r1, r6
 801e73c:	4628      	mov	r0, r5
 801e73e:	47b8      	blx	r7
 801e740:	3001      	adds	r0, #1
 801e742:	f43f ae78 	beq.w	801e436 <_printf_float+0xb6>
 801e746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e74a:	4631      	mov	r1, r6
 801e74c:	4628      	mov	r0, r5
 801e74e:	47b8      	blx	r7
 801e750:	3001      	adds	r0, #1
 801e752:	f43f ae70 	beq.w	801e436 <_printf_float+0xb6>
 801e756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e75a:	2200      	movs	r2, #0
 801e75c:	2300      	movs	r3, #0
 801e75e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e762:	f7e2 f9c9 	bl	8000af8 <__aeabi_dcmpeq>
 801e766:	b9c0      	cbnz	r0, 801e79a <_printf_float+0x41a>
 801e768:	4653      	mov	r3, sl
 801e76a:	f108 0201 	add.w	r2, r8, #1
 801e76e:	4631      	mov	r1, r6
 801e770:	4628      	mov	r0, r5
 801e772:	47b8      	blx	r7
 801e774:	3001      	adds	r0, #1
 801e776:	d10c      	bne.n	801e792 <_printf_float+0x412>
 801e778:	e65d      	b.n	801e436 <_printf_float+0xb6>
 801e77a:	2301      	movs	r3, #1
 801e77c:	465a      	mov	r2, fp
 801e77e:	4631      	mov	r1, r6
 801e780:	4628      	mov	r0, r5
 801e782:	47b8      	blx	r7
 801e784:	3001      	adds	r0, #1
 801e786:	f43f ae56 	beq.w	801e436 <_printf_float+0xb6>
 801e78a:	f108 0801 	add.w	r8, r8, #1
 801e78e:	45d0      	cmp	r8, sl
 801e790:	dbf3      	blt.n	801e77a <_printf_float+0x3fa>
 801e792:	464b      	mov	r3, r9
 801e794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e798:	e6df      	b.n	801e55a <_printf_float+0x1da>
 801e79a:	f04f 0800 	mov.w	r8, #0
 801e79e:	f104 0b1a 	add.w	fp, r4, #26
 801e7a2:	e7f4      	b.n	801e78e <_printf_float+0x40e>
 801e7a4:	2301      	movs	r3, #1
 801e7a6:	4642      	mov	r2, r8
 801e7a8:	e7e1      	b.n	801e76e <_printf_float+0x3ee>
 801e7aa:	2301      	movs	r3, #1
 801e7ac:	464a      	mov	r2, r9
 801e7ae:	4631      	mov	r1, r6
 801e7b0:	4628      	mov	r0, r5
 801e7b2:	47b8      	blx	r7
 801e7b4:	3001      	adds	r0, #1
 801e7b6:	f43f ae3e 	beq.w	801e436 <_printf_float+0xb6>
 801e7ba:	f108 0801 	add.w	r8, r8, #1
 801e7be:	68e3      	ldr	r3, [r4, #12]
 801e7c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e7c2:	1a5b      	subs	r3, r3, r1
 801e7c4:	4543      	cmp	r3, r8
 801e7c6:	dcf0      	bgt.n	801e7aa <_printf_float+0x42a>
 801e7c8:	e6fc      	b.n	801e5c4 <_printf_float+0x244>
 801e7ca:	f04f 0800 	mov.w	r8, #0
 801e7ce:	f104 0919 	add.w	r9, r4, #25
 801e7d2:	e7f4      	b.n	801e7be <_printf_float+0x43e>

0801e7d4 <_printf_common>:
 801e7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7d8:	4616      	mov	r6, r2
 801e7da:	4698      	mov	r8, r3
 801e7dc:	688a      	ldr	r2, [r1, #8]
 801e7de:	690b      	ldr	r3, [r1, #16]
 801e7e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e7e4:	4293      	cmp	r3, r2
 801e7e6:	bfb8      	it	lt
 801e7e8:	4613      	movlt	r3, r2
 801e7ea:	6033      	str	r3, [r6, #0]
 801e7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e7f0:	4607      	mov	r7, r0
 801e7f2:	460c      	mov	r4, r1
 801e7f4:	b10a      	cbz	r2, 801e7fa <_printf_common+0x26>
 801e7f6:	3301      	adds	r3, #1
 801e7f8:	6033      	str	r3, [r6, #0]
 801e7fa:	6823      	ldr	r3, [r4, #0]
 801e7fc:	0699      	lsls	r1, r3, #26
 801e7fe:	bf42      	ittt	mi
 801e800:	6833      	ldrmi	r3, [r6, #0]
 801e802:	3302      	addmi	r3, #2
 801e804:	6033      	strmi	r3, [r6, #0]
 801e806:	6825      	ldr	r5, [r4, #0]
 801e808:	f015 0506 	ands.w	r5, r5, #6
 801e80c:	d106      	bne.n	801e81c <_printf_common+0x48>
 801e80e:	f104 0a19 	add.w	sl, r4, #25
 801e812:	68e3      	ldr	r3, [r4, #12]
 801e814:	6832      	ldr	r2, [r6, #0]
 801e816:	1a9b      	subs	r3, r3, r2
 801e818:	42ab      	cmp	r3, r5
 801e81a:	dc26      	bgt.n	801e86a <_printf_common+0x96>
 801e81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e820:	6822      	ldr	r2, [r4, #0]
 801e822:	3b00      	subs	r3, #0
 801e824:	bf18      	it	ne
 801e826:	2301      	movne	r3, #1
 801e828:	0692      	lsls	r2, r2, #26
 801e82a:	d42b      	bmi.n	801e884 <_printf_common+0xb0>
 801e82c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e830:	4641      	mov	r1, r8
 801e832:	4638      	mov	r0, r7
 801e834:	47c8      	blx	r9
 801e836:	3001      	adds	r0, #1
 801e838:	d01e      	beq.n	801e878 <_printf_common+0xa4>
 801e83a:	6823      	ldr	r3, [r4, #0]
 801e83c:	6922      	ldr	r2, [r4, #16]
 801e83e:	f003 0306 	and.w	r3, r3, #6
 801e842:	2b04      	cmp	r3, #4
 801e844:	bf02      	ittt	eq
 801e846:	68e5      	ldreq	r5, [r4, #12]
 801e848:	6833      	ldreq	r3, [r6, #0]
 801e84a:	1aed      	subeq	r5, r5, r3
 801e84c:	68a3      	ldr	r3, [r4, #8]
 801e84e:	bf0c      	ite	eq
 801e850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e854:	2500      	movne	r5, #0
 801e856:	4293      	cmp	r3, r2
 801e858:	bfc4      	itt	gt
 801e85a:	1a9b      	subgt	r3, r3, r2
 801e85c:	18ed      	addgt	r5, r5, r3
 801e85e:	2600      	movs	r6, #0
 801e860:	341a      	adds	r4, #26
 801e862:	42b5      	cmp	r5, r6
 801e864:	d11a      	bne.n	801e89c <_printf_common+0xc8>
 801e866:	2000      	movs	r0, #0
 801e868:	e008      	b.n	801e87c <_printf_common+0xa8>
 801e86a:	2301      	movs	r3, #1
 801e86c:	4652      	mov	r2, sl
 801e86e:	4641      	mov	r1, r8
 801e870:	4638      	mov	r0, r7
 801e872:	47c8      	blx	r9
 801e874:	3001      	adds	r0, #1
 801e876:	d103      	bne.n	801e880 <_printf_common+0xac>
 801e878:	f04f 30ff 	mov.w	r0, #4294967295
 801e87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e880:	3501      	adds	r5, #1
 801e882:	e7c6      	b.n	801e812 <_printf_common+0x3e>
 801e884:	18e1      	adds	r1, r4, r3
 801e886:	1c5a      	adds	r2, r3, #1
 801e888:	2030      	movs	r0, #48	@ 0x30
 801e88a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e88e:	4422      	add	r2, r4
 801e890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e898:	3302      	adds	r3, #2
 801e89a:	e7c7      	b.n	801e82c <_printf_common+0x58>
 801e89c:	2301      	movs	r3, #1
 801e89e:	4622      	mov	r2, r4
 801e8a0:	4641      	mov	r1, r8
 801e8a2:	4638      	mov	r0, r7
 801e8a4:	47c8      	blx	r9
 801e8a6:	3001      	adds	r0, #1
 801e8a8:	d0e6      	beq.n	801e878 <_printf_common+0xa4>
 801e8aa:	3601      	adds	r6, #1
 801e8ac:	e7d9      	b.n	801e862 <_printf_common+0x8e>
	...

0801e8b0 <_printf_i>:
 801e8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e8b4:	7e0f      	ldrb	r7, [r1, #24]
 801e8b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e8b8:	2f78      	cmp	r7, #120	@ 0x78
 801e8ba:	4691      	mov	r9, r2
 801e8bc:	4680      	mov	r8, r0
 801e8be:	460c      	mov	r4, r1
 801e8c0:	469a      	mov	sl, r3
 801e8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e8c6:	d807      	bhi.n	801e8d8 <_printf_i+0x28>
 801e8c8:	2f62      	cmp	r7, #98	@ 0x62
 801e8ca:	d80a      	bhi.n	801e8e2 <_printf_i+0x32>
 801e8cc:	2f00      	cmp	r7, #0
 801e8ce:	f000 80d2 	beq.w	801ea76 <_printf_i+0x1c6>
 801e8d2:	2f58      	cmp	r7, #88	@ 0x58
 801e8d4:	f000 80b9 	beq.w	801ea4a <_printf_i+0x19a>
 801e8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e8e0:	e03a      	b.n	801e958 <_printf_i+0xa8>
 801e8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e8e6:	2b15      	cmp	r3, #21
 801e8e8:	d8f6      	bhi.n	801e8d8 <_printf_i+0x28>
 801e8ea:	a101      	add	r1, pc, #4	@ (adr r1, 801e8f0 <_printf_i+0x40>)
 801e8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e8f0:	0801e949 	.word	0x0801e949
 801e8f4:	0801e95d 	.word	0x0801e95d
 801e8f8:	0801e8d9 	.word	0x0801e8d9
 801e8fc:	0801e8d9 	.word	0x0801e8d9
 801e900:	0801e8d9 	.word	0x0801e8d9
 801e904:	0801e8d9 	.word	0x0801e8d9
 801e908:	0801e95d 	.word	0x0801e95d
 801e90c:	0801e8d9 	.word	0x0801e8d9
 801e910:	0801e8d9 	.word	0x0801e8d9
 801e914:	0801e8d9 	.word	0x0801e8d9
 801e918:	0801e8d9 	.word	0x0801e8d9
 801e91c:	0801ea5d 	.word	0x0801ea5d
 801e920:	0801e987 	.word	0x0801e987
 801e924:	0801ea17 	.word	0x0801ea17
 801e928:	0801e8d9 	.word	0x0801e8d9
 801e92c:	0801e8d9 	.word	0x0801e8d9
 801e930:	0801ea7f 	.word	0x0801ea7f
 801e934:	0801e8d9 	.word	0x0801e8d9
 801e938:	0801e987 	.word	0x0801e987
 801e93c:	0801e8d9 	.word	0x0801e8d9
 801e940:	0801e8d9 	.word	0x0801e8d9
 801e944:	0801ea1f 	.word	0x0801ea1f
 801e948:	6833      	ldr	r3, [r6, #0]
 801e94a:	1d1a      	adds	r2, r3, #4
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	6032      	str	r2, [r6, #0]
 801e950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e958:	2301      	movs	r3, #1
 801e95a:	e09d      	b.n	801ea98 <_printf_i+0x1e8>
 801e95c:	6833      	ldr	r3, [r6, #0]
 801e95e:	6820      	ldr	r0, [r4, #0]
 801e960:	1d19      	adds	r1, r3, #4
 801e962:	6031      	str	r1, [r6, #0]
 801e964:	0606      	lsls	r6, r0, #24
 801e966:	d501      	bpl.n	801e96c <_printf_i+0xbc>
 801e968:	681d      	ldr	r5, [r3, #0]
 801e96a:	e003      	b.n	801e974 <_printf_i+0xc4>
 801e96c:	0645      	lsls	r5, r0, #25
 801e96e:	d5fb      	bpl.n	801e968 <_printf_i+0xb8>
 801e970:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e974:	2d00      	cmp	r5, #0
 801e976:	da03      	bge.n	801e980 <_printf_i+0xd0>
 801e978:	232d      	movs	r3, #45	@ 0x2d
 801e97a:	426d      	negs	r5, r5
 801e97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e980:	4859      	ldr	r0, [pc, #356]	@ (801eae8 <_printf_i+0x238>)
 801e982:	230a      	movs	r3, #10
 801e984:	e011      	b.n	801e9aa <_printf_i+0xfa>
 801e986:	6821      	ldr	r1, [r4, #0]
 801e988:	6833      	ldr	r3, [r6, #0]
 801e98a:	0608      	lsls	r0, r1, #24
 801e98c:	f853 5b04 	ldr.w	r5, [r3], #4
 801e990:	d402      	bmi.n	801e998 <_printf_i+0xe8>
 801e992:	0649      	lsls	r1, r1, #25
 801e994:	bf48      	it	mi
 801e996:	b2ad      	uxthmi	r5, r5
 801e998:	2f6f      	cmp	r7, #111	@ 0x6f
 801e99a:	4853      	ldr	r0, [pc, #332]	@ (801eae8 <_printf_i+0x238>)
 801e99c:	6033      	str	r3, [r6, #0]
 801e99e:	bf14      	ite	ne
 801e9a0:	230a      	movne	r3, #10
 801e9a2:	2308      	moveq	r3, #8
 801e9a4:	2100      	movs	r1, #0
 801e9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e9aa:	6866      	ldr	r6, [r4, #4]
 801e9ac:	60a6      	str	r6, [r4, #8]
 801e9ae:	2e00      	cmp	r6, #0
 801e9b0:	bfa2      	ittt	ge
 801e9b2:	6821      	ldrge	r1, [r4, #0]
 801e9b4:	f021 0104 	bicge.w	r1, r1, #4
 801e9b8:	6021      	strge	r1, [r4, #0]
 801e9ba:	b90d      	cbnz	r5, 801e9c0 <_printf_i+0x110>
 801e9bc:	2e00      	cmp	r6, #0
 801e9be:	d04b      	beq.n	801ea58 <_printf_i+0x1a8>
 801e9c0:	4616      	mov	r6, r2
 801e9c2:	fbb5 f1f3 	udiv	r1, r5, r3
 801e9c6:	fb03 5711 	mls	r7, r3, r1, r5
 801e9ca:	5dc7      	ldrb	r7, [r0, r7]
 801e9cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e9d0:	462f      	mov	r7, r5
 801e9d2:	42bb      	cmp	r3, r7
 801e9d4:	460d      	mov	r5, r1
 801e9d6:	d9f4      	bls.n	801e9c2 <_printf_i+0x112>
 801e9d8:	2b08      	cmp	r3, #8
 801e9da:	d10b      	bne.n	801e9f4 <_printf_i+0x144>
 801e9dc:	6823      	ldr	r3, [r4, #0]
 801e9de:	07df      	lsls	r7, r3, #31
 801e9e0:	d508      	bpl.n	801e9f4 <_printf_i+0x144>
 801e9e2:	6923      	ldr	r3, [r4, #16]
 801e9e4:	6861      	ldr	r1, [r4, #4]
 801e9e6:	4299      	cmp	r1, r3
 801e9e8:	bfde      	ittt	le
 801e9ea:	2330      	movle	r3, #48	@ 0x30
 801e9ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e9f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e9f4:	1b92      	subs	r2, r2, r6
 801e9f6:	6122      	str	r2, [r4, #16]
 801e9f8:	f8cd a000 	str.w	sl, [sp]
 801e9fc:	464b      	mov	r3, r9
 801e9fe:	aa03      	add	r2, sp, #12
 801ea00:	4621      	mov	r1, r4
 801ea02:	4640      	mov	r0, r8
 801ea04:	f7ff fee6 	bl	801e7d4 <_printf_common>
 801ea08:	3001      	adds	r0, #1
 801ea0a:	d14a      	bne.n	801eaa2 <_printf_i+0x1f2>
 801ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ea10:	b004      	add	sp, #16
 801ea12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea16:	6823      	ldr	r3, [r4, #0]
 801ea18:	f043 0320 	orr.w	r3, r3, #32
 801ea1c:	6023      	str	r3, [r4, #0]
 801ea1e:	4833      	ldr	r0, [pc, #204]	@ (801eaec <_printf_i+0x23c>)
 801ea20:	2778      	movs	r7, #120	@ 0x78
 801ea22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ea26:	6823      	ldr	r3, [r4, #0]
 801ea28:	6831      	ldr	r1, [r6, #0]
 801ea2a:	061f      	lsls	r7, r3, #24
 801ea2c:	f851 5b04 	ldr.w	r5, [r1], #4
 801ea30:	d402      	bmi.n	801ea38 <_printf_i+0x188>
 801ea32:	065f      	lsls	r7, r3, #25
 801ea34:	bf48      	it	mi
 801ea36:	b2ad      	uxthmi	r5, r5
 801ea38:	6031      	str	r1, [r6, #0]
 801ea3a:	07d9      	lsls	r1, r3, #31
 801ea3c:	bf44      	itt	mi
 801ea3e:	f043 0320 	orrmi.w	r3, r3, #32
 801ea42:	6023      	strmi	r3, [r4, #0]
 801ea44:	b11d      	cbz	r5, 801ea4e <_printf_i+0x19e>
 801ea46:	2310      	movs	r3, #16
 801ea48:	e7ac      	b.n	801e9a4 <_printf_i+0xf4>
 801ea4a:	4827      	ldr	r0, [pc, #156]	@ (801eae8 <_printf_i+0x238>)
 801ea4c:	e7e9      	b.n	801ea22 <_printf_i+0x172>
 801ea4e:	6823      	ldr	r3, [r4, #0]
 801ea50:	f023 0320 	bic.w	r3, r3, #32
 801ea54:	6023      	str	r3, [r4, #0]
 801ea56:	e7f6      	b.n	801ea46 <_printf_i+0x196>
 801ea58:	4616      	mov	r6, r2
 801ea5a:	e7bd      	b.n	801e9d8 <_printf_i+0x128>
 801ea5c:	6833      	ldr	r3, [r6, #0]
 801ea5e:	6825      	ldr	r5, [r4, #0]
 801ea60:	6961      	ldr	r1, [r4, #20]
 801ea62:	1d18      	adds	r0, r3, #4
 801ea64:	6030      	str	r0, [r6, #0]
 801ea66:	062e      	lsls	r6, r5, #24
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	d501      	bpl.n	801ea70 <_printf_i+0x1c0>
 801ea6c:	6019      	str	r1, [r3, #0]
 801ea6e:	e002      	b.n	801ea76 <_printf_i+0x1c6>
 801ea70:	0668      	lsls	r0, r5, #25
 801ea72:	d5fb      	bpl.n	801ea6c <_printf_i+0x1bc>
 801ea74:	8019      	strh	r1, [r3, #0]
 801ea76:	2300      	movs	r3, #0
 801ea78:	6123      	str	r3, [r4, #16]
 801ea7a:	4616      	mov	r6, r2
 801ea7c:	e7bc      	b.n	801e9f8 <_printf_i+0x148>
 801ea7e:	6833      	ldr	r3, [r6, #0]
 801ea80:	1d1a      	adds	r2, r3, #4
 801ea82:	6032      	str	r2, [r6, #0]
 801ea84:	681e      	ldr	r6, [r3, #0]
 801ea86:	6862      	ldr	r2, [r4, #4]
 801ea88:	2100      	movs	r1, #0
 801ea8a:	4630      	mov	r0, r6
 801ea8c:	f7e1 fbb8 	bl	8000200 <memchr>
 801ea90:	b108      	cbz	r0, 801ea96 <_printf_i+0x1e6>
 801ea92:	1b80      	subs	r0, r0, r6
 801ea94:	6060      	str	r0, [r4, #4]
 801ea96:	6863      	ldr	r3, [r4, #4]
 801ea98:	6123      	str	r3, [r4, #16]
 801ea9a:	2300      	movs	r3, #0
 801ea9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eaa0:	e7aa      	b.n	801e9f8 <_printf_i+0x148>
 801eaa2:	6923      	ldr	r3, [r4, #16]
 801eaa4:	4632      	mov	r2, r6
 801eaa6:	4649      	mov	r1, r9
 801eaa8:	4640      	mov	r0, r8
 801eaaa:	47d0      	blx	sl
 801eaac:	3001      	adds	r0, #1
 801eaae:	d0ad      	beq.n	801ea0c <_printf_i+0x15c>
 801eab0:	6823      	ldr	r3, [r4, #0]
 801eab2:	079b      	lsls	r3, r3, #30
 801eab4:	d413      	bmi.n	801eade <_printf_i+0x22e>
 801eab6:	68e0      	ldr	r0, [r4, #12]
 801eab8:	9b03      	ldr	r3, [sp, #12]
 801eaba:	4298      	cmp	r0, r3
 801eabc:	bfb8      	it	lt
 801eabe:	4618      	movlt	r0, r3
 801eac0:	e7a6      	b.n	801ea10 <_printf_i+0x160>
 801eac2:	2301      	movs	r3, #1
 801eac4:	4632      	mov	r2, r6
 801eac6:	4649      	mov	r1, r9
 801eac8:	4640      	mov	r0, r8
 801eaca:	47d0      	blx	sl
 801eacc:	3001      	adds	r0, #1
 801eace:	d09d      	beq.n	801ea0c <_printf_i+0x15c>
 801ead0:	3501      	adds	r5, #1
 801ead2:	68e3      	ldr	r3, [r4, #12]
 801ead4:	9903      	ldr	r1, [sp, #12]
 801ead6:	1a5b      	subs	r3, r3, r1
 801ead8:	42ab      	cmp	r3, r5
 801eada:	dcf2      	bgt.n	801eac2 <_printf_i+0x212>
 801eadc:	e7eb      	b.n	801eab6 <_printf_i+0x206>
 801eade:	2500      	movs	r5, #0
 801eae0:	f104 0619 	add.w	r6, r4, #25
 801eae4:	e7f5      	b.n	801ead2 <_printf_i+0x222>
 801eae6:	bf00      	nop
 801eae8:	08071436 	.word	0x08071436
 801eaec:	08071447 	.word	0x08071447

0801eaf0 <std>:
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	b510      	push	{r4, lr}
 801eaf4:	4604      	mov	r4, r0
 801eaf6:	e9c0 3300 	strd	r3, r3, [r0]
 801eafa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eafe:	6083      	str	r3, [r0, #8]
 801eb00:	8181      	strh	r1, [r0, #12]
 801eb02:	6643      	str	r3, [r0, #100]	@ 0x64
 801eb04:	81c2      	strh	r2, [r0, #14]
 801eb06:	6183      	str	r3, [r0, #24]
 801eb08:	4619      	mov	r1, r3
 801eb0a:	2208      	movs	r2, #8
 801eb0c:	305c      	adds	r0, #92	@ 0x5c
 801eb0e:	f000 fa1b 	bl	801ef48 <memset>
 801eb12:	4b0d      	ldr	r3, [pc, #52]	@ (801eb48 <std+0x58>)
 801eb14:	6263      	str	r3, [r4, #36]	@ 0x24
 801eb16:	4b0d      	ldr	r3, [pc, #52]	@ (801eb4c <std+0x5c>)
 801eb18:	62a3      	str	r3, [r4, #40]	@ 0x28
 801eb1a:	4b0d      	ldr	r3, [pc, #52]	@ (801eb50 <std+0x60>)
 801eb1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801eb1e:	4b0d      	ldr	r3, [pc, #52]	@ (801eb54 <std+0x64>)
 801eb20:	6323      	str	r3, [r4, #48]	@ 0x30
 801eb22:	4b0d      	ldr	r3, [pc, #52]	@ (801eb58 <std+0x68>)
 801eb24:	6224      	str	r4, [r4, #32]
 801eb26:	429c      	cmp	r4, r3
 801eb28:	d006      	beq.n	801eb38 <std+0x48>
 801eb2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801eb2e:	4294      	cmp	r4, r2
 801eb30:	d002      	beq.n	801eb38 <std+0x48>
 801eb32:	33d0      	adds	r3, #208	@ 0xd0
 801eb34:	429c      	cmp	r4, r3
 801eb36:	d105      	bne.n	801eb44 <std+0x54>
 801eb38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb40:	f000 bab4 	b.w	801f0ac <__retarget_lock_init_recursive>
 801eb44:	bd10      	pop	{r4, pc}
 801eb46:	bf00      	nop
 801eb48:	0801ed65 	.word	0x0801ed65
 801eb4c:	0801ed87 	.word	0x0801ed87
 801eb50:	0801edbf 	.word	0x0801edbf
 801eb54:	0801ede3 	.word	0x0801ede3
 801eb58:	20013f5c 	.word	0x20013f5c

0801eb5c <stdio_exit_handler>:
 801eb5c:	4a02      	ldr	r2, [pc, #8]	@ (801eb68 <stdio_exit_handler+0xc>)
 801eb5e:	4903      	ldr	r1, [pc, #12]	@ (801eb6c <stdio_exit_handler+0x10>)
 801eb60:	4803      	ldr	r0, [pc, #12]	@ (801eb70 <stdio_exit_handler+0x14>)
 801eb62:	f000 b869 	b.w	801ec38 <_fwalk_sglue>
 801eb66:	bf00      	nop
 801eb68:	200000cc 	.word	0x200000cc
 801eb6c:	080208dd 	.word	0x080208dd
 801eb70:	200000dc 	.word	0x200000dc

0801eb74 <cleanup_stdio>:
 801eb74:	6841      	ldr	r1, [r0, #4]
 801eb76:	4b0c      	ldr	r3, [pc, #48]	@ (801eba8 <cleanup_stdio+0x34>)
 801eb78:	4299      	cmp	r1, r3
 801eb7a:	b510      	push	{r4, lr}
 801eb7c:	4604      	mov	r4, r0
 801eb7e:	d001      	beq.n	801eb84 <cleanup_stdio+0x10>
 801eb80:	f001 feac 	bl	80208dc <_fflush_r>
 801eb84:	68a1      	ldr	r1, [r4, #8]
 801eb86:	4b09      	ldr	r3, [pc, #36]	@ (801ebac <cleanup_stdio+0x38>)
 801eb88:	4299      	cmp	r1, r3
 801eb8a:	d002      	beq.n	801eb92 <cleanup_stdio+0x1e>
 801eb8c:	4620      	mov	r0, r4
 801eb8e:	f001 fea5 	bl	80208dc <_fflush_r>
 801eb92:	68e1      	ldr	r1, [r4, #12]
 801eb94:	4b06      	ldr	r3, [pc, #24]	@ (801ebb0 <cleanup_stdio+0x3c>)
 801eb96:	4299      	cmp	r1, r3
 801eb98:	d004      	beq.n	801eba4 <cleanup_stdio+0x30>
 801eb9a:	4620      	mov	r0, r4
 801eb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eba0:	f001 be9c 	b.w	80208dc <_fflush_r>
 801eba4:	bd10      	pop	{r4, pc}
 801eba6:	bf00      	nop
 801eba8:	20013f5c 	.word	0x20013f5c
 801ebac:	20013fc4 	.word	0x20013fc4
 801ebb0:	2001402c 	.word	0x2001402c

0801ebb4 <global_stdio_init.part.0>:
 801ebb4:	b510      	push	{r4, lr}
 801ebb6:	4b0b      	ldr	r3, [pc, #44]	@ (801ebe4 <global_stdio_init.part.0+0x30>)
 801ebb8:	4c0b      	ldr	r4, [pc, #44]	@ (801ebe8 <global_stdio_init.part.0+0x34>)
 801ebba:	4a0c      	ldr	r2, [pc, #48]	@ (801ebec <global_stdio_init.part.0+0x38>)
 801ebbc:	601a      	str	r2, [r3, #0]
 801ebbe:	4620      	mov	r0, r4
 801ebc0:	2200      	movs	r2, #0
 801ebc2:	2104      	movs	r1, #4
 801ebc4:	f7ff ff94 	bl	801eaf0 <std>
 801ebc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ebcc:	2201      	movs	r2, #1
 801ebce:	2109      	movs	r1, #9
 801ebd0:	f7ff ff8e 	bl	801eaf0 <std>
 801ebd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ebd8:	2202      	movs	r2, #2
 801ebda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebde:	2112      	movs	r1, #18
 801ebe0:	f7ff bf86 	b.w	801eaf0 <std>
 801ebe4:	20014094 	.word	0x20014094
 801ebe8:	20013f5c 	.word	0x20013f5c
 801ebec:	0801eb5d 	.word	0x0801eb5d

0801ebf0 <__sfp_lock_acquire>:
 801ebf0:	4801      	ldr	r0, [pc, #4]	@ (801ebf8 <__sfp_lock_acquire+0x8>)
 801ebf2:	f000 ba5c 	b.w	801f0ae <__retarget_lock_acquire_recursive>
 801ebf6:	bf00      	nop
 801ebf8:	2001409d 	.word	0x2001409d

0801ebfc <__sfp_lock_release>:
 801ebfc:	4801      	ldr	r0, [pc, #4]	@ (801ec04 <__sfp_lock_release+0x8>)
 801ebfe:	f000 ba57 	b.w	801f0b0 <__retarget_lock_release_recursive>
 801ec02:	bf00      	nop
 801ec04:	2001409d 	.word	0x2001409d

0801ec08 <__sinit>:
 801ec08:	b510      	push	{r4, lr}
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	f7ff fff0 	bl	801ebf0 <__sfp_lock_acquire>
 801ec10:	6a23      	ldr	r3, [r4, #32]
 801ec12:	b11b      	cbz	r3, 801ec1c <__sinit+0x14>
 801ec14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec18:	f7ff bff0 	b.w	801ebfc <__sfp_lock_release>
 801ec1c:	4b04      	ldr	r3, [pc, #16]	@ (801ec30 <__sinit+0x28>)
 801ec1e:	6223      	str	r3, [r4, #32]
 801ec20:	4b04      	ldr	r3, [pc, #16]	@ (801ec34 <__sinit+0x2c>)
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d1f5      	bne.n	801ec14 <__sinit+0xc>
 801ec28:	f7ff ffc4 	bl	801ebb4 <global_stdio_init.part.0>
 801ec2c:	e7f2      	b.n	801ec14 <__sinit+0xc>
 801ec2e:	bf00      	nop
 801ec30:	0801eb75 	.word	0x0801eb75
 801ec34:	20014094 	.word	0x20014094

0801ec38 <_fwalk_sglue>:
 801ec38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec3c:	4607      	mov	r7, r0
 801ec3e:	4688      	mov	r8, r1
 801ec40:	4614      	mov	r4, r2
 801ec42:	2600      	movs	r6, #0
 801ec44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ec48:	f1b9 0901 	subs.w	r9, r9, #1
 801ec4c:	d505      	bpl.n	801ec5a <_fwalk_sglue+0x22>
 801ec4e:	6824      	ldr	r4, [r4, #0]
 801ec50:	2c00      	cmp	r4, #0
 801ec52:	d1f7      	bne.n	801ec44 <_fwalk_sglue+0xc>
 801ec54:	4630      	mov	r0, r6
 801ec56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec5a:	89ab      	ldrh	r3, [r5, #12]
 801ec5c:	2b01      	cmp	r3, #1
 801ec5e:	d907      	bls.n	801ec70 <_fwalk_sglue+0x38>
 801ec60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ec64:	3301      	adds	r3, #1
 801ec66:	d003      	beq.n	801ec70 <_fwalk_sglue+0x38>
 801ec68:	4629      	mov	r1, r5
 801ec6a:	4638      	mov	r0, r7
 801ec6c:	47c0      	blx	r8
 801ec6e:	4306      	orrs	r6, r0
 801ec70:	3568      	adds	r5, #104	@ 0x68
 801ec72:	e7e9      	b.n	801ec48 <_fwalk_sglue+0x10>

0801ec74 <iprintf>:
 801ec74:	b40f      	push	{r0, r1, r2, r3}
 801ec76:	b507      	push	{r0, r1, r2, lr}
 801ec78:	4906      	ldr	r1, [pc, #24]	@ (801ec94 <iprintf+0x20>)
 801ec7a:	ab04      	add	r3, sp, #16
 801ec7c:	6808      	ldr	r0, [r1, #0]
 801ec7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec82:	6881      	ldr	r1, [r0, #8]
 801ec84:	9301      	str	r3, [sp, #4]
 801ec86:	f001 fc8d 	bl	80205a4 <_vfiprintf_r>
 801ec8a:	b003      	add	sp, #12
 801ec8c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec90:	b004      	add	sp, #16
 801ec92:	4770      	bx	lr
 801ec94:	200000d8 	.word	0x200000d8

0801ec98 <putchar>:
 801ec98:	4b02      	ldr	r3, [pc, #8]	@ (801eca4 <putchar+0xc>)
 801ec9a:	4601      	mov	r1, r0
 801ec9c:	6818      	ldr	r0, [r3, #0]
 801ec9e:	6882      	ldr	r2, [r0, #8]
 801eca0:	f001 beb8 	b.w	8020a14 <_putc_r>
 801eca4:	200000d8 	.word	0x200000d8

0801eca8 <_puts_r>:
 801eca8:	6a03      	ldr	r3, [r0, #32]
 801ecaa:	b570      	push	{r4, r5, r6, lr}
 801ecac:	6884      	ldr	r4, [r0, #8]
 801ecae:	4605      	mov	r5, r0
 801ecb0:	460e      	mov	r6, r1
 801ecb2:	b90b      	cbnz	r3, 801ecb8 <_puts_r+0x10>
 801ecb4:	f7ff ffa8 	bl	801ec08 <__sinit>
 801ecb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ecba:	07db      	lsls	r3, r3, #31
 801ecbc:	d405      	bmi.n	801ecca <_puts_r+0x22>
 801ecbe:	89a3      	ldrh	r3, [r4, #12]
 801ecc0:	0598      	lsls	r0, r3, #22
 801ecc2:	d402      	bmi.n	801ecca <_puts_r+0x22>
 801ecc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ecc6:	f000 f9f2 	bl	801f0ae <__retarget_lock_acquire_recursive>
 801ecca:	89a3      	ldrh	r3, [r4, #12]
 801eccc:	0719      	lsls	r1, r3, #28
 801ecce:	d502      	bpl.n	801ecd6 <_puts_r+0x2e>
 801ecd0:	6923      	ldr	r3, [r4, #16]
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d135      	bne.n	801ed42 <_puts_r+0x9a>
 801ecd6:	4621      	mov	r1, r4
 801ecd8:	4628      	mov	r0, r5
 801ecda:	f000 f8cf 	bl	801ee7c <__swsetup_r>
 801ecde:	b380      	cbz	r0, 801ed42 <_puts_r+0x9a>
 801ece0:	f04f 35ff 	mov.w	r5, #4294967295
 801ece4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ece6:	07da      	lsls	r2, r3, #31
 801ece8:	d405      	bmi.n	801ecf6 <_puts_r+0x4e>
 801ecea:	89a3      	ldrh	r3, [r4, #12]
 801ecec:	059b      	lsls	r3, r3, #22
 801ecee:	d402      	bmi.n	801ecf6 <_puts_r+0x4e>
 801ecf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ecf2:	f000 f9dd 	bl	801f0b0 <__retarget_lock_release_recursive>
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	bd70      	pop	{r4, r5, r6, pc}
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	da04      	bge.n	801ed08 <_puts_r+0x60>
 801ecfe:	69a2      	ldr	r2, [r4, #24]
 801ed00:	429a      	cmp	r2, r3
 801ed02:	dc17      	bgt.n	801ed34 <_puts_r+0x8c>
 801ed04:	290a      	cmp	r1, #10
 801ed06:	d015      	beq.n	801ed34 <_puts_r+0x8c>
 801ed08:	6823      	ldr	r3, [r4, #0]
 801ed0a:	1c5a      	adds	r2, r3, #1
 801ed0c:	6022      	str	r2, [r4, #0]
 801ed0e:	7019      	strb	r1, [r3, #0]
 801ed10:	68a3      	ldr	r3, [r4, #8]
 801ed12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ed16:	3b01      	subs	r3, #1
 801ed18:	60a3      	str	r3, [r4, #8]
 801ed1a:	2900      	cmp	r1, #0
 801ed1c:	d1ed      	bne.n	801ecfa <_puts_r+0x52>
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	da11      	bge.n	801ed46 <_puts_r+0x9e>
 801ed22:	4622      	mov	r2, r4
 801ed24:	210a      	movs	r1, #10
 801ed26:	4628      	mov	r0, r5
 801ed28:	f000 f86a 	bl	801ee00 <__swbuf_r>
 801ed2c:	3001      	adds	r0, #1
 801ed2e:	d0d7      	beq.n	801ece0 <_puts_r+0x38>
 801ed30:	250a      	movs	r5, #10
 801ed32:	e7d7      	b.n	801ece4 <_puts_r+0x3c>
 801ed34:	4622      	mov	r2, r4
 801ed36:	4628      	mov	r0, r5
 801ed38:	f000 f862 	bl	801ee00 <__swbuf_r>
 801ed3c:	3001      	adds	r0, #1
 801ed3e:	d1e7      	bne.n	801ed10 <_puts_r+0x68>
 801ed40:	e7ce      	b.n	801ece0 <_puts_r+0x38>
 801ed42:	3e01      	subs	r6, #1
 801ed44:	e7e4      	b.n	801ed10 <_puts_r+0x68>
 801ed46:	6823      	ldr	r3, [r4, #0]
 801ed48:	1c5a      	adds	r2, r3, #1
 801ed4a:	6022      	str	r2, [r4, #0]
 801ed4c:	220a      	movs	r2, #10
 801ed4e:	701a      	strb	r2, [r3, #0]
 801ed50:	e7ee      	b.n	801ed30 <_puts_r+0x88>
	...

0801ed54 <puts>:
 801ed54:	4b02      	ldr	r3, [pc, #8]	@ (801ed60 <puts+0xc>)
 801ed56:	4601      	mov	r1, r0
 801ed58:	6818      	ldr	r0, [r3, #0]
 801ed5a:	f7ff bfa5 	b.w	801eca8 <_puts_r>
 801ed5e:	bf00      	nop
 801ed60:	200000d8 	.word	0x200000d8

0801ed64 <__sread>:
 801ed64:	b510      	push	{r4, lr}
 801ed66:	460c      	mov	r4, r1
 801ed68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed6c:	f000 f940 	bl	801eff0 <_read_r>
 801ed70:	2800      	cmp	r0, #0
 801ed72:	bfab      	itete	ge
 801ed74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ed76:	89a3      	ldrhlt	r3, [r4, #12]
 801ed78:	181b      	addge	r3, r3, r0
 801ed7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ed7e:	bfac      	ite	ge
 801ed80:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ed82:	81a3      	strhlt	r3, [r4, #12]
 801ed84:	bd10      	pop	{r4, pc}

0801ed86 <__swrite>:
 801ed86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed8a:	461f      	mov	r7, r3
 801ed8c:	898b      	ldrh	r3, [r1, #12]
 801ed8e:	05db      	lsls	r3, r3, #23
 801ed90:	4605      	mov	r5, r0
 801ed92:	460c      	mov	r4, r1
 801ed94:	4616      	mov	r6, r2
 801ed96:	d505      	bpl.n	801eda4 <__swrite+0x1e>
 801ed98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed9c:	2302      	movs	r3, #2
 801ed9e:	2200      	movs	r2, #0
 801eda0:	f000 f914 	bl	801efcc <_lseek_r>
 801eda4:	89a3      	ldrh	r3, [r4, #12]
 801eda6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801edaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801edae:	81a3      	strh	r3, [r4, #12]
 801edb0:	4632      	mov	r2, r6
 801edb2:	463b      	mov	r3, r7
 801edb4:	4628      	mov	r0, r5
 801edb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801edba:	f000 b93b 	b.w	801f034 <_write_r>

0801edbe <__sseek>:
 801edbe:	b510      	push	{r4, lr}
 801edc0:	460c      	mov	r4, r1
 801edc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edc6:	f000 f901 	bl	801efcc <_lseek_r>
 801edca:	1c43      	adds	r3, r0, #1
 801edcc:	89a3      	ldrh	r3, [r4, #12]
 801edce:	bf15      	itete	ne
 801edd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801edd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801edd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801edda:	81a3      	strheq	r3, [r4, #12]
 801eddc:	bf18      	it	ne
 801edde:	81a3      	strhne	r3, [r4, #12]
 801ede0:	bd10      	pop	{r4, pc}

0801ede2 <__sclose>:
 801ede2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ede6:	f000 b8e1 	b.w	801efac <_close_r>
	...

0801edec <viprintf>:
 801edec:	460b      	mov	r3, r1
 801edee:	4903      	ldr	r1, [pc, #12]	@ (801edfc <viprintf+0x10>)
 801edf0:	4602      	mov	r2, r0
 801edf2:	6808      	ldr	r0, [r1, #0]
 801edf4:	6881      	ldr	r1, [r0, #8]
 801edf6:	f001 bbd5 	b.w	80205a4 <_vfiprintf_r>
 801edfa:	bf00      	nop
 801edfc:	200000d8 	.word	0x200000d8

0801ee00 <__swbuf_r>:
 801ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee02:	460e      	mov	r6, r1
 801ee04:	4614      	mov	r4, r2
 801ee06:	4605      	mov	r5, r0
 801ee08:	b118      	cbz	r0, 801ee12 <__swbuf_r+0x12>
 801ee0a:	6a03      	ldr	r3, [r0, #32]
 801ee0c:	b90b      	cbnz	r3, 801ee12 <__swbuf_r+0x12>
 801ee0e:	f7ff fefb 	bl	801ec08 <__sinit>
 801ee12:	69a3      	ldr	r3, [r4, #24]
 801ee14:	60a3      	str	r3, [r4, #8]
 801ee16:	89a3      	ldrh	r3, [r4, #12]
 801ee18:	071a      	lsls	r2, r3, #28
 801ee1a:	d501      	bpl.n	801ee20 <__swbuf_r+0x20>
 801ee1c:	6923      	ldr	r3, [r4, #16]
 801ee1e:	b943      	cbnz	r3, 801ee32 <__swbuf_r+0x32>
 801ee20:	4621      	mov	r1, r4
 801ee22:	4628      	mov	r0, r5
 801ee24:	f000 f82a 	bl	801ee7c <__swsetup_r>
 801ee28:	b118      	cbz	r0, 801ee32 <__swbuf_r+0x32>
 801ee2a:	f04f 37ff 	mov.w	r7, #4294967295
 801ee2e:	4638      	mov	r0, r7
 801ee30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee32:	6823      	ldr	r3, [r4, #0]
 801ee34:	6922      	ldr	r2, [r4, #16]
 801ee36:	1a98      	subs	r0, r3, r2
 801ee38:	6963      	ldr	r3, [r4, #20]
 801ee3a:	b2f6      	uxtb	r6, r6
 801ee3c:	4283      	cmp	r3, r0
 801ee3e:	4637      	mov	r7, r6
 801ee40:	dc05      	bgt.n	801ee4e <__swbuf_r+0x4e>
 801ee42:	4621      	mov	r1, r4
 801ee44:	4628      	mov	r0, r5
 801ee46:	f001 fd49 	bl	80208dc <_fflush_r>
 801ee4a:	2800      	cmp	r0, #0
 801ee4c:	d1ed      	bne.n	801ee2a <__swbuf_r+0x2a>
 801ee4e:	68a3      	ldr	r3, [r4, #8]
 801ee50:	3b01      	subs	r3, #1
 801ee52:	60a3      	str	r3, [r4, #8]
 801ee54:	6823      	ldr	r3, [r4, #0]
 801ee56:	1c5a      	adds	r2, r3, #1
 801ee58:	6022      	str	r2, [r4, #0]
 801ee5a:	701e      	strb	r6, [r3, #0]
 801ee5c:	6962      	ldr	r2, [r4, #20]
 801ee5e:	1c43      	adds	r3, r0, #1
 801ee60:	429a      	cmp	r2, r3
 801ee62:	d004      	beq.n	801ee6e <__swbuf_r+0x6e>
 801ee64:	89a3      	ldrh	r3, [r4, #12]
 801ee66:	07db      	lsls	r3, r3, #31
 801ee68:	d5e1      	bpl.n	801ee2e <__swbuf_r+0x2e>
 801ee6a:	2e0a      	cmp	r6, #10
 801ee6c:	d1df      	bne.n	801ee2e <__swbuf_r+0x2e>
 801ee6e:	4621      	mov	r1, r4
 801ee70:	4628      	mov	r0, r5
 801ee72:	f001 fd33 	bl	80208dc <_fflush_r>
 801ee76:	2800      	cmp	r0, #0
 801ee78:	d0d9      	beq.n	801ee2e <__swbuf_r+0x2e>
 801ee7a:	e7d6      	b.n	801ee2a <__swbuf_r+0x2a>

0801ee7c <__swsetup_r>:
 801ee7c:	b538      	push	{r3, r4, r5, lr}
 801ee7e:	4b29      	ldr	r3, [pc, #164]	@ (801ef24 <__swsetup_r+0xa8>)
 801ee80:	4605      	mov	r5, r0
 801ee82:	6818      	ldr	r0, [r3, #0]
 801ee84:	460c      	mov	r4, r1
 801ee86:	b118      	cbz	r0, 801ee90 <__swsetup_r+0x14>
 801ee88:	6a03      	ldr	r3, [r0, #32]
 801ee8a:	b90b      	cbnz	r3, 801ee90 <__swsetup_r+0x14>
 801ee8c:	f7ff febc 	bl	801ec08 <__sinit>
 801ee90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee94:	0719      	lsls	r1, r3, #28
 801ee96:	d422      	bmi.n	801eede <__swsetup_r+0x62>
 801ee98:	06da      	lsls	r2, r3, #27
 801ee9a:	d407      	bmi.n	801eeac <__swsetup_r+0x30>
 801ee9c:	2209      	movs	r2, #9
 801ee9e:	602a      	str	r2, [r5, #0]
 801eea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eea4:	81a3      	strh	r3, [r4, #12]
 801eea6:	f04f 30ff 	mov.w	r0, #4294967295
 801eeaa:	e033      	b.n	801ef14 <__swsetup_r+0x98>
 801eeac:	0758      	lsls	r0, r3, #29
 801eeae:	d512      	bpl.n	801eed6 <__swsetup_r+0x5a>
 801eeb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801eeb2:	b141      	cbz	r1, 801eec6 <__swsetup_r+0x4a>
 801eeb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eeb8:	4299      	cmp	r1, r3
 801eeba:	d002      	beq.n	801eec2 <__swsetup_r+0x46>
 801eebc:	4628      	mov	r0, r5
 801eebe:	f000 ff7b 	bl	801fdb8 <_free_r>
 801eec2:	2300      	movs	r3, #0
 801eec4:	6363      	str	r3, [r4, #52]	@ 0x34
 801eec6:	89a3      	ldrh	r3, [r4, #12]
 801eec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801eecc:	81a3      	strh	r3, [r4, #12]
 801eece:	2300      	movs	r3, #0
 801eed0:	6063      	str	r3, [r4, #4]
 801eed2:	6923      	ldr	r3, [r4, #16]
 801eed4:	6023      	str	r3, [r4, #0]
 801eed6:	89a3      	ldrh	r3, [r4, #12]
 801eed8:	f043 0308 	orr.w	r3, r3, #8
 801eedc:	81a3      	strh	r3, [r4, #12]
 801eede:	6923      	ldr	r3, [r4, #16]
 801eee0:	b94b      	cbnz	r3, 801eef6 <__swsetup_r+0x7a>
 801eee2:	89a3      	ldrh	r3, [r4, #12]
 801eee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801eee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801eeec:	d003      	beq.n	801eef6 <__swsetup_r+0x7a>
 801eeee:	4621      	mov	r1, r4
 801eef0:	4628      	mov	r0, r5
 801eef2:	f001 fd53 	bl	802099c <__smakebuf_r>
 801eef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eefa:	f013 0201 	ands.w	r2, r3, #1
 801eefe:	d00a      	beq.n	801ef16 <__swsetup_r+0x9a>
 801ef00:	2200      	movs	r2, #0
 801ef02:	60a2      	str	r2, [r4, #8]
 801ef04:	6962      	ldr	r2, [r4, #20]
 801ef06:	4252      	negs	r2, r2
 801ef08:	61a2      	str	r2, [r4, #24]
 801ef0a:	6922      	ldr	r2, [r4, #16]
 801ef0c:	b942      	cbnz	r2, 801ef20 <__swsetup_r+0xa4>
 801ef0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ef12:	d1c5      	bne.n	801eea0 <__swsetup_r+0x24>
 801ef14:	bd38      	pop	{r3, r4, r5, pc}
 801ef16:	0799      	lsls	r1, r3, #30
 801ef18:	bf58      	it	pl
 801ef1a:	6962      	ldrpl	r2, [r4, #20]
 801ef1c:	60a2      	str	r2, [r4, #8]
 801ef1e:	e7f4      	b.n	801ef0a <__swsetup_r+0x8e>
 801ef20:	2000      	movs	r0, #0
 801ef22:	e7f7      	b.n	801ef14 <__swsetup_r+0x98>
 801ef24:	200000d8 	.word	0x200000d8

0801ef28 <memcmp>:
 801ef28:	b510      	push	{r4, lr}
 801ef2a:	3901      	subs	r1, #1
 801ef2c:	4402      	add	r2, r0
 801ef2e:	4290      	cmp	r0, r2
 801ef30:	d101      	bne.n	801ef36 <memcmp+0xe>
 801ef32:	2000      	movs	r0, #0
 801ef34:	e005      	b.n	801ef42 <memcmp+0x1a>
 801ef36:	7803      	ldrb	r3, [r0, #0]
 801ef38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ef3c:	42a3      	cmp	r3, r4
 801ef3e:	d001      	beq.n	801ef44 <memcmp+0x1c>
 801ef40:	1b18      	subs	r0, r3, r4
 801ef42:	bd10      	pop	{r4, pc}
 801ef44:	3001      	adds	r0, #1
 801ef46:	e7f2      	b.n	801ef2e <memcmp+0x6>

0801ef48 <memset>:
 801ef48:	4402      	add	r2, r0
 801ef4a:	4603      	mov	r3, r0
 801ef4c:	4293      	cmp	r3, r2
 801ef4e:	d100      	bne.n	801ef52 <memset+0xa>
 801ef50:	4770      	bx	lr
 801ef52:	f803 1b01 	strb.w	r1, [r3], #1
 801ef56:	e7f9      	b.n	801ef4c <memset+0x4>

0801ef58 <strncmp>:
 801ef58:	b510      	push	{r4, lr}
 801ef5a:	b16a      	cbz	r2, 801ef78 <strncmp+0x20>
 801ef5c:	3901      	subs	r1, #1
 801ef5e:	1884      	adds	r4, r0, r2
 801ef60:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ef68:	429a      	cmp	r2, r3
 801ef6a:	d103      	bne.n	801ef74 <strncmp+0x1c>
 801ef6c:	42a0      	cmp	r0, r4
 801ef6e:	d001      	beq.n	801ef74 <strncmp+0x1c>
 801ef70:	2a00      	cmp	r2, #0
 801ef72:	d1f5      	bne.n	801ef60 <strncmp+0x8>
 801ef74:	1ad0      	subs	r0, r2, r3
 801ef76:	bd10      	pop	{r4, pc}
 801ef78:	4610      	mov	r0, r2
 801ef7a:	e7fc      	b.n	801ef76 <strncmp+0x1e>

0801ef7c <strncpy>:
 801ef7c:	b510      	push	{r4, lr}
 801ef7e:	3901      	subs	r1, #1
 801ef80:	4603      	mov	r3, r0
 801ef82:	b132      	cbz	r2, 801ef92 <strncpy+0x16>
 801ef84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ef88:	f803 4b01 	strb.w	r4, [r3], #1
 801ef8c:	3a01      	subs	r2, #1
 801ef8e:	2c00      	cmp	r4, #0
 801ef90:	d1f7      	bne.n	801ef82 <strncpy+0x6>
 801ef92:	441a      	add	r2, r3
 801ef94:	2100      	movs	r1, #0
 801ef96:	4293      	cmp	r3, r2
 801ef98:	d100      	bne.n	801ef9c <strncpy+0x20>
 801ef9a:	bd10      	pop	{r4, pc}
 801ef9c:	f803 1b01 	strb.w	r1, [r3], #1
 801efa0:	e7f9      	b.n	801ef96 <strncpy+0x1a>
	...

0801efa4 <_localeconv_r>:
 801efa4:	4800      	ldr	r0, [pc, #0]	@ (801efa8 <_localeconv_r+0x4>)
 801efa6:	4770      	bx	lr
 801efa8:	20000218 	.word	0x20000218

0801efac <_close_r>:
 801efac:	b538      	push	{r3, r4, r5, lr}
 801efae:	4d06      	ldr	r5, [pc, #24]	@ (801efc8 <_close_r+0x1c>)
 801efb0:	2300      	movs	r3, #0
 801efb2:	4604      	mov	r4, r0
 801efb4:	4608      	mov	r0, r1
 801efb6:	602b      	str	r3, [r5, #0]
 801efb8:	f7e7 fd5a 	bl	8006a70 <_close>
 801efbc:	1c43      	adds	r3, r0, #1
 801efbe:	d102      	bne.n	801efc6 <_close_r+0x1a>
 801efc0:	682b      	ldr	r3, [r5, #0]
 801efc2:	b103      	cbz	r3, 801efc6 <_close_r+0x1a>
 801efc4:	6023      	str	r3, [r4, #0]
 801efc6:	bd38      	pop	{r3, r4, r5, pc}
 801efc8:	20014098 	.word	0x20014098

0801efcc <_lseek_r>:
 801efcc:	b538      	push	{r3, r4, r5, lr}
 801efce:	4d07      	ldr	r5, [pc, #28]	@ (801efec <_lseek_r+0x20>)
 801efd0:	4604      	mov	r4, r0
 801efd2:	4608      	mov	r0, r1
 801efd4:	4611      	mov	r1, r2
 801efd6:	2200      	movs	r2, #0
 801efd8:	602a      	str	r2, [r5, #0]
 801efda:	461a      	mov	r2, r3
 801efdc:	f7e7 fd6f 	bl	8006abe <_lseek>
 801efe0:	1c43      	adds	r3, r0, #1
 801efe2:	d102      	bne.n	801efea <_lseek_r+0x1e>
 801efe4:	682b      	ldr	r3, [r5, #0]
 801efe6:	b103      	cbz	r3, 801efea <_lseek_r+0x1e>
 801efe8:	6023      	str	r3, [r4, #0]
 801efea:	bd38      	pop	{r3, r4, r5, pc}
 801efec:	20014098 	.word	0x20014098

0801eff0 <_read_r>:
 801eff0:	b538      	push	{r3, r4, r5, lr}
 801eff2:	4d07      	ldr	r5, [pc, #28]	@ (801f010 <_read_r+0x20>)
 801eff4:	4604      	mov	r4, r0
 801eff6:	4608      	mov	r0, r1
 801eff8:	4611      	mov	r1, r2
 801effa:	2200      	movs	r2, #0
 801effc:	602a      	str	r2, [r5, #0]
 801effe:	461a      	mov	r2, r3
 801f000:	f7e7 fcfd 	bl	80069fe <_read>
 801f004:	1c43      	adds	r3, r0, #1
 801f006:	d102      	bne.n	801f00e <_read_r+0x1e>
 801f008:	682b      	ldr	r3, [r5, #0]
 801f00a:	b103      	cbz	r3, 801f00e <_read_r+0x1e>
 801f00c:	6023      	str	r3, [r4, #0]
 801f00e:	bd38      	pop	{r3, r4, r5, pc}
 801f010:	20014098 	.word	0x20014098

0801f014 <_sbrk_r>:
 801f014:	b538      	push	{r3, r4, r5, lr}
 801f016:	4d06      	ldr	r5, [pc, #24]	@ (801f030 <_sbrk_r+0x1c>)
 801f018:	2300      	movs	r3, #0
 801f01a:	4604      	mov	r4, r0
 801f01c:	4608      	mov	r0, r1
 801f01e:	602b      	str	r3, [r5, #0]
 801f020:	f7e7 fd5a 	bl	8006ad8 <_sbrk>
 801f024:	1c43      	adds	r3, r0, #1
 801f026:	d102      	bne.n	801f02e <_sbrk_r+0x1a>
 801f028:	682b      	ldr	r3, [r5, #0]
 801f02a:	b103      	cbz	r3, 801f02e <_sbrk_r+0x1a>
 801f02c:	6023      	str	r3, [r4, #0]
 801f02e:	bd38      	pop	{r3, r4, r5, pc}
 801f030:	20014098 	.word	0x20014098

0801f034 <_write_r>:
 801f034:	b538      	push	{r3, r4, r5, lr}
 801f036:	4d07      	ldr	r5, [pc, #28]	@ (801f054 <_write_r+0x20>)
 801f038:	4604      	mov	r4, r0
 801f03a:	4608      	mov	r0, r1
 801f03c:	4611      	mov	r1, r2
 801f03e:	2200      	movs	r2, #0
 801f040:	602a      	str	r2, [r5, #0]
 801f042:	461a      	mov	r2, r3
 801f044:	f7e7 fcf8 	bl	8006a38 <_write>
 801f048:	1c43      	adds	r3, r0, #1
 801f04a:	d102      	bne.n	801f052 <_write_r+0x1e>
 801f04c:	682b      	ldr	r3, [r5, #0]
 801f04e:	b103      	cbz	r3, 801f052 <_write_r+0x1e>
 801f050:	6023      	str	r3, [r4, #0]
 801f052:	bd38      	pop	{r3, r4, r5, pc}
 801f054:	20014098 	.word	0x20014098

0801f058 <__errno>:
 801f058:	4b01      	ldr	r3, [pc, #4]	@ (801f060 <__errno+0x8>)
 801f05a:	6818      	ldr	r0, [r3, #0]
 801f05c:	4770      	bx	lr
 801f05e:	bf00      	nop
 801f060:	200000d8 	.word	0x200000d8

0801f064 <__libc_init_array>:
 801f064:	b570      	push	{r4, r5, r6, lr}
 801f066:	4d0d      	ldr	r5, [pc, #52]	@ (801f09c <__libc_init_array+0x38>)
 801f068:	4c0d      	ldr	r4, [pc, #52]	@ (801f0a0 <__libc_init_array+0x3c>)
 801f06a:	1b64      	subs	r4, r4, r5
 801f06c:	10a4      	asrs	r4, r4, #2
 801f06e:	2600      	movs	r6, #0
 801f070:	42a6      	cmp	r6, r4
 801f072:	d109      	bne.n	801f088 <__libc_init_array+0x24>
 801f074:	4d0b      	ldr	r5, [pc, #44]	@ (801f0a4 <__libc_init_array+0x40>)
 801f076:	4c0c      	ldr	r4, [pc, #48]	@ (801f0a8 <__libc_init_array+0x44>)
 801f078:	f001 fd8c 	bl	8020b94 <_init>
 801f07c:	1b64      	subs	r4, r4, r5
 801f07e:	10a4      	asrs	r4, r4, #2
 801f080:	2600      	movs	r6, #0
 801f082:	42a6      	cmp	r6, r4
 801f084:	d105      	bne.n	801f092 <__libc_init_array+0x2e>
 801f086:	bd70      	pop	{r4, r5, r6, pc}
 801f088:	f855 3b04 	ldr.w	r3, [r5], #4
 801f08c:	4798      	blx	r3
 801f08e:	3601      	adds	r6, #1
 801f090:	e7ee      	b.n	801f070 <__libc_init_array+0xc>
 801f092:	f855 3b04 	ldr.w	r3, [r5], #4
 801f096:	4798      	blx	r3
 801f098:	3601      	adds	r6, #1
 801f09a:	e7f2      	b.n	801f082 <__libc_init_array+0x1e>
 801f09c:	08071684 	.word	0x08071684
 801f0a0:	08071684 	.word	0x08071684
 801f0a4:	08071684 	.word	0x08071684
 801f0a8:	08071688 	.word	0x08071688

0801f0ac <__retarget_lock_init_recursive>:
 801f0ac:	4770      	bx	lr

0801f0ae <__retarget_lock_acquire_recursive>:
 801f0ae:	4770      	bx	lr

0801f0b0 <__retarget_lock_release_recursive>:
 801f0b0:	4770      	bx	lr

0801f0b2 <strcpy>:
 801f0b2:	4603      	mov	r3, r0
 801f0b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0b8:	f803 2b01 	strb.w	r2, [r3], #1
 801f0bc:	2a00      	cmp	r2, #0
 801f0be:	d1f9      	bne.n	801f0b4 <strcpy+0x2>
 801f0c0:	4770      	bx	lr

0801f0c2 <memcpy>:
 801f0c2:	440a      	add	r2, r1
 801f0c4:	4291      	cmp	r1, r2
 801f0c6:	f100 33ff 	add.w	r3, r0, #4294967295
 801f0ca:	d100      	bne.n	801f0ce <memcpy+0xc>
 801f0cc:	4770      	bx	lr
 801f0ce:	b510      	push	{r4, lr}
 801f0d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f0d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f0d8:	4291      	cmp	r1, r2
 801f0da:	d1f9      	bne.n	801f0d0 <memcpy+0xe>
 801f0dc:	bd10      	pop	{r4, pc}
	...

0801f0e0 <__assert_func>:
 801f0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f0e2:	4614      	mov	r4, r2
 801f0e4:	461a      	mov	r2, r3
 801f0e6:	4b09      	ldr	r3, [pc, #36]	@ (801f10c <__assert_func+0x2c>)
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	4605      	mov	r5, r0
 801f0ec:	68d8      	ldr	r0, [r3, #12]
 801f0ee:	b954      	cbnz	r4, 801f106 <__assert_func+0x26>
 801f0f0:	4b07      	ldr	r3, [pc, #28]	@ (801f110 <__assert_func+0x30>)
 801f0f2:	461c      	mov	r4, r3
 801f0f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f0f8:	9100      	str	r1, [sp, #0]
 801f0fa:	462b      	mov	r3, r5
 801f0fc:	4905      	ldr	r1, [pc, #20]	@ (801f114 <__assert_func+0x34>)
 801f0fe:	f001 fc15 	bl	802092c <fiprintf>
 801f102:	f001 fcdd 	bl	8020ac0 <abort>
 801f106:	4b04      	ldr	r3, [pc, #16]	@ (801f118 <__assert_func+0x38>)
 801f108:	e7f4      	b.n	801f0f4 <__assert_func+0x14>
 801f10a:	bf00      	nop
 801f10c:	200000d8 	.word	0x200000d8
 801f110:	08071493 	.word	0x08071493
 801f114:	08071465 	.word	0x08071465
 801f118:	08071458 	.word	0x08071458

0801f11c <quorem>:
 801f11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f120:	6903      	ldr	r3, [r0, #16]
 801f122:	690c      	ldr	r4, [r1, #16]
 801f124:	42a3      	cmp	r3, r4
 801f126:	4607      	mov	r7, r0
 801f128:	db7e      	blt.n	801f228 <quorem+0x10c>
 801f12a:	3c01      	subs	r4, #1
 801f12c:	f101 0814 	add.w	r8, r1, #20
 801f130:	00a3      	lsls	r3, r4, #2
 801f132:	f100 0514 	add.w	r5, r0, #20
 801f136:	9300      	str	r3, [sp, #0]
 801f138:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f13c:	9301      	str	r3, [sp, #4]
 801f13e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f146:	3301      	adds	r3, #1
 801f148:	429a      	cmp	r2, r3
 801f14a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f14e:	fbb2 f6f3 	udiv	r6, r2, r3
 801f152:	d32e      	bcc.n	801f1b2 <quorem+0x96>
 801f154:	f04f 0a00 	mov.w	sl, #0
 801f158:	46c4      	mov	ip, r8
 801f15a:	46ae      	mov	lr, r5
 801f15c:	46d3      	mov	fp, sl
 801f15e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f162:	b298      	uxth	r0, r3
 801f164:	fb06 a000 	mla	r0, r6, r0, sl
 801f168:	0c02      	lsrs	r2, r0, #16
 801f16a:	0c1b      	lsrs	r3, r3, #16
 801f16c:	fb06 2303 	mla	r3, r6, r3, r2
 801f170:	f8de 2000 	ldr.w	r2, [lr]
 801f174:	b280      	uxth	r0, r0
 801f176:	b292      	uxth	r2, r2
 801f178:	1a12      	subs	r2, r2, r0
 801f17a:	445a      	add	r2, fp
 801f17c:	f8de 0000 	ldr.w	r0, [lr]
 801f180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f184:	b29b      	uxth	r3, r3
 801f186:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f18a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f18e:	b292      	uxth	r2, r2
 801f190:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f194:	45e1      	cmp	r9, ip
 801f196:	f84e 2b04 	str.w	r2, [lr], #4
 801f19a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f19e:	d2de      	bcs.n	801f15e <quorem+0x42>
 801f1a0:	9b00      	ldr	r3, [sp, #0]
 801f1a2:	58eb      	ldr	r3, [r5, r3]
 801f1a4:	b92b      	cbnz	r3, 801f1b2 <quorem+0x96>
 801f1a6:	9b01      	ldr	r3, [sp, #4]
 801f1a8:	3b04      	subs	r3, #4
 801f1aa:	429d      	cmp	r5, r3
 801f1ac:	461a      	mov	r2, r3
 801f1ae:	d32f      	bcc.n	801f210 <quorem+0xf4>
 801f1b0:	613c      	str	r4, [r7, #16]
 801f1b2:	4638      	mov	r0, r7
 801f1b4:	f001 f8c4 	bl	8020340 <__mcmp>
 801f1b8:	2800      	cmp	r0, #0
 801f1ba:	db25      	blt.n	801f208 <quorem+0xec>
 801f1bc:	4629      	mov	r1, r5
 801f1be:	2000      	movs	r0, #0
 801f1c0:	f858 2b04 	ldr.w	r2, [r8], #4
 801f1c4:	f8d1 c000 	ldr.w	ip, [r1]
 801f1c8:	fa1f fe82 	uxth.w	lr, r2
 801f1cc:	fa1f f38c 	uxth.w	r3, ip
 801f1d0:	eba3 030e 	sub.w	r3, r3, lr
 801f1d4:	4403      	add	r3, r0
 801f1d6:	0c12      	lsrs	r2, r2, #16
 801f1d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f1dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f1e0:	b29b      	uxth	r3, r3
 801f1e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f1e6:	45c1      	cmp	r9, r8
 801f1e8:	f841 3b04 	str.w	r3, [r1], #4
 801f1ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f1f0:	d2e6      	bcs.n	801f1c0 <quorem+0xa4>
 801f1f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f1f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f1fa:	b922      	cbnz	r2, 801f206 <quorem+0xea>
 801f1fc:	3b04      	subs	r3, #4
 801f1fe:	429d      	cmp	r5, r3
 801f200:	461a      	mov	r2, r3
 801f202:	d30b      	bcc.n	801f21c <quorem+0x100>
 801f204:	613c      	str	r4, [r7, #16]
 801f206:	3601      	adds	r6, #1
 801f208:	4630      	mov	r0, r6
 801f20a:	b003      	add	sp, #12
 801f20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f210:	6812      	ldr	r2, [r2, #0]
 801f212:	3b04      	subs	r3, #4
 801f214:	2a00      	cmp	r2, #0
 801f216:	d1cb      	bne.n	801f1b0 <quorem+0x94>
 801f218:	3c01      	subs	r4, #1
 801f21a:	e7c6      	b.n	801f1aa <quorem+0x8e>
 801f21c:	6812      	ldr	r2, [r2, #0]
 801f21e:	3b04      	subs	r3, #4
 801f220:	2a00      	cmp	r2, #0
 801f222:	d1ef      	bne.n	801f204 <quorem+0xe8>
 801f224:	3c01      	subs	r4, #1
 801f226:	e7ea      	b.n	801f1fe <quorem+0xe2>
 801f228:	2000      	movs	r0, #0
 801f22a:	e7ee      	b.n	801f20a <quorem+0xee>
 801f22c:	0000      	movs	r0, r0
	...

0801f230 <_dtoa_r>:
 801f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f234:	69c7      	ldr	r7, [r0, #28]
 801f236:	b099      	sub	sp, #100	@ 0x64
 801f238:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f23c:	ec55 4b10 	vmov	r4, r5, d0
 801f240:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f242:	9109      	str	r1, [sp, #36]	@ 0x24
 801f244:	4683      	mov	fp, r0
 801f246:	920e      	str	r2, [sp, #56]	@ 0x38
 801f248:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f24a:	b97f      	cbnz	r7, 801f26c <_dtoa_r+0x3c>
 801f24c:	2010      	movs	r0, #16
 801f24e:	f7fe fe83 	bl	801df58 <malloc>
 801f252:	4602      	mov	r2, r0
 801f254:	f8cb 001c 	str.w	r0, [fp, #28]
 801f258:	b920      	cbnz	r0, 801f264 <_dtoa_r+0x34>
 801f25a:	4ba7      	ldr	r3, [pc, #668]	@ (801f4f8 <_dtoa_r+0x2c8>)
 801f25c:	21ef      	movs	r1, #239	@ 0xef
 801f25e:	48a7      	ldr	r0, [pc, #668]	@ (801f4fc <_dtoa_r+0x2cc>)
 801f260:	f7ff ff3e 	bl	801f0e0 <__assert_func>
 801f264:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f268:	6007      	str	r7, [r0, #0]
 801f26a:	60c7      	str	r7, [r0, #12]
 801f26c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f270:	6819      	ldr	r1, [r3, #0]
 801f272:	b159      	cbz	r1, 801f28c <_dtoa_r+0x5c>
 801f274:	685a      	ldr	r2, [r3, #4]
 801f276:	604a      	str	r2, [r1, #4]
 801f278:	2301      	movs	r3, #1
 801f27a:	4093      	lsls	r3, r2
 801f27c:	608b      	str	r3, [r1, #8]
 801f27e:	4658      	mov	r0, fp
 801f280:	f000 fe24 	bl	801fecc <_Bfree>
 801f284:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f288:	2200      	movs	r2, #0
 801f28a:	601a      	str	r2, [r3, #0]
 801f28c:	1e2b      	subs	r3, r5, #0
 801f28e:	bfb9      	ittee	lt
 801f290:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f294:	9303      	strlt	r3, [sp, #12]
 801f296:	2300      	movge	r3, #0
 801f298:	6033      	strge	r3, [r6, #0]
 801f29a:	9f03      	ldr	r7, [sp, #12]
 801f29c:	4b98      	ldr	r3, [pc, #608]	@ (801f500 <_dtoa_r+0x2d0>)
 801f29e:	bfbc      	itt	lt
 801f2a0:	2201      	movlt	r2, #1
 801f2a2:	6032      	strlt	r2, [r6, #0]
 801f2a4:	43bb      	bics	r3, r7
 801f2a6:	d112      	bne.n	801f2ce <_dtoa_r+0x9e>
 801f2a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f2aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f2ae:	6013      	str	r3, [r2, #0]
 801f2b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f2b4:	4323      	orrs	r3, r4
 801f2b6:	f000 854d 	beq.w	801fd54 <_dtoa_r+0xb24>
 801f2ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f2bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f514 <_dtoa_r+0x2e4>
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	f000 854f 	beq.w	801fd64 <_dtoa_r+0xb34>
 801f2c6:	f10a 0303 	add.w	r3, sl, #3
 801f2ca:	f000 bd49 	b.w	801fd60 <_dtoa_r+0xb30>
 801f2ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2d2:	2200      	movs	r2, #0
 801f2d4:	ec51 0b17 	vmov	r0, r1, d7
 801f2d8:	2300      	movs	r3, #0
 801f2da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f2de:	f7e1 fc0b 	bl	8000af8 <__aeabi_dcmpeq>
 801f2e2:	4680      	mov	r8, r0
 801f2e4:	b158      	cbz	r0, 801f2fe <_dtoa_r+0xce>
 801f2e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f2e8:	2301      	movs	r3, #1
 801f2ea:	6013      	str	r3, [r2, #0]
 801f2ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f2ee:	b113      	cbz	r3, 801f2f6 <_dtoa_r+0xc6>
 801f2f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f2f2:	4b84      	ldr	r3, [pc, #528]	@ (801f504 <_dtoa_r+0x2d4>)
 801f2f4:	6013      	str	r3, [r2, #0]
 801f2f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f518 <_dtoa_r+0x2e8>
 801f2fa:	f000 bd33 	b.w	801fd64 <_dtoa_r+0xb34>
 801f2fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f302:	aa16      	add	r2, sp, #88	@ 0x58
 801f304:	a917      	add	r1, sp, #92	@ 0x5c
 801f306:	4658      	mov	r0, fp
 801f308:	f001 f8ca 	bl	80204a0 <__d2b>
 801f30c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f310:	4681      	mov	r9, r0
 801f312:	2e00      	cmp	r6, #0
 801f314:	d077      	beq.n	801f406 <_dtoa_r+0x1d6>
 801f316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f318:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f31c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f324:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f328:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f32c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f330:	4619      	mov	r1, r3
 801f332:	2200      	movs	r2, #0
 801f334:	4b74      	ldr	r3, [pc, #464]	@ (801f508 <_dtoa_r+0x2d8>)
 801f336:	f7e0 ffbf 	bl	80002b8 <__aeabi_dsub>
 801f33a:	a369      	add	r3, pc, #420	@ (adr r3, 801f4e0 <_dtoa_r+0x2b0>)
 801f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f340:	f7e1 f972 	bl	8000628 <__aeabi_dmul>
 801f344:	a368      	add	r3, pc, #416	@ (adr r3, 801f4e8 <_dtoa_r+0x2b8>)
 801f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f34a:	f7e0 ffb7 	bl	80002bc <__adddf3>
 801f34e:	4604      	mov	r4, r0
 801f350:	4630      	mov	r0, r6
 801f352:	460d      	mov	r5, r1
 801f354:	f7e1 f8fe 	bl	8000554 <__aeabi_i2d>
 801f358:	a365      	add	r3, pc, #404	@ (adr r3, 801f4f0 <_dtoa_r+0x2c0>)
 801f35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f35e:	f7e1 f963 	bl	8000628 <__aeabi_dmul>
 801f362:	4602      	mov	r2, r0
 801f364:	460b      	mov	r3, r1
 801f366:	4620      	mov	r0, r4
 801f368:	4629      	mov	r1, r5
 801f36a:	f7e0 ffa7 	bl	80002bc <__adddf3>
 801f36e:	4604      	mov	r4, r0
 801f370:	460d      	mov	r5, r1
 801f372:	f7e1 fc09 	bl	8000b88 <__aeabi_d2iz>
 801f376:	2200      	movs	r2, #0
 801f378:	4607      	mov	r7, r0
 801f37a:	2300      	movs	r3, #0
 801f37c:	4620      	mov	r0, r4
 801f37e:	4629      	mov	r1, r5
 801f380:	f7e1 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 801f384:	b140      	cbz	r0, 801f398 <_dtoa_r+0x168>
 801f386:	4638      	mov	r0, r7
 801f388:	f7e1 f8e4 	bl	8000554 <__aeabi_i2d>
 801f38c:	4622      	mov	r2, r4
 801f38e:	462b      	mov	r3, r5
 801f390:	f7e1 fbb2 	bl	8000af8 <__aeabi_dcmpeq>
 801f394:	b900      	cbnz	r0, 801f398 <_dtoa_r+0x168>
 801f396:	3f01      	subs	r7, #1
 801f398:	2f16      	cmp	r7, #22
 801f39a:	d851      	bhi.n	801f440 <_dtoa_r+0x210>
 801f39c:	4b5b      	ldr	r3, [pc, #364]	@ (801f50c <_dtoa_r+0x2dc>)
 801f39e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f3aa:	f7e1 fbaf 	bl	8000b0c <__aeabi_dcmplt>
 801f3ae:	2800      	cmp	r0, #0
 801f3b0:	d048      	beq.n	801f444 <_dtoa_r+0x214>
 801f3b2:	3f01      	subs	r7, #1
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	9312      	str	r3, [sp, #72]	@ 0x48
 801f3b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f3ba:	1b9b      	subs	r3, r3, r6
 801f3bc:	1e5a      	subs	r2, r3, #1
 801f3be:	bf44      	itt	mi
 801f3c0:	f1c3 0801 	rsbmi	r8, r3, #1
 801f3c4:	2300      	movmi	r3, #0
 801f3c6:	9208      	str	r2, [sp, #32]
 801f3c8:	bf54      	ite	pl
 801f3ca:	f04f 0800 	movpl.w	r8, #0
 801f3ce:	9308      	strmi	r3, [sp, #32]
 801f3d0:	2f00      	cmp	r7, #0
 801f3d2:	db39      	blt.n	801f448 <_dtoa_r+0x218>
 801f3d4:	9b08      	ldr	r3, [sp, #32]
 801f3d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f3d8:	443b      	add	r3, r7
 801f3da:	9308      	str	r3, [sp, #32]
 801f3dc:	2300      	movs	r3, #0
 801f3de:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3e2:	2b09      	cmp	r3, #9
 801f3e4:	d864      	bhi.n	801f4b0 <_dtoa_r+0x280>
 801f3e6:	2b05      	cmp	r3, #5
 801f3e8:	bfc4      	itt	gt
 801f3ea:	3b04      	subgt	r3, #4
 801f3ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3f0:	f1a3 0302 	sub.w	r3, r3, #2
 801f3f4:	bfcc      	ite	gt
 801f3f6:	2400      	movgt	r4, #0
 801f3f8:	2401      	movle	r4, #1
 801f3fa:	2b03      	cmp	r3, #3
 801f3fc:	d863      	bhi.n	801f4c6 <_dtoa_r+0x296>
 801f3fe:	e8df f003 	tbb	[pc, r3]
 801f402:	372a      	.short	0x372a
 801f404:	5535      	.short	0x5535
 801f406:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f40a:	441e      	add	r6, r3
 801f40c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f410:	2b20      	cmp	r3, #32
 801f412:	bfc1      	itttt	gt
 801f414:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f418:	409f      	lslgt	r7, r3
 801f41a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f41e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f422:	bfd6      	itet	le
 801f424:	f1c3 0320 	rsble	r3, r3, #32
 801f428:	ea47 0003 	orrgt.w	r0, r7, r3
 801f42c:	fa04 f003 	lslle.w	r0, r4, r3
 801f430:	f7e1 f880 	bl	8000534 <__aeabi_ui2d>
 801f434:	2201      	movs	r2, #1
 801f436:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f43a:	3e01      	subs	r6, #1
 801f43c:	9214      	str	r2, [sp, #80]	@ 0x50
 801f43e:	e777      	b.n	801f330 <_dtoa_r+0x100>
 801f440:	2301      	movs	r3, #1
 801f442:	e7b8      	b.n	801f3b6 <_dtoa_r+0x186>
 801f444:	9012      	str	r0, [sp, #72]	@ 0x48
 801f446:	e7b7      	b.n	801f3b8 <_dtoa_r+0x188>
 801f448:	427b      	negs	r3, r7
 801f44a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f44c:	2300      	movs	r3, #0
 801f44e:	eba8 0807 	sub.w	r8, r8, r7
 801f452:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f454:	e7c4      	b.n	801f3e0 <_dtoa_r+0x1b0>
 801f456:	2300      	movs	r3, #0
 801f458:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f45a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	dc35      	bgt.n	801f4cc <_dtoa_r+0x29c>
 801f460:	2301      	movs	r3, #1
 801f462:	9300      	str	r3, [sp, #0]
 801f464:	9307      	str	r3, [sp, #28]
 801f466:	461a      	mov	r2, r3
 801f468:	920e      	str	r2, [sp, #56]	@ 0x38
 801f46a:	e00b      	b.n	801f484 <_dtoa_r+0x254>
 801f46c:	2301      	movs	r3, #1
 801f46e:	e7f3      	b.n	801f458 <_dtoa_r+0x228>
 801f470:	2300      	movs	r3, #0
 801f472:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f476:	18fb      	adds	r3, r7, r3
 801f478:	9300      	str	r3, [sp, #0]
 801f47a:	3301      	adds	r3, #1
 801f47c:	2b01      	cmp	r3, #1
 801f47e:	9307      	str	r3, [sp, #28]
 801f480:	bfb8      	it	lt
 801f482:	2301      	movlt	r3, #1
 801f484:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f488:	2100      	movs	r1, #0
 801f48a:	2204      	movs	r2, #4
 801f48c:	f102 0514 	add.w	r5, r2, #20
 801f490:	429d      	cmp	r5, r3
 801f492:	d91f      	bls.n	801f4d4 <_dtoa_r+0x2a4>
 801f494:	6041      	str	r1, [r0, #4]
 801f496:	4658      	mov	r0, fp
 801f498:	f000 fcd8 	bl	801fe4c <_Balloc>
 801f49c:	4682      	mov	sl, r0
 801f49e:	2800      	cmp	r0, #0
 801f4a0:	d13c      	bne.n	801f51c <_dtoa_r+0x2ec>
 801f4a2:	4b1b      	ldr	r3, [pc, #108]	@ (801f510 <_dtoa_r+0x2e0>)
 801f4a4:	4602      	mov	r2, r0
 801f4a6:	f240 11af 	movw	r1, #431	@ 0x1af
 801f4aa:	e6d8      	b.n	801f25e <_dtoa_r+0x2e>
 801f4ac:	2301      	movs	r3, #1
 801f4ae:	e7e0      	b.n	801f472 <_dtoa_r+0x242>
 801f4b0:	2401      	movs	r4, #1
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f4b8:	f04f 33ff 	mov.w	r3, #4294967295
 801f4bc:	9300      	str	r3, [sp, #0]
 801f4be:	9307      	str	r3, [sp, #28]
 801f4c0:	2200      	movs	r2, #0
 801f4c2:	2312      	movs	r3, #18
 801f4c4:	e7d0      	b.n	801f468 <_dtoa_r+0x238>
 801f4c6:	2301      	movs	r3, #1
 801f4c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4ca:	e7f5      	b.n	801f4b8 <_dtoa_r+0x288>
 801f4cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4ce:	9300      	str	r3, [sp, #0]
 801f4d0:	9307      	str	r3, [sp, #28]
 801f4d2:	e7d7      	b.n	801f484 <_dtoa_r+0x254>
 801f4d4:	3101      	adds	r1, #1
 801f4d6:	0052      	lsls	r2, r2, #1
 801f4d8:	e7d8      	b.n	801f48c <_dtoa_r+0x25c>
 801f4da:	bf00      	nop
 801f4dc:	f3af 8000 	nop.w
 801f4e0:	636f4361 	.word	0x636f4361
 801f4e4:	3fd287a7 	.word	0x3fd287a7
 801f4e8:	8b60c8b3 	.word	0x8b60c8b3
 801f4ec:	3fc68a28 	.word	0x3fc68a28
 801f4f0:	509f79fb 	.word	0x509f79fb
 801f4f4:	3fd34413 	.word	0x3fd34413
 801f4f8:	080712b4 	.word	0x080712b4
 801f4fc:	080714a1 	.word	0x080714a1
 801f500:	7ff00000 	.word	0x7ff00000
 801f504:	08071435 	.word	0x08071435
 801f508:	3ff80000 	.word	0x3ff80000
 801f50c:	08071598 	.word	0x08071598
 801f510:	080714f9 	.word	0x080714f9
 801f514:	0807149d 	.word	0x0807149d
 801f518:	08071434 	.word	0x08071434
 801f51c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f520:	6018      	str	r0, [r3, #0]
 801f522:	9b07      	ldr	r3, [sp, #28]
 801f524:	2b0e      	cmp	r3, #14
 801f526:	f200 80a4 	bhi.w	801f672 <_dtoa_r+0x442>
 801f52a:	2c00      	cmp	r4, #0
 801f52c:	f000 80a1 	beq.w	801f672 <_dtoa_r+0x442>
 801f530:	2f00      	cmp	r7, #0
 801f532:	dd33      	ble.n	801f59c <_dtoa_r+0x36c>
 801f534:	4bad      	ldr	r3, [pc, #692]	@ (801f7ec <_dtoa_r+0x5bc>)
 801f536:	f007 020f 	and.w	r2, r7, #15
 801f53a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f53e:	ed93 7b00 	vldr	d7, [r3]
 801f542:	05f8      	lsls	r0, r7, #23
 801f544:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f548:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f54c:	d516      	bpl.n	801f57c <_dtoa_r+0x34c>
 801f54e:	4ba8      	ldr	r3, [pc, #672]	@ (801f7f0 <_dtoa_r+0x5c0>)
 801f550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f558:	f7e1 f990 	bl	800087c <__aeabi_ddiv>
 801f55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f560:	f004 040f 	and.w	r4, r4, #15
 801f564:	2603      	movs	r6, #3
 801f566:	4da2      	ldr	r5, [pc, #648]	@ (801f7f0 <_dtoa_r+0x5c0>)
 801f568:	b954      	cbnz	r4, 801f580 <_dtoa_r+0x350>
 801f56a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f572:	f7e1 f983 	bl	800087c <__aeabi_ddiv>
 801f576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f57a:	e028      	b.n	801f5ce <_dtoa_r+0x39e>
 801f57c:	2602      	movs	r6, #2
 801f57e:	e7f2      	b.n	801f566 <_dtoa_r+0x336>
 801f580:	07e1      	lsls	r1, r4, #31
 801f582:	d508      	bpl.n	801f596 <_dtoa_r+0x366>
 801f584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f588:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f58c:	f7e1 f84c 	bl	8000628 <__aeabi_dmul>
 801f590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f594:	3601      	adds	r6, #1
 801f596:	1064      	asrs	r4, r4, #1
 801f598:	3508      	adds	r5, #8
 801f59a:	e7e5      	b.n	801f568 <_dtoa_r+0x338>
 801f59c:	f000 80d2 	beq.w	801f744 <_dtoa_r+0x514>
 801f5a0:	427c      	negs	r4, r7
 801f5a2:	4b92      	ldr	r3, [pc, #584]	@ (801f7ec <_dtoa_r+0x5bc>)
 801f5a4:	4d92      	ldr	r5, [pc, #584]	@ (801f7f0 <_dtoa_r+0x5c0>)
 801f5a6:	f004 020f 	and.w	r2, r4, #15
 801f5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f5b6:	f7e1 f837 	bl	8000628 <__aeabi_dmul>
 801f5ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f5be:	1124      	asrs	r4, r4, #4
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	2602      	movs	r6, #2
 801f5c4:	2c00      	cmp	r4, #0
 801f5c6:	f040 80b2 	bne.w	801f72e <_dtoa_r+0x4fe>
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d1d3      	bne.n	801f576 <_dtoa_r+0x346>
 801f5ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f5d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	f000 80b7 	beq.w	801f748 <_dtoa_r+0x518>
 801f5da:	4b86      	ldr	r3, [pc, #536]	@ (801f7f4 <_dtoa_r+0x5c4>)
 801f5dc:	2200      	movs	r2, #0
 801f5de:	4620      	mov	r0, r4
 801f5e0:	4629      	mov	r1, r5
 801f5e2:	f7e1 fa93 	bl	8000b0c <__aeabi_dcmplt>
 801f5e6:	2800      	cmp	r0, #0
 801f5e8:	f000 80ae 	beq.w	801f748 <_dtoa_r+0x518>
 801f5ec:	9b07      	ldr	r3, [sp, #28]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	f000 80aa 	beq.w	801f748 <_dtoa_r+0x518>
 801f5f4:	9b00      	ldr	r3, [sp, #0]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	dd37      	ble.n	801f66a <_dtoa_r+0x43a>
 801f5fa:	1e7b      	subs	r3, r7, #1
 801f5fc:	9304      	str	r3, [sp, #16]
 801f5fe:	4620      	mov	r0, r4
 801f600:	4b7d      	ldr	r3, [pc, #500]	@ (801f7f8 <_dtoa_r+0x5c8>)
 801f602:	2200      	movs	r2, #0
 801f604:	4629      	mov	r1, r5
 801f606:	f7e1 f80f 	bl	8000628 <__aeabi_dmul>
 801f60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f60e:	9c00      	ldr	r4, [sp, #0]
 801f610:	3601      	adds	r6, #1
 801f612:	4630      	mov	r0, r6
 801f614:	f7e0 ff9e 	bl	8000554 <__aeabi_i2d>
 801f618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f61c:	f7e1 f804 	bl	8000628 <__aeabi_dmul>
 801f620:	4b76      	ldr	r3, [pc, #472]	@ (801f7fc <_dtoa_r+0x5cc>)
 801f622:	2200      	movs	r2, #0
 801f624:	f7e0 fe4a 	bl	80002bc <__adddf3>
 801f628:	4605      	mov	r5, r0
 801f62a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f62e:	2c00      	cmp	r4, #0
 801f630:	f040 808d 	bne.w	801f74e <_dtoa_r+0x51e>
 801f634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f638:	4b71      	ldr	r3, [pc, #452]	@ (801f800 <_dtoa_r+0x5d0>)
 801f63a:	2200      	movs	r2, #0
 801f63c:	f7e0 fe3c 	bl	80002b8 <__aeabi_dsub>
 801f640:	4602      	mov	r2, r0
 801f642:	460b      	mov	r3, r1
 801f644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f648:	462a      	mov	r2, r5
 801f64a:	4633      	mov	r3, r6
 801f64c:	f7e1 fa7c 	bl	8000b48 <__aeabi_dcmpgt>
 801f650:	2800      	cmp	r0, #0
 801f652:	f040 828b 	bne.w	801fb6c <_dtoa_r+0x93c>
 801f656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f65a:	462a      	mov	r2, r5
 801f65c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f660:	f7e1 fa54 	bl	8000b0c <__aeabi_dcmplt>
 801f664:	2800      	cmp	r0, #0
 801f666:	f040 8128 	bne.w	801f8ba <_dtoa_r+0x68a>
 801f66a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f66e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f674:	2b00      	cmp	r3, #0
 801f676:	f2c0 815a 	blt.w	801f92e <_dtoa_r+0x6fe>
 801f67a:	2f0e      	cmp	r7, #14
 801f67c:	f300 8157 	bgt.w	801f92e <_dtoa_r+0x6fe>
 801f680:	4b5a      	ldr	r3, [pc, #360]	@ (801f7ec <_dtoa_r+0x5bc>)
 801f682:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f686:	ed93 7b00 	vldr	d7, [r3]
 801f68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	ed8d 7b00 	vstr	d7, [sp]
 801f692:	da03      	bge.n	801f69c <_dtoa_r+0x46c>
 801f694:	9b07      	ldr	r3, [sp, #28]
 801f696:	2b00      	cmp	r3, #0
 801f698:	f340 8101 	ble.w	801f89e <_dtoa_r+0x66e>
 801f69c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f6a0:	4656      	mov	r6, sl
 801f6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6a6:	4620      	mov	r0, r4
 801f6a8:	4629      	mov	r1, r5
 801f6aa:	f7e1 f8e7 	bl	800087c <__aeabi_ddiv>
 801f6ae:	f7e1 fa6b 	bl	8000b88 <__aeabi_d2iz>
 801f6b2:	4680      	mov	r8, r0
 801f6b4:	f7e0 ff4e 	bl	8000554 <__aeabi_i2d>
 801f6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6bc:	f7e0 ffb4 	bl	8000628 <__aeabi_dmul>
 801f6c0:	4602      	mov	r2, r0
 801f6c2:	460b      	mov	r3, r1
 801f6c4:	4620      	mov	r0, r4
 801f6c6:	4629      	mov	r1, r5
 801f6c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f6cc:	f7e0 fdf4 	bl	80002b8 <__aeabi_dsub>
 801f6d0:	f806 4b01 	strb.w	r4, [r6], #1
 801f6d4:	9d07      	ldr	r5, [sp, #28]
 801f6d6:	eba6 040a 	sub.w	r4, r6, sl
 801f6da:	42a5      	cmp	r5, r4
 801f6dc:	4602      	mov	r2, r0
 801f6de:	460b      	mov	r3, r1
 801f6e0:	f040 8117 	bne.w	801f912 <_dtoa_r+0x6e2>
 801f6e4:	f7e0 fdea 	bl	80002bc <__adddf3>
 801f6e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6ec:	4604      	mov	r4, r0
 801f6ee:	460d      	mov	r5, r1
 801f6f0:	f7e1 fa2a 	bl	8000b48 <__aeabi_dcmpgt>
 801f6f4:	2800      	cmp	r0, #0
 801f6f6:	f040 80f9 	bne.w	801f8ec <_dtoa_r+0x6bc>
 801f6fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6fe:	4620      	mov	r0, r4
 801f700:	4629      	mov	r1, r5
 801f702:	f7e1 f9f9 	bl	8000af8 <__aeabi_dcmpeq>
 801f706:	b118      	cbz	r0, 801f710 <_dtoa_r+0x4e0>
 801f708:	f018 0f01 	tst.w	r8, #1
 801f70c:	f040 80ee 	bne.w	801f8ec <_dtoa_r+0x6bc>
 801f710:	4649      	mov	r1, r9
 801f712:	4658      	mov	r0, fp
 801f714:	f000 fbda 	bl	801fecc <_Bfree>
 801f718:	2300      	movs	r3, #0
 801f71a:	7033      	strb	r3, [r6, #0]
 801f71c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f71e:	3701      	adds	r7, #1
 801f720:	601f      	str	r7, [r3, #0]
 801f722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f724:	2b00      	cmp	r3, #0
 801f726:	f000 831d 	beq.w	801fd64 <_dtoa_r+0xb34>
 801f72a:	601e      	str	r6, [r3, #0]
 801f72c:	e31a      	b.n	801fd64 <_dtoa_r+0xb34>
 801f72e:	07e2      	lsls	r2, r4, #31
 801f730:	d505      	bpl.n	801f73e <_dtoa_r+0x50e>
 801f732:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f736:	f7e0 ff77 	bl	8000628 <__aeabi_dmul>
 801f73a:	3601      	adds	r6, #1
 801f73c:	2301      	movs	r3, #1
 801f73e:	1064      	asrs	r4, r4, #1
 801f740:	3508      	adds	r5, #8
 801f742:	e73f      	b.n	801f5c4 <_dtoa_r+0x394>
 801f744:	2602      	movs	r6, #2
 801f746:	e742      	b.n	801f5ce <_dtoa_r+0x39e>
 801f748:	9c07      	ldr	r4, [sp, #28]
 801f74a:	9704      	str	r7, [sp, #16]
 801f74c:	e761      	b.n	801f612 <_dtoa_r+0x3e2>
 801f74e:	4b27      	ldr	r3, [pc, #156]	@ (801f7ec <_dtoa_r+0x5bc>)
 801f750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f752:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f756:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f75a:	4454      	add	r4, sl
 801f75c:	2900      	cmp	r1, #0
 801f75e:	d053      	beq.n	801f808 <_dtoa_r+0x5d8>
 801f760:	4928      	ldr	r1, [pc, #160]	@ (801f804 <_dtoa_r+0x5d4>)
 801f762:	2000      	movs	r0, #0
 801f764:	f7e1 f88a 	bl	800087c <__aeabi_ddiv>
 801f768:	4633      	mov	r3, r6
 801f76a:	462a      	mov	r2, r5
 801f76c:	f7e0 fda4 	bl	80002b8 <__aeabi_dsub>
 801f770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f774:	4656      	mov	r6, sl
 801f776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f77a:	f7e1 fa05 	bl	8000b88 <__aeabi_d2iz>
 801f77e:	4605      	mov	r5, r0
 801f780:	f7e0 fee8 	bl	8000554 <__aeabi_i2d>
 801f784:	4602      	mov	r2, r0
 801f786:	460b      	mov	r3, r1
 801f788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f78c:	f7e0 fd94 	bl	80002b8 <__aeabi_dsub>
 801f790:	3530      	adds	r5, #48	@ 0x30
 801f792:	4602      	mov	r2, r0
 801f794:	460b      	mov	r3, r1
 801f796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f79a:	f806 5b01 	strb.w	r5, [r6], #1
 801f79e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f7a2:	f7e1 f9b3 	bl	8000b0c <__aeabi_dcmplt>
 801f7a6:	2800      	cmp	r0, #0
 801f7a8:	d171      	bne.n	801f88e <_dtoa_r+0x65e>
 801f7aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f7ae:	4911      	ldr	r1, [pc, #68]	@ (801f7f4 <_dtoa_r+0x5c4>)
 801f7b0:	2000      	movs	r0, #0
 801f7b2:	f7e0 fd81 	bl	80002b8 <__aeabi_dsub>
 801f7b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f7ba:	f7e1 f9a7 	bl	8000b0c <__aeabi_dcmplt>
 801f7be:	2800      	cmp	r0, #0
 801f7c0:	f040 8095 	bne.w	801f8ee <_dtoa_r+0x6be>
 801f7c4:	42a6      	cmp	r6, r4
 801f7c6:	f43f af50 	beq.w	801f66a <_dtoa_r+0x43a>
 801f7ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f7ce:	4b0a      	ldr	r3, [pc, #40]	@ (801f7f8 <_dtoa_r+0x5c8>)
 801f7d0:	2200      	movs	r2, #0
 801f7d2:	f7e0 ff29 	bl	8000628 <__aeabi_dmul>
 801f7d6:	4b08      	ldr	r3, [pc, #32]	@ (801f7f8 <_dtoa_r+0x5c8>)
 801f7d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f7dc:	2200      	movs	r2, #0
 801f7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7e2:	f7e0 ff21 	bl	8000628 <__aeabi_dmul>
 801f7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f7ea:	e7c4      	b.n	801f776 <_dtoa_r+0x546>
 801f7ec:	08071598 	.word	0x08071598
 801f7f0:	08071570 	.word	0x08071570
 801f7f4:	3ff00000 	.word	0x3ff00000
 801f7f8:	40240000 	.word	0x40240000
 801f7fc:	401c0000 	.word	0x401c0000
 801f800:	40140000 	.word	0x40140000
 801f804:	3fe00000 	.word	0x3fe00000
 801f808:	4631      	mov	r1, r6
 801f80a:	4628      	mov	r0, r5
 801f80c:	f7e0 ff0c 	bl	8000628 <__aeabi_dmul>
 801f810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f814:	9415      	str	r4, [sp, #84]	@ 0x54
 801f816:	4656      	mov	r6, sl
 801f818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f81c:	f7e1 f9b4 	bl	8000b88 <__aeabi_d2iz>
 801f820:	4605      	mov	r5, r0
 801f822:	f7e0 fe97 	bl	8000554 <__aeabi_i2d>
 801f826:	4602      	mov	r2, r0
 801f828:	460b      	mov	r3, r1
 801f82a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f82e:	f7e0 fd43 	bl	80002b8 <__aeabi_dsub>
 801f832:	3530      	adds	r5, #48	@ 0x30
 801f834:	f806 5b01 	strb.w	r5, [r6], #1
 801f838:	4602      	mov	r2, r0
 801f83a:	460b      	mov	r3, r1
 801f83c:	42a6      	cmp	r6, r4
 801f83e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f842:	f04f 0200 	mov.w	r2, #0
 801f846:	d124      	bne.n	801f892 <_dtoa_r+0x662>
 801f848:	4bac      	ldr	r3, [pc, #688]	@ (801fafc <_dtoa_r+0x8cc>)
 801f84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f84e:	f7e0 fd35 	bl	80002bc <__adddf3>
 801f852:	4602      	mov	r2, r0
 801f854:	460b      	mov	r3, r1
 801f856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f85a:	f7e1 f975 	bl	8000b48 <__aeabi_dcmpgt>
 801f85e:	2800      	cmp	r0, #0
 801f860:	d145      	bne.n	801f8ee <_dtoa_r+0x6be>
 801f862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f866:	49a5      	ldr	r1, [pc, #660]	@ (801fafc <_dtoa_r+0x8cc>)
 801f868:	2000      	movs	r0, #0
 801f86a:	f7e0 fd25 	bl	80002b8 <__aeabi_dsub>
 801f86e:	4602      	mov	r2, r0
 801f870:	460b      	mov	r3, r1
 801f872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f876:	f7e1 f949 	bl	8000b0c <__aeabi_dcmplt>
 801f87a:	2800      	cmp	r0, #0
 801f87c:	f43f aef5 	beq.w	801f66a <_dtoa_r+0x43a>
 801f880:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f882:	1e73      	subs	r3, r6, #1
 801f884:	9315      	str	r3, [sp, #84]	@ 0x54
 801f886:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f88a:	2b30      	cmp	r3, #48	@ 0x30
 801f88c:	d0f8      	beq.n	801f880 <_dtoa_r+0x650>
 801f88e:	9f04      	ldr	r7, [sp, #16]
 801f890:	e73e      	b.n	801f710 <_dtoa_r+0x4e0>
 801f892:	4b9b      	ldr	r3, [pc, #620]	@ (801fb00 <_dtoa_r+0x8d0>)
 801f894:	f7e0 fec8 	bl	8000628 <__aeabi_dmul>
 801f898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f89c:	e7bc      	b.n	801f818 <_dtoa_r+0x5e8>
 801f89e:	d10c      	bne.n	801f8ba <_dtoa_r+0x68a>
 801f8a0:	4b98      	ldr	r3, [pc, #608]	@ (801fb04 <_dtoa_r+0x8d4>)
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f8a8:	f7e0 febe 	bl	8000628 <__aeabi_dmul>
 801f8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f8b0:	f7e1 f940 	bl	8000b34 <__aeabi_dcmpge>
 801f8b4:	2800      	cmp	r0, #0
 801f8b6:	f000 8157 	beq.w	801fb68 <_dtoa_r+0x938>
 801f8ba:	2400      	movs	r4, #0
 801f8bc:	4625      	mov	r5, r4
 801f8be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8c0:	43db      	mvns	r3, r3
 801f8c2:	9304      	str	r3, [sp, #16]
 801f8c4:	4656      	mov	r6, sl
 801f8c6:	2700      	movs	r7, #0
 801f8c8:	4621      	mov	r1, r4
 801f8ca:	4658      	mov	r0, fp
 801f8cc:	f000 fafe 	bl	801fecc <_Bfree>
 801f8d0:	2d00      	cmp	r5, #0
 801f8d2:	d0dc      	beq.n	801f88e <_dtoa_r+0x65e>
 801f8d4:	b12f      	cbz	r7, 801f8e2 <_dtoa_r+0x6b2>
 801f8d6:	42af      	cmp	r7, r5
 801f8d8:	d003      	beq.n	801f8e2 <_dtoa_r+0x6b2>
 801f8da:	4639      	mov	r1, r7
 801f8dc:	4658      	mov	r0, fp
 801f8de:	f000 faf5 	bl	801fecc <_Bfree>
 801f8e2:	4629      	mov	r1, r5
 801f8e4:	4658      	mov	r0, fp
 801f8e6:	f000 faf1 	bl	801fecc <_Bfree>
 801f8ea:	e7d0      	b.n	801f88e <_dtoa_r+0x65e>
 801f8ec:	9704      	str	r7, [sp, #16]
 801f8ee:	4633      	mov	r3, r6
 801f8f0:	461e      	mov	r6, r3
 801f8f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f8f6:	2a39      	cmp	r2, #57	@ 0x39
 801f8f8:	d107      	bne.n	801f90a <_dtoa_r+0x6da>
 801f8fa:	459a      	cmp	sl, r3
 801f8fc:	d1f8      	bne.n	801f8f0 <_dtoa_r+0x6c0>
 801f8fe:	9a04      	ldr	r2, [sp, #16]
 801f900:	3201      	adds	r2, #1
 801f902:	9204      	str	r2, [sp, #16]
 801f904:	2230      	movs	r2, #48	@ 0x30
 801f906:	f88a 2000 	strb.w	r2, [sl]
 801f90a:	781a      	ldrb	r2, [r3, #0]
 801f90c:	3201      	adds	r2, #1
 801f90e:	701a      	strb	r2, [r3, #0]
 801f910:	e7bd      	b.n	801f88e <_dtoa_r+0x65e>
 801f912:	4b7b      	ldr	r3, [pc, #492]	@ (801fb00 <_dtoa_r+0x8d0>)
 801f914:	2200      	movs	r2, #0
 801f916:	f7e0 fe87 	bl	8000628 <__aeabi_dmul>
 801f91a:	2200      	movs	r2, #0
 801f91c:	2300      	movs	r3, #0
 801f91e:	4604      	mov	r4, r0
 801f920:	460d      	mov	r5, r1
 801f922:	f7e1 f8e9 	bl	8000af8 <__aeabi_dcmpeq>
 801f926:	2800      	cmp	r0, #0
 801f928:	f43f aebb 	beq.w	801f6a2 <_dtoa_r+0x472>
 801f92c:	e6f0      	b.n	801f710 <_dtoa_r+0x4e0>
 801f92e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f930:	2a00      	cmp	r2, #0
 801f932:	f000 80db 	beq.w	801faec <_dtoa_r+0x8bc>
 801f936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f938:	2a01      	cmp	r2, #1
 801f93a:	f300 80bf 	bgt.w	801fabc <_dtoa_r+0x88c>
 801f93e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f940:	2a00      	cmp	r2, #0
 801f942:	f000 80b7 	beq.w	801fab4 <_dtoa_r+0x884>
 801f946:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f94a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f94c:	4646      	mov	r6, r8
 801f94e:	9a08      	ldr	r2, [sp, #32]
 801f950:	2101      	movs	r1, #1
 801f952:	441a      	add	r2, r3
 801f954:	4658      	mov	r0, fp
 801f956:	4498      	add	r8, r3
 801f958:	9208      	str	r2, [sp, #32]
 801f95a:	f000 fb6b 	bl	8020034 <__i2b>
 801f95e:	4605      	mov	r5, r0
 801f960:	b15e      	cbz	r6, 801f97a <_dtoa_r+0x74a>
 801f962:	9b08      	ldr	r3, [sp, #32]
 801f964:	2b00      	cmp	r3, #0
 801f966:	dd08      	ble.n	801f97a <_dtoa_r+0x74a>
 801f968:	42b3      	cmp	r3, r6
 801f96a:	9a08      	ldr	r2, [sp, #32]
 801f96c:	bfa8      	it	ge
 801f96e:	4633      	movge	r3, r6
 801f970:	eba8 0803 	sub.w	r8, r8, r3
 801f974:	1af6      	subs	r6, r6, r3
 801f976:	1ad3      	subs	r3, r2, r3
 801f978:	9308      	str	r3, [sp, #32]
 801f97a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f97c:	b1f3      	cbz	r3, 801f9bc <_dtoa_r+0x78c>
 801f97e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f980:	2b00      	cmp	r3, #0
 801f982:	f000 80b7 	beq.w	801faf4 <_dtoa_r+0x8c4>
 801f986:	b18c      	cbz	r4, 801f9ac <_dtoa_r+0x77c>
 801f988:	4629      	mov	r1, r5
 801f98a:	4622      	mov	r2, r4
 801f98c:	4658      	mov	r0, fp
 801f98e:	f000 fc11 	bl	80201b4 <__pow5mult>
 801f992:	464a      	mov	r2, r9
 801f994:	4601      	mov	r1, r0
 801f996:	4605      	mov	r5, r0
 801f998:	4658      	mov	r0, fp
 801f99a:	f000 fb61 	bl	8020060 <__multiply>
 801f99e:	4649      	mov	r1, r9
 801f9a0:	9004      	str	r0, [sp, #16]
 801f9a2:	4658      	mov	r0, fp
 801f9a4:	f000 fa92 	bl	801fecc <_Bfree>
 801f9a8:	9b04      	ldr	r3, [sp, #16]
 801f9aa:	4699      	mov	r9, r3
 801f9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9ae:	1b1a      	subs	r2, r3, r4
 801f9b0:	d004      	beq.n	801f9bc <_dtoa_r+0x78c>
 801f9b2:	4649      	mov	r1, r9
 801f9b4:	4658      	mov	r0, fp
 801f9b6:	f000 fbfd 	bl	80201b4 <__pow5mult>
 801f9ba:	4681      	mov	r9, r0
 801f9bc:	2101      	movs	r1, #1
 801f9be:	4658      	mov	r0, fp
 801f9c0:	f000 fb38 	bl	8020034 <__i2b>
 801f9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9c6:	4604      	mov	r4, r0
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	f000 81cf 	beq.w	801fd6c <_dtoa_r+0xb3c>
 801f9ce:	461a      	mov	r2, r3
 801f9d0:	4601      	mov	r1, r0
 801f9d2:	4658      	mov	r0, fp
 801f9d4:	f000 fbee 	bl	80201b4 <__pow5mult>
 801f9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9da:	2b01      	cmp	r3, #1
 801f9dc:	4604      	mov	r4, r0
 801f9de:	f300 8095 	bgt.w	801fb0c <_dtoa_r+0x8dc>
 801f9e2:	9b02      	ldr	r3, [sp, #8]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	f040 8087 	bne.w	801faf8 <_dtoa_r+0x8c8>
 801f9ea:	9b03      	ldr	r3, [sp, #12]
 801f9ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	f040 8089 	bne.w	801fb08 <_dtoa_r+0x8d8>
 801f9f6:	9b03      	ldr	r3, [sp, #12]
 801f9f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f9fc:	0d1b      	lsrs	r3, r3, #20
 801f9fe:	051b      	lsls	r3, r3, #20
 801fa00:	b12b      	cbz	r3, 801fa0e <_dtoa_r+0x7de>
 801fa02:	9b08      	ldr	r3, [sp, #32]
 801fa04:	3301      	adds	r3, #1
 801fa06:	9308      	str	r3, [sp, #32]
 801fa08:	f108 0801 	add.w	r8, r8, #1
 801fa0c:	2301      	movs	r3, #1
 801fa0e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	f000 81b0 	beq.w	801fd78 <_dtoa_r+0xb48>
 801fa18:	6923      	ldr	r3, [r4, #16]
 801fa1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fa1e:	6918      	ldr	r0, [r3, #16]
 801fa20:	f000 fabc 	bl	801ff9c <__hi0bits>
 801fa24:	f1c0 0020 	rsb	r0, r0, #32
 801fa28:	9b08      	ldr	r3, [sp, #32]
 801fa2a:	4418      	add	r0, r3
 801fa2c:	f010 001f 	ands.w	r0, r0, #31
 801fa30:	d077      	beq.n	801fb22 <_dtoa_r+0x8f2>
 801fa32:	f1c0 0320 	rsb	r3, r0, #32
 801fa36:	2b04      	cmp	r3, #4
 801fa38:	dd6b      	ble.n	801fb12 <_dtoa_r+0x8e2>
 801fa3a:	9b08      	ldr	r3, [sp, #32]
 801fa3c:	f1c0 001c 	rsb	r0, r0, #28
 801fa40:	4403      	add	r3, r0
 801fa42:	4480      	add	r8, r0
 801fa44:	4406      	add	r6, r0
 801fa46:	9308      	str	r3, [sp, #32]
 801fa48:	f1b8 0f00 	cmp.w	r8, #0
 801fa4c:	dd05      	ble.n	801fa5a <_dtoa_r+0x82a>
 801fa4e:	4649      	mov	r1, r9
 801fa50:	4642      	mov	r2, r8
 801fa52:	4658      	mov	r0, fp
 801fa54:	f000 fc08 	bl	8020268 <__lshift>
 801fa58:	4681      	mov	r9, r0
 801fa5a:	9b08      	ldr	r3, [sp, #32]
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	dd05      	ble.n	801fa6c <_dtoa_r+0x83c>
 801fa60:	4621      	mov	r1, r4
 801fa62:	461a      	mov	r2, r3
 801fa64:	4658      	mov	r0, fp
 801fa66:	f000 fbff 	bl	8020268 <__lshift>
 801fa6a:	4604      	mov	r4, r0
 801fa6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d059      	beq.n	801fb26 <_dtoa_r+0x8f6>
 801fa72:	4621      	mov	r1, r4
 801fa74:	4648      	mov	r0, r9
 801fa76:	f000 fc63 	bl	8020340 <__mcmp>
 801fa7a:	2800      	cmp	r0, #0
 801fa7c:	da53      	bge.n	801fb26 <_dtoa_r+0x8f6>
 801fa7e:	1e7b      	subs	r3, r7, #1
 801fa80:	9304      	str	r3, [sp, #16]
 801fa82:	4649      	mov	r1, r9
 801fa84:	2300      	movs	r3, #0
 801fa86:	220a      	movs	r2, #10
 801fa88:	4658      	mov	r0, fp
 801fa8a:	f000 fa41 	bl	801ff10 <__multadd>
 801fa8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa90:	4681      	mov	r9, r0
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	f000 8172 	beq.w	801fd7c <_dtoa_r+0xb4c>
 801fa98:	2300      	movs	r3, #0
 801fa9a:	4629      	mov	r1, r5
 801fa9c:	220a      	movs	r2, #10
 801fa9e:	4658      	mov	r0, fp
 801faa0:	f000 fa36 	bl	801ff10 <__multadd>
 801faa4:	9b00      	ldr	r3, [sp, #0]
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	4605      	mov	r5, r0
 801faaa:	dc67      	bgt.n	801fb7c <_dtoa_r+0x94c>
 801faac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801faae:	2b02      	cmp	r3, #2
 801fab0:	dc41      	bgt.n	801fb36 <_dtoa_r+0x906>
 801fab2:	e063      	b.n	801fb7c <_dtoa_r+0x94c>
 801fab4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fab6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801faba:	e746      	b.n	801f94a <_dtoa_r+0x71a>
 801fabc:	9b07      	ldr	r3, [sp, #28]
 801fabe:	1e5c      	subs	r4, r3, #1
 801fac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fac2:	42a3      	cmp	r3, r4
 801fac4:	bfbf      	itttt	lt
 801fac6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801fac8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801faca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801facc:	1ae3      	sublt	r3, r4, r3
 801face:	bfb4      	ite	lt
 801fad0:	18d2      	addlt	r2, r2, r3
 801fad2:	1b1c      	subge	r4, r3, r4
 801fad4:	9b07      	ldr	r3, [sp, #28]
 801fad6:	bfbc      	itt	lt
 801fad8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fada:	2400      	movlt	r4, #0
 801fadc:	2b00      	cmp	r3, #0
 801fade:	bfb5      	itete	lt
 801fae0:	eba8 0603 	sublt.w	r6, r8, r3
 801fae4:	9b07      	ldrge	r3, [sp, #28]
 801fae6:	2300      	movlt	r3, #0
 801fae8:	4646      	movge	r6, r8
 801faea:	e730      	b.n	801f94e <_dtoa_r+0x71e>
 801faec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801faee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801faf0:	4646      	mov	r6, r8
 801faf2:	e735      	b.n	801f960 <_dtoa_r+0x730>
 801faf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801faf6:	e75c      	b.n	801f9b2 <_dtoa_r+0x782>
 801faf8:	2300      	movs	r3, #0
 801fafa:	e788      	b.n	801fa0e <_dtoa_r+0x7de>
 801fafc:	3fe00000 	.word	0x3fe00000
 801fb00:	40240000 	.word	0x40240000
 801fb04:	40140000 	.word	0x40140000
 801fb08:	9b02      	ldr	r3, [sp, #8]
 801fb0a:	e780      	b.n	801fa0e <_dtoa_r+0x7de>
 801fb0c:	2300      	movs	r3, #0
 801fb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb10:	e782      	b.n	801fa18 <_dtoa_r+0x7e8>
 801fb12:	d099      	beq.n	801fa48 <_dtoa_r+0x818>
 801fb14:	9a08      	ldr	r2, [sp, #32]
 801fb16:	331c      	adds	r3, #28
 801fb18:	441a      	add	r2, r3
 801fb1a:	4498      	add	r8, r3
 801fb1c:	441e      	add	r6, r3
 801fb1e:	9208      	str	r2, [sp, #32]
 801fb20:	e792      	b.n	801fa48 <_dtoa_r+0x818>
 801fb22:	4603      	mov	r3, r0
 801fb24:	e7f6      	b.n	801fb14 <_dtoa_r+0x8e4>
 801fb26:	9b07      	ldr	r3, [sp, #28]
 801fb28:	9704      	str	r7, [sp, #16]
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	dc20      	bgt.n	801fb70 <_dtoa_r+0x940>
 801fb2e:	9300      	str	r3, [sp, #0]
 801fb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb32:	2b02      	cmp	r3, #2
 801fb34:	dd1e      	ble.n	801fb74 <_dtoa_r+0x944>
 801fb36:	9b00      	ldr	r3, [sp, #0]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	f47f aec0 	bne.w	801f8be <_dtoa_r+0x68e>
 801fb3e:	4621      	mov	r1, r4
 801fb40:	2205      	movs	r2, #5
 801fb42:	4658      	mov	r0, fp
 801fb44:	f000 f9e4 	bl	801ff10 <__multadd>
 801fb48:	4601      	mov	r1, r0
 801fb4a:	4604      	mov	r4, r0
 801fb4c:	4648      	mov	r0, r9
 801fb4e:	f000 fbf7 	bl	8020340 <__mcmp>
 801fb52:	2800      	cmp	r0, #0
 801fb54:	f77f aeb3 	ble.w	801f8be <_dtoa_r+0x68e>
 801fb58:	4656      	mov	r6, sl
 801fb5a:	2331      	movs	r3, #49	@ 0x31
 801fb5c:	f806 3b01 	strb.w	r3, [r6], #1
 801fb60:	9b04      	ldr	r3, [sp, #16]
 801fb62:	3301      	adds	r3, #1
 801fb64:	9304      	str	r3, [sp, #16]
 801fb66:	e6ae      	b.n	801f8c6 <_dtoa_r+0x696>
 801fb68:	9c07      	ldr	r4, [sp, #28]
 801fb6a:	9704      	str	r7, [sp, #16]
 801fb6c:	4625      	mov	r5, r4
 801fb6e:	e7f3      	b.n	801fb58 <_dtoa_r+0x928>
 801fb70:	9b07      	ldr	r3, [sp, #28]
 801fb72:	9300      	str	r3, [sp, #0]
 801fb74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	f000 8104 	beq.w	801fd84 <_dtoa_r+0xb54>
 801fb7c:	2e00      	cmp	r6, #0
 801fb7e:	dd05      	ble.n	801fb8c <_dtoa_r+0x95c>
 801fb80:	4629      	mov	r1, r5
 801fb82:	4632      	mov	r2, r6
 801fb84:	4658      	mov	r0, fp
 801fb86:	f000 fb6f 	bl	8020268 <__lshift>
 801fb8a:	4605      	mov	r5, r0
 801fb8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d05a      	beq.n	801fc48 <_dtoa_r+0xa18>
 801fb92:	6869      	ldr	r1, [r5, #4]
 801fb94:	4658      	mov	r0, fp
 801fb96:	f000 f959 	bl	801fe4c <_Balloc>
 801fb9a:	4606      	mov	r6, r0
 801fb9c:	b928      	cbnz	r0, 801fbaa <_dtoa_r+0x97a>
 801fb9e:	4b84      	ldr	r3, [pc, #528]	@ (801fdb0 <_dtoa_r+0xb80>)
 801fba0:	4602      	mov	r2, r0
 801fba2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fba6:	f7ff bb5a 	b.w	801f25e <_dtoa_r+0x2e>
 801fbaa:	692a      	ldr	r2, [r5, #16]
 801fbac:	3202      	adds	r2, #2
 801fbae:	0092      	lsls	r2, r2, #2
 801fbb0:	f105 010c 	add.w	r1, r5, #12
 801fbb4:	300c      	adds	r0, #12
 801fbb6:	f7ff fa84 	bl	801f0c2 <memcpy>
 801fbba:	2201      	movs	r2, #1
 801fbbc:	4631      	mov	r1, r6
 801fbbe:	4658      	mov	r0, fp
 801fbc0:	f000 fb52 	bl	8020268 <__lshift>
 801fbc4:	f10a 0301 	add.w	r3, sl, #1
 801fbc8:	9307      	str	r3, [sp, #28]
 801fbca:	9b00      	ldr	r3, [sp, #0]
 801fbcc:	4453      	add	r3, sl
 801fbce:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fbd0:	9b02      	ldr	r3, [sp, #8]
 801fbd2:	f003 0301 	and.w	r3, r3, #1
 801fbd6:	462f      	mov	r7, r5
 801fbd8:	930a      	str	r3, [sp, #40]	@ 0x28
 801fbda:	4605      	mov	r5, r0
 801fbdc:	9b07      	ldr	r3, [sp, #28]
 801fbde:	4621      	mov	r1, r4
 801fbe0:	3b01      	subs	r3, #1
 801fbe2:	4648      	mov	r0, r9
 801fbe4:	9300      	str	r3, [sp, #0]
 801fbe6:	f7ff fa99 	bl	801f11c <quorem>
 801fbea:	4639      	mov	r1, r7
 801fbec:	9002      	str	r0, [sp, #8]
 801fbee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fbf2:	4648      	mov	r0, r9
 801fbf4:	f000 fba4 	bl	8020340 <__mcmp>
 801fbf8:	462a      	mov	r2, r5
 801fbfa:	9008      	str	r0, [sp, #32]
 801fbfc:	4621      	mov	r1, r4
 801fbfe:	4658      	mov	r0, fp
 801fc00:	f000 fbba 	bl	8020378 <__mdiff>
 801fc04:	68c2      	ldr	r2, [r0, #12]
 801fc06:	4606      	mov	r6, r0
 801fc08:	bb02      	cbnz	r2, 801fc4c <_dtoa_r+0xa1c>
 801fc0a:	4601      	mov	r1, r0
 801fc0c:	4648      	mov	r0, r9
 801fc0e:	f000 fb97 	bl	8020340 <__mcmp>
 801fc12:	4602      	mov	r2, r0
 801fc14:	4631      	mov	r1, r6
 801fc16:	4658      	mov	r0, fp
 801fc18:	920e      	str	r2, [sp, #56]	@ 0x38
 801fc1a:	f000 f957 	bl	801fecc <_Bfree>
 801fc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc22:	9e07      	ldr	r6, [sp, #28]
 801fc24:	ea43 0102 	orr.w	r1, r3, r2
 801fc28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc2a:	4319      	orrs	r1, r3
 801fc2c:	d110      	bne.n	801fc50 <_dtoa_r+0xa20>
 801fc2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fc32:	d029      	beq.n	801fc88 <_dtoa_r+0xa58>
 801fc34:	9b08      	ldr	r3, [sp, #32]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	dd02      	ble.n	801fc40 <_dtoa_r+0xa10>
 801fc3a:	9b02      	ldr	r3, [sp, #8]
 801fc3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fc40:	9b00      	ldr	r3, [sp, #0]
 801fc42:	f883 8000 	strb.w	r8, [r3]
 801fc46:	e63f      	b.n	801f8c8 <_dtoa_r+0x698>
 801fc48:	4628      	mov	r0, r5
 801fc4a:	e7bb      	b.n	801fbc4 <_dtoa_r+0x994>
 801fc4c:	2201      	movs	r2, #1
 801fc4e:	e7e1      	b.n	801fc14 <_dtoa_r+0x9e4>
 801fc50:	9b08      	ldr	r3, [sp, #32]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	db04      	blt.n	801fc60 <_dtoa_r+0xa30>
 801fc56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fc58:	430b      	orrs	r3, r1
 801fc5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc5c:	430b      	orrs	r3, r1
 801fc5e:	d120      	bne.n	801fca2 <_dtoa_r+0xa72>
 801fc60:	2a00      	cmp	r2, #0
 801fc62:	dded      	ble.n	801fc40 <_dtoa_r+0xa10>
 801fc64:	4649      	mov	r1, r9
 801fc66:	2201      	movs	r2, #1
 801fc68:	4658      	mov	r0, fp
 801fc6a:	f000 fafd 	bl	8020268 <__lshift>
 801fc6e:	4621      	mov	r1, r4
 801fc70:	4681      	mov	r9, r0
 801fc72:	f000 fb65 	bl	8020340 <__mcmp>
 801fc76:	2800      	cmp	r0, #0
 801fc78:	dc03      	bgt.n	801fc82 <_dtoa_r+0xa52>
 801fc7a:	d1e1      	bne.n	801fc40 <_dtoa_r+0xa10>
 801fc7c:	f018 0f01 	tst.w	r8, #1
 801fc80:	d0de      	beq.n	801fc40 <_dtoa_r+0xa10>
 801fc82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fc86:	d1d8      	bne.n	801fc3a <_dtoa_r+0xa0a>
 801fc88:	9a00      	ldr	r2, [sp, #0]
 801fc8a:	2339      	movs	r3, #57	@ 0x39
 801fc8c:	7013      	strb	r3, [r2, #0]
 801fc8e:	4633      	mov	r3, r6
 801fc90:	461e      	mov	r6, r3
 801fc92:	3b01      	subs	r3, #1
 801fc94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fc98:	2a39      	cmp	r2, #57	@ 0x39
 801fc9a:	d052      	beq.n	801fd42 <_dtoa_r+0xb12>
 801fc9c:	3201      	adds	r2, #1
 801fc9e:	701a      	strb	r2, [r3, #0]
 801fca0:	e612      	b.n	801f8c8 <_dtoa_r+0x698>
 801fca2:	2a00      	cmp	r2, #0
 801fca4:	dd07      	ble.n	801fcb6 <_dtoa_r+0xa86>
 801fca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fcaa:	d0ed      	beq.n	801fc88 <_dtoa_r+0xa58>
 801fcac:	9a00      	ldr	r2, [sp, #0]
 801fcae:	f108 0301 	add.w	r3, r8, #1
 801fcb2:	7013      	strb	r3, [r2, #0]
 801fcb4:	e608      	b.n	801f8c8 <_dtoa_r+0x698>
 801fcb6:	9b07      	ldr	r3, [sp, #28]
 801fcb8:	9a07      	ldr	r2, [sp, #28]
 801fcba:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fcbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fcc0:	4293      	cmp	r3, r2
 801fcc2:	d028      	beq.n	801fd16 <_dtoa_r+0xae6>
 801fcc4:	4649      	mov	r1, r9
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	220a      	movs	r2, #10
 801fcca:	4658      	mov	r0, fp
 801fccc:	f000 f920 	bl	801ff10 <__multadd>
 801fcd0:	42af      	cmp	r7, r5
 801fcd2:	4681      	mov	r9, r0
 801fcd4:	f04f 0300 	mov.w	r3, #0
 801fcd8:	f04f 020a 	mov.w	r2, #10
 801fcdc:	4639      	mov	r1, r7
 801fcde:	4658      	mov	r0, fp
 801fce0:	d107      	bne.n	801fcf2 <_dtoa_r+0xac2>
 801fce2:	f000 f915 	bl	801ff10 <__multadd>
 801fce6:	4607      	mov	r7, r0
 801fce8:	4605      	mov	r5, r0
 801fcea:	9b07      	ldr	r3, [sp, #28]
 801fcec:	3301      	adds	r3, #1
 801fcee:	9307      	str	r3, [sp, #28]
 801fcf0:	e774      	b.n	801fbdc <_dtoa_r+0x9ac>
 801fcf2:	f000 f90d 	bl	801ff10 <__multadd>
 801fcf6:	4629      	mov	r1, r5
 801fcf8:	4607      	mov	r7, r0
 801fcfa:	2300      	movs	r3, #0
 801fcfc:	220a      	movs	r2, #10
 801fcfe:	4658      	mov	r0, fp
 801fd00:	f000 f906 	bl	801ff10 <__multadd>
 801fd04:	4605      	mov	r5, r0
 801fd06:	e7f0      	b.n	801fcea <_dtoa_r+0xaba>
 801fd08:	9b00      	ldr	r3, [sp, #0]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	bfcc      	ite	gt
 801fd0e:	461e      	movgt	r6, r3
 801fd10:	2601      	movle	r6, #1
 801fd12:	4456      	add	r6, sl
 801fd14:	2700      	movs	r7, #0
 801fd16:	4649      	mov	r1, r9
 801fd18:	2201      	movs	r2, #1
 801fd1a:	4658      	mov	r0, fp
 801fd1c:	f000 faa4 	bl	8020268 <__lshift>
 801fd20:	4621      	mov	r1, r4
 801fd22:	4681      	mov	r9, r0
 801fd24:	f000 fb0c 	bl	8020340 <__mcmp>
 801fd28:	2800      	cmp	r0, #0
 801fd2a:	dcb0      	bgt.n	801fc8e <_dtoa_r+0xa5e>
 801fd2c:	d102      	bne.n	801fd34 <_dtoa_r+0xb04>
 801fd2e:	f018 0f01 	tst.w	r8, #1
 801fd32:	d1ac      	bne.n	801fc8e <_dtoa_r+0xa5e>
 801fd34:	4633      	mov	r3, r6
 801fd36:	461e      	mov	r6, r3
 801fd38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fd3c:	2a30      	cmp	r2, #48	@ 0x30
 801fd3e:	d0fa      	beq.n	801fd36 <_dtoa_r+0xb06>
 801fd40:	e5c2      	b.n	801f8c8 <_dtoa_r+0x698>
 801fd42:	459a      	cmp	sl, r3
 801fd44:	d1a4      	bne.n	801fc90 <_dtoa_r+0xa60>
 801fd46:	9b04      	ldr	r3, [sp, #16]
 801fd48:	3301      	adds	r3, #1
 801fd4a:	9304      	str	r3, [sp, #16]
 801fd4c:	2331      	movs	r3, #49	@ 0x31
 801fd4e:	f88a 3000 	strb.w	r3, [sl]
 801fd52:	e5b9      	b.n	801f8c8 <_dtoa_r+0x698>
 801fd54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fd56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fdb4 <_dtoa_r+0xb84>
 801fd5a:	b11b      	cbz	r3, 801fd64 <_dtoa_r+0xb34>
 801fd5c:	f10a 0308 	add.w	r3, sl, #8
 801fd60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fd62:	6013      	str	r3, [r2, #0]
 801fd64:	4650      	mov	r0, sl
 801fd66:	b019      	add	sp, #100	@ 0x64
 801fd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd6e:	2b01      	cmp	r3, #1
 801fd70:	f77f ae37 	ble.w	801f9e2 <_dtoa_r+0x7b2>
 801fd74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd76:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd78:	2001      	movs	r0, #1
 801fd7a:	e655      	b.n	801fa28 <_dtoa_r+0x7f8>
 801fd7c:	9b00      	ldr	r3, [sp, #0]
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	f77f aed6 	ble.w	801fb30 <_dtoa_r+0x900>
 801fd84:	4656      	mov	r6, sl
 801fd86:	4621      	mov	r1, r4
 801fd88:	4648      	mov	r0, r9
 801fd8a:	f7ff f9c7 	bl	801f11c <quorem>
 801fd8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fd92:	f806 8b01 	strb.w	r8, [r6], #1
 801fd96:	9b00      	ldr	r3, [sp, #0]
 801fd98:	eba6 020a 	sub.w	r2, r6, sl
 801fd9c:	4293      	cmp	r3, r2
 801fd9e:	ddb3      	ble.n	801fd08 <_dtoa_r+0xad8>
 801fda0:	4649      	mov	r1, r9
 801fda2:	2300      	movs	r3, #0
 801fda4:	220a      	movs	r2, #10
 801fda6:	4658      	mov	r0, fp
 801fda8:	f000 f8b2 	bl	801ff10 <__multadd>
 801fdac:	4681      	mov	r9, r0
 801fdae:	e7ea      	b.n	801fd86 <_dtoa_r+0xb56>
 801fdb0:	080714f9 	.word	0x080714f9
 801fdb4:	08071494 	.word	0x08071494

0801fdb8 <_free_r>:
 801fdb8:	b538      	push	{r3, r4, r5, lr}
 801fdba:	4605      	mov	r5, r0
 801fdbc:	2900      	cmp	r1, #0
 801fdbe:	d041      	beq.n	801fe44 <_free_r+0x8c>
 801fdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fdc4:	1f0c      	subs	r4, r1, #4
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	bfb8      	it	lt
 801fdca:	18e4      	addlt	r4, r4, r3
 801fdcc:	f7fe f976 	bl	801e0bc <__malloc_lock>
 801fdd0:	4a1d      	ldr	r2, [pc, #116]	@ (801fe48 <_free_r+0x90>)
 801fdd2:	6813      	ldr	r3, [r2, #0]
 801fdd4:	b933      	cbnz	r3, 801fde4 <_free_r+0x2c>
 801fdd6:	6063      	str	r3, [r4, #4]
 801fdd8:	6014      	str	r4, [r2, #0]
 801fdda:	4628      	mov	r0, r5
 801fddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fde0:	f7fe b972 	b.w	801e0c8 <__malloc_unlock>
 801fde4:	42a3      	cmp	r3, r4
 801fde6:	d908      	bls.n	801fdfa <_free_r+0x42>
 801fde8:	6820      	ldr	r0, [r4, #0]
 801fdea:	1821      	adds	r1, r4, r0
 801fdec:	428b      	cmp	r3, r1
 801fdee:	bf01      	itttt	eq
 801fdf0:	6819      	ldreq	r1, [r3, #0]
 801fdf2:	685b      	ldreq	r3, [r3, #4]
 801fdf4:	1809      	addeq	r1, r1, r0
 801fdf6:	6021      	streq	r1, [r4, #0]
 801fdf8:	e7ed      	b.n	801fdd6 <_free_r+0x1e>
 801fdfa:	461a      	mov	r2, r3
 801fdfc:	685b      	ldr	r3, [r3, #4]
 801fdfe:	b10b      	cbz	r3, 801fe04 <_free_r+0x4c>
 801fe00:	42a3      	cmp	r3, r4
 801fe02:	d9fa      	bls.n	801fdfa <_free_r+0x42>
 801fe04:	6811      	ldr	r1, [r2, #0]
 801fe06:	1850      	adds	r0, r2, r1
 801fe08:	42a0      	cmp	r0, r4
 801fe0a:	d10b      	bne.n	801fe24 <_free_r+0x6c>
 801fe0c:	6820      	ldr	r0, [r4, #0]
 801fe0e:	4401      	add	r1, r0
 801fe10:	1850      	adds	r0, r2, r1
 801fe12:	4283      	cmp	r3, r0
 801fe14:	6011      	str	r1, [r2, #0]
 801fe16:	d1e0      	bne.n	801fdda <_free_r+0x22>
 801fe18:	6818      	ldr	r0, [r3, #0]
 801fe1a:	685b      	ldr	r3, [r3, #4]
 801fe1c:	6053      	str	r3, [r2, #4]
 801fe1e:	4408      	add	r0, r1
 801fe20:	6010      	str	r0, [r2, #0]
 801fe22:	e7da      	b.n	801fdda <_free_r+0x22>
 801fe24:	d902      	bls.n	801fe2c <_free_r+0x74>
 801fe26:	230c      	movs	r3, #12
 801fe28:	602b      	str	r3, [r5, #0]
 801fe2a:	e7d6      	b.n	801fdda <_free_r+0x22>
 801fe2c:	6820      	ldr	r0, [r4, #0]
 801fe2e:	1821      	adds	r1, r4, r0
 801fe30:	428b      	cmp	r3, r1
 801fe32:	bf04      	itt	eq
 801fe34:	6819      	ldreq	r1, [r3, #0]
 801fe36:	685b      	ldreq	r3, [r3, #4]
 801fe38:	6063      	str	r3, [r4, #4]
 801fe3a:	bf04      	itt	eq
 801fe3c:	1809      	addeq	r1, r1, r0
 801fe3e:	6021      	streq	r1, [r4, #0]
 801fe40:	6054      	str	r4, [r2, #4]
 801fe42:	e7ca      	b.n	801fdda <_free_r+0x22>
 801fe44:	bd38      	pop	{r3, r4, r5, pc}
 801fe46:	bf00      	nop
 801fe48:	20013f58 	.word	0x20013f58

0801fe4c <_Balloc>:
 801fe4c:	b570      	push	{r4, r5, r6, lr}
 801fe4e:	69c6      	ldr	r6, [r0, #28]
 801fe50:	4604      	mov	r4, r0
 801fe52:	460d      	mov	r5, r1
 801fe54:	b976      	cbnz	r6, 801fe74 <_Balloc+0x28>
 801fe56:	2010      	movs	r0, #16
 801fe58:	f7fe f87e 	bl	801df58 <malloc>
 801fe5c:	4602      	mov	r2, r0
 801fe5e:	61e0      	str	r0, [r4, #28]
 801fe60:	b920      	cbnz	r0, 801fe6c <_Balloc+0x20>
 801fe62:	4b18      	ldr	r3, [pc, #96]	@ (801fec4 <_Balloc+0x78>)
 801fe64:	4818      	ldr	r0, [pc, #96]	@ (801fec8 <_Balloc+0x7c>)
 801fe66:	216b      	movs	r1, #107	@ 0x6b
 801fe68:	f7ff f93a 	bl	801f0e0 <__assert_func>
 801fe6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fe70:	6006      	str	r6, [r0, #0]
 801fe72:	60c6      	str	r6, [r0, #12]
 801fe74:	69e6      	ldr	r6, [r4, #28]
 801fe76:	68f3      	ldr	r3, [r6, #12]
 801fe78:	b183      	cbz	r3, 801fe9c <_Balloc+0x50>
 801fe7a:	69e3      	ldr	r3, [r4, #28]
 801fe7c:	68db      	ldr	r3, [r3, #12]
 801fe7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fe82:	b9b8      	cbnz	r0, 801feb4 <_Balloc+0x68>
 801fe84:	2101      	movs	r1, #1
 801fe86:	fa01 f605 	lsl.w	r6, r1, r5
 801fe8a:	1d72      	adds	r2, r6, #5
 801fe8c:	0092      	lsls	r2, r2, #2
 801fe8e:	4620      	mov	r0, r4
 801fe90:	f7fe f84e 	bl	801df30 <_calloc_r>
 801fe94:	b160      	cbz	r0, 801feb0 <_Balloc+0x64>
 801fe96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fe9a:	e00e      	b.n	801feba <_Balloc+0x6e>
 801fe9c:	2221      	movs	r2, #33	@ 0x21
 801fe9e:	2104      	movs	r1, #4
 801fea0:	4620      	mov	r0, r4
 801fea2:	f7fe f845 	bl	801df30 <_calloc_r>
 801fea6:	69e3      	ldr	r3, [r4, #28]
 801fea8:	60f0      	str	r0, [r6, #12]
 801feaa:	68db      	ldr	r3, [r3, #12]
 801feac:	2b00      	cmp	r3, #0
 801feae:	d1e4      	bne.n	801fe7a <_Balloc+0x2e>
 801feb0:	2000      	movs	r0, #0
 801feb2:	bd70      	pop	{r4, r5, r6, pc}
 801feb4:	6802      	ldr	r2, [r0, #0]
 801feb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801feba:	2300      	movs	r3, #0
 801febc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fec0:	e7f7      	b.n	801feb2 <_Balloc+0x66>
 801fec2:	bf00      	nop
 801fec4:	080712b4 	.word	0x080712b4
 801fec8:	0807150a 	.word	0x0807150a

0801fecc <_Bfree>:
 801fecc:	b570      	push	{r4, r5, r6, lr}
 801fece:	69c6      	ldr	r6, [r0, #28]
 801fed0:	4605      	mov	r5, r0
 801fed2:	460c      	mov	r4, r1
 801fed4:	b976      	cbnz	r6, 801fef4 <_Bfree+0x28>
 801fed6:	2010      	movs	r0, #16
 801fed8:	f7fe f83e 	bl	801df58 <malloc>
 801fedc:	4602      	mov	r2, r0
 801fede:	61e8      	str	r0, [r5, #28]
 801fee0:	b920      	cbnz	r0, 801feec <_Bfree+0x20>
 801fee2:	4b09      	ldr	r3, [pc, #36]	@ (801ff08 <_Bfree+0x3c>)
 801fee4:	4809      	ldr	r0, [pc, #36]	@ (801ff0c <_Bfree+0x40>)
 801fee6:	218f      	movs	r1, #143	@ 0x8f
 801fee8:	f7ff f8fa 	bl	801f0e0 <__assert_func>
 801feec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fef0:	6006      	str	r6, [r0, #0]
 801fef2:	60c6      	str	r6, [r0, #12]
 801fef4:	b13c      	cbz	r4, 801ff06 <_Bfree+0x3a>
 801fef6:	69eb      	ldr	r3, [r5, #28]
 801fef8:	6862      	ldr	r2, [r4, #4]
 801fefa:	68db      	ldr	r3, [r3, #12]
 801fefc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ff00:	6021      	str	r1, [r4, #0]
 801ff02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ff06:	bd70      	pop	{r4, r5, r6, pc}
 801ff08:	080712b4 	.word	0x080712b4
 801ff0c:	0807150a 	.word	0x0807150a

0801ff10 <__multadd>:
 801ff10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff14:	690d      	ldr	r5, [r1, #16]
 801ff16:	4607      	mov	r7, r0
 801ff18:	460c      	mov	r4, r1
 801ff1a:	461e      	mov	r6, r3
 801ff1c:	f101 0c14 	add.w	ip, r1, #20
 801ff20:	2000      	movs	r0, #0
 801ff22:	f8dc 3000 	ldr.w	r3, [ip]
 801ff26:	b299      	uxth	r1, r3
 801ff28:	fb02 6101 	mla	r1, r2, r1, r6
 801ff2c:	0c1e      	lsrs	r6, r3, #16
 801ff2e:	0c0b      	lsrs	r3, r1, #16
 801ff30:	fb02 3306 	mla	r3, r2, r6, r3
 801ff34:	b289      	uxth	r1, r1
 801ff36:	3001      	adds	r0, #1
 801ff38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ff3c:	4285      	cmp	r5, r0
 801ff3e:	f84c 1b04 	str.w	r1, [ip], #4
 801ff42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ff46:	dcec      	bgt.n	801ff22 <__multadd+0x12>
 801ff48:	b30e      	cbz	r6, 801ff8e <__multadd+0x7e>
 801ff4a:	68a3      	ldr	r3, [r4, #8]
 801ff4c:	42ab      	cmp	r3, r5
 801ff4e:	dc19      	bgt.n	801ff84 <__multadd+0x74>
 801ff50:	6861      	ldr	r1, [r4, #4]
 801ff52:	4638      	mov	r0, r7
 801ff54:	3101      	adds	r1, #1
 801ff56:	f7ff ff79 	bl	801fe4c <_Balloc>
 801ff5a:	4680      	mov	r8, r0
 801ff5c:	b928      	cbnz	r0, 801ff6a <__multadd+0x5a>
 801ff5e:	4602      	mov	r2, r0
 801ff60:	4b0c      	ldr	r3, [pc, #48]	@ (801ff94 <__multadd+0x84>)
 801ff62:	480d      	ldr	r0, [pc, #52]	@ (801ff98 <__multadd+0x88>)
 801ff64:	21ba      	movs	r1, #186	@ 0xba
 801ff66:	f7ff f8bb 	bl	801f0e0 <__assert_func>
 801ff6a:	6922      	ldr	r2, [r4, #16]
 801ff6c:	3202      	adds	r2, #2
 801ff6e:	f104 010c 	add.w	r1, r4, #12
 801ff72:	0092      	lsls	r2, r2, #2
 801ff74:	300c      	adds	r0, #12
 801ff76:	f7ff f8a4 	bl	801f0c2 <memcpy>
 801ff7a:	4621      	mov	r1, r4
 801ff7c:	4638      	mov	r0, r7
 801ff7e:	f7ff ffa5 	bl	801fecc <_Bfree>
 801ff82:	4644      	mov	r4, r8
 801ff84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ff88:	3501      	adds	r5, #1
 801ff8a:	615e      	str	r6, [r3, #20]
 801ff8c:	6125      	str	r5, [r4, #16]
 801ff8e:	4620      	mov	r0, r4
 801ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff94:	080714f9 	.word	0x080714f9
 801ff98:	0807150a 	.word	0x0807150a

0801ff9c <__hi0bits>:
 801ff9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	bf36      	itet	cc
 801ffa4:	0403      	lslcc	r3, r0, #16
 801ffa6:	2000      	movcs	r0, #0
 801ffa8:	2010      	movcc	r0, #16
 801ffaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ffae:	bf3c      	itt	cc
 801ffb0:	021b      	lslcc	r3, r3, #8
 801ffb2:	3008      	addcc	r0, #8
 801ffb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ffb8:	bf3c      	itt	cc
 801ffba:	011b      	lslcc	r3, r3, #4
 801ffbc:	3004      	addcc	r0, #4
 801ffbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ffc2:	bf3c      	itt	cc
 801ffc4:	009b      	lslcc	r3, r3, #2
 801ffc6:	3002      	addcc	r0, #2
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	db05      	blt.n	801ffd8 <__hi0bits+0x3c>
 801ffcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ffd0:	f100 0001 	add.w	r0, r0, #1
 801ffd4:	bf08      	it	eq
 801ffd6:	2020      	moveq	r0, #32
 801ffd8:	4770      	bx	lr

0801ffda <__lo0bits>:
 801ffda:	6803      	ldr	r3, [r0, #0]
 801ffdc:	4602      	mov	r2, r0
 801ffde:	f013 0007 	ands.w	r0, r3, #7
 801ffe2:	d00b      	beq.n	801fffc <__lo0bits+0x22>
 801ffe4:	07d9      	lsls	r1, r3, #31
 801ffe6:	d421      	bmi.n	802002c <__lo0bits+0x52>
 801ffe8:	0798      	lsls	r0, r3, #30
 801ffea:	bf49      	itett	mi
 801ffec:	085b      	lsrmi	r3, r3, #1
 801ffee:	089b      	lsrpl	r3, r3, #2
 801fff0:	2001      	movmi	r0, #1
 801fff2:	6013      	strmi	r3, [r2, #0]
 801fff4:	bf5c      	itt	pl
 801fff6:	6013      	strpl	r3, [r2, #0]
 801fff8:	2002      	movpl	r0, #2
 801fffa:	4770      	bx	lr
 801fffc:	b299      	uxth	r1, r3
 801fffe:	b909      	cbnz	r1, 8020004 <__lo0bits+0x2a>
 8020000:	0c1b      	lsrs	r3, r3, #16
 8020002:	2010      	movs	r0, #16
 8020004:	b2d9      	uxtb	r1, r3
 8020006:	b909      	cbnz	r1, 802000c <__lo0bits+0x32>
 8020008:	3008      	adds	r0, #8
 802000a:	0a1b      	lsrs	r3, r3, #8
 802000c:	0719      	lsls	r1, r3, #28
 802000e:	bf04      	itt	eq
 8020010:	091b      	lsreq	r3, r3, #4
 8020012:	3004      	addeq	r0, #4
 8020014:	0799      	lsls	r1, r3, #30
 8020016:	bf04      	itt	eq
 8020018:	089b      	lsreq	r3, r3, #2
 802001a:	3002      	addeq	r0, #2
 802001c:	07d9      	lsls	r1, r3, #31
 802001e:	d403      	bmi.n	8020028 <__lo0bits+0x4e>
 8020020:	085b      	lsrs	r3, r3, #1
 8020022:	f100 0001 	add.w	r0, r0, #1
 8020026:	d003      	beq.n	8020030 <__lo0bits+0x56>
 8020028:	6013      	str	r3, [r2, #0]
 802002a:	4770      	bx	lr
 802002c:	2000      	movs	r0, #0
 802002e:	4770      	bx	lr
 8020030:	2020      	movs	r0, #32
 8020032:	4770      	bx	lr

08020034 <__i2b>:
 8020034:	b510      	push	{r4, lr}
 8020036:	460c      	mov	r4, r1
 8020038:	2101      	movs	r1, #1
 802003a:	f7ff ff07 	bl	801fe4c <_Balloc>
 802003e:	4602      	mov	r2, r0
 8020040:	b928      	cbnz	r0, 802004e <__i2b+0x1a>
 8020042:	4b05      	ldr	r3, [pc, #20]	@ (8020058 <__i2b+0x24>)
 8020044:	4805      	ldr	r0, [pc, #20]	@ (802005c <__i2b+0x28>)
 8020046:	f240 1145 	movw	r1, #325	@ 0x145
 802004a:	f7ff f849 	bl	801f0e0 <__assert_func>
 802004e:	2301      	movs	r3, #1
 8020050:	6144      	str	r4, [r0, #20]
 8020052:	6103      	str	r3, [r0, #16]
 8020054:	bd10      	pop	{r4, pc}
 8020056:	bf00      	nop
 8020058:	080714f9 	.word	0x080714f9
 802005c:	0807150a 	.word	0x0807150a

08020060 <__multiply>:
 8020060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020064:	4614      	mov	r4, r2
 8020066:	690a      	ldr	r2, [r1, #16]
 8020068:	6923      	ldr	r3, [r4, #16]
 802006a:	429a      	cmp	r2, r3
 802006c:	bfa8      	it	ge
 802006e:	4623      	movge	r3, r4
 8020070:	460f      	mov	r7, r1
 8020072:	bfa4      	itt	ge
 8020074:	460c      	movge	r4, r1
 8020076:	461f      	movge	r7, r3
 8020078:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802007c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020080:	68a3      	ldr	r3, [r4, #8]
 8020082:	6861      	ldr	r1, [r4, #4]
 8020084:	eb0a 0609 	add.w	r6, sl, r9
 8020088:	42b3      	cmp	r3, r6
 802008a:	b085      	sub	sp, #20
 802008c:	bfb8      	it	lt
 802008e:	3101      	addlt	r1, #1
 8020090:	f7ff fedc 	bl	801fe4c <_Balloc>
 8020094:	b930      	cbnz	r0, 80200a4 <__multiply+0x44>
 8020096:	4602      	mov	r2, r0
 8020098:	4b44      	ldr	r3, [pc, #272]	@ (80201ac <__multiply+0x14c>)
 802009a:	4845      	ldr	r0, [pc, #276]	@ (80201b0 <__multiply+0x150>)
 802009c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80200a0:	f7ff f81e 	bl	801f0e0 <__assert_func>
 80200a4:	f100 0514 	add.w	r5, r0, #20
 80200a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80200ac:	462b      	mov	r3, r5
 80200ae:	2200      	movs	r2, #0
 80200b0:	4543      	cmp	r3, r8
 80200b2:	d321      	bcc.n	80200f8 <__multiply+0x98>
 80200b4:	f107 0114 	add.w	r1, r7, #20
 80200b8:	f104 0214 	add.w	r2, r4, #20
 80200bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80200c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80200c4:	9302      	str	r3, [sp, #8]
 80200c6:	1b13      	subs	r3, r2, r4
 80200c8:	3b15      	subs	r3, #21
 80200ca:	f023 0303 	bic.w	r3, r3, #3
 80200ce:	3304      	adds	r3, #4
 80200d0:	f104 0715 	add.w	r7, r4, #21
 80200d4:	42ba      	cmp	r2, r7
 80200d6:	bf38      	it	cc
 80200d8:	2304      	movcc	r3, #4
 80200da:	9301      	str	r3, [sp, #4]
 80200dc:	9b02      	ldr	r3, [sp, #8]
 80200de:	9103      	str	r1, [sp, #12]
 80200e0:	428b      	cmp	r3, r1
 80200e2:	d80c      	bhi.n	80200fe <__multiply+0x9e>
 80200e4:	2e00      	cmp	r6, #0
 80200e6:	dd03      	ble.n	80200f0 <__multiply+0x90>
 80200e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d05b      	beq.n	80201a8 <__multiply+0x148>
 80200f0:	6106      	str	r6, [r0, #16]
 80200f2:	b005      	add	sp, #20
 80200f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200f8:	f843 2b04 	str.w	r2, [r3], #4
 80200fc:	e7d8      	b.n	80200b0 <__multiply+0x50>
 80200fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8020102:	f1ba 0f00 	cmp.w	sl, #0
 8020106:	d024      	beq.n	8020152 <__multiply+0xf2>
 8020108:	f104 0e14 	add.w	lr, r4, #20
 802010c:	46a9      	mov	r9, r5
 802010e:	f04f 0c00 	mov.w	ip, #0
 8020112:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020116:	f8d9 3000 	ldr.w	r3, [r9]
 802011a:	fa1f fb87 	uxth.w	fp, r7
 802011e:	b29b      	uxth	r3, r3
 8020120:	fb0a 330b 	mla	r3, sl, fp, r3
 8020124:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8020128:	f8d9 7000 	ldr.w	r7, [r9]
 802012c:	4463      	add	r3, ip
 802012e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020132:	fb0a c70b 	mla	r7, sl, fp, ip
 8020136:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802013a:	b29b      	uxth	r3, r3
 802013c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020140:	4572      	cmp	r2, lr
 8020142:	f849 3b04 	str.w	r3, [r9], #4
 8020146:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802014a:	d8e2      	bhi.n	8020112 <__multiply+0xb2>
 802014c:	9b01      	ldr	r3, [sp, #4]
 802014e:	f845 c003 	str.w	ip, [r5, r3]
 8020152:	9b03      	ldr	r3, [sp, #12]
 8020154:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8020158:	3104      	adds	r1, #4
 802015a:	f1b9 0f00 	cmp.w	r9, #0
 802015e:	d021      	beq.n	80201a4 <__multiply+0x144>
 8020160:	682b      	ldr	r3, [r5, #0]
 8020162:	f104 0c14 	add.w	ip, r4, #20
 8020166:	46ae      	mov	lr, r5
 8020168:	f04f 0a00 	mov.w	sl, #0
 802016c:	f8bc b000 	ldrh.w	fp, [ip]
 8020170:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020174:	fb09 770b 	mla	r7, r9, fp, r7
 8020178:	4457      	add	r7, sl
 802017a:	b29b      	uxth	r3, r3
 802017c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020180:	f84e 3b04 	str.w	r3, [lr], #4
 8020184:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802018c:	f8be 3000 	ldrh.w	r3, [lr]
 8020190:	fb09 330a 	mla	r3, r9, sl, r3
 8020194:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020198:	4562      	cmp	r2, ip
 802019a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802019e:	d8e5      	bhi.n	802016c <__multiply+0x10c>
 80201a0:	9f01      	ldr	r7, [sp, #4]
 80201a2:	51eb      	str	r3, [r5, r7]
 80201a4:	3504      	adds	r5, #4
 80201a6:	e799      	b.n	80200dc <__multiply+0x7c>
 80201a8:	3e01      	subs	r6, #1
 80201aa:	e79b      	b.n	80200e4 <__multiply+0x84>
 80201ac:	080714f9 	.word	0x080714f9
 80201b0:	0807150a 	.word	0x0807150a

080201b4 <__pow5mult>:
 80201b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80201b8:	4615      	mov	r5, r2
 80201ba:	f012 0203 	ands.w	r2, r2, #3
 80201be:	4607      	mov	r7, r0
 80201c0:	460e      	mov	r6, r1
 80201c2:	d007      	beq.n	80201d4 <__pow5mult+0x20>
 80201c4:	4c25      	ldr	r4, [pc, #148]	@ (802025c <__pow5mult+0xa8>)
 80201c6:	3a01      	subs	r2, #1
 80201c8:	2300      	movs	r3, #0
 80201ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80201ce:	f7ff fe9f 	bl	801ff10 <__multadd>
 80201d2:	4606      	mov	r6, r0
 80201d4:	10ad      	asrs	r5, r5, #2
 80201d6:	d03d      	beq.n	8020254 <__pow5mult+0xa0>
 80201d8:	69fc      	ldr	r4, [r7, #28]
 80201da:	b97c      	cbnz	r4, 80201fc <__pow5mult+0x48>
 80201dc:	2010      	movs	r0, #16
 80201de:	f7fd febb 	bl	801df58 <malloc>
 80201e2:	4602      	mov	r2, r0
 80201e4:	61f8      	str	r0, [r7, #28]
 80201e6:	b928      	cbnz	r0, 80201f4 <__pow5mult+0x40>
 80201e8:	4b1d      	ldr	r3, [pc, #116]	@ (8020260 <__pow5mult+0xac>)
 80201ea:	481e      	ldr	r0, [pc, #120]	@ (8020264 <__pow5mult+0xb0>)
 80201ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80201f0:	f7fe ff76 	bl	801f0e0 <__assert_func>
 80201f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80201f8:	6004      	str	r4, [r0, #0]
 80201fa:	60c4      	str	r4, [r0, #12]
 80201fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8020200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020204:	b94c      	cbnz	r4, 802021a <__pow5mult+0x66>
 8020206:	f240 2171 	movw	r1, #625	@ 0x271
 802020a:	4638      	mov	r0, r7
 802020c:	f7ff ff12 	bl	8020034 <__i2b>
 8020210:	2300      	movs	r3, #0
 8020212:	f8c8 0008 	str.w	r0, [r8, #8]
 8020216:	4604      	mov	r4, r0
 8020218:	6003      	str	r3, [r0, #0]
 802021a:	f04f 0900 	mov.w	r9, #0
 802021e:	07eb      	lsls	r3, r5, #31
 8020220:	d50a      	bpl.n	8020238 <__pow5mult+0x84>
 8020222:	4631      	mov	r1, r6
 8020224:	4622      	mov	r2, r4
 8020226:	4638      	mov	r0, r7
 8020228:	f7ff ff1a 	bl	8020060 <__multiply>
 802022c:	4631      	mov	r1, r6
 802022e:	4680      	mov	r8, r0
 8020230:	4638      	mov	r0, r7
 8020232:	f7ff fe4b 	bl	801fecc <_Bfree>
 8020236:	4646      	mov	r6, r8
 8020238:	106d      	asrs	r5, r5, #1
 802023a:	d00b      	beq.n	8020254 <__pow5mult+0xa0>
 802023c:	6820      	ldr	r0, [r4, #0]
 802023e:	b938      	cbnz	r0, 8020250 <__pow5mult+0x9c>
 8020240:	4622      	mov	r2, r4
 8020242:	4621      	mov	r1, r4
 8020244:	4638      	mov	r0, r7
 8020246:	f7ff ff0b 	bl	8020060 <__multiply>
 802024a:	6020      	str	r0, [r4, #0]
 802024c:	f8c0 9000 	str.w	r9, [r0]
 8020250:	4604      	mov	r4, r0
 8020252:	e7e4      	b.n	802021e <__pow5mult+0x6a>
 8020254:	4630      	mov	r0, r6
 8020256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802025a:	bf00      	nop
 802025c:	08071564 	.word	0x08071564
 8020260:	080712b4 	.word	0x080712b4
 8020264:	0807150a 	.word	0x0807150a

08020268 <__lshift>:
 8020268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802026c:	460c      	mov	r4, r1
 802026e:	6849      	ldr	r1, [r1, #4]
 8020270:	6923      	ldr	r3, [r4, #16]
 8020272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020276:	68a3      	ldr	r3, [r4, #8]
 8020278:	4607      	mov	r7, r0
 802027a:	4691      	mov	r9, r2
 802027c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020280:	f108 0601 	add.w	r6, r8, #1
 8020284:	42b3      	cmp	r3, r6
 8020286:	db0b      	blt.n	80202a0 <__lshift+0x38>
 8020288:	4638      	mov	r0, r7
 802028a:	f7ff fddf 	bl	801fe4c <_Balloc>
 802028e:	4605      	mov	r5, r0
 8020290:	b948      	cbnz	r0, 80202a6 <__lshift+0x3e>
 8020292:	4602      	mov	r2, r0
 8020294:	4b28      	ldr	r3, [pc, #160]	@ (8020338 <__lshift+0xd0>)
 8020296:	4829      	ldr	r0, [pc, #164]	@ (802033c <__lshift+0xd4>)
 8020298:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802029c:	f7fe ff20 	bl	801f0e0 <__assert_func>
 80202a0:	3101      	adds	r1, #1
 80202a2:	005b      	lsls	r3, r3, #1
 80202a4:	e7ee      	b.n	8020284 <__lshift+0x1c>
 80202a6:	2300      	movs	r3, #0
 80202a8:	f100 0114 	add.w	r1, r0, #20
 80202ac:	f100 0210 	add.w	r2, r0, #16
 80202b0:	4618      	mov	r0, r3
 80202b2:	4553      	cmp	r3, sl
 80202b4:	db33      	blt.n	802031e <__lshift+0xb6>
 80202b6:	6920      	ldr	r0, [r4, #16]
 80202b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80202bc:	f104 0314 	add.w	r3, r4, #20
 80202c0:	f019 091f 	ands.w	r9, r9, #31
 80202c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80202c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80202cc:	d02b      	beq.n	8020326 <__lshift+0xbe>
 80202ce:	f1c9 0e20 	rsb	lr, r9, #32
 80202d2:	468a      	mov	sl, r1
 80202d4:	2200      	movs	r2, #0
 80202d6:	6818      	ldr	r0, [r3, #0]
 80202d8:	fa00 f009 	lsl.w	r0, r0, r9
 80202dc:	4310      	orrs	r0, r2
 80202de:	f84a 0b04 	str.w	r0, [sl], #4
 80202e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80202e6:	459c      	cmp	ip, r3
 80202e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80202ec:	d8f3      	bhi.n	80202d6 <__lshift+0x6e>
 80202ee:	ebac 0304 	sub.w	r3, ip, r4
 80202f2:	3b15      	subs	r3, #21
 80202f4:	f023 0303 	bic.w	r3, r3, #3
 80202f8:	3304      	adds	r3, #4
 80202fa:	f104 0015 	add.w	r0, r4, #21
 80202fe:	4584      	cmp	ip, r0
 8020300:	bf38      	it	cc
 8020302:	2304      	movcc	r3, #4
 8020304:	50ca      	str	r2, [r1, r3]
 8020306:	b10a      	cbz	r2, 802030c <__lshift+0xa4>
 8020308:	f108 0602 	add.w	r6, r8, #2
 802030c:	3e01      	subs	r6, #1
 802030e:	4638      	mov	r0, r7
 8020310:	612e      	str	r6, [r5, #16]
 8020312:	4621      	mov	r1, r4
 8020314:	f7ff fdda 	bl	801fecc <_Bfree>
 8020318:	4628      	mov	r0, r5
 802031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802031e:	f842 0f04 	str.w	r0, [r2, #4]!
 8020322:	3301      	adds	r3, #1
 8020324:	e7c5      	b.n	80202b2 <__lshift+0x4a>
 8020326:	3904      	subs	r1, #4
 8020328:	f853 2b04 	ldr.w	r2, [r3], #4
 802032c:	f841 2f04 	str.w	r2, [r1, #4]!
 8020330:	459c      	cmp	ip, r3
 8020332:	d8f9      	bhi.n	8020328 <__lshift+0xc0>
 8020334:	e7ea      	b.n	802030c <__lshift+0xa4>
 8020336:	bf00      	nop
 8020338:	080714f9 	.word	0x080714f9
 802033c:	0807150a 	.word	0x0807150a

08020340 <__mcmp>:
 8020340:	690a      	ldr	r2, [r1, #16]
 8020342:	4603      	mov	r3, r0
 8020344:	6900      	ldr	r0, [r0, #16]
 8020346:	1a80      	subs	r0, r0, r2
 8020348:	b530      	push	{r4, r5, lr}
 802034a:	d10e      	bne.n	802036a <__mcmp+0x2a>
 802034c:	3314      	adds	r3, #20
 802034e:	3114      	adds	r1, #20
 8020350:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020354:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802035c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020360:	4295      	cmp	r5, r2
 8020362:	d003      	beq.n	802036c <__mcmp+0x2c>
 8020364:	d205      	bcs.n	8020372 <__mcmp+0x32>
 8020366:	f04f 30ff 	mov.w	r0, #4294967295
 802036a:	bd30      	pop	{r4, r5, pc}
 802036c:	42a3      	cmp	r3, r4
 802036e:	d3f3      	bcc.n	8020358 <__mcmp+0x18>
 8020370:	e7fb      	b.n	802036a <__mcmp+0x2a>
 8020372:	2001      	movs	r0, #1
 8020374:	e7f9      	b.n	802036a <__mcmp+0x2a>
	...

08020378 <__mdiff>:
 8020378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802037c:	4689      	mov	r9, r1
 802037e:	4606      	mov	r6, r0
 8020380:	4611      	mov	r1, r2
 8020382:	4648      	mov	r0, r9
 8020384:	4614      	mov	r4, r2
 8020386:	f7ff ffdb 	bl	8020340 <__mcmp>
 802038a:	1e05      	subs	r5, r0, #0
 802038c:	d112      	bne.n	80203b4 <__mdiff+0x3c>
 802038e:	4629      	mov	r1, r5
 8020390:	4630      	mov	r0, r6
 8020392:	f7ff fd5b 	bl	801fe4c <_Balloc>
 8020396:	4602      	mov	r2, r0
 8020398:	b928      	cbnz	r0, 80203a6 <__mdiff+0x2e>
 802039a:	4b3f      	ldr	r3, [pc, #252]	@ (8020498 <__mdiff+0x120>)
 802039c:	f240 2137 	movw	r1, #567	@ 0x237
 80203a0:	483e      	ldr	r0, [pc, #248]	@ (802049c <__mdiff+0x124>)
 80203a2:	f7fe fe9d 	bl	801f0e0 <__assert_func>
 80203a6:	2301      	movs	r3, #1
 80203a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80203ac:	4610      	mov	r0, r2
 80203ae:	b003      	add	sp, #12
 80203b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203b4:	bfbc      	itt	lt
 80203b6:	464b      	movlt	r3, r9
 80203b8:	46a1      	movlt	r9, r4
 80203ba:	4630      	mov	r0, r6
 80203bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80203c0:	bfba      	itte	lt
 80203c2:	461c      	movlt	r4, r3
 80203c4:	2501      	movlt	r5, #1
 80203c6:	2500      	movge	r5, #0
 80203c8:	f7ff fd40 	bl	801fe4c <_Balloc>
 80203cc:	4602      	mov	r2, r0
 80203ce:	b918      	cbnz	r0, 80203d8 <__mdiff+0x60>
 80203d0:	4b31      	ldr	r3, [pc, #196]	@ (8020498 <__mdiff+0x120>)
 80203d2:	f240 2145 	movw	r1, #581	@ 0x245
 80203d6:	e7e3      	b.n	80203a0 <__mdiff+0x28>
 80203d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80203dc:	6926      	ldr	r6, [r4, #16]
 80203de:	60c5      	str	r5, [r0, #12]
 80203e0:	f109 0310 	add.w	r3, r9, #16
 80203e4:	f109 0514 	add.w	r5, r9, #20
 80203e8:	f104 0e14 	add.w	lr, r4, #20
 80203ec:	f100 0b14 	add.w	fp, r0, #20
 80203f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80203f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80203f8:	9301      	str	r3, [sp, #4]
 80203fa:	46d9      	mov	r9, fp
 80203fc:	f04f 0c00 	mov.w	ip, #0
 8020400:	9b01      	ldr	r3, [sp, #4]
 8020402:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020406:	f853 af04 	ldr.w	sl, [r3, #4]!
 802040a:	9301      	str	r3, [sp, #4]
 802040c:	fa1f f38a 	uxth.w	r3, sl
 8020410:	4619      	mov	r1, r3
 8020412:	b283      	uxth	r3, r0
 8020414:	1acb      	subs	r3, r1, r3
 8020416:	0c00      	lsrs	r0, r0, #16
 8020418:	4463      	add	r3, ip
 802041a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802041e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020422:	b29b      	uxth	r3, r3
 8020424:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020428:	4576      	cmp	r6, lr
 802042a:	f849 3b04 	str.w	r3, [r9], #4
 802042e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020432:	d8e5      	bhi.n	8020400 <__mdiff+0x88>
 8020434:	1b33      	subs	r3, r6, r4
 8020436:	3b15      	subs	r3, #21
 8020438:	f023 0303 	bic.w	r3, r3, #3
 802043c:	3415      	adds	r4, #21
 802043e:	3304      	adds	r3, #4
 8020440:	42a6      	cmp	r6, r4
 8020442:	bf38      	it	cc
 8020444:	2304      	movcc	r3, #4
 8020446:	441d      	add	r5, r3
 8020448:	445b      	add	r3, fp
 802044a:	461e      	mov	r6, r3
 802044c:	462c      	mov	r4, r5
 802044e:	4544      	cmp	r4, r8
 8020450:	d30e      	bcc.n	8020470 <__mdiff+0xf8>
 8020452:	f108 0103 	add.w	r1, r8, #3
 8020456:	1b49      	subs	r1, r1, r5
 8020458:	f021 0103 	bic.w	r1, r1, #3
 802045c:	3d03      	subs	r5, #3
 802045e:	45a8      	cmp	r8, r5
 8020460:	bf38      	it	cc
 8020462:	2100      	movcc	r1, #0
 8020464:	440b      	add	r3, r1
 8020466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802046a:	b191      	cbz	r1, 8020492 <__mdiff+0x11a>
 802046c:	6117      	str	r7, [r2, #16]
 802046e:	e79d      	b.n	80203ac <__mdiff+0x34>
 8020470:	f854 1b04 	ldr.w	r1, [r4], #4
 8020474:	46e6      	mov	lr, ip
 8020476:	0c08      	lsrs	r0, r1, #16
 8020478:	fa1c fc81 	uxtah	ip, ip, r1
 802047c:	4471      	add	r1, lr
 802047e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020482:	b289      	uxth	r1, r1
 8020484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020488:	f846 1b04 	str.w	r1, [r6], #4
 802048c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020490:	e7dd      	b.n	802044e <__mdiff+0xd6>
 8020492:	3f01      	subs	r7, #1
 8020494:	e7e7      	b.n	8020466 <__mdiff+0xee>
 8020496:	bf00      	nop
 8020498:	080714f9 	.word	0x080714f9
 802049c:	0807150a 	.word	0x0807150a

080204a0 <__d2b>:
 80204a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80204a4:	460f      	mov	r7, r1
 80204a6:	2101      	movs	r1, #1
 80204a8:	ec59 8b10 	vmov	r8, r9, d0
 80204ac:	4616      	mov	r6, r2
 80204ae:	f7ff fccd 	bl	801fe4c <_Balloc>
 80204b2:	4604      	mov	r4, r0
 80204b4:	b930      	cbnz	r0, 80204c4 <__d2b+0x24>
 80204b6:	4602      	mov	r2, r0
 80204b8:	4b23      	ldr	r3, [pc, #140]	@ (8020548 <__d2b+0xa8>)
 80204ba:	4824      	ldr	r0, [pc, #144]	@ (802054c <__d2b+0xac>)
 80204bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80204c0:	f7fe fe0e 	bl	801f0e0 <__assert_func>
 80204c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80204c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80204cc:	b10d      	cbz	r5, 80204d2 <__d2b+0x32>
 80204ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80204d2:	9301      	str	r3, [sp, #4]
 80204d4:	f1b8 0300 	subs.w	r3, r8, #0
 80204d8:	d023      	beq.n	8020522 <__d2b+0x82>
 80204da:	4668      	mov	r0, sp
 80204dc:	9300      	str	r3, [sp, #0]
 80204de:	f7ff fd7c 	bl	801ffda <__lo0bits>
 80204e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80204e6:	b1d0      	cbz	r0, 802051e <__d2b+0x7e>
 80204e8:	f1c0 0320 	rsb	r3, r0, #32
 80204ec:	fa02 f303 	lsl.w	r3, r2, r3
 80204f0:	430b      	orrs	r3, r1
 80204f2:	40c2      	lsrs	r2, r0
 80204f4:	6163      	str	r3, [r4, #20]
 80204f6:	9201      	str	r2, [sp, #4]
 80204f8:	9b01      	ldr	r3, [sp, #4]
 80204fa:	61a3      	str	r3, [r4, #24]
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	bf0c      	ite	eq
 8020500:	2201      	moveq	r2, #1
 8020502:	2202      	movne	r2, #2
 8020504:	6122      	str	r2, [r4, #16]
 8020506:	b1a5      	cbz	r5, 8020532 <__d2b+0x92>
 8020508:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802050c:	4405      	add	r5, r0
 802050e:	603d      	str	r5, [r7, #0]
 8020510:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020514:	6030      	str	r0, [r6, #0]
 8020516:	4620      	mov	r0, r4
 8020518:	b003      	add	sp, #12
 802051a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802051e:	6161      	str	r1, [r4, #20]
 8020520:	e7ea      	b.n	80204f8 <__d2b+0x58>
 8020522:	a801      	add	r0, sp, #4
 8020524:	f7ff fd59 	bl	801ffda <__lo0bits>
 8020528:	9b01      	ldr	r3, [sp, #4]
 802052a:	6163      	str	r3, [r4, #20]
 802052c:	3020      	adds	r0, #32
 802052e:	2201      	movs	r2, #1
 8020530:	e7e8      	b.n	8020504 <__d2b+0x64>
 8020532:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020536:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802053a:	6038      	str	r0, [r7, #0]
 802053c:	6918      	ldr	r0, [r3, #16]
 802053e:	f7ff fd2d 	bl	801ff9c <__hi0bits>
 8020542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020546:	e7e5      	b.n	8020514 <__d2b+0x74>
 8020548:	080714f9 	.word	0x080714f9
 802054c:	0807150a 	.word	0x0807150a

08020550 <__sfputc_r>:
 8020550:	6893      	ldr	r3, [r2, #8]
 8020552:	3b01      	subs	r3, #1
 8020554:	2b00      	cmp	r3, #0
 8020556:	b410      	push	{r4}
 8020558:	6093      	str	r3, [r2, #8]
 802055a:	da08      	bge.n	802056e <__sfputc_r+0x1e>
 802055c:	6994      	ldr	r4, [r2, #24]
 802055e:	42a3      	cmp	r3, r4
 8020560:	db01      	blt.n	8020566 <__sfputc_r+0x16>
 8020562:	290a      	cmp	r1, #10
 8020564:	d103      	bne.n	802056e <__sfputc_r+0x1e>
 8020566:	f85d 4b04 	ldr.w	r4, [sp], #4
 802056a:	f7fe bc49 	b.w	801ee00 <__swbuf_r>
 802056e:	6813      	ldr	r3, [r2, #0]
 8020570:	1c58      	adds	r0, r3, #1
 8020572:	6010      	str	r0, [r2, #0]
 8020574:	7019      	strb	r1, [r3, #0]
 8020576:	4608      	mov	r0, r1
 8020578:	f85d 4b04 	ldr.w	r4, [sp], #4
 802057c:	4770      	bx	lr

0802057e <__sfputs_r>:
 802057e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020580:	4606      	mov	r6, r0
 8020582:	460f      	mov	r7, r1
 8020584:	4614      	mov	r4, r2
 8020586:	18d5      	adds	r5, r2, r3
 8020588:	42ac      	cmp	r4, r5
 802058a:	d101      	bne.n	8020590 <__sfputs_r+0x12>
 802058c:	2000      	movs	r0, #0
 802058e:	e007      	b.n	80205a0 <__sfputs_r+0x22>
 8020590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020594:	463a      	mov	r2, r7
 8020596:	4630      	mov	r0, r6
 8020598:	f7ff ffda 	bl	8020550 <__sfputc_r>
 802059c:	1c43      	adds	r3, r0, #1
 802059e:	d1f3      	bne.n	8020588 <__sfputs_r+0xa>
 80205a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080205a4 <_vfiprintf_r>:
 80205a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205a8:	460d      	mov	r5, r1
 80205aa:	b09d      	sub	sp, #116	@ 0x74
 80205ac:	4614      	mov	r4, r2
 80205ae:	4698      	mov	r8, r3
 80205b0:	4606      	mov	r6, r0
 80205b2:	b118      	cbz	r0, 80205bc <_vfiprintf_r+0x18>
 80205b4:	6a03      	ldr	r3, [r0, #32]
 80205b6:	b90b      	cbnz	r3, 80205bc <_vfiprintf_r+0x18>
 80205b8:	f7fe fb26 	bl	801ec08 <__sinit>
 80205bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80205be:	07d9      	lsls	r1, r3, #31
 80205c0:	d405      	bmi.n	80205ce <_vfiprintf_r+0x2a>
 80205c2:	89ab      	ldrh	r3, [r5, #12]
 80205c4:	059a      	lsls	r2, r3, #22
 80205c6:	d402      	bmi.n	80205ce <_vfiprintf_r+0x2a>
 80205c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80205ca:	f7fe fd70 	bl	801f0ae <__retarget_lock_acquire_recursive>
 80205ce:	89ab      	ldrh	r3, [r5, #12]
 80205d0:	071b      	lsls	r3, r3, #28
 80205d2:	d501      	bpl.n	80205d8 <_vfiprintf_r+0x34>
 80205d4:	692b      	ldr	r3, [r5, #16]
 80205d6:	b99b      	cbnz	r3, 8020600 <_vfiprintf_r+0x5c>
 80205d8:	4629      	mov	r1, r5
 80205da:	4630      	mov	r0, r6
 80205dc:	f7fe fc4e 	bl	801ee7c <__swsetup_r>
 80205e0:	b170      	cbz	r0, 8020600 <_vfiprintf_r+0x5c>
 80205e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80205e4:	07dc      	lsls	r4, r3, #31
 80205e6:	d504      	bpl.n	80205f2 <_vfiprintf_r+0x4e>
 80205e8:	f04f 30ff 	mov.w	r0, #4294967295
 80205ec:	b01d      	add	sp, #116	@ 0x74
 80205ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205f2:	89ab      	ldrh	r3, [r5, #12]
 80205f4:	0598      	lsls	r0, r3, #22
 80205f6:	d4f7      	bmi.n	80205e8 <_vfiprintf_r+0x44>
 80205f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80205fa:	f7fe fd59 	bl	801f0b0 <__retarget_lock_release_recursive>
 80205fe:	e7f3      	b.n	80205e8 <_vfiprintf_r+0x44>
 8020600:	2300      	movs	r3, #0
 8020602:	9309      	str	r3, [sp, #36]	@ 0x24
 8020604:	2320      	movs	r3, #32
 8020606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802060a:	f8cd 800c 	str.w	r8, [sp, #12]
 802060e:	2330      	movs	r3, #48	@ 0x30
 8020610:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80207c0 <_vfiprintf_r+0x21c>
 8020614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020618:	f04f 0901 	mov.w	r9, #1
 802061c:	4623      	mov	r3, r4
 802061e:	469a      	mov	sl, r3
 8020620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020624:	b10a      	cbz	r2, 802062a <_vfiprintf_r+0x86>
 8020626:	2a25      	cmp	r2, #37	@ 0x25
 8020628:	d1f9      	bne.n	802061e <_vfiprintf_r+0x7a>
 802062a:	ebba 0b04 	subs.w	fp, sl, r4
 802062e:	d00b      	beq.n	8020648 <_vfiprintf_r+0xa4>
 8020630:	465b      	mov	r3, fp
 8020632:	4622      	mov	r2, r4
 8020634:	4629      	mov	r1, r5
 8020636:	4630      	mov	r0, r6
 8020638:	f7ff ffa1 	bl	802057e <__sfputs_r>
 802063c:	3001      	adds	r0, #1
 802063e:	f000 80a7 	beq.w	8020790 <_vfiprintf_r+0x1ec>
 8020642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020644:	445a      	add	r2, fp
 8020646:	9209      	str	r2, [sp, #36]	@ 0x24
 8020648:	f89a 3000 	ldrb.w	r3, [sl]
 802064c:	2b00      	cmp	r3, #0
 802064e:	f000 809f 	beq.w	8020790 <_vfiprintf_r+0x1ec>
 8020652:	2300      	movs	r3, #0
 8020654:	f04f 32ff 	mov.w	r2, #4294967295
 8020658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802065c:	f10a 0a01 	add.w	sl, sl, #1
 8020660:	9304      	str	r3, [sp, #16]
 8020662:	9307      	str	r3, [sp, #28]
 8020664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020668:	931a      	str	r3, [sp, #104]	@ 0x68
 802066a:	4654      	mov	r4, sl
 802066c:	2205      	movs	r2, #5
 802066e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020672:	4853      	ldr	r0, [pc, #332]	@ (80207c0 <_vfiprintf_r+0x21c>)
 8020674:	f7df fdc4 	bl	8000200 <memchr>
 8020678:	9a04      	ldr	r2, [sp, #16]
 802067a:	b9d8      	cbnz	r0, 80206b4 <_vfiprintf_r+0x110>
 802067c:	06d1      	lsls	r1, r2, #27
 802067e:	bf44      	itt	mi
 8020680:	2320      	movmi	r3, #32
 8020682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020686:	0713      	lsls	r3, r2, #28
 8020688:	bf44      	itt	mi
 802068a:	232b      	movmi	r3, #43	@ 0x2b
 802068c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020690:	f89a 3000 	ldrb.w	r3, [sl]
 8020694:	2b2a      	cmp	r3, #42	@ 0x2a
 8020696:	d015      	beq.n	80206c4 <_vfiprintf_r+0x120>
 8020698:	9a07      	ldr	r2, [sp, #28]
 802069a:	4654      	mov	r4, sl
 802069c:	2000      	movs	r0, #0
 802069e:	f04f 0c0a 	mov.w	ip, #10
 80206a2:	4621      	mov	r1, r4
 80206a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80206a8:	3b30      	subs	r3, #48	@ 0x30
 80206aa:	2b09      	cmp	r3, #9
 80206ac:	d94b      	bls.n	8020746 <_vfiprintf_r+0x1a2>
 80206ae:	b1b0      	cbz	r0, 80206de <_vfiprintf_r+0x13a>
 80206b0:	9207      	str	r2, [sp, #28]
 80206b2:	e014      	b.n	80206de <_vfiprintf_r+0x13a>
 80206b4:	eba0 0308 	sub.w	r3, r0, r8
 80206b8:	fa09 f303 	lsl.w	r3, r9, r3
 80206bc:	4313      	orrs	r3, r2
 80206be:	9304      	str	r3, [sp, #16]
 80206c0:	46a2      	mov	sl, r4
 80206c2:	e7d2      	b.n	802066a <_vfiprintf_r+0xc6>
 80206c4:	9b03      	ldr	r3, [sp, #12]
 80206c6:	1d19      	adds	r1, r3, #4
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	9103      	str	r1, [sp, #12]
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	bfbb      	ittet	lt
 80206d0:	425b      	neglt	r3, r3
 80206d2:	f042 0202 	orrlt.w	r2, r2, #2
 80206d6:	9307      	strge	r3, [sp, #28]
 80206d8:	9307      	strlt	r3, [sp, #28]
 80206da:	bfb8      	it	lt
 80206dc:	9204      	strlt	r2, [sp, #16]
 80206de:	7823      	ldrb	r3, [r4, #0]
 80206e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80206e2:	d10a      	bne.n	80206fa <_vfiprintf_r+0x156>
 80206e4:	7863      	ldrb	r3, [r4, #1]
 80206e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80206e8:	d132      	bne.n	8020750 <_vfiprintf_r+0x1ac>
 80206ea:	9b03      	ldr	r3, [sp, #12]
 80206ec:	1d1a      	adds	r2, r3, #4
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	9203      	str	r2, [sp, #12]
 80206f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80206f6:	3402      	adds	r4, #2
 80206f8:	9305      	str	r3, [sp, #20]
 80206fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80207d0 <_vfiprintf_r+0x22c>
 80206fe:	7821      	ldrb	r1, [r4, #0]
 8020700:	2203      	movs	r2, #3
 8020702:	4650      	mov	r0, sl
 8020704:	f7df fd7c 	bl	8000200 <memchr>
 8020708:	b138      	cbz	r0, 802071a <_vfiprintf_r+0x176>
 802070a:	9b04      	ldr	r3, [sp, #16]
 802070c:	eba0 000a 	sub.w	r0, r0, sl
 8020710:	2240      	movs	r2, #64	@ 0x40
 8020712:	4082      	lsls	r2, r0
 8020714:	4313      	orrs	r3, r2
 8020716:	3401      	adds	r4, #1
 8020718:	9304      	str	r3, [sp, #16]
 802071a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802071e:	4829      	ldr	r0, [pc, #164]	@ (80207c4 <_vfiprintf_r+0x220>)
 8020720:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020724:	2206      	movs	r2, #6
 8020726:	f7df fd6b 	bl	8000200 <memchr>
 802072a:	2800      	cmp	r0, #0
 802072c:	d03f      	beq.n	80207ae <_vfiprintf_r+0x20a>
 802072e:	4b26      	ldr	r3, [pc, #152]	@ (80207c8 <_vfiprintf_r+0x224>)
 8020730:	bb1b      	cbnz	r3, 802077a <_vfiprintf_r+0x1d6>
 8020732:	9b03      	ldr	r3, [sp, #12]
 8020734:	3307      	adds	r3, #7
 8020736:	f023 0307 	bic.w	r3, r3, #7
 802073a:	3308      	adds	r3, #8
 802073c:	9303      	str	r3, [sp, #12]
 802073e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020740:	443b      	add	r3, r7
 8020742:	9309      	str	r3, [sp, #36]	@ 0x24
 8020744:	e76a      	b.n	802061c <_vfiprintf_r+0x78>
 8020746:	fb0c 3202 	mla	r2, ip, r2, r3
 802074a:	460c      	mov	r4, r1
 802074c:	2001      	movs	r0, #1
 802074e:	e7a8      	b.n	80206a2 <_vfiprintf_r+0xfe>
 8020750:	2300      	movs	r3, #0
 8020752:	3401      	adds	r4, #1
 8020754:	9305      	str	r3, [sp, #20]
 8020756:	4619      	mov	r1, r3
 8020758:	f04f 0c0a 	mov.w	ip, #10
 802075c:	4620      	mov	r0, r4
 802075e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020762:	3a30      	subs	r2, #48	@ 0x30
 8020764:	2a09      	cmp	r2, #9
 8020766:	d903      	bls.n	8020770 <_vfiprintf_r+0x1cc>
 8020768:	2b00      	cmp	r3, #0
 802076a:	d0c6      	beq.n	80206fa <_vfiprintf_r+0x156>
 802076c:	9105      	str	r1, [sp, #20]
 802076e:	e7c4      	b.n	80206fa <_vfiprintf_r+0x156>
 8020770:	fb0c 2101 	mla	r1, ip, r1, r2
 8020774:	4604      	mov	r4, r0
 8020776:	2301      	movs	r3, #1
 8020778:	e7f0      	b.n	802075c <_vfiprintf_r+0x1b8>
 802077a:	ab03      	add	r3, sp, #12
 802077c:	9300      	str	r3, [sp, #0]
 802077e:	462a      	mov	r2, r5
 8020780:	4b12      	ldr	r3, [pc, #72]	@ (80207cc <_vfiprintf_r+0x228>)
 8020782:	a904      	add	r1, sp, #16
 8020784:	4630      	mov	r0, r6
 8020786:	f7fd fdfb 	bl	801e380 <_printf_float>
 802078a:	4607      	mov	r7, r0
 802078c:	1c78      	adds	r0, r7, #1
 802078e:	d1d6      	bne.n	802073e <_vfiprintf_r+0x19a>
 8020790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020792:	07d9      	lsls	r1, r3, #31
 8020794:	d405      	bmi.n	80207a2 <_vfiprintf_r+0x1fe>
 8020796:	89ab      	ldrh	r3, [r5, #12]
 8020798:	059a      	lsls	r2, r3, #22
 802079a:	d402      	bmi.n	80207a2 <_vfiprintf_r+0x1fe>
 802079c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802079e:	f7fe fc87 	bl	801f0b0 <__retarget_lock_release_recursive>
 80207a2:	89ab      	ldrh	r3, [r5, #12]
 80207a4:	065b      	lsls	r3, r3, #25
 80207a6:	f53f af1f 	bmi.w	80205e8 <_vfiprintf_r+0x44>
 80207aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80207ac:	e71e      	b.n	80205ec <_vfiprintf_r+0x48>
 80207ae:	ab03      	add	r3, sp, #12
 80207b0:	9300      	str	r3, [sp, #0]
 80207b2:	462a      	mov	r2, r5
 80207b4:	4b05      	ldr	r3, [pc, #20]	@ (80207cc <_vfiprintf_r+0x228>)
 80207b6:	a904      	add	r1, sp, #16
 80207b8:	4630      	mov	r0, r6
 80207ba:	f7fe f879 	bl	801e8b0 <_printf_i>
 80207be:	e7e4      	b.n	802078a <_vfiprintf_r+0x1e6>
 80207c0:	08071660 	.word	0x08071660
 80207c4:	0807166a 	.word	0x0807166a
 80207c8:	0801e381 	.word	0x0801e381
 80207cc:	0802057f 	.word	0x0802057f
 80207d0:	08071666 	.word	0x08071666

080207d4 <__sflush_r>:
 80207d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80207d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207dc:	0716      	lsls	r6, r2, #28
 80207de:	4605      	mov	r5, r0
 80207e0:	460c      	mov	r4, r1
 80207e2:	d454      	bmi.n	802088e <__sflush_r+0xba>
 80207e4:	684b      	ldr	r3, [r1, #4]
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	dc02      	bgt.n	80207f0 <__sflush_r+0x1c>
 80207ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	dd48      	ble.n	8020882 <__sflush_r+0xae>
 80207f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80207f2:	2e00      	cmp	r6, #0
 80207f4:	d045      	beq.n	8020882 <__sflush_r+0xae>
 80207f6:	2300      	movs	r3, #0
 80207f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80207fc:	682f      	ldr	r7, [r5, #0]
 80207fe:	6a21      	ldr	r1, [r4, #32]
 8020800:	602b      	str	r3, [r5, #0]
 8020802:	d030      	beq.n	8020866 <__sflush_r+0x92>
 8020804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020806:	89a3      	ldrh	r3, [r4, #12]
 8020808:	0759      	lsls	r1, r3, #29
 802080a:	d505      	bpl.n	8020818 <__sflush_r+0x44>
 802080c:	6863      	ldr	r3, [r4, #4]
 802080e:	1ad2      	subs	r2, r2, r3
 8020810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020812:	b10b      	cbz	r3, 8020818 <__sflush_r+0x44>
 8020814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020816:	1ad2      	subs	r2, r2, r3
 8020818:	2300      	movs	r3, #0
 802081a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802081c:	6a21      	ldr	r1, [r4, #32]
 802081e:	4628      	mov	r0, r5
 8020820:	47b0      	blx	r6
 8020822:	1c43      	adds	r3, r0, #1
 8020824:	89a3      	ldrh	r3, [r4, #12]
 8020826:	d106      	bne.n	8020836 <__sflush_r+0x62>
 8020828:	6829      	ldr	r1, [r5, #0]
 802082a:	291d      	cmp	r1, #29
 802082c:	d82b      	bhi.n	8020886 <__sflush_r+0xb2>
 802082e:	4a2a      	ldr	r2, [pc, #168]	@ (80208d8 <__sflush_r+0x104>)
 8020830:	410a      	asrs	r2, r1
 8020832:	07d6      	lsls	r6, r2, #31
 8020834:	d427      	bmi.n	8020886 <__sflush_r+0xb2>
 8020836:	2200      	movs	r2, #0
 8020838:	6062      	str	r2, [r4, #4]
 802083a:	04d9      	lsls	r1, r3, #19
 802083c:	6922      	ldr	r2, [r4, #16]
 802083e:	6022      	str	r2, [r4, #0]
 8020840:	d504      	bpl.n	802084c <__sflush_r+0x78>
 8020842:	1c42      	adds	r2, r0, #1
 8020844:	d101      	bne.n	802084a <__sflush_r+0x76>
 8020846:	682b      	ldr	r3, [r5, #0]
 8020848:	b903      	cbnz	r3, 802084c <__sflush_r+0x78>
 802084a:	6560      	str	r0, [r4, #84]	@ 0x54
 802084c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802084e:	602f      	str	r7, [r5, #0]
 8020850:	b1b9      	cbz	r1, 8020882 <__sflush_r+0xae>
 8020852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020856:	4299      	cmp	r1, r3
 8020858:	d002      	beq.n	8020860 <__sflush_r+0x8c>
 802085a:	4628      	mov	r0, r5
 802085c:	f7ff faac 	bl	801fdb8 <_free_r>
 8020860:	2300      	movs	r3, #0
 8020862:	6363      	str	r3, [r4, #52]	@ 0x34
 8020864:	e00d      	b.n	8020882 <__sflush_r+0xae>
 8020866:	2301      	movs	r3, #1
 8020868:	4628      	mov	r0, r5
 802086a:	47b0      	blx	r6
 802086c:	4602      	mov	r2, r0
 802086e:	1c50      	adds	r0, r2, #1
 8020870:	d1c9      	bne.n	8020806 <__sflush_r+0x32>
 8020872:	682b      	ldr	r3, [r5, #0]
 8020874:	2b00      	cmp	r3, #0
 8020876:	d0c6      	beq.n	8020806 <__sflush_r+0x32>
 8020878:	2b1d      	cmp	r3, #29
 802087a:	d001      	beq.n	8020880 <__sflush_r+0xac>
 802087c:	2b16      	cmp	r3, #22
 802087e:	d11e      	bne.n	80208be <__sflush_r+0xea>
 8020880:	602f      	str	r7, [r5, #0]
 8020882:	2000      	movs	r0, #0
 8020884:	e022      	b.n	80208cc <__sflush_r+0xf8>
 8020886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802088a:	b21b      	sxth	r3, r3
 802088c:	e01b      	b.n	80208c6 <__sflush_r+0xf2>
 802088e:	690f      	ldr	r7, [r1, #16]
 8020890:	2f00      	cmp	r7, #0
 8020892:	d0f6      	beq.n	8020882 <__sflush_r+0xae>
 8020894:	0793      	lsls	r3, r2, #30
 8020896:	680e      	ldr	r6, [r1, #0]
 8020898:	bf08      	it	eq
 802089a:	694b      	ldreq	r3, [r1, #20]
 802089c:	600f      	str	r7, [r1, #0]
 802089e:	bf18      	it	ne
 80208a0:	2300      	movne	r3, #0
 80208a2:	eba6 0807 	sub.w	r8, r6, r7
 80208a6:	608b      	str	r3, [r1, #8]
 80208a8:	f1b8 0f00 	cmp.w	r8, #0
 80208ac:	dde9      	ble.n	8020882 <__sflush_r+0xae>
 80208ae:	6a21      	ldr	r1, [r4, #32]
 80208b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80208b2:	4643      	mov	r3, r8
 80208b4:	463a      	mov	r2, r7
 80208b6:	4628      	mov	r0, r5
 80208b8:	47b0      	blx	r6
 80208ba:	2800      	cmp	r0, #0
 80208bc:	dc08      	bgt.n	80208d0 <__sflush_r+0xfc>
 80208be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80208c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80208c6:	81a3      	strh	r3, [r4, #12]
 80208c8:	f04f 30ff 	mov.w	r0, #4294967295
 80208cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208d0:	4407      	add	r7, r0
 80208d2:	eba8 0800 	sub.w	r8, r8, r0
 80208d6:	e7e7      	b.n	80208a8 <__sflush_r+0xd4>
 80208d8:	dfbffffe 	.word	0xdfbffffe

080208dc <_fflush_r>:
 80208dc:	b538      	push	{r3, r4, r5, lr}
 80208de:	690b      	ldr	r3, [r1, #16]
 80208e0:	4605      	mov	r5, r0
 80208e2:	460c      	mov	r4, r1
 80208e4:	b913      	cbnz	r3, 80208ec <_fflush_r+0x10>
 80208e6:	2500      	movs	r5, #0
 80208e8:	4628      	mov	r0, r5
 80208ea:	bd38      	pop	{r3, r4, r5, pc}
 80208ec:	b118      	cbz	r0, 80208f6 <_fflush_r+0x1a>
 80208ee:	6a03      	ldr	r3, [r0, #32]
 80208f0:	b90b      	cbnz	r3, 80208f6 <_fflush_r+0x1a>
 80208f2:	f7fe f989 	bl	801ec08 <__sinit>
 80208f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d0f3      	beq.n	80208e6 <_fflush_r+0xa>
 80208fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020900:	07d0      	lsls	r0, r2, #31
 8020902:	d404      	bmi.n	802090e <_fflush_r+0x32>
 8020904:	0599      	lsls	r1, r3, #22
 8020906:	d402      	bmi.n	802090e <_fflush_r+0x32>
 8020908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802090a:	f7fe fbd0 	bl	801f0ae <__retarget_lock_acquire_recursive>
 802090e:	4628      	mov	r0, r5
 8020910:	4621      	mov	r1, r4
 8020912:	f7ff ff5f 	bl	80207d4 <__sflush_r>
 8020916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020918:	07da      	lsls	r2, r3, #31
 802091a:	4605      	mov	r5, r0
 802091c:	d4e4      	bmi.n	80208e8 <_fflush_r+0xc>
 802091e:	89a3      	ldrh	r3, [r4, #12]
 8020920:	059b      	lsls	r3, r3, #22
 8020922:	d4e1      	bmi.n	80208e8 <_fflush_r+0xc>
 8020924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020926:	f7fe fbc3 	bl	801f0b0 <__retarget_lock_release_recursive>
 802092a:	e7dd      	b.n	80208e8 <_fflush_r+0xc>

0802092c <fiprintf>:
 802092c:	b40e      	push	{r1, r2, r3}
 802092e:	b503      	push	{r0, r1, lr}
 8020930:	4601      	mov	r1, r0
 8020932:	ab03      	add	r3, sp, #12
 8020934:	4805      	ldr	r0, [pc, #20]	@ (802094c <fiprintf+0x20>)
 8020936:	f853 2b04 	ldr.w	r2, [r3], #4
 802093a:	6800      	ldr	r0, [r0, #0]
 802093c:	9301      	str	r3, [sp, #4]
 802093e:	f7ff fe31 	bl	80205a4 <_vfiprintf_r>
 8020942:	b002      	add	sp, #8
 8020944:	f85d eb04 	ldr.w	lr, [sp], #4
 8020948:	b003      	add	sp, #12
 802094a:	4770      	bx	lr
 802094c:	200000d8 	.word	0x200000d8

08020950 <__swhatbuf_r>:
 8020950:	b570      	push	{r4, r5, r6, lr}
 8020952:	460c      	mov	r4, r1
 8020954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020958:	2900      	cmp	r1, #0
 802095a:	b096      	sub	sp, #88	@ 0x58
 802095c:	4615      	mov	r5, r2
 802095e:	461e      	mov	r6, r3
 8020960:	da0d      	bge.n	802097e <__swhatbuf_r+0x2e>
 8020962:	89a3      	ldrh	r3, [r4, #12]
 8020964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020968:	f04f 0100 	mov.w	r1, #0
 802096c:	bf14      	ite	ne
 802096e:	2340      	movne	r3, #64	@ 0x40
 8020970:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020974:	2000      	movs	r0, #0
 8020976:	6031      	str	r1, [r6, #0]
 8020978:	602b      	str	r3, [r5, #0]
 802097a:	b016      	add	sp, #88	@ 0x58
 802097c:	bd70      	pop	{r4, r5, r6, pc}
 802097e:	466a      	mov	r2, sp
 8020980:	f000 f87c 	bl	8020a7c <_fstat_r>
 8020984:	2800      	cmp	r0, #0
 8020986:	dbec      	blt.n	8020962 <__swhatbuf_r+0x12>
 8020988:	9901      	ldr	r1, [sp, #4]
 802098a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802098e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020992:	4259      	negs	r1, r3
 8020994:	4159      	adcs	r1, r3
 8020996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802099a:	e7eb      	b.n	8020974 <__swhatbuf_r+0x24>

0802099c <__smakebuf_r>:
 802099c:	898b      	ldrh	r3, [r1, #12]
 802099e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80209a0:	079d      	lsls	r5, r3, #30
 80209a2:	4606      	mov	r6, r0
 80209a4:	460c      	mov	r4, r1
 80209a6:	d507      	bpl.n	80209b8 <__smakebuf_r+0x1c>
 80209a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80209ac:	6023      	str	r3, [r4, #0]
 80209ae:	6123      	str	r3, [r4, #16]
 80209b0:	2301      	movs	r3, #1
 80209b2:	6163      	str	r3, [r4, #20]
 80209b4:	b003      	add	sp, #12
 80209b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209b8:	ab01      	add	r3, sp, #4
 80209ba:	466a      	mov	r2, sp
 80209bc:	f7ff ffc8 	bl	8020950 <__swhatbuf_r>
 80209c0:	9f00      	ldr	r7, [sp, #0]
 80209c2:	4605      	mov	r5, r0
 80209c4:	4639      	mov	r1, r7
 80209c6:	4630      	mov	r0, r6
 80209c8:	f7fd faf8 	bl	801dfbc <_malloc_r>
 80209cc:	b948      	cbnz	r0, 80209e2 <__smakebuf_r+0x46>
 80209ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80209d2:	059a      	lsls	r2, r3, #22
 80209d4:	d4ee      	bmi.n	80209b4 <__smakebuf_r+0x18>
 80209d6:	f023 0303 	bic.w	r3, r3, #3
 80209da:	f043 0302 	orr.w	r3, r3, #2
 80209de:	81a3      	strh	r3, [r4, #12]
 80209e0:	e7e2      	b.n	80209a8 <__smakebuf_r+0xc>
 80209e2:	89a3      	ldrh	r3, [r4, #12]
 80209e4:	6020      	str	r0, [r4, #0]
 80209e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80209ea:	81a3      	strh	r3, [r4, #12]
 80209ec:	9b01      	ldr	r3, [sp, #4]
 80209ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80209f2:	b15b      	cbz	r3, 8020a0c <__smakebuf_r+0x70>
 80209f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80209f8:	4630      	mov	r0, r6
 80209fa:	f000 f851 	bl	8020aa0 <_isatty_r>
 80209fe:	b128      	cbz	r0, 8020a0c <__smakebuf_r+0x70>
 8020a00:	89a3      	ldrh	r3, [r4, #12]
 8020a02:	f023 0303 	bic.w	r3, r3, #3
 8020a06:	f043 0301 	orr.w	r3, r3, #1
 8020a0a:	81a3      	strh	r3, [r4, #12]
 8020a0c:	89a3      	ldrh	r3, [r4, #12]
 8020a0e:	431d      	orrs	r5, r3
 8020a10:	81a5      	strh	r5, [r4, #12]
 8020a12:	e7cf      	b.n	80209b4 <__smakebuf_r+0x18>

08020a14 <_putc_r>:
 8020a14:	b570      	push	{r4, r5, r6, lr}
 8020a16:	460d      	mov	r5, r1
 8020a18:	4614      	mov	r4, r2
 8020a1a:	4606      	mov	r6, r0
 8020a1c:	b118      	cbz	r0, 8020a26 <_putc_r+0x12>
 8020a1e:	6a03      	ldr	r3, [r0, #32]
 8020a20:	b90b      	cbnz	r3, 8020a26 <_putc_r+0x12>
 8020a22:	f7fe f8f1 	bl	801ec08 <__sinit>
 8020a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020a28:	07d8      	lsls	r0, r3, #31
 8020a2a:	d405      	bmi.n	8020a38 <_putc_r+0x24>
 8020a2c:	89a3      	ldrh	r3, [r4, #12]
 8020a2e:	0599      	lsls	r1, r3, #22
 8020a30:	d402      	bmi.n	8020a38 <_putc_r+0x24>
 8020a32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020a34:	f7fe fb3b 	bl	801f0ae <__retarget_lock_acquire_recursive>
 8020a38:	68a3      	ldr	r3, [r4, #8]
 8020a3a:	3b01      	subs	r3, #1
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	60a3      	str	r3, [r4, #8]
 8020a40:	da05      	bge.n	8020a4e <_putc_r+0x3a>
 8020a42:	69a2      	ldr	r2, [r4, #24]
 8020a44:	4293      	cmp	r3, r2
 8020a46:	db12      	blt.n	8020a6e <_putc_r+0x5a>
 8020a48:	b2eb      	uxtb	r3, r5
 8020a4a:	2b0a      	cmp	r3, #10
 8020a4c:	d00f      	beq.n	8020a6e <_putc_r+0x5a>
 8020a4e:	6823      	ldr	r3, [r4, #0]
 8020a50:	1c5a      	adds	r2, r3, #1
 8020a52:	6022      	str	r2, [r4, #0]
 8020a54:	701d      	strb	r5, [r3, #0]
 8020a56:	b2ed      	uxtb	r5, r5
 8020a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020a5a:	07da      	lsls	r2, r3, #31
 8020a5c:	d405      	bmi.n	8020a6a <_putc_r+0x56>
 8020a5e:	89a3      	ldrh	r3, [r4, #12]
 8020a60:	059b      	lsls	r3, r3, #22
 8020a62:	d402      	bmi.n	8020a6a <_putc_r+0x56>
 8020a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020a66:	f7fe fb23 	bl	801f0b0 <__retarget_lock_release_recursive>
 8020a6a:	4628      	mov	r0, r5
 8020a6c:	bd70      	pop	{r4, r5, r6, pc}
 8020a6e:	4629      	mov	r1, r5
 8020a70:	4622      	mov	r2, r4
 8020a72:	4630      	mov	r0, r6
 8020a74:	f7fe f9c4 	bl	801ee00 <__swbuf_r>
 8020a78:	4605      	mov	r5, r0
 8020a7a:	e7ed      	b.n	8020a58 <_putc_r+0x44>

08020a7c <_fstat_r>:
 8020a7c:	b538      	push	{r3, r4, r5, lr}
 8020a7e:	4d07      	ldr	r5, [pc, #28]	@ (8020a9c <_fstat_r+0x20>)
 8020a80:	2300      	movs	r3, #0
 8020a82:	4604      	mov	r4, r0
 8020a84:	4608      	mov	r0, r1
 8020a86:	4611      	mov	r1, r2
 8020a88:	602b      	str	r3, [r5, #0]
 8020a8a:	f7e5 fffd 	bl	8006a88 <_fstat>
 8020a8e:	1c43      	adds	r3, r0, #1
 8020a90:	d102      	bne.n	8020a98 <_fstat_r+0x1c>
 8020a92:	682b      	ldr	r3, [r5, #0]
 8020a94:	b103      	cbz	r3, 8020a98 <_fstat_r+0x1c>
 8020a96:	6023      	str	r3, [r4, #0]
 8020a98:	bd38      	pop	{r3, r4, r5, pc}
 8020a9a:	bf00      	nop
 8020a9c:	20014098 	.word	0x20014098

08020aa0 <_isatty_r>:
 8020aa0:	b538      	push	{r3, r4, r5, lr}
 8020aa2:	4d06      	ldr	r5, [pc, #24]	@ (8020abc <_isatty_r+0x1c>)
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	4604      	mov	r4, r0
 8020aa8:	4608      	mov	r0, r1
 8020aaa:	602b      	str	r3, [r5, #0]
 8020aac:	f7e5 fffc 	bl	8006aa8 <_isatty>
 8020ab0:	1c43      	adds	r3, r0, #1
 8020ab2:	d102      	bne.n	8020aba <_isatty_r+0x1a>
 8020ab4:	682b      	ldr	r3, [r5, #0]
 8020ab6:	b103      	cbz	r3, 8020aba <_isatty_r+0x1a>
 8020ab8:	6023      	str	r3, [r4, #0]
 8020aba:	bd38      	pop	{r3, r4, r5, pc}
 8020abc:	20014098 	.word	0x20014098

08020ac0 <abort>:
 8020ac0:	b508      	push	{r3, lr}
 8020ac2:	2006      	movs	r0, #6
 8020ac4:	f000 f84a 	bl	8020b5c <raise>
 8020ac8:	2001      	movs	r0, #1
 8020aca:	f7e5 ff8d 	bl	80069e8 <_exit>

08020ace <__ascii_mbtowc>:
 8020ace:	b082      	sub	sp, #8
 8020ad0:	b901      	cbnz	r1, 8020ad4 <__ascii_mbtowc+0x6>
 8020ad2:	a901      	add	r1, sp, #4
 8020ad4:	b142      	cbz	r2, 8020ae8 <__ascii_mbtowc+0x1a>
 8020ad6:	b14b      	cbz	r3, 8020aec <__ascii_mbtowc+0x1e>
 8020ad8:	7813      	ldrb	r3, [r2, #0]
 8020ada:	600b      	str	r3, [r1, #0]
 8020adc:	7812      	ldrb	r2, [r2, #0]
 8020ade:	1e10      	subs	r0, r2, #0
 8020ae0:	bf18      	it	ne
 8020ae2:	2001      	movne	r0, #1
 8020ae4:	b002      	add	sp, #8
 8020ae6:	4770      	bx	lr
 8020ae8:	4610      	mov	r0, r2
 8020aea:	e7fb      	b.n	8020ae4 <__ascii_mbtowc+0x16>
 8020aec:	f06f 0001 	mvn.w	r0, #1
 8020af0:	e7f8      	b.n	8020ae4 <__ascii_mbtowc+0x16>

08020af2 <__ascii_wctomb>:
 8020af2:	4603      	mov	r3, r0
 8020af4:	4608      	mov	r0, r1
 8020af6:	b141      	cbz	r1, 8020b0a <__ascii_wctomb+0x18>
 8020af8:	2aff      	cmp	r2, #255	@ 0xff
 8020afa:	d904      	bls.n	8020b06 <__ascii_wctomb+0x14>
 8020afc:	228a      	movs	r2, #138	@ 0x8a
 8020afe:	601a      	str	r2, [r3, #0]
 8020b00:	f04f 30ff 	mov.w	r0, #4294967295
 8020b04:	4770      	bx	lr
 8020b06:	700a      	strb	r2, [r1, #0]
 8020b08:	2001      	movs	r0, #1
 8020b0a:	4770      	bx	lr

08020b0c <_raise_r>:
 8020b0c:	291f      	cmp	r1, #31
 8020b0e:	b538      	push	{r3, r4, r5, lr}
 8020b10:	4605      	mov	r5, r0
 8020b12:	460c      	mov	r4, r1
 8020b14:	d904      	bls.n	8020b20 <_raise_r+0x14>
 8020b16:	2316      	movs	r3, #22
 8020b18:	6003      	str	r3, [r0, #0]
 8020b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8020b1e:	bd38      	pop	{r3, r4, r5, pc}
 8020b20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020b22:	b112      	cbz	r2, 8020b2a <_raise_r+0x1e>
 8020b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020b28:	b94b      	cbnz	r3, 8020b3e <_raise_r+0x32>
 8020b2a:	4628      	mov	r0, r5
 8020b2c:	f000 f830 	bl	8020b90 <_getpid_r>
 8020b30:	4622      	mov	r2, r4
 8020b32:	4601      	mov	r1, r0
 8020b34:	4628      	mov	r0, r5
 8020b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b3a:	f000 b817 	b.w	8020b6c <_kill_r>
 8020b3e:	2b01      	cmp	r3, #1
 8020b40:	d00a      	beq.n	8020b58 <_raise_r+0x4c>
 8020b42:	1c59      	adds	r1, r3, #1
 8020b44:	d103      	bne.n	8020b4e <_raise_r+0x42>
 8020b46:	2316      	movs	r3, #22
 8020b48:	6003      	str	r3, [r0, #0]
 8020b4a:	2001      	movs	r0, #1
 8020b4c:	e7e7      	b.n	8020b1e <_raise_r+0x12>
 8020b4e:	2100      	movs	r1, #0
 8020b50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020b54:	4620      	mov	r0, r4
 8020b56:	4798      	blx	r3
 8020b58:	2000      	movs	r0, #0
 8020b5a:	e7e0      	b.n	8020b1e <_raise_r+0x12>

08020b5c <raise>:
 8020b5c:	4b02      	ldr	r3, [pc, #8]	@ (8020b68 <raise+0xc>)
 8020b5e:	4601      	mov	r1, r0
 8020b60:	6818      	ldr	r0, [r3, #0]
 8020b62:	f7ff bfd3 	b.w	8020b0c <_raise_r>
 8020b66:	bf00      	nop
 8020b68:	200000d8 	.word	0x200000d8

08020b6c <_kill_r>:
 8020b6c:	b538      	push	{r3, r4, r5, lr}
 8020b6e:	4d07      	ldr	r5, [pc, #28]	@ (8020b8c <_kill_r+0x20>)
 8020b70:	2300      	movs	r3, #0
 8020b72:	4604      	mov	r4, r0
 8020b74:	4608      	mov	r0, r1
 8020b76:	4611      	mov	r1, r2
 8020b78:	602b      	str	r3, [r5, #0]
 8020b7a:	f7e5 ff25 	bl	80069c8 <_kill>
 8020b7e:	1c43      	adds	r3, r0, #1
 8020b80:	d102      	bne.n	8020b88 <_kill_r+0x1c>
 8020b82:	682b      	ldr	r3, [r5, #0]
 8020b84:	b103      	cbz	r3, 8020b88 <_kill_r+0x1c>
 8020b86:	6023      	str	r3, [r4, #0]
 8020b88:	bd38      	pop	{r3, r4, r5, pc}
 8020b8a:	bf00      	nop
 8020b8c:	20014098 	.word	0x20014098

08020b90 <_getpid_r>:
 8020b90:	f7e5 bf12 	b.w	80069b8 <_getpid>

08020b94 <_init>:
 8020b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b96:	bf00      	nop
 8020b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b9a:	bc08      	pop	{r3}
 8020b9c:	469e      	mov	lr, r3
 8020b9e:	4770      	bx	lr

08020ba0 <_fini>:
 8020ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ba2:	bf00      	nop
 8020ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ba6:	bc08      	pop	{r3}
 8020ba8:	469e      	mov	lr, r3
 8020baa:	4770      	bx	lr
