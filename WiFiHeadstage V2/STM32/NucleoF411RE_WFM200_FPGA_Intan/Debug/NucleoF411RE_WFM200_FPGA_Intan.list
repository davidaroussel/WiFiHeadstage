
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cecc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fd64  0801d070  0801d070  0001e070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806cdd4  0806cdd4  0006e288  2**0
                  CONTENTS
  4 .ARM          00000008  0806cdd4  0806cdd4  0006ddd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806cddc  0806cddc  0006e288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806cddc  0806cddc  0006dddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806cde0  0806cde0  0006dde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0806cde4  0006e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013db8  20000288  0806d06c  0006e288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014040  0806d06c  0006f040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0006e288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000329fa  00000000  00000000  0006e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000970f  00000000  00000000  000a0cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002408  00000000  00000000  000aa3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c2e  00000000  00000000  000ac7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ec6  00000000  00000000  000ae3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bdd6  00000000  00000000  000d82c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7344  00000000  00000000  0011409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cb3de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a030  00000000  00000000  001cb424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001d5454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801d054 	.word	0x0801d054

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0801d054 	.word	0x0801d054

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <SPI_SEND_RECV>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t size) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	70fb      	strb	r3, [r7, #3]
	uint16_t Size = size;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	827b      	strh	r3, [r7, #18]

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d003      	beq.n	8000ef2 <SPI_SEND_RECV+0x2a>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->pRxBuffPtr = (uint8_t *)rx_ptr;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount = Size;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8a7a      	ldrh	r2, [r7, #18]
 8000f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
	hspi->RxXferSize = Size;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	8a7a      	ldrh	r2, [r7, #18]
 8000f08:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->pTxBuffPtr = (uint8_t *)tx_ptr;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount = Size;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8a7a      	ldrh	r2, [r7, #18]
 8000f14:	86da      	strh	r2, [r3, #54]	@ 0x36
	hspi->TxXferSize = Size;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8a7a      	ldrh	r2, [r7, #18]
 8000f1a:	869a      	strh	r2, [r3, #52]	@ 0x34

	/* Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->TxISR = NULL;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	2b40      	cmp	r3, #64	@ 0x40
 8000f34:	d007      	beq.n	8000f46 <SPI_SEND_RECV+0x7e>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f44:	601a      	str	r2, [r3, #0]
	}

	// RESET CS_PIN
	if (hspi->Instance == SPI3) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a3c      	ldr	r2, [pc, #240]	@ (800103c <SPI_SEND_RECV+0x174>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d104      	bne.n	8000f5a <SPI_SEND_RECV+0x92>
		RHS_SPI_CS_Port->BSRR = (uint32_t)RHS_SPI_CS_Pin << 16U;
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <SPI_SEND_RECV+0x178>)
 8000f52:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	e04d      	b.n	8000ff6 <SPI_SEND_RECV+0x12e>
	} else if (hspi->Instance == SPI4) {
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a39      	ldr	r2, [pc, #228]	@ (8001044 <SPI_SEND_RECV+0x17c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d148      	bne.n	8000ff6 <SPI_SEND_RECV+0x12e>
		RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 8000f64:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <SPI_SEND_RECV+0x180>)
 8000f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f6a:	619a      	str	r2, [r3, #24]
	}

	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8000f6c:	e043      	b.n	8000ff6 <SPI_SEND_RECV+0x12e>
		/* Check TXE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d11b      	bne.n	8000fb4 <SPI_SEND_RECV+0xec>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d016      	beq.n	8000fb4 <SPI_SEND_RECV+0xec>
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d113      	bne.n	8000fb4 <SPI_SEND_RECV+0xec>
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	1c9a      	adds	r2, r3, #2
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	631a      	str	r2, [r3, #48]	@ 0x30
			hspi->TxXferCount--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	86da      	strh	r2, [r3, #54]	@ 0x36
			/* Next Data is a reception (Rx). Tx not allowed */
			txallowed = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
		}

		/* Check RXNE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d119      	bne.n	8000ff6 <SPI_SEND_RECV+0x12e>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d014      	beq.n	8000ff6 <SPI_SEND_RECV+0x12e>
			*((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	801a      	strh	r2, [r3, #0]
			hspi->pRxBuffPtr += sizeof(uint16_t);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fde:	1c9a      	adds	r2, r3, #2
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
			hspi->RxXferCount--;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
			/* Next Data is a Transmission (Tx). Tx is allowed */
			txallowed = 1U;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1b6      	bne.n	8000f6e <SPI_SEND_RECV+0xa6>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001004:	b29b      	uxth	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1b1      	bne.n	8000f6e <SPI_SEND_RECV+0xa6>
		}
	}

	// SET CS_PIN
	if (hspi->Instance == SPI3){
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <SPI_SEND_RECV+0x174>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d103      	bne.n	800101c <SPI_SEND_RECV+0x154>
		RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <SPI_SEND_RECV+0x178>)
 8001016:	2204      	movs	r2, #4
 8001018:	619a      	str	r2, [r3, #24]
	} else if (hspi->Instance == SPI4) {
		RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
	}
}
 800101a:	e008      	b.n	800102e <SPI_SEND_RECV+0x166>
	} else if (hspi->Instance == SPI4) {
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <SPI_SEND_RECV+0x17c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d103      	bne.n	800102e <SPI_SEND_RECV+0x166>
		RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <SPI_SEND_RECV+0x180>)
 8001028:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40003c00 	.word	0x40003c00
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40013400 	.word	0x40013400
 8001048:	40020400 	.word	0x40020400

0800104c <TIM2_IRQHandler>:
TIM_HandleTypeDef htim2;
osSemaphoreId samplingSemaphore;
bool TIMER_FLAG = false;

// TIM2 Interrupt Handler
void TIM2_IRQHandler(void) {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <TIM2_IRQHandler+0x2c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d107      	bne.n	800106e <TIM2_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <TIM2_IRQHandler+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0201 	mvn.w	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
        TIMER_FLAG = true;
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <TIM2_IRQHandler+0x30>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    }
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200003ac 	.word	0x200003ac
 800107c:	200003f4 	.word	0x200003f4

08001080 <start_app_task>:




void start_app_task(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8001084:	2200      	movs	r2, #0
 8001086:	210c      	movs	r1, #12
 8001088:	2014      	movs	r0, #20
 800108a:	f009 fb73 	bl	800a774 <xQueueGenericCreate>
 800108e:	4603      	mov	r3, r0
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <start_app_task+0x2c>)
 8001092:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <start_app_task+0x2c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <start_app_task+0x22>
  		printf("booboo Queue \r\n");
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <start_app_task+0x30>)
 800109e:	f01a f8ef 	bl	801b280 <puts>

//	TASK_RHD_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

//  	Timer2_Init();

	INIT_INTAN();
 80010a2:	f000 f807 	bl	80010b4 <INIT_INTAN>



//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200002a4 	.word	0x200002a4
 80010b0:	0801d120 	.word	0x0801d120

080010b4 <INIT_INTAN>:
osThreadId sampleTaskHandle;
extern osSemaphoreId samplingSemaphore;
extern uint32_t global_counter;


void INIT_INTAN(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	SPI_HandleTypeDef *hspi;

	printf("Init RHD \r\n");
 80010ba:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <INIT_INTAN+0x40>)
 80010bc:	f01a f8e0 	bl	801b280 <puts>
	hspi = &hspi4;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <INIT_INTAN+0x44>)
 80010c2:	607b      	str	r3, [r7, #4]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);  //Activate SPI
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010d2:	601a      	str	r2, [r3, #0]
	hspi->Instance->CR1 |= SPI_CR1_DFF; 		//Activating the 16bit data mode
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010e2:	601a      	str	r2, [r3, #0]
	INIT_RHD(hspi);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f9ab 	bl	8001440 <INIT_RHD>
//	printf("Init RHS \r\n");
//	hspi = &hspi3;
//	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
//	hspi->Instance->CR1 |= SPI_CR1_DFF;
//	INIT_RHS(hspi);
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0801d130 	.word	0x0801d130
 80010f8:	200009c0 	.word	0x200009c0

080010fc <Intan_Sampling_task_entry>:
		printf("Error creating SPI task \r\n");
	}
}


void Intan_Sampling_task_entry(void const *arg) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
	SPI_HandleTypeDef *hspi;
	hspi = &hspi3;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <Intan_Sampling_task_entry+0x34>)
 800110a:	60fb      	str	r3, [r7, #12]
	int seconds = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    while(1) {
    	seconds += 1;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
        HAL_Delay(1000);
 8001116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111a:	f003 fa6f 	bl	80045fc <HAL_Delay>
        printf("Number of seconds: %i \r\n", seconds);
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <Intan_Sampling_task_entry+0x38>)
 8001122:	f01a f845 	bl	801b1b0 <iprintf>
        vTaskDelay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f00a fbe4 	bl	800b8f4 <vTaskDelay>
    	seconds += 1;
 800112c:	bf00      	nop
 800112e:	e7ef      	b.n	8001110 <Intan_Sampling_task_entry+0x14>
 8001130:	20000968 	.word	0x20000968
 8001134:	0801d194 	.word	0x0801d194

08001138 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3301      	adds	r3, #1
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <from_hex+0x54>)
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <from_hex+0x24>
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3b30      	subs	r3, #48	@ 0x30
 8001158:	b2db      	uxtb	r3, r3
 800115a:	e011      	b.n	8001180 <from_hex+0x48>
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <from_hex+0x54>)
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <from_hex+0x40>
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	3320      	adds	r3, #32
 8001176:	e000      	b.n	800117a <from_hex+0x42>
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3b57      	subs	r3, #87	@ 0x57
 800117e:	b2db      	uxtb	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	0806ca77 	.word	0x0806ca77

08001190 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b095      	sub	sp, #84	@ 0x54
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int i = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (strlen(str) > 64) {
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f87d 	bl	80002a0 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b40      	cmp	r3, #64	@ 0x40
 80011aa:	d947      	bls.n	800123c <url_decode+0xac>
    return SL_STATUS_FAIL;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e056      	b.n	800125e <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 80011b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b25      	cmp	r3, #37	@ 0x25
 80011b6:	d128      	bne.n	800120a <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 80011b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ba:	3301      	adds	r3, #1
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d039      	beq.n	8001236 <url_decode+0xa6>
 80011c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011c4:	3302      	adds	r3, #2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d034      	beq.n	8001236 <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 80011cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ce:	3301      	adds	r3, #1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffb0 	bl	8001138 <from_hex>
 80011d8:	4603      	mov	r3, r0
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	b25c      	sxtb	r4, r3
 80011de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011e0:	3302      	adds	r3, #2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffa7 	bl	8001138 <from_hex>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4323      	orrs	r3, r4
 80011f0:	b259      	sxtb	r1, r3
 80011f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80011f8:	b2ca      	uxtb	r2, r1
 80011fa:	3350      	adds	r3, #80	@ 0x50
 80011fc:	443b      	add	r3, r7
 80011fe:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 8001202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001204:	3302      	adds	r3, #2
 8001206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001208:	e015      	b.n	8001236 <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 800120a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001210:	d108      	bne.n	8001224 <url_decode+0x94>
      rstr[i++]  = ' ';
 8001212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001218:	3350      	adds	r3, #80	@ 0x50
 800121a:	443b      	add	r3, r7
 800121c:	2220      	movs	r2, #32
 800121e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001222:	e008      	b.n	8001236 <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 8001224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	64ba      	str	r2, [r7, #72]	@ 0x48
 800122a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	3350      	adds	r3, #80	@ 0x50
 8001230:	443b      	add	r3, r7
 8001232:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 8001236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001238:	3301      	adds	r3, #1
 800123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (*pstr) {
 800123c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1b5      	bne.n	80011b0 <url_decode+0x20>
  }
  rstr[i] = '\0';
 8001244:	f107 0208 	add.w	r2, r7, #8
 8001248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f01a f9c1 	bl	801b5de <strcpy>
  return SL_STATUS_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3754      	adds	r7, #84	@ 0x54
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
	...

08001268 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <wifi_autoconnexion_init+0x28>)
 8001270:	1d3c      	adds	r4, r7, #4
 8001272:	461d      	mov	r5, r3
 8001274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f008 fdf4 	bl	8009e6e <osThreadCreate>

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	0801d1c4 	.word	0x0801d1c4

08001294 <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b097      	sub	sp, #92	@ 0x5c
 8001298:	af08      	add	r7, sp, #32
 800129a:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 800129c:	2303      	movs	r3, #3
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 80012a0:	4b58      	ldr	r3, [pc, #352]	@ (8001404 <wifi_station_connect_task_entry+0x170>)
 80012a2:	f107 0418 	add.w	r4, r7, #24
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 80012ac:	4b56      	ldr	r3, [pc, #344]	@ (8001408 <wifi_station_connect_task_entry+0x174>)
 80012ae:	f107 0408 	add.w	r4, r7, #8
 80012b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30

  if (num_params == 3) {
 80012c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	f040 8096 	bne.w	80013f4 <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	4950      	ldr	r1, [pc, #320]	@ (800140c <wifi_station_connect_task_entry+0x178>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ff87 	bl	80001e0 <strcmp>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d114      	bne.n	8001302 <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff58 	bl	8001190 <url_decode>
      ssid_length = strlen(pc_value[0]);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7fe ffdc 	bl	80002a0 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
      memset(wlan_ssid, 0, 32);
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	4847      	ldr	r0, [pc, #284]	@ (8001410 <wifi_station_connect_task_entry+0x17c>)
 80012f2:	f01a f8bf 	bl	801b474 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012fa:	4619      	mov	r1, r3
 80012fc:	4844      	ldr	r0, [pc, #272]	@ (8001410 <wifi_station_connect_task_entry+0x17c>)
 80012fe:	f01a f8d3 	bl	801b4a8 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4943      	ldr	r1, [pc, #268]	@ (8001414 <wifi_station_connect_task_entry+0x180>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ff6a 	bl	80001e0 <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d114      	bne.n	800133c <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff3b 	bl	8001190 <url_decode>
      passkey_length = strlen(pc_value[1]);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ffbf 	bl	80002a0 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	633b      	str	r3, [r7, #48]	@ 0x30
      memset(wlan_passkey, 0, 64);
 8001326:	2240      	movs	r2, #64	@ 0x40
 8001328:	2100      	movs	r1, #0
 800132a:	483b      	ldr	r0, [pc, #236]	@ (8001418 <wifi_station_connect_task_entry+0x184>)
 800132c:	f01a f8a2 	bl	801b474 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001334:	4619      	mov	r1, r3
 8001336:	4838      	ldr	r0, [pc, #224]	@ (8001418 <wifi_station_connect_task_entry+0x184>)
 8001338:	f01a f8b6 	bl	801b4a8 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	4937      	ldr	r1, [pc, #220]	@ (800141c <wifi_station_connect_task_entry+0x188>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff4d 	bl	80001e0 <strcmp>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d12e      	bne.n	80013aa <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff1e 	bl	8001190 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4932      	ldr	r1, [pc, #200]	@ (8001420 <wifi_station_connect_task_entry+0x18c>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff41 	bl	80001e0 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <wifi_station_connect_task_entry+0xe0>
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	492f      	ldr	r1, [pc, #188]	@ (8001424 <wifi_station_connect_task_entry+0x190>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff39 	bl	80001e0 <strcmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8001374:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <wifi_station_connect_task_entry+0x194>)
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e016      	b.n	80013aa <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	492b      	ldr	r1, [pc, #172]	@ (800142c <wifi_station_connect_task_entry+0x198>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ff2d 	bl	80001e0 <strcmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <wifi_station_connect_task_entry+0x194>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e00a      	b.n	80013aa <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4926      	ldr	r1, [pc, #152]	@ (8001430 <wifi_station_connect_task_entry+0x19c>)
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe ff21 	bl	80001e0 <strcmp>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <wifi_station_connect_task_entry+0x194>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <wifi_station_connect_task_entry+0x1a0>)
 80013ac:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d120      	bne.n	80013fa <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 80013b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <wifi_station_connect_task_entry+0x194>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013c0:	b292      	uxth	r2, r2
 80013c2:	2000      	movs	r0, #0
 80013c4:	9006      	str	r0, [sp, #24]
 80013c6:	2000      	movs	r0, #0
 80013c8:	9005      	str	r0, [sp, #20]
 80013ca:	9204      	str	r2, [sp, #16]
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <wifi_station_connect_task_entry+0x184>)
 80013ce:	9203      	str	r2, [sp, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	9202      	str	r2, [sp, #8]
 80013d4:	2200      	movs	r2, #0
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2200      	movs	r2, #0
 80013de:	480c      	ldr	r0, [pc, #48]	@ (8001410 <wifi_station_connect_task_entry+0x17c>)
 80013e0:	f006 fce8 	bl	8007db4 <sl_wfx_send_join_command>
 80013e4:	62b8      	str	r0, [r7, #40]	@ 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 80013e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 80013ec:	4812      	ldr	r0, [pc, #72]	@ (8001438 <wifi_station_connect_task_entry+0x1a4>)
 80013ee:	f019 ff47 	bl	801b280 <puts>
 80013f2:	e002      	b.n	80013fa <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 80013f4:	4811      	ldr	r0, [pc, #68]	@ (800143c <wifi_station_connect_task_entry+0x1a8>)
 80013f6:	f019 ff43 	bl	801b280 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f008 fd5e 	bl	8009ebc <osThreadTerminate>
 8001400:	e7fb      	b.n	80013fa <wifi_station_connect_task_entry+0x166>
 8001402:	bf00      	nop
 8001404:	0801d240 	.word	0x0801d240
 8001408:	0801d26c 	.word	0x0801d26c
 800140c:	0801d1d8 	.word	0x0801d1d8
 8001410:	20000000 	.word	0x20000000
 8001414:	0801d1e0 	.word	0x0801d1e0
 8001418:	20000024 	.word	0x20000024
 800141c:	0801d1e4 	.word	0x0801d1e4
 8001420:	0801d1ec 	.word	0x0801d1ec
 8001424:	0801d1f4 	.word	0x0801d1f4
 8001428:	20000065 	.word	0x20000065
 800142c:	0801d1f8 	.word	0x0801d1f8
 8001430:	0801d1fc 	.word	0x0801d1fc
 8001434:	200003f8 	.word	0x200003f8
 8001438:	0801d204 	.word	0x0801d204
 800143c:	0801d220 	.word	0x0801d220

08001440 <INIT_RHD>:
 *      Author: david
 */

#include "Intan_utils.h"

void INIT_RHD(SPI_HandleTypeDef *hspi){
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	@ 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	uint16_t tx_vector;
	uint16_t rx_vector[1];
	uint8_t data_size = 1; //Number of Bytes to send
 8001448:	2301      	movs	r3, #1
 800144a:	77fb      	strb	r3, [r7, #31]
	uint8_t reg_address;
	uint8_t reg_value;
	uint16_t formated_value;
	uint8_t bit_shifting = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	const char *rhd_versions[] = {"RHD2132", "RHD2216", "RHD2164"};
 8001452:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <INIT_RHD+0x30>)
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	ca07      	ldmia	r2, {r0, r1, r2}
 800145a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *rhd_detected = rhd_versions[2];
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <INIT_RHD+0x34>)
 8001464:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001468:	619a      	str	r2, [r3, #24]

	for (int i = 0; i<9 ; i++){
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
 800146e:	e011      	b.n	8001494 <INIT_RHD+0x54>
 8001470:	0801d424 	.word	0x0801d424
 8001474:	40020400 	.word	0x40020400
		// Register 63 for DUMMY READ on BOOT
		tx_vector = 0b1111111100000000;
 8001478:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800147c:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	f107 0214 	add.w	r2, r7, #20
 8001484:	f107 0118 	add.w	r1, r7, #24
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fd1d 	bl	8000ec8 <SPI_SEND_RECV>
	for (int i = 0; i<9 ; i++){
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	2b08      	cmp	r3, #8
 8001498:	ddee      	ble.n	8001478 <INIT_RHD+0x38>

	}

	// Register 0 - ADC config.
	reg_address = 0b10000000;
 800149a:	2380      	movs	r3, #128	@ 0x80
 800149c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11011110;
 800149e:	23de      	movs	r3, #222	@ 0xde
 80014a0:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80014a2:	7fbb      	ldrb	r3, [r7, #30]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	7f7b      	ldrb	r3, [r7, #29]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	f107 0214 	add.w	r2, r7, #20
 80014ba:	f107 0118 	add.w	r1, r7, #24
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fd02 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 1 - Supply sensor & ADC buffer bias current
	reg_address = 0b10000001;
 80014c4:	2381      	movs	r3, #129	@ 0x81
 80014c6:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00100000; //(ADC BUFFER BIAS AT 32)
 80014c8:	2320      	movs	r3, #32
 80014ca:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80014cc:	7fbb      	ldrb	r3, [r7, #30]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	7f7b      	ldrb	r3, [r7, #29]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21b      	sxth	r3, r3
 80014da:	b29b      	uxth	r3, r3
 80014dc:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	f107 0214 	add.w	r2, r7, #20
 80014e4:	f107 0118 	add.w	r1, r7, #24
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fced 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 2 - MUX bias current
	reg_address = 0b10000010;
 80014ee:	2382      	movs	r3, #130	@ 0x82
 80014f0:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101000; //(MUX BIAS AT 40)
 80014f2:	2328      	movs	r3, #40	@ 0x28
 80014f4:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80014f6:	7fbb      	ldrb	r3, [r7, #30]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7f7b      	ldrb	r3, [r7, #29]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	f107 0214 	add.w	r2, r7, #20
 800150e:	f107 0118 	add.w	r1, r7, #24
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fcd8 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	reg_address = 0b10000011;
 8001518:	2383      	movs	r3, #131	@ 0x83
 800151a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000010;
 800151c:	2302      	movs	r3, #2
 800151e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001520:	7fbb      	ldrb	r3, [r7, #30]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7f7b      	ldrb	r3, [r7, #29]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	f107 0214 	add.w	r2, r7, #20
 8001538:	f107 0118 	add.w	r1, r7, #24
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fcc3 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 4 - ADC output format & DSP offset removal
	reg_address = 0b10000100;
 8001542:	2384      	movs	r3, #132	@ 0x84
 8001544:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11010110;
 8001546:	23d6      	movs	r3, #214	@ 0xd6
 8001548:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800154a:	7fbb      	ldrb	r3, [r7, #30]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21b      	sxth	r3, r3
 8001558:	b29b      	uxth	r3, r3
 800155a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800155c:	7ffb      	ldrb	r3, [r7, #31]
 800155e:	f107 0214 	add.w	r2, r7, #20
 8001562:	f107 0118 	add.w	r1, r7, #24
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fcae 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 5 - Impedance check control
	reg_address = 0b10000101;
 800156c:	2385      	movs	r3, #133	@ 0x85
 800156e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001570:	2300      	movs	r3, #0
 8001572:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001574:	7fbb      	ldrb	r3, [r7, #30]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7f7b      	ldrb	r3, [r7, #29]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	f107 0214 	add.w	r2, r7, #20
 800158c:	f107 0118 	add.w	r1, r7, #24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fc99 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 6 - Impedance check DAC [unchanged]
	reg_address = 0b10000110;
 8001596:	2386      	movs	r3, #134	@ 0x86
 8001598:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800159a:	2300      	movs	r3, #0
 800159c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800159e:	7fbb      	ldrb	r3, [r7, #30]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7f7b      	ldrb	r3, [r7, #29]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80015b0:	7ffb      	ldrb	r3, [r7, #31]
 80015b2:	f107 0214 	add.w	r2, r7, #20
 80015b6:	f107 0118 	add.w	r1, r7, #24
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fc84 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 7 - Impedance check amplifier select [unchanged]
	reg_address = 0b10000111;
 80015c0:	2387      	movs	r3, #135	@ 0x87
 80015c2:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80015c4:	2300      	movs	r3, #0
 80015c6:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80015c8:	7fbb      	ldrb	r3, [r7, #30]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7f7b      	ldrb	r3, [r7, #29]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	f107 0214 	add.w	r2, r7, #20
 80015e0:	f107 0118 	add.w	r1, r7, #24
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fc6f 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	reg_address = 0b10001000;
 80015ea:	2388      	movs	r3, #136	@ 0x88
 80015ec:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00011110;
 80015ee:	231e      	movs	r3, #30
 80015f0:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80015f2:	7fbb      	ldrb	r3, [r7, #30]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	7f7b      	ldrb	r3, [r7, #29]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	b29b      	uxth	r3, r3
 8001602:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	f107 0214 	add.w	r2, r7, #20
 800160a:	f107 0118 	add.w	r1, r7, #24
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fc5a 	bl	8000ec8 <SPI_SEND_RECV>

	// 	Reg. 9 -> 5
	reg_address = 0b10001001;
 8001614:	2389      	movs	r3, #137	@ 0x89
 8001616:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000101;
 8001618:	2305      	movs	r3, #5
 800161a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800161c:	7fbb      	ldrb	r3, [r7, #30]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7f7b      	ldrb	r3, [r7, #29]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21b      	sxth	r3, r3
 800162a:	b29b      	uxth	r3, r3
 800162c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	f107 0214 	add.w	r2, r7, #20
 8001634:	f107 0118 	add.w	r1, r7, #24
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fc45 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 10 -> 43
	reg_address = 0b10001010;
 800163e:	238a      	movs	r3, #138	@ 0x8a
 8001640:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101011;
 8001642:	232b      	movs	r3, #43	@ 0x2b
 8001644:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001646:	7fbb      	ldrb	r3, [r7, #30]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21a      	sxth	r2, r3
 800164c:	7f7b      	ldrb	r3, [r7, #29]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	f107 0214 	add.w	r2, r7, #20
 800165e:	f107 0118 	add.w	r1, r7, #24
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fc30 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 11 -> 6
	reg_address = 0b10001011;
 8001668:	238b      	movs	r3, #139	@ 0x8b
 800166a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000110;
 800166c:	2306      	movs	r3, #6
 800166e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001670:	7fbb      	ldrb	r3, [r7, #30]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	7f7b      	ldrb	r3, [r7, #29]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21b      	sxth	r3, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001682:	7ffb      	ldrb	r3, [r7, #31]
 8001684:	f107 0214 	add.w	r2, r7, #20
 8001688:	f107 0118 	add.w	r1, r7, #24
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fc1b 	bl	8000ec8 <SPI_SEND_RECV>

	// 	Reg. 12 -> 54
	reg_address = 0b10001100;
 8001692:	238c      	movs	r3, #140	@ 0x8c
 8001694:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00110110;
 8001696:	2336      	movs	r3, #54	@ 0x36
 8001698:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800169a:	7fbb      	ldrb	r3, [r7, #30]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21a      	sxth	r2, r3
 80016a0:	7f7b      	ldrb	r3, [r7, #29]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80016ac:	7ffb      	ldrb	r3, [r7, #31]
 80016ae:	f107 0214 	add.w	r2, r7, #20
 80016b2:	f107 0118 	add.w	r1, r7, #24
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fc06 	bl	8000ec8 <SPI_SEND_RECV>

	// 	Reg. 13 -> 0
	reg_address = 0b10001101;
 80016bc:	238d      	movs	r3, #141	@ 0x8d
 80016be:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80016c0:	2300      	movs	r3, #0
 80016c2:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80016c4:	7fbb      	ldrb	r3, [r7, #30]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7f7b      	ldrb	r3, [r7, #29]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80016d6:	7ffb      	ldrb	r3, [r7, #31]
 80016d8:	f107 0214 	add.w	r2, r7, #20
 80016dc:	f107 0118 	add.w	r1, r7, #24
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fbf1 	bl	8000ec8 <SPI_SEND_RECV>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	reg_address = 0b10001110;
 80016e6:	238e      	movs	r3, #142	@ 0x8e
 80016e8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80016ea:	23ff      	movs	r3, #255	@ 0xff
 80016ec:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80016ee:	7fbb      	ldrb	r3, [r7, #30]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	7f7b      	ldrb	r3, [r7, #29]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	f107 0214 	add.w	r2, r7, #20
 8001706:	f107 0118 	add.w	r1, r7, #24
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fbdc 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 15
	reg_address = 0b10001111;
 8001710:	238f      	movs	r3, #143	@ 0x8f
 8001712:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8001714:	23ff      	movs	r3, #255	@ 0xff
 8001716:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001718:	7fbb      	ldrb	r3, [r7, #30]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	7f7b      	ldrb	r3, [r7, #29]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21b      	sxth	r3, r3
 8001726:	b29b      	uxth	r3, r3
 8001728:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800172a:	7ffb      	ldrb	r3, [r7, #31]
 800172c:	f107 0214 	add.w	r2, r7, #20
 8001730:	f107 0118 	add.w	r1, r7, #24
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fbc7 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 16
	reg_address = 0b10010000;
 800173a:	2390      	movs	r3, #144	@ 0x90
 800173c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 800173e:	23ff      	movs	r3, #255	@ 0xff
 8001740:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001742:	7fbb      	ldrb	r3, [r7, #30]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21a      	sxth	r2, r3
 8001748:	7f7b      	ldrb	r3, [r7, #29]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	f107 0214 	add.w	r2, r7, #20
 800175a:	f107 0118 	add.w	r1, r7, #24
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fbb2 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 17
	reg_address = 0b10010001;
 8001764:	2391      	movs	r3, #145	@ 0x91
 8001766:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8001768:	23ff      	movs	r3, #255	@ 0xff
 800176a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800176c:	7fbb      	ldrb	r3, [r7, #30]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	7f7b      	ldrb	r3, [r7, #29]
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21b      	sxth	r3, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	f107 0214 	add.w	r2, r7, #20
 8001784:	f107 0118 	add.w	r1, r7, #24
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fb9d 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 18
	reg_address = 0b10010010;
 800178e:	2392      	movs	r3, #146	@ 0x92
 8001790:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8001792:	23ff      	movs	r3, #255	@ 0xff
 8001794:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001796:	7fbb      	ldrb	r3, [r7, #30]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	7f7b      	ldrb	r3, [r7, #29]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80017a8:	7ffb      	ldrb	r3, [r7, #31]
 80017aa:	f107 0214 	add.w	r2, r7, #20
 80017ae:	f107 0118 	add.w	r1, r7, #24
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fb88 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 19
	reg_address = 0b10010011;
 80017b8:	2393      	movs	r3, #147	@ 0x93
 80017ba:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80017bc:	23ff      	movs	r3, #255	@ 0xff
 80017be:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80017c0:	7fbb      	ldrb	r3, [r7, #30]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7f7b      	ldrb	r3, [r7, #29]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	f107 0214 	add.w	r2, r7, #20
 80017d8:	f107 0118 	add.w	r1, r7, #24
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fb73 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 20
	reg_address = 0b10010100;
 80017e2:	2394      	movs	r3, #148	@ 0x94
 80017e4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80017e6:	23ff      	movs	r3, #255	@ 0xff
 80017e8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80017ea:	7fbb      	ldrb	r3, [r7, #30]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	7f7b      	ldrb	r3, [r7, #29]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
 80017fe:	f107 0214 	add.w	r2, r7, #20
 8001802:	f107 0118 	add.w	r1, r7, #24
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fb5e 	bl	8000ec8 <SPI_SEND_RECV>

	//	Reg. 21
	reg_address = 0b10010101;
 800180c:	2395      	movs	r3, #149	@ 0x95
 800180e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8001810:	23ff      	movs	r3, #255	@ 0xff
 8001812:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001814:	7fbb      	ldrb	r3, [r7, #30]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	7f7b      	ldrb	r3, [r7, #29]
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b21b      	sxth	r3, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	f107 0214 	add.w	r2, r7, #20
 800182c:	f107 0118 	add.w	r1, r7, #24
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fb49 	bl	8000ec8 <SPI_SEND_RECV>

	// Calibrate ADC
	HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	@ 0x64
 8001838:	f002 fee0 	bl	80045fc <HAL_Delay>
	reg_address = 0b01010101;
 800183c:	2355      	movs	r3, #85	@ 0x55
 800183e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001840:	2300      	movs	r3, #0
 8001842:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001844:	7fbb      	ldrb	r3, [r7, #30]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	7f7b      	ldrb	r3, [r7, #29]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21b      	sxth	r3, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	f107 0214 	add.w	r2, r7, #20
 800185c:	f107 0118 	add.w	r1, r7, #24
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fb31 	bl	8000ec8 <SPI_SEND_RECV>

	for (int i = 0; i<9 ; i++){
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
 800186a:	e017      	b.n	800189c <INIT_RHD+0x45c>
		// Register 63 for DUMMY READ on BOOT
		reg_address = 0b11111111;
 800186c:	23ff      	movs	r3, #255	@ 0xff
 800186e:	77bb      	strb	r3, [r7, #30]
		reg_value = 0b00000000;
 8001870:	2300      	movs	r3, #0
 8001872:	777b      	strb	r3, [r7, #29]
		tx_vector = (reg_address << 8) | reg_value;
 8001874:	7fbb      	ldrb	r3, [r7, #30]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	7f7b      	ldrb	r3, [r7, #29]
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	f107 0214 	add.w	r2, r7, #20
 800188c:	f107 0118 	add.w	r1, r7, #24
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fb19 	bl	8000ec8 <SPI_SEND_RECV>
	for (int i = 0; i<9 ; i++){
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	3301      	adds	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	dde4      	ble.n	800186c <INIT_RHD+0x42c>

	}

	//Read Register 59 MISO MARKER
	reg_address = 0b11111011;
 80018a2:	23fb      	movs	r3, #251	@ 0xfb
 80018a4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80018a6:	2300      	movs	r3, #0
 80018a8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80018aa:	7fbb      	ldrb	r3, [r7, #30]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	7f7b      	ldrb	r3, [r7, #29]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80018bc:	7ffb      	ldrb	r3, [r7, #31]
 80018be:	f107 0214 	add.w	r2, r7, #20
 80018c2:	f107 0118 	add.w	r1, r7, #24
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fafe 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 80018da:	23ff      	movs	r3, #255	@ 0xff
 80018dc:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80018de:	2300      	movs	r3, #0
 80018e0:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80018e2:	7fbb      	ldrb	r3, [r7, #30]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	7f7b      	ldrb	r3, [r7, #29]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	f107 0214 	add.w	r2, r7, #20
 80018fa:	f107 0118 	add.w	r1, r7, #24
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fae2 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8001904:	8abb      	ldrh	r3, [r7, #20]
 8001906:	461a      	mov	r2, r3
 8001908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8001912:	23ff      	movs	r3, #255	@ 0xff
 8001914:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001916:	2300      	movs	r3, #0
 8001918:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800191a:	7fbb      	ldrb	r3, [r7, #30]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	7f7b      	ldrb	r3, [r7, #29]
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21b      	sxth	r3, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	f107 0214 	add.w	r2, r7, #20
 8001932:	f107 0118 	add.w	r1, r7, #24
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fac6 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 800193c:	8abb      	ldrh	r3, [r7, #20]
 800193e:	461a      	mov	r2, r3
 8001940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - MISO MARKER :   %c - 0x%04X \r\n", (int)formated_value, formated_value);
 800194a:	8b7b      	ldrh	r3, [r7, #26]
 800194c:	8b7a      	ldrh	r2, [r7, #26]
 800194e:	4619      	mov	r1, r3
 8001950:	4899      	ldr	r0, [pc, #612]	@ (8001bb8 <INIT_RHD+0x778>)
 8001952:	f019 fc2d 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001956:	4899      	ldr	r0, [pc, #612]	@ (8001bbc <INIT_RHD+0x77c>)
 8001958:	f019 fc92 	bl	801b280 <puts>

	if (formated_value == 0x00){
 800195c:	8b7b      	ldrh	r3, [r7, #26]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <INIT_RHD+0x534>
		bit_shifting = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		printf("Shifting Bit to 0 \r\n");
 8001968:	4895      	ldr	r0, [pc, #596]	@ (8001bc0 <INIT_RHD+0x780>)
 800196a:	f019 fc89 	bl	801b280 <puts>
		printf("------------------------------------------------  \r\n");
 800196e:	4893      	ldr	r0, [pc, #588]	@ (8001bbc <INIT_RHD+0x77c>)
 8001970:	f019 fc86 	bl	801b280 <puts>
	}

	//Read Register 40
	reg_address = 0b11101000;
 8001974:	23e8      	movs	r3, #232	@ 0xe8
 8001976:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001978:	2300      	movs	r3, #0
 800197a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800197c:	7fbb      	ldrb	r3, [r7, #30]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	7f7b      	ldrb	r3, [r7, #29]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	833b      	strh	r3, [r7, #24]
 	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	f107 0214 	add.w	r2, r7, #20
 8001994:	f107 0118 	add.w	r1, r7, #24
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fa95 	bl	8000ec8 <SPI_SEND_RECV>

	//Read Register 41
	reg_address = 0b11101001;
 800199e:	23e9      	movs	r3, #233	@ 0xe9
 80019a0:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80019a2:	2300      	movs	r3, #0
 80019a4:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80019a6:	7fbb      	ldrb	r3, [r7, #30]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	7f7b      	ldrb	r3, [r7, #29]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);;
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	f107 0214 	add.w	r2, r7, #20
 80019be:	f107 0118 	add.w	r1, r7, #24
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fa80 	bl	8000ec8 <SPI_SEND_RECV>

	//Read Register 42
	reg_address = 0b11101010;
 80019c8:	23ea      	movs	r3, #234	@ 0xea
 80019ca:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80019cc:	2300      	movs	r3, #0
 80019ce:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80019d0:	7fbb      	ldrb	r3, [r7, #30]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	7f7b      	ldrb	r3, [r7, #29]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b21b      	sxth	r3, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	f107 0118 	add.w	r1, r7, #24
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fa6b 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80019f2:	8abb      	ldrh	r3, [r7, #20]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be I :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001a00:	8b7b      	ldrh	r3, [r7, #26]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	8b7b      	ldrh	r3, [r7, #26]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	486e      	ldr	r0, [pc, #440]	@ (8001bc4 <INIT_RHD+0x784>)
 8001a0c:	f019 fbd0 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001a10:	486a      	ldr	r0, [pc, #424]	@ (8001bbc <INIT_RHD+0x77c>)
 8001a12:	f019 fc35 	bl	801b280 <puts>

	//Read Register 43
	reg_address = 0b11101011;
 8001a16:	23eb      	movs	r3, #235	@ 0xeb
 8001a18:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001a1e:	7fbb      	ldrb	r3, [r7, #30]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	7f7b      	ldrb	r3, [r7, #29]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	f107 0214 	add.w	r2, r7, #20
 8001a36:	f107 0118 	add.w	r1, r7, #24
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fa44 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8001a40:	8abb      	ldrh	r3, [r7, #20]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001a4e:	8b7b      	ldrh	r3, [r7, #26]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	8b7b      	ldrh	r3, [r7, #26]
 8001a56:	461a      	mov	r2, r3
 8001a58:	485b      	ldr	r0, [pc, #364]	@ (8001bc8 <INIT_RHD+0x788>)
 8001a5a:	f019 fba9 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001a5e:	4857      	ldr	r0, [pc, #348]	@ (8001bbc <INIT_RHD+0x77c>)
 8001a60:	f019 fc0e 	bl	801b280 <puts>

	//Read Register 44
	reg_address = 0b11101100;
 8001a64:	23ec      	movs	r3, #236	@ 0xec
 8001a66:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001a6c:	7fbb      	ldrb	r3, [r7, #30]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	7f7b      	ldrb	r3, [r7, #29]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	f107 0214 	add.w	r2, r7, #20
 8001a84:	f107 0118 	add.w	r1, r7, #24
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fa1d 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8001a8e:	8abb      	ldrh	r3, [r7, #20]
 8001a90:	461a      	mov	r2, r3
 8001a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be T :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001a9c:	8b7b      	ldrh	r3, [r7, #26]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	8b7b      	ldrh	r3, [r7, #26]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4849      	ldr	r0, [pc, #292]	@ (8001bcc <INIT_RHD+0x78c>)
 8001aa8:	f019 fb82 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001aac:	4843      	ldr	r0, [pc, #268]	@ (8001bbc <INIT_RHD+0x77c>)
 8001aae:	f019 fbe7 	bl	801b280 <puts>


	//Read Register 63
	reg_address = 0b11111111;
 8001ab2:	23ff      	movs	r3, #255	@ 0xff
 8001ab4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001aba:	7fbb      	ldrb	r3, [r7, #30]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	7f7b      	ldrb	r3, [r7, #29]
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
 8001ace:	f107 0214 	add.w	r2, r7, #20
 8001ad2:	f107 0118 	add.w	r1, r7, #24
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff f9f6 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8001adc:	8abb      	ldrh	r3, [r7, #20]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be A :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001aea:	8b7b      	ldrh	r3, [r7, #26]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	8b7b      	ldrh	r3, [r7, #26]
 8001af2:	461a      	mov	r2, r3
 8001af4:	4836      	ldr	r0, [pc, #216]	@ (8001bd0 <INIT_RHD+0x790>)
 8001af6:	f019 fb5b 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001afa:	4830      	ldr	r0, [pc, #192]	@ (8001bbc <INIT_RHD+0x77c>)
 8001afc:	f019 fbc0 	bl	801b280 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8001b00:	23ff      	movs	r3, #255	@ 0xff
 8001b02:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001b04:	2300      	movs	r3, #0
 8001b06:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001b08:	7fbb      	ldrb	r3, [r7, #30]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7f7b      	ldrb	r3, [r7, #29]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	f107 0214 	add.w	r2, r7, #20
 8001b20:	f107 0118 	add.w	r1, r7, #24
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff f9cf 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8001b2a:	8abb      	ldrh	r3, [r7, #20]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001b38:	8b7b      	ldrh	r3, [r7, #26]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	8b7b      	ldrh	r3, [r7, #26]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <INIT_RHD+0x788>)
 8001b44:	f019 fb34 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001b48:	481c      	ldr	r0, [pc, #112]	@ (8001bbc <INIT_RHD+0x77c>)
 8001b4a:	f019 fb99 	bl	801b280 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8001b4e:	23ff      	movs	r3, #255	@ 0xff
 8001b50:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8001b52:	2300      	movs	r3, #0
 8001b54:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001b56:	7fbb      	ldrb	r3, [r7, #30]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	7f7b      	ldrb	r3, [r7, #29]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	f107 0214 	add.w	r2, r7, #20
 8001b6e:	f107 0118 	add.w	r1, r7, #24
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff f9a8 	bl	8000ec8 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8001b78:	8abb      	ldrh	r3, [r7, #20]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	837b      	strh	r3, [r7, #26]

	if (formated_value == 0x01){
 8001b86:	8b7b      	ldrh	r3, [r7, #26]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d102      	bne.n	8001b92 <INIT_RHD+0x752>
		rhd_detected = rhd_versions[0];
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b90:	e004      	b.n	8001b9c <INIT_RHD+0x75c>
	}
	else if (formated_value == 0x02){
 8001b92:	8b7b      	ldrh	r3, [r7, #26]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d101      	bne.n	8001b9c <INIT_RHD+0x75c>
		rhd_detected = rhd_versions[1];
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	printf("Char Receiving Data - CHIP ID : %s - 0x%04X \r\n", rhd_detected, formated_value);
 8001b9c:	8b7b      	ldrh	r3, [r7, #26]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ba2:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <INIT_RHD+0x794>)
 8001ba4:	f019 fb04 	bl	801b1b0 <iprintf>
	printf("------------------------------------------------  \r\n");
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <INIT_RHD+0x77c>)
 8001baa:	f019 fb69 	bl	801b280 <puts>

 }
 8001bae:	bf00      	nop
 8001bb0:	3730      	adds	r7, #48	@ 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0801d27c 	.word	0x0801d27c
 8001bbc:	0801d2b4 	.word	0x0801d2b4
 8001bc0:	0801d2e8 	.word	0x0801d2e8
 8001bc4:	0801d2fc 	.word	0x0801d2fc
 8001bc8:	0801d334 	.word	0x0801d334
 8001bcc:	0801d36c 	.word	0x0801d36c
 8001bd0:	0801d3a4 	.word	0x0801d3a4
 8001bd4:	0801d3dc 	.word	0x0801d3dc

08001bd8 <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <dhcpclient_set_link_state+0x28>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8001bec:	e002      	b.n	8001bf4 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <dhcpclient_set_link_state+0x28>)
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	701a      	strb	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	2000061c 	.word	0x2000061c

08001c04 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8001c10:	4b9a      	ldr	r3, [pc, #616]	@ (8001e7c <dhcpclient_start+0x278>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	f000 811f 	beq.w	8001e5a <dhcpclient_start+0x256>
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	f300 8125 	bgt.w	8001e6c <dhcpclient_start+0x268>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d002      	beq.n	8001c2c <dhcpclient_start+0x28>
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d012      	beq.n	8001c50 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 8001c2a:	e11f      	b.n	8001e6c <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8001c3e:	4a90      	ldr	r2, [pc, #576]	@ (8001e80 <dhcpclient_start+0x27c>)
 8001c40:	2100      	movs	r1, #0
 8001c42:	69f8      	ldr	r0, [r7, #28]
 8001c44:	f00b fd46 	bl	800d6d4 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8001c48:	4b8c      	ldr	r3, [pc, #560]	@ (8001e7c <dhcpclient_start+0x278>)
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e110      	b.n	8001e72 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8001c50:	69f8      	ldr	r0, [r7, #28]
 8001c52:	f015 fec3 	bl	80179dc <dhcp_supplied_address>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d018      	beq.n	8001c8e <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8001c5c:	4b87      	ldr	r3, [pc, #540]	@ (8001e7c <dhcpclient_start+0x278>)
 8001c5e:	2203      	movs	r2, #3
 8001c60:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8001c62:	4b88      	ldr	r3, [pc, #544]	@ (8001e84 <dhcpclient_start+0x280>)
 8001c64:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001c66:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 8001c68:	4b86      	ldr	r3, [pc, #536]	@ (8001e84 <dhcpclient_start+0x280>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001c6e:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8001c70:	4b84      	ldr	r3, [pc, #528]	@ (8001e84 <dhcpclient_start+0x280>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001c76:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 8001c78:	4b82      	ldr	r3, [pc, #520]	@ (8001e84 <dhcpclient_start+0x280>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4603      	mov	r3, r0
 8001c82:	4881      	ldr	r0, [pc, #516]	@ (8001e88 <dhcpclient_start+0x284>)
 8001c84:	f019 fa94 	bl	801b1b0 <iprintf>
          start_app_task();
 8001c88:	f7ff f9fa 	bl	8001080 <start_app_task>
      break;
 8001c8c:	e0f0      	b.n	8001e70 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	799b      	ldrb	r3, [r3, #6]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	f240 80e9 	bls.w	8001e70 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8001c9e:	4b77      	ldr	r3, [pc, #476]	@ (8001e7c <dhcpclient_start+0x278>)
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4979      	ldr	r1, [pc, #484]	@ (8001e8c <dhcpclient_start+0x288>)
 8001ca8:	69f8      	ldr	r0, [r7, #28]
 8001caa:	f00b fd13 	bl	800d6d4 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8001cae:	4b78      	ldr	r3, [pc, #480]	@ (8001e90 <dhcpclient_start+0x28c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	061a      	lsls	r2, r3, #24
 8001cb4:	4b77      	ldr	r3, [pc, #476]	@ (8001e94 <dhcpclient_start+0x290>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	4b76      	ldr	r3, [pc, #472]	@ (8001e98 <dhcpclient_start+0x294>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	4a75      	ldr	r2, [pc, #468]	@ (8001e9c <dhcpclient_start+0x298>)
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	061a      	lsls	r2, r3, #24
 8001ccc:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <dhcpclient_start+0x28c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	0619      	lsls	r1, r3, #24
 8001cd2:	4b70      	ldr	r3, [pc, #448]	@ (8001e94 <dhcpclient_start+0x290>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	4319      	orrs	r1, r3
 8001cda:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <dhcpclient_start+0x294>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	496e      	ldr	r1, [pc, #440]	@ (8001e9c <dhcpclient_start+0x298>)
 8001ce4:	7809      	ldrb	r1, [r1, #0]
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	4b67      	ldr	r3, [pc, #412]	@ (8001e90 <dhcpclient_start+0x28c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	0619      	lsls	r1, r3, #24
 8001cf6:	4b67      	ldr	r3, [pc, #412]	@ (8001e94 <dhcpclient_start+0x290>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4b66      	ldr	r3, [pc, #408]	@ (8001e98 <dhcpclient_start+0x294>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	430b      	orrs	r3, r1
 8001d06:	4965      	ldr	r1, [pc, #404]	@ (8001e9c <dhcpclient_start+0x298>)
 8001d08:	7809      	ldrb	r1, [r1, #0]
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001d12:	431a      	orrs	r2, r3
 8001d14:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <dhcpclient_start+0x28c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	0619      	lsls	r1, r3, #24
 8001d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8001e94 <dhcpclient_start+0x290>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	4319      	orrs	r1, r3
 8001d22:	4b5d      	ldr	r3, [pc, #372]	@ (8001e98 <dhcpclient_start+0x294>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	495c      	ldr	r1, [pc, #368]	@ (8001e9c <dhcpclient_start+0x298>)
 8001d2c:	7809      	ldrb	r1, [r1, #0]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	0e1b      	lsrs	r3, r3, #24
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8001d36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <dhcpclient_start+0x29c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	061a      	lsls	r2, r3, #24
 8001d3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <dhcpclient_start+0x2a0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	431a      	orrs	r2, r3
 8001d44:	4b58      	ldr	r3, [pc, #352]	@ (8001ea8 <dhcpclient_start+0x2a4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	4a57      	ldr	r2, [pc, #348]	@ (8001eac <dhcpclient_start+0x2a8>)
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	061a      	lsls	r2, r3, #24
 8001d54:	4b52      	ldr	r3, [pc, #328]	@ (8001ea0 <dhcpclient_start+0x29c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	0619      	lsls	r1, r3, #24
 8001d5a:	4b52      	ldr	r3, [pc, #328]	@ (8001ea4 <dhcpclient_start+0x2a0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	4319      	orrs	r1, r3
 8001d62:	4b51      	ldr	r3, [pc, #324]	@ (8001ea8 <dhcpclient_start+0x2a4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	4950      	ldr	r1, [pc, #320]	@ (8001eac <dhcpclient_start+0x2a8>)
 8001d6c:	7809      	ldrb	r1, [r1, #0]
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001d76:	431a      	orrs	r2, r3
 8001d78:	4b49      	ldr	r3, [pc, #292]	@ (8001ea0 <dhcpclient_start+0x29c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	0619      	lsls	r1, r3, #24
 8001d7e:	4b49      	ldr	r3, [pc, #292]	@ (8001ea4 <dhcpclient_start+0x2a0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	4319      	orrs	r1, r3
 8001d86:	4b48      	ldr	r3, [pc, #288]	@ (8001ea8 <dhcpclient_start+0x2a4>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	4947      	ldr	r1, [pc, #284]	@ (8001eac <dhcpclient_start+0x2a8>)
 8001d90:	7809      	ldrb	r1, [r1, #0]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <dhcpclient_start+0x29c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	0619      	lsls	r1, r3, #24
 8001da2:	4b40      	ldr	r3, [pc, #256]	@ (8001ea4 <dhcpclient_start+0x2a0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	4319      	orrs	r1, r3
 8001daa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <dhcpclient_start+0x2a4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	430b      	orrs	r3, r1
 8001db2:	493e      	ldr	r1, [pc, #248]	@ (8001eac <dhcpclient_start+0x2a8>)
 8001db4:	7809      	ldrb	r1, [r1, #0]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	0e1b      	lsrs	r3, r3, #24
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb0 <dhcpclient_start+0x2ac>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	061a      	lsls	r2, r3, #24
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <dhcpclient_start+0x2b0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <dhcpclient_start+0x2b4>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	4a39      	ldr	r2, [pc, #228]	@ (8001ebc <dhcpclient_start+0x2b8>)
 8001dd6:	7812      	ldrb	r2, [r2, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	061a      	lsls	r2, r3, #24
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <dhcpclient_start+0x2ac>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	0619      	lsls	r1, r3, #24
 8001de2:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <dhcpclient_start+0x2b0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	041b      	lsls	r3, r3, #16
 8001de8:	4319      	orrs	r1, r3
 8001dea:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <dhcpclient_start+0x2b4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4932      	ldr	r1, [pc, #200]	@ (8001ebc <dhcpclient_start+0x2b8>)
 8001df4:	7809      	ldrb	r1, [r1, #0]
 8001df6:	430b      	orrs	r3, r1
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <dhcpclient_start+0x2ac>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	0619      	lsls	r1, r3, #24
 8001e06:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <dhcpclient_start+0x2b0>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	4319      	orrs	r1, r3
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <dhcpclient_start+0x2b4>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	430b      	orrs	r3, r1
 8001e16:	4929      	ldr	r1, [pc, #164]	@ (8001ebc <dhcpclient_start+0x2b8>)
 8001e18:	7809      	ldrb	r1, [r1, #0]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001e22:	431a      	orrs	r2, r3
 8001e24:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <dhcpclient_start+0x2ac>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	0619      	lsls	r1, r3, #24
 8001e2a:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <dhcpclient_start+0x2b0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	4319      	orrs	r1, r3
 8001e32:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <dhcpclient_start+0x2b4>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	4920      	ldr	r1, [pc, #128]	@ (8001ebc <dhcpclient_start+0x2b8>)
 8001e3c:	7809      	ldrb	r1, [r1, #0]
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	0e1b      	lsrs	r3, r3, #24
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	f107 0210 	add.w	r2, r7, #16
 8001e4e:	f107 0114 	add.w	r1, r7, #20
 8001e52:	69f8      	ldr	r0, [r7, #28]
 8001e54:	f00c fe6e 	bl	800eb34 <netif_set_addr>
      break;
 8001e58:	e00a      	b.n	8001e70 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	490b      	ldr	r1, [pc, #44]	@ (8001e8c <dhcpclient_start+0x288>)
 8001e5e:	69f8      	ldr	r0, [r7, #28]
 8001e60:	f00b fc38 	bl	800d6d4 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <dhcpclient_start+0x278>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
    break;
 8001e6a:	e002      	b.n	8001e72 <dhcpclient_start+0x26e>
    default: break;
 8001e6c:	bf00      	nop
 8001e6e:	e000      	b.n	8001e72 <dhcpclient_start+0x26e>
      break;
 8001e70:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8001e72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e76:	f009 fd3d 	bl	800b8f4 <vTaskDelay>
    switch (dhcp_state)
 8001e7a:	e6c9      	b.n	8001c10 <dhcpclient_start+0xc>
 8001e7c:	2000061c 	.word	0x2000061c
 8001e80:	080163d9 	.word	0x080163d9
 8001e84:	20000878 	.word	0x20000878
 8001e88:	0801d430 	.word	0x0801d430
 8001e8c:	08016e8d 	.word	0x08016e8d
 8001e90:	20000090 	.word	0x20000090
 8001e94:	20000091 	.word	0x20000091
 8001e98:	2000091a 	.word	0x2000091a
 8001e9c:	20000092 	.word	0x20000092
 8001ea0:	20000093 	.word	0x20000093
 8001ea4:	20000094 	.word	0x20000094
 8001ea8:	20000095 	.word	0x20000095
 8001eac:	2000091b 	.word	0x2000091b
 8001eb0:	2000091c 	.word	0x2000091c
 8001eb4:	2000091d 	.word	0x2000091d
 8001eb8:	2000091e 	.word	0x2000091e
 8001ebc:	2000091f 	.word	0x2000091f

08001ec0 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e08a      	b.n	8001fe4 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001ece:	494b      	ldr	r1, [pc, #300]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	440b      	add	r3, r1
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d17b      	bne.n	8001fde <dhcpserver_remove_mac+0x11e>
 8001ee6:	4945      	ldr	r1, [pc, #276]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d16e      	bne.n	8001fde <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001f00:	493e      	ldr	r1, [pc, #248]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3302      	adds	r3, #2
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	789b      	ldrb	r3, [r3, #2]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d161      	bne.n	8001fde <dhcpserver_remove_mac+0x11e>
 8001f1a:	4938      	ldr	r1, [pc, #224]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	3303      	adds	r3, #3
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	78db      	ldrb	r3, [r3, #3]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d154      	bne.n	8001fde <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001f34:	4931      	ldr	r1, [pc, #196]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	440b      	add	r3, r1
 8001f42:	3304      	adds	r3, #4
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d147      	bne.n	8001fde <dhcpserver_remove_mac+0x11e>
 8001f4e:	492b      	ldr	r1, [pc, #172]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3305      	adds	r3, #5
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	795b      	ldrb	r3, [r3, #5]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d13a      	bne.n	8001fde <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8001f68:	4924      	ldr	r1, [pc, #144]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	440b      	add	r3, r1
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 8001f7a:	4920      	ldr	r1, [pc, #128]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	3301      	adds	r3, #1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8001f8e:	491b      	ldr	r1, [pc, #108]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8001fa2:	4916      	ldr	r1, [pc, #88]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	440b      	add	r3, r1
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8001fb6:	4911      	ldr	r1, [pc, #68]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 8001fca:	490c      	ldr	r1, [pc, #48]	@ (8001ffc <dhcpserver_remove_mac+0x13c>)
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3305      	adds	r3, #5
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b07      	cmp	r3, #7
 8001fe8:	f67f af71 	bls.w	8001ece <dhcpserver_remove_mac+0xe>
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000624 	.word	0x20000624

08002000 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff59 	bl	8001ec0 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e08b      	b.n	800212c <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	494a      	ldr	r1, [pc, #296]	@ (8002140 <dhcpserver_save_mac+0x140>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	440b      	add	r3, r1
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d17e      	bne.n	8002126 <dhcpserver_save_mac+0x126>
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	4945      	ldr	r1, [pc, #276]	@ (8002140 <dhcpserver_save_mac+0x140>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	440b      	add	r3, r1
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d173      	bne.n	8002126 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	493f      	ldr	r1, [pc, #252]	@ (8002140 <dhcpserver_save_mac+0x140>)
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	440b      	add	r3, r1
 800204c:	3302      	adds	r3, #2
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d168      	bne.n	8002126 <dhcpserver_save_mac+0x126>
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	493a      	ldr	r1, [pc, #232]	@ (8002140 <dhcpserver_save_mac+0x140>)
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	3303      	adds	r3, #3
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d15d      	bne.n	8002126 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	4934      	ldr	r1, [pc, #208]	@ (8002140 <dhcpserver_save_mac+0x140>)
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	440b      	add	r3, r1
 8002078:	3304      	adds	r3, #4
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d152      	bne.n	8002126 <dhcpserver_save_mac+0x126>
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	492f      	ldr	r1, [pc, #188]	@ (8002140 <dhcpserver_save_mac+0x140>)
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	440b      	add	r3, r1
 800208e:	3305      	adds	r3, #5
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d147      	bne.n	8002126 <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7818      	ldrb	r0, [r3, #0]
 800209c:	4928      	ldr	r1, [pc, #160]	@ (8002140 <dhcpserver_save_mac+0x140>)
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	4602      	mov	r2, r0
 80020aa:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7858      	ldrb	r0, [r3, #1]
 80020b2:	4923      	ldr	r1, [pc, #140]	@ (8002140 <dhcpserver_save_mac+0x140>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	440b      	add	r3, r1
 80020be:	3301      	adds	r3, #1
 80020c0:	4602      	mov	r2, r0
 80020c2:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7898      	ldrb	r0, [r3, #2]
 80020ca:	491d      	ldr	r1, [pc, #116]	@ (8002140 <dhcpserver_save_mac+0x140>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	440b      	add	r3, r1
 80020d6:	3302      	adds	r3, #2
 80020d8:	4602      	mov	r2, r0
 80020da:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	78d8      	ldrb	r0, [r3, #3]
 80020e2:	4917      	ldr	r1, [pc, #92]	@ (8002140 <dhcpserver_save_mac+0x140>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	440b      	add	r3, r1
 80020ee:	3303      	adds	r3, #3
 80020f0:	4602      	mov	r2, r0
 80020f2:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7918      	ldrb	r0, [r3, #4]
 80020fa:	4911      	ldr	r1, [pc, #68]	@ (8002140 <dhcpserver_save_mac+0x140>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	440b      	add	r3, r1
 8002106:	3304      	adds	r3, #4
 8002108:	4602      	mov	r2, r0
 800210a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7958      	ldrb	r0, [r3, #5]
 8002112:	490b      	ldr	r1, [pc, #44]	@ (8002140 <dhcpserver_save_mac+0x140>)
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	440b      	add	r3, r1
 800211e:	3305      	adds	r3, #5
 8002120:	4602      	mov	r2, r0
 8002122:	701a      	strb	r2, [r3, #0]
      break;
 8002124:	e007      	b.n	8002136 <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	3301      	adds	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b07      	cmp	r3, #7
 8002130:	f67f af70 	bls.w	8002014 <dhcpserver_save_mac+0x14>
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000624 	.word	0x20000624

08002144 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e060      	b.n	8002218 <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8002156:	4935      	ldr	r1, [pc, #212]	@ (800222c <dhcpserver_get_ip+0xe8>)
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d151      	bne.n	8002212 <dhcpserver_get_ip+0xce>
 800216e:	492f      	ldr	r1, [pc, #188]	@ (800222c <dhcpserver_get_ip+0xe8>)
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	3301      	adds	r3, #1
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	429a      	cmp	r2, r3
 8002186:	d144      	bne.n	8002212 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8002188:	4928      	ldr	r1, [pc, #160]	@ (800222c <dhcpserver_get_ip+0xe8>)
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	440b      	add	r3, r1
 8002196:	3302      	adds	r3, #2
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	789b      	ldrb	r3, [r3, #2]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d137      	bne.n	8002212 <dhcpserver_get_ip+0xce>
 80021a2:	4922      	ldr	r1, [pc, #136]	@ (800222c <dhcpserver_get_ip+0xe8>)
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	440b      	add	r3, r1
 80021b0:	3303      	adds	r3, #3
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	78db      	ldrb	r3, [r3, #3]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d12a      	bne.n	8002212 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 80021bc:	491b      	ldr	r1, [pc, #108]	@ (800222c <dhcpserver_get_ip+0xe8>)
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	440b      	add	r3, r1
 80021ca:	3304      	adds	r3, #4
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d11d      	bne.n	8002212 <dhcpserver_get_ip+0xce>
 80021d6:	4915      	ldr	r1, [pc, #84]	@ (800222c <dhcpserver_get_ip+0xe8>)
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	440b      	add	r3, r1
 80021e4:	3305      	adds	r3, #5
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	795b      	ldrb	r3, [r3, #5]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d110      	bne.n	8002212 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	330a      	adds	r3, #10
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002230 <dhcpserver_get_ip+0xec>)
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	441a      	add	r2, r3
 80021fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <dhcpserver_get_ip+0xf0>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	441a      	add	r2, r3
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <dhcpserver_get_ip+0xf4>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	4413      	add	r3, r2
 800220c:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	e006      	b.n	8002220 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b07      	cmp	r3, #7
 800221c:	d99b      	bls.n	8002156 <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 800221e:	68bb      	ldr	r3, [r7, #8]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000624 	.word	0x20000624
 8002230:	20000096 	.word	0x20000096
 8002234:	20000097 	.word	0x20000097
 8002238:	20000098 	.word	0x20000098

0800223c <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	e03d      	b.n	80022c4 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8002248:	4923      	ldr	r1, [pc, #140]	@ (80022d8 <dhcpserver_clear_stored_mac+0x9c>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 800225a:	491f      	ldr	r1, [pc, #124]	@ (80022d8 <dhcpserver_clear_stored_mac+0x9c>)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	3301      	adds	r3, #1
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 800226e:	491a      	ldr	r1, [pc, #104]	@ (80022d8 <dhcpserver_clear_stored_mac+0x9c>)
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	440b      	add	r3, r1
 800227c:	3302      	adds	r3, #2
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002282:	4915      	ldr	r1, [pc, #84]	@ (80022d8 <dhcpserver_clear_stored_mac+0x9c>)
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	440b      	add	r3, r1
 8002290:	3303      	adds	r3, #3
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8002296:	4910      	ldr	r1, [pc, #64]	@ (80022d8 <dhcpserver_clear_stored_mac+0x9c>)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	440b      	add	r3, r1
 80022a4:	3304      	adds	r3, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 80022aa:	490b      	ldr	r1, [pc, #44]	@ (80022d8 <dhcpserver_clear_stored_mac+0x9c>)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	3305      	adds	r3, #5
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3301      	adds	r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b07      	cmp	r3, #7
 80022c8:	d9be      	bls.n	8002248 <dhcpserver_clear_stored_mac+0xc>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	20000624 	.word	0x20000624

080022dc <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 80022e6:	23f0      	movs	r3, #240	@ 0xf0
 80022e8:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 80022ea:	2332      	movs	r3, #50	@ 0x32
 80022ec:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80022f6:	e036      	b.n	8002366 <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f00d fbfe 	bl	800fb00 <pbuf_get_at>
 8002304:	4603      	mov	r3, r0
 8002306:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 8002308:	7c7a      	ldrb	r2, [r7, #17]
 800230a:	7c3b      	ldrb	r3, [r7, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d11b      	bne.n	8002348 <dhcpserver_find_requested_ip+0x6c>
      index++;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f00d fbef 	bl	800fb00 <pbuf_get_at>
 8002322:	4603      	mov	r3, r0
 8002324:	73fb      	strb	r3, [r7, #15]
      index++;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	b29a      	uxth	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	b29b      	uxth	r3, r3
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f00d fb02 	bl	800f940 <pbuf_copy_partial>
      index += size;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4413      	add	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
      found = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	b29b      	uxth	r3, r3
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f00d fbd3 	bl	800fb00 <pbuf_get_at>
 800235a:	4603      	mov	r3, r0
 800235c:	3301      	adds	r3, #1
 800235e:	461a      	mov	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8002366:	7c7b      	ldrb	r3, [r7, #17]
 8002368:	2bff      	cmp	r3, #255	@ 0xff
 800236a:	d005      	beq.n	8002378 <dhcpserver_find_requested_ip+0x9c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	891b      	ldrh	r3, [r3, #8]
 8002370:	461a      	mov	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	4293      	cmp	r3, r2
 8002376:	d3bf      	bcc.n	80022f8 <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 8002378:	8a7b      	ldrh	r3, [r7, #18]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	@ 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t i;
  uint8_t flags = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t client_requested_addr = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 85b8 	beq.w	8002f22 <dhcpserver_fn+0xb9e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	891b      	ldrh	r3, [r3, #8]
 80023b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80023b8:	f240 85b3 	bls.w	8002f22 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 80023bc:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80023c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023c4:	2036      	movs	r0, #54	@ 0x36
 80023c6:	f00c fdcd 	bl	800ef64 <pbuf_alloc>
 80023ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 80023cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 85a9 	beq.w	8002f26 <dhcpserver_fn+0xba2>
 80023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d6:	891b      	ldrh	r3, [r3, #8]
 80023d8:	2bef      	cmp	r3, #239	@ 0xef
 80023da:	f240 85a4 	bls.w	8002f26 <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023e2:	f00d f9db 	bl	800f79c <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ea:	e014      	b.n	8002416 <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	331c      	adds	r3, #28
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f00d fb82 	bl	800fb00 <pbuf_get_at>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    ethaddr.addr[i] = val;
 8002402:	f107 021c 	add.w	r2, r7, #28
 8002406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002408:	4413      	add	r3, r2
 800240a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800240e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	3301      	adds	r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	2b05      	cmp	r3, #5
 800241a:	d9e7      	bls.n	80023ec <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fded 	bl	8002000 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fe8a 	bl	8002144 <dhcpserver_get_ip>
 8002430:	4603      	mov	r3, r0
 8002432:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8577 	beq.w	8002f2a <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 800243c:	f107 021c 	add.w	r2, r7, #28
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f015 fe3a 	bl	80180c0 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 800244c:	21f2      	movs	r1, #242	@ 0xf2
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f00d fb56 	bl	800fb00 <pbuf_get_at>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  switch (val) {
 800245a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800245e:	2b01      	cmp	r3, #1
 8002460:	d004      	beq.n	800246c <dhcpserver_fn+0xe8>
 8002462:	2b03      	cmp	r3, #3
 8002464:	f000 826a 	beq.w	800293c <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8002468:	f000 bd62 	b.w	8002f30 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800246c:	2202      	movs	r2, #2
 800246e:	2100      	movs	r1, #0
 8002470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002472:	f00d fb7e 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2108      	movs	r1, #8
 800247a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800247c:	f00d fb79 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8002480:	2200      	movs	r2, #0
 8002482:	210a      	movs	r1, #10
 8002484:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002486:	f00d fb74 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	2110      	movs	r1, #16
 8002492:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002494:	f00d fb6d 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	2111      	movs	r1, #17
 80024a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024a4:	f00d fb65 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	2112      	movs	r1, #18
 80024b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024b4:	f00d fb5d 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	0e1b      	lsrs	r3, r3, #24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	2113      	movs	r1, #19
 80024c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024c4:	f00d fb55 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2114      	movs	r1, #20
 80024cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024ce:	f00d fb50 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2115      	movs	r1, #21
 80024d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024d8:	f00d fb4b 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2116      	movs	r1, #22
 80024e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024e2:	f00d fb46 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2117      	movs	r1, #23
 80024ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024ec:	f00d fb41 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 80024f0:	2263      	movs	r2, #99	@ 0x63
 80024f2:	21ec      	movs	r1, #236	@ 0xec
 80024f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024f6:	f00d fb3c 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 80024fa:	2282      	movs	r2, #130	@ 0x82
 80024fc:	21ed      	movs	r1, #237	@ 0xed
 80024fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002500:	f00d fb37 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002504:	2253      	movs	r2, #83	@ 0x53
 8002506:	21ee      	movs	r1, #238	@ 0xee
 8002508:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800250a:	f00d fb32 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 800250e:	2263      	movs	r2, #99	@ 0x63
 8002510:	21ef      	movs	r1, #239	@ 0xef
 8002512:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002514:	f00d fb2d 	bl	800fb72 <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8002518:	23f0      	movs	r3, #240	@ 0xf0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	b29b      	uxth	r3, r3
 8002520:	2235      	movs	r2, #53	@ 0x35
 8002522:	4619      	mov	r1, r3
 8002524:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002526:	f00d fb24 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	b29b      	uxth	r3, r3
 8002534:	2201      	movs	r2, #1
 8002536:	4619      	mov	r1, r3
 8002538:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800253a:	f00d fb1a 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	b29b      	uxth	r3, r3
 8002548:	2202      	movs	r2, #2
 800254a:	4619      	mov	r1, r3
 800254c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800254e:	f00d fb10 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	b29b      	uxth	r3, r3
 800255c:	2201      	movs	r2, #1
 800255e:	4619      	mov	r1, r3
 8002560:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002562:	f00d fb06 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	3301      	adds	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	b29b      	uxth	r3, r3
 8002570:	2204      	movs	r2, #4
 8002572:	4619      	mov	r1, r3
 8002574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002576:	f00d fafc 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002580:	4ba8      	ldr	r3, [pc, #672]	@ (8002824 <dhcpserver_fn+0x4a0>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	061a      	lsls	r2, r3, #24
 8002586:	4ba8      	ldr	r3, [pc, #672]	@ (8002828 <dhcpserver_fn+0x4a4>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	4ba7      	ldr	r3, [pc, #668]	@ (800282c <dhcpserver_fn+0x4a8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4313      	orrs	r3, r2
 8002596:	4aa6      	ldr	r2, [pc, #664]	@ (8002830 <dhcpserver_fn+0x4ac>)
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	061a      	lsls	r2, r3, #24
 800259e:	4ba1      	ldr	r3, [pc, #644]	@ (8002824 <dhcpserver_fn+0x4a0>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	0619      	lsls	r1, r3, #24
 80025a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002828 <dhcpserver_fn+0x4a4>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	4319      	orrs	r1, r3
 80025ac:	4b9f      	ldr	r3, [pc, #636]	@ (800282c <dhcpserver_fn+0x4a8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	430b      	orrs	r3, r1
 80025b4:	499e      	ldr	r1, [pc, #632]	@ (8002830 <dhcpserver_fn+0x4ac>)
 80025b6:	7809      	ldrb	r1, [r1, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80025c0:	431a      	orrs	r2, r3
 80025c2:	4b98      	ldr	r3, [pc, #608]	@ (8002824 <dhcpserver_fn+0x4a0>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	0619      	lsls	r1, r3, #24
 80025c8:	4b97      	ldr	r3, [pc, #604]	@ (8002828 <dhcpserver_fn+0x4a4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	4319      	orrs	r1, r3
 80025d0:	4b96      	ldr	r3, [pc, #600]	@ (800282c <dhcpserver_fn+0x4a8>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	430b      	orrs	r3, r1
 80025d8:	4995      	ldr	r1, [pc, #596]	@ (8002830 <dhcpserver_fn+0x4ac>)
 80025da:	7809      	ldrb	r1, [r1, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002824 <dhcpserver_fn+0x4a0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	0619      	lsls	r1, r3, #24
 80025ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002828 <dhcpserver_fn+0x4a4>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	4319      	orrs	r1, r3
 80025f4:	4b8d      	ldr	r3, [pc, #564]	@ (800282c <dhcpserver_fn+0x4a8>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	430b      	orrs	r3, r1
 80025fc:	498c      	ldr	r1, [pc, #560]	@ (8002830 <dhcpserver_fn+0x4ac>)
 80025fe:	7809      	ldrb	r1, [r1, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	0e1b      	lsrs	r3, r3, #24
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	b29b      	uxth	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	4619      	mov	r1, r3
 8002612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002614:	f00d faad 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	b29b      	uxth	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	b299      	uxth	r1, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800262a:	f00d faa2 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	b29b      	uxth	r3, r3
 8002632:	3302      	adds	r3, #2
 8002634:	b299      	uxth	r1, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002640:	f00d fa97 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	b29b      	uxth	r3, r3
 8002648:	3303      	adds	r3, #3
 800264a:	b299      	uxth	r1, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	0e1b      	lsrs	r3, r3, #24
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002656:	f00d fa8c 	bl	800fb72 <pbuf_put_at>
      options_offset += 4;
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	3304      	adds	r3, #4
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	b29b      	uxth	r3, r3
 8002664:	2203      	movs	r2, #3
 8002666:	4619      	mov	r1, r3
 8002668:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800266a:	f00d fa82 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	b29b      	uxth	r3, r3
 8002678:	2204      	movs	r2, #4
 800267a:	4619      	mov	r1, r3
 800267c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800267e:	f00d fa78 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <dhcpserver_fn+0x4b0>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	061a      	lsls	r2, r3, #24
 800268e:	4b6a      	ldr	r3, [pc, #424]	@ (8002838 <dhcpserver_fn+0x4b4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	4b69      	ldr	r3, [pc, #420]	@ (800283c <dhcpserver_fn+0x4b8>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	4313      	orrs	r3, r2
 800269e:	4a68      	ldr	r2, [pc, #416]	@ (8002840 <dhcpserver_fn+0x4bc>)
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	061a      	lsls	r2, r3, #24
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <dhcpserver_fn+0x4b0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	0619      	lsls	r1, r3, #24
 80026ac:	4b62      	ldr	r3, [pc, #392]	@ (8002838 <dhcpserver_fn+0x4b4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	4319      	orrs	r1, r3
 80026b4:	4b61      	ldr	r3, [pc, #388]	@ (800283c <dhcpserver_fn+0x4b8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	430b      	orrs	r3, r1
 80026bc:	4960      	ldr	r1, [pc, #384]	@ (8002840 <dhcpserver_fn+0x4bc>)
 80026be:	7809      	ldrb	r1, [r1, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80026c8:	431a      	orrs	r2, r3
 80026ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002834 <dhcpserver_fn+0x4b0>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	0619      	lsls	r1, r3, #24
 80026d0:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <dhcpserver_fn+0x4b4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	4319      	orrs	r1, r3
 80026d8:	4b58      	ldr	r3, [pc, #352]	@ (800283c <dhcpserver_fn+0x4b8>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	430b      	orrs	r3, r1
 80026e0:	4957      	ldr	r1, [pc, #348]	@ (8002840 <dhcpserver_fn+0x4bc>)
 80026e2:	7809      	ldrb	r1, [r1, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80026ec:	431a      	orrs	r2, r3
 80026ee:	4b51      	ldr	r3, [pc, #324]	@ (8002834 <dhcpserver_fn+0x4b0>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	0619      	lsls	r1, r3, #24
 80026f4:	4b50      	ldr	r3, [pc, #320]	@ (8002838 <dhcpserver_fn+0x4b4>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	4319      	orrs	r1, r3
 80026fc:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <dhcpserver_fn+0x4b8>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	430b      	orrs	r3, r1
 8002704:	494e      	ldr	r1, [pc, #312]	@ (8002840 <dhcpserver_fn+0x4bc>)
 8002706:	7809      	ldrb	r1, [r1, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	0e1b      	lsrs	r3, r3, #24
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	b29b      	uxth	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	4619      	mov	r1, r3
 800271a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800271c:	f00d fa29 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	b29b      	uxth	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	b299      	uxth	r1, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002732:	f00d fa1e 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	b29b      	uxth	r3, r3
 800273a:	3302      	adds	r3, #2
 800273c:	b299      	uxth	r1, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002748:	f00d fa13 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	b29b      	uxth	r3, r3
 8002750:	3303      	adds	r3, #3
 8002752:	b299      	uxth	r1, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	0e1b      	lsrs	r3, r3, #24
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800275e:	f00d fa08 	bl	800fb72 <pbuf_put_at>
      options_offset += 4;
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	3304      	adds	r3, #4
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	b29b      	uxth	r3, r3
 800276c:	2233      	movs	r2, #51	@ 0x33
 800276e:	4619      	mov	r1, r3
 8002770:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002772:	f00d f9fe 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	3301      	adds	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	b29b      	uxth	r3, r3
 8002780:	2204      	movs	r2, #4
 8002782:	4619      	mov	r1, r3
 8002784:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002786:	f00d f9f4 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	b29b      	uxth	r3, r3
 8002794:	2200      	movs	r2, #0
 8002796:	4619      	mov	r1, r3
 8002798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800279a:	f00d f9ea 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	4619      	mov	r1, r3
 80027aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027ac:	f00d f9e1 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3302      	adds	r3, #2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2251      	movs	r2, #81	@ 0x51
 80027ba:	4619      	mov	r1, r3
 80027bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027be:	f00d f9d8 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3303      	adds	r3, #3
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	4619      	mov	r1, r3
 80027ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027d0:	f00d f9cf 	bl	800fb72 <pbuf_put_at>
      options_offset += 4;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	3304      	adds	r3, #4
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2236      	movs	r2, #54	@ 0x36
 80027e0:	4619      	mov	r1, r3
 80027e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027e4:	f00d f9c5 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	3301      	adds	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2204      	movs	r2, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027f8:	f00d f9bb 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	3301      	adds	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002802:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <dhcpserver_fn+0x4b0>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	061a      	lsls	r2, r3, #24
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <dhcpserver_fn+0x4b4>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <dhcpserver_fn+0x4b8>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	4313      	orrs	r3, r2
 8002818:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <dhcpserver_fn+0x4bc>)
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	4313      	orrs	r3, r2
 800281e:	061a      	lsls	r2, r3, #24
 8002820:	e010      	b.n	8002844 <dhcpserver_fn+0x4c0>
 8002822:	bf00      	nop
 8002824:	2000009a 	.word	0x2000009a
 8002828:	2000009b 	.word	0x2000009b
 800282c:	2000009c 	.word	0x2000009c
 8002830:	20000920 	.word	0x20000920
 8002834:	20000096 	.word	0x20000096
 8002838:	20000097 	.word	0x20000097
 800283c:	20000098 	.word	0x20000098
 8002840:	20000099 	.word	0x20000099
 8002844:	4b54      	ldr	r3, [pc, #336]	@ (8002998 <dhcpserver_fn+0x614>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	0619      	lsls	r1, r3, #24
 800284a:	4b54      	ldr	r3, [pc, #336]	@ (800299c <dhcpserver_fn+0x618>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	4319      	orrs	r1, r3
 8002852:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <dhcpserver_fn+0x61c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	430b      	orrs	r3, r1
 800285a:	4952      	ldr	r1, [pc, #328]	@ (80029a4 <dhcpserver_fn+0x620>)
 800285c:	7809      	ldrb	r1, [r1, #0]
 800285e:	430b      	orrs	r3, r1
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002866:	431a      	orrs	r2, r3
 8002868:	4b4b      	ldr	r3, [pc, #300]	@ (8002998 <dhcpserver_fn+0x614>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	0619      	lsls	r1, r3, #24
 800286e:	4b4b      	ldr	r3, [pc, #300]	@ (800299c <dhcpserver_fn+0x618>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	4319      	orrs	r1, r3
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <dhcpserver_fn+0x61c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	430b      	orrs	r3, r1
 800287e:	4949      	ldr	r1, [pc, #292]	@ (80029a4 <dhcpserver_fn+0x620>)
 8002880:	7809      	ldrb	r1, [r1, #0]
 8002882:	430b      	orrs	r3, r1
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800288a:	431a      	orrs	r2, r3
 800288c:	4b42      	ldr	r3, [pc, #264]	@ (8002998 <dhcpserver_fn+0x614>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	0619      	lsls	r1, r3, #24
 8002892:	4b42      	ldr	r3, [pc, #264]	@ (800299c <dhcpserver_fn+0x618>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	4319      	orrs	r1, r3
 800289a:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <dhcpserver_fn+0x61c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	430b      	orrs	r3, r1
 80028a2:	4940      	ldr	r1, [pc, #256]	@ (80029a4 <dhcpserver_fn+0x620>)
 80028a4:	7809      	ldrb	r1, [r1, #0]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	0e1b      	lsrs	r3, r3, #24
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028ba:	f00d f95a 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	b299      	uxth	r1, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028d0:	f00d f94f 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3302      	adds	r3, #2
 80028da:	b299      	uxth	r1, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028e6:	f00d f944 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3303      	adds	r3, #3
 80028f0:	b299      	uxth	r1, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028fc:	f00d f939 	bl	800fb72 <pbuf_put_at>
      options_offset += 4;
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	3304      	adds	r3, #4
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	b29b      	uxth	r3, r3
 800290a:	22ff      	movs	r2, #255	@ 0xff
 800290c:	4619      	mov	r1, r3
 800290e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002910:	f00d f92f 	bl	800fb72 <pbuf_put_at>
      options_offset++;
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	3301      	adds	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	b29b      	uxth	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002922:	f00c fc81 	bl	800f228 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <dhcpserver_fn+0x624>)
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	f107 0214 	add.w	r2, r7, #20
 800292e:	2344      	movs	r3, #68	@ 0x44
 8002930:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002932:	f012 fe3d 	bl	80155b0 <udp_sendto>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
      break;
 800293a:	e2f9      	b.n	8002f30 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800293c:	2202      	movs	r2, #2
 800293e:	2100      	movs	r1, #0
 8002940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002942:	f00d f916 	bl	800fb72 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2108      	movs	r1, #8
 800294a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800294c:	f00d f911 	bl	800fb72 <pbuf_put_at>
      flags = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8002956:	210a      	movs	r1, #10
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f00d f8d1 	bl	800fb00 <pbuf_get_at>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      if (flags & 0x80) {
 8002964:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002968:	2b00      	cmp	r3, #0
 800296a:	da1f      	bge.n	80029ac <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 800296c:	210a      	movs	r1, #10
 800296e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002970:	f00d f8c6 	bl	800fb00 <pbuf_get_at>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags |= 0x80;
 800297a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800297e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8002986:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800298a:	461a      	mov	r2, r3
 800298c:	210a      	movs	r1, #10
 800298e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002990:	f00d f8ef 	bl	800fb72 <pbuf_put_at>
 8002994:	e01e      	b.n	80029d4 <dhcpserver_fn+0x650>
 8002996:	bf00      	nop
 8002998:	20000096 	.word	0x20000096
 800299c:	20000097 	.word	0x20000097
 80029a0:	20000098 	.word	0x20000098
 80029a4:	20000099 	.word	0x20000099
 80029a8:	20000620 	.word	0x20000620
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80029ac:	210a      	movs	r1, #10
 80029ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029b0:	f00d f8a6 	bl	800fb00 <pbuf_get_at>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags &= ~0x80;
 80029ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 80029c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029ca:	461a      	mov	r2, r3
 80029cc:	210a      	movs	r1, #10
 80029ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029d0:	f00d f8cf 	bl	800fb72 <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 80029d4:	f107 0318 	add.w	r3, r7, #24
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fc7e 	bl	80022dc <dhcpserver_find_requested_ip>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 82a3 	beq.w	8002f2e <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 8249 	bne.w	8002e84 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	2110      	movs	r1, #16
 80029fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029fc:	f00d f8b9 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	2111      	movs	r1, #17
 8002a0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a0c:	f00d f8b1 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	2112      	movs	r1, #18
 8002a1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a1c:	f00d f8a9 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	2113      	movs	r1, #19
 8002a2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a2c:	f00d f8a1 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2114      	movs	r1, #20
 8002a34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a36:	f00d f89c 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2115      	movs	r1, #21
 8002a3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a40:	f00d f897 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2116      	movs	r1, #22
 8002a48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a4a:	f00d f892 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2117      	movs	r1, #23
 8002a52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a54:	f00d f88d 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002a58:	2263      	movs	r2, #99	@ 0x63
 8002a5a:	21ec      	movs	r1, #236	@ 0xec
 8002a5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a5e:	f00d f888 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002a62:	2282      	movs	r2, #130	@ 0x82
 8002a64:	21ed      	movs	r1, #237	@ 0xed
 8002a66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a68:	f00d f883 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002a6c:	2253      	movs	r2, #83	@ 0x53
 8002a6e:	21ee      	movs	r1, #238	@ 0xee
 8002a70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a72:	f00d f87e 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002a76:	2263      	movs	r2, #99	@ 0x63
 8002a78:	21ef      	movs	r1, #239	@ 0xef
 8002a7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a7c:	f00d f879 	bl	800fb72 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002a80:	23f0      	movs	r3, #240	@ 0xf0
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2235      	movs	r2, #53	@ 0x35
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a8e:	f00d f870 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002aa2:	f00d f866 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ab6:	f00d f85c 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002aca:	f00d f852 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ade:	f00d f848 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002ae8:	4ba8      	ldr	r3, [pc, #672]	@ (8002d8c <dhcpserver_fn+0xa08>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	4ba8      	ldr	r3, [pc, #672]	@ (8002d90 <dhcpserver_fn+0xa0c>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	431a      	orrs	r2, r3
 8002af6:	4ba7      	ldr	r3, [pc, #668]	@ (8002d94 <dhcpserver_fn+0xa10>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	4313      	orrs	r3, r2
 8002afe:	4aa6      	ldr	r2, [pc, #664]	@ (8002d98 <dhcpserver_fn+0xa14>)
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	061a      	lsls	r2, r3, #24
 8002b06:	4ba1      	ldr	r3, [pc, #644]	@ (8002d8c <dhcpserver_fn+0xa08>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	0619      	lsls	r1, r3, #24
 8002b0c:	4ba0      	ldr	r3, [pc, #640]	@ (8002d90 <dhcpserver_fn+0xa0c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	4319      	orrs	r1, r3
 8002b14:	4b9f      	ldr	r3, [pc, #636]	@ (8002d94 <dhcpserver_fn+0xa10>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	499e      	ldr	r1, [pc, #632]	@ (8002d98 <dhcpserver_fn+0xa14>)
 8002b1e:	7809      	ldrb	r1, [r1, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	4b98      	ldr	r3, [pc, #608]	@ (8002d8c <dhcpserver_fn+0xa08>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	0619      	lsls	r1, r3, #24
 8002b30:	4b97      	ldr	r3, [pc, #604]	@ (8002d90 <dhcpserver_fn+0xa0c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	4319      	orrs	r1, r3
 8002b38:	4b96      	ldr	r3, [pc, #600]	@ (8002d94 <dhcpserver_fn+0xa10>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	4995      	ldr	r1, [pc, #596]	@ (8002d98 <dhcpserver_fn+0xa14>)
 8002b42:	7809      	ldrb	r1, [r1, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d8c <dhcpserver_fn+0xa08>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	0619      	lsls	r1, r3, #24
 8002b54:	4b8e      	ldr	r3, [pc, #568]	@ (8002d90 <dhcpserver_fn+0xa0c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	4319      	orrs	r1, r3
 8002b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002d94 <dhcpserver_fn+0xa10>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	430b      	orrs	r3, r1
 8002b64:	498c      	ldr	r1, [pc, #560]	@ (8002d98 <dhcpserver_fn+0xa14>)
 8002b66:	7809      	ldrb	r1, [r1, #0]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	0e1b      	lsrs	r3, r3, #24
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b7c:	f00c fff9 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	b299      	uxth	r1, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b92:	f00c ffee 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	b299      	uxth	r1, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ba8:	f00c ffe3 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3303      	adds	r3, #3
 8002bb2:	b299      	uxth	r1, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	0e1b      	lsrs	r3, r3, #24
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bbe:	f00c ffd8 	bl	800fb72 <pbuf_put_at>
        options_offset += 4;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2203      	movs	r2, #3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bd2:	f00c ffce 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	3301      	adds	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2204      	movs	r2, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002be6:	f00c ffc4 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	3301      	adds	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d9c <dhcpserver_fn+0xa18>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	061a      	lsls	r2, r3, #24
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002da0 <dhcpserver_fn+0xa1c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	4b69      	ldr	r3, [pc, #420]	@ (8002da4 <dhcpserver_fn+0xa20>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4313      	orrs	r3, r2
 8002c06:	4a68      	ldr	r2, [pc, #416]	@ (8002da8 <dhcpserver_fn+0xa24>)
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	061a      	lsls	r2, r3, #24
 8002c0e:	4b63      	ldr	r3, [pc, #396]	@ (8002d9c <dhcpserver_fn+0xa18>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	0619      	lsls	r1, r3, #24
 8002c14:	4b62      	ldr	r3, [pc, #392]	@ (8002da0 <dhcpserver_fn+0xa1c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	041b      	lsls	r3, r3, #16
 8002c1a:	4319      	orrs	r1, r3
 8002c1c:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <dhcpserver_fn+0xa20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	430b      	orrs	r3, r1
 8002c24:	4960      	ldr	r1, [pc, #384]	@ (8002da8 <dhcpserver_fn+0xa24>)
 8002c26:	7809      	ldrb	r1, [r1, #0]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c30:	431a      	orrs	r2, r3
 8002c32:	4b5a      	ldr	r3, [pc, #360]	@ (8002d9c <dhcpserver_fn+0xa18>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	0619      	lsls	r1, r3, #24
 8002c38:	4b59      	ldr	r3, [pc, #356]	@ (8002da0 <dhcpserver_fn+0xa1c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	4319      	orrs	r1, r3
 8002c40:	4b58      	ldr	r3, [pc, #352]	@ (8002da4 <dhcpserver_fn+0xa20>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	430b      	orrs	r3, r1
 8002c48:	4957      	ldr	r1, [pc, #348]	@ (8002da8 <dhcpserver_fn+0xa24>)
 8002c4a:	7809      	ldrb	r1, [r1, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002c54:	431a      	orrs	r2, r3
 8002c56:	4b51      	ldr	r3, [pc, #324]	@ (8002d9c <dhcpserver_fn+0xa18>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	0619      	lsls	r1, r3, #24
 8002c5c:	4b50      	ldr	r3, [pc, #320]	@ (8002da0 <dhcpserver_fn+0xa1c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	4319      	orrs	r1, r3
 8002c64:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <dhcpserver_fn+0xa20>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	494e      	ldr	r1, [pc, #312]	@ (8002da8 <dhcpserver_fn+0xa24>)
 8002c6e:	7809      	ldrb	r1, [r1, #0]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	0e1b      	lsrs	r3, r3, #24
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c84:	f00c ff75 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	b299      	uxth	r1, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c9a:	f00c ff6a 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	b299      	uxth	r1, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cb0:	f00c ff5f 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3303      	adds	r3, #3
 8002cba:	b299      	uxth	r1, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	0e1b      	lsrs	r3, r3, #24
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cc6:	f00c ff54 	bl	800fb72 <pbuf_put_at>
        options_offset += 4;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	3304      	adds	r3, #4
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2233      	movs	r2, #51	@ 0x33
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cda:	f00c ff4a 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2204      	movs	r2, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cee:	f00c ff40 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d02:	f00c ff36 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4619      	mov	r1, r3
 8002d12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d14:	f00c ff2d 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2251      	movs	r2, #81	@ 0x51
 8002d22:	4619      	mov	r1, r3
 8002d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d26:	f00c ff24 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3303      	adds	r3, #3
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2280      	movs	r2, #128	@ 0x80
 8002d34:	4619      	mov	r1, r3
 8002d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d38:	f00c ff1b 	bl	800fb72 <pbuf_put_at>
        options_offset += 4;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	3304      	adds	r3, #4
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2236      	movs	r2, #54	@ 0x36
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d4c:	f00c ff11 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	3301      	adds	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d60:	f00c ff07 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	3301      	adds	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <dhcpserver_fn+0xa18>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	061a      	lsls	r2, r3, #24
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <dhcpserver_fn+0xa1c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <dhcpserver_fn+0xa20>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <dhcpserver_fn+0xa24>)
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	061a      	lsls	r2, r3, #24
 8002d88:	e010      	b.n	8002dac <dhcpserver_fn+0xa28>
 8002d8a:	bf00      	nop
 8002d8c:	2000009a 	.word	0x2000009a
 8002d90:	2000009b 	.word	0x2000009b
 8002d94:	2000009c 	.word	0x2000009c
 8002d98:	20000920 	.word	0x20000920
 8002d9c:	20000096 	.word	0x20000096
 8002da0:	20000097 	.word	0x20000097
 8002da4:	20000098 	.word	0x20000098
 8002da8:	20000099 	.word	0x20000099
 8002dac:	4b67      	ldr	r3, [pc, #412]	@ (8002f4c <dhcpserver_fn+0xbc8>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	0619      	lsls	r1, r3, #24
 8002db2:	4b67      	ldr	r3, [pc, #412]	@ (8002f50 <dhcpserver_fn+0xbcc>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	4319      	orrs	r1, r3
 8002dba:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <dhcpserver_fn+0xbd0>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	4965      	ldr	r1, [pc, #404]	@ (8002f58 <dhcpserver_fn+0xbd4>)
 8002dc4:	7809      	ldrb	r1, [r1, #0]
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <dhcpserver_fn+0xbc8>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	0619      	lsls	r1, r3, #24
 8002dd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <dhcpserver_fn+0xbcc>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	4319      	orrs	r1, r3
 8002dde:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <dhcpserver_fn+0xbd0>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	430b      	orrs	r3, r1
 8002de6:	495c      	ldr	r1, [pc, #368]	@ (8002f58 <dhcpserver_fn+0xbd4>)
 8002de8:	7809      	ldrb	r1, [r1, #0]
 8002dea:	430b      	orrs	r3, r1
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002df2:	431a      	orrs	r2, r3
 8002df4:	4b55      	ldr	r3, [pc, #340]	@ (8002f4c <dhcpserver_fn+0xbc8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	0619      	lsls	r1, r3, #24
 8002dfa:	4b55      	ldr	r3, [pc, #340]	@ (8002f50 <dhcpserver_fn+0xbcc>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	4319      	orrs	r1, r3
 8002e02:	4b54      	ldr	r3, [pc, #336]	@ (8002f54 <dhcpserver_fn+0xbd0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	4953      	ldr	r1, [pc, #332]	@ (8002f58 <dhcpserver_fn+0xbd4>)
 8002e0c:	7809      	ldrb	r1, [r1, #0]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	0e1b      	lsrs	r3, r3, #24
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e22:	f00c fea6 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b299      	uxth	r1, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e38:	f00c fe9b 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3302      	adds	r3, #2
 8002e42:	b299      	uxth	r1, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e4e:	f00c fe90 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3303      	adds	r3, #3
 8002e58:	b299      	uxth	r1, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	0e1b      	lsrs	r3, r3, #24
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e64:	f00c fe85 	bl	800fb72 <pbuf_put_at>
        options_offset += 4;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	22ff      	movs	r2, #255	@ 0xff
 8002e74:	4619      	mov	r1, r3
 8002e76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e78:	f00c fe7b 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	3301      	adds	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e82:	e03d      	b.n	8002f00 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002e84:	2263      	movs	r2, #99	@ 0x63
 8002e86:	21ec      	movs	r1, #236	@ 0xec
 8002e88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e8a:	f00c fe72 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002e8e:	2282      	movs	r2, #130	@ 0x82
 8002e90:	21ed      	movs	r1, #237	@ 0xed
 8002e92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e94:	f00c fe6d 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002e98:	2253      	movs	r2, #83	@ 0x53
 8002e9a:	21ee      	movs	r1, #238	@ 0xee
 8002e9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e9e:	f00c fe68 	bl	800fb72 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002ea2:	2263      	movs	r2, #99	@ 0x63
 8002ea4:	21ef      	movs	r1, #239	@ 0xef
 8002ea6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ea8:	f00c fe63 	bl	800fb72 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002eac:	23f0      	movs	r3, #240	@ 0xf0
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2235      	movs	r2, #53	@ 0x35
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002eba:	f00c fe5a 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ece:	f00c fe50 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2206      	movs	r2, #6
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ee2:	f00c fe46 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	3301      	adds	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	22ff      	movs	r2, #255	@ 0xff
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ef6:	f00c fe3c 	bl	800fb72 <pbuf_put_at>
        options_offset++;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	3301      	adds	r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f08:	f00c f98e 	bl	800f228 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002f0c:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <dhcpserver_fn+0xbd8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f107 0214 	add.w	r2, r7, #20
 8002f14:	2344      	movs	r3, #68	@ 0x44
 8002f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f18:	f012 fb4a 	bl	80155b0 <udp_sendto>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
      break;
 8002f20:	e006      	b.n	8002f30 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002f22:	bf00      	nop
 8002f24:	e004      	b.n	8002f30 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8002f2e:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8002f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8002f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f38:	f00c fafc 	bl	800f534 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f00c faf9 	bl	800f534 <pbuf_free>
}
 8002f42:	bf00      	nop
 8002f44:	3730      	adds	r7, #48	@ 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000096 	.word	0x20000096
 8002f50:	20000097 	.word	0x20000097
 8002f54:	20000098 	.word	0x20000098
 8002f58:	20000099 	.word	0x20000099
 8002f5c:	20000620 	.word	0x20000620

08002f60 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e03d      	b.n	8002fea <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8002f6e:	4933      	ldr	r1, [pc, #204]	@ (800303c <dhcpserver_start_prv+0xdc>)
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	440b      	add	r3, r1
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002f80:	492e      	ldr	r1, [pc, #184]	@ (800303c <dhcpserver_start_prv+0xdc>)
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3301      	adds	r3, #1
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002f94:	4929      	ldr	r1, [pc, #164]	@ (800303c <dhcpserver_start_prv+0xdc>)
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002fa8:	4924      	ldr	r1, [pc, #144]	@ (800303c <dhcpserver_start_prv+0xdc>)
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3303      	adds	r3, #3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8002fbc:	491f      	ldr	r1, [pc, #124]	@ (800303c <dhcpserver_start_prv+0xdc>)
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8002fd0:	491a      	ldr	r1, [pc, #104]	@ (800303c <dhcpserver_start_prv+0xdc>)
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	440b      	add	r3, r1
 8002fde:	3305      	adds	r3, #5
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d9be      	bls.n	8002f6e <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8002ff0:	4b13      	ldr	r3, [pc, #76]	@ (8003040 <dhcpserver_start_prv+0xe0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11e      	bne.n	8003036 <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 8002ff8:	f012 fe2a 	bl	8015c50 <udp_new>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <dhcpserver_start_prv+0xe0>)
 8003000:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8003002:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <dhcpserver_start_prv+0xe0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d014      	beq.n	8003034 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 800300a:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <dhcpserver_start_prv+0xe0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2243      	movs	r2, #67	@ 0x43
 8003010:	490c      	ldr	r1, [pc, #48]	@ (8003044 <dhcpserver_start_prv+0xe4>)
 8003012:	4618      	mov	r0, r3
 8003014:	f012 fc82 	bl	801591c <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <dhcpserver_start_prv+0xe0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	490a      	ldr	r1, [pc, #40]	@ (8003048 <dhcpserver_start_prv+0xe8>)
 800301e:	4618      	mov	r0, r3
 8003020:	f012 fd04 	bl	8015a2c <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <dhcpserver_start_prv+0xe0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	4908      	ldr	r1, [pc, #32]	@ (800304c <dhcpserver_start_prv+0xec>)
 800302c:	4618      	mov	r0, r3
 800302e:	f012 fdad 	bl	8015b8c <udp_recv>
 8003032:	e000      	b.n	8003036 <dhcpserver_start_prv+0xd6>
      return;
 8003034:	bf00      	nop
  }
}
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000624 	.word	0x20000624
 8003040:	20000620 	.word	0x20000620
 8003044:	0806c9ec 	.word	0x0806c9ec
 8003048:	200008b0 	.word	0x200008b0
 800304c:	08002385 	.word	0x08002385

08003050 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8003054:	2100      	movs	r1, #0
 8003056:	4802      	ldr	r0, [pc, #8]	@ (8003060 <dhcpserver_start+0x10>)
 8003058:	f00a fc72 	bl	800d940 <tcpip_callback>
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}
 8003060:	08002f61 	.word	0x08002f61

08003064 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <dhcpserver_stop_prv+0x34>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8003074:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <dhcpserver_stop_prv+0x34>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f012 fd5f 	bl	8015b3c <udp_disconnect>
    udp_remove(dhcp_pcb);
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <dhcpserver_stop_prv+0x34>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f012 fda2 	bl	8015bcc <udp_remove>
    dhcp_pcb = NULL;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <dhcpserver_stop_prv+0x34>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000620 	.word	0x20000620

0800309c <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 80030a0:	2100      	movs	r1, #0
 80030a2:	4802      	ldr	r0, [pc, #8]	@ (80030ac <dhcpserver_stop+0x10>)
 80030a4:	f00a fc4c 	bl	800d940 <tcpip_callback>
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	08003065 	.word	0x08003065

080030b0 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2206      	movs	r2, #6
 80030bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3332      	adds	r3, #50	@ 0x32
 80030c4:	2202      	movs	r2, #2
 80030c6:	491b      	ldr	r1, [pc, #108]	@ (8003134 <low_level_init+0x84>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f018 f9c3 	bl	801b454 <memcmp>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <low_level_init+0x88>)
 80030dc:	f203 2316 	addw	r3, r3, #534	@ 0x216
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	6011      	str	r1, [r2, #0]
 80030e4:	889b      	ldrh	r3, [r3, #4]
 80030e6:	8093      	strh	r3, [r2, #4]
 80030e8:	e009      	b.n	80030fe <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <low_level_init+0x88>)
 80030f2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	6010      	str	r0, [r2, #0]
 80030fa:	889b      	ldrh	r3, [r3, #4]
 80030fc:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800310c:	f043 030a 	orr.w	r3, r3, #10
 8003110:	b2da      	uxtb	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	b2da      	uxtb	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	0801d450 	.word	0x0801d450
 8003138:	20000654 	.word	0x20000654

0800313c <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8003146:	4b37      	ldr	r3, [pc, #220]	@ (8003224 <low_level_output+0xe8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f04f 31ff 	mov.w	r1, #4294967295
 800314e:	4618      	mov	r0, r3
 8003150:	f007 feaa 	bl	800aea8 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	891b      	ldrh	r3, [r3, #8]
 8003158:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 800315a:	f107 0008 	add.w	r0, r7, #8
 800315e:	2200      	movs	r2, #0
 8003160:	214a      	movs	r1, #74	@ 0x4a
 8003162:	f005 fd1b 	bl	8008b9c <sl_wfx_allocate_command_buffer>
 8003166:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <low_level_output+0x38>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <low_level_output+0xe8>)
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	2200      	movs	r2, #0
 800317c:	2100      	movs	r1, #0
 800317e:	f007 fb81 	bl	800a884 <xQueueGenericSend>
    return ERR_MEM;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e049      	b.n	800321c <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3318      	adds	r3, #24
 800318c:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e010      	b.n	80031b6 <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	895b      	ldrh	r3, [r3, #10]
 800319c:	461a      	mov	r2, r3
 800319e:	6938      	ldr	r0, [r7, #16]
 80031a0:	f018 fa25 	bl	801b5ee <memcpy>
    buffer += q->len;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	895b      	ldrh	r3, [r3, #10]
 80031a8:	461a      	mov	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1eb      	bne.n	8003194 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3332      	adds	r3, #50	@ 0x32
 80031c0:	2202      	movs	r2, #2
 80031c2:	4919      	ldr	r1, [pc, #100]	@ (8003228 <low_level_output+0xec>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f018 f945 	bl	801b454 <memcmp>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	891a      	ldrh	r2, [r3, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 80031e2:	4b12      	ldr	r3, [pc, #72]	@ (800322c <low_level_output+0xf0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <low_level_output+0xf0>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e002      	b.n	80031fa <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4a0d      	ldr	r2, [pc, #52]	@ (800322c <low_level_output+0xf0>)
 80031f8:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4a0b      	ldr	r2, [pc, #44]	@ (800322c <low_level_output+0xf0>)
 80031fe:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <low_level_output+0xf4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f007 f8da 	bl	800a3c0 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <low_level_output+0xe8>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	2300      	movs	r3, #0
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	f007 fb35 	bl	800a884 <xQueueGenericSend>
  
  return ERR_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200014fc 	.word	0x200014fc
 8003228:	0801d450 	.word	0x0801d450
 800322c:	20001500 	.word	0x20001500
 8003230:	200014f8 	.word	0x200014f8

08003234 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	795b      	ldrb	r3, [r3, #5]
 8003242:	461a      	mov	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4413      	add	r3, r2
 8003248:	3308      	adds	r3, #8
 800324a:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	88db      	ldrh	r3, [r3, #6]
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	88db      	ldrh	r3, [r3, #6]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003260:	4619      	mov	r1, r3
 8003262:	2000      	movs	r0, #0
 8003264:	f00b fe7e 	bl	800ef64 <pbuf_alloc>
 8003268:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e010      	b.n	8003298 <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	6858      	ldr	r0, [r3, #4]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	895b      	ldrh	r3, [r3, #10]
 800327e:	461a      	mov	r2, r3
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	f018 f9b4 	bl	801b5ee <memcpy>
      buffer += q->len;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	895b      	ldrh	r3, [r3, #10]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1eb      	bne.n	8003276 <low_level_input+0x42>
    }
  }  
   
  return p;
 800329e:	697b      	ldr	r3, [r7, #20]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	78db      	ldrb	r3, [r3, #3]
 80032b4:	f003 0306 	and.w	r3, r3, #6
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <sl_wfx_host_received_frame_callback+0x54>)
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e001      	b.n	80032c6 <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 80032c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <sl_wfx_host_received_frame_callback+0x58>)
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ffb0 	bl	8003234 <low_level_input>
 80032d4:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	4798      	blx	r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f00c f921 	bl	800f534 <pbuf_free>
      }
    }
  }
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000878 	.word	0x20000878
 8003300:	200008b0 	.word	0x200008b0

08003304 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <sta_ethernetif_init+0x1a>
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <sta_ethernetif_init+0x44>)
 8003314:	22dc      	movs	r2, #220	@ 0xdc
 8003316:	490d      	ldr	r1, [pc, #52]	@ (800334c <sta_ethernetif_init+0x48>)
 8003318:	480d      	ldr	r0, [pc, #52]	@ (8003350 <sta_ethernetif_init+0x4c>)
 800331a:	f017 ff49 	bl	801b1b0 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3332      	adds	r3, #50	@ 0x32
 8003322:	2202      	movs	r2, #2
 8003324:	490b      	ldr	r1, [pc, #44]	@ (8003354 <sta_ethernetif_init+0x50>)
 8003326:	4618      	mov	r0, r3
 8003328:	f018 f961 	bl	801b5ee <memcpy>

  netif->output = etharp_output;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <sta_ethernetif_init+0x54>)
 8003330:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a09      	ldr	r2, [pc, #36]	@ (800335c <sta_ethernetif_init+0x58>)
 8003336:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff feb9 	bl	80030b0 <low_level_init>
  
  return ERR_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	0801d454 	.word	0x0801d454
 800334c:	0801d470 	.word	0x0801d470
 8003350:	0801d480 	.word	0x0801d480
 8003354:	0801d450 	.word	0x0801d450
 8003358:	080183a5 	.word	0x080183a5
 800335c:	0800313d 	.word	0x0800313d

08003360 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003364:	f001 f93e 	bl	80045e4 <HAL_GetTick>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8003378:	2100      	movs	r1, #0
 800337a:	2000      	movs	r0, #0
 800337c:	f00a fb6e 	bl	800da5c <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8003380:	f000 f886 	bl	8003490 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <lwip_start_task_entry+0x44>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <lwip_start_task_entry+0x48>)
 800338e:	f107 040c 	add.w	r4, r7, #12
 8003392:	461d      	mov	r5, r3
 8003394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4906      	ldr	r1, [pc, #24]	@ (80033bc <lwip_start_task_entry+0x4c>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f006 fd63 	bl	8009e6e <osThreadCreate>
  }

  wifi_autoconnexion_init();
 80033a8:	f7fd ff5e 	bl	8001268 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f006 fd85 	bl	8009ebc <osThreadTerminate>
 80033b2:	e7fb      	b.n	80033ac <lwip_start_task_entry+0x3c>
 80033b4:	2000008c 	.word	0x2000008c
 80033b8:	0801d4b4 	.word	0x0801d4b4
 80033bc:	20000878 	.word	0x20000878

080033c0 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 80033c4:	2200      	movs	r2, #0
 80033c6:	4909      	ldr	r1, [pc, #36]	@ (80033ec <lwip_set_sta_link_up+0x2c>)
 80033c8:	4809      	ldr	r0, [pc, #36]	@ (80033f0 <lwip_set_sta_link_up+0x30>)
 80033ca:	f00a f983 	bl	800d6d4 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 80033ce:	2200      	movs	r2, #0
 80033d0:	4908      	ldr	r1, [pc, #32]	@ (80033f4 <lwip_set_sta_link_up+0x34>)
 80033d2:	4807      	ldr	r0, [pc, #28]	@ (80033f0 <lwip_set_sta_link_up+0x30>)
 80033d4:	f00a f97e 	bl	800d6d4 <netifapi_netif_common>
  if (use_dhcp_client) {
 80033d8:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <lwip_set_sta_link_up+0x38>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f7fe fbf9 	bl	8001bd8 <dhcpclient_set_link_state>
  }
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	0800ebe9 	.word	0x0800ebe9
 80033f0:	20000878 	.word	0x20000878
 80033f4:	0800ed25 	.word	0x0800ed25
 80033f8:	2000008c 	.word	0x2000008c

080033fc <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <lwip_set_sta_link_down+0x2c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8003408:	2000      	movs	r0, #0
 800340a:	f7fe fbe5 	bl	8001bd8 <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 800340e:	2200      	movs	r2, #0
 8003410:	4906      	ldr	r1, [pc, #24]	@ (800342c <lwip_set_sta_link_down+0x30>)
 8003412:	4807      	ldr	r0, [pc, #28]	@ (8003430 <lwip_set_sta_link_down+0x34>)
 8003414:	f00a f95e 	bl	800d6d4 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8003418:	2200      	movs	r2, #0
 800341a:	4906      	ldr	r1, [pc, #24]	@ (8003434 <lwip_set_sta_link_down+0x38>)
 800341c:	4804      	ldr	r0, [pc, #16]	@ (8003430 <lwip_set_sta_link_down+0x34>)
 800341e:	f00a f959 	bl	800d6d4 <netifapi_netif_common>
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000008c 	.word	0x2000008c
 800342c:	0800ed95 	.word	0x0800ed95
 8003430:	20000878 	.word	0x20000878
 8003434:	0800ecc1 	.word	0x0800ecc1

08003438 <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 800343c:	2200      	movs	r2, #0
 800343e:	4906      	ldr	r1, [pc, #24]	@ (8003458 <lwip_set_ap_link_up+0x20>)
 8003440:	4806      	ldr	r0, [pc, #24]	@ (800345c <lwip_set_ap_link_up+0x24>)
 8003442:	f00a f947 	bl	800d6d4 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8003446:	2200      	movs	r2, #0
 8003448:	4905      	ldr	r1, [pc, #20]	@ (8003460 <lwip_set_ap_link_up+0x28>)
 800344a:	4804      	ldr	r0, [pc, #16]	@ (800345c <lwip_set_ap_link_up+0x24>)
 800344c:	f00a f942 	bl	800d6d4 <netifapi_netif_common>
  dhcpserver_start();
 8003450:	f7ff fdfe 	bl	8003050 <dhcpserver_start>
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	0800ebe9 	.word	0x0800ebe9
 800345c:	200008b0 	.word	0x200008b0
 8003460:	0800ed25 	.word	0x0800ed25

08003464 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8003468:	f7ff fe18 	bl	800309c <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 800346c:	2200      	movs	r2, #0
 800346e:	4905      	ldr	r1, [pc, #20]	@ (8003484 <lwip_set_ap_link_down+0x20>)
 8003470:	4805      	ldr	r0, [pc, #20]	@ (8003488 <lwip_set_ap_link_down+0x24>)
 8003472:	f00a f92f 	bl	800d6d4 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 8003476:	2200      	movs	r2, #0
 8003478:	4904      	ldr	r1, [pc, #16]	@ (800348c <lwip_set_ap_link_down+0x28>)
 800347a:	4803      	ldr	r0, [pc, #12]	@ (8003488 <lwip_set_ap_link_down+0x24>)
 800347c:	f00a f92a 	bl	800d6d4 <netifapi_netif_common>
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	0800ed95 	.word	0x0800ed95
 8003488:	200008b0 	.word	0x200008b0
 800348c:	0800ecc1 	.word	0x0800ecc1

08003490 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	@ 0x28
 8003494:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 800349c:	4b9e      	ldr	r3, [pc, #632]	@ (8003718 <netif_config+0x288>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d006      	beq.n	80034b2 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 80034ac:	2300      	movs	r3, #0
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	e0cb      	b.n	800364a <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 80034b2:	4b9a      	ldr	r3, [pc, #616]	@ (800371c <netif_config+0x28c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	061a      	lsls	r2, r3, #24
 80034b8:	4b99      	ldr	r3, [pc, #612]	@ (8003720 <netif_config+0x290>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	4b98      	ldr	r3, [pc, #608]	@ (8003724 <netif_config+0x294>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a97      	ldr	r2, [pc, #604]	@ (8003728 <netif_config+0x298>)
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	061a      	lsls	r2, r3, #24
 80034d0:	4b92      	ldr	r3, [pc, #584]	@ (800371c <netif_config+0x28c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	0619      	lsls	r1, r3, #24
 80034d6:	4b92      	ldr	r3, [pc, #584]	@ (8003720 <netif_config+0x290>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	4319      	orrs	r1, r3
 80034de:	4b91      	ldr	r3, [pc, #580]	@ (8003724 <netif_config+0x294>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	430b      	orrs	r3, r1
 80034e6:	4990      	ldr	r1, [pc, #576]	@ (8003728 <netif_config+0x298>)
 80034e8:	7809      	ldrb	r1, [r1, #0]
 80034ea:	430b      	orrs	r3, r1
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80034f2:	431a      	orrs	r2, r3
 80034f4:	4b89      	ldr	r3, [pc, #548]	@ (800371c <netif_config+0x28c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	0619      	lsls	r1, r3, #24
 80034fa:	4b89      	ldr	r3, [pc, #548]	@ (8003720 <netif_config+0x290>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	4319      	orrs	r1, r3
 8003502:	4b88      	ldr	r3, [pc, #544]	@ (8003724 <netif_config+0x294>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	430b      	orrs	r3, r1
 800350a:	4987      	ldr	r1, [pc, #540]	@ (8003728 <netif_config+0x298>)
 800350c:	7809      	ldrb	r1, [r1, #0]
 800350e:	430b      	orrs	r3, r1
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003516:	431a      	orrs	r2, r3
 8003518:	4b80      	ldr	r3, [pc, #512]	@ (800371c <netif_config+0x28c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	0619      	lsls	r1, r3, #24
 800351e:	4b80      	ldr	r3, [pc, #512]	@ (8003720 <netif_config+0x290>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	041b      	lsls	r3, r3, #16
 8003524:	4319      	orrs	r1, r3
 8003526:	4b7f      	ldr	r3, [pc, #508]	@ (8003724 <netif_config+0x294>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	430b      	orrs	r3, r1
 800352e:	497e      	ldr	r1, [pc, #504]	@ (8003728 <netif_config+0x298>)
 8003530:	7809      	ldrb	r1, [r1, #0]
 8003532:	430b      	orrs	r3, r1
 8003534:	0e1b      	lsrs	r3, r3, #24
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 800353a:	4b7c      	ldr	r3, [pc, #496]	@ (800372c <netif_config+0x29c>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	061a      	lsls	r2, r3, #24
 8003540:	4b7b      	ldr	r3, [pc, #492]	@ (8003730 <netif_config+0x2a0>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	4b7a      	ldr	r3, [pc, #488]	@ (8003734 <netif_config+0x2a4>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	4313      	orrs	r3, r2
 8003550:	4a79      	ldr	r2, [pc, #484]	@ (8003738 <netif_config+0x2a8>)
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	061a      	lsls	r2, r3, #24
 8003558:	4b74      	ldr	r3, [pc, #464]	@ (800372c <netif_config+0x29c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	0619      	lsls	r1, r3, #24
 800355e:	4b74      	ldr	r3, [pc, #464]	@ (8003730 <netif_config+0x2a0>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	4319      	orrs	r1, r3
 8003566:	4b73      	ldr	r3, [pc, #460]	@ (8003734 <netif_config+0x2a4>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	430b      	orrs	r3, r1
 800356e:	4972      	ldr	r1, [pc, #456]	@ (8003738 <netif_config+0x2a8>)
 8003570:	7809      	ldrb	r1, [r1, #0]
 8003572:	430b      	orrs	r3, r1
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800357a:	431a      	orrs	r2, r3
 800357c:	4b6b      	ldr	r3, [pc, #428]	@ (800372c <netif_config+0x29c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	0619      	lsls	r1, r3, #24
 8003582:	4b6b      	ldr	r3, [pc, #428]	@ (8003730 <netif_config+0x2a0>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	4319      	orrs	r1, r3
 800358a:	4b6a      	ldr	r3, [pc, #424]	@ (8003734 <netif_config+0x2a4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	430b      	orrs	r3, r1
 8003592:	4969      	ldr	r1, [pc, #420]	@ (8003738 <netif_config+0x2a8>)
 8003594:	7809      	ldrb	r1, [r1, #0]
 8003596:	430b      	orrs	r3, r1
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800359e:	431a      	orrs	r2, r3
 80035a0:	4b62      	ldr	r3, [pc, #392]	@ (800372c <netif_config+0x29c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	0619      	lsls	r1, r3, #24
 80035a6:	4b62      	ldr	r3, [pc, #392]	@ (8003730 <netif_config+0x2a0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	4319      	orrs	r1, r3
 80035ae:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <netif_config+0x2a4>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	430b      	orrs	r3, r1
 80035b6:	4960      	ldr	r1, [pc, #384]	@ (8003738 <netif_config+0x2a8>)
 80035b8:	7809      	ldrb	r1, [r1, #0]
 80035ba:	430b      	orrs	r3, r1
 80035bc:	0e1b      	lsrs	r3, r3, #24
 80035be:	4313      	orrs	r3, r2
 80035c0:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 80035c2:	4b5e      	ldr	r3, [pc, #376]	@ (800373c <netif_config+0x2ac>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	061a      	lsls	r2, r3, #24
 80035c8:	4b5d      	ldr	r3, [pc, #372]	@ (8003740 <netif_config+0x2b0>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003744 <netif_config+0x2b4>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	4313      	orrs	r3, r2
 80035d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003748 <netif_config+0x2b8>)
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	061a      	lsls	r2, r3, #24
 80035e0:	4b56      	ldr	r3, [pc, #344]	@ (800373c <netif_config+0x2ac>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	0619      	lsls	r1, r3, #24
 80035e6:	4b56      	ldr	r3, [pc, #344]	@ (8003740 <netif_config+0x2b0>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	4319      	orrs	r1, r3
 80035ee:	4b55      	ldr	r3, [pc, #340]	@ (8003744 <netif_config+0x2b4>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	430b      	orrs	r3, r1
 80035f6:	4954      	ldr	r1, [pc, #336]	@ (8003748 <netif_config+0x2b8>)
 80035f8:	7809      	ldrb	r1, [r1, #0]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003602:	431a      	orrs	r2, r3
 8003604:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <netif_config+0x2ac>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	0619      	lsls	r1, r3, #24
 800360a:	4b4d      	ldr	r3, [pc, #308]	@ (8003740 <netif_config+0x2b0>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	4319      	orrs	r1, r3
 8003612:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <netif_config+0x2b4>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	430b      	orrs	r3, r1
 800361a:	494b      	ldr	r1, [pc, #300]	@ (8003748 <netif_config+0x2b8>)
 800361c:	7809      	ldrb	r1, [r1, #0]
 800361e:	430b      	orrs	r3, r1
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003626:	431a      	orrs	r2, r3
 8003628:	4b44      	ldr	r3, [pc, #272]	@ (800373c <netif_config+0x2ac>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	0619      	lsls	r1, r3, #24
 800362e:	4b44      	ldr	r3, [pc, #272]	@ (8003740 <netif_config+0x2b0>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	4319      	orrs	r1, r3
 8003636:	4b43      	ldr	r3, [pc, #268]	@ (8003744 <netif_config+0x2b4>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	430b      	orrs	r3, r1
 800363e:	4942      	ldr	r1, [pc, #264]	@ (8003748 <netif_config+0x2b8>)
 8003640:	7809      	ldrb	r1, [r1, #0]
 8003642:	430b      	orrs	r3, r1
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	4313      	orrs	r3, r2
 8003648:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 800364a:	4840      	ldr	r0, [pc, #256]	@ (800374c <netif_config+0x2bc>)
 800364c:	f004 fae4 	bl	8007c18 <sl_wfx_init>
 8003650:	6138      	str	r0, [r7, #16]
  switch (status) {
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f640 3202 	movw	r2, #2818	@ 0xb02
 8003658:	4293      	cmp	r3, r2
 800365a:	d034      	beq.n	80036c6 <netif_config+0x236>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f640 3202 	movw	r2, #2818	@ 0xb02
 8003662:	4293      	cmp	r3, r2
 8003664:	d83b      	bhi.n	80036de <netif_config+0x24e>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f640 3201 	movw	r2, #2817	@ 0xb01
 800366c:	4293      	cmp	r3, r2
 800366e:	d026      	beq.n	80036be <netif_config+0x22e>
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f640 3201 	movw	r2, #2817	@ 0xb01
 8003676:	4293      	cmp	r3, r2
 8003678:	d831      	bhi.n	80036de <netif_config+0x24e>
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b07      	cmp	r3, #7
 800367e:	d026      	beq.n	80036ce <netif_config+0x23e>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b07      	cmp	r3, #7
 8003684:	d82b      	bhi.n	80036de <netif_config+0x24e>
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <netif_config+0x204>
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d021      	beq.n	80036d6 <netif_config+0x246>
 8003692:	e024      	b.n	80036de <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8003694:	4b2d      	ldr	r3, [pc, #180]	@ (800374c <netif_config+0x2bc>)
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 800369c:	4b2b      	ldr	r3, [pc, #172]	@ (800374c <netif_config+0x2bc>)
 800369e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80036a2:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 80036a4:	4b29      	ldr	r3, [pc, #164]	@ (800374c <netif_config+0x2bc>)
 80036a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80036aa:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 80036ac:	4b27      	ldr	r3, [pc, #156]	@ (800374c <netif_config+0x2bc>)
 80036ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80036b2:	4827      	ldr	r0, [pc, #156]	@ (8003750 <netif_config+0x2c0>)
 80036b4:	f017 fd7c 	bl	801b1b0 <iprintf>
    res = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
    break;
 80036bc:	e012      	b.n	80036e4 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 80036be:	4825      	ldr	r0, [pc, #148]	@ (8003754 <netif_config+0x2c4>)
 80036c0:	f017 fdde 	bl	801b280 <puts>
    break;
 80036c4:	e00e      	b.n	80036e4 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 80036c6:	4824      	ldr	r0, [pc, #144]	@ (8003758 <netif_config+0x2c8>)
 80036c8:	f017 fdda 	bl	801b280 <puts>
    break;
 80036cc:	e00a      	b.n	80036e4 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 80036ce:	4823      	ldr	r0, [pc, #140]	@ (800375c <netif_config+0x2cc>)
 80036d0:	f017 fdd6 	bl	801b280 <puts>
    break;
 80036d4:	e006      	b.n	80036e4 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 80036d6:	4822      	ldr	r0, [pc, #136]	@ (8003760 <netif_config+0x2d0>)
 80036d8:	f017 fdd2 	bl	801b280 <puts>
    break;
 80036dc:	e002      	b.n	80036e4 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 80036de:	4821      	ldr	r0, [pc, #132]	@ (8003764 <netif_config+0x2d4>)
 80036e0:	f017 fdce 	bl	801b280 <puts>
  }

  if (res == 0) {
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d110      	bne.n	800370c <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	f107 0208 	add.w	r2, r7, #8
 80036f0:	f107 010c 	add.w	r1, r7, #12
 80036f4:	481c      	ldr	r0, [pc, #112]	@ (8003768 <netif_config+0x2d8>)
 80036f6:	9002      	str	r0, [sp, #8]
 80036f8:	481c      	ldr	r0, [pc, #112]	@ (800376c <netif_config+0x2dc>)
 80036fa:	9001      	str	r0, [sp, #4]
 80036fc:	2000      	movs	r0, #0
 80036fe:	9000      	str	r0, [sp, #0]
 8003700:	481b      	ldr	r0, [pc, #108]	@ (8003770 <netif_config+0x2e0>)
 8003702:	f00b f8a7 	bl	800e854 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 8003706:	481a      	ldr	r0, [pc, #104]	@ (8003770 <netif_config+0x2e0>)
 8003708:	f00b fa5e 	bl	800ebc8 <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 800370c:	697b      	ldr	r3, [r7, #20]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000008c 	.word	0x2000008c
 800371c:	20000090 	.word	0x20000090
 8003720:	20000091 	.word	0x20000091
 8003724:	2000091a 	.word	0x2000091a
 8003728:	20000092 	.word	0x20000092
 800372c:	20000093 	.word	0x20000093
 8003730:	20000094 	.word	0x20000094
 8003734:	20000095 	.word	0x20000095
 8003738:	2000091b 	.word	0x2000091b
 800373c:	2000091c 	.word	0x2000091c
 8003740:	2000091d 	.word	0x2000091d
 8003744:	2000091e 	.word	0x2000091e
 8003748:	2000091f 	.word	0x2000091f
 800374c:	20000654 	.word	0x20000654
 8003750:	0801d4c8 	.word	0x0801d4c8
 8003754:	0801d4f4 	.word	0x0801d4f4
 8003758:	0801d524 	.word	0x0801d524
 800375c:	0801d558 	.word	0x0801d558
 8003760:	0801d588 	.word	0x0801d588
 8003764:	0801d5a8 	.word	0x0801d5a8
 8003768:	0800d8fd 	.word	0x0800d8fd
 800376c:	08003305 	.word	0x08003305
 8003770:	20000878 	.word	0x20000878

08003774 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <lwip_start+0x28>)
 800377c:	1d3c      	adds	r4, r7, #4
 800377e:	461d      	mov	r5, r3
 8003780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f006 fb6e 	bl	8009e6e <osThreadCreate>
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bdb0      	pop	{r4, r5, r7, pc}
 800379a:	bf00      	nop
 800379c:	0801d5dc 	.word	0x0801d5dc

080037a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037a4:	f000 feb8 	bl	8004518 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80037a8:	f000 f822 	bl	80037f0 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ac:	f000 f958 	bl	8003a60 <MX_GPIO_Init>
  MX_DMA_Init();
 80037b0:	f000 f936 	bl	8003a20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80037b4:	f000 f90a 	bl	80039cc <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI3_Init();
 80037b8:	f000 f8d0 	bl	800395c <MX_SPI3_Init>
  MX_SPI4_Init();
 80037bc:	f000 f896 	bl	80038ec <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 80037c0:	4809      	ldr	r0, [pc, #36]	@ (80037e8 <main+0x48>)
 80037c2:	f017 fcf5 	bl	801b1b0 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 80037c6:	4809      	ldr	r0, [pc, #36]	@ (80037ec <main+0x4c>)
 80037c8:	f017 fd5a 	bl	801b280 <puts>
  HAL_Delay(500);
 80037cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037d0:	f000 ff14 	bl	80045fc <HAL_Delay>

#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  //MAKE SURE POWER OF WFM200 IS ON-BOARD-LDO
  sl_wfx_task_start();
 80037d4:	f006 fa32 	bl	8009c3c <sl_wfx_task_start>
  wifi_events_start();
 80037d8:	f006 f8c2 	bl	8009960 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 80037dc:	f7ff ffca 	bl	8003774 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 80037e0:	f006 fb2e 	bl	8009e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <main+0x44>
 80037e8:	0801d5f0 	.word	0x0801d5f0
 80037ec:	0801d5f4 	.word	0x0801d5f4

080037f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b094      	sub	sp, #80	@ 0x50
 80037f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037f6:	f107 0320 	add.w	r3, r7, #32
 80037fa:	2230      	movs	r2, #48	@ 0x30
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f017 fe38 	bl	801b474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <SystemClock_Config+0xf0>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	4a30      	ldr	r2, [pc, #192]	@ (80038e0 <SystemClock_Config+0xf0>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003822:	6413      	str	r3, [r2, #64]	@ 0x40
 8003824:	4b2e      	ldr	r3, [pc, #184]	@ (80038e0 <SystemClock_Config+0xf0>)
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	4b2b      	ldr	r3, [pc, #172]	@ (80038e4 <SystemClock_Config+0xf4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2a      	ldr	r2, [pc, #168]	@ (80038e4 <SystemClock_Config+0xf4>)
 800383a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <SystemClock_Config+0xf4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800384c:	2301      	movs	r3, #1
 800384e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003850:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003856:	2302      	movs	r3, #2
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800385a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003860:	2308      	movs	r3, #8
 8003862:	643b      	str	r3, [r7, #64]	@ 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 8003864:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003868:	647b      	str	r3, [r7, #68]	@ 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800386a:	2304      	movs	r3, #4
 800386c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800386e:	2308      	movs	r3, #8
 8003870:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003872:	f107 0320 	add.w	r3, r7, #32
 8003876:	4618      	mov	r0, r3
 8003878:	f001 feda 	bl	8005630 <HAL_RCC_OscConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003882:	f000 f991 	bl	8003ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003886:	230f      	movs	r3, #15
 8003888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800388a:	2302      	movs	r3, #2
 800388c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	2103      	movs	r1, #3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 f93c 	bl	8005b20 <HAL_RCC_ClockConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038ae:	f000 f97b 	bl	8003ba8 <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80038b2:	f002 fb21 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4a0b      	ldr	r2, [pc, #44]	@ (80038e8 <SystemClock_Config+0xf8>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fff6 	bl	80048b2 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80038c6:	2004      	movs	r0, #4
 80038c8:	f001 f800 	bl	80048cc <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f000 ffb5 	bl	8004842 <HAL_NVIC_SetPriority>

}
 80038d8:	bf00      	nop
 80038da:	3750      	adds	r7, #80	@ 0x50
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000
 80038e8:	10624dd3 	.word	0x10624dd3

080038ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* SPI4 parameter configuration */
  hspi4.Instance = SPI4;
 80038f0:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <MX_SPI4_Init+0x68>)
 80038f2:	4a19      	ldr	r2, [pc, #100]	@ (8003958 <MX_SPI4_Init+0x6c>)
 80038f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80038f6:	4b17      	ldr	r3, [pc, #92]	@ (8003954 <MX_SPI4_Init+0x68>)
 80038f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003904:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800390a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;  // Set CPOL = 0
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <MX_SPI4_Init+0x68>)
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;       // Set CPHA = 0
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003914:	2200      	movs	r2, #0
 8003916:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003918:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <MX_SPI4_Init+0x68>)
 800391a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003922:	2228      	movs	r2, #40	@ 0x28
 8003924:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003928:	2200      	movs	r2, #0
 800392a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <MX_SPI4_Init+0x68>)
 800392e:	2200      	movs	r2, #0
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003934:	2200      	movs	r2, #0
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <MX_SPI4_Init+0x68>)
 800393a:	220a      	movs	r2, #10
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800393e:	4805      	ldr	r0, [pc, #20]	@ (8003954 <MX_SPI4_Init+0x68>)
 8003940:	f002 fb0e 	bl	8005f60 <HAL_SPI_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_SPI4_Init+0x62>
  {
    Error_Handler();
 800394a:	f000 f92d 	bl	8003ba8 <Error_Handler>
  }
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200009c0 	.word	0x200009c0
 8003958:	40013400 	.word	0x40013400

0800395c <MX_SPI3_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi3.Instance = SPI3;
 8003960:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003962:	4a19      	ldr	r2, [pc, #100]	@ (80039c8 <MX_SPI3_Init+0x6c>)
 8003964:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003966:	4b17      	ldr	r3, [pc, #92]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800396c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800396e:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003974:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003976:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800397a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800397c:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <MX_SPI3_Init+0x68>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003982:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <MX_SPI3_Init+0x68>)
 800398a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800398e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003992:	2228      	movs	r2, #40	@ 0x28
 8003994:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <MX_SPI3_Init+0x68>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800399c:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <MX_SPI3_Init+0x68>)
 800399e:	2200      	movs	r2, #0
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a2:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <MX_SPI3_Init+0x68>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80039a8:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <MX_SPI3_Init+0x68>)
 80039aa:	220a      	movs	r2, #10
 80039ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80039ae:	4805      	ldr	r0, [pc, #20]	@ (80039c4 <MX_SPI3_Init+0x68>)
 80039b0:	f002 fad6 	bl	8005f60 <HAL_SPI_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_SPI3_Init+0x62>
  {
	Error_Handler();
 80039ba:	f000 f8f5 	bl	8003ba8 <Error_Handler>
  }
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000968 	.word	0x20000968
 80039c8:	40003c00 	.word	0x40003c00

080039cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <MX_USART2_UART_Init+0x50>)
 80039d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039d8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80039dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039de:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039f2:	220c      	movs	r2, #12
 80039f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a02:	4805      	ldr	r0, [pc, #20]	@ (8003a18 <MX_USART2_UART_Init+0x4c>)
 8003a04:	f003 fab8 	bl	8006f78 <HAL_UART_Init>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a0e:	f000 f8cb 	bl	8003ba8 <Error_Handler>
  }
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000924 	.word	0x20000924
 8003a1c:	40004400 	.word	0x40004400

08003a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <MX_DMA_Init+0x3c>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8003a5c <MX_DMA_Init+0x3c>)
 8003a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <MX_DMA_Init+0x3c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	2100      	movs	r1, #0
 8003a46:	203b      	movs	r0, #59	@ 0x3b
 8003a48:	f000 fefb 	bl	8004842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003a4c:	203b      	movs	r0, #59	@ 0x3b
 8003a4e:	f000 ff14 	bl	800487a <HAL_NVIC_EnableIRQ>

}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a66:	f107 0314 	add.w	r3, r7, #20
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b37      	ldr	r3, [pc, #220]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa2:	4b34      	ldr	r3, [pc, #208]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	4b30      	ldr	r3, [pc, #192]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003abe:	4b2d      	ldr	r3, [pc, #180]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	4b29      	ldr	r3, [pc, #164]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	4a28      	ldr	r2, [pc, #160]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ada:	4b26      	ldr	r3, [pc, #152]	@ (8003b74 <MX_GPIO_Init+0x114>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2110      	movs	r1, #16
 8003aea:	4823      	ldr	r0, [pc, #140]	@ (8003b78 <MX_GPIO_Init+0x118>)
 8003aec:	f001 fd62 	bl	80055b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2101      	movs	r1, #1
 8003af4:	4821      	ldr	r0, [pc, #132]	@ (8003b7c <MX_GPIO_Init+0x11c>)
 8003af6:	f001 fd5d 	bl	80055b4 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 8003afa:	2310      	movs	r3, #16
 8003afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b06:	2303      	movs	r3, #3
 8003b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4819      	ldr	r0, [pc, #100]	@ (8003b78 <MX_GPIO_Init+0x118>)
 8003b12:	f001 fae7 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 8003b16:	2301      	movs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b22:	2303      	movs	r3, #3
 8003b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4813      	ldr	r0, [pc, #76]	@ (8003b7c <MX_GPIO_Init+0x11c>)
 8003b2e:	f001 fad9 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_WUP_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 8003b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b36:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b40:	2303      	movs	r3, #3
 8003b42:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480d      	ldr	r0, [pc, #52]	@ (8003b80 <MX_GPIO_Init+0x120>)
 8003b4c:	f001 faca 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 8003b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4619      	mov	r1, r3
 8003b66:	4806      	ldr	r0, [pc, #24]	@ (8003b80 <MX_GPIO_Init+0x120>)
 8003b68:	f001 fabc 	bl	80050e4 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	40020400 	.word	0x40020400

08003b84 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003b8c:	1d39      	adds	r1, r7, #4
 8003b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b92:	2201      	movs	r2, #1
 8003b94:	4803      	ldr	r0, [pc, #12]	@ (8003ba4 <__io_putchar+0x20>)
 8003b96:	f003 fa3c 	bl	8007012 <HAL_UART_Transmit>

  return ch;
 8003b9a:	687b      	ldr	r3, [r7, #4]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000924 	.word	0x20000924

08003ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bac:	b672      	cpsid	i
}
 8003bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <Error_Handler+0x8>

08003bb4 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi4_rx;
extern DMA_HandleTypeDef hdma_spi3_rx;


void HAL_MspInit(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	4b25      	ldr	r3, [pc, #148]	@ (8003c54 <HAL_MspInit+0xa0>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <HAL_MspInit+0xa0>)
 8003bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bca:	4b22      	ldr	r3, [pc, #136]	@ (8003c54 <HAL_MspInit+0xa0>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <HAL_MspInit+0xa0>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <HAL_MspInit+0xa0>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_MspInit+0xa0>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	f000 fe1a 	bl	800482c <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f06f 000b 	mvn.w	r0, #11
 8003c00:	f000 fe1f 	bl	8004842 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003c04:	2200      	movs	r2, #0
 8003c06:	2100      	movs	r1, #0
 8003c08:	f06f 000a 	mvn.w	r0, #10
 8003c0c:	f000 fe19 	bl	8004842 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	f06f 0009 	mvn.w	r0, #9
 8003c18:	f000 fe13 	bl	8004842 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2100      	movs	r1, #0
 8003c20:	f06f 0004 	mvn.w	r0, #4
 8003c24:	f000 fe0d 	bl	8004842 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	f06f 0003 	mvn.w	r0, #3
 8003c30:	f000 fe07 	bl	8004842 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	210f      	movs	r1, #15
 8003c38:	f06f 0001 	mvn.w	r0, #1
 8003c3c:	f000 fe01 	bl	8004842 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003c40:	2200      	movs	r2, #0
 8003c42:	210f      	movs	r1, #15
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f000 fdfb 	bl	8004842 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	@ 0x40
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4aa7      	ldr	r2, [pc, #668]	@ (8003f14 <HAL_SPI_MspInit+0x2bc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	f040 80a1 	bne.w	8003dbe <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c80:	4ba5      	ldr	r3, [pc, #660]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	4aa4      	ldr	r2, [pc, #656]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003c86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c8c:	4ba2      	ldr	r3, [pc, #648]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca8:	4b9b      	ldr	r3, [pc, #620]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8003cb4:	23e0      	movs	r3, #224	@ 0xe0
 8003cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cc4:	2305      	movs	r3, #5
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4893      	ldr	r0, [pc, #588]	@ (8003f1c <HAL_SPI_MspInit+0x2c4>)
 8003cd0:	f001 fa08 	bl	80050e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003cd4:	4b92      	ldr	r3, [pc, #584]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003cd6:	4a93      	ldr	r2, [pc, #588]	@ (8003f24 <HAL_SPI_MspInit+0x2cc>)
 8003cd8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003cda:	4b91      	ldr	r3, [pc, #580]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003cdc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003ce0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cee:	4b8c      	ldr	r3, [pc, #560]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cf4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cf6:	4b8a      	ldr	r3, [pc, #552]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cfc:	4b88      	ldr	r3, [pc, #544]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003d02:	4b87      	ldr	r3, [pc, #540]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d08:	4b85      	ldr	r3, [pc, #532]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d0e:	4b84      	ldr	r3, [pc, #528]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003d14:	4882      	ldr	r0, [pc, #520]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003d16:	f000 fdf5 	bl	8004904 <HAL_DMA_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003d20:	f7ff ff42 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a7e      	ldr	r2, [pc, #504]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003d28:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f20 <HAL_SPI_MspInit+0x2c8>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003d30:	4b7d      	ldr	r3, [pc, #500]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d32:	4a7e      	ldr	r2, [pc, #504]	@ (8003f2c <HAL_SPI_MspInit+0x2d4>)
 8003d34:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003d36:	4b7c      	ldr	r3, [pc, #496]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d40:	2240      	movs	r2, #64	@ 0x40
 8003d42:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d44:	4b78      	ldr	r3, [pc, #480]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d4a:	4b77      	ldr	r3, [pc, #476]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d52:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d58:	4b73      	ldr	r3, [pc, #460]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003d5e:	4b72      	ldr	r3, [pc, #456]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d64:	4b70      	ldr	r3, [pc, #448]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003d70:	486d      	ldr	r0, [pc, #436]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d72:	f000 fdc7 	bl	8004904 <HAL_DMA_Init>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003d7c:	f7ff ff14 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a69      	ldr	r2, [pc, #420]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d84:	649a      	str	r2, [r3, #72]	@ 0x48
 8003d86:	4a68      	ldr	r2, [pc, #416]	@ (8003f28 <HAL_SPI_MspInit+0x2d0>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	210a      	movs	r1, #10
 8003d90:	2038      	movs	r0, #56	@ 0x38
 8003d92:	f000 fd56 	bl	8004842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003d96:	2038      	movs	r0, #56	@ 0x38
 8003d98:	f000 fd6f 	bl	800487a <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	210a      	movs	r1, #10
 8003da0:	203a      	movs	r0, #58	@ 0x3a
 8003da2:	f000 fd4e 	bl	8004842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003da6:	203a      	movs	r0, #58	@ 0x3a
 8003da8:	f000 fd67 	bl	800487a <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8003dac:	2202      	movs	r2, #2
 8003dae:	210a      	movs	r1, #10
 8003db0:	2023      	movs	r0, #35	@ 0x23
 8003db2:	f000 fd46 	bl	8004842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003db6:	2023      	movs	r0, #35	@ 0x23
 8003db8:	f000 fd5f 	bl	800487a <HAL_NVIC_EnableIRQ>
          /* USER CODE BEGIN SPI3_MspInit 1 */

          /* USER CODE END SPI3_MspInit 1 */
      }

}
 8003dbc:	e10e      	b.n	8003fdc <HAL_SPI_MspInit+0x384>
  else if(hspi->Instance==SPI4)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f30 <HAL_SPI_MspInit+0x2d8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f040 80bb 	bne.w	8003f40 <HAL_SPI_MspInit+0x2e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	4b52      	ldr	r3, [pc, #328]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	4a51      	ldr	r2, [pc, #324]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003dd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dda:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	4b4b      	ldr	r3, [pc, #300]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4a4a      	ldr	r2, [pc, #296]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4b48      	ldr	r3, [pc, #288]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	4b44      	ldr	r3, [pc, #272]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	4a43      	ldr	r2, [pc, #268]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e12:	4b41      	ldr	r3, [pc, #260]	@ (8003f18 <HAL_SPI_MspInit+0x2c0>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003e2e:	2305      	movs	r3, #5
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8003e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e36:	4619      	mov	r1, r3
 8003e38:	4838      	ldr	r0, [pc, #224]	@ (8003f1c <HAL_SPI_MspInit+0x2c4>)
 8003e3a:	f001 f953 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_MISO_Pin;
 8003e3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003e50:	2306      	movs	r3, #6
 8003e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MISO_Port, &GPIO_InitStruct);
 8003e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4830      	ldr	r0, [pc, #192]	@ (8003f1c <HAL_SPI_MspInit+0x2c4>)
 8003e5c:	f001 f942 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 8003e60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003e72:	2306      	movs	r3, #6
 8003e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8003e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	482d      	ldr	r0, [pc, #180]	@ (8003f34 <HAL_SPI_MspInit+0x2dc>)
 8003e7e:	f001 f931 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8003e82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e90:	2303      	movs	r3, #3
 8003e92:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8003e94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4826      	ldr	r0, [pc, #152]	@ (8003f34 <HAL_SPI_MspInit+0x2dc>)
 8003e9c:	f001 f922 	bl	80050e4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ea2:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <HAL_SPI_MspInit+0x2e4>)
 8003ea4:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8003ea6:	4b24      	ldr	r3, [pc, #144]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ea8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003eac:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eae:	4b22      	ldr	r3, [pc, #136]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eba:	4b1f      	ldr	r3, [pc, #124]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ebc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ec0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eca:	4b1b      	ldr	r3, [pc, #108]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed0:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8003ed2:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ed8:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003eda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ede:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ee0:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8003ee6:	4814      	ldr	r0, [pc, #80]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003ee8:	f000 fd0c 	bl	8004904 <HAL_DMA_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_SPI_MspInit+0x29e>
      Error_Handler();
 8003ef2:	f7ff fe59 	bl	8003ba8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003efa:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003efc:	4a0e      	ldr	r2, [pc, #56]	@ (8003f38 <HAL_SPI_MspInit+0x2e0>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	203b      	movs	r0, #59	@ 0x3b
 8003f08:	f000 fc9b 	bl	8004842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003f0c:	203b      	movs	r0, #59	@ 0x3b
 8003f0e:	f000 fcb4 	bl	800487a <HAL_NVIC_EnableIRQ>
}
 8003f12:	e063      	b.n	8003fdc <HAL_SPI_MspInit+0x384>
 8003f14:	40013000 	.word	0x40013000
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40020000 	.word	0x40020000
 8003f20:	20001490 	.word	0x20001490
 8003f24:	40026410 	.word	0x40026410
 8003f28:	20001430 	.word	0x20001430
 8003f2c:	40026440 	.word	0x40026440
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40020400 	.word	0x40020400
 8003f38:	20000a18 	.word	0x20000a18
 8003f3c:	40026458 	.word	0x40026458
  else if (hspi->Instance == SPI3)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a27      	ldr	r2, [pc, #156]	@ (8003fe4 <HAL_SPI_MspInit+0x38c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d148      	bne.n	8003fdc <HAL_SPI_MspInit+0x384>
	  __HAL_RCC_SPI3_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	4b26      	ldr	r3, [pc, #152]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	4a25      	ldr	r2, [pc, #148]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5a:	4b23      	ldr	r3, [pc, #140]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f76:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b18      	ldr	r3, [pc, #96]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f8c:	f043 0308 	orr.w	r3, r3, #8
 8003f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_SPI_MspInit+0x390>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = RHS_SPI_CLK_Pin | RHS_SPI_MISO_Pin | RHS_SPI_MOSI_Pin;
 8003f9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	63bb      	str	r3, [r7, #56]	@ 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fb0:	2306      	movs	r3, #6
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480c      	ldr	r0, [pc, #48]	@ (8003fec <HAL_SPI_MspInit+0x394>)
 8003fbc:	f001 f892 	bl	80050e4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin   = RHS_SPI_CS_Pin;
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	63bb      	str	r3, [r7, #56]	@ 0x38
	  HAL_GPIO_Init(RHS_SPI_CS_Port, &GPIO_InitStruct);
 8003fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4806      	ldr	r0, [pc, #24]	@ (8003ff0 <HAL_SPI_MspInit+0x398>)
 8003fd8:	f001 f884 	bl	80050e4 <HAL_GPIO_Init>
}
 8003fdc:	bf00      	nop
 8003fde:	3740      	adds	r7, #64	@ 0x40
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40003c00 	.word	0x40003c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	40020c00 	.word	0x40020c00

08003ff4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1c      	ldr	r2, [pc, #112]	@ (8004074 <HAL_SPI_MspDeInit+0x80>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d114      	bne.n	8004030 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8004006:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <HAL_SPI_MspDeInit+0x84>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <HAL_SPI_MspDeInit+0x84>)
 800400c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004010:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8004012:	21e0      	movs	r1, #224	@ 0xe0
 8004014:	4819      	ldr	r0, [pc, #100]	@ (800407c <HAL_SPI_MspDeInit+0x88>)
 8004016:	f001 f9e9 	bl	80053ec <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fd1e 	bl	8004a60 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fd19 	bl	8004a60 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 800402e:	e01d      	b.n	800406c <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a12      	ldr	r2, [pc, #72]	@ (8004080 <HAL_SPI_MspDeInit+0x8c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d118      	bne.n	800406c <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 800403a:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <HAL_SPI_MspDeInit+0x84>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	4a0e      	ldr	r2, [pc, #56]	@ (8004078 <HAL_SPI_MspDeInit+0x84>)
 8004040:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004044:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 8004046:	2102      	movs	r1, #2
 8004048:	480c      	ldr	r0, [pc, #48]	@ (800407c <HAL_SPI_MspDeInit+0x88>)
 800404a:	f001 f9cf 	bl	80053ec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 800404e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004052:	480c      	ldr	r0, [pc, #48]	@ (8004084 <HAL_SPI_MspDeInit+0x90>)
 8004054:	f001 f9ca 	bl	80053ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fcff 	bl	8004a60 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fcfa 	bl	8004a60 <HAL_DMA_DeInit>
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40013000 	.word	0x40013000
 8004078:	40023800 	.word	0x40023800
 800407c:	40020000 	.word	0x40020000
 8004080:	40013400 	.word	0x40013400
 8004084:	40020400 	.word	0x40020400

08004088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	@ 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a19      	ldr	r2, [pc, #100]	@ (800410c <HAL_UART_MspInit+0x84>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d12b      	bne.n	8004102 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ba:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040e2:	230c      	movs	r3, #12
 80040e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ee:	2303      	movs	r3, #3
 80040f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040f2:	2307      	movs	r3, #7
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f6:	f107 0314 	add.w	r3, r7, #20
 80040fa:	4619      	mov	r1, r3
 80040fc:	4805      	ldr	r0, [pc, #20]	@ (8004114 <HAL_UART_MspInit+0x8c>)
 80040fe:	f000 fff1 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004102:	bf00      	nop
 8004104:	3728      	adds	r7, #40	@ 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40004400 	.word	0x40004400
 8004110:	40023800 	.word	0x40023800
 8004114:	40020000 	.word	0x40020000

08004118 <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <SPI1_IRQHandler+0x10>)
 800411e:	f002 fb87 	bl	8006830 <HAL_SPI_IRQHandler>
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200013d8 	.word	0x200013d8

0800412c <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_SPI_TxCpltCallback+0x3c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f107 020c 	add.w	r2, r7, #12
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f006 fd3e 	bl	800abc4 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_SPI_TxCpltCallback+0x32>
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <HAL_SPI_TxCpltCallback+0x40>)
 8004150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	f3bf 8f6f 	isb	sy
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200014f0 	.word	0x200014f0
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <HAL_SPI_RxCpltCallback+0x84>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d112      	bne.n	80041ac <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8004186:	4b1c      	ldr	r3, [pc, #112]	@ (80041f8 <HAL_SPI_RxCpltCallback+0x88>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f107 020c 	add.w	r2, r7, #12
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f006 fd17 	bl	800abc4 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_SPI_RxCpltCallback+0x3c>
 800419c:	4b17      	ldr	r3, [pc, #92]	@ (80041fc <HAL_SPI_RxCpltCallback+0x8c>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <HAL_SPI_RxCpltCallback+0x90>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d119      	bne.n	80041ea <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 80041b6:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <HAL_SPI_RxCpltCallback+0x94>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	3301      	adds	r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	bfb8      	it	lt
 80041c6:	425b      	neglt	r3, r3
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_SPI_RxCpltCallback+0x94>)
 80041cc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <HAL_SPI_RxCpltCallback+0x94>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	01db      	lsls	r3, r3, #7
 80041d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <HAL_SPI_RxCpltCallback+0x98>)
 80041d8:	4413      	add	r3, r2
 80041da:	2240      	movs	r2, #64	@ 0x40
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f002 f962 	bl	80064a8 <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_SPI_RxCpltCallback+0x9c>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
	}
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40013000 	.word	0x40013000
 80041f8:	200014f0 	.word	0x200014f0
 80041fc:	e000ed04 	.word	0xe000ed04
 8004200:	40013400 	.word	0x40013400
 8004204:	200002a9 	.word	0x200002a9
 8004208:	200002ac 	.word	0x200002ac
 800420c:	200002a8 	.word	0x200002a8

08004210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <NMI_Handler+0x4>

08004218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <HardFault_Handler+0x4>

08004220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <MemManage_Handler+0x4>

08004228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <BusFault_Handler+0x4>

08004230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <UsageFault_Handler+0x4>

08004238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424a:	f000 f9b7 	bl	80045bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800424e:	f008 f84d 	bl	800c2ec <xTaskGetSchedulerState>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004258:	f008 ff9e 	bl	800d198 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 800425c:	f005 ffbc 	bl	800a1d8 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <EXTI15_10_IRQHandler+0x60>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	2b00      	cmp	r3, #0
 8004278:	d011      	beq.n	800429e <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 800427a:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <EXTI15_10_IRQHandler+0x64>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8004282:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <EXTI15_10_IRQHandler+0x64>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1d3a      	adds	r2, r7, #4
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f006 fc9a 	bl	800abc4 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8004290:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <EXTI15_10_IRQHandler+0x68>)
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	2202      	movs	r2, #2
 8004298:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <EXTI15_10_IRQHandler+0x6c>)
 800429a:	f008 fd9d 	bl	800cdd8 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 800429e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80042a2:	f001 f9a1 	bl	80055e8 <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <EXTI15_10_IRQHandler+0x58>
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <EXTI15_10_IRQHandler+0x70>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy

}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40013c00 	.word	0x40013c00
 80042c8:	200013bc 	.word	0x200013bc
 80042cc:	200014f8 	.word	0x200014f8
 80042d0:	0800a4d9 	.word	0x0800a4d9
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80042dc:	4802      	ldr	r0, [pc, #8]	@ (80042e8 <DMA2_Stream0_IRQHandler+0x10>)
 80042de:	f000 fc97 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001490 	.word	0x20001490

080042ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80042f0:	4802      	ldr	r0, [pc, #8]	@ (80042fc <DMA2_Stream2_IRQHandler+0x10>)
 80042f2:	f000 fc8d 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20001430 	.word	0x20001430

08004300 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8004304:	4802      	ldr	r0, [pc, #8]	@ (8004310 <DMA2_Stream3_IRQHandler+0x10>)
 8004306:	f000 fc83 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000a18 	.word	0x20000a18

08004314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	return 1;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_kill>:

int _kill(int pid, int sig)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800432e:	f017 f929 	bl	801b584 <__errno>
 8004332:	4603      	mov	r3, r0
 8004334:	2216      	movs	r2, #22
 8004336:	601a      	str	r2, [r3, #0]
	return -1;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_exit>:

void _exit (int status)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800434c:	f04f 31ff 	mov.w	r1, #4294967295
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ffe7 	bl	8004324 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <_exit+0x12>

0800435a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e00a      	b.n	8004382 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800436c:	f3af 8000 	nop.w
 8004370:	4601      	mov	r1, r0
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	60ba      	str	r2, [r7, #8]
 8004378:	b2ca      	uxtb	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3301      	adds	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	dbf0      	blt.n	800436c <_read+0x12>
	}

return len;
 800438a:	687b      	ldr	r3, [r7, #4]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e009      	b.n	80043ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	60ba      	str	r2, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fbe8 	bl	8003b84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3301      	adds	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	dbf1      	blt.n	80043a6 <_write+0x12>
	}
	return len;
 80043c2:	687b      	ldr	r3, [r7, #4]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_close>:

int _close(int file)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	return -1;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043f4:	605a      	str	r2, [r3, #4]
	return 0;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_isatty>:

int _isatty(int file)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	return 1;
 800440c:	2301      	movs	r3, #1
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
	return 0;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <_sbrk+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <_sbrk+0x60>)
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004448:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <_sbrk+0x64>)
 8004452:	4a12      	ldr	r2, [pc, #72]	@ (800449c <_sbrk+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004456:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d207      	bcs.n	8004474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004464:	f017 f88e 	bl	801b584 <__errno>
 8004468:	4603      	mov	r3, r0
 800446a:	220c      	movs	r2, #12
 800446c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e009      	b.n	8004488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004474:	4b08      	ldr	r3, [pc, #32]	@ (8004498 <_sbrk+0x64>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447a:	4b07      	ldr	r3, [pc, #28]	@ (8004498 <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	4a05      	ldr	r2, [pc, #20]	@ (8004498 <_sbrk+0x64>)
 8004484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20020000 	.word	0x20020000
 8004494:	00000400 	.word	0x00000400
 8004498:	20000a78 	.word	0x20000a78
 800449c:	20014040 	.word	0x20014040

080044a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <SystemInit+0x20>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044aa:	4a05      	ldr	r2, [pc, #20]	@ (80044c0 <SystemInit+0x20>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80044c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044c8:	480d      	ldr	r0, [pc, #52]	@ (8004500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ca:	490e      	ldr	r1, [pc, #56]	@ (8004504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d0:	e002      	b.n	80044d8 <LoopCopyDataInit>

080044d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d6:	3304      	adds	r3, #4

080044d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044dc:	d3f9      	bcc.n	80044d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044de:	4a0b      	ldr	r2, [pc, #44]	@ (800450c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e4:	e001      	b.n	80044ea <LoopFillZerobss>

080044e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e8:	3204      	adds	r2, #4

080044ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ec:	d3fb      	bcc.n	80044e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044ee:	f7ff ffd7 	bl	80044a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f2:	f017 f84d 	bl	801b590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044f6:	f7ff f953 	bl	80037a0 <main>
  bx  lr    
 80044fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80044fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004504:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8004508:	0806cde4 	.word	0x0806cde4
  ldr r2, =_sbss
 800450c:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004510:	20014040 	.word	0x20014040

08004514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC_IRQHandler>
	...

08004518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800451c:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <HAL_Init+0x40>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0d      	ldr	r2, [pc, #52]	@ (8004558 <HAL_Init+0x40>)
 8004522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_Init+0x40>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <HAL_Init+0x40>)
 800452e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004534:	4b08      	ldr	r3, [pc, #32]	@ (8004558 <HAL_Init+0x40>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <HAL_Init+0x40>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004540:	2003      	movs	r0, #3
 8004542:	f000 f973 	bl	800482c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004546:	200f      	movs	r0, #15
 8004548:	f000 f808 	bl	800455c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800454c:	f7ff fb32 	bl	8003bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023c00 	.word	0x40023c00

0800455c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <HAL_InitTick+0x54>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b12      	ldr	r3, [pc, #72]	@ (80045b4 <HAL_InitTick+0x58>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4619      	mov	r1, r3
 800456e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004572:	fbb3 f3f1 	udiv	r3, r3, r1
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f999 	bl	80048b2 <HAL_SYSTICK_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e00e      	b.n	80045a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d80a      	bhi.n	80045a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004590:	2200      	movs	r2, #0
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	f000 f953 	bl	8004842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800459c:	4a06      	ldr	r2, [pc, #24]	@ (80045b8 <HAL_InitTick+0x5c>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200000a0 	.word	0x200000a0
 80045b4:	200000a8 	.word	0x200000a8
 80045b8:	200000a4 	.word	0x200000a4

080045bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_IncTick+0x20>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_IncTick+0x24>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	4a04      	ldr	r2, [pc, #16]	@ (80045e0 <HAL_IncTick+0x24>)
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	200000a8 	.word	0x200000a8
 80045e0:	20000a7c 	.word	0x20000a7c

080045e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return uwTick;
 80045e8:	4b03      	ldr	r3, [pc, #12]	@ (80045f8 <HAL_GetTick+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000a7c 	.word	0x20000a7c

080045fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004604:	f7ff ffee 	bl	80045e4 <HAL_GetTick>
 8004608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d005      	beq.n	8004622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_Delay+0x44>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004622:	bf00      	nop
 8004624:	f7ff ffde 	bl	80045e4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d8f7      	bhi.n	8004624 <HAL_Delay+0x28>
  {
  }
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200000a8 	.word	0x200000a8

08004644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004654:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <__NVIC_SetPriorityGrouping+0x44>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004660:	4013      	ands	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800466c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004676:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <__NVIC_SetPriorityGrouping+0x44>)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	60d3      	str	r3, [r2, #12]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004690:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	f003 0307 	and.w	r3, r3, #7
}
 800469a:	4618      	mov	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	db0b      	blt.n	80046d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	f003 021f 	and.w	r2, r3, #31
 80046c0:	4907      	ldr	r1, [pc, #28]	@ (80046e0 <__NVIC_EnableIRQ+0x38>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2001      	movs	r0, #1
 80046ca:	fa00 f202 	lsl.w	r2, r0, r2
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	e000e100 	.word	0xe000e100

080046e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	db12      	blt.n	800471c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	f003 021f 	and.w	r2, r3, #31
 80046fc:	490a      	ldr	r1, [pc, #40]	@ (8004728 <__NVIC_DisableIRQ+0x44>)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2001      	movs	r0, #1
 8004706:	fa00 f202 	lsl.w	r2, r0, r2
 800470a:	3320      	adds	r3, #32
 800470c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004710:	f3bf 8f4f 	dsb	sy
}
 8004714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004716:	f3bf 8f6f 	isb	sy
}
 800471a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100

0800472c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	2b00      	cmp	r3, #0
 800473e:	db0a      	blt.n	8004756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	490c      	ldr	r1, [pc, #48]	@ (8004778 <__NVIC_SetPriority+0x4c>)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	440b      	add	r3, r1
 8004750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004754:	e00a      	b.n	800476c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4908      	ldr	r1, [pc, #32]	@ (800477c <__NVIC_SetPriority+0x50>)
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3b04      	subs	r3, #4
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	440b      	add	r3, r1
 800476a:	761a      	strb	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	e000e100 	.word	0xe000e100
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	@ 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f1c3 0307 	rsb	r3, r3, #7
 800479a:	2b04      	cmp	r3, #4
 800479c:	bf28      	it	cs
 800479e:	2304      	movcs	r3, #4
 80047a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d902      	bls.n	80047b0 <NVIC_EncodePriority+0x30>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3b03      	subs	r3, #3
 80047ae:	e000      	b.n	80047b2 <NVIC_EncodePriority+0x32>
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	401a      	ands	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c8:	f04f 31ff 	mov.w	r1, #4294967295
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43d9      	mvns	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d8:	4313      	orrs	r3, r2
         );
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	@ 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047f8:	d301      	bcc.n	80047fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00f      	b.n	800481e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004828 <SysTick_Config+0x40>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3b01      	subs	r3, #1
 8004804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004806:	210f      	movs	r1, #15
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	f7ff ff8e 	bl	800472c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <SysTick_Config+0x40>)
 8004812:	2200      	movs	r2, #0
 8004814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004816:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <SysTick_Config+0x40>)
 8004818:	2207      	movs	r2, #7
 800481a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	e000e010 	.word	0xe000e010

0800482c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ff05 	bl	8004644 <__NVIC_SetPriorityGrouping>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	4603      	mov	r3, r0
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004854:	f7ff ff1a 	bl	800468c <__NVIC_GetPriorityGrouping>
 8004858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	6978      	ldr	r0, [r7, #20]
 8004860:	f7ff ff8e 	bl	8004780 <NVIC_EncodePriority>
 8004864:	4602      	mov	r2, r0
 8004866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ff5d 	bl	800472c <__NVIC_SetPriority>
}
 8004872:	bf00      	nop
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	4603      	mov	r3, r0
 8004882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff0d 	bl	80046a8 <__NVIC_EnableIRQ>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff1d 	bl	80046e4 <__NVIC_DisableIRQ>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ff94 	bl	80047e8 <SysTick_Config>
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d106      	bne.n	80048e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a08      	ldr	r2, [pc, #32]	@ (8004900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80048e6:	e005      	b.n	80048f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80048ee:	f023 0304 	bic.w	r3, r3, #4
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004910:	f7ff fe68 	bl	80045e4 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e099      	b.n	8004a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004940:	e00f      	b.n	8004962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004942:	f7ff fe4f 	bl	80045e4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b05      	cmp	r3, #5
 800494e:	d908      	bls.n	8004962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2203      	movs	r2, #3
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e078      	b.n	8004a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e8      	bne.n	8004942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4b38      	ldr	r3, [pc, #224]	@ (8004a5c <HAL_DMA_Init+0x158>)
 800497c:	4013      	ands	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800498e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d107      	bne.n	80049cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	4313      	orrs	r3, r2
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d117      	bne.n	8004a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 faef 	bl	8004fec <DMA_CheckFifoParam>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2240      	movs	r2, #64	@ 0x40
 8004a18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a22:	2301      	movs	r3, #1
 8004a24:	e016      	b.n	8004a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 faa6 	bl	8004f80 <DMA_CalcBaseAndBitshift>
 8004a34:	4603      	mov	r3, r0
 8004a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3c:	223f      	movs	r2, #63	@ 0x3f
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	f010803f 	.word	0xf010803f

08004a60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e050      	b.n	8004b14 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d101      	bne.n	8004a82 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e048      	b.n	8004b14 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2221      	movs	r2, #33	@ 0x21
 8004ac0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa5c 	bl	8004f80 <DMA_CalcBaseAndBitshift>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	223f      	movs	r2, #63	@ 0x3f
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_DMA_Start_IT+0x26>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e040      	b.n	8004bc4 <HAL_DMA_Start_IT+0xa8>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d12f      	bne.n	8004bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f9da 	bl	8004f24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b74:	223f      	movs	r2, #63	@ 0x3f
 8004b76:	409a      	lsls	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0216 	orr.w	r2, r2, #22
 8004b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0208 	orr.w	r2, r2, #8
 8004ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e005      	b.n	8004bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	@ 0x80
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00c      	b.n	8004c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2205      	movs	r2, #5
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8004e58 <HAL_DMA_IRQHandler+0x248>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a8e      	ldr	r2, [pc, #568]	@ (8004e5c <HAL_DMA_IRQHandler+0x24c>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	0a9b      	lsrs	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01a      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c68:	2208      	movs	r2, #8
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	2201      	movs	r2, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d012      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	f043 0202 	orr.w	r2, r3, #2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d012      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cec:	2210      	movs	r2, #16
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d043      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d03c      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d108      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d024      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
 8004d3e:	e01f      	b.n	8004d80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
 8004d50:	e016      	b.n	8004d80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0208 	bic.w	r2, r2, #8
 8004d6e:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d84:	2220      	movs	r2, #32
 8004d86:	409a      	lsls	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 808f 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8087 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da6:	2220      	movs	r2, #32
 8004da8:	409a      	lsls	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d136      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0216 	bic.w	r2, r2, #22
 8004dc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <HAL_DMA_IRQHandler+0x1da>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0208 	bic.w	r2, r2, #8
 8004df8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfe:	223f      	movs	r2, #63	@ 0x3f
 8004e00:	409a      	lsls	r2, r3
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d07e      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
        }
        return;
 8004e26:	e079      	b.n	8004f1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01d      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d031      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	e02c      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
 8004e56:	bf00      	nop
 8004e58:	200000a0 	.word	0x200000a0
 8004e5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	e01e      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0210 	bic.w	r2, r2, #16
 8004e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d032      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d307      	bcc.n	8004ef8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f2      	bne.n	8004edc <HAL_DMA_IRQHandler+0x2cc>
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ef8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	e000      	b.n	8004f1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f1c:	bf00      	nop
    }
  }
}
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d108      	bne.n	8004f64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f62:	e007      	b.n	8004f74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3b10      	subs	r3, #16
 8004f90:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f9a:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d909      	bls.n	8004fc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fc0:	e007      	b.n	8004fd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	aaaaaaab 	.word	0xaaaaaaab
 8004fe8:	08020c10 	.word	0x08020c10

08004fec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11f      	bne.n	8005046 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d856      	bhi.n	80050ba <DMA_CheckFifoParam+0xce>
 800500c:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <DMA_CheckFifoParam+0x28>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005025 	.word	0x08005025
 8005018:	08005037 	.word	0x08005037
 800501c:	08005025 	.word	0x08005025
 8005020:	080050bb 	.word	0x080050bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d046      	beq.n	80050be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005034:	e043      	b.n	80050be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800503e:	d140      	bne.n	80050c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005044:	e03d      	b.n	80050c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504e:	d121      	bne.n	8005094 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d837      	bhi.n	80050c6 <DMA_CheckFifoParam+0xda>
 8005056:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <DMA_CheckFifoParam+0x70>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	0800506d 	.word	0x0800506d
 8005060:	08005073 	.word	0x08005073
 8005064:	0800506d 	.word	0x0800506d
 8005068:	08005085 	.word	0x08005085
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      break;
 8005070:	e030      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d025      	beq.n	80050ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005082:	e022      	b.n	80050ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800508c:	d11f      	bne.n	80050ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005092:	e01c      	b.n	80050ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d903      	bls.n	80050a2 <DMA_CheckFifoParam+0xb6>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d003      	beq.n	80050a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050a0:	e018      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
      break;
 80050a6:	e015      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00e      	beq.n	80050d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	e00b      	b.n	80050d2 <DMA_CheckFifoParam+0xe6>
      break;
 80050ba:	bf00      	nop
 80050bc:	e00a      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      break;
 80050be:	bf00      	nop
 80050c0:	e008      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      break;
 80050c2:	bf00      	nop
 80050c4:	e006      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      break;
 80050c6:	bf00      	nop
 80050c8:	e004      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      break;
 80050ca:	bf00      	nop
 80050cc:	e002      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <DMA_CheckFifoParam+0xe8>
      break;
 80050d2:	bf00      	nop
    }
  } 
  
  return status; 
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop

080050e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	@ 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e159      	b.n	80053b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005100:	2201      	movs	r2, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	f040 8148 	bne.w	80053ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d005      	beq.n	8005136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005132:	2b02      	cmp	r3, #2
 8005134:	d130      	bne.n	8005198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	2203      	movs	r2, #3
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800516c:	2201      	movs	r2, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 0201 	and.w	r2, r3, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d017      	beq.n	80051d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d123      	bne.n	8005228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	08da      	lsrs	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3208      	adds	r2, #8
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	08da      	lsrs	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3208      	adds	r2, #8
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0203 	and.w	r2, r3, #3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80a2 	beq.w	80053ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	4b57      	ldr	r3, [pc, #348]	@ (80053cc <HAL_GPIO_Init+0x2e8>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	4a56      	ldr	r2, [pc, #344]	@ (80053cc <HAL_GPIO_Init+0x2e8>)
 8005274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005278:	6453      	str	r3, [r2, #68]	@ 0x44
 800527a:	4b54      	ldr	r3, [pc, #336]	@ (80053cc <HAL_GPIO_Init+0x2e8>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005286:	4a52      	ldr	r2, [pc, #328]	@ (80053d0 <HAL_GPIO_Init+0x2ec>)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	3302      	adds	r3, #2
 800528e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	220f      	movs	r2, #15
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a49      	ldr	r2, [pc, #292]	@ (80053d4 <HAL_GPIO_Init+0x2f0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d019      	beq.n	80052e6 <HAL_GPIO_Init+0x202>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a48      	ldr	r2, [pc, #288]	@ (80053d8 <HAL_GPIO_Init+0x2f4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_GPIO_Init+0x1fe>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a47      	ldr	r2, [pc, #284]	@ (80053dc <HAL_GPIO_Init+0x2f8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00d      	beq.n	80052de <HAL_GPIO_Init+0x1fa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a46      	ldr	r2, [pc, #280]	@ (80053e0 <HAL_GPIO_Init+0x2fc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <HAL_GPIO_Init+0x1f6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a45      	ldr	r2, [pc, #276]	@ (80053e4 <HAL_GPIO_Init+0x300>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_GPIO_Init+0x1f2>
 80052d2:	2304      	movs	r3, #4
 80052d4:	e008      	b.n	80052e8 <HAL_GPIO_Init+0x204>
 80052d6:	2307      	movs	r3, #7
 80052d8:	e006      	b.n	80052e8 <HAL_GPIO_Init+0x204>
 80052da:	2303      	movs	r3, #3
 80052dc:	e004      	b.n	80052e8 <HAL_GPIO_Init+0x204>
 80052de:	2302      	movs	r3, #2
 80052e0:	e002      	b.n	80052e8 <HAL_GPIO_Init+0x204>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_GPIO_Init+0x204>
 80052e6:	2300      	movs	r3, #0
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	f002 0203 	and.w	r2, r2, #3
 80052ee:	0092      	lsls	r2, r2, #2
 80052f0:	4093      	lsls	r3, r2
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052f8:	4935      	ldr	r1, [pc, #212]	@ (80053d0 <HAL_GPIO_Init+0x2ec>)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	3302      	adds	r3, #2
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005306:	4b38      	ldr	r3, [pc, #224]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800532a:	4a2f      	ldr	r2, [pc, #188]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005330:	4b2d      	ldr	r3, [pc, #180]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005354:	4a24      	ldr	r2, [pc, #144]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800535a:	4b23      	ldr	r3, [pc, #140]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800537e:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005384:	4b18      	ldr	r3, [pc, #96]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053a8:	4a0f      	ldr	r2, [pc, #60]	@ (80053e8 <HAL_GPIO_Init+0x304>)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	f67f aea2 	bls.w	8005100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	3724      	adds	r7, #36	@ 0x24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40013800 	.word	0x40013800
 80053d4:	40020000 	.word	0x40020000
 80053d8:	40020400 	.word	0x40020400
 80053dc:	40020800 	.word	0x40020800
 80053e0:	40020c00 	.word	0x40020c00
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40013c00 	.word	0x40013c00

080053ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e0bb      	b.n	8005580 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005408:	2201      	movs	r2, #1
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	f040 80ab 	bne.w	800557a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005424:	4a5c      	ldr	r2, [pc, #368]	@ (8005598 <HAL_GPIO_DeInit+0x1ac>)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	089b      	lsrs	r3, r3, #2
 800542a:	3302      	adds	r3, #2
 800542c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005430:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	220f      	movs	r2, #15
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a54      	ldr	r2, [pc, #336]	@ (800559c <HAL_GPIO_DeInit+0x1b0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d019      	beq.n	8005482 <HAL_GPIO_DeInit+0x96>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a53      	ldr	r2, [pc, #332]	@ (80055a0 <HAL_GPIO_DeInit+0x1b4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_GPIO_DeInit+0x92>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a52      	ldr	r2, [pc, #328]	@ (80055a4 <HAL_GPIO_DeInit+0x1b8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00d      	beq.n	800547a <HAL_GPIO_DeInit+0x8e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a51      	ldr	r2, [pc, #324]	@ (80055a8 <HAL_GPIO_DeInit+0x1bc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <HAL_GPIO_DeInit+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a50      	ldr	r2, [pc, #320]	@ (80055ac <HAL_GPIO_DeInit+0x1c0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_GPIO_DeInit+0x86>
 800546e:	2304      	movs	r3, #4
 8005470:	e008      	b.n	8005484 <HAL_GPIO_DeInit+0x98>
 8005472:	2307      	movs	r3, #7
 8005474:	e006      	b.n	8005484 <HAL_GPIO_DeInit+0x98>
 8005476:	2303      	movs	r3, #3
 8005478:	e004      	b.n	8005484 <HAL_GPIO_DeInit+0x98>
 800547a:	2302      	movs	r3, #2
 800547c:	e002      	b.n	8005484 <HAL_GPIO_DeInit+0x98>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_GPIO_DeInit+0x98>
 8005482:	2300      	movs	r3, #0
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	f002 0203 	and.w	r2, r2, #3
 800548a:	0092      	lsls	r2, r2, #2
 800548c:	4093      	lsls	r3, r2
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	d132      	bne.n	80054fa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005494:	4b46      	ldr	r3, [pc, #280]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	43db      	mvns	r3, r3
 800549c:	4944      	ldr	r1, [pc, #272]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 800549e:	4013      	ands	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80054a2:	4b43      	ldr	r3, [pc, #268]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	4941      	ldr	r1, [pc, #260]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80054b0:	4b3f      	ldr	r3, [pc, #252]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	493d      	ldr	r1, [pc, #244]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80054be:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	493a      	ldr	r1, [pc, #232]	@ (80055b0 <HAL_GPIO_DeInit+0x1c4>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	220f      	movs	r2, #15
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80054dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005598 <HAL_GPIO_DeInit+0x1ac>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3302      	adds	r3, #2
 80054e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	482a      	ldr	r0, [pc, #168]	@ (8005598 <HAL_GPIO_DeInit+0x1ac>)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	400a      	ands	r2, r1
 80054f4:	3302      	adds	r3, #2
 80054f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	2103      	movs	r1, #3
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	401a      	ands	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	08da      	lsrs	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3208      	adds	r2, #8
 8005518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	08d2      	lsrs	r2, r2, #3
 8005530:	4019      	ands	r1, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3208      	adds	r2, #8
 8005536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	2103      	movs	r1, #3
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	2101      	movs	r1, #1
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2103      	movs	r1, #3
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	401a      	ands	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	3301      	adds	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b0f      	cmp	r3, #15
 8005584:	f67f af40 	bls.w	8005408 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40013800 	.word	0x40013800
 800559c:	40020000 	.word	0x40020000
 80055a0:	40020400 	.word	0x40020400
 80055a4:	40020800 	.word	0x40020800
 80055a8:	40020c00 	.word	0x40020c00
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40013c00 	.word	0x40013c00

080055b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	807b      	strh	r3, [r7, #2]
 80055c0:	4613      	mov	r3, r2
 80055c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055c4:	787b      	ldrb	r3, [r7, #1]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ca:	887a      	ldrh	r2, [r7, #2]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055d0:	e003      	b.n	80055da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	041a      	lsls	r2, r3, #16
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	619a      	str	r2, [r3, #24]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055f2:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055fe:	4a05      	ldr	r2, [pc, #20]	@ (8005614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f806 	bl	8005618 <HAL_GPIO_EXTI_Callback>
  }
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40013c00 	.word	0x40013c00

08005618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e267      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d075      	beq.n	800573a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800564e:	4b88      	ldr	r3, [pc, #544]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b04      	cmp	r3, #4
 8005658:	d00c      	beq.n	8005674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800565a:	4b85      	ldr	r3, [pc, #532]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005662:	2b08      	cmp	r3, #8
 8005664:	d112      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4b82      	ldr	r3, [pc, #520]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005672:	d10b      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	4b7e      	ldr	r3, [pc, #504]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05b      	beq.n	8005738 <HAL_RCC_OscConfig+0x108>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d157      	bne.n	8005738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e242      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x74>
 8005696:	4b76      	ldr	r3, [pc, #472]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a75      	ldr	r2, [pc, #468]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e01d      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x98>
 80056ae:	4b70      	ldr	r3, [pc, #448]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6c      	ldr	r2, [pc, #432]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056c8:	4b69      	ldr	r3, [pc, #420]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a68      	ldr	r2, [pc, #416]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	4b66      	ldr	r3, [pc, #408]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a65      	ldr	r2, [pc, #404]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fe ff7c 	bl	80045e4 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fe ff78 	bl	80045e4 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	@ 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e207      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005702:	4b5b      	ldr	r3, [pc, #364]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0xc0>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fe ff68 	bl	80045e4 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005718:	f7fe ff64 	bl	80045e4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	@ 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e1f3      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572a:	4b51      	ldr	r3, [pc, #324]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0xe8>
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d063      	beq.n	800580e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005746:	4b4a      	ldr	r3, [pc, #296]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800575a:	2b08      	cmp	r3, #8
 800575c:	d11c      	bne.n	8005798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b44      	ldr	r3, [pc, #272]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d116      	bne.n	8005798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576a:	4b41      	ldr	r3, [pc, #260]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_RCC_OscConfig+0x152>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e1c7      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4937      	ldr	r1, [pc, #220]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005796:	e03a      	b.n	800580e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057a0:	4b34      	ldr	r3, [pc, #208]	@ (8005874 <HAL_RCC_OscConfig+0x244>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fe ff1d 	bl	80045e4 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fe ff19 	bl	80045e4 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1a8      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4925      	ldr	r1, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	e015      	b.n	800580e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e2:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <HAL_RCC_OscConfig+0x244>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fe fefc 	bl	80045e4 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fe fef8 	bl	80045e4 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e187      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d036      	beq.n	8005888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <HAL_RCC_OscConfig+0x248>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fe fedc 	bl	80045e4 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005830:	f7fe fed8 	bl	80045e4 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e167      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005842:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x200>
 800584e:	e01b      	b.n	8005888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005850:	4b09      	ldr	r3, [pc, #36]	@ (8005878 <HAL_RCC_OscConfig+0x248>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005856:	f7fe fec5 	bl	80045e4 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800585c:	e00e      	b.n	800587c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585e:	f7fe fec1 	bl	80045e4 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d907      	bls.n	800587c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e150      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
 8005870:	40023800 	.word	0x40023800
 8005874:	42470000 	.word	0x42470000
 8005878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	4b88      	ldr	r3, [pc, #544]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800587e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ea      	bne.n	800585e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8097 	beq.w	80059c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589a:	4b81      	ldr	r3, [pc, #516]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4b7d      	ldr	r3, [pc, #500]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	4a7c      	ldr	r2, [pc, #496]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058b6:	4b7a      	ldr	r3, [pc, #488]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	4b77      	ldr	r3, [pc, #476]	@ (8005aa4 <HAL_RCC_OscConfig+0x474>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d118      	bne.n	8005904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d2:	4b74      	ldr	r3, [pc, #464]	@ (8005aa4 <HAL_RCC_OscConfig+0x474>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a73      	ldr	r2, [pc, #460]	@ (8005aa4 <HAL_RCC_OscConfig+0x474>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058de:	f7fe fe81 	bl	80045e4 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fe fe7d 	bl	80045e4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e10c      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa4 <HAL_RCC_OscConfig+0x474>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x2ea>
 800590c:	4b64      	ldr	r3, [pc, #400]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005910:	4a63      	ldr	r2, [pc, #396]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6713      	str	r3, [r2, #112]	@ 0x70
 8005918:	e01c      	b.n	8005954 <HAL_RCC_OscConfig+0x324>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b05      	cmp	r3, #5
 8005920:	d10c      	bne.n	800593c <HAL_RCC_OscConfig+0x30c>
 8005922:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	4a5e      	ldr	r2, [pc, #376]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	6713      	str	r3, [r2, #112]	@ 0x70
 800592e:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	4a5b      	ldr	r2, [pc, #364]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6713      	str	r3, [r2, #112]	@ 0x70
 800593a:	e00b      	b.n	8005954 <HAL_RCC_OscConfig+0x324>
 800593c:	4b58      	ldr	r3, [pc, #352]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	4a57      	ldr	r2, [pc, #348]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	@ 0x70
 8005948:	4b55      	ldr	r3, [pc, #340]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4a54      	ldr	r2, [pc, #336]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800594e:	f023 0304 	bic.w	r3, r3, #4
 8005952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fe fe42 	bl	80045e4 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005962:	e00a      	b.n	800597a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7fe fe3e 	bl	80045e4 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e0cb      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597a:	4b49      	ldr	r3, [pc, #292]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <HAL_RCC_OscConfig+0x334>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005988:	f7fe fe2c 	bl	80045e4 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fe fe28 	bl	80045e4 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e0b5      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a6:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ee      	bne.n	8005990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b8:	4b39      	ldr	r3, [pc, #228]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	4a38      	ldr	r2, [pc, #224]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80059be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80a1 	beq.w	8005b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ce:	4b34      	ldr	r3, [pc, #208]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d05c      	beq.n	8005a94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d141      	bne.n	8005a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e2:	4b31      	ldr	r3, [pc, #196]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fe fdfc 	bl	80045e4 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f0:	f7fe fdf8 	bl	80045e4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e087      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	4b27      	ldr	r3, [pc, #156]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	3b01      	subs	r3, #1
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	491b      	ldr	r1, [pc, #108]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a38:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fe fdd1 	bl	80045e4 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fe fdcd 	bl	80045e4 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e05c      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a58:	4b11      	ldr	r3, [pc, #68]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x416>
 8005a64:	e054      	b.n	8005b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fe fdba 	bl	80045e4 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fe fdb6 	bl	80045e4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e045      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a86:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <HAL_RCC_OscConfig+0x470>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x444>
 8005a92:	e03d      	b.n	8005b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d107      	bne.n	8005aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e038      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <HAL_RCC_OscConfig+0x4ec>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d028      	beq.n	8005b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d121      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d11a      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d111      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	3b01      	subs	r3, #1
 8005af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023800 	.word	0x40023800

08005b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0cc      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b34:	4b68      	ldr	r3, [pc, #416]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d90c      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b65      	ldr	r3, [pc, #404]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b63      	ldr	r3, [pc, #396]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0b8      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d020      	beq.n	8005baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b74:	4b59      	ldr	r3, [pc, #356]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a58      	ldr	r2, [pc, #352]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b8c:	4b53      	ldr	r3, [pc, #332]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4a52      	ldr	r2, [pc, #328]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b50      	ldr	r3, [pc, #320]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	494d      	ldr	r1, [pc, #308]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d044      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	4b47      	ldr	r3, [pc, #284]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d119      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e07f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d003      	beq.n	8005bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	4b3f      	ldr	r3, [pc, #252]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e06f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bee:	4b3b      	ldr	r3, [pc, #236]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e067      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfe:	4b37      	ldr	r3, [pc, #220]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 0203 	bic.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	4934      	ldr	r1, [pc, #208]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c10:	f7fe fce8 	bl	80045e4 <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c18:	f7fe fce4 	bl	80045e4 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e04f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 020c 	and.w	r2, r3, #12
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d1eb      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c40:	4b25      	ldr	r3, [pc, #148]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d20c      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b22      	ldr	r3, [pc, #136]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b20      	ldr	r3, [pc, #128]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e032      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c74:	4b19      	ldr	r3, [pc, #100]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4916      	ldr	r1, [pc, #88]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c92:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	490e      	ldr	r1, [pc, #56]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ca6:	f000 f821 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	490a      	ldr	r1, [pc, #40]	@ (8005ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb8:	5ccb      	ldrb	r3, [r1, r3]
 8005cba:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbe:	4a09      	ldr	r2, [pc, #36]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cc2:	4b09      	ldr	r3, [pc, #36]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fc48 	bl	800455c <HAL_InitTick>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023c00 	.word	0x40023c00
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	08020bf8 	.word	0x08020bf8
 8005ce4:	200000a0 	.word	0x200000a0
 8005ce8:	200000a4 	.word	0x200000a4

08005cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf0:	b094      	sub	sp, #80	@ 0x50
 8005cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d04:	4b79      	ldr	r3, [pc, #484]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x200>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 030c 	and.w	r3, r3, #12
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d00d      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0x40>
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	f200 80e1 	bhi.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x34>
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1e:	e0db      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d20:	4b73      	ldr	r3, [pc, #460]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d22:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005d24:	e0db      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d26:	4b73      	ldr	r3, [pc, #460]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d2a:	e0d8      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d36:	4b6d      	ldr	r3, [pc, #436]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x200>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d063      	beq.n	8005e0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d42:	4b6a      	ldr	r3, [pc, #424]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x200>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	2200      	movs	r2, #0
 8005d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d56:	2300      	movs	r3, #0
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d5e:	4622      	mov	r2, r4
 8005d60:	462b      	mov	r3, r5
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	0159      	lsls	r1, r3, #5
 8005d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d70:	0150      	lsls	r0, r2, #5
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4621      	mov	r1, r4
 8005d78:	1a51      	subs	r1, r2, r1
 8005d7a:	6139      	str	r1, [r7, #16]
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d90:	4659      	mov	r1, fp
 8005d92:	018b      	lsls	r3, r1, #6
 8005d94:	4651      	mov	r1, sl
 8005d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	018a      	lsls	r2, r1, #6
 8005d9e:	4651      	mov	r1, sl
 8005da0:	ebb2 0801 	subs.w	r8, r2, r1
 8005da4:	4659      	mov	r1, fp
 8005da6:	eb63 0901 	sbc.w	r9, r3, r1
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dbe:	4690      	mov	r8, r2
 8005dc0:	4699      	mov	r9, r3
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	eb18 0303 	adds.w	r3, r8, r3
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	462b      	mov	r3, r5
 8005dcc:	eb49 0303 	adc.w	r3, r9, r3
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dde:	4629      	mov	r1, r5
 8005de0:	024b      	lsls	r3, r1, #9
 8005de2:	4621      	mov	r1, r4
 8005de4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005de8:	4621      	mov	r1, r4
 8005dea:	024a      	lsls	r2, r1, #9
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df2:	2200      	movs	r2, #0
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dfc:	f7fa feec 	bl	8000bd8 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4613      	mov	r3, r2
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e08:	e058      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e0a:	4b38      	ldr	r3, [pc, #224]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x200>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	099b      	lsrs	r3, r3, #6
 8005e10:	2200      	movs	r2, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	4611      	mov	r1, r2
 8005e16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e1a:	623b      	str	r3, [r7, #32]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	f04f 0000 	mov.w	r0, #0
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	0159      	lsls	r1, r3, #5
 8005e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e36:	0150      	lsls	r0, r2, #5
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e42:	4649      	mov	r1, r9
 8005e44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e60:	eb63 050b 	sbc.w	r5, r3, fp
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	00eb      	lsls	r3, r5, #3
 8005e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e72:	00e2      	lsls	r2, r4, #3
 8005e74:	4614      	mov	r4, r2
 8005e76:	461d      	mov	r5, r3
 8005e78:	4643      	mov	r3, r8
 8005e7a:	18e3      	adds	r3, r4, r3
 8005e7c:	603b      	str	r3, [r7, #0]
 8005e7e:	464b      	mov	r3, r9
 8005e80:	eb45 0303 	adc.w	r3, r5, r3
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e92:	4629      	mov	r1, r5
 8005e94:	028b      	lsls	r3, r1, #10
 8005e96:	4621      	mov	r1, r4
 8005e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	028a      	lsls	r2, r1, #10
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	61fa      	str	r2, [r7, #28]
 8005eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb0:	f7fa fe92 	bl	8000bd8 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x200>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3750      	adds	r7, #80	@ 0x50
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	007a1200 	.word	0x007a1200

08005ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	@ (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	200000a0 	.word	0x200000a0

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a9b      	lsrs	r3, r3, #10
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4903      	ldr	r1, [pc, #12]	@ (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40023800 	.word	0x40023800
 8005f34:	08020c08 	.word	0x08020c08

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f3c:	f7ff ffdc 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0b5b      	lsrs	r3, r3, #13
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	@ (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	08020c08 	.word	0x08020c08

08005f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e07b      	b.n	800606a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f82:	d009      	beq.n	8005f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	61da      	str	r2, [r3, #28]
 8005f8a:	e005      	b.n	8005f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fd fe50 	bl	8003c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601c:	ea42 0103 	orr.w	r1, r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	f003 0104 	and.w	r1, r3, #4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	f003 0210 	and.w	r2, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e01a      	b.n	80060ba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fd ffa9 	bl	8003ff4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_SPI_Transmit+0x22>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e126      	b.n	8006332 <HAL_SPI_Transmit+0x270>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ec:	f7fe fa7a 	bl	80045e4 <HAL_GetTick>
 80060f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d002      	beq.n	8006108 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006102:	2302      	movs	r3, #2
 8006104:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006106:	e10b      	b.n	8006320 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_SPI_Transmit+0x52>
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006118:	e102      	b.n	8006320 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2203      	movs	r2, #3
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006160:	d10f      	bne.n	8006182 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006170:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006180:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d007      	beq.n	80061a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800619e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a8:	d14b      	bne.n	8006242 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_SPI_Transmit+0xf6>
 80061b2:	8afb      	ldrh	r3, [r7, #22]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d13e      	bne.n	8006236 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	1c9a      	adds	r2, r3, #2
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061dc:	e02b      	b.n	8006236 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d112      	bne.n	8006212 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f0:	881a      	ldrh	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fc:	1c9a      	adds	r2, r3, #2
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006210:	e011      	b.n	8006236 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006212:	f7fe f9e7 	bl	80045e4 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d803      	bhi.n	800622a <HAL_SPI_Transmit+0x168>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d102      	bne.n	8006230 <HAL_SPI_Transmit+0x16e>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006234:	e074      	b.n	8006320 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ce      	bne.n	80061de <HAL_SPI_Transmit+0x11c>
 8006240:	e04c      	b.n	80062dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_SPI_Transmit+0x18e>
 800624a:	8afb      	ldrh	r3, [r7, #22]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d140      	bne.n	80062d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	7812      	ldrb	r2, [r2, #0]
 800625c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006276:	e02c      	b.n	80062d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d113      	bne.n	80062ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062ac:	e011      	b.n	80062d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ae:	f7fe f999 	bl	80045e4 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d803      	bhi.n	80062c6 <HAL_SPI_Transmit+0x204>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_Transmit+0x20a>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062d0:	e026      	b.n	8006320 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1cd      	bne.n	8006278 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fe07 	bl	8006ef4 <SPI_EndRxTxTransaction>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062fa:	2300      	movs	r3, #0
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e000      	b.n	8006320 <HAL_SPI_Transmit+0x25e>
  }

error:
 800631e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006330:	7ffb      	ldrb	r3, [r7, #31]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_SPI_Transmit_DMA+0x20>
 8006358:	2302      	movs	r3, #2
 800635a:	e09b      	b.n	8006494 <HAL_SPI_Transmit_DMA+0x158>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006370:	2302      	movs	r3, #2
 8006372:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006374:	e089      	b.n	800648a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_Transmit_DMA+0x46>
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006386:	e080      	b.n	800648a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2203      	movs	r2, #3
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ce:	d10f      	bne.n	80063f0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f4:	4a29      	ldr	r2, [pc, #164]	@ (800649c <HAL_SPI_Transmit_DMA+0x160>)
 80063f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063fc:	4a28      	ldr	r2, [pc, #160]	@ (80064a0 <HAL_SPI_Transmit_DMA+0x164>)
 80063fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006404:	4a27      	ldr	r2, [pc, #156]	@ (80064a4 <HAL_SPI_Transmit_DMA+0x168>)
 8006406:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800640c:	2200      	movs	r2, #0
 800640e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006418:	4619      	mov	r1, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	330c      	adds	r3, #12
 8006420:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006426:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006428:	f7fe fb78 	bl	8004b1c <HAL_DMA_Start_IT>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00c      	beq.n	800644c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006436:	f043 0210 	orr.w	r2, r3, #16
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800644a:	e01e      	b.n	800648a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006456:	2b40      	cmp	r3, #64	@ 0x40
 8006458:	d007      	beq.n	800646a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006468:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0220 	orr.w	r2, r2, #32
 8006478:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0202 	orr.w	r2, r2, #2
 8006488:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	08006c5d 	.word	0x08006c5d
 80064a0:	08006a7d 	.word	0x08006a7d
 80064a4:	08006cb1 	.word	0x08006cb1

080064a8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d110      	bne.n	80064e4 <HAL_SPI_Receive_DMA+0x3c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ca:	d10b      	bne.n	80064e4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2204      	movs	r2, #4
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f8a6 	bl	800662c <HAL_SPI_TransmitReceive_DMA>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e09b      	b.n	800661c <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_SPI_Receive_DMA+0x4a>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e094      	b.n	800661c <HAL_SPI_Receive_DMA+0x174>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	d002      	beq.n	800650c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006506:	2302      	movs	r3, #2
 8006508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800650a:	e082      	b.n	8006612 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Receive_DMA+0x70>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800651c:	e079      	b.n	8006612 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2204      	movs	r2, #4
 8006522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	88fa      	ldrh	r2, [r7, #6]
 8006536:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800655e:	d10f      	bne.n	8006580 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800656e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800657e:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006584:	4a27      	ldr	r2, [pc, #156]	@ (8006624 <HAL_SPI_Receive_DMA+0x17c>)
 8006586:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658c:	4a26      	ldr	r2, [pc, #152]	@ (8006628 <HAL_SPI_Receive_DMA+0x180>)
 800658e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006594:	2200      	movs	r2, #0
 8006596:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	4619      	mov	r1, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80065b0:	f7fe fab4 	bl	8004b1c <HAL_DMA_Start_IT>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065be:	f043 0210 	orr.w	r2, r3, #16
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80065d2:	e01e      	b.n	8006612 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065de:	2b40      	cmp	r3, #64	@ 0x40
 80065e0:	d007      	beq.n	80065f2 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065f0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0220 	orr.w	r2, r2, #32
 8006600:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	08006b25 	.word	0x08006b25
 8006628:	08006cb1 	.word	0x08006cb1

0800662c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006648:	2302      	movs	r3, #2
 800664a:	e0e3      	b.n	8006814 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800665a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006662:	7dbb      	ldrb	r3, [r7, #22]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d00d      	beq.n	8006684 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800666e:	d106      	bne.n	800667e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <HAL_SPI_TransmitReceive_DMA+0x52>
 8006678:	7dbb      	ldrb	r3, [r7, #22]
 800667a:	2b04      	cmp	r3, #4
 800667c:	d002      	beq.n	8006684 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800667e:	2302      	movs	r3, #2
 8006680:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006682:	e0c2      	b.n	800680a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	75fb      	strb	r3, [r7, #23]
    goto error;
 800669a:	e0b6      	b.n	800680a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d003      	beq.n	80066b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2205      	movs	r2, #5
 80066ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	887a      	ldrh	r2, [r7, #2]
 80066c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	887a      	ldrh	r2, [r7, #2]
 80066c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	887a      	ldrh	r2, [r7, #2]
 80066d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	887a      	ldrh	r2, [r7, #2]
 80066d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d108      	bne.n	8006704 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f6:	4a49      	ldr	r2, [pc, #292]	@ (800681c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80066f8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fe:	4a48      	ldr	r2, [pc, #288]	@ (8006820 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006700:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006702:	e007      	b.n	8006714 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006708:	4a46      	ldr	r2, [pc, #280]	@ (8006824 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800670a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006710:	4a45      	ldr	r2, [pc, #276]	@ (8006828 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006712:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006718:	4a44      	ldr	r2, [pc, #272]	@ (800682c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800671a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006720:	2200      	movs	r2, #0
 8006722:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	4619      	mov	r1, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800673a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800673c:	f7fe f9ee 	bl	8004b1c <HAL_DMA_Start_IT>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	f043 0210 	orr.w	r2, r3, #16
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800675e:	e054      	b.n	800680a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006774:	2200      	movs	r2, #0
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677c:	2200      	movs	r2, #0
 800677e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006784:	2200      	movs	r2, #0
 8006786:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678c:	2200      	movs	r2, #0
 800678e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	4619      	mov	r1, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067a8:	f7fe f9b8 	bl	8004b1c <HAL_DMA_Start_IT>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00c      	beq.n	80067cc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	f043 0210 	orr.w	r2, r3, #16
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80067ca:	e01e      	b.n	800680a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d6:	2b40      	cmp	r3, #64	@ 0x40
 80067d8:	d007      	beq.n	80067ea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067e8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0220 	orr.w	r2, r2, #32
 80067f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0202 	orr.w	r2, r2, #2
 8006808:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	08006c79 	.word	0x08006c79
 8006820:	08006b25 	.word	0x08006b25
 8006824:	08006c95 	.word	0x08006c95
 8006828:	08006bcd 	.word	0x08006bcd
 800682c:	08006cb1 	.word	0x08006cb1

08006830 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10e      	bne.n	8006870 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
    return;
 800686e:	e0ce      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_SPI_IRQHandler+0x5e>
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
    return;
 800688c:	e0bf      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <HAL_SPI_IRQHandler+0x7e>
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80b0 	beq.w	8006a0e <HAL_SPI_IRQHandler+0x1de>
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80aa 	beq.w	8006a0e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d023      	beq.n	800690c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d011      	beq.n	80068f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d4:	f043 0204 	orr.w	r2, r3, #4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	e00b      	b.n	800690c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]
        return;
 800690a:	e080      	b.n	8006a0e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d014      	beq.n	8006940 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	f043 0201 	orr.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694e:	f043 0208 	orr.w	r2, r3, #8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006956:	2300      	movs	r3, #0
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006968:	2b00      	cmp	r3, #0
 800696a:	d04f      	beq.n	8006a0c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800697a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <HAL_SPI_IRQHandler+0x168>
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d034      	beq.n	8006a02 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0203 	bic.w	r2, r2, #3
 80069a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d011      	beq.n	80069d4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b4:	4a17      	ldr	r2, [pc, #92]	@ (8006a14 <HAL_SPI_IRQHandler+0x1e4>)
 80069b6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe f905 	bl	8004bcc <HAL_DMA_Abort_IT>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006a14 <HAL_SPI_IRQHandler+0x1e4>)
 80069e2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe f8ef 	bl	8004bcc <HAL_DMA_Abort_IT>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006a00:	e003      	b.n	8006a0a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f830 	bl	8006a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a08:	e000      	b.n	8006a0c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006a0a:	bf00      	nop
    return;
 8006a0c:	bf00      	nop
  }
}
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	08006cf1 	.word	0x08006cf1

08006a18 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a8a:	f7fd fdab 	bl	80045e4 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a9e:	d03b      	beq.n	8006b18 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0220 	bic.w	r2, r2, #32
 8006aae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0202 	bic.w	r2, r2, #2
 8006abe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	2164      	movs	r1, #100	@ 0x64
 8006ac4:	6978      	ldr	r0, [r7, #20]
 8006ac6:	f000 fa15 	bl	8006ef4 <SPI_EndRxTxTransaction>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad4:	f043 0220 	orr.w	r2, r3, #32
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b10:	6978      	ldr	r0, [r7, #20]
 8006b12:	f7ff ffa9 	bl	8006a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b16:	e002      	b.n	8006b1e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006b18:	6978      	ldr	r0, [r7, #20]
 8006b1a:	f7fd fb07 	bl	800412c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b32:	f7fd fd57 	bl	80045e4 <HAL_GetTick>
 8006b36:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b46:	d03b      	beq.n	8006bc0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0220 	bic.w	r2, r2, #32
 8006b56:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10d      	bne.n	8006b7c <SPI_DMAReceiveCplt+0x58>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b68:	d108      	bne.n	8006b7c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0203 	bic.w	r2, r2, #3
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	e007      	b.n	8006b8c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	2164      	movs	r1, #100	@ 0x64
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f949 	bl	8006e28 <SPI_EndRxTransaction>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff ff55 	bl	8006a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006bbe:	e002      	b.n	8006bc6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7fd fad5 	bl	8004170 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bda:	f7fd fd03 	bl	80045e4 <HAL_GetTick>
 8006bde:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bee:	d02f      	beq.n	8006c50 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0220 	bic.w	r2, r2, #32
 8006bfe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	2164      	movs	r1, #100	@ 0x64
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f975 	bl	8006ef4 <SPI_EndRxTxTransaction>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c14:	f043 0220 	orr.w	r2, r3, #32
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0203 	bic.w	r2, r2, #3
 8006c2a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff ff0d 	bl	8006a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c4e:	e002      	b.n	8006c56 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff fee1 	bl	8006a18 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff fede 	bl	8006a2c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff feda 	bl	8006a40 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff fed6 	bl	8006a54 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0203 	bic.w	r2, r2, #3
 8006ccc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	f043 0210 	orr.w	r2, r3, #16
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff fec0 	bl	8006a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ce8:	bf00      	nop
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff feac 	bl	8006a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d28:	f7fd fc5c 	bl	80045e4 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d38:	f7fd fc54 	bl	80045e4 <HAL_GetTick>
 8006d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d3e:	4b39      	ldr	r3, [pc, #228]	@ (8006e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	015b      	lsls	r3, r3, #5
 8006d44:	0d1b      	lsrs	r3, r3, #20
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d4e:	e054      	b.n	8006dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d050      	beq.n	8006dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d58:	f7fd fc44 	bl	80045e4 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d902      	bls.n	8006d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d13d      	bne.n	8006dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d86:	d111      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d90:	d004      	beq.n	8006d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9a:	d107      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db4:	d10f      	bne.n	8006dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e017      	b.n	8006e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d19b      	bne.n	8006d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200000a0 	.word	0x200000a0

08006e28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e3c:	d111      	bne.n	8006e62 <SPI_EndRxTransaction+0x3a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e46:	d004      	beq.n	8006e52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e50:	d107      	bne.n	8006e62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e6a:	d12a      	bne.n	8006ec2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e74:	d012      	beq.n	8006e9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2180      	movs	r1, #128	@ 0x80
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff ff49 	bl	8006d18 <SPI_WaitFlagStateUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02d      	beq.n	8006ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e026      	b.n	8006eea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff ff36 	bl	8006d18 <SPI_WaitFlagStateUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01a      	beq.n	8006ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb6:	f043 0220 	orr.w	r2, r3, #32
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e013      	b.n	8006eea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2101      	movs	r1, #1
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff ff23 	bl	8006d18 <SPI_WaitFlagStateUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006edc:	f043 0220 	orr.w	r2, r3, #32
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e000      	b.n	8006eea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f00:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <SPI_EndRxTxTransaction+0x7c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1b      	ldr	r2, [pc, #108]	@ (8006f74 <SPI_EndRxTxTransaction+0x80>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	0d5b      	lsrs	r3, r3, #21
 8006f0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f1e:	d112      	bne.n	8006f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	2180      	movs	r1, #128	@ 0x80
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fef4 	bl	8006d18 <SPI_WaitFlagStateUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d016      	beq.n	8006f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e00f      	b.n	8006f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5c:	2b80      	cmp	r3, #128	@ 0x80
 8006f5e:	d0f2      	beq.n	8006f46 <SPI_EndRxTxTransaction+0x52>
 8006f60:	e000      	b.n	8006f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f62:	bf00      	nop
  }

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200000a0 	.word	0x200000a0
 8006f74:	165e9f81 	.word	0x165e9f81

08006f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e03f      	b.n	800700a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fd f872 	bl	8004088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2224      	movs	r2, #36	@ 0x24
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f929 	bl	8007214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b08a      	sub	sp, #40	@ 0x28
 8007016:	af02      	add	r7, sp, #8
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b20      	cmp	r3, #32
 8007030:	d17c      	bne.n	800712c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_UART_Transmit+0x2c>
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e075      	b.n	800712e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_UART_Transmit+0x3e>
 800704c:	2302      	movs	r3, #2
 800704e:	e06e      	b.n	800712e <HAL_UART_Transmit+0x11c>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2221      	movs	r2, #33	@ 0x21
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007066:	f7fd fabd 	bl	80045e4 <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	88fa      	ldrh	r2, [r7, #6]
 8007076:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007080:	d108      	bne.n	8007094 <HAL_UART_Transmit+0x82>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d104      	bne.n	8007094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e003      	b.n	800709c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80070a4:	e02a      	b.n	80070fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2200      	movs	r2, #0
 80070ae:	2180      	movs	r1, #128	@ 0x80
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f840 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e036      	b.n	800712e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	3302      	adds	r3, #2
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	e007      	b.n	80070ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	3301      	adds	r3, #1
 80070ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1cf      	bne.n	80070a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	2140      	movs	r1, #64	@ 0x40
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f810 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e006      	b.n	800712e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	e000      	b.n	800712e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b090      	sub	sp, #64	@ 0x40
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007146:	e050      	b.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d04c      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007152:	2b00      	cmp	r3, #0
 8007154:	d007      	beq.n	8007166 <UART_WaitOnFlagUntilTimeout+0x30>
 8007156:	f7fd fa45 	bl	80045e4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007162:	429a      	cmp	r2, r3
 8007164:	d241      	bcs.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	330c      	adds	r3, #12
 800716c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800717c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	330c      	adds	r3, #12
 8007184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007186:	637a      	str	r2, [r7, #52]	@ 0x34
 8007188:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800718c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	613b      	str	r3, [r7, #16]
   return(result);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3314      	adds	r3, #20
 80071b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071ba:	623a      	str	r2, [r7, #32]
 80071bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	69f9      	ldr	r1, [r7, #28]
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e00f      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4013      	ands	r3, r2
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	429a      	cmp	r2, r3
 8007206:	d09f      	beq.n	8007148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3740      	adds	r7, #64	@ 0x40
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007218:	b0c0      	sub	sp, #256	@ 0x100
 800721a:	af00      	add	r7, sp, #0
 800721c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	68d9      	ldr	r1, [r3, #12]
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	ea40 0301 	orr.w	r3, r0, r1
 800723c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	431a      	orrs	r2, r3
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800726c:	f021 010c 	bic.w	r1, r1, #12
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800727a:	430b      	orrs	r3, r1
 800727c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728e:	6999      	ldr	r1, [r3, #24]
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	ea40 0301 	orr.w	r3, r0, r1
 800729a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4b8f      	ldr	r3, [pc, #572]	@ (80074e0 <UART_SetConfig+0x2cc>)
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d005      	beq.n	80072b4 <UART_SetConfig+0xa0>
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b8d      	ldr	r3, [pc, #564]	@ (80074e4 <UART_SetConfig+0x2d0>)
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d104      	bne.n	80072be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fe fe40 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 80072b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072bc:	e003      	b.n	80072c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072be:	f7fe fe27 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80072c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072d0:	f040 810c 	bne.w	80074ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072e6:	4622      	mov	r2, r4
 80072e8:	462b      	mov	r3, r5
 80072ea:	1891      	adds	r1, r2, r2
 80072ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072ee:	415b      	adcs	r3, r3
 80072f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072f6:	4621      	mov	r1, r4
 80072f8:	eb12 0801 	adds.w	r8, r2, r1
 80072fc:	4629      	mov	r1, r5
 80072fe:	eb43 0901 	adc.w	r9, r3, r1
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800730e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007316:	4690      	mov	r8, r2
 8007318:	4699      	mov	r9, r3
 800731a:	4623      	mov	r3, r4
 800731c:	eb18 0303 	adds.w	r3, r8, r3
 8007320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007324:	462b      	mov	r3, r5
 8007326:	eb49 0303 	adc.w	r3, r9, r3
 800732a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800732e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800733a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800733e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007342:	460b      	mov	r3, r1
 8007344:	18db      	adds	r3, r3, r3
 8007346:	653b      	str	r3, [r7, #80]	@ 0x50
 8007348:	4613      	mov	r3, r2
 800734a:	eb42 0303 	adc.w	r3, r2, r3
 800734e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007354:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007358:	f7f9 fc3e 	bl	8000bd8 <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4b61      	ldr	r3, [pc, #388]	@ (80074e8 <UART_SetConfig+0x2d4>)
 8007362:	fba3 2302 	umull	r2, r3, r3, r2
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	011c      	lsls	r4, r3, #4
 800736a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007374:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007378:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007384:	415b      	adcs	r3, r3
 8007386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007388:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800738c:	4641      	mov	r1, r8
 800738e:	eb12 0a01 	adds.w	sl, r2, r1
 8007392:	4649      	mov	r1, r9
 8007394:	eb43 0b01 	adc.w	fp, r3, r1
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073ac:	4692      	mov	sl, r2
 80073ae:	469b      	mov	fp, r3
 80073b0:	4643      	mov	r3, r8
 80073b2:	eb1a 0303 	adds.w	r3, sl, r3
 80073b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073ba:	464b      	mov	r3, r9
 80073bc:	eb4b 0303 	adc.w	r3, fp, r3
 80073c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073d8:	460b      	mov	r3, r1
 80073da:	18db      	adds	r3, r3, r3
 80073dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80073de:	4613      	mov	r3, r2
 80073e0:	eb42 0303 	adc.w	r3, r2, r3
 80073e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073ee:	f7f9 fbf3 	bl	8000bd8 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	4b3b      	ldr	r3, [pc, #236]	@ (80074e8 <UART_SetConfig+0x2d4>)
 80073fa:	fba3 2301 	umull	r2, r3, r3, r1
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2264      	movs	r2, #100	@ 0x64
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	1acb      	subs	r3, r1, r3
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800740e:	4b36      	ldr	r3, [pc, #216]	@ (80074e8 <UART_SetConfig+0x2d4>)
 8007410:	fba3 2302 	umull	r2, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800741c:	441c      	add	r4, r3
 800741e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007422:	2200      	movs	r2, #0
 8007424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007428:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800742c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007430:	4642      	mov	r2, r8
 8007432:	464b      	mov	r3, r9
 8007434:	1891      	adds	r1, r2, r2
 8007436:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007438:	415b      	adcs	r3, r3
 800743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800743c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007440:	4641      	mov	r1, r8
 8007442:	1851      	adds	r1, r2, r1
 8007444:	6339      	str	r1, [r7, #48]	@ 0x30
 8007446:	4649      	mov	r1, r9
 8007448:	414b      	adcs	r3, r1
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007458:	4659      	mov	r1, fp
 800745a:	00cb      	lsls	r3, r1, #3
 800745c:	4651      	mov	r1, sl
 800745e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007462:	4651      	mov	r1, sl
 8007464:	00ca      	lsls	r2, r1, #3
 8007466:	4610      	mov	r0, r2
 8007468:	4619      	mov	r1, r3
 800746a:	4603      	mov	r3, r0
 800746c:	4642      	mov	r2, r8
 800746e:	189b      	adds	r3, r3, r2
 8007470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007474:	464b      	mov	r3, r9
 8007476:	460a      	mov	r2, r1
 8007478:	eb42 0303 	adc.w	r3, r2, r3
 800747c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800748c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007490:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007494:	460b      	mov	r3, r1
 8007496:	18db      	adds	r3, r3, r3
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800749a:	4613      	mov	r3, r2
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074aa:	f7f9 fb95 	bl	8000bd8 <__aeabi_uldivmod>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4b0d      	ldr	r3, [pc, #52]	@ (80074e8 <UART_SetConfig+0x2d4>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	@ 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	3332      	adds	r3, #50	@ 0x32
 80074c6:	4a08      	ldr	r2, [pc, #32]	@ (80074e8 <UART_SetConfig+0x2d4>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f003 0207 	and.w	r2, r3, #7
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4422      	add	r2, r4
 80074da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074dc:	e106      	b.n	80076ec <UART_SetConfig+0x4d8>
 80074de:	bf00      	nop
 80074e0:	40011000 	.word	0x40011000
 80074e4:	40011400 	.word	0x40011400
 80074e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074fe:	4642      	mov	r2, r8
 8007500:	464b      	mov	r3, r9
 8007502:	1891      	adds	r1, r2, r2
 8007504:	6239      	str	r1, [r7, #32]
 8007506:	415b      	adcs	r3, r3
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
 800750a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800750e:	4641      	mov	r1, r8
 8007510:	1854      	adds	r4, r2, r1
 8007512:	4649      	mov	r1, r9
 8007514:	eb43 0501 	adc.w	r5, r3, r1
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	00eb      	lsls	r3, r5, #3
 8007522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007526:	00e2      	lsls	r2, r4, #3
 8007528:	4614      	mov	r4, r2
 800752a:	461d      	mov	r5, r3
 800752c:	4643      	mov	r3, r8
 800752e:	18e3      	adds	r3, r4, r3
 8007530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007534:	464b      	mov	r3, r9
 8007536:	eb45 0303 	adc.w	r3, r5, r3
 800753a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800754a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800755a:	4629      	mov	r1, r5
 800755c:	008b      	lsls	r3, r1, #2
 800755e:	4621      	mov	r1, r4
 8007560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007564:	4621      	mov	r1, r4
 8007566:	008a      	lsls	r2, r1, #2
 8007568:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800756c:	f7f9 fb34 	bl	8000bd8 <__aeabi_uldivmod>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4b60      	ldr	r3, [pc, #384]	@ (80076f8 <UART_SetConfig+0x4e4>)
 8007576:	fba3 2302 	umull	r2, r3, r3, r2
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	011c      	lsls	r4, r3, #4
 800757e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007588:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800758c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	1891      	adds	r1, r2, r2
 8007596:	61b9      	str	r1, [r7, #24]
 8007598:	415b      	adcs	r3, r3
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a0:	4641      	mov	r1, r8
 80075a2:	1851      	adds	r1, r2, r1
 80075a4:	6139      	str	r1, [r7, #16]
 80075a6:	4649      	mov	r1, r9
 80075a8:	414b      	adcs	r3, r1
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075b8:	4659      	mov	r1, fp
 80075ba:	00cb      	lsls	r3, r1, #3
 80075bc:	4651      	mov	r1, sl
 80075be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c2:	4651      	mov	r1, sl
 80075c4:	00ca      	lsls	r2, r1, #3
 80075c6:	4610      	mov	r0, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	4642      	mov	r2, r8
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075d4:	464b      	mov	r3, r9
 80075d6:	460a      	mov	r2, r1
 80075d8:	eb42 0303 	adc.w	r3, r2, r3
 80075dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075f8:	4649      	mov	r1, r9
 80075fa:	008b      	lsls	r3, r1, #2
 80075fc:	4641      	mov	r1, r8
 80075fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007602:	4641      	mov	r1, r8
 8007604:	008a      	lsls	r2, r1, #2
 8007606:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800760a:	f7f9 fae5 	bl	8000bd8 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4611      	mov	r1, r2
 8007614:	4b38      	ldr	r3, [pc, #224]	@ (80076f8 <UART_SetConfig+0x4e4>)
 8007616:	fba3 2301 	umull	r2, r3, r3, r1
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	2264      	movs	r2, #100	@ 0x64
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	1acb      	subs	r3, r1, r3
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	3332      	adds	r3, #50	@ 0x32
 8007628:	4a33      	ldr	r2, [pc, #204]	@ (80076f8 <UART_SetConfig+0x4e4>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007634:	441c      	add	r4, r3
 8007636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763a:	2200      	movs	r2, #0
 800763c:	673b      	str	r3, [r7, #112]	@ 0x70
 800763e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007640:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007644:	4642      	mov	r2, r8
 8007646:	464b      	mov	r3, r9
 8007648:	1891      	adds	r1, r2, r2
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	415b      	adcs	r3, r3
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007654:	4641      	mov	r1, r8
 8007656:	1851      	adds	r1, r2, r1
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	4649      	mov	r1, r9
 800765c:	414b      	adcs	r3, r1
 800765e:	607b      	str	r3, [r7, #4]
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800766c:	4659      	mov	r1, fp
 800766e:	00cb      	lsls	r3, r1, #3
 8007670:	4651      	mov	r1, sl
 8007672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007676:	4651      	mov	r1, sl
 8007678:	00ca      	lsls	r2, r1, #3
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	4603      	mov	r3, r0
 8007680:	4642      	mov	r2, r8
 8007682:	189b      	adds	r3, r3, r2
 8007684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007686:	464b      	mov	r3, r9
 8007688:	460a      	mov	r2, r1
 800768a:	eb42 0303 	adc.w	r3, r2, r3
 800768e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	663b      	str	r3, [r7, #96]	@ 0x60
 800769a:	667a      	str	r2, [r7, #100]	@ 0x64
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076a8:	4649      	mov	r1, r9
 80076aa:	008b      	lsls	r3, r1, #2
 80076ac:	4641      	mov	r1, r8
 80076ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b2:	4641      	mov	r1, r8
 80076b4:	008a      	lsls	r2, r1, #2
 80076b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076ba:	f7f9 fa8d 	bl	8000bd8 <__aeabi_uldivmod>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <UART_SetConfig+0x4e4>)
 80076c4:	fba3 1302 	umull	r1, r3, r3, r2
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	2164      	movs	r1, #100	@ 0x64
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	3332      	adds	r3, #50	@ 0x32
 80076d6:	4a08      	ldr	r2, [pc, #32]	@ (80076f8 <UART_SetConfig+0x4e4>)
 80076d8:	fba2 2303 	umull	r2, r3, r2, r3
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4422      	add	r2, r4
 80076ea:	609a      	str	r2, [r3, #8]
}
 80076ec:	bf00      	nop
 80076ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076f2:	46bd      	mov	sp, r7
 80076f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f8:	51eb851f 	.word	0x51eb851f

080076fc <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  return x;
 8007704:	687b      	ldr	r3, [r7, #4]
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	4603      	mov	r3, r0
 800771a:	6039      	str	r1, [r7, #0]
 800771c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 800771e:	f107 0208 	add.w	r2, r7, #8
 8007722:	79f9      	ldrb	r1, [r7, #7]
 8007724:	2304      	movs	r3, #4
 8007726:	2002      	movs	r0, #2
 8007728:	f000 f8f6 	bl	8007918 <sl_wfx_bus_access>
 800772c:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 800772e:	7a3b      	ldrb	r3, [r7, #8]
 8007730:	461a      	mov	r2, r3
 8007732:	7a7b      	ldrb	r3, [r7, #9]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	b29b      	uxth	r3, r3
 8007738:	4313      	orrs	r3, r2
 800773a:	b29a      	uxth	r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8007740:	68fb      	ldr	r3, [r7, #12]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	4603      	mov	r3, r0
 8007752:	460a      	mov	r2, r1
 8007754:	71fb      	strb	r3, [r7, #7]
 8007756:	4613      	mov	r3, r2
 8007758:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 800775a:	88bb      	ldrh	r3, [r7, #4]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	733b      	strb	r3, [r7, #12]
 8007760:	88bb      	ldrh	r3, [r7, #4]
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	b29b      	uxth	r3, r3
 8007766:	b2db      	uxtb	r3, r3
 8007768:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 8007772:	f107 020c 	add.w	r2, r7, #12
 8007776:	79f9      	ldrb	r1, [r7, #7]
 8007778:	2304      	movs	r3, #4
 800777a:	2001      	movs	r0, #1
 800777c:	f000 f8cc 	bl	8007918 <sl_wfx_bus_access>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	6039      	str	r1, [r7, #0]
 8007794:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 8007796:	79f9      	ldrb	r1, [r7, #7]
 8007798:	2304      	movs	r3, #4
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	2002      	movs	r0, #2
 800779e:	f000 f8bb 	bl	8007918 <sl_wfx_bus_access>
 80077a2:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff ffa7 	bl	80076fc <uint32_identity>
 80077ae:	4602      	mov	r2, r0
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 80077b4:	68fb      	ldr	r3, [r7, #12]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	4603      	mov	r3, r0
 80077c6:	6039      	str	r1, [r7, #0]
 80077c8:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff ff95 	bl	80076fc <uint32_identity>
 80077d2:	4603      	mov	r3, r0
 80077d4:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 80077d6:	463a      	mov	r2, r7
 80077d8:	79f9      	ldrb	r1, [r7, #7]
 80077da:	2304      	movs	r3, #4
 80077dc:	2001      	movs	r0, #1
 80077de:	f000 f89b 	bl	8007918 <sl_wfx_bus_access>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	2102      	movs	r1, #2
 80077fc:	2002      	movs	r0, #2
 80077fe:	f000 f88b 	bl	8007918 <sl_wfx_bus_access>
 8007802:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 8007804:	68fb      	ldr	r3, [r7, #12]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	2102      	movs	r1, #2
 800781e:	2001      	movs	r0, #1
 8007820:	f000 f87a 	bl	8007918 <sl_wfx_bus_access>
 8007824:	60f8      	str	r0, [r7, #12]

  return result;
 8007826:	68fb      	ldr	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007842:	d301      	bcc.n	8007848 <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 8007844:	2321      	movs	r3, #33	@ 0x21
 8007846:	e00f      	b.n	8007868 <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	2004      	movs	r0, #4
 800784c:	f7ff ffb7 	bl	80077be <sl_wfx_reg_write_32>
 8007850:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	2105      	movs	r1, #5
 800785e:	2001      	movs	r0, #1
 8007860:	f000 f85a 	bl	8007918 <sl_wfx_bus_access>
 8007864:	6178      	str	r0, [r7, #20]
  }

  return result;
 8007866:	697b      	ldr	r3, [r7, #20]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	2004      	movs	r0, #4
 800787e:	f7ff ff9e 	bl	80077be <sl_wfx_reg_write_32>
 8007882:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	2005      	movs	r0, #5
 800788e:	f7ff ff96 	bl	80077be <sl_wfx_reg_write_32>
 8007892:	60f8      	str	r0, [r7, #12]
  }

  return result;
 8007894:	68fb      	ldr	r3, [r7, #12]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	2004      	movs	r0, #4
 80078ac:	f7ff ff87 	bl	80077be <sl_wfx_reg_write_32>
 80078b0:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80078b2:	f107 030c 	add.w	r3, r7, #12
 80078b6:	4619      	mov	r1, r3
 80078b8:	2000      	movs	r0, #0
 80078ba:	f7ff ff66 	bl	800778a <sl_wfx_reg_read_32>
 80078be:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80078c6:	4619      	mov	r1, r3
 80078c8:	2000      	movs	r0, #0
 80078ca:	f7ff ff78 	bl	80077be <sl_wfx_reg_write_32>
 80078ce:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	e011      	b.n	80078fa <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	4619      	mov	r1, r3
 80078dc:	2000      	movs	r0, #0
 80078de:	f7ff ff54 	bl	800778a <sl_wfx_reg_read_32>
 80078e2:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 80078ee:	2001      	movs	r0, #1
 80078f0:	f001 fadc 	bl	8008eac <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b13      	cmp	r3, #19
 80078fe:	d9ea      	bls.n	80078d6 <sl_wfx_apb_read_32+0x38>
 8007900:	e000      	b.n	8007904 <sl_wfx_apb_read_32+0x66>
      break;
 8007902:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	2005      	movs	r0, #5
 8007908:	f7ff ff3f 	bl	800778a <sl_wfx_reg_read_32>
 800790c:	6138      	str	r0, [r7, #16]

  return result;
 800790e:	693b      	ldr	r3, [r7, #16]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60ba      	str	r2, [r7, #8]
 8007920:	607b      	str	r3, [r7, #4]
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
 8007926:	460b      	mov	r3, r1
 8007928:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 800792a:	4b43      	ldr	r3, [pc, #268]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01a      	beq.n	8007970 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 800793a:	2001      	movs	r0, #1
 800793c:	f001 fa30 	bl	8008da0 <sl_wfx_host_set_wake_up_pin>
 8007940:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d171      	bne.n	8007a2c <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d105      	bne.n	800795a <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 800794e:	f001 fa43 	bl	8008dd8 <sl_wfx_host_wait_for_wake_up>
 8007952:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d168      	bne.n	8007a2c <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 800795a:	4b37      	ldr	r3, [pc, #220]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8007962:	4b35      	ldr	r3, [pc, #212]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0208 	bic.w	r2, r2, #8
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d107      	bne.n	8007986 <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f85d 	bl	8007a3c <sl_wfx_reg_read>
 8007982:	6178      	str	r0, [r7, #20]
 8007984:	e00c      	b.n	80079a0 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d107      	bne.n	800799c <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f89e 	bl	8007ad4 <sl_wfx_reg_write>
 8007998:	6178      	str	r0, [r7, #20]
 800799a:	e001      	b.n	80079a0 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 800799c:	2321      	movs	r3, #33	@ 0x21
 800799e:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d142      	bne.n	8007a2c <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 80079a6:	4b24      	ldr	r3, [pc, #144]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d039      	beq.n	8007a2a <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d136      	bne.n	8007a2a <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d108      	bne.n	80079d4 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d130      	bne.n	8007a2a <sl_wfx_bus_access+0x112>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d12a      	bne.n	8007a2a <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 80079d4:	4b18      	ldr	r3, [pc, #96]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d824      	bhi.n	8007a2a <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3b02      	subs	r3, #2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d11b      	bne.n	8007a2a <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 80079f2:	7bb9      	ldrb	r1, [r7, #14]
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fa01 	bl	8008e00 <sl_wfx_host_sleep_grant>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f640 3208 	movw	r2, #2824	@ 0xb08
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d110      	bne.n	8007a2a <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 8007a08:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8007a10:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <sl_wfx_bus_access+0x120>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0208 	orr.w	r2, r2, #8
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 8007a1e:	2000      	movs	r0, #0
 8007a20:	f001 f9be 	bl	8008da0 <sl_wfx_host_set_wake_up_pin>
 8007a24:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 8007a2a:	bf00      	nop
  return result;
 8007a2c:	697b      	ldr	r3, [r7, #20]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000a80 	.word	0x20000a80

08007a3c <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	@ 0x28
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	4603      	mov	r3, r0
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	031b      	lsls	r3, r3, #12
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a64:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007a66:	8bfb      	ldrh	r3, [r7, #30]
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	753b      	strb	r3, [r7, #20]
 8007a70:	8bfb      	ldrh	r3, [r7, #30]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8007a76:	f002 f811 	bl	8009a9c <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f107 0114 	add.w	r1, r7, #20
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2202      	movs	r2, #2
 8007a88:	2002      	movs	r0, #2
 8007a8a:	f002 f81f 	bl	8009acc <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007a8e:	f002 f811 	bl	8009ab4 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d118      	bne.n	8007aca <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	785a      	ldrb	r2, [r3, #1]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	3301      	adds	r3, #1
 8007aae:	7dfa      	ldrb	r2, [r7, #23]
 8007ab0:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	789b      	ldrb	r3, [r3, #2]
 8007ab6:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	3302      	adds	r3, #2
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	78d2      	ldrb	r2, [r2, #3]
 8007ac0:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	3303      	adds	r3, #3
 8007ac6:	7dfa      	ldrb	r2, [r7, #23]
 8007ac8:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3720      	adds	r7, #32
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	@ 0x28
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	4603      	mov	r3, r0
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d118      	bne.n	8007b1a <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	785a      	ldrb	r2, [r3, #1]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	3301      	adds	r3, #1
 8007afe:	7efa      	ldrb	r2, [r7, #27]
 8007b00:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	789b      	ldrb	r3, [r3, #2]
 8007b06:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	3302      	adds	r3, #2
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	78d2      	ldrb	r2, [r2, #3]
 8007b10:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	3303      	adds	r3, #3
 8007b16:	7efa      	ldrb	r2, [r7, #27]
 8007b18:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	031b      	lsls	r3, r3, #12
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007b2c:	8b3b      	ldrh	r3, [r7, #24]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	753b      	strb	r3, [r7, #20]
 8007b36:	8b3b      	ldrh	r3, [r7, #24]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8007b3c:	f001 ffae 	bl	8009a9c <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f107 0114 	add.w	r1, r7, #20
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f001 ffbc 	bl	8009acc <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007b54:	f001 ffae 	bl	8009ab4 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 8007b6a:	f001 ff71 	bl	8009a50 <sl_wfx_host_init_bus>
 8007b6e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d12b      	bne.n	8007bce <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8007b76:	f001 f8fb 	bl	8008d70 <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7ff fe03 	bl	800778a <sl_wfx_reg_read_32>
 8007b84:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d120      	bne.n	8007bce <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <sl_wfx_init_bus+0x36>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d104      	bne.n	8007ba4 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d114      	bne.n	8007bce <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007baa:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bb2:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	4b08      	ldr	r3, [pc, #32]	@ (8007bd8 <sl_wfx_init_bus+0x74>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f7ff fdfc 	bl	80077be <sl_wfx_reg_write_32>
 8007bc6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0

  error_handler:
 8007bcc:	bf00      	nop
  return status;
 8007bce:	687b      	ldr	r3, [r7, #4]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	04045400 	.word	0x04045400

08007bdc <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8007be0:	f001 ff4e 	bl	8009a80 <sl_wfx_host_deinit_bus>
 8007be4:	4603      	mov	r3, r0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	bd80      	pop	{r7, pc}

08007bea <uint16_identity>:
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	80fb      	strh	r3, [r7, #6]
  return x;
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <uint32_identity>:
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  return x;
 8007c0a:	687b      	ldr	r3, [r7, #4]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8007c18:	b590      	push	{r4, r7, lr}
 8007c1a:	b089      	sub	sp, #36	@ 0x24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 8007c20:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f013 fc24 	bl	801b474 <memset>

  sl_wfx_context = context;
 8007c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8007dac <sl_wfx_init+0x194>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 8007c32:	4b5e      	ldr	r3, [pc, #376]	@ (8007dac <sl_wfx_init+0x194>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  result = sl_wfx_init_bus(  );
 8007c3c:	f7ff ff92 	bl	8007b64 <sl_wfx_init_bus>
 8007c40:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f040 80a2 	bne.w	8007d8e <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8007c4a:	f000 fbf3 	bl	8008434 <sl_wfx_init_chip>
 8007c4e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 809b 	bne.w	8007d8e <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8007c58:	f000 fc80 	bl	800855c <sl_wfx_download_run_bootloader>
 8007c5c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8094 	bne.w	8007d8e <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8007c66:	20e1      	movs	r0, #225	@ 0xe1
 8007c68:	f001 f8da 	bl	8008e20 <sl_wfx_host_setup_waited_event>
 8007c6c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f040 808c 	bne.w	8007d8e <sl_wfx_init+0x176>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8007c76:	f000 fcb9 	bl	80085ec <sl_wfx_download_run_firmware>
 8007c7a:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f040 8085 	bne.w	8007d8e <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8007c84:	f000 fb72 	bl	800836c <sl_wfx_enable_irq>
 8007c88:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d17e      	bne.n	8007d8e <sl_wfx_init+0x176>

  result = sl_wfx_set_access_mode_message(  );
 8007c90:	f000 fbb4 	bl	80083fc <sl_wfx_set_access_mode_message>
 8007c94:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d178      	bne.n	8007d8e <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8007c9c:	f107 0314 	add.w	r3, r7, #20
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007ca6:	20e1      	movs	r0, #225	@ 0xe1
 8007ca8:	f001 f8cc 	bl	8008e44 <sl_wfx_host_wait_for_confirmation>
 8007cac:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d16c      	bne.n	8007d8e <sl_wfx_init+0x176>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f203 2016 	addw	r0, r3, #534	@ 0x216
         startup_info->body.mac_addr[0],
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	3326      	adds	r3, #38	@ 0x26
  memcpy(&(context->mac_addr_0.octet),
 8007ce2:	2206      	movs	r2, #6
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f013 fc82 	bl	801b5ee <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
         startup_info->body.mac_addr[1],
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	332c      	adds	r3, #44	@ 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f013 fc79 	bl	801b5ee <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	8c1b      	ldrh	r3, [r3, #32]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff ff71 	bl	8007bea <uint16_identity>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4b28      	ldr	r3, [pc, #160]	@ (8007db0 <sl_wfx_init+0x198>)
 8007d0e:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	330a      	adds	r3, #10
 8007d1a:	220e      	movs	r2, #14
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	f013 fc66 	bl	801b5ee <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 8007d22:	2001      	movs	r0, #1
 8007d24:	f001 f83c 	bl	8008da0 <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8007d28:	f107 0312 	add.w	r3, r7, #18
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fff7 	bl	8008d20 <sl_wfx_host_get_pds_size>
 8007d32:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d129      	bne.n	8007d8e <sl_wfx_init+0x176>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	76fb      	strb	r3, [r7, #27]
 8007d3e:	e01c      	b.n	8007d7a <sl_wfx_init+0x162>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 8007d40:	7efb      	ldrb	r3, [r7, #27]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	4611      	mov	r1, r2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 ffbc 	bl	8008cc8 <sl_wfx_host_get_pds_data>
 8007d50:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11a      	bne.n	8007d8e <sl_wfx_init+0x176>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8007d58:	68fc      	ldr	r4, [r7, #12]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7f8 fa9f 	bl	80002a0 <strlen>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4619      	mov	r1, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 f950 	bl	800800c <sl_wfx_send_configuration>
 8007d6c:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10c      	bne.n	8007d8e <sl_wfx_init+0x176>
  for (uint8_t a = 0; a < pds_size; a++) {
 8007d74:	7efb      	ldrb	r3, [r7, #27]
 8007d76:	3301      	adds	r3, #1
 8007d78:	76fb      	strb	r3, [r7, #27]
 8007d7a:	7efb      	ldrb	r3, [r7, #27]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	8a7b      	ldrh	r3, [r7, #18]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d3dd      	bcc.n	8007d40 <sl_wfx_init+0x128>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007d84:	4b09      	ldr	r3, [pc, #36]	@ (8007dac <sl_wfx_init+0x194>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <sl_wfx_init+0x188>
    sl_wfx_disable_irq( );
 8007d94:	f000 fb0e 	bl	80083b4 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8007d98:	f7ff ff20 	bl	8007bdc <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8007d9c:	f000 ffe0 	bl	8008d60 <sl_wfx_host_deinit>
  }

  return result;
 8007da0:	69fb      	ldr	r3, [r7, #28]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3724      	adds	r7, #36	@ 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd90      	pop	{r4, r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000a80 	.word	0x20000a80
 8007db0:	20000a86 	.word	0x20000a86

08007db4 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	@ 0x28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8007dd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	3378      	adds	r3, #120	@ 0x78
 8007dde:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007de0:	f107 0018 	add.w	r0, r7, #24
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2202      	movs	r2, #2
 8007de8:	2143      	movs	r1, #67	@ 0x43
 8007dea:	f000 fed7 	bl	8008b9c <sl_wfx_allocate_command_buffer>
 8007dee:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f040 8092 	bne.w	8007f1c <sl_wfx_send_join_command+0x168>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	3304      	adds	r3, #4
 8007e02:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8007e04:	68b8      	ldr	r0, [r7, #8]
 8007e06:	f7ff fefc 	bl	8007c02 <uint32_identity>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 8007e10:	887b      	ldrh	r3, [r7, #2]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fee9 	bl	8007bea <uint16_identity>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  connect_request->security_mode         = security_mode;
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007e26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8007e30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8007e34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007e38:	2b06      	cmp	r3, #6
 8007e3a:	d109      	bne.n	8007e50 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f042 0202 	orr.w	r2, r2, #2
 8007e44:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8007e4e:	e007      	b.n	8007e60 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8007e50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fec9 	bl	8007bea <uint16_identity>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8007e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fec0 	bl	8007bea <uint16_identity>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	861a      	strh	r2, [r3, #48]	@ 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8007e72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff feb7 	bl	8007bea <uint16_identity>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	68f9      	ldr	r1, [r7, #12]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f013 fbad 	bl	801b5ee <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	3332      	adds	r3, #50	@ 0x32
 8007e98:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8007e9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f013 fba5 	bl	801b5ee <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	3374      	adds	r3, #116	@ 0x74
 8007ea8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007eac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f013 fb9d 	bl	801b5ee <memcpy>
  if (bssid != NULL) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d007      	beq.n	8007eca <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	3324      	adds	r3, #36	@ 0x24
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	2206      	movs	r2, #6
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f013 fb93 	bl	801b5ee <memcpy>
 8007ec8:	e006      	b.n	8007ed8 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	3324      	adds	r3, #36	@ 0x24
 8007ece:	2206      	movs	r2, #6
 8007ed0:	21ff      	movs	r1, #255	@ 0xff
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f013 face 	bl	801b474 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	b292      	uxth	r2, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	2043      	movs	r0, #67	@ 0x43
 8007ee2:	f000 f90b 	bl	80080fc <sl_wfx_send_request>
 8007ee6:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d116      	bne.n	8007f1c <sl_wfx_send_join_command+0x168>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007ef8:	2043      	movs	r0, #67	@ 0x43
 8007efa:	f000 ffa3 	bl	8008e44 <sl_wfx_host_wait_for_confirmation>
 8007efe:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8007f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <sl_wfx_send_join_command+0x168>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fe79 	bl	8007c02 <uint32_identity>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2143      	movs	r1, #67	@ 0x43
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fd61 	bl	80089dc <sl_wfx_get_status_code>
 8007f1a:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	d10d      	bne.n	8007f3e <sl_wfx_send_join_command+0x18a>
    if (sl_wfx_context->used_buffers > 0) {
 8007f22:	4b0e      	ldr	r3, [pc, #56]	@ (8007f5c <sl_wfx_send_join_command+0x1a8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <sl_wfx_send_join_command+0x18a>
      sl_wfx_context->used_buffers--;
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f5c <sl_wfx_send_join_command+0x1a8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8007f36:	3a01      	subs	r2, #1
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <sl_wfx_send_join_command+0x19c>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2202      	movs	r2, #2
 8007f48:	2143      	movs	r1, #67	@ 0x43
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fe44 	bl	8008bd8 <sl_wfx_free_command_buffer>
  }
  return result;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3728      	adds	r7, #40	@ 0x28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000a80 	.word	0x20000a80

08007f60 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	460b      	mov	r3, r1
 8007f70:	71fb      	strb	r3, [r7, #7]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	330c      	adds	r3, #12
 8007f80:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8007f82:	4b21      	ldr	r3, [pc, #132]	@ (8008008 <sl_wfx_send_ethernet_frame+0xa8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	330c      	adds	r3, #12
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fe25 	bl	8007bea <uint16_identity>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	224a      	movs	r2, #74	@ 0x4a
 8007fac:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0306 	and.w	r3, r3, #6
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	79ba      	ldrb	r2, [r7, #6]
 8007fc8:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8007fca:	4b0f      	ldr	r3, [pc, #60]	@ (8008008 <sl_wfx_send_ethernet_frame+0xa8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fe09 	bl	8007bea <uint16_identity>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8007fe0:	68b8      	ldr	r0, [r7, #8]
 8007fe2:	f7ff fe0e 	bl	8007c02 <uint32_identity>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	204a      	movs	r0, #74	@ 0x4a
 8007ff6:	f000 f881 	bl	80080fc <sl_wfx_send_request>
 8007ffa:	6138      	str	r0, [r7, #16]

  return result;
 8007ffc:	693b      	ldr	r3, [r7, #16]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000a80 	.word	0x20000a80

0800800c <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	3301      	adds	r3, #1
 800802a:	f023 0301 	bic.w	r3, r3, #1
 800802e:	3306      	adds	r3, #6
 8008030:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8008032:	f107 0010 	add.w	r0, r7, #16
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2202      	movs	r2, #2
 800803a:	2109      	movs	r1, #9
 800803c:	f000 fdae 	bl	8008b9c <sl_wfx_allocate_command_buffer>
 8008040:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d137      	bne.n	80080b8 <sl_wfx_send_configuration+0xac>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2200      	movs	r2, #0
 800804c:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3304      	adds	r3, #4
 8008052:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fdc6 	bl	8007bea <uint16_identity>
 800805e:	4603      	mov	r3, r0
 8008060:	461a      	mov	r2, r3
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3302      	adds	r3, #2
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	4618      	mov	r0, r3
 8008070:	f013 fabd 	bl	801b5ee <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	b292      	uxth	r2, r2
 800807a:	4619      	mov	r1, r3
 800807c:	2009      	movs	r0, #9
 800807e:	f000 f83d 	bl	80080fc <sl_wfx_send_request>
 8008082:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d116      	bne.n	80080b8 <sl_wfx_send_configuration+0xac>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 800808a:	f107 030c 	add.w	r3, r7, #12
 800808e:	461a      	mov	r2, r3
 8008090:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008094:	2009      	movs	r0, #9
 8008096:	f000 fed5 	bl	8008e44 <sl_wfx_host_wait_for_confirmation>
 800809a:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <sl_wfx_send_configuration+0xac>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fdab 	bl	8007c02 <uint32_identity>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2109      	movs	r1, #9
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fc93 	bl	80089dc <sl_wfx_get_status_code>
 80080b6:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b07      	cmp	r3, #7
 80080bc:	d10d      	bne.n	80080da <sl_wfx_send_configuration+0xce>
    if (sl_wfx_context->used_buffers > 0) {
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <sl_wfx_send_configuration+0xec>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <sl_wfx_send_configuration+0xce>
      sl_wfx_context->used_buffers--;
 80080ca:	4b0b      	ldr	r3, [pc, #44]	@ (80080f8 <sl_wfx_send_configuration+0xec>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80080d2:	3a01      	subs	r2, #1
 80080d4:	b292      	uxth	r2, r2
 80080d6:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <sl_wfx_send_configuration+0xe0>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2202      	movs	r2, #2
 80080e4:	2109      	movs	r1, #9
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fd76 	bl	8008bd8 <sl_wfx_free_command_buffer>
  }
  return result;
 80080ec:	69fb      	ldr	r3, [r7, #28]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000a80 	.word	0x20000a80

080080fc <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
 8008108:	4613      	mov	r3, r2
 800810a:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 800810c:	f001 f84a 	bl	80091a4 <sl_wfx_host_lock>
 8008110:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 8008118:	68f9      	ldr	r1, [r7, #12]
 800811a:	482f      	ldr	r0, [pc, #188]	@ (80081d8 <sl_wfx_send_request+0xdc>)
 800811c:	f001 f830 	bl	8009180 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	e054      	b.n	80081ce <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 8008124:	4b2d      	ldr	r3, [pc, #180]	@ (80081dc <sl_wfx_send_request+0xe0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800812c:	4b2c      	ldr	r3, [pc, #176]	@ (80081e0 <sl_wfx_send_request+0xe4>)
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d304      	bcc.n	800813e <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 8008134:	231d      	movs	r3, #29
 8008136:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d137      	bne.n	80081ae <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	79fa      	ldrb	r2, [r7, #7]
 8008142:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 8008144:	88bb      	ldrh	r3, [r7, #4]
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fd4f 	bl	8007bea <uint16_identity>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b4a      	cmp	r3, #74	@ 0x4a
 8008158:	d00a      	beq.n	8008170 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	2b32      	cmp	r3, #50	@ 0x32
 800815e:	d007      	beq.n	8008170 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fe5c 	bl	8008e20 <sl_wfx_host_setup_waited_event>
 8008168:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11e      	bne.n	80081ae <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	481a      	ldr	r0, [pc, #104]	@ (80081e4 <sl_wfx_send_request+0xe8>)
 800817a:	f001 f801 	bl	8009180 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 800817e:	88bb      	ldrh	r3, [r7, #4]
 8008180:	4619      	mov	r1, r3
 8008182:	6838      	ldr	r0, [r7, #0]
 8008184:	f000 ffee 	bl	8009164 <sl_wfx_host_transmit_frame>
 8008188:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10e      	bne.n	80081ae <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	4812      	ldr	r0, [pc, #72]	@ (80081e4 <sl_wfx_send_request+0xe8>)
 800819a:	f000 fff1 	bl	8009180 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 800819e:	4b0f      	ldr	r3, [pc, #60]	@ (80081dc <sl_wfx_send_request+0xe0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80081a6:	3201      	adds	r2, #1
 80081a8:	b292      	uxth	r2, r2
 80081aa:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 80081ae:	f001 f819 	bl	80091e4 <sl_wfx_host_unlock>
 80081b2:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <sl_wfx_send_request+0xc2>
    result = unlock_result;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	4807      	ldr	r0, [pc, #28]	@ (80081e4 <sl_wfx_send_request+0xe8>)
 80081c8:	f000 ffda 	bl	8009180 <sl_wfx_host_log>
  }
#endif
  return result;
 80081cc:	68fb      	ldr	r3, [r7, #12]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	0801d61c 	.word	0x0801d61c
 80081dc:	20000a80 	.word	0x20000a80
 80081e0:	20000a86 	.word	0x20000a86
 80081e4:	0801d638 	.word	0x0801d638

080081e8 <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b08b      	sub	sp, #44	@ 0x2c
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 80081fa:	f000 ffd3 	bl	80091a4 <sl_wfx_host_lock>
 80081fe:	6278      	str	r0, [r7, #36]	@ 0x24

  if (result != SL_STATUS_OK) {
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 8008206:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008208:	4855      	ldr	r0, [pc, #340]	@ (8008360 <sl_wfx_receive_frame+0x178>)
 800820a:	f000 ffb9 	bl	8009180 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	e0a1      	b.n	8008356 <sl_wfx_receive_frame+0x16e>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d116      	bne.n	8008252 <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	2001      	movs	r0, #1
 8008228:	f7ff fa73 	bl	8007712 <sl_wfx_reg_read_16>
 800822c:	6278      	str	r0, [r7, #36]	@ 0x24
    SL_WFX_ERROR_CHECK(result);
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	d174      	bne.n	800831e <sl_wfx_receive_frame+0x136>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d105      	bne.n	8008252 <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 8008246:	f640 3305 	movw	r3, #2821	@ 0xb05
 800824a:	627b      	str	r3, [r7, #36]	@ 0x24
      SL_WFX_ERROR_CHECK(result);
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d165      	bne.n	800831e <sl_wfx_receive_frame+0x136>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	0b9b      	lsrs	r3, r3, #14
 8008258:	b29b      	uxth	r3, r3
 800825a:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	3302      	adds	r3, #2
 8008260:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 8008262:	7efb      	ldrb	r3, [r7, #27]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d101      	bne.n	800826c <sl_wfx_receive_frame+0x84>
 8008268:	2301      	movs	r3, #1
 800826a:	e000      	b.n	800826e <sl_wfx_receive_frame+0x86>
 800826c:	2302      	movs	r3, #2
 800826e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8008282:	3340      	adds	r3, #64	@ 0x40
 8008284:	e000      	b.n	8008288 <sl_wfx_receive_frame+0xa0>
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800828c:	f107 000c 	add.w	r0, r7, #12
 8008290:	461a      	mov	r2, r3
 8008292:	f000 ff47 	bl	8009124 <sl_wfx_host_allocate_buffer>
 8008296:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	2b00      	cmp	r3, #0
 800829c:	d13f      	bne.n	800831e <sl_wfx_receive_frame+0x136>

  memset(network_rx_buffer, 0, read_length);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	2100      	movs	r1, #0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f013 f8e5 	bl	801b474 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6979      	ldr	r1, [r7, #20]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fa9c 	bl	80077ec <sl_wfx_data_read>
 80082b4:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d130      	bne.n	800831e <sl_wfx_receive_frame+0x136>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 80082bc:	4b29      	ldr	r3, [pc, #164]	@ (8008364 <sl_wfx_receive_frame+0x17c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00c      	beq.n	80082e2 <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	789b      	ldrb	r3, [r3, #2]
 80082cc:	b25b      	sxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db07      	blt.n	80082e2 <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 80082d2:	4b24      	ldr	r3, [pc, #144]	@ (8008364 <sl_wfx_receive_frame+0x17c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80082da:	3a01      	subs	r2, #1
 80082dc:	b292      	uxth	r2, r2
 80082de:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	3301      	adds	r3, #1
 80082f2:	4413      	add	r3, r2
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	430b      	orrs	r3, r1
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	68fc      	ldr	r4, [r7, #12]
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fc6d 	bl	8007bea <uint16_identity>
 8008310:	4603      	mov	r3, r0
 8008312:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fdd4 	bl	8008ec4 <sl_wfx_host_post_event>
 800831c:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <sl_wfx_receive_frame+0x14e>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	789b      	ldrb	r3, [r3, #2]
 800832a:	4619      	mov	r1, r3
 800832c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008330:	461a      	mov	r2, r3
 8008332:	f000 fc51 	bl	8008bd8 <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 8008336:	f000 ff55 	bl	80091e4 <sl_wfx_host_unlock>
 800833a:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <sl_wfx_receive_frame+0x15e>
    result = unlock_result;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	627b      	str	r3, [r7, #36]	@ 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <sl_wfx_receive_frame+0x16c>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 800834c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800834e:	4806      	ldr	r0, [pc, #24]	@ (8008368 <sl_wfx_receive_frame+0x180>)
 8008350:	f000 ff16 	bl	8009180 <sl_wfx_host_log>
  }
#endif
  return result;
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008356:	4618      	mov	r0, r3
 8008358:	372c      	adds	r7, #44	@ 0x2c
 800835a:	46bd      	mov	sp, r7
 800835c:	bd90      	pop	{r4, r7, pc}
 800835e:	bf00      	nop
 8008360:	0801d650 	.word	0x0801d650
 8008364:	20000a80 	.word	0x20000a80
 8008368:	0801d670 	.word	0x0801d670

0800836c <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 8008372:	f001 fc03 	bl	8009b7c <sl_wfx_host_enable_platform_interrupt>
 8008376:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d115      	bne.n	80083aa <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800837e:	463b      	mov	r3, r7
 8008380:	4619      	mov	r1, r3
 8008382:	2000      	movs	r0, #0
 8008384:	f7ff fa01 	bl	800778a <sl_wfx_reg_read_32>
 8008388:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10c      	bne.n	80083aa <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008396:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	4619      	mov	r1, r3
 800839c:	2000      	movs	r0, #0
 800839e:	f7ff fa0e 	bl	80077be <sl_wfx_reg_write_32>
 80083a2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0

  error_handler:
 80083a8:	bf00      	nop
  return result;
 80083aa:	687b      	ldr	r3, [r7, #4]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80083ba:	463b      	mov	r3, r7
 80083bc:	4619      	mov	r1, r3
 80083be:	2000      	movs	r0, #0
 80083c0:	f7ff f9e3 	bl	800778a <sl_wfx_reg_read_32>
 80083c4:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d112      	bne.n	80083f2 <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083d2:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	2000      	movs	r0, #0
 80083da:	f7ff f9f0 	bl	80077be <sl_wfx_reg_write_32>
 80083de:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d105      	bne.n	80083f2 <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 80083e6:	f001 fbd6 	bl	8009b96 <sl_wfx_host_disable_platform_interrupt>
 80083ea:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0

  error_handler:
 80083f0:	bf00      	nop
  return result;
 80083f2:	687b      	ldr	r3, [r7, #4]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8008402:	463b      	mov	r3, r7
 8008404:	4619      	mov	r1, r3
 8008406:	2000      	movs	r0, #0
 8008408:	f7ff f9bf 	bl	800778a <sl_wfx_reg_read_32>
 800840c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800841a:	4619      	mov	r1, r3
 800841c:	2000      	movs	r0, #0
 800841e:	f7ff f9ce 	bl	80077be <sl_wfx_reg_write_32>
 8008422:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0

  error_handler:
 8008428:	bf00      	nop
  return result;
 800842a:	687b      	ldr	r3, [r7, #4]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	4619      	mov	r1, r3
 800843e:	2000      	movs	r0, #0
 8008440:	f7ff f9a3 	bl	800778a <sl_wfx_reg_read_32>
 8008444:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d177      	bne.n	800853c <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 800844c:	493e      	ldr	r1, [pc, #248]	@ (8008548 <sl_wfx_init_chip+0x114>)
 800844e:	2006      	movs	r0, #6
 8008450:	f7ff f9b5 	bl	80077be <sl_wfx_reg_write_32>
 8008454:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d16f      	bne.n	800853c <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 800845c:	493b      	ldr	r1, [pc, #236]	@ (800854c <sl_wfx_init_chip+0x118>)
 800845e:	2006      	movs	r0, #6
 8008460:	f7ff f9ad 	bl	80077be <sl_wfx_reg_write_32>
 8008464:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d167      	bne.n	800853c <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 800846c:	4938      	ldr	r1, [pc, #224]	@ (8008550 <sl_wfx_init_chip+0x11c>)
 800846e:	2006      	movs	r0, #6
 8008470:	f7ff f9a5 	bl	80077be <sl_wfx_reg_write_32>
 8008474:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d15f      	bne.n	800853c <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 800847c:	4935      	ldr	r1, [pc, #212]	@ (8008554 <sl_wfx_init_chip+0x120>)
 800847e:	2006      	movs	r0, #6
 8008480:	f7ff f99d 	bl	80077be <sl_wfx_reg_write_32>
 8008484:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d157      	bne.n	800853c <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 800848c:	4932      	ldr	r1, [pc, #200]	@ (8008558 <sl_wfx_init_chip+0x124>)
 800848e:	2006      	movs	r0, #6
 8008490:	f7ff f995 	bl	80077be <sl_wfx_reg_write_32>
 8008494:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d14f      	bne.n	800853c <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 800849c:	1cbb      	adds	r3, r7, #2
 800849e:	4619      	mov	r1, r3
 80084a0:	2001      	movs	r0, #1
 80084a2:	f7ff f936 	bl	8007712 <sl_wfx_reg_read_16>
 80084a6:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d146      	bne.n	800853c <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 80084ae:	887b      	ldrh	r3, [r7, #2]
 80084b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 80084b8:	887b      	ldrh	r3, [r7, #2]
 80084ba:	4619      	mov	r1, r3
 80084bc:	2001      	movs	r0, #1
 80084be:	f7ff f944 	bl	800774a <sl_wfx_reg_write_16>
 80084c2:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d138      	bne.n	800853c <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 80084ca:	2300      	movs	r3, #0
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	e013      	b.n	80084f8 <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 80084d0:	1cbb      	adds	r3, r7, #2
 80084d2:	4619      	mov	r1, r3
 80084d4:	2001      	movs	r0, #1
 80084d6:	f7ff f91c 	bl	8007712 <sl_wfx_reg_read_16>
 80084da:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12c      	bne.n	800853c <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 80084e2:	887b      	ldrh	r3, [r7, #2]
 80084e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 80084ec:	2001      	movs	r0, #1
 80084ee:	f000 fcdd 	bl	8008eac <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	3301      	adds	r3, #1
 80084f6:	60bb      	str	r3, [r7, #8]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80084fc:	d9e8      	bls.n	80084d0 <sl_wfx_init_chip+0x9c>
 80084fe:	e000      	b.n	8008502 <sl_wfx_init_chip+0xce>
      break;
 8008500:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 8008502:	887b      	ldrh	r3, [r7, #2]
 8008504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 800850c:	2307      	movs	r3, #7
 800850e:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d112      	bne.n	800853c <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	4619      	mov	r1, r3
 800851a:	2000      	movs	r0, #0
 800851c:	f7ff f935 	bl	800778a <sl_wfx_reg_read_32>
 8008520:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d109      	bne.n	800853c <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 8008532:	2301      	movs	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
  }

  error_handler:
 800853a:	bf00      	nop
  return result;
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	07208775 	.word	0x07208775
 800854c:	082ec020 	.word	0x082ec020
 8008550:	093c3c3c 	.word	0x093c3c3c
 8008554:	0b322c44 	.word	0x0b322c44
 8008558:	0ca06497 	.word	0x0ca06497

0800855c <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 8008562:	463b      	mov	r3, r7
 8008564:	4619      	mov	r1, r3
 8008566:	481e      	ldr	r0, [pc, #120]	@ (80085e0 <sl_wfx_download_run_bootloader+0x84>)
 8008568:	f7ff f999 	bl	800789e <sl_wfx_apb_read_32>
 800856c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d12f      	bne.n	80085d4 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008574:	463b      	mov	r3, r7
 8008576:	4619      	mov	r1, r3
 8008578:	2000      	movs	r0, #0
 800857a:	f7ff f906 	bl	800778a <sl_wfx_reg_read_32>
 800857e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d126      	bne.n	80085d4 <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 800858c:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	2000      	movs	r0, #0
 8008594:	f7ff f913 	bl	80077be <sl_wfx_reg_write_32>
 8008598:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d119      	bne.n	80085d4 <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 80085a0:	4910      	ldr	r1, [pc, #64]	@ (80085e4 <sl_wfx_download_run_bootloader+0x88>)
 80085a2:	4811      	ldr	r0, [pc, #68]	@ (80085e8 <sl_wfx_download_run_bootloader+0x8c>)
 80085a4:	f7ff f964 	bl	8007870 <sl_wfx_apb_write_32>
 80085a8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d111      	bne.n	80085d4 <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 80085b0:	463b      	mov	r3, r7
 80085b2:	4619      	mov	r1, r3
 80085b4:	480c      	ldr	r0, [pc, #48]	@ (80085e8 <sl_wfx_download_run_bootloader+0x8c>)
 80085b6:	f7ff f972 	bl	800789e <sl_wfx_apb_read_32>
 80085ba:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d108      	bne.n	80085d4 <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	4a07      	ldr	r2, [pc, #28]	@ (80085e4 <sl_wfx_download_run_bootloader+0x88>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d003      	beq.n	80085d2 <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 80085ca:	2301      	movs	r3, #1
 80085cc:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
  }

  error_handler:
 80085d2:	bf00      	nop
  return result;
 80085d4:	687b      	ldr	r3, [r7, #4]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	0900c010 	.word	0x0900c010
 80085e4:	23abc88e 	.word	0x23abc88e
 80085e8:	09004000 	.word	0x09004000

080085ec <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08c      	sub	sp, #48	@ 0x30
 80085f0:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 80085fa:	f000 faff 	bl	8008bfc <sl_wfx_host_init>
 80085fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 8185 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 8008608:	4984      	ldr	r1, [pc, #528]	@ (800881c <sl_wfx_download_run_firmware+0x230>)
 800860a:	4885      	ldr	r0, [pc, #532]	@ (8008820 <sl_wfx_download_run_firmware+0x234>)
 800860c:	f7ff f930 	bl	8007870 <sl_wfx_apb_write_32>
 8008610:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f040 817c 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 800861a:	2100      	movs	r1, #0
 800861c:	4881      	ldr	r0, [pc, #516]	@ (8008824 <sl_wfx_download_run_firmware+0x238>)
 800861e:	f7ff f927 	bl	8007870 <sl_wfx_apb_write_32>
 8008622:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 8173 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 800862c:	2100      	movs	r1, #0
 800862e:	487e      	ldr	r0, [pc, #504]	@ (8008828 <sl_wfx_download_run_firmware+0x23c>)
 8008630:	f7ff f91e 	bl	8007870 <sl_wfx_apb_write_32>
 8008634:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 816a 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 800863e:	497b      	ldr	r1, [pc, #492]	@ (800882c <sl_wfx_download_run_firmware+0x240>)
 8008640:	4877      	ldr	r0, [pc, #476]	@ (8008820 <sl_wfx_download_run_firmware+0x234>)
 8008642:	f7ff f915 	bl	8007870 <sl_wfx_apb_write_32>
 8008646:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 8161 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 8008650:	2264      	movs	r2, #100	@ 0x64
 8008652:	4977      	ldr	r1, [pc, #476]	@ (8008830 <sl_wfx_download_run_firmware+0x244>)
 8008654:	4877      	ldr	r0, [pc, #476]	@ (8008834 <sl_wfx_download_run_firmware+0x248>)
 8008656:	f000 f96b 	bl	8008930 <sl_wfx_poll_for_value>
 800865a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800865c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 8157 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 8008664:	f107 0310 	add.w	r3, r7, #16
 8008668:	4619      	mov	r1, r3
 800866a:	4873      	ldr	r0, [pc, #460]	@ (8008838 <sl_wfx_download_run_firmware+0x24c>)
 800866c:	f7ff f917 	bl	800789e <sl_wfx_apb_read_32>
 8008670:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	f040 814c 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 800867a:	f107 0310 	add.w	r3, r7, #16
 800867e:	4619      	mov	r1, r3
 8008680:	486e      	ldr	r0, [pc, #440]	@ (800883c <sl_wfx_download_run_firmware+0x250>)
 8008682:	f7ff f90c 	bl	800789e <sl_wfx_apb_read_32>
 8008686:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 8141 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	b2da      	uxtb	r2, r3
 8008696:	4b6a      	ldr	r3, [pc, #424]	@ (8008840 <sl_wfx_download_run_firmware+0x254>)
 8008698:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 800869a:	496a      	ldr	r1, [pc, #424]	@ (8008844 <sl_wfx_download_run_firmware+0x258>)
 800869c:	4860      	ldr	r0, [pc, #384]	@ (8008820 <sl_wfx_download_run_firmware+0x234>)
 800869e:	f7ff f8e7 	bl	8007870 <sl_wfx_apb_write_32>
 80086a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 8133 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 80086ac:	2264      	movs	r2, #100	@ 0x64
 80086ae:	495f      	ldr	r1, [pc, #380]	@ (800882c <sl_wfx_download_run_firmware+0x240>)
 80086b0:	4860      	ldr	r0, [pc, #384]	@ (8008834 <sl_wfx_download_run_firmware+0x248>)
 80086b2:	f000 f93d 	bl	8008930 <sl_wfx_poll_for_value>
 80086b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 8129 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 80086c0:	f04f 31ff 	mov.w	r1, #4294967295
 80086c4:	4860      	ldr	r0, [pc, #384]	@ (8008848 <sl_wfx_download_run_firmware+0x25c>)
 80086c6:	f7ff f8d3 	bl	8007870 <sl_wfx_apb_write_32>
 80086ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f040 811f 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 80086d4:	f107 030c 	add.w	r3, r7, #12
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fae5 	bl	8008ca8 <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b50      	subs	r3, #80	@ 0x50
 80086e2:	4619      	mov	r1, r3
 80086e4:	4859      	ldr	r0, [pc, #356]	@ (800884c <sl_wfx_download_run_firmware+0x260>)
 80086e6:	f7ff f8c3 	bl	8007870 <sl_wfx_apb_write_32>
 80086ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 810f 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	2108      	movs	r1, #8
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fab9 	bl	8008c70 <sl_wfx_host_get_firmware_data>
 80086fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 8105 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 8008708:	4b4d      	ldr	r3, [pc, #308]	@ (8008840 <sl_wfx_download_run_firmware+0x254>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f93c 	bl	800898e <sl_wfx_compare_keysets>
 8008716:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 80f9 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	2140      	movs	r1, #64	@ 0x40
 8008724:	4618      	mov	r0, r3
 8008726:	f000 faa3 	bl	8008c70 <sl_wfx_host_get_firmware_data>
 800872a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800872c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 80ef 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2240      	movs	r2, #64	@ 0x40
 8008738:	4619      	mov	r1, r3
 800873a:	4845      	ldr	r0, [pc, #276]	@ (8008850 <sl_wfx_download_run_firmware+0x264>)
 800873c:	f7ff f878 	bl	8007830 <sl_wfx_apb_write>
 8008740:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	f040 80e4 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 800874a:	1d3b      	adds	r3, r7, #4
 800874c:	2108      	movs	r1, #8
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fa8e 	bl	8008c70 <sl_wfx_host_get_firmware_data>
 8008754:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 80da 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2208      	movs	r2, #8
 8008762:	4619      	mov	r1, r3
 8008764:	483b      	ldr	r0, [pc, #236]	@ (8008854 <sl_wfx_download_run_firmware+0x268>)
 8008766:	f7ff f863 	bl	8007830 <sl_wfx_apb_write>
 800876a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800876c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	f040 80cf 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 8008774:	2101      	movs	r1, #1
 8008776:	4838      	ldr	r0, [pc, #224]	@ (8008858 <sl_wfx_download_run_firmware+0x26c>)
 8008778:	f7ff f87a 	bl	8007870 <sl_wfx_apb_write_32>
 800877c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 80c6 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 8008786:	4935      	ldr	r1, [pc, #212]	@ (800885c <sl_wfx_download_run_firmware+0x270>)
 8008788:	4825      	ldr	r0, [pc, #148]	@ (8008820 <sl_wfx_download_run_firmware+0x234>)
 800878a:	f7ff f871 	bl	8007870 <sl_wfx_apb_write_32>
 800878e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 80bd 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b50      	subs	r3, #80	@ 0x50
 800879c:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	0a9b      	lsrs	r3, r3, #10
 80087a4:	3301      	adds	r3, #1
 80087a6:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 80087a8:	2300      	movs	r3, #0
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ac:	e093      	b.n	80088d6 <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 80087ae:	2300      	movs	r3, #0
 80087b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087b2:	e015      	b.n	80087e0 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6a3a      	ldr	r2, [r7, #32]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 80087be:	d913      	bls.n	80087e8 <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 80087c4:	f107 0308 	add.w	r3, r7, #8
 80087c8:	4619      	mov	r1, r3
 80087ca:	4817      	ldr	r0, [pc, #92]	@ (8008828 <sl_wfx_download_run_firmware+0x23c>)
 80087cc:	f7ff f867 	bl	800789e <sl_wfx_apb_read_32>
 80087d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 80087d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f040 809c 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	3301      	adds	r3, #1
 80087de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	2b63      	cmp	r3, #99	@ 0x63
 80087e4:	d9e6      	bls.n	80087b4 <sl_wfx_download_run_firmware+0x1c8>
 80087e6:	e000      	b.n	80087ea <sl_wfx_download_run_firmware+0x1fe>
        break;
 80087e8:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6a3a      	ldr	r2, [r7, #32]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 80087f4:	d93a      	bls.n	800886c <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 80087f6:	f107 0310 	add.w	r3, r7, #16
 80087fa:	4619      	mov	r1, r3
 80087fc:	480d      	ldr	r0, [pc, #52]	@ (8008834 <sl_wfx_download_run_firmware+0x248>)
 80087fe:	f7ff f84e 	bl	800789e <sl_wfx_apb_read_32>
 8008802:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8008804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 8083 	bne.w	8008912 <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4a13      	ldr	r2, [pc, #76]	@ (800885c <sl_wfx_download_run_firmware+0x270>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d025      	beq.n	8008860 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8008814:	2301      	movs	r3, #1
 8008816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008818:	e025      	b.n	8008866 <sl_wfx_download_run_firmware+0x27a>
 800881a:	bf00      	nop
 800881c:	12345678 	.word	0x12345678
 8008820:	0900c00c 	.word	0x0900c00c
 8008824:	0900c004 	.word	0x0900c004
 8008828:	0900c008 	.word	0x0900c008
 800882c:	87654321 	.word	0x87654321
 8008830:	bd53ef99 	.word	0xbd53ef99
 8008834:	0900c010 	.word	0x0900c010
 8008838:	0900c080 	.word	0x0900c080
 800883c:	0900c0cc 	.word	0x0900c0cc
 8008840:	20000a84 	.word	0x20000a84
 8008844:	a753bd99 	.word	0xa753bd99
 8008848:	09004000 	.word	0x09004000
 800884c:	0900c000 	.word	0x0900c000
 8008850:	0900c014 	.word	0x0900c014
 8008854:	0900c054 	.word	0x0900c054
 8008858:	0900c05c 	.word	0x0900c05c
 800885c:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 8008860:	f640 3302 	movw	r3, #2818	@ 0xb02
 8008864:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d152      	bne.n	8008912 <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800887a:	d902      	bls.n	8008882 <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 800887c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008880:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 8008882:	1d3b      	adds	r3, r7, #4
 8008884:	69f9      	ldr	r1, [r7, #28]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f9f2 	bl	8008c70 <sl_wfx_host_get_firmware_data>
 800888c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 800888e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d13e      	bne.n	8008912 <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800889a:	f103 6310 	add.w	r3, r3, #150994944	@ 0x9000000
 800889e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80088a2:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	4619      	mov	r1, r3
 80088aa:	6978      	ldr	r0, [r7, #20]
 80088ac:	f7fe ffc0 	bl	8007830 <sl_wfx_apb_write>
 80088b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 80088b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d12c      	bne.n	8008912 <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 80088b8:	6a3a      	ldr	r2, [r7, #32]
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 80088c0:	6a39      	ldr	r1, [r7, #32]
 80088c2:	4816      	ldr	r0, [pc, #88]	@ (800891c <sl_wfx_download_run_firmware+0x330>)
 80088c4:	f7fe ffd4 	bl	8007870 <sl_wfx_apb_write_32>
 80088c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d120      	bne.n	8008912 <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	3301      	adds	r3, #1
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	429a      	cmp	r2, r3
 80088dc:	f4ff af67 	bcc.w	80087ae <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 80088e0:	490f      	ldr	r1, [pc, #60]	@ (8008920 <sl_wfx_download_run_firmware+0x334>)
 80088e2:	4810      	ldr	r0, [pc, #64]	@ (8008924 <sl_wfx_download_run_firmware+0x338>)
 80088e4:	f7fe ffc4 	bl	8007870 <sl_wfx_apb_write_32>
 80088e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d110      	bne.n	8008912 <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 80088f0:	2264      	movs	r2, #100	@ 0x64
 80088f2:	490b      	ldr	r1, [pc, #44]	@ (8008920 <sl_wfx_download_run_firmware+0x334>)
 80088f4:	480c      	ldr	r0, [pc, #48]	@ (8008928 <sl_wfx_download_run_firmware+0x33c>)
 80088f6:	f000 f81b 	bl	8008930 <sl_wfx_poll_for_value>
 80088fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d107      	bne.n	8008912 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 8008902:	490a      	ldr	r1, [pc, #40]	@ (800892c <sl_wfx_download_run_firmware+0x340>)
 8008904:	4807      	ldr	r0, [pc, #28]	@ (8008924 <sl_wfx_download_run_firmware+0x338>)
 8008906:	f7fe ffb3 	bl	8007870 <sl_wfx_apb_write_32>
 800890a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800890c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890e:	2b00      	cmp	r3, #0

  error_handler:
 8008910:	bf00      	nop
  return result;
 8008912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008914:	4618      	mov	r0, r3
 8008916:	3730      	adds	r7, #48	@ 0x30
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	0900c004 	.word	0x0900c004
 8008920:	d4c64a99 	.word	0xd4c64a99
 8008924:	0900c00c 	.word	0x0900c00c
 8008928:	0900c010 	.word	0x0900c010
 800892c:	174fc882 	.word	0x174fc882

08008930 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 8008940:	e013      	b.n	800896a <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 8008942:	f107 0310 	add.w	r3, r7, #16
 8008946:	4619      	mov	r1, r3
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7fe ffa8 	bl	800789e <sl_wfx_apb_read_32>
 800894e:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d116      	bne.n	8008984 <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	d009      	beq.n	8008972 <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 800895e:	2001      	movs	r0, #1
 8008960:	f000 faa4 	bl	8008eac <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3b01      	subs	r3, #1
 8008968:	607b      	str	r3, [r7, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e8      	bne.n	8008942 <sl_wfx_poll_for_value+0x12>
 8008970:	e000      	b.n	8008974 <sl_wfx_poll_for_value+0x44>
      break;
 8008972:	bf00      	nop
    }
  }
  if (value != polled_value) {
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	429a      	cmp	r2, r3
 800897a:	d002      	beq.n	8008982 <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 800897c:	2307      	movs	r3, #7
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e000      	b.n	8008984 <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 8008982:	bf00      	nop
  return result;
 8008984:	697b      	ldr	r3, [r7, #20]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	4603      	mov	r3, r0
 8008996:	6039      	str	r1, [r7, #0]
 8008998:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	799b      	ldrb	r3, [r3, #6]
 800899e:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	79db      	ldrb	r3, [r3, #7]
 80089a4:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 80089a6:	2300      	movs	r3, #0
 80089a8:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	2210      	movs	r2, #16
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f011 fed8 	bl	801a768 <strtoul>
 80089b8:	4603      	mov	r3, r0
 80089ba:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 80089bc:	7afa      	ldrb	r2, [r7, #11]
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d102      	bne.n	80089ca <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	e002      	b.n	80089d0 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 80089ca:	f640 3301 	movw	r3, #2817	@ 0xb01
 80089ce:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80089d0:	68fb      	ldr	r3, [r7, #12]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d05b      	beq.n	8008aaa <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f241 2256 	movw	r2, #4694	@ 0x1256
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d045      	beq.n	8008a88 <sl_wfx_get_status_code+0xac>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f241 2256 	movw	r2, #4694	@ 0x1256
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d84e      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f241 2234 	movw	r2, #4660	@ 0x1234
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d038      	beq.n	8008a82 <sl_wfx_get_status_code+0xa6>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f241 2234 	movw	r2, #4660	@ 0x1234
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d844      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2baf      	cmp	r3, #175	@ 0xaf
 8008a1e:	d033      	beq.n	8008a88 <sl_wfx_get_status_code+0xac>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2baf      	cmp	r3, #175	@ 0xaf
 8008a24:	d83e      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b9e      	cmp	r3, #158	@ 0x9e
 8008a2a:	d02a      	beq.n	8008a82 <sl_wfx_get_status_code+0xa6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b9e      	cmp	r3, #158	@ 0x9e
 8008a30:	d838      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b8d      	cmp	r3, #141	@ 0x8d
 8008a36:	d027      	beq.n	8008a88 <sl_wfx_get_status_code+0xac>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b8d      	cmp	r3, #141	@ 0x8d
 8008a3c:	d832      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b7c      	cmp	r3, #124	@ 0x7c
 8008a42:	d021      	beq.n	8008a88 <sl_wfx_get_status_code+0xac>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b7c      	cmp	r3, #124	@ 0x7c
 8008a48:	d82c      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b6b      	cmp	r3, #107	@ 0x6b
 8008a4e:	d01b      	beq.n	8008a88 <sl_wfx_get_status_code+0xac>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b6b      	cmp	r3, #107	@ 0x6b
 8008a54:	d826      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	d80f      	bhi.n	8008a7c <sl_wfx_get_status_code+0xa0>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d820      	bhi.n	8008aa4 <sl_wfx_get_status_code+0xc8>
 8008a62:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <sl_wfx_get_status_code+0x8c>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a83 	.word	0x08008a83
 8008a6c:	08008a89 	.word	0x08008a89
 8008a70:	08008a8f 	.word	0x08008a8f
 8008a74:	08008a95 	.word	0x08008a95
 8008a78:	08008a9d 	.word	0x08008a9d
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008a80:	d110      	bne.n	8008aa4 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
        break;
 8008a86:	e075      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
        break;
 8008a8c:	e072      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008a8e:	2321      	movs	r3, #33	@ 0x21
 8008a90:	60fb      	str	r3, [r7, #12]
        break;
 8008a92:	e06f      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008a94:	f640 3304 	movw	r3, #2820	@ 0xb04
 8008a98:	60fb      	str	r3, [r7, #12]
        break;
 8008a9a:	e06b      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8008a9c:	f640 3303 	movw	r3, #2819	@ 0xb03
 8008aa0:	60fb      	str	r3, [r7, #12]
        break;
 8008aa2:	e067      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]
        break;
 8008aa8:	e064      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b14      	cmp	r3, #20
 8008aae:	d85e      	bhi.n	8008b6e <sl_wfx_get_status_code+0x192>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <sl_wfx_get_status_code+0xdc>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008b13 	.word	0x08008b13
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b21 	.word	0x08008b21
 8008ac8:	08008b27 	.word	0x08008b27
 8008acc:	08008b2f 	.word	0x08008b2f
 8008ad0:	08008b37 	.word	0x08008b37
 8008ad4:	08008b3f 	.word	0x08008b3f
 8008ad8:	08008b47 	.word	0x08008b47
 8008adc:	08008b4f 	.word	0x08008b4f
 8008ae0:	08008b57 	.word	0x08008b57
 8008ae4:	08008b6f 	.word	0x08008b6f
 8008ae8:	08008b6f 	.word	0x08008b6f
 8008aec:	08008b6f 	.word	0x08008b6f
 8008af0:	08008b6f 	.word	0x08008b6f
 8008af4:	08008b6f 	.word	0x08008b6f
 8008af8:	08008b6f 	.word	0x08008b6f
 8008afc:	08008b6f 	.word	0x08008b6f
 8008b00:	08008b6f 	.word	0x08008b6f
 8008b04:	08008b5f 	.word	0x08008b5f
 8008b08:	08008b67 	.word	0x08008b67
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]
        break;
 8008b10:	e030      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008b12:	2321      	movs	r3, #33	@ 0x21
 8008b14:	60fb      	str	r3, [r7, #12]
        break;
 8008b16:	e02d      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 8008b18:	f640 3318 	movw	r3, #2840	@ 0xb18
 8008b1c:	60fb      	str	r3, [r7, #12]
        break;
 8008b1e:	e029      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 8008b20:	2301      	movs	r3, #1
 8008b22:	60fb      	str	r3, [r7, #12]
        break;
 8008b24:	e026      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 8008b26:	f640 3319 	movw	r3, #2841	@ 0xb19
 8008b2a:	60fb      	str	r3, [r7, #12]
        break;
 8008b2c:	e022      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008b2e:	f640 3304 	movw	r3, #2820	@ 0xb04
 8008b32:	60fb      	str	r3, [r7, #12]
        break;
 8008b34:	e01e      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 8008b36:	f640 331a 	movw	r3, #2842	@ 0xb1a
 8008b3a:	60fb      	str	r3, [r7, #12]
        break;
 8008b3c:	e01a      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 8008b3e:	f640 331b 	movw	r3, #2843	@ 0xb1b
 8008b42:	60fb      	str	r3, [r7, #12]
        break;
 8008b44:	e016      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 8008b46:	f640 331c 	movw	r3, #2844	@ 0xb1c
 8008b4a:	60fb      	str	r3, [r7, #12]
        break;
 8008b4c:	e012      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 8008b4e:	f640 331d 	movw	r3, #2845	@ 0xb1d
 8008b52:	60fb      	str	r3, [r7, #12]
        break;
 8008b54:	e00e      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 8008b56:	f640 331e 	movw	r3, #2846	@ 0xb1e
 8008b5a:	60fb      	str	r3, [r7, #12]
        break;
 8008b5c:	e00a      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 8008b5e:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8008b62:	60fb      	str	r3, [r7, #12]
        break;
 8008b64:	e006      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 8008b66:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8008b6a:	60fb      	str	r3, [r7, #12]
        break;
 8008b6c:	e002      	b.n	8008b74 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]
        break;
 8008b72:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d008      	beq.n	8008b8c <sl_wfx_get_status_code+0x1b0>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f640 3204 	movw	r2, #2820	@ 0xb04
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	4804      	ldr	r0, [pc, #16]	@ (8008b98 <sl_wfx_get_status_code+0x1bc>)
 8008b88:	f000 fafa 	bl	8009180 <sl_wfx_host_log>
  }
#endif
  return result;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	0801d6f8 	.word	0x0801d6f8

08008b9c <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fab6 	bl	8009124 <sl_wfx_host_allocate_buffer>
 8008bb8:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f012 fc53 	bl	801b474 <memset>
  }

  error_handler:
  return result;
 8008bce:	697b      	ldr	r3, [r7, #20]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	4619      	mov	r1, r3
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 faac 	bl	8009148 <sl_wfx_host_free_buffer>
 8008bf0:	4603      	mov	r3, r0
  }
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 8008c00:	4b16      	ldr	r3, [pc, #88]	@ (8008c5c <sl_wfx_host_init+0x60>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 8008c06:	2203      	movs	r2, #3
 8008c08:	2100      	movs	r1, #0
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	f001 fdb2 	bl	800a774 <xQueueGenericCreate>
 8008c10:	4603      	mov	r3, r0
 8008c12:	4a13      	ldr	r2, [pc, #76]	@ (8008c60 <sl_wfx_host_init+0x64>)
 8008c14:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8008c16:	2203      	movs	r2, #3
 8008c18:	2100      	movs	r1, #0
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	f001 fdaa 	bl	800a774 <xQueueGenericCreate>
 8008c20:	4603      	mov	r3, r0
 8008c22:	4a10      	ldr	r2, [pc, #64]	@ (8008c64 <sl_wfx_host_init+0x68>)
 8008c24:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8008c26:	4b0f      	ldr	r3, [pc, #60]	@ (8008c64 <sl_wfx_host_init+0x68>)
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	f001 fe28 	bl	800a884 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8008c34:	2203      	movs	r2, #3
 8008c36:	2100      	movs	r1, #0
 8008c38:	2001      	movs	r0, #1
 8008c3a:	f001 fd9b 	bl	800a774 <xQueueGenericCreate>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4a09      	ldr	r2, [pc, #36]	@ (8008c68 <sl_wfx_host_init+0x6c>)
 8008c42:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8008c44:	2200      	movs	r2, #0
 8008c46:	2101      	movs	r1, #1
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f001 fd93 	bl	800a774 <xQueueGenericCreate>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4a06      	ldr	r2, [pc, #24]	@ (8008c6c <sl_wfx_host_init+0x70>)
 8008c52:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200013c8 	.word	0x200013c8
 8008c60:	200013c4 	.word	0x200013c4
 8008c64:	200013c0 	.word	0x200013c0
 8008c68:	200013bc 	.word	0x200013bc
 8008c6c:	200013b8 	.word	0x200013b8

08008c70 <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008c7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ca0 <sl_wfx_host_get_firmware_data+0x30>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a09      	ldr	r2, [pc, #36]	@ (8008ca4 <sl_wfx_host_get_firmware_data+0x34>)
 8008c80:	441a      	add	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008c86:	4b06      	ldr	r3, [pc, #24]	@ (8008ca0 <sl_wfx_host_get_firmware_data+0x30>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4a04      	ldr	r2, [pc, #16]	@ (8008ca0 <sl_wfx_host_get_firmware_data+0x30>)
 8008c90:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	200013c8 	.word	0x200013c8
 8008ca4:	08020c48 	.word	0x08020c48

08008ca8 <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a04      	ldr	r2, [pc, #16]	@ (8008cc4 <sl_wfx_host_get_firmware_size+0x1c>)
 8008cb4:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	0004bc50 	.word	0x0004bc50

08008cc8 <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d10 <sl_wfx_host_get_pds_data+0x48>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008cdc:	2206      	movs	r2, #6
 8008cde:	4619      	mov	r1, r3
 8008ce0:	480c      	ldr	r0, [pc, #48]	@ (8008d14 <sl_wfx_host_get_pds_data+0x4c>)
 8008ce2:	f012 fbcf 	bl	801b484 <strncmp>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 8008cec:	887b      	ldrh	r3, [r7, #2]
 8008cee:	4a0a      	ldr	r2, [pc, #40]	@ (8008d18 <sl_wfx_host_get_pds_data+0x50>)
 8008cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	e005      	b.n	8008d06 <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 8008cfa:	887b      	ldrh	r3, [r7, #2]
 8008cfc:	4a07      	ldr	r2, [pc, #28]	@ (8008d1c <sl_wfx_host_get_pds_data+0x54>)
 8008cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000a80 	.word	0x20000a80
 8008d14:	0801d994 	.word	0x0801d994
 8008d18:	08020c30 	.word	0x08020c30
 8008d1c:	08020c18 	.word	0x08020c18

08008d20 <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008d28:	4b0b      	ldr	r3, [pc, #44]	@ (8008d58 <sl_wfx_host_get_pds_size+0x38>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008d30:	2206      	movs	r2, #6
 8008d32:	4619      	mov	r1, r3
 8008d34:	4809      	ldr	r0, [pc, #36]	@ (8008d5c <sl_wfx_host_get_pds_size+0x3c>)
 8008d36:	f012 fba5 	bl	801b484 <strncmp>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2206      	movs	r2, #6
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	e002      	b.n	8008d4e <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2206      	movs	r2, #6
 8008d4c:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000a80 	.word	0x20000a80
 8008d5c:	0801d994 	.word	0x0801d994

08008d60 <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008d74:	2200      	movs	r2, #0
 8008d76:	2101      	movs	r1, #1
 8008d78:	4808      	ldr	r0, [pc, #32]	@ (8008d9c <sl_wfx_host_reset_chip+0x2c>)
 8008d7a:	f7fc fc1b 	bl	80055b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008d7e:	2064      	movs	r0, #100	@ 0x64
 8008d80:	f7fb fc3c 	bl	80045fc <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008d84:	2201      	movs	r2, #1
 8008d86:	2101      	movs	r1, #1
 8008d88:	4804      	ldr	r0, [pc, #16]	@ (8008d9c <sl_wfx_host_reset_chip+0x2c>)
 8008d8a:	f7fc fc13 	bl	80055b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008d8e:	2064      	movs	r0, #100	@ 0x64
 8008d90:	f7fb fc34 	bl	80045fc <HAL_Delay>

  return SL_STATUS_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40020800 	.word	0x40020800

08008da0 <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 8008db0:	2201      	movs	r2, #1
 8008db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008db6:	4807      	ldr	r0, [pc, #28]	@ (8008dd4 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008db8:	f7fc fbfc 	bl	80055b4 <HAL_GPIO_WritePin>
 8008dbc:	e005      	b.n	8008dca <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008dc4:	4803      	ldr	r0, [pc, #12]	@ (8008dd4 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008dc6:	f7fc fbf5 	bl	80055b4 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40020400 	.word	0x40020400

08008dd8 <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <sl_wfx_host_wait_for_wake_up+0x24>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 f860 	bl	800aea8 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 8008de8:	4b04      	ldr	r3, [pc, #16]	@ (8008dfc <sl_wfx_host_wait_for_wake_up+0x24>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2101      	movs	r1, #1
 8008dee:	4618      	mov	r0, r3
 8008df0:	f002 f85a 	bl	800aea8 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	200013bc 	.word	0x200013bc

08008e00 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	603a      	str	r2, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 8008e10:	f640 3308 	movw	r3, #2824	@ 0xb08
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8008e2a:	4a05      	ldr	r2, [pc, #20]	@ (8008e40 <sl_wfx_host_setup_waited_event+0x20>)
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	200013c8 	.word	0x200013c8

08008e44 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e01b      	b.n	8008e90 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 25) == pdTRUE) {
 8008e58:	4b12      	ldr	r3, [pc, #72]	@ (8008ea4 <sl_wfx_host_wait_for_confirmation+0x60>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f107 0113 	add.w	r1, r7, #19
 8008e60:	2219      	movs	r2, #25
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 ff3e 	bl	800ace4 <xQueueReceive>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d10d      	bne.n	8008e8a <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 8008e6e:	7cfb      	ldrb	r3, [r7, #19]
 8008e70:	7bfa      	ldrb	r2, [r7, #15]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d109      	bne.n	8008e8a <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea8 <sl_wfx_host_wait_for_confirmation+0x64>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	e007      	b.n	8008e9a <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d3df      	bcc.n	8008e58 <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008e98:	2307      	movs	r3, #7
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200013b8 	.word	0x200013b8
 8008ea8:	20000a80 	.word	0x20000a80

08008eac <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 f80d 	bl	8009ed4 <osDelay>
  
  return SL_STATUS_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	@ 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	789b      	ldrb	r3, [r3, #2]
 8008ed0:	3bc3      	subs	r3, #195	@ 0xc3
 8008ed2:	2b21      	cmp	r3, #33	@ 0x21
 8008ed4:	f200 80f3 	bhi.w	80090be <sl_wfx_host_post_event+0x1fa>
 8008ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <sl_wfx_host_post_event+0x1c>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f69 	.word	0x08008f69
 8008ee4:	08008f71 	.word	0x08008f71
 8008ee8:	08008f79 	.word	0x08008f79
 8008eec:	080090bf 	.word	0x080090bf
 8008ef0:	08008f81 	.word	0x08008f81
 8008ef4:	080090bf 	.word	0x080090bf
 8008ef8:	080090bf 	.word	0x080090bf
 8008efc:	08008f89 	.word	0x08008f89
 8008f00:	08008f9f 	.word	0x08008f9f
 8008f04:	08008fa7 	.word	0x08008fa7
 8008f08:	08008faf 	.word	0x08008faf
 8008f0c:	08008fb7 	.word	0x08008fb7
 8008f10:	08008fbf 	.word	0x08008fbf
 8008f14:	080090bf 	.word	0x080090bf
 8008f18:	080090bf 	.word	0x080090bf
 8008f1c:	08008fc7 	.word	0x08008fc7
 8008f20:	080090bf 	.word	0x080090bf
 8008f24:	080090bf 	.word	0x080090bf
 8008f28:	080090bf 	.word	0x080090bf
 8008f2c:	080090bf 	.word	0x080090bf
 8008f30:	080090bf 	.word	0x080090bf
 8008f34:	080090bf 	.word	0x080090bf
 8008f38:	080090bf 	.word	0x080090bf
 8008f3c:	080090bf 	.word	0x080090bf
 8008f40:	080090bf 	.word	0x080090bf
 8008f44:	080090bf 	.word	0x080090bf
 8008f48:	080090bf 	.word	0x080090bf
 8008f4c:	080090bf 	.word	0x080090bf
 8008f50:	080090bf 	.word	0x080090bf
 8008f54:	08008fcf 	.word	0x08008fcf
 8008f58:	080090bf 	.word	0x080090bf
 8008f5c:	080090bf 	.word	0x080090bf
 8008f60:	080090bf 	.word	0x080090bf
 8008f64:	0800904b 	.word	0x0800904b
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fa41 	bl	80093f0 <sl_wfx_connect_callback>
      break;
 8008f6e:	e0a6      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fb4f 	bl	8009614 <sl_wfx_disconnect_callback>
      break;
 8008f76:	e0a2      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fb89 	bl	8009690 <sl_wfx_start_ap_callback>
      break;
 8008f7e:	e09e      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fbdf 	bl	8009744 <sl_wfx_stop_ap_callback>
      break;
 8008f86:	e09a      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	791b      	ldrb	r3, [r3, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f040 8093 	bne.w	80090bc <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7fa f986 	bl	80032a8 <sl_wfx_host_received_frame_callback>
      }
      break;
 8008f9c:	e08e      	b.n	80090bc <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f92e 	bl	8009200 <sl_wfx_scan_result_callback>
      break;
 8008fa4:	e08b      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f9ee 	bl	8009388 <sl_wfx_scan_complete_callback>
      break;
 8008fac:	e087      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fc04 	bl	80097bc <sl_wfx_ap_client_connected_callback>
      break;
 8008fb4:	e083      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fc3e 	bl	8009838 <sl_wfx_ap_client_rejected_callback>
      break;
 8008fbc:	e07f      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fc70 	bl	80098a4 <sl_wfx_ap_client_disconnected_callback>
      break;
 8008fc4:	e07b      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fca2 	bl	8009910 <sl_wfx_ext_auth_callback>
      break;
 8008fcc:	e077      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	627b      	str	r3, [r7, #36]	@ 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4849      	ldr	r0, [pc, #292]	@ (8009104 <sl_wfx_host_post_event+0x240>)
 8008fde:	f012 f8e7 	bl	801b1b0 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008fe6:	e029      	b.n	800903c <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 8008fe8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008fea:	4619      	mov	r1, r3
 8008fec:	4846      	ldr	r0, [pc, #280]	@ (8009108 <sl_wfx_host_post_event+0x244>)
 8008fee:	f012 f8df 	bl	801b1b0 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8008ff8:	e00d      	b.n	8009016 <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	4619      	mov	r1, r3
 8009000:	4842      	ldr	r0, [pc, #264]	@ (800910c <sl_wfx_host_post_event+0x248>)
 8009002:	f012 f8d5 	bl	801b1b0 <iprintf>
            exception_tmp++;
 8009006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009008:	3301      	adds	r3, #1
 800900a:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 800900c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009010:	3301      	adds	r3, #1
 8009012:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8009016:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d808      	bhi.n	8009030 <sl_wfx_host_post_event+0x16c>
 800901e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009020:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009024:	4413      	add	r3, r2
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	8812      	ldrh	r2, [r2, #0]
 800902a:	b292      	uxth	r2, r2
 800902c:	4293      	cmp	r3, r2
 800902e:	dbe4      	blt.n	8008ffa <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 8009030:	4837      	ldr	r0, [pc, #220]	@ (8009110 <sl_wfx_host_post_event+0x24c>)
 8009032:	f012 f925 	bl	801b280 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8009036:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009038:	3310      	adds	r3, #16
 800903a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009044:	429a      	cmp	r2, r3
 8009046:	d3cf      	bcc.n	8008fe8 <sl_wfx_host_post_event+0x124>
      }
      break;
 8009048:	e039      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	4619      	mov	r1, r3
 8009058:	482e      	ldr	r0, [pc, #184]	@ (8009114 <sl_wfx_host_post_event+0x250>)
 800905a:	f012 f8a9 	bl	801b1b0 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800905e:	2300      	movs	r3, #0
 8009060:	837b      	strh	r3, [r7, #26]
 8009062:	e024      	b.n	80090ae <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8009064:	8b7b      	ldrh	r3, [r7, #26]
 8009066:	4619      	mov	r1, r3
 8009068:	4827      	ldr	r0, [pc, #156]	@ (8009108 <sl_wfx_host_post_event+0x244>)
 800906a:	f012 f8a1 	bl	801b1b0 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 800906e:	2300      	movs	r3, #0
 8009070:	767b      	strb	r3, [r7, #25]
 8009072:	e00b      	b.n	800908c <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4619      	mov	r1, r3
 800907a:	4824      	ldr	r0, [pc, #144]	@ (800910c <sl_wfx_host_post_event+0x248>)
 800907c:	f012 f898 	bl	801b1b0 <iprintf>
            error_tmp++;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3301      	adds	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8009086:	7e7b      	ldrb	r3, [r7, #25]
 8009088:	3301      	adds	r3, #1
 800908a:	767b      	strb	r3, [r7, #25]
 800908c:	7e7b      	ldrb	r3, [r7, #25]
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d807      	bhi.n	80090a2 <sl_wfx_host_post_event+0x1de>
 8009092:	8b7a      	ldrh	r2, [r7, #26]
 8009094:	7e7b      	ldrb	r3, [r7, #25]
 8009096:	4413      	add	r3, r2
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	8812      	ldrh	r2, [r2, #0]
 800909c:	b292      	uxth	r2, r2
 800909e:	4293      	cmp	r3, r2
 80090a0:	dbe8      	blt.n	8009074 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 80090a2:	481b      	ldr	r0, [pc, #108]	@ (8009110 <sl_wfx_host_post_event+0x24c>)
 80090a4:	f012 f8ec 	bl	801b280 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 80090a8:	8b7b      	ldrh	r3, [r7, #26]
 80090aa:	3310      	adds	r3, #16
 80090ac:	837b      	strh	r3, [r7, #26]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8b7a      	ldrh	r2, [r7, #26]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d3d4      	bcc.n	8009064 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 80090ba:	e000      	b.n	80090be <sl_wfx_host_post_event+0x1fa>
      break;
 80090bc:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 80090be:	4b16      	ldr	r3, [pc, #88]	@ (8009118 <sl_wfx_host_post_event+0x254>)
 80090c0:	791a      	ldrb	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	789b      	ldrb	r3, [r3, #2]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d117      	bne.n	80090fa <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d4:	d211      	bcs.n	80090fa <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 80090d6:	4b11      	ldr	r3, [pc, #68]	@ (800911c <sl_wfx_host_post_event+0x258>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 80090e2:	461a      	mov	r2, r3
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	f012 fa82 	bl	801b5ee <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 80090ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <sl_wfx_host_post_event+0x25c>)
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	1c99      	adds	r1, r3, #2
 80090f2:	2302      	movs	r3, #2
 80090f4:	2200      	movs	r2, #0
 80090f6:	f001 fbc5 	bl	800a884 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3728      	adds	r7, #40	@ 0x28
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	0801d99c 	.word	0x0801d99c
 8009108:	0801d9b8 	.word	0x0801d9b8
 800910c:	0801d9c4 	.word	0x0801d9c4
 8009110:	0801d9cc 	.word	0x0801d9cc
 8009114:	0801d9d0 	.word	0x0801d9d0
 8009118:	200013c8 	.word	0x200013c8
 800911c:	20000a80 	.word	0x20000a80
 8009120:	200013b8 	.word	0x200013b8

08009124 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	460b      	mov	r3, r1
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f004 f8c2 	bl	800d2bc <pvPortMalloc>
 8009138:	4602      	mov	r2, r0
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f004 f97f 	bl	800d458 <vPortFree>
  
  return SL_STATUS_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fe fb4c 	bl	800780e <sl_wfx_data_write>
 8009176:	4603      	mov	r3, r0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 8009180:	b40f      	push	{r0, r1, r2, r3}
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	6938      	ldr	r0, [r7, #16]
 8009192:	f012 f8c1 	bl	801b318 <viprintf>
  va_end(valist);
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091a0:	b004      	add	sp, #16
 80091a2:	4770      	bx	lr

080091a4 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 80091aa:	2307      	movs	r3, #7
 80091ac:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 80091ae:	4b0b      	ldr	r3, [pc, #44]	@ (80091dc <sl_wfx_host_lock+0x38>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 fe76 	bl	800aea8 <xQueueSemaphoreTake>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d102      	bne.n	80091c8 <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	e004      	b.n	80091d2 <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 80091c8:	4805      	ldr	r0, [pc, #20]	@ (80091e0 <sl_wfx_host_lock+0x3c>)
 80091ca:	f012 f859 	bl	801b280 <puts>
	      status = SL_STATUS_TIMEOUT;
 80091ce:	2307      	movs	r3, #7
 80091d0:	607b      	str	r3, [r7, #4]
	    }

  return status;
 80091d2:	687b      	ldr	r3, [r7, #4]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200013c0 	.word	0x200013c0
 80091e0:	0801d9e8 	.word	0x0801d9e8

080091e4 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 80091e8:	4b04      	ldr	r3, [pc, #16]	@ (80091fc <sl_wfx_host_unlock+0x18>)
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	2300      	movs	r3, #0
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	f001 fb47 	bl	800a884 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	200013c0 	.word	0x200013c0

08009200 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 8009200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009204:	b08a      	sub	sp, #40	@ 0x28
 8009206:	af08      	add	r7, sp, #32
 8009208:	6078      	str	r0, [r7, #4]
  scan_count++;
 800920a:	4b5b      	ldr	r3, [pc, #364]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	b2da      	uxtb	r2, r3
 8009212:	4b59      	ldr	r3, [pc, #356]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 8009214:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 8009216:	4b59      	ldr	r3, [pc, #356]	@ (800937c <sl_wfx_scan_result_callback+0x17c>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d03e      	beq.n	800929c <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 800921e:	4b56      	ldr	r3, [pc, #344]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009228:	b29b      	uxth	r3, r3
    printf(
 800922a:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3330      	adds	r3, #48	@ 0x30
 8009230:	781b      	ldrb	r3, [r3, #0]
    printf(
 8009232:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8009238:	b29b      	uxth	r3, r3
 800923a:	3bdc      	subs	r3, #220	@ 0xdc
 800923c:	b29b      	uxth	r3, r3
 800923e:	b21b      	sxth	r3, r3
    printf(
 8009240:	0fda      	lsrs	r2, r3, #31
 8009242:	4413      	add	r3, r2
 8009244:	105b      	asrs	r3, r3, #1
 8009246:	b21b      	sxth	r3, r3
 8009248:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    printf(
 8009250:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    printf(
 8009258:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    printf(
 8009260:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    printf(
 8009268:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    printf(
 8009270:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    printf(
 8009278:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3308      	adds	r3, #8
    printf(
 800927e:	9307      	str	r3, [sp, #28]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	9306      	str	r3, [sp, #24]
 8009284:	9605      	str	r6, [sp, #20]
 8009286:	9504      	str	r5, [sp, #16]
 8009288:	9403      	str	r4, [sp, #12]
 800928a:	9002      	str	r0, [sp, #8]
 800928c:	9101      	str	r1, [sp, #4]
 800928e:	9200      	str	r2, [sp, #0]
 8009290:	4643      	mov	r3, r8
 8009292:	4672      	mov	r2, lr
 8009294:	4661      	mov	r1, ip
 8009296:	483a      	ldr	r0, [pc, #232]	@ (8009380 <sl_wfx_scan_result_callback+0x180>)
 8009298:	f011 ff8a 	bl	801b1b0 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 800929c:	4b36      	ldr	r3, [pc, #216]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b32      	cmp	r3, #50	@ 0x32
 80092a2:	d863      	bhi.n	800936c <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 80092a4:	4b34      	ldr	r3, [pc, #208]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	1e5a      	subs	r2, r3, #1
 80092aa:	4936      	ldr	r1, [pc, #216]	@ (8009384 <sl_wfx_scan_result_callback+0x184>)
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	18ca      	adds	r2, r1, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4610      	mov	r0, r2
 80092be:	f103 0420 	add.w	r4, r3, #32
 80092c2:	4602      	mov	r2, r0
 80092c4:	4619      	mov	r1, r3
 80092c6:	f8d1 c000 	ldr.w	ip, [r1]
 80092ca:	684e      	ldr	r6, [r1, #4]
 80092cc:	688d      	ldr	r5, [r1, #8]
 80092ce:	68c9      	ldr	r1, [r1, #12]
 80092d0:	f8c2 c000 	str.w	ip, [r2]
 80092d4:	6056      	str	r6, [r2, #4]
 80092d6:	6095      	str	r5, [r2, #8]
 80092d8:	60d1      	str	r1, [r2, #12]
 80092da:	3310      	adds	r3, #16
 80092dc:	3010      	adds	r0, #16
 80092de:	42a3      	cmp	r3, r4
 80092e0:	d1ef      	bne.n	80092c2 <sl_wfx_scan_result_callback+0xc2>
 80092e2:	4602      	mov	r2, r0
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 80092e8:	4b23      	ldr	r3, [pc, #140]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092f2:	b298      	uxth	r0, r3
 80092f4:	4923      	ldr	r1, [pc, #140]	@ (8009384 <sl_wfx_scan_result_callback+0x184>)
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	440b      	add	r3, r1
 8009302:	332a      	adds	r3, #42	@ 0x2a
 8009304:	4602      	mov	r2, r0
 8009306:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 8009308:	4b1b      	ldr	r3, [pc, #108]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	491d      	ldr	r1, [pc, #116]	@ (8009384 <sl_wfx_scan_result_callback+0x184>)
 8009310:	4613      	mov	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	4413      	add	r3, r2
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	440b      	add	r3, r1
 800931c:	332c      	adds	r3, #44	@ 0x2c
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8009324:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 8009326:	4b14      	ldr	r3, [pc, #80]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	1e5a      	subs	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8009330:	b298      	uxth	r0, r3
 8009332:	4914      	ldr	r1, [pc, #80]	@ (8009384 <sl_wfx_scan_result_callback+0x184>)
 8009334:	4613      	mov	r3, r2
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	4413      	add	r3, r2
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	440b      	add	r3, r1
 8009340:	3328      	adds	r3, #40	@ 0x28
 8009342:	4602      	mov	r2, r0
 8009344:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 8009348:	4b0b      	ldr	r3, [pc, #44]	@ (8009378 <sl_wfx_scan_result_callback+0x178>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	1e5a      	subs	r2, r3, #1
 800934e:	4613      	mov	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4413      	add	r3, r2
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	3320      	adds	r3, #32
 800935a:	4a0a      	ldr	r2, [pc, #40]	@ (8009384 <sl_wfx_scan_result_callback+0x184>)
 800935c:	4413      	add	r3, r2
 800935e:	1d18      	adds	r0, r3, #4
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3328      	adds	r3, #40	@ 0x28
 8009364:	2206      	movs	r2, #6
 8009366:	4619      	mov	r1, r3
 8009368:	f012 f941 	bl	801b5ee <memcpy>
  }
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009376:	bf00      	nop
 8009378:	200013b6 	.word	0x200013b6
 800937c:	200000a9 	.word	0x200000a9
 8009380:	0801da04 	.word	0x0801da04
 8009384:	20000a88 	.word	0x20000a88

08009388 <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 8009390:	4b14      	ldr	r3, [pc, #80]	@ (80093e4 <sl_wfx_scan_complete_callback+0x5c>)
 8009392:	781a      	ldrb	r2, [r3, #0]
 8009394:	4b14      	ldr	r3, [pc, #80]	@ (80093e8 <sl_wfx_scan_complete_callback+0x60>)
 8009396:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 8009398:	4b12      	ldr	r3, [pc, #72]	@ (80093e4 <sl_wfx_scan_complete_callback+0x5c>)
 800939a:	2200      	movs	r2, #0
 800939c:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80093a4:	461a      	mov	r2, r3
 80093a6:	f107 0308 	add.w	r3, r7, #8
 80093aa:	2101      	movs	r1, #1
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff feb9 	bl	8009124 <sl_wfx_host_allocate_buffer>
 80093b2:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10f      	bne.n	80093da <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 80093ba:	68b8      	ldr	r0, [r7, #8]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	f012 f912 	bl	801b5ee <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80093ca:	4b08      	ldr	r3, [pc, #32]	@ (80093ec <sl_wfx_scan_complete_callback+0x64>)
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f107 0108 	add.w	r1, r7, #8
 80093d2:	2300      	movs	r3, #0
 80093d4:	2200      	movs	r2, #0
 80093d6:	f001 fa55 	bl	800a884 <xQueueGenericSend>
  }
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	200013b6 	.word	0x200013b6
 80093e8:	200013b7 	.word	0x200013b7
 80093ec:	200013d0 	.word	0x200013d0

080093f0 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 80093f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b0a      	cmp	r3, #10
 80093fe:	f200 80d5 	bhi.w	80095ac <sl_wfx_connect_callback+0x1bc>
 8009402:	a201      	add	r2, pc, #4	@ (adr r2, 8009408 <sl_wfx_connect_callback+0x18>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009435 	.word	0x08009435
 800940c:	080095ad 	.word	0x080095ad
 8009410:	080095ad 	.word	0x080095ad
 8009414:	080095ad 	.word	0x080095ad
 8009418:	080095ad 	.word	0x080095ad
 800941c:	080095ad 	.word	0x080095ad
 8009420:	08009493 	.word	0x08009493
 8009424:	080094d7 	.word	0x080094d7
 8009428:	08009505 	.word	0x08009505
 800942c:	08009533 	.word	0x08009533
 8009430:	0800956f 	.word	0x0800956f
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 8009434:	496b      	ldr	r1, [pc, #428]	@ (80095e4 <sl_wfx_connect_callback+0x1f4>)
 8009436:	486c      	ldr	r0, [pc, #432]	@ (80095e8 <sl_wfx_connect_callback+0x1f8>)
 8009438:	f011 feba 	bl	801b1b0 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 800943c:	4b6b      	ldr	r3, [pc, #428]	@ (80095ec <sl_wfx_connect_callback+0x1fc>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8009444:	4b69      	ldr	r3, [pc, #420]	@ (80095ec <sl_wfx_connect_callback+0x1fc>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f042 0202 	orr.w	r2, r2, #2
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 8009458:	461a      	mov	r2, r3
 800945a:	f107 0308 	add.w	r3, r7, #8
 800945e:	2101      	movs	r1, #1
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff fe5f 	bl	8009124 <sl_wfx_host_allocate_buffer>
 8009466:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 80b5 	bne.w	80095da <sl_wfx_connect_callback+0x1ea>
        memcpy(buffer, (void *)connect, connect->header.length);
 8009470:	68b8      	ldr	r0, [r7, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	f012 f8b7 	bl	801b5ee <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 8009480:	4b5b      	ldr	r3, [pc, #364]	@ (80095f0 <sl_wfx_connect_callback+0x200>)
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	f107 0108 	add.w	r1, r7, #8
 8009488:	2300      	movs	r3, #0
 800948a:	2200      	movs	r2, #0
 800948c:	f001 f9fa 	bl	800a884 <xQueueGenericSend>
      }
      break;
 8009490:	e0a3      	b.n	80095da <sl_wfx_connect_callback+0x1ea>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 8009492:	4b58      	ldr	r3, [pc, #352]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 8009494:	4a58      	ldr	r2, [pc, #352]	@ (80095f8 <sl_wfx_connect_callback+0x208>)
 8009496:	4614      	mov	r4, r2
 8009498:	469c      	mov	ip, r3
 800949a:	f104 0e20 	add.w	lr, r4, #32
 800949e:	4665      	mov	r5, ip
 80094a0:	4626      	mov	r6, r4
 80094a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094a4:	6028      	str	r0, [r5, #0]
 80094a6:	6069      	str	r1, [r5, #4]
 80094a8:	60aa      	str	r2, [r5, #8]
 80094aa:	60eb      	str	r3, [r5, #12]
 80094ac:	3410      	adds	r4, #16
 80094ae:	f10c 0c10 	add.w	ip, ip, #16
 80094b2:	4574      	cmp	r4, lr
 80094b4:	d1f3      	bne.n	800949e <sl_wfx_connect_callback+0xae>
 80094b6:	4662      	mov	r2, ip
 80094b8:	4623      	mov	r3, r4
 80094ba:	cb03      	ldmia	r3!, {r0, r1}
 80094bc:	6010      	str	r0, [r2, #0]
 80094be:	6051      	str	r1, [r2, #4]
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 80094c4:	484b      	ldr	r0, [pc, #300]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 80094c6:	f011 fe73 	bl	801b1b0 <iprintf>
      printf("\r\n");
 80094ca:	484c      	ldr	r0, [pc, #304]	@ (80095fc <sl_wfx_connect_callback+0x20c>)
 80094cc:	f011 fed8 	bl	801b280 <puts>
      wifi_autoconnexion_init();
 80094d0:	f7f7 feca 	bl	8001268 <wifi_autoconnexion_init>
      break;
 80094d4:	e082      	b.n	80095dc <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 80094d6:	4a47      	ldr	r2, [pc, #284]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 80094d8:	4b49      	ldr	r3, [pc, #292]	@ (8009600 <sl_wfx_connect_callback+0x210>)
 80094da:	4615      	mov	r5, r2
 80094dc:	461c      	mov	r4, r3
 80094de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094e0:	6028      	str	r0, [r5, #0]
 80094e2:	6069      	str	r1, [r5, #4]
 80094e4:	60aa      	str	r2, [r5, #8]
 80094e6:	60eb      	str	r3, [r5, #12]
 80094e8:	8823      	ldrh	r3, [r4, #0]
 80094ea:	78a2      	ldrb	r2, [r4, #2]
 80094ec:	822b      	strh	r3, [r5, #16]
 80094ee:	4613      	mov	r3, r2
 80094f0:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 80094f2:	4840      	ldr	r0, [pc, #256]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 80094f4:	f011 fe5c 	bl	801b1b0 <iprintf>
      printf("\r\n");
 80094f8:	4840      	ldr	r0, [pc, #256]	@ (80095fc <sl_wfx_connect_callback+0x20c>)
 80094fa:	f011 fec1 	bl	801b280 <puts>
      wifi_autoconnexion_init();
 80094fe:	f7f7 feb3 	bl	8001268 <wifi_autoconnexion_init>
      break;
 8009502:	e06b      	b.n	80095dc <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 8009504:	4a3b      	ldr	r2, [pc, #236]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 8009506:	4b3f      	ldr	r3, [pc, #252]	@ (8009604 <sl_wfx_connect_callback+0x214>)
 8009508:	4615      	mov	r5, r2
 800950a:	461c      	mov	r4, r3
 800950c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800950e:	6028      	str	r0, [r5, #0]
 8009510:	6069      	str	r1, [r5, #4]
 8009512:	60aa      	str	r2, [r5, #8]
 8009514:	60eb      	str	r3, [r5, #12]
 8009516:	8823      	ldrh	r3, [r4, #0]
 8009518:	78a2      	ldrb	r2, [r4, #2]
 800951a:	822b      	strh	r3, [r5, #16]
 800951c:	4613      	mov	r3, r2
 800951e:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8009520:	4834      	ldr	r0, [pc, #208]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 8009522:	f011 fe45 	bl	801b1b0 <iprintf>
      printf("\r\n");
 8009526:	4835      	ldr	r0, [pc, #212]	@ (80095fc <sl_wfx_connect_callback+0x20c>)
 8009528:	f011 feaa 	bl	801b280 <puts>
      wifi_autoconnexion_init();
 800952c:	f7f7 fe9c 	bl	8001268 <wifi_autoconnexion_init>
      break;
 8009530:	e054      	b.n	80095dc <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 8009532:	4b30      	ldr	r3, [pc, #192]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 8009534:	4a34      	ldr	r2, [pc, #208]	@ (8009608 <sl_wfx_connect_callback+0x218>)
 8009536:	4614      	mov	r4, r2
 8009538:	469c      	mov	ip, r3
 800953a:	f104 0e20 	add.w	lr, r4, #32
 800953e:	4665      	mov	r5, ip
 8009540:	4626      	mov	r6, r4
 8009542:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009544:	6028      	str	r0, [r5, #0]
 8009546:	6069      	str	r1, [r5, #4]
 8009548:	60aa      	str	r2, [r5, #8]
 800954a:	60eb      	str	r3, [r5, #12]
 800954c:	3410      	adds	r4, #16
 800954e:	f10c 0c10 	add.w	ip, ip, #16
 8009552:	4574      	cmp	r4, lr
 8009554:	d1f3      	bne.n	800953e <sl_wfx_connect_callback+0x14e>
 8009556:	4662      	mov	r2, ip
 8009558:	4623      	mov	r3, r4
 800955a:	cb03      	ldmia	r3!, {r0, r1}
 800955c:	6010      	str	r0, [r2, #0]
 800955e:	6051      	str	r1, [r2, #4]
      printf(event_log);
 8009560:	4824      	ldr	r0, [pc, #144]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 8009562:	f011 fe25 	bl	801b1b0 <iprintf>
      printf("\r\n");
 8009566:	4825      	ldr	r0, [pc, #148]	@ (80095fc <sl_wfx_connect_callback+0x20c>)
 8009568:	f011 fe8a 	bl	801b280 <puts>
      break;
 800956c:	e036      	b.n	80095dc <sl_wfx_connect_callback+0x1ec>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 800956e:	4b21      	ldr	r3, [pc, #132]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 8009570:	4a26      	ldr	r2, [pc, #152]	@ (800960c <sl_wfx_connect_callback+0x21c>)
 8009572:	4614      	mov	r4, r2
 8009574:	469c      	mov	ip, r3
 8009576:	f104 0e20 	add.w	lr, r4, #32
 800957a:	4665      	mov	r5, ip
 800957c:	4626      	mov	r6, r4
 800957e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009580:	6028      	str	r0, [r5, #0]
 8009582:	6069      	str	r1, [r5, #4]
 8009584:	60aa      	str	r2, [r5, #8]
 8009586:	60eb      	str	r3, [r5, #12]
 8009588:	3410      	adds	r4, #16
 800958a:	f10c 0c10 	add.w	ip, ip, #16
 800958e:	4574      	cmp	r4, lr
 8009590:	d1f3      	bne.n	800957a <sl_wfx_connect_callback+0x18a>
 8009592:	4662      	mov	r2, ip
 8009594:	4623      	mov	r3, r4
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 800959a:	4816      	ldr	r0, [pc, #88]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 800959c:	f011 fe08 	bl	801b1b0 <iprintf>
      printf("\r\n");
 80095a0:	4816      	ldr	r0, [pc, #88]	@ (80095fc <sl_wfx_connect_callback+0x20c>)
 80095a2:	f011 fe6d 	bl	801b280 <puts>
      wifi_autoconnexion_init();
 80095a6:	f7f7 fe5f 	bl	8001268 <wifi_autoconnexion_init>
      break;
 80095aa:	e017      	b.n	80095dc <sl_wfx_connect_callback+0x1ec>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 80095ac:	4a11      	ldr	r2, [pc, #68]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 80095ae:	4b18      	ldr	r3, [pc, #96]	@ (8009610 <sl_wfx_connect_callback+0x220>)
 80095b0:	4615      	mov	r5, r2
 80095b2:	461c      	mov	r4, r3
 80095b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095b6:	6028      	str	r0, [r5, #0]
 80095b8:	6069      	str	r1, [r5, #4]
 80095ba:	60aa      	str	r2, [r5, #8]
 80095bc:	60eb      	str	r3, [r5, #12]
 80095be:	cc03      	ldmia	r4!, {r0, r1}
 80095c0:	6128      	str	r0, [r5, #16]
 80095c2:	6169      	str	r1, [r5, #20]
 80095c4:	7823      	ldrb	r3, [r4, #0]
 80095c6:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 80095c8:	480a      	ldr	r0, [pc, #40]	@ (80095f4 <sl_wfx_connect_callback+0x204>)
 80095ca:	f011 fdf1 	bl	801b1b0 <iprintf>
      printf("\r\n");
 80095ce:	480b      	ldr	r0, [pc, #44]	@ (80095fc <sl_wfx_connect_callback+0x20c>)
 80095d0:	f011 fe56 	bl	801b280 <puts>
      wifi_autoconnexion_init();
 80095d4:	f7f7 fe48 	bl	8001268 <wifi_autoconnexion_init>
    }
  }
}
 80095d8:	e000      	b.n	80095dc <sl_wfx_connect_callback+0x1ec>
      break;
 80095da:	bf00      	nop
}
 80095dc:	bf00      	nop
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e4:	0801da3c 	.word	0x0801da3c
 80095e8:	0801da4c 	.word	0x0801da4c
 80095ec:	20000a80 	.word	0x20000a80
 80095f0:	200013d0 	.word	0x200013d0
 80095f4:	200008e8 	.word	0x200008e8
 80095f8:	0801da68 	.word	0x0801da68
 80095fc:	0801d9cc 	.word	0x0801d9cc
 8009600:	0801da94 	.word	0x0801da94
 8009604:	0801daa8 	.word	0x0801daa8
 8009608:	0801dabc 	.word	0x0801dabc
 800960c:	0801dae4 	.word	0x0801dae4
 8009610:	0801db08 	.word	0x0801db08

08009614 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	895b      	ldrh	r3, [r3, #10]
 8009620:	b29b      	uxth	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	4817      	ldr	r0, [pc, #92]	@ (8009684 <sl_wfx_disconnect_callback+0x70>)
 8009626:	f011 fdc3 	bl	801b1b0 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 800962a:	4b17      	ldr	r3, [pc, #92]	@ (8009688 <sl_wfx_disconnect_callback+0x74>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8009632:	4b15      	ldr	r3, [pc, #84]	@ (8009688 <sl_wfx_disconnect_callback+0x74>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0202 	bic.w	r2, r2, #2
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009646:	461a      	mov	r2, r3
 8009648:	f107 0308 	add.w	r3, r7, #8
 800964c:	2101      	movs	r1, #1
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fd68 	bl	8009124 <sl_wfx_host_allocate_buffer>
 8009654:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10f      	bne.n	800967c <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 800965c:	68b8      	ldr	r0, [r7, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	f011 ffc1 	bl	801b5ee <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800966c:	4b07      	ldr	r3, [pc, #28]	@ (800968c <sl_wfx_disconnect_callback+0x78>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	2300      	movs	r3, #0
 8009676:	2200      	movs	r2, #0
 8009678:	f001 f904 	bl	800a884 <xQueueGenericSend>
  }
}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	0801db24 	.word	0x0801db24
 8009688:	20000a80 	.word	0x20000a80
 800968c:	200013d0 	.word	0x200013d0

08009690 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 8009690:	b5b0      	push	{r4, r5, r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d130      	bne.n	8009702 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 80096a0:	4820      	ldr	r0, [pc, #128]	@ (8009724 <sl_wfx_start_ap_callback+0x94>)
 80096a2:	f011 fded 	bl	801b280 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 80096a6:	4920      	ldr	r1, [pc, #128]	@ (8009728 <sl_wfx_start_ap_callback+0x98>)
 80096a8:	4820      	ldr	r0, [pc, #128]	@ (800972c <sl_wfx_start_ap_callback+0x9c>)
 80096aa:	f011 fd81 	bl	801b1b0 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 80096ae:	4b20      	ldr	r3, [pc, #128]	@ (8009730 <sl_wfx_start_ap_callback+0xa0>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80096b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009730 <sl_wfx_start_ap_callback+0xa0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 0204 	orr.w	r2, r2, #4
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 80096ca:	461a      	mov	r2, r3
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	2101      	movs	r1, #1
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fd26 	bl	8009124 <sl_wfx_host_allocate_buffer>
 80096d8:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11c      	bne.n	800971a <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	f011 ff7f 	bl	801b5ee <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 80096f0:	4b10      	ldr	r3, [pc, #64]	@ (8009734 <sl_wfx_start_ap_callback+0xa4>)
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	f107 0108 	add.w	r1, r7, #8
 80096f8:	2300      	movs	r3, #0
 80096fa:	2200      	movs	r2, #0
 80096fc:	f001 f8c2 	bl	800a884 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 8009700:	e00b      	b.n	800971a <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 8009702:	480d      	ldr	r0, [pc, #52]	@ (8009738 <sl_wfx_start_ap_callback+0xa8>)
 8009704:	f011 fdbc 	bl	801b280 <puts>
    strcpy(event_log, "AP start failed");
 8009708:	4a0c      	ldr	r2, [pc, #48]	@ (800973c <sl_wfx_start_ap_callback+0xac>)
 800970a:	4b0d      	ldr	r3, [pc, #52]	@ (8009740 <sl_wfx_start_ap_callback+0xb0>)
 800970c:	4614      	mov	r4, r2
 800970e:	461d      	mov	r5, r3
 8009710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009712:	6020      	str	r0, [r4, #0]
 8009714:	6061      	str	r1, [r4, #4]
 8009716:	60a2      	str	r2, [r4, #8]
 8009718:	60e3      	str	r3, [r4, #12]
}
 800971a:	bf00      	nop
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bdb0      	pop	{r4, r5, r7, pc}
 8009722:	bf00      	nop
 8009724:	0801db38 	.word	0x0801db38
 8009728:	20000068 	.word	0x20000068
 800972c:	0801db44 	.word	0x0801db44
 8009730:	20000a80 	.word	0x20000a80
 8009734:	200013d0 	.word	0x200013d0
 8009738:	0801db60 	.word	0x0801db60
 800973c:	200008e8 	.word	0x200008e8
 8009740:	0801db74 	.word	0x0801db74

08009744 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 800974c:	4818      	ldr	r0, [pc, #96]	@ (80097b0 <sl_wfx_stop_ap_callback+0x6c>)
 800974e:	f011 fd97 	bl	801b280 <puts>
  dhcpserver_clear_stored_mac();
 8009752:	f7f8 fd73 	bl	800223c <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 8009756:	4b17      	ldr	r3, [pc, #92]	@ (80097b4 <sl_wfx_stop_ap_callback+0x70>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800975e:	4b15      	ldr	r3, [pc, #84]	@ (80097b4 <sl_wfx_stop_ap_callback+0x70>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0204 	bic.w	r2, r2, #4
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009772:	461a      	mov	r2, r3
 8009774:	f107 0308 	add.w	r3, r7, #8
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fcd2 	bl	8009124 <sl_wfx_host_allocate_buffer>
 8009780:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10f      	bne.n	80097a8 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 8009788:	68b8      	ldr	r0, [r7, #8]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	b29b      	uxth	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	f011 ff2b 	bl	801b5ee <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009798:	4b07      	ldr	r3, [pc, #28]	@ (80097b8 <sl_wfx_stop_ap_callback+0x74>)
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	2300      	movs	r3, #0
 80097a2:	2200      	movs	r2, #0
 80097a4:	f001 f86e 	bl	800a884 <xQueueGenericSend>
  }
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	0801db84 	.word	0x0801db84
 80097b4:	20000a80 	.word	0x20000a80
 80097b8:	200013d0 	.word	0x200013d0

080097bc <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 80097bc:	b5b0      	push	{r4, r5, r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af04      	add	r7, sp, #16
 80097c2:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097c8:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097ce:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097d4:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097da:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097e0:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	9101      	str	r1, [sp, #4]
 80097ea:	9200      	str	r2, [sp, #0]
 80097ec:	462b      	mov	r3, r5
 80097ee:	4622      	mov	r2, r4
 80097f0:	4601      	mov	r1, r0
 80097f2:	480b      	ldr	r0, [pc, #44]	@ (8009820 <sl_wfx_ap_client_connected_callback+0x64>)
 80097f4:	f011 fcdc 	bl	801b1b0 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 80097f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009824 <sl_wfx_ap_client_connected_callback+0x68>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	4619      	mov	r1, r3
 80097fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <sl_wfx_ap_client_connected_callback+0x6c>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	4b09      	ldr	r3, [pc, #36]	@ (800982c <sl_wfx_ap_client_connected_callback+0x70>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	4b09      	ldr	r3, [pc, #36]	@ (8009830 <sl_wfx_ap_client_connected_callback+0x74>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	4603      	mov	r3, r0
 8009812:	4808      	ldr	r0, [pc, #32]	@ (8009834 <sl_wfx_ap_client_connected_callback+0x78>)
 8009814:	f011 fccc 	bl	801b1b0 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bdb0      	pop	{r4, r5, r7, pc}
 8009820:	0801db94 	.word	0x0801db94
 8009824:	20000096 	.word	0x20000096
 8009828:	20000097 	.word	0x20000097
 800982c:	20000098 	.word	0x20000098
 8009830:	20000099 	.word	0x20000099
 8009834:	0801dbcc 	.word	0x0801dbcc

08009838 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 8009838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800983a:	b089      	sub	sp, #36	@ 0x24
 800983c:	af04      	add	r7, sp, #16
 800983e:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	1d1a      	adds	r2, r3, #4
 8009844:	f107 0308 	add.w	r3, r7, #8
 8009848:	6810      	ldr	r0, [r2, #0]
 800984a:	6018      	str	r0, [r3, #0]
 800984c:	8892      	ldrh	r2, [r2, #4]
 800984e:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	4618      	mov	r0, r3
 8009856:	f7f8 fb33 	bl	8001ec0 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	895b      	ldrh	r3, [r3, #10]
 800985e:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009860:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009866:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800986c:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009872:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009878:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800987e:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009884:	9303      	str	r3, [sp, #12]
 8009886:	9002      	str	r0, [sp, #8]
 8009888:	9101      	str	r1, [sp, #4]
 800988a:	9200      	str	r2, [sp, #0]
 800988c:	4633      	mov	r3, r6
 800988e:	462a      	mov	r2, r5
 8009890:	4621      	mov	r1, r4
 8009892:	4803      	ldr	r0, [pc, #12]	@ (80098a0 <sl_wfx_ap_client_rejected_callback+0x68>)
 8009894:	f011 fc8c 	bl	801b1b0 <iprintf>
}
 8009898:	bf00      	nop
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a0:	0801dc00 	.word	0x0801dc00

080098a4 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 80098a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a6:	b089      	sub	sp, #36	@ 0x24
 80098a8:	af04      	add	r7, sp, #16
 80098aa:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	6810      	ldr	r0, [r2, #0]
 80098b6:	6018      	str	r0, [r3, #0]
 80098b8:	8892      	ldrh	r2, [r2, #4]
 80098ba:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f8 fafd 	bl	8001ec0 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	895b      	ldrh	r3, [r3, #10]
 80098ca:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098cc:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098d2:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098d8:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098de:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098e4:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098ea:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	9002      	str	r0, [sp, #8]
 80098f4:	9101      	str	r1, [sp, #4]
 80098f6:	9200      	str	r2, [sp, #0]
 80098f8:	4633      	mov	r3, r6
 80098fa:	462a      	mov	r2, r5
 80098fc:	4621      	mov	r1, r4
 80098fe:	4803      	ldr	r0, [pc, #12]	@ (800990c <sl_wfx_ap_client_disconnected_callback+0x68>)
 8009900:	f011 fc56 	bl	801b1b0 <iprintf>
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990c:	0801dc44 	.word	0x0801dc44

08009910 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800991e:	461a      	mov	r2, r3
 8009920:	f107 0308 	add.w	r3, r7, #8
 8009924:	2101      	movs	r1, #1
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fbfc 	bl	8009124 <sl_wfx_host_allocate_buffer>
 800992c:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10f      	bne.n	8009954 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 8009934:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
    memcpy(buffer,
 800993c:	461a      	mov	r2, r3
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	f011 fe55 	bl	801b5ee <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009944:	4b05      	ldr	r3, [pc, #20]	@ (800995c <sl_wfx_ext_auth_callback+0x4c>)
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	2300      	movs	r3, #0
 800994e:	2200      	movs	r2, #0
 8009950:	f000 ff98 	bl	800a884 <xQueueGenericSend>
  }
}
 8009954:	bf00      	nop
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	200013d0 	.word	0x200013d0

08009960 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 8009960:	b5b0      	push	{r4, r5, r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 8009966:	2203      	movs	r2, #3
 8009968:	2100      	movs	r1, #0
 800996a:	2001      	movs	r0, #1
 800996c:	f000 ff02 	bl	800a774 <xQueueGenericCreate>
 8009970:	4603      	mov	r3, r0
 8009972:	4a0d      	ldr	r2, [pc, #52]	@ (80099a8 <wifi_events_start+0x48>)
 8009974:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 8009976:	4b0d      	ldr	r3, [pc, #52]	@ (80099ac <wifi_events_start+0x4c>)
 8009978:	1d3c      	adds	r4, r7, #4
 800997a:	461d      	mov	r5, r3
 800997c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800997e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 8009984:	1d3b      	adds	r3, r7, #4
 8009986:	2100      	movs	r1, #0
 8009988:	4618      	mov	r0, r3
 800998a:	f000 fa70 	bl	8009e6e <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 800998e:	2200      	movs	r2, #0
 8009990:	2104      	movs	r1, #4
 8009992:	200a      	movs	r0, #10
 8009994:	f000 feee 	bl	800a774 <xQueueGenericCreate>
 8009998:	4603      	mov	r3, r0
 800999a:	4a05      	ldr	r2, [pc, #20]	@ (80099b0 <wifi_events_start+0x50>)
 800999c:	6013      	str	r3, [r2, #0]
}
 800999e:	bf00      	nop
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bdb0      	pop	{r4, r5, r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200013d4 	.word	0x200013d4
 80099ac:	0801dc98 	.word	0x0801dc98
 80099b0:	200013d0 	.word	0x200013d0

080099b4 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 80099bc:	4b22      	ldr	r3, [pc, #136]	@ (8009a48 <wifi_events_task_entry+0x94>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f107 0108 	add.w	r1, r7, #8
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 f98b 	bl	800ace4 <xQueueReceive>
 80099ce:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d1f2      	bne.n	80099bc <wifi_events_task_entry+0x8>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0ef      	beq.n	80099bc <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	789b      	ldrb	r3, [r3, #2]
 80099e0:	3bc3      	subs	r3, #195	@ 0xc3
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	d82a      	bhi.n	8009a3c <wifi_events_task_entry+0x88>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <wifi_events_task_entry+0x38>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a1b 	.word	0x08009a1b
 80099f4:	08009a21 	.word	0x08009a21
 80099f8:	08009a3d 	.word	0x08009a3d
 80099fc:	08009a27 	.word	0x08009a27
 8009a00:	08009a3d 	.word	0x08009a3d
 8009a04:	08009a3d 	.word	0x08009a3d
 8009a08:	08009a3d 	.word	0x08009a3d
 8009a0c:	08009a3d 	.word	0x08009a3d
 8009a10:	08009a2d 	.word	0x08009a2d
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 8009a14:	f7f9 fcd4 	bl	80033c0 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8009a18:	e010      	b.n	8009a3c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 8009a1a:	f7f9 fcef 	bl	80033fc <lwip_set_sta_link_down>
          break;
 8009a1e:	e00d      	b.n	8009a3c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 8009a20:	f7f9 fd0a 	bl	8003438 <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 8009a24:	e00a      	b.n	8009a3c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 8009a26:	f7f9 fd1d 	bl	8003464 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8009a2a:	e007      	b.n	8009a3c <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 8009a2c:	4b07      	ldr	r3, [pc, #28]	@ (8009a4c <wifi_events_task_entry+0x98>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	2300      	movs	r3, #0
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	f000 ff25 	bl	800a884 <xQueueGenericSend>
          break;
 8009a3a:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fb81 	bl	8009148 <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 8009a46:	e7b9      	b.n	80099bc <wifi_events_task_entry+0x8>
 8009a48:	200013d0 	.word	0x200013d0
 8009a4c:	200013c4 	.word	0x200013c4

08009a50 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 8009a54:	f000 f8a8 	bl	8009ba8 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 8009a58:	2203      	movs	r2, #3
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	f000 fe89 	bl	800a774 <xQueueGenericCreate>
 8009a62:	4603      	mov	r3, r0
 8009a64:	4a05      	ldr	r2, [pc, #20]	@ (8009a7c <sl_wfx_host_init_bus+0x2c>)
 8009a66:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 8009a68:	4b04      	ldr	r3, [pc, #16]	@ (8009a7c <sl_wfx_host_init_bus+0x2c>)
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	f000 ff07 	bl	800a884 <xQueueGenericSend>
  return SL_STATUS_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	200014f0 	.word	0x200014f0

08009a80 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 8009a84:	4b04      	ldr	r3, [pc, #16]	@ (8009a98 <sl_wfx_host_deinit_bus+0x18>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fac9 	bl	800a020 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 8009a8e:	f000 f8c1 	bl	8009c14 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200014f0 	.word	0x200014f0

08009a9c <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2110      	movs	r1, #16
 8009aa4:	4802      	ldr	r0, [pc, #8]	@ (8009ab0 <sl_wfx_host_spi_cs_assert+0x14>)
 8009aa6:	f7fb fd85 	bl	80055b4 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	40020000 	.word	0x40020000

08009ab4 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8009ab8:	2201      	movs	r2, #1
 8009aba:	2110      	movs	r1, #16
 8009abc:	4802      	ldr	r0, [pc, #8]	@ (8009ac8 <sl_wfx_host_spi_cs_deassert+0x14>)
 8009abe:	f7fb fd79 	bl	80055b4 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	40020000 	.word	0x40020000

08009acc <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607b      	str	r3, [r7, #4]
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
 8009ada:	4613      	mov	r3, r2
 8009adc:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	bf0c      	ite	eq
 8009ae8:	2301      	moveq	r3, #1
 8009aea:	2300      	movne	r3, #0
 8009aec:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009aee:	4b21      	ldr	r3, [pc, #132]	@ (8009b74 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f04f 31ff 	mov.w	r1, #4294967295
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 f9d6 	bl	800aea8 <xQueueSemaphoreTake>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d120      	bne.n	8009b44 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 8009b02:	89ba      	ldrh	r2, [r7, #12]
 8009b04:	2301      	movs	r3, #1
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	481b      	ldr	r0, [pc, #108]	@ (8009b78 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009b0a:	f7fc fada 	bl	80060c2 <HAL_SPI_Transmit>
    if (is_read) {
 8009b0e:	7cfb      	ldrb	r3, [r7, #19]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009b14:	8c3b      	ldrh	r3, [r7, #32]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4817      	ldr	r0, [pc, #92]	@ (8009b78 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009b1c:	f7fc fcc4 	bl	80064a8 <HAL_SPI_Receive_DMA>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d110      	bne.n	8009b48 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	e00d      	b.n	8009b48 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009b2c:	8c3b      	ldrh	r3, [r7, #32]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	4811      	ldr	r0, [pc, #68]	@ (8009b78 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009b34:	f7fc fc02 	bl	800633c <HAL_SPI_Transmit_DMA>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d104      	bne.n	8009b48 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
 8009b42:	e001      	b.n	8009b48 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 8009b44:	2307      	movs	r3, #7
 8009b46:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009b48:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 f9a9 	bl	800aea8 <xQueueSemaphoreTake>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d106      	bne.n	8009b6a <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 8009b5c:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	2300      	movs	r3, #0
 8009b62:	2200      	movs	r2, #0
 8009b64:	2100      	movs	r1, #0
 8009b66:	f000 fe8d 	bl	800a884 <xQueueGenericSend>
  }

  return result;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	200014f0 	.word	0x200014f0
 8009b78:	200013d8 	.word	0x200013d8

08009b7c <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8009b80:	2200      	movs	r2, #0
 8009b82:	210a      	movs	r1, #10
 8009b84:	2028      	movs	r0, #40	@ 0x28
 8009b86:	f7fa fe5c 	bl	8004842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009b8a:	2028      	movs	r0, #40	@ 0x28
 8009b8c:	f7fa fe75 	bl	800487a <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 8009b96:	b580      	push	{r7, lr}
 8009b98:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8009b9a:	2028      	movs	r0, #40	@ 0x28
 8009b9c:	f7fa fe7b 	bl	8004896 <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009bac:	4b17      	ldr	r3, [pc, #92]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bae:	4a18      	ldr	r2, [pc, #96]	@ (8009c10 <MX_SPI1_Init+0x68>)
 8009bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009bb2:	4b16      	ldr	r3, [pc, #88]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009bba:	4b14      	ldr	r3, [pc, #80]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009bc0:	4b12      	ldr	r3, [pc, #72]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bc6:	4b11      	ldr	r3, [pc, #68]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bda:	4b0c      	ldr	r3, [pc, #48]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009be0:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009be6:	4b09      	ldr	r3, [pc, #36]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bec:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009bf2:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bf4:	220a      	movs	r2, #10
 8009bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009bf8:	4804      	ldr	r0, [pc, #16]	@ (8009c0c <MX_SPI1_Init+0x64>)
 8009bfa:	f7fc f9b1 	bl	8005f60 <HAL_SPI_Init>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009c04:	f7f9 ffd0 	bl	8003ba8 <Error_Handler>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	200013d8 	.word	0x200013d8
 8009c10:	40013000 	.word	0x40013000

08009c14 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 8009c18:	4805      	ldr	r0, [pc, #20]	@ (8009c30 <MX_SPI1_DeInit+0x1c>)
 8009c1a:	f7fa ff21 	bl	8004a60 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 8009c1e:	4805      	ldr	r0, [pc, #20]	@ (8009c34 <MX_SPI1_DeInit+0x20>)
 8009c20:	f7fa ff1e 	bl	8004a60 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 8009c24:	4804      	ldr	r0, [pc, #16]	@ (8009c38 <MX_SPI1_DeInit+0x24>)
 8009c26:	f7fc fa24 	bl	8006072 <HAL_SPI_DeInit>
}
 8009c2a:	bf00      	nop
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20001490 	.word	0x20001490
 8009c34:	20001430 	.word	0x20001430
 8009c38:	200013d8 	.word	0x200013d8

08009c3c <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 8009c3c:	b5b0      	push	{r4, r5, r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 8009c42:	f000 fad4 	bl	800a1ee <xEventGroupCreate>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4a10      	ldr	r2, [pc, #64]	@ (8009c8c <sl_wfx_task_start+0x50>)
 8009c4a:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	f000 fe01 	bl	800a854 <xQueueCreateMutex>
 8009c52:	4603      	mov	r3, r0
 8009c54:	4a0e      	ldr	r2, [pc, #56]	@ (8009c90 <sl_wfx_task_start+0x54>)
 8009c56:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009c58:	4b0e      	ldr	r3, [pc, #56]	@ (8009c94 <sl_wfx_task_start+0x58>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <sl_wfx_task_start+0x58>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 8009c64:	4b0c      	ldr	r3, [pc, #48]	@ (8009c98 <sl_wfx_task_start+0x5c>)
 8009c66:	1d3c      	adds	r4, r7, #4
 8009c68:	461d      	mov	r5, r3
 8009c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 8009c72:	1d3b      	adds	r3, r7, #4
 8009c74:	2100      	movs	r1, #0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f8f9 	bl	8009e6e <osThreadCreate>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4a07      	ldr	r2, [pc, #28]	@ (8009c9c <sl_wfx_task_start+0x60>)
 8009c80:	6013      	str	r3, [r2, #0]

}
 8009c82:	bf00      	nop
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bdb0      	pop	{r4, r5, r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200014f8 	.word	0x200014f8
 8009c90:	200014fc 	.word	0x200014fc
 8009c94:	20001500 	.word	0x20001500
 8009c98:	0801dcb8 	.word	0x0801dcb8
 8009c9c:	200014f4 	.word	0x200014f4

08009ca0 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af02      	add	r7, sp, #8
 8009ca6:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009cac:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce4 <sl_wfx_task_entry+0x44>)
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	2201      	movs	r2, #1
 8009cba:	2103      	movs	r1, #3
 8009cbc:	f000 faae 	bl	800a21c <xEventGroupWaitBits>
 8009cc0:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 8009ccc:	f000 f834 	bl	8009d38 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0e8      	beq.n	8009cac <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 8009cda:	89fb      	ldrh	r3, [r7, #14]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f803 	bl	8009ce8 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009ce2:	e7e3      	b.n	8009cac <sl_wfx_task_entry+0xc>
 8009ce4:	200014f8 	.word	0x200014f8

08009ce8 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 8009cf2:	f7ff ff50 	bl	8009b96 <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 8009cf6:	1dbb      	adds	r3, r7, #6
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fa75 	bl	80081e8 <sl_wfx_receive_frame>
 8009cfe:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 8009d06:	f7ff ff39 	bl	8009b7c <sl_wfx_host_enable_platform_interrupt>
 8009d0a:	e00d      	b.n	8009d28 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 8009d16:	4b07      	ldr	r3, [pc, #28]	@ (8009d34 <sl_wfx_rx_process+0x4c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 fb4f 	bl	800a3c0 <xEventGroupSetBits>
 8009d22:	e001      	b.n	8009d28 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 8009d24:	f7ff ff2a 	bl	8009b7c <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 8009d28:	68fb      	ldr	r3, [r7, #12]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200014f8 	.word	0x200014f8

08009d38 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 8009d3e:	4b28      	ldr	r3, [pc, #160]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 8009d46:	231b      	movs	r3, #27
 8009d48:	e045      	b.n	8009dd6 <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8009d4a:	4b26      	ldr	r3, [pc, #152]	@ (8009de4 <sl_wfx_tx_process+0xac>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 f8a8 	bl	800aea8 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009d58:	4b21      	ldr	r3, [pc, #132]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009d60:	4b1f      	ldr	r3, [pc, #124]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009d62:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009d64:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 8009d66:	4b1e      	ldr	r3, [pc, #120]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009d6a:	791a      	ldrb	r2, [r3, #4]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f7fe f8f7 	bl	8007f60 <sl_wfx_send_ethernet_frame>
 8009d72:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00e      	beq.n	8009d98 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009de8 <sl_wfx_tx_process+0xb0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fb1d 	bl	800a3c0 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009d86:	4b17      	ldr	r3, [pc, #92]	@ (8009de4 <sl_wfx_tx_process+0xac>)
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2100      	movs	r1, #0
 8009d90:	f000 fd78 	bl	800a884 <xQueueGenericSend>
    return SL_STATUS_FULL;
 8009d94:	231c      	movs	r3, #28
 8009d96:	e01e      	b.n	8009dd6 <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009d98:	4b11      	ldr	r3, [pc, #68]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009d9e:	4b10      	ldr	r3, [pc, #64]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a0e      	ldr	r2, [pc, #56]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009da6:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009da8:	2200      	movs	r2, #0
 8009daa:	214a      	movs	r1, #74	@ 0x4a
 8009dac:	6838      	ldr	r0, [r7, #0]
 8009dae:	f7fe ff13 	bl	8008bd8 <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8009db2:	4b0b      	ldr	r3, [pc, #44]	@ (8009de0 <sl_wfx_tx_process+0xa8>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009dba:	4b0b      	ldr	r3, [pc, #44]	@ (8009de8 <sl_wfx_tx_process+0xb0>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fafd 	bl	800a3c0 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009dc6:	4b07      	ldr	r3, [pc, #28]	@ (8009de4 <sl_wfx_tx_process+0xac>)
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	f000 fd58 	bl	800a884 <xQueueGenericSend>

  return result;
 8009dd4:	687b      	ldr	r3, [r7, #4]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20001500 	.word	0x20001500
 8009de4:	200014fc 	.word	0x200014fc
 8009de8:	200014f8 	.word	0x200014f8

08009dec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009dfe:	2b84      	cmp	r3, #132	@ 0x84
 8009e00:	d005      	beq.n	8009e0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4413      	add	r3, r2
 8009e0a:	3303      	adds	r3, #3
 8009e0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e22:	f3ef 8305 	mrs	r3, IPSR
 8009e26:	607b      	str	r3, [r7, #4]
  return(result);
 8009e28:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bf14      	ite	ne
 8009e2e:	2301      	movne	r3, #1
 8009e30:	2300      	moveq	r3, #0
 8009e32:	b2db      	uxtb	r3, r3
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e44:	f001 fd8c 	bl	800b960 <vTaskStartScheduler>
  
  return osOK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009e52:	f7ff ffe3 	bl	8009e1c <inHandlerMode>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009e5c:	f001 fe8a 	bl	800bb74 <xTaskGetTickCountFromISR>
 8009e60:	4603      	mov	r3, r0
 8009e62:	e002      	b.n	8009e6a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009e64:	f001 fe76 	bl	800bb54 <xTaskGetTickCount>
 8009e68:	4603      	mov	r3, r0
  }
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e70:	b087      	sub	sp, #28
 8009e72:	af02      	add	r7, sp, #8
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685c      	ldr	r4, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e84:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff ffad 	bl	8009dec <makeFreeRtosPriority>
 8009e92:	4602      	mov	r2, r0
 8009e94:	f107 030c 	add.w	r3, r7, #12
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	9200      	str	r2, [sp, #0]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	4632      	mov	r2, r6
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f001 fb62 	bl	800b56c <xTaskCreate>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d001      	beq.n	8009eb2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e000      	b.n	8009eb4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ebc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fc85 	bl	800b7d4 <vTaskDelete>
  return osOK;
 8009eca:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	085b      	lsrs	r3, r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <osDelay+0x18>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	e000      	b.n	8009eee <osDelay+0x1a>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f001 fd00 	bl	800b8f4 <vTaskDelay>
  
  return osOK;
 8009ef4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009f06:	2001      	movs	r0, #1
 8009f08:	f000 fca4 	bl	800a854 <xQueueCreateMutex>
 8009f0c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009f22:	2300      	movs	r3, #0
 8009f24:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <osMutexWait+0x18>
    return osErrorParameter;
 8009f2c:	2380      	movs	r3, #128	@ 0x80
 8009f2e:	e03b      	b.n	8009fa8 <osMutexWait+0x90>
  }
  
  ticks = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d103      	bne.n	8009f44 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	e00a      	b.n	8009f5a <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d007      	beq.n	8009f5a <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <osMutexWait+0x42>
      ticks = 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009f5a:	f7ff ff5f 	bl	8009e1c <inHandlerMode>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d017      	beq.n	8009f94 <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f64:	f107 0308 	add.w	r3, r7, #8
 8009f68:	461a      	mov	r2, r3
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f8ab 	bl	800b0c8 <xQueueReceiveFromISR>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d001      	beq.n	8009f7c <osMutexWait+0x64>
      return osErrorOS;
 8009f78:	23ff      	movs	r3, #255	@ 0xff
 8009f7a:	e015      	b.n	8009fa8 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d011      	beq.n	8009fa6 <osMutexWait+0x8e>
 8009f82:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb0 <osMutexWait+0x98>)
 8009f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	e008      	b.n	8009fa6 <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 ff86 	bl	800aea8 <xQueueSemaphoreTake>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d001      	beq.n	8009fa6 <osMutexWait+0x8e>
    return osErrorOS;
 8009fa2:	23ff      	movs	r3, #255	@ 0xff
 8009fa4:	e000      	b.n	8009fa8 <osMutexWait+0x90>
  }
  
  return osOK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009fc4:	f7ff ff2a 	bl	8009e1c <inHandlerMode>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d016      	beq.n	8009ffc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fdf5 	bl	800abc4 <xQueueGiveFromISR>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d001      	beq.n	8009fe4 <osMutexRelease+0x30>
      return osErrorOS;
 8009fe0:	23ff      	movs	r3, #255	@ 0xff
 8009fe2:	e017      	b.n	800a014 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d013      	beq.n	800a012 <osMutexRelease+0x5e>
 8009fea:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <osMutexRelease+0x68>)
 8009fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	e00a      	b.n	800a012 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2200      	movs	r2, #0
 800a000:	2100      	movs	r1, #0
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fc3e 	bl	800a884 <xQueueGenericSend>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d001      	beq.n	800a012 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a00e:	23ff      	movs	r3, #255	@ 0xff
 800a010:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a012:	68fb      	ldr	r3, [r7, #12]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	e000ed04 	.word	0xe000ed04

0800a020 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a028:	f7ff fef8 	bl	8009e1c <inHandlerMode>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <osMutexDelete+0x16>
    return osErrorISR;
 800a032:	2382      	movs	r3, #130	@ 0x82
 800a034:	e003      	b.n	800a03e <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 f8c8 	bl	800b1cc <vQueueDelete>

  return osOK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6818      	ldr	r0, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	4619      	mov	r1, r3
 800a05c:	f000 fb8a 	bl	800a774 <xQueueGenericCreate>
 800a060:	4603      	mov	r3, r0
#endif
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	085b      	lsrs	r3, r3, #1
 800a080:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <osMessagePut+0x20>
    ticks = 1;
 800a088:	2301      	movs	r3, #1
 800a08a:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a08c:	f7ff fec6 	bl	8009e1c <inHandlerMode>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d018      	beq.n	800a0c8 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a096:	f107 0210 	add.w	r2, r7, #16
 800a09a:	f107 0108 	add.w	r1, r7, #8
 800a09e:	2300      	movs	r3, #0
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fcf1 	bl	800aa88 <xQueueGenericSendFromISR>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d001      	beq.n	800a0b0 <osMessagePut+0x44>
      return osErrorOS;
 800a0ac:	23ff      	movs	r3, #255	@ 0xff
 800a0ae:	e018      	b.n	800a0e2 <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d014      	beq.n	800a0e0 <osMessagePut+0x74>
 800a0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ec <osMessagePut+0x80>)
 800a0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	e00b      	b.n	800a0e0 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a0c8:	f107 0108 	add.w	r1, r7, #8
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 fbd7 	bl	800a884 <xQueueGenericSend>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d001      	beq.n	800a0e0 <osMessagePut+0x74>
      return osErrorOS;
 800a0dc:	23ff      	movs	r3, #255	@ 0xff
 800a0de:	e000      	b.n	800a0e2 <osMessagePut+0x76>
    }
  }
  
  return osOK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	e000ed04 	.word	0xe000ed04

0800a0f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a0f0:	b590      	push	{r4, r7, lr}
 800a0f2:	b08b      	sub	sp, #44	@ 0x2c
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a100:	2300      	movs	r3, #0
 800a102:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10a      	bne.n	800a120 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a10a:	2380      	movs	r3, #128	@ 0x80
 800a10c:	617b      	str	r3, [r7, #20]
    return event;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	461c      	mov	r4, r3
 800a112:	f107 0314 	add.w	r3, r7, #20
 800a116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a11a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a11e:	e055      	b.n	800a1cc <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 800a120:	2300      	movs	r3, #0
 800a122:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12e:	d103      	bne.n	800a138 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a130:	f04f 33ff 	mov.w	r3, #4294967295
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24
 800a136:	e00a      	b.n	800a14e <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	085b      	lsrs	r3, r3, #1
 800a142:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <osMessageGet+0x5e>
      ticks = 1;
 800a14a:	2301      	movs	r3, #1
 800a14c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a14e:	f7ff fe65 	bl	8009e1c <inHandlerMode>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01c      	beq.n	800a192 <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a158:	f107 0220 	add.w	r2, r7, #32
 800a15c:	f107 0314 	add.w	r3, r7, #20
 800a160:	3304      	adds	r3, #4
 800a162:	4619      	mov	r1, r3
 800a164:	68b8      	ldr	r0, [r7, #8]
 800a166:	f000 ffaf 	bl	800b0c8 <xQueueReceiveFromISR>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d102      	bne.n	800a176 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 800a170:	2310      	movs	r3, #16
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e001      	b.n	800a17a <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01d      	beq.n	800a1bc <osMessageGet+0xcc>
 800a180:	4b14      	ldr	r3, [pc, #80]	@ (800a1d4 <osMessageGet+0xe4>)
 800a182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	e014      	b.n	800a1bc <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a192:	f107 0314 	add.w	r3, r7, #20
 800a196:	3304      	adds	r3, #4
 800a198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a19a:	4619      	mov	r1, r3
 800a19c:	68b8      	ldr	r0, [r7, #8]
 800a19e:	f000 fda1 	bl	800ace4 <xQueueReceive>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d102      	bne.n	800a1ae <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e006      	b.n	800a1bc <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <osMessageGet+0xc8>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	e000      	b.n	800a1ba <osMessageGet+0xca>
 800a1b8:	2340      	movs	r3, #64	@ 0x40
 800a1ba:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	461c      	mov	r4, r3
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	372c      	adds	r7, #44	@ 0x2c
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd90      	pop	{r4, r7, pc}
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a1dc:	f002 f886 	bl	800c2ec <xTaskGetSchedulerState>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d001      	beq.n	800a1ea <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a1e6:	f002 ffd7 	bl	800d198 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a1ea:	bf00      	nop
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a1f4:	2018      	movs	r0, #24
 800a1f6:	f003 f861 	bl	800d2bc <pvPortMalloc>
 800a1fa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3304      	adds	r3, #4
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f992 	bl	800a536 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a212:	687b      	ldr	r3, [r7, #4]
	}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b090      	sub	sp, #64	@ 0x40
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a232:	2300      	movs	r3, #0
 800a234:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	e7fd      	b.n	800a250 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a25a:	d30b      	bcc.n	800a274 <xEventGroupWaitBits+0x58>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	61fb      	str	r3, [r7, #28]
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	e7fd      	b.n	800a270 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <xEventGroupWaitBits+0x76>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	61bb      	str	r3, [r7, #24]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a292:	f002 f82b 	bl	800c2ec <xTaskGetSchedulerState>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <xEventGroupWaitBits+0x86>
 800a29c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <xEventGroupWaitBits+0x8a>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <xEventGroupWaitBits+0x8c>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10b      	bne.n	800a2c4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	617b      	str	r3, [r7, #20]
}
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
 800a2c2:	e7fd      	b.n	800a2c0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800a2c4:	f001 fb9a 	bl	800b9fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2d4:	f000 f90d 	bl	800a4f2 <prvTestWaitCondition>
 800a2d8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00e      	beq.n	800a2fe <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d028      	beq.n	800a340 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	43db      	mvns	r3, r3
 800a2f6:	401a      	ands	r2, r3
 800a2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	e020      	b.n	800a340 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a2fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a300:	2b00      	cmp	r3, #0
 800a302:	d104      	bne.n	800a30e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a30c:	e018      	b.n	800a340 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a31a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a328:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32c:	1d18      	adds	r0, r3, #4
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	4313      	orrs	r3, r2
 800a334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a336:	4619      	mov	r1, r3
 800a338:	f001 fd6a 	bl	800be10 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a340:	f001 fb6a 	bl	800ba18 <xTaskResumeAll>
 800a344:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d031      	beq.n	800a3b0 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d107      	bne.n	800a362 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800a352:	4b1a      	ldr	r3, [pc, #104]	@ (800a3bc <xEventGroupWaitBits+0x1a0>)
 800a354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a362:	f002 f96f 	bl	800c644 <uxTaskResetEventItemValue>
 800a366:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d11a      	bne.n	800a3a8 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800a372:	f002 fe81 	bl	800d078 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a382:	f000 f8b6 	bl	800a4f2 <prvTestWaitCondition>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d009      	beq.n	800a3a0 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	43db      	mvns	r3, r3
 800a39a:	401a      	ands	r2, r3
 800a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800a3a4:	f002 fe9a 	bl	800d0dc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3740      	adds	r7, #64	@ 0x40
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	e000ed04 	.word	0xe000ed04

0800a3c0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	@ 0x38
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10b      	bne.n	800a3f4 <xEventGroupSetBits+0x34>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	613b      	str	r3, [r7, #16]
}
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	e7fd      	b.n	800a3f0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3fa:	d30b      	bcc.n	800a414 <xEventGroupSetBits+0x54>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	60fb      	str	r3, [r7, #12]
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	e7fd      	b.n	800a410 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	3304      	adds	r3, #4
 800a418:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	3308      	adds	r3, #8
 800a41e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a420:	f001 faec 	bl	800b9fc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	431a      	orrs	r2, r3
 800a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a434:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a436:	e03c      	b.n	800a4b2 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a444:	2300      	movs	r3, #0
 800a446:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a44e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a456:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d108      	bne.n	800a474 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	4013      	ands	r3, r2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00b      	beq.n	800a486 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a472:	e008      	b.n	800a486 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	4013      	ands	r3, r2
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d101      	bne.n	800a486 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a482:	2301      	movs	r3, #1
 800a484:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d010      	beq.n	800a4ae <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a4aa:	f001 fd7f 	bl	800bfac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800a4b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d1be      	bne.n	800a438 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	43db      	mvns	r3, r3
 800a4c2:	401a      	ands	r2, r3
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a4c8:	f001 faa6 	bl	800ba18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	681b      	ldr	r3, [r3, #0]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3738      	adds	r7, #56	@ 0x38
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ff6b 	bl	800a3c0 <xEventGroupSetBits>
}
 800a4ea:	bf00      	nop
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b087      	sub	sp, #28
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d107      	bne.n	800a518 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	4013      	ands	r3, r2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a512:	2301      	movs	r3, #1
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	e007      	b.n	800a528 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4013      	ands	r3, r2
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	429a      	cmp	r2, r3
 800a522:	d101      	bne.n	800a528 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a528:	697b      	ldr	r3, [r7, #20]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f103 0208 	add.w	r2, r3, #8
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f04f 32ff 	mov.w	r2, #4294967295
 800a54e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f103 0208 	add.w	r2, r3, #8
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f103 0208 	add.w	r2, r3, #8
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	689a      	ldr	r2, [r3, #8]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	601a      	str	r2, [r3, #0]
}
 800a5cc:	bf00      	nop
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ee:	d103      	bne.n	800a5f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e00c      	b.n	800a612 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	e002      	b.n	800a606 <vListInsert+0x2e>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d2f6      	bcs.n	800a600 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
}
 800a63e:	bf00      	nop
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6892      	ldr	r2, [r2, #8]
 800a660:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6852      	ldr	r2, [r2, #4]
 800a66a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	429a      	cmp	r2, r3
 800a674:	d103      	bne.n	800a67e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	1e5a      	subs	r2, r3, #1
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10b      	bne.n	800a6cc <xQueueGenericReset+0x2c>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60bb      	str	r3, [r7, #8]
}
 800a6c6:	bf00      	nop
 800a6c8:	bf00      	nop
 800a6ca:	e7fd      	b.n	800a6c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a6cc:	f002 fcd4 	bl	800d078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6d8:	68f9      	ldr	r1, [r7, #12]
 800a6da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a6dc:	fb01 f303 	mul.w	r3, r1, r3
 800a6e0:	441a      	add	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	441a      	add	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	22ff      	movs	r2, #255	@ 0xff
 800a710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	22ff      	movs	r2, #255	@ 0xff
 800a718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d114      	bne.n	800a74c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01a      	beq.n	800a760 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3310      	adds	r3, #16
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 fbd8 	bl	800bee4 <xTaskRemoveFromEventList>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d012      	beq.n	800a760 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a73a:	4b0d      	ldr	r3, [pc, #52]	@ (800a770 <xQueueGenericReset+0xd0>)
 800a73c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	e009      	b.n	800a760 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3310      	adds	r3, #16
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fef0 	bl	800a536 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3324      	adds	r3, #36	@ 0x24
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff feeb 	bl	800a536 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a760:	f002 fcbc 	bl	800d0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a764:	2301      	movs	r3, #1
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08a      	sub	sp, #40	@ 0x28
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	4613      	mov	r3, r2
 800a780:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	613b      	str	r3, [r7, #16]
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	e7fd      	b.n	800a79c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	fb02 f303 	mul.w	r3, r2, r3
 800a7a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	3348      	adds	r3, #72	@ 0x48
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f002 fd84 	bl	800d2bc <pvPortMalloc>
 800a7b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00d      	beq.n	800a7d8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	3348      	adds	r3, #72	@ 0x48
 800a7c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7c6:	79fa      	ldrb	r2, [r7, #7]
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f805 	bl	800a7e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7d8:	69bb      	ldr	r3, [r7, #24]
	}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3720      	adds	r7, #32
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	60b9      	str	r1, [r7, #8]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d103      	bne.n	800a7fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	e002      	b.n	800a804 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a810:	2101      	movs	r1, #1
 800a812:	69b8      	ldr	r0, [r7, #24]
 800a814:	f7ff ff44 	bl	800a6a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a818:	bf00      	nop
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00e      	beq.n	800a84c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a840:	2300      	movs	r3, #0
 800a842:	2200      	movs	r2, #0
 800a844:	2100      	movs	r1, #0
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f81c 	bl	800a884 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a85e:	2301      	movs	r3, #1
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	461a      	mov	r2, r3
 800a86a:	6939      	ldr	r1, [r7, #16]
 800a86c:	6978      	ldr	r0, [r7, #20]
 800a86e:	f7ff ff81 	bl	800a774 <xQueueGenericCreate>
 800a872:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff ffd3 	bl	800a820 <prvInitialiseMutex>

		return xNewQueue;
 800a87a:	68fb      	ldr	r3, [r7, #12]
	}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	@ 0x38
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10b      	bne.n	800a8b8 <xQueueGenericSend+0x34>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	e7fd      	b.n	800a8b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSend+0x42>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <xQueueGenericSend+0x46>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericSend+0x48>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10b      	bne.n	800a8e8 <xQueueGenericSend+0x64>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	e7fd      	b.n	800a8e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d103      	bne.n	800a8f6 <xQueueGenericSend+0x72>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <xQueueGenericSend+0x76>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueGenericSend+0x78>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <xQueueGenericSend+0x94>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	623b      	str	r3, [r7, #32]
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	e7fd      	b.n	800a914 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a918:	f001 fce8 	bl	800c2ec <xTaskGetSchedulerState>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d102      	bne.n	800a928 <xQueueGenericSend+0xa4>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <xQueueGenericSend+0xa8>
 800a928:	2301      	movs	r3, #1
 800a92a:	e000      	b.n	800a92e <xQueueGenericSend+0xaa>
 800a92c:	2300      	movs	r3, #0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <xQueueGenericSend+0xc6>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	61fb      	str	r3, [r7, #28]
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	e7fd      	b.n	800a946 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a94a:	f002 fb95 	bl	800d078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a956:	429a      	cmp	r2, r3
 800a958:	d302      	bcc.n	800a960 <xQueueGenericSend+0xdc>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d129      	bne.n	800a9b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a966:	f000 fc68 	bl	800b23a <prvCopyDataToQueue>
 800a96a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d010      	beq.n	800a996 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	3324      	adds	r3, #36	@ 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f001 fab3 	bl	800bee4 <xTaskRemoveFromEventList>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d013      	beq.n	800a9ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a984:	4b3f      	ldr	r3, [pc, #252]	@ (800aa84 <xQueueGenericSend+0x200>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	e00a      	b.n	800a9ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d007      	beq.n	800a9ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a99c:	4b39      	ldr	r3, [pc, #228]	@ (800aa84 <xQueueGenericSend+0x200>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9ac:	f002 fb96 	bl	800d0dc <vPortExitCritical>
				return pdPASS;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e063      	b.n	800aa7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d103      	bne.n	800a9c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9ba:	f002 fb8f 	bl	800d0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	e05c      	b.n	800aa7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 fb51 	bl	800c074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9d6:	f002 fb81 	bl	800d0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9da:	f001 f80f 	bl	800b9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9de:	f002 fb4b 	bl	800d078 <vPortEnterCritical>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ee:	d103      	bne.n	800a9f8 <xQueueGenericSend+0x174>
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9fe:	b25b      	sxtb	r3, r3
 800aa00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa04:	d103      	bne.n	800aa0e <xQueueGenericSend+0x18a>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa0e:	f002 fb65 	bl	800d0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa12:	1d3a      	adds	r2, r7, #4
 800aa14:	f107 0314 	add.w	r3, r7, #20
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 fb40 	bl	800c0a0 <xTaskCheckForTimeOut>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d124      	bne.n	800aa70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa28:	f000 fcff 	bl	800b42a <prvIsQueueFull>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d018      	beq.n	800aa64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	3310      	adds	r3, #16
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 f9c2 	bl	800bdc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa42:	f000 fc8a 	bl	800b35a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa46:	f000 ffe7 	bl	800ba18 <xTaskResumeAll>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f47f af7c 	bne.w	800a94a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aa52:	4b0c      	ldr	r3, [pc, #48]	@ (800aa84 <xQueueGenericSend+0x200>)
 800aa54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	e772      	b.n	800a94a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa66:	f000 fc78 	bl	800b35a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa6a:	f000 ffd5 	bl	800ba18 <xTaskResumeAll>
 800aa6e:	e76c      	b.n	800a94a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa72:	f000 fc72 	bl	800b35a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa76:	f000 ffcf 	bl	800ba18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3738      	adds	r7, #56	@ 0x38
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	e000ed04 	.word	0xe000ed04

0800aa88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b090      	sub	sp, #64	@ 0x40
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10b      	bne.n	800aab8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	e7fd      	b.n	800aab4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d103      	bne.n	800aac6 <xQueueGenericSendFromISR+0x3e>
 800aabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <xQueueGenericSendFromISR+0x42>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <xQueueGenericSendFromISR+0x44>
 800aaca:	2300      	movs	r3, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10b      	bne.n	800aae8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSendFromISR+0x6e>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSendFromISR+0x72>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSendFromISR+0x74>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10b      	bne.n	800ab18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	623b      	str	r3, [r7, #32]
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	e7fd      	b.n	800ab14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab18:	f002 fb8e 	bl	800d238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab1c:	f3ef 8211 	mrs	r2, BASEPRI
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	61fa      	str	r2, [r7, #28]
 800ab32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <xQueueGenericSendFromISR+0xc2>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d12f      	bne.n	800abaa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab60:	f000 fb6b 	bl	800b23a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d112      	bne.n	800ab94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d016      	beq.n	800aba4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	3324      	adds	r3, #36	@ 0x24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 f9b2 	bl	800bee4 <xTaskRemoveFromEventList>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00e      	beq.n	800aba4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e007      	b.n	800aba4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab98:	3301      	adds	r3, #1
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	b25a      	sxtb	r2, r3
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aba8:	e001      	b.n	800abae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3740      	adds	r7, #64	@ 0x40
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08e      	sub	sp, #56	@ 0x38
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10b      	bne.n	800abf0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	623b      	str	r3, [r7, #32]
}
 800abea:	bf00      	nop
 800abec:	bf00      	nop
 800abee:	e7fd      	b.n	800abec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	61fb      	str	r3, [r7, #28]
}
 800ac0a:	bf00      	nop
 800ac0c:	bf00      	nop
 800ac0e:	e7fd      	b.n	800ac0c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ac10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d103      	bne.n	800ac20 <xQueueGiveFromISR+0x5c>
 800ac18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <xQueueGiveFromISR+0x60>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e000      	b.n	800ac26 <xQueueGiveFromISR+0x62>
 800ac24:	2300      	movs	r3, #0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	61bb      	str	r3, [r7, #24]
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	e7fd      	b.n	800ac3e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac42:	f002 faf9 	bl	800d238 <vPortValidateInterruptPriority>
	__asm volatile
 800ac46:	f3ef 8211 	mrs	r2, BASEPRI
 800ac4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	617a      	str	r2, [r7, #20]
 800ac5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ac5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d22b      	bcs.n	800acca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8c:	d112      	bne.n	800acb4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d016      	beq.n	800acc4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac98:	3324      	adds	r3, #36	@ 0x24
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 f922 	bl	800bee4 <xTaskRemoveFromEventList>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00e      	beq.n	800acc4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00b      	beq.n	800acc4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2201      	movs	r2, #1
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	e007      	b.n	800acc4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acb8:	3301      	adds	r3, #1
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	b25a      	sxtb	r2, r3
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800acc4:	2301      	movs	r3, #1
 800acc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc8:	e001      	b.n	800acce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acca:	2300      	movs	r3, #0
 800accc:	637b      	str	r3, [r7, #52]	@ 0x34
 800acce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f383 8811 	msr	BASEPRI, r3
}
 800acd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3738      	adds	r7, #56	@ 0x38
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08c      	sub	sp, #48	@ 0x30
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800acf0:	2300      	movs	r3, #0
 800acf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10b      	bne.n	800ad16 <xQueueReceive+0x32>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	623b      	str	r3, [r7, #32]
}
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	e7fd      	b.n	800ad12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d103      	bne.n	800ad24 <xQueueReceive+0x40>
 800ad1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <xQueueReceive+0x44>
 800ad24:	2301      	movs	r3, #1
 800ad26:	e000      	b.n	800ad2a <xQueueReceive+0x46>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10b      	bne.n	800ad46 <xQueueReceive+0x62>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	61fb      	str	r3, [r7, #28]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad46:	f001 fad1 	bl	800c2ec <xTaskGetSchedulerState>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <xQueueReceive+0x72>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <xQueueReceive+0x76>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e000      	b.n	800ad5c <xQueueReceive+0x78>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10b      	bne.n	800ad78 <xQueueReceive+0x94>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	61bb      	str	r3, [r7, #24]
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	e7fd      	b.n	800ad74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad78:	f002 f97e 	bl	800d078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d01f      	beq.n	800adc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad88:	68b9      	ldr	r1, [r7, #8]
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad8c:	f000 fabf 	bl	800b30e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	1e5a      	subs	r2, r3, #1
 800ad94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00f      	beq.n	800adc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	3310      	adds	r3, #16
 800ada4:	4618      	mov	r0, r3
 800ada6:	f001 f89d 	bl	800bee4 <xTaskRemoveFromEventList>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d007      	beq.n	800adc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adb0:	4b3c      	ldr	r3, [pc, #240]	@ (800aea4 <xQueueReceive+0x1c0>)
 800adb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adc0:	f002 f98c 	bl	800d0dc <vPortExitCritical>
				return pdPASS;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e069      	b.n	800ae9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adce:	f002 f985 	bl	800d0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800add2:	2300      	movs	r3, #0
 800add4:	e062      	b.n	800ae9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800add6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d106      	bne.n	800adea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800addc:	f107 0310 	add.w	r3, r7, #16
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 f947 	bl	800c074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ade6:	2301      	movs	r3, #1
 800ade8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adea:	f002 f977 	bl	800d0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adee:	f000 fe05 	bl	800b9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adf2:	f002 f941 	bl	800d078 <vPortEnterCritical>
 800adf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adfc:	b25b      	sxtb	r3, r3
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae02:	d103      	bne.n	800ae0c <xQueueReceive+0x128>
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae12:	b25b      	sxtb	r3, r3
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d103      	bne.n	800ae22 <xQueueReceive+0x13e>
 800ae1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae22:	f002 f95b 	bl	800d0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae26:	1d3a      	adds	r2, r7, #4
 800ae28:	f107 0310 	add.w	r3, r7, #16
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 f936 	bl	800c0a0 <xTaskCheckForTimeOut>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d123      	bne.n	800ae82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae3c:	f000 fadf 	bl	800b3fe <prvIsQueueEmpty>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d017      	beq.n	800ae76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae48:	3324      	adds	r3, #36	@ 0x24
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 ffb8 	bl	800bdc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae56:	f000 fa80 	bl	800b35a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae5a:	f000 fddd 	bl	800ba18 <xTaskResumeAll>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d189      	bne.n	800ad78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae64:	4b0f      	ldr	r3, [pc, #60]	@ (800aea4 <xQueueReceive+0x1c0>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	e780      	b.n	800ad78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae78:	f000 fa6f 	bl	800b35a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae7c:	f000 fdcc 	bl	800ba18 <xTaskResumeAll>
 800ae80:	e77a      	b.n	800ad78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae84:	f000 fa69 	bl	800b35a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae88:	f000 fdc6 	bl	800ba18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae8e:	f000 fab6 	bl	800b3fe <prvIsQueueEmpty>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f43f af6f 	beq.w	800ad78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3730      	adds	r7, #48	@ 0x30
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	e000ed04 	.word	0xe000ed04

0800aea8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08e      	sub	sp, #56	@ 0x38
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10b      	bne.n	800aedc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	623b      	str	r3, [r7, #32]
}
 800aed6:	bf00      	nop
 800aed8:	bf00      	nop
 800aeda:	e7fd      	b.n	800aed8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	61fb      	str	r3, [r7, #28]
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	e7fd      	b.n	800aef8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aefc:	f001 f9f6 	bl	800c2ec <xTaskGetSchedulerState>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <xQueueSemaphoreTake+0x64>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <xQueueSemaphoreTake+0x68>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e000      	b.n	800af12 <xQueueSemaphoreTake+0x6a>
 800af10:	2300      	movs	r3, #0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10b      	bne.n	800af2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	61bb      	str	r3, [r7, #24]
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	e7fd      	b.n	800af2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af2e:	f002 f8a3 	bl	800d078 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d024      	beq.n	800af88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800af3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af40:	1e5a      	subs	r2, r3, #1
 800af42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af4e:	f001 fb91 	bl	800c674 <pvTaskIncrementMutexHeldCount>
 800af52:	4602      	mov	r2, r0
 800af54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00f      	beq.n	800af80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af62:	3310      	adds	r3, #16
 800af64:	4618      	mov	r0, r3
 800af66:	f000 ffbd 	bl	800bee4 <xTaskRemoveFromEventList>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af70:	4b54      	ldr	r3, [pc, #336]	@ (800b0c4 <xQueueSemaphoreTake+0x21c>)
 800af72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af80:	f002 f8ac 	bl	800d0dc <vPortExitCritical>
				return pdPASS;
 800af84:	2301      	movs	r3, #1
 800af86:	e098      	b.n	800b0ba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d112      	bne.n	800afb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <xQueueSemaphoreTake+0x104>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	617b      	str	r3, [r7, #20]
}
 800afa6:	bf00      	nop
 800afa8:	bf00      	nop
 800afaa:	e7fd      	b.n	800afa8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800afac:	f002 f896 	bl	800d0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e082      	b.n	800b0ba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afba:	f107 030c 	add.w	r3, r7, #12
 800afbe:	4618      	mov	r0, r3
 800afc0:	f001 f858 	bl	800c074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afc8:	f002 f888 	bl	800d0dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afcc:	f000 fd16 	bl	800b9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afd0:	f002 f852 	bl	800d078 <vPortEnterCritical>
 800afd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afda:	b25b      	sxtb	r3, r3
 800afdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe0:	d103      	bne.n	800afea <xQueueSemaphoreTake+0x142>
 800afe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff6:	d103      	bne.n	800b000 <xQueueSemaphoreTake+0x158>
 800aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b000:	f002 f86c 	bl	800d0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b004:	463a      	mov	r2, r7
 800b006:	f107 030c 	add.w	r3, r7, #12
 800b00a:	4611      	mov	r1, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 f847 	bl	800c0a0 <xTaskCheckForTimeOut>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d132      	bne.n	800b07e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b018:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b01a:	f000 f9f0 	bl	800b3fe <prvIsQueueEmpty>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d026      	beq.n	800b072 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d109      	bne.n	800b040 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b02c:	f002 f824 	bl	800d078 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	4618      	mov	r0, r3
 800b036:	f001 f977 	bl	800c328 <xTaskPriorityInherit>
 800b03a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b03c:	f002 f84e 	bl	800d0dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b042:	3324      	adds	r3, #36	@ 0x24
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	4611      	mov	r1, r2
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 febb 	bl	800bdc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b04e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b050:	f000 f983 	bl	800b35a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b054:	f000 fce0 	bl	800ba18 <xTaskResumeAll>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f47f af67 	bne.w	800af2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b060:	4b18      	ldr	r3, [pc, #96]	@ (800b0c4 <xQueueSemaphoreTake+0x21c>)
 800b062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	e75d      	b.n	800af2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b074:	f000 f971 	bl	800b35a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b078:	f000 fcce 	bl	800ba18 <xTaskResumeAll>
 800b07c:	e757      	b.n	800af2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b07e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b080:	f000 f96b 	bl	800b35a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b084:	f000 fcc8 	bl	800ba18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b08a:	f000 f9b8 	bl	800b3fe <prvIsQueueEmpty>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	f43f af4c 	beq.w	800af2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00d      	beq.n	800b0b8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b09c:	f001 ffec 	bl	800d078 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b0a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b0a2:	f000 f8b2 	bl	800b20a <prvGetDisinheritPriorityAfterTimeout>
 800b0a6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f001 fa38 	bl	800c524 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b0b4:	f002 f812 	bl	800d0dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3738      	adds	r7, #56	@ 0x38
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	e000ed04 	.word	0xe000ed04

0800b0c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08e      	sub	sp, #56	@ 0x38
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10b      	bne.n	800b0f6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	623b      	str	r3, [r7, #32]
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <xQueueReceiveFromISR+0x3c>
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <xQueueReceiveFromISR+0x40>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <xQueueReceiveFromISR+0x42>
 800b108:	2300      	movs	r3, #0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10b      	bne.n	800b126 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	61fb      	str	r3, [r7, #28]
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	e7fd      	b.n	800b122 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b126:	f002 f887 	bl	800d238 <vPortValidateInterruptPriority>
	__asm volatile
 800b12a:	f3ef 8211 	mrs	r2, BASEPRI
 800b12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	61ba      	str	r2, [r7, #24]
 800b140:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b142:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b144:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d02f      	beq.n	800b1b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b160:	f000 f8d5 	bl	800b30e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b166:	1e5a      	subs	r2, r3, #1
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b16c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b174:	d112      	bne.n	800b19c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d016      	beq.n	800b1ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	3310      	adds	r3, #16
 800b182:	4618      	mov	r0, r3
 800b184:	f000 feae 	bl	800bee4 <xTaskRemoveFromEventList>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00e      	beq.n	800b1ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00b      	beq.n	800b1ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	e007      	b.n	800b1ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b19c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	b25a      	sxtb	r2, r3
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b0:	e001      	b.n	800b1b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f383 8811 	msr	BASEPRI, r3
}
 800b1c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3738      	adds	r7, #56	@ 0x38
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <vQueueDelete+0x2a>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	60bb      	str	r3, [r7, #8]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f000 f95a 	bl	800b4b0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f002 f92b 	bl	800d458 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b20a:	b480      	push	{r7}
 800b20c:	b085      	sub	sp, #20
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b216:	2b00      	cmp	r3, #0
 800b218:	d006      	beq.n	800b228 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f1c3 0307 	rsb	r3, r3, #7
 800b224:	60fb      	str	r3, [r7, #12]
 800b226:	e001      	b.n	800b22c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b22c:	68fb      	ldr	r3, [r7, #12]
	}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b086      	sub	sp, #24
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10d      	bne.n	800b274 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d14d      	bne.n	800b2fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	4618      	mov	r0, r3
 800b266:	f001 f8d5 	bl	800c414 <xTaskPriorityDisinherit>
 800b26a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	609a      	str	r2, [r3, #8]
 800b272:	e043      	b.n	800b2fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d119      	bne.n	800b2ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6858      	ldr	r0, [r3, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b282:	461a      	mov	r2, r3
 800b284:	68b9      	ldr	r1, [r7, #8]
 800b286:	f010 f9b2 	bl	801b5ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b292:	441a      	add	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d32b      	bcc.n	800b2fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	605a      	str	r2, [r3, #4]
 800b2ac:	e026      	b.n	800b2fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68d8      	ldr	r0, [r3, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	68b9      	ldr	r1, [r7, #8]
 800b2ba:	f010 f998 	bl	801b5ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c6:	425b      	negs	r3, r3
 800b2c8:	441a      	add	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	68da      	ldr	r2, [r3, #12]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d207      	bcs.n	800b2ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e2:	425b      	negs	r3, r3
 800b2e4:	441a      	add	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d105      	bne.n	800b2fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d002      	beq.n	800b2fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b304:	697b      	ldr	r3, [r7, #20]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3718      	adds	r7, #24
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b082      	sub	sp, #8
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d018      	beq.n	800b352 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b328:	441a      	add	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	d303      	bcc.n	800b342 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68d9      	ldr	r1, [r3, #12]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34a:	461a      	mov	r2, r3
 800b34c:	6838      	ldr	r0, [r7, #0]
 800b34e:	f010 f94e 	bl	801b5ee <memcpy>
	}
}
 800b352:	bf00      	nop
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b362:	f001 fe89 	bl	800d078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b36c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b36e:	e011      	b.n	800b394 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b374:	2b00      	cmp	r3, #0
 800b376:	d012      	beq.n	800b39e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	3324      	adds	r3, #36	@ 0x24
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fdb1 	bl	800bee4 <xTaskRemoveFromEventList>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d001      	beq.n	800b38c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b388:	f000 feee 	bl	800c168 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	3b01      	subs	r3, #1
 800b390:	b2db      	uxtb	r3, r3
 800b392:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dce9      	bgt.n	800b370 <prvUnlockQueue+0x16>
 800b39c:	e000      	b.n	800b3a0 <prvUnlockQueue+0x46>
					break;
 800b39e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	22ff      	movs	r2, #255	@ 0xff
 800b3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b3a8:	f001 fe98 	bl	800d0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3ac:	f001 fe64 	bl	800d078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3b8:	e011      	b.n	800b3de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d012      	beq.n	800b3e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3310      	adds	r3, #16
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fd8c 	bl	800bee4 <xTaskRemoveFromEventList>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3d2:	f000 fec9 	bl	800c168 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dce9      	bgt.n	800b3ba <prvUnlockQueue+0x60>
 800b3e6:	e000      	b.n	800b3ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	22ff      	movs	r2, #255	@ 0xff
 800b3ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b3f2:	f001 fe73 	bl	800d0dc <vPortExitCritical>
}
 800b3f6:	bf00      	nop
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b406:	f001 fe37 	bl	800d078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d102      	bne.n	800b418 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b412:	2301      	movs	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]
 800b416:	e001      	b.n	800b41c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b418:	2300      	movs	r3, #0
 800b41a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b41c:	f001 fe5e 	bl	800d0dc <vPortExitCritical>

	return xReturn;
 800b420:	68fb      	ldr	r3, [r7, #12]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b432:	f001 fe21 	bl	800d078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b43e:	429a      	cmp	r2, r3
 800b440:	d102      	bne.n	800b448 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b442:	2301      	movs	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	e001      	b.n	800b44c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b44c:	f001 fe46 	bl	800d0dc <vPortExitCritical>

	return xReturn;
 800b450:	68fb      	ldr	r3, [r7, #12]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	e014      	b.n	800b496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b46c:	4a0f      	ldr	r2, [pc, #60]	@ (800b4ac <vQueueAddToRegistry+0x50>)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10b      	bne.n	800b490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b478:	490c      	ldr	r1, [pc, #48]	@ (800b4ac <vQueueAddToRegistry+0x50>)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b482:	4a0a      	ldr	r2, [pc, #40]	@ (800b4ac <vQueueAddToRegistry+0x50>)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	4413      	add	r3, r2
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b48e:	e006      	b.n	800b49e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b07      	cmp	r3, #7
 800b49a:	d9e7      	bls.n	800b46c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	20001508 	.word	0x20001508

0800b4b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	e016      	b.n	800b4ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b4be:	4a10      	ldr	r2, [pc, #64]	@ (800b500 <vQueueUnregisterQueue+0x50>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	4413      	add	r3, r2
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d10b      	bne.n	800b4e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b500 <vQueueUnregisterQueue+0x50>)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b4d8:	4a09      	ldr	r2, [pc, #36]	@ (800b500 <vQueueUnregisterQueue+0x50>)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	4413      	add	r3, r2
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	605a      	str	r2, [r3, #4]
				break;
 800b4e4:	e006      	b.n	800b4f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b07      	cmp	r3, #7
 800b4f0:	d9e5      	bls.n	800b4be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	20001508 	.word	0x20001508

0800b504 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b514:	f001 fdb0 	bl	800d078 <vPortEnterCritical>
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b51e:	b25b      	sxtb	r3, r3
 800b520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b524:	d103      	bne.n	800b52e <vQueueWaitForMessageRestricted+0x2a>
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b534:	b25b      	sxtb	r3, r3
 800b536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53a:	d103      	bne.n	800b544 <vQueueWaitForMessageRestricted+0x40>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b544:	f001 fdca 	bl	800d0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d106      	bne.n	800b55e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	3324      	adds	r3, #36	@ 0x24
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	68b9      	ldr	r1, [r7, #8]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fc97 	bl	800be8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b55e:	6978      	ldr	r0, [r7, #20]
 800b560:	f7ff fefb 	bl	800b35a <prvUnlockQueue>
	}
 800b564:	bf00      	nop
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08c      	sub	sp, #48	@ 0x30
 800b570:	af04      	add	r7, sp, #16
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	4613      	mov	r3, r2
 800b57a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b57c:	88fb      	ldrh	r3, [r7, #6]
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4618      	mov	r0, r3
 800b582:	f001 fe9b 	bl	800d2bc <pvPortMalloc>
 800b586:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00e      	beq.n	800b5ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b58e:	2054      	movs	r0, #84	@ 0x54
 800b590:	f001 fe94 	bl	800d2bc <pvPortMalloc>
 800b594:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5a2:	e005      	b.n	800b5b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5a4:	6978      	ldr	r0, [r7, #20]
 800b5a6:	f001 ff57 	bl	800d458 <vPortFree>
 800b5aa:	e001      	b.n	800b5b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d013      	beq.n	800b5de <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5b6:	88fa      	ldrh	r2, [r7, #6]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	68b9      	ldr	r1, [r7, #8]
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 f80e 	bl	800b5ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5d2:	69f8      	ldr	r0, [r7, #28]
 800b5d4:	f000 f894 	bl	800b700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	61bb      	str	r3, [r7, #24]
 800b5dc:	e002      	b.n	800b5e4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5de:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5e4:	69bb      	ldr	r3, [r7, #24]
	}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3720      	adds	r7, #32
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b088      	sub	sp, #32
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b606:	3b01      	subs	r3, #1
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	f023 0307 	bic.w	r3, r3, #7
 800b614:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00b      	beq.n	800b638 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	617b      	str	r3, [r7, #20]
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	e7fd      	b.n	800b634 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d01f      	beq.n	800b67e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
 800b642:	e012      	b.n	800b66a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	4413      	add	r3, r2
 800b64a:	7819      	ldrb	r1, [r3, #0]
 800b64c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	4413      	add	r3, r2
 800b652:	3334      	adds	r3, #52	@ 0x34
 800b654:	460a      	mov	r2, r1
 800b656:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	4413      	add	r3, r2
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	3301      	adds	r3, #1
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	2b0f      	cmp	r3, #15
 800b66e:	d9e9      	bls.n	800b644 <prvInitialiseNewTask+0x56>
 800b670:	e000      	b.n	800b674 <prvInitialiseNewTask+0x86>
			{
				break;
 800b672:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	2200      	movs	r2, #0
 800b678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b67c:	e003      	b.n	800b686 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b688:	2b06      	cmp	r3, #6
 800b68a:	d901      	bls.n	800b690 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b68c:	2306      	movs	r3, #6
 800b68e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b694:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b69a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69e:	2200      	movs	r2, #0
 800b6a0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe ff65 	bl	800a576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ae:	3318      	adds	r3, #24
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe ff60 	bl	800a576 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6be:	f1c3 0207 	rsb	r2, r3, #7
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	68f9      	ldr	r1, [r7, #12]
 800b6de:	69b8      	ldr	r0, [r7, #24]
 800b6e0:	f001 fb9a 	bl	800ce18 <pxPortInitialiseStack>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b708:	f001 fcb6 	bl	800d078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b70c:	4b2a      	ldr	r3, [pc, #168]	@ (800b7b8 <prvAddNewTaskToReadyList+0xb8>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	4a29      	ldr	r2, [pc, #164]	@ (800b7b8 <prvAddNewTaskToReadyList+0xb8>)
 800b714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b716:	4b29      	ldr	r3, [pc, #164]	@ (800b7bc <prvAddNewTaskToReadyList+0xbc>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b71e:	4a27      	ldr	r2, [pc, #156]	@ (800b7bc <prvAddNewTaskToReadyList+0xbc>)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b724:	4b24      	ldr	r3, [pc, #144]	@ (800b7b8 <prvAddNewTaskToReadyList+0xb8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d110      	bne.n	800b74e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b72c:	f000 fd40 	bl	800c1b0 <prvInitialiseTaskLists>
 800b730:	e00d      	b.n	800b74e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b732:	4b23      	ldr	r3, [pc, #140]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b73a:	4b20      	ldr	r3, [pc, #128]	@ (800b7bc <prvAddNewTaskToReadyList+0xbc>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b744:	429a      	cmp	r2, r3
 800b746:	d802      	bhi.n	800b74e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b748:	4a1c      	ldr	r2, [pc, #112]	@ (800b7bc <prvAddNewTaskToReadyList+0xbc>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b74e:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c4 <prvAddNewTaskToReadyList+0xc4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a1b      	ldr	r2, [pc, #108]	@ (800b7c4 <prvAddNewTaskToReadyList+0xc4>)
 800b756:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75c:	2201      	movs	r2, #1
 800b75e:	409a      	lsls	r2, r3
 800b760:	4b19      	ldr	r3, [pc, #100]	@ (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4313      	orrs	r3, r2
 800b766:	4a18      	ldr	r2, [pc, #96]	@ (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4a15      	ldr	r2, [pc, #84]	@ (800b7cc <prvAddNewTaskToReadyList+0xcc>)
 800b778:	441a      	add	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3304      	adds	r3, #4
 800b77e:	4619      	mov	r1, r3
 800b780:	4610      	mov	r0, r2
 800b782:	f7fe ff05 	bl	800a590 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b786:	f001 fca9 	bl	800d0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b78a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00e      	beq.n	800b7b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b792:	4b0a      	ldr	r3, [pc, #40]	@ (800b7bc <prvAddNewTaskToReadyList+0xbc>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d207      	bcs.n	800b7b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d0 <prvAddNewTaskToReadyList+0xd0>)
 800b7a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	20001648 	.word	0x20001648
 800b7bc:	20001548 	.word	0x20001548
 800b7c0:	20001654 	.word	0x20001654
 800b7c4:	20001664 	.word	0x20001664
 800b7c8:	20001650 	.word	0x20001650
 800b7cc:	2000154c 	.word	0x2000154c
 800b7d0:	e000ed04 	.word	0xe000ed04

0800b7d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b7dc:	f001 fc4c 	bl	800d078 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <vTaskDelete+0x18>
 800b7e6:	4b39      	ldr	r3, [pc, #228]	@ (800b8cc <vTaskDelete+0xf8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	e000      	b.n	800b7ee <vTaskDelete+0x1a>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe ff28 	bl	800a64a <uxListRemove>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d115      	bne.n	800b82c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b804:	4932      	ldr	r1, [pc, #200]	@ (800b8d0 <vTaskDelete+0xfc>)
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	440b      	add	r3, r1
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10a      	bne.n	800b82c <vTaskDelete+0x58>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	2201      	movs	r2, #1
 800b81c:	fa02 f303 	lsl.w	r3, r2, r3
 800b820:	43da      	mvns	r2, r3
 800b822:	4b2c      	ldr	r3, [pc, #176]	@ (800b8d4 <vTaskDelete+0x100>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4013      	ands	r3, r2
 800b828:	4a2a      	ldr	r2, [pc, #168]	@ (800b8d4 <vTaskDelete+0x100>)
 800b82a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3318      	adds	r3, #24
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe ff06 	bl	800a64a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b83e:	4b26      	ldr	r3, [pc, #152]	@ (800b8d8 <vTaskDelete+0x104>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	4a24      	ldr	r2, [pc, #144]	@ (800b8d8 <vTaskDelete+0x104>)
 800b846:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b848:	4b20      	ldr	r3, [pc, #128]	@ (800b8cc <vTaskDelete+0xf8>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d10b      	bne.n	800b86a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3304      	adds	r3, #4
 800b856:	4619      	mov	r1, r3
 800b858:	4820      	ldr	r0, [pc, #128]	@ (800b8dc <vTaskDelete+0x108>)
 800b85a:	f7fe fe99 	bl	800a590 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b85e:	4b20      	ldr	r3, [pc, #128]	@ (800b8e0 <vTaskDelete+0x10c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3301      	adds	r3, #1
 800b864:	4a1e      	ldr	r2, [pc, #120]	@ (800b8e0 <vTaskDelete+0x10c>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	e009      	b.n	800b87e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b86a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e4 <vTaskDelete+0x110>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3b01      	subs	r3, #1
 800b870:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e4 <vTaskDelete+0x110>)
 800b872:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fd09 	bl	800c28c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b87a:	f000 fd17 	bl	800c2ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b87e:	f001 fc2d 	bl	800d0dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b882:	4b19      	ldr	r3, [pc, #100]	@ (800b8e8 <vTaskDelete+0x114>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d01c      	beq.n	800b8c4 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800b88a:	4b10      	ldr	r3, [pc, #64]	@ (800b8cc <vTaskDelete+0xf8>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	429a      	cmp	r2, r3
 800b892:	d117      	bne.n	800b8c4 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b894:	4b15      	ldr	r3, [pc, #84]	@ (800b8ec <vTaskDelete+0x118>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <vTaskDelete+0xe0>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60bb      	str	r3, [r7, #8]
}
 800b8ae:	bf00      	nop
 800b8b0:	bf00      	nop
 800b8b2:	e7fd      	b.n	800b8b0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b8f0 <vTaskDelete+0x11c>)
 800b8b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20001548 	.word	0x20001548
 800b8d0:	2000154c 	.word	0x2000154c
 800b8d4:	20001650 	.word	0x20001650
 800b8d8:	20001664 	.word	0x20001664
 800b8dc:	2000161c 	.word	0x2000161c
 800b8e0:	20001630 	.word	0x20001630
 800b8e4:	20001648 	.word	0x20001648
 800b8e8:	20001654 	.word	0x20001654
 800b8ec:	20001670 	.word	0x20001670
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d018      	beq.n	800b938 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b906:	4b14      	ldr	r3, [pc, #80]	@ (800b958 <vTaskDelay+0x64>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00b      	beq.n	800b926 <vTaskDelay+0x32>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60bb      	str	r3, [r7, #8]
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	e7fd      	b.n	800b922 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b926:	f000 f869 	bl	800b9fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b92a:	2100      	movs	r1, #0
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 feb5 	bl	800c69c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b932:	f000 f871 	bl	800ba18 <xTaskResumeAll>
 800b936:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d107      	bne.n	800b94e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b93e:	4b07      	ldr	r3, [pc, #28]	@ (800b95c <vTaskDelay+0x68>)
 800b940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20001670 	.word	0x20001670
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b966:	4b1f      	ldr	r3, [pc, #124]	@ (800b9e4 <vTaskStartScheduler+0x84>)
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	2300      	movs	r3, #0
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	2300      	movs	r3, #0
 800b970:	2280      	movs	r2, #128	@ 0x80
 800b972:	491d      	ldr	r1, [pc, #116]	@ (800b9e8 <vTaskStartScheduler+0x88>)
 800b974:	481d      	ldr	r0, [pc, #116]	@ (800b9ec <vTaskStartScheduler+0x8c>)
 800b976:	f7ff fdf9 	bl	800b56c <xTaskCreate>
 800b97a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d102      	bne.n	800b988 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b982:	f000 fef1 	bl	800c768 <xTimerCreateTimerTask>
 800b986:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d116      	bne.n	800b9bc <vTaskStartScheduler+0x5c>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	60bb      	str	r3, [r7, #8]
}
 800b9a0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9a2:	4b13      	ldr	r3, [pc, #76]	@ (800b9f0 <vTaskStartScheduler+0x90>)
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9aa:	4b12      	ldr	r3, [pc, #72]	@ (800b9f4 <vTaskStartScheduler+0x94>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9b0:	4b11      	ldr	r3, [pc, #68]	@ (800b9f8 <vTaskStartScheduler+0x98>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9b6:	f001 fabb 	bl	800cf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9ba:	e00f      	b.n	800b9dc <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c2:	d10b      	bne.n	800b9dc <vTaskStartScheduler+0x7c>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	607b      	str	r3, [r7, #4]
}
 800b9d6:	bf00      	nop
 800b9d8:	bf00      	nop
 800b9da:	e7fd      	b.n	800b9d8 <vTaskStartScheduler+0x78>
}
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	2000166c 	.word	0x2000166c
 800b9e8:	0801dccc 	.word	0x0801dccc
 800b9ec:	0800c181 	.word	0x0800c181
 800b9f0:	20001668 	.word	0x20001668
 800b9f4:	20001654 	.word	0x20001654
 800b9f8:	2000164c 	.word	0x2000164c

0800b9fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba00:	4b04      	ldr	r3, [pc, #16]	@ (800ba14 <vTaskSuspendAll+0x18>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3301      	adds	r3, #1
 800ba06:	4a03      	ldr	r2, [pc, #12]	@ (800ba14 <vTaskSuspendAll+0x18>)
 800ba08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba0a:	bf00      	nop
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	20001670 	.word	0x20001670

0800ba18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba26:	4b42      	ldr	r3, [pc, #264]	@ (800bb30 <xTaskResumeAll+0x118>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <xTaskResumeAll+0x2e>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	603b      	str	r3, [r7, #0]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba46:	f001 fb17 	bl	800d078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba4a:	4b39      	ldr	r3, [pc, #228]	@ (800bb30 <xTaskResumeAll+0x118>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	4a37      	ldr	r2, [pc, #220]	@ (800bb30 <xTaskResumeAll+0x118>)
 800ba52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba54:	4b36      	ldr	r3, [pc, #216]	@ (800bb30 <xTaskResumeAll+0x118>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d161      	bne.n	800bb20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba5c:	4b35      	ldr	r3, [pc, #212]	@ (800bb34 <xTaskResumeAll+0x11c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d05d      	beq.n	800bb20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba64:	e02e      	b.n	800bac4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba66:	4b34      	ldr	r3, [pc, #208]	@ (800bb38 <xTaskResumeAll+0x120>)
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3318      	adds	r3, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe fde9 	bl	800a64a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fde4 	bl	800a64a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba86:	2201      	movs	r2, #1
 800ba88:	409a      	lsls	r2, r3
 800ba8a:	4b2c      	ldr	r3, [pc, #176]	@ (800bb3c <xTaskResumeAll+0x124>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	4a2a      	ldr	r2, [pc, #168]	@ (800bb3c <xTaskResumeAll+0x124>)
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4a27      	ldr	r2, [pc, #156]	@ (800bb40 <xTaskResumeAll+0x128>)
 800baa2:	441a      	add	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4619      	mov	r1, r3
 800baaa:	4610      	mov	r0, r2
 800baac:	f7fe fd70 	bl	800a590 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab4:	4b23      	ldr	r3, [pc, #140]	@ (800bb44 <xTaskResumeAll+0x12c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baba:	429a      	cmp	r2, r3
 800babc:	d302      	bcc.n	800bac4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800babe:	4b22      	ldr	r3, [pc, #136]	@ (800bb48 <xTaskResumeAll+0x130>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bac4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb38 <xTaskResumeAll+0x120>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1cc      	bne.n	800ba66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bad2:	f000 fbeb 	bl	800c2ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bad6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <xTaskResumeAll+0x134>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d010      	beq.n	800bb04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bae2:	f000 f859 	bl	800bb98 <xTaskIncrementTick>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800baec:	4b16      	ldr	r3, [pc, #88]	@ (800bb48 <xTaskResumeAll+0x130>)
 800baee:	2201      	movs	r2, #1
 800baf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1f1      	bne.n	800bae2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bafe:	4b13      	ldr	r3, [pc, #76]	@ (800bb4c <xTaskResumeAll+0x134>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb04:	4b10      	ldr	r3, [pc, #64]	@ (800bb48 <xTaskResumeAll+0x130>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d009      	beq.n	800bb20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb10:	4b0f      	ldr	r3, [pc, #60]	@ (800bb50 <xTaskResumeAll+0x138>)
 800bb12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb20:	f001 fadc 	bl	800d0dc <vPortExitCritical>

	return xAlreadyYielded;
 800bb24:	68bb      	ldr	r3, [r7, #8]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20001670 	.word	0x20001670
 800bb34:	20001648 	.word	0x20001648
 800bb38:	20001608 	.word	0x20001608
 800bb3c:	20001650 	.word	0x20001650
 800bb40:	2000154c 	.word	0x2000154c
 800bb44:	20001548 	.word	0x20001548
 800bb48:	2000165c 	.word	0x2000165c
 800bb4c:	20001658 	.word	0x20001658
 800bb50:	e000ed04 	.word	0xe000ed04

0800bb54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb5a:	4b05      	ldr	r3, [pc, #20]	@ (800bb70 <xTaskGetTickCount+0x1c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb60:	687b      	ldr	r3, [r7, #4]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	2000164c 	.word	0x2000164c

0800bb74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb7a:	f001 fb5d 	bl	800d238 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb7e:	2300      	movs	r3, #0
 800bb80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb82:	4b04      	ldr	r3, [pc, #16]	@ (800bb94 <xTaskGetTickCountFromISR+0x20>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb88:	683b      	ldr	r3, [r7, #0]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	2000164c 	.word	0x2000164c

0800bb98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bba2:	4b4f      	ldr	r3, [pc, #316]	@ (800bce0 <xTaskIncrementTick+0x148>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f040 808f 	bne.w	800bcca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbac:	4b4d      	ldr	r3, [pc, #308]	@ (800bce4 <xTaskIncrementTick+0x14c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbb4:	4a4b      	ldr	r2, [pc, #300]	@ (800bce4 <xTaskIncrementTick+0x14c>)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d121      	bne.n	800bc04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbc0:	4b49      	ldr	r3, [pc, #292]	@ (800bce8 <xTaskIncrementTick+0x150>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00b      	beq.n	800bbe2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	603b      	str	r3, [r7, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	bf00      	nop
 800bbe0:	e7fd      	b.n	800bbde <xTaskIncrementTick+0x46>
 800bbe2:	4b41      	ldr	r3, [pc, #260]	@ (800bce8 <xTaskIncrementTick+0x150>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	4b40      	ldr	r3, [pc, #256]	@ (800bcec <xTaskIncrementTick+0x154>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a3e      	ldr	r2, [pc, #248]	@ (800bce8 <xTaskIncrementTick+0x150>)
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	4a3e      	ldr	r2, [pc, #248]	@ (800bcec <xTaskIncrementTick+0x154>)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	4b3e      	ldr	r3, [pc, #248]	@ (800bcf0 <xTaskIncrementTick+0x158>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	4a3c      	ldr	r2, [pc, #240]	@ (800bcf0 <xTaskIncrementTick+0x158>)
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	f000 fb54 	bl	800c2ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc04:	4b3b      	ldr	r3, [pc, #236]	@ (800bcf4 <xTaskIncrementTick+0x15c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d348      	bcc.n	800bca0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc0e:	4b36      	ldr	r3, [pc, #216]	@ (800bce8 <xTaskIncrementTick+0x150>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d104      	bne.n	800bc22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc18:	4b36      	ldr	r3, [pc, #216]	@ (800bcf4 <xTaskIncrementTick+0x15c>)
 800bc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1e:	601a      	str	r2, [r3, #0]
					break;
 800bc20:	e03e      	b.n	800bca0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc22:	4b31      	ldr	r3, [pc, #196]	@ (800bce8 <xTaskIncrementTick+0x150>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d203      	bcs.n	800bc42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc3a:	4a2e      	ldr	r2, [pc, #184]	@ (800bcf4 <xTaskIncrementTick+0x15c>)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc40:	e02e      	b.n	800bca0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fcff 	bl	800a64a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	3318      	adds	r3, #24
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fcf6 	bl	800a64a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc62:	2201      	movs	r2, #1
 800bc64:	409a      	lsls	r2, r3
 800bc66:	4b24      	ldr	r3, [pc, #144]	@ (800bcf8 <xTaskIncrementTick+0x160>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	4a22      	ldr	r2, [pc, #136]	@ (800bcf8 <xTaskIncrementTick+0x160>)
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4a1f      	ldr	r2, [pc, #124]	@ (800bcfc <xTaskIncrementTick+0x164>)
 800bc7e:	441a      	add	r2, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	3304      	adds	r3, #4
 800bc84:	4619      	mov	r1, r3
 800bc86:	4610      	mov	r0, r2
 800bc88:	f7fe fc82 	bl	800a590 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc90:	4b1b      	ldr	r3, [pc, #108]	@ (800bd00 <xTaskIncrementTick+0x168>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d3b9      	bcc.n	800bc0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc9e:	e7b6      	b.n	800bc0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bca0:	4b17      	ldr	r3, [pc, #92]	@ (800bd00 <xTaskIncrementTick+0x168>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bca6:	4915      	ldr	r1, [pc, #84]	@ (800bcfc <xTaskIncrementTick+0x164>)
 800bca8:	4613      	mov	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	440b      	add	r3, r1
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d901      	bls.n	800bcbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcbc:	4b11      	ldr	r3, [pc, #68]	@ (800bd04 <xTaskIncrementTick+0x16c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d007      	beq.n	800bcd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e004      	b.n	800bcd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcca:	4b0f      	ldr	r3, [pc, #60]	@ (800bd08 <xTaskIncrementTick+0x170>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	4a0d      	ldr	r2, [pc, #52]	@ (800bd08 <xTaskIncrementTick+0x170>)
 800bcd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcd4:	697b      	ldr	r3, [r7, #20]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20001670 	.word	0x20001670
 800bce4:	2000164c 	.word	0x2000164c
 800bce8:	20001600 	.word	0x20001600
 800bcec:	20001604 	.word	0x20001604
 800bcf0:	20001660 	.word	0x20001660
 800bcf4:	20001668 	.word	0x20001668
 800bcf8:	20001650 	.word	0x20001650
 800bcfc:	2000154c 	.word	0x2000154c
 800bd00:	20001548 	.word	0x20001548
 800bd04:	2000165c 	.word	0x2000165c
 800bd08:	20001658 	.word	0x20001658

0800bd0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd12:	4b27      	ldr	r3, [pc, #156]	@ (800bdb0 <vTaskSwitchContext+0xa4>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd1a:	4b26      	ldr	r3, [pc, #152]	@ (800bdb4 <vTaskSwitchContext+0xa8>)
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd20:	e040      	b.n	800bda4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bd22:	4b24      	ldr	r3, [pc, #144]	@ (800bdb4 <vTaskSwitchContext+0xa8>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd28:	4b23      	ldr	r3, [pc, #140]	@ (800bdb8 <vTaskSwitchContext+0xac>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	fab3 f383 	clz	r3, r3
 800bd34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bd36:	7afb      	ldrb	r3, [r7, #11]
 800bd38:	f1c3 031f 	rsb	r3, r3, #31
 800bd3c:	617b      	str	r3, [r7, #20]
 800bd3e:	491f      	ldr	r1, [pc, #124]	@ (800bdbc <vTaskSwitchContext+0xb0>)
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10b      	bne.n	800bd6a <vTaskSwitchContext+0x5e>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	607b      	str	r3, [r7, #4]
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	e7fd      	b.n	800bd66 <vTaskSwitchContext+0x5a>
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4a11      	ldr	r2, [pc, #68]	@ (800bdbc <vTaskSwitchContext+0xb0>)
 800bd76:	4413      	add	r3, r2
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	605a      	str	r2, [r3, #4]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d104      	bne.n	800bd9a <vTaskSwitchContext+0x8e>
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	605a      	str	r2, [r3, #4]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	4a07      	ldr	r2, [pc, #28]	@ (800bdc0 <vTaskSwitchContext+0xb4>)
 800bda2:	6013      	str	r3, [r2, #0]
}
 800bda4:	bf00      	nop
 800bda6:	371c      	adds	r7, #28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	20001670 	.word	0x20001670
 800bdb4:	2000165c 	.word	0x2000165c
 800bdb8:	20001650 	.word	0x20001650
 800bdbc:	2000154c 	.word	0x2000154c
 800bdc0:	20001548 	.word	0x20001548

0800bdc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10b      	bne.n	800bdec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	60fb      	str	r3, [r7, #12]
}
 800bde6:	bf00      	nop
 800bde8:	bf00      	nop
 800bdea:	e7fd      	b.n	800bde8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdec:	4b07      	ldr	r3, [pc, #28]	@ (800be0c <vTaskPlaceOnEventList+0x48>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3318      	adds	r3, #24
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7fe fbef 	bl	800a5d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	6838      	ldr	r0, [r7, #0]
 800bdfe:	f000 fc4d 	bl	800c69c <prvAddCurrentTaskToDelayedList>
}
 800be02:	bf00      	nop
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20001548 	.word	0x20001548

0800be10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d10b      	bne.n	800be3a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800be22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be26:	f383 8811 	msr	BASEPRI, r3
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	617b      	str	r3, [r7, #20]
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	e7fd      	b.n	800be36 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800be3a:	4b12      	ldr	r3, [pc, #72]	@ (800be84 <vTaskPlaceOnUnorderedEventList+0x74>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10b      	bne.n	800be5a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	613b      	str	r3, [r7, #16]
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	e7fd      	b.n	800be56 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800be5a:	4b0b      	ldr	r3, [pc, #44]	@ (800be88 <vTaskPlaceOnUnorderedEventList+0x78>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800be64:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be66:	4b08      	ldr	r3, [pc, #32]	@ (800be88 <vTaskPlaceOnUnorderedEventList+0x78>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	3318      	adds	r3, #24
 800be6c:	4619      	mov	r1, r3
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f7fe fb8e 	bl	800a590 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be74:	2101      	movs	r1, #1
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fc10 	bl	800c69c <prvAddCurrentTaskToDelayedList>
}
 800be7c:	bf00      	nop
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20001670 	.word	0x20001670
 800be88:	20001548 	.word	0x20001548

0800be8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10b      	bne.n	800beb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	617b      	str	r3, [r7, #20]
}
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
 800beb4:	e7fd      	b.n	800beb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bee0 <vTaskPlaceOnEventListRestricted+0x54>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3318      	adds	r3, #24
 800bebc:	4619      	mov	r1, r3
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f7fe fb66 	bl	800a590 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800beca:	f04f 33ff 	mov.w	r3, #4294967295
 800bece:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	68b8      	ldr	r0, [r7, #8]
 800bed4:	f000 fbe2 	bl	800c69c <prvAddCurrentTaskToDelayedList>
	}
 800bed8:	bf00      	nop
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20001548 	.word	0x20001548

0800bee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10b      	bne.n	800bf12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	60fb      	str	r3, [r7, #12]
}
 800bf0c:	bf00      	nop
 800bf0e:	bf00      	nop
 800bf10:	e7fd      	b.n	800bf0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	3318      	adds	r3, #24
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fb97 	bl	800a64a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf1c:	4b1d      	ldr	r3, [pc, #116]	@ (800bf94 <xTaskRemoveFromEventList+0xb0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d11c      	bne.n	800bf5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe fb8e 	bl	800a64a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf32:	2201      	movs	r2, #1
 800bf34:	409a      	lsls	r2, r3
 800bf36:	4b18      	ldr	r3, [pc, #96]	@ (800bf98 <xTaskRemoveFromEventList+0xb4>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	4a16      	ldr	r2, [pc, #88]	@ (800bf98 <xTaskRemoveFromEventList+0xb4>)
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf44:	4613      	mov	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4a13      	ldr	r2, [pc, #76]	@ (800bf9c <xTaskRemoveFromEventList+0xb8>)
 800bf4e:	441a      	add	r2, r3
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7fe fb1a 	bl	800a590 <vListInsertEnd>
 800bf5c:	e005      	b.n	800bf6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3318      	adds	r3, #24
 800bf62:	4619      	mov	r1, r3
 800bf64:	480e      	ldr	r0, [pc, #56]	@ (800bfa0 <xTaskRemoveFromEventList+0xbc>)
 800bf66:	f7fe fb13 	bl	800a590 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa4 <xTaskRemoveFromEventList+0xc0>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d905      	bls.n	800bf84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa8 <xTaskRemoveFromEventList+0xc4>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	e001      	b.n	800bf88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf84:	2300      	movs	r3, #0
 800bf86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf88:	697b      	ldr	r3, [r7, #20]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20001670 	.word	0x20001670
 800bf98:	20001650 	.word	0x20001650
 800bf9c:	2000154c 	.word	0x2000154c
 800bfa0:	20001608 	.word	0x20001608
 800bfa4:	20001548 	.word	0x20001548
 800bfa8:	2000165c 	.word	0x2000165c

0800bfac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800bfb6:	4b2a      	ldr	r3, [pc, #168]	@ (800c060 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10b      	bne.n	800bfd6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	613b      	str	r3, [r7, #16]
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	e7fd      	b.n	800bfd2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	60fb      	str	r3, [r7, #12]
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7fe fb20 	bl	800a64a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	3304      	adds	r3, #4
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fb1b 	bl	800a64a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c018:	2201      	movs	r2, #1
 800c01a:	409a      	lsls	r2, r3
 800c01c:	4b11      	ldr	r3, [pc, #68]	@ (800c064 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4313      	orrs	r3, r2
 800c022:	4a10      	ldr	r2, [pc, #64]	@ (800c064 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4a0d      	ldr	r2, [pc, #52]	@ (800c068 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c034:	441a      	add	r2, r3
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	3304      	adds	r3, #4
 800c03a:	4619      	mov	r1, r3
 800c03c:	4610      	mov	r0, r2
 800c03e:	f7fe faa7 	bl	800a590 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c046:	4b09      	ldr	r3, [pc, #36]	@ (800c06c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d902      	bls.n	800c056 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c050:	4b07      	ldr	r3, [pc, #28]	@ (800c070 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800c052:	2201      	movs	r2, #1
 800c054:	601a      	str	r2, [r3, #0]
	}
}
 800c056:	bf00      	nop
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20001670 	.word	0x20001670
 800c064:	20001650 	.word	0x20001650
 800c068:	2000154c 	.word	0x2000154c
 800c06c:	20001548 	.word	0x20001548
 800c070:	2000165c 	.word	0x2000165c

0800c074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c07c:	4b06      	ldr	r3, [pc, #24]	@ (800c098 <vTaskInternalSetTimeOutState+0x24>)
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c084:	4b05      	ldr	r3, [pc, #20]	@ (800c09c <vTaskInternalSetTimeOutState+0x28>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	605a      	str	r2, [r3, #4]
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	20001660 	.word	0x20001660
 800c09c:	2000164c 	.word	0x2000164c

0800c0a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	613b      	str	r3, [r7, #16]
}
 800c0c2:	bf00      	nop
 800c0c4:	bf00      	nop
 800c0c6:	e7fd      	b.n	800c0c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10b      	bne.n	800c0e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	60fb      	str	r3, [r7, #12]
}
 800c0e0:	bf00      	nop
 800c0e2:	bf00      	nop
 800c0e4:	e7fd      	b.n	800c0e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c0e6:	f000 ffc7 	bl	800d078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c160 <xTaskCheckForTimeOut+0xc0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d102      	bne.n	800c10a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
 800c108:	e023      	b.n	800c152 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	4b15      	ldr	r3, [pc, #84]	@ (800c164 <xTaskCheckForTimeOut+0xc4>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d007      	beq.n	800c126 <xTaskCheckForTimeOut+0x86>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d302      	bcc.n	800c126 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c120:	2301      	movs	r3, #1
 800c122:	61fb      	str	r3, [r7, #28]
 800c124:	e015      	b.n	800c152 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d20b      	bcs.n	800c148 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	1ad2      	subs	r2, r2, r3
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff ff99 	bl	800c074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c142:	2300      	movs	r3, #0
 800c144:	61fb      	str	r3, [r7, #28]
 800c146:	e004      	b.n	800c152 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c14e:	2301      	movs	r3, #1
 800c150:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c152:	f000 ffc3 	bl	800d0dc <vPortExitCritical>

	return xReturn;
 800c156:	69fb      	ldr	r3, [r7, #28]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3720      	adds	r7, #32
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	2000164c 	.word	0x2000164c
 800c164:	20001660 	.word	0x20001660

0800c168 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c168:	b480      	push	{r7}
 800c16a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c16c:	4b03      	ldr	r3, [pc, #12]	@ (800c17c <vTaskMissedYield+0x14>)
 800c16e:	2201      	movs	r2, #1
 800c170:	601a      	str	r2, [r3, #0]
}
 800c172:	bf00      	nop
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	2000165c 	.word	0x2000165c

0800c180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c188:	f000 f852 	bl	800c230 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c18c:	4b06      	ldr	r3, [pc, #24]	@ (800c1a8 <prvIdleTask+0x28>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d9f9      	bls.n	800c188 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c194:	4b05      	ldr	r3, [pc, #20]	@ (800c1ac <prvIdleTask+0x2c>)
 800c196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c1a4:	e7f0      	b.n	800c188 <prvIdleTask+0x8>
 800c1a6:	bf00      	nop
 800c1a8:	2000154c 	.word	0x2000154c
 800c1ac:	e000ed04 	.word	0xe000ed04

0800c1b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	607b      	str	r3, [r7, #4]
 800c1ba:	e00c      	b.n	800c1d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4a12      	ldr	r2, [pc, #72]	@ (800c210 <prvInitialiseTaskLists+0x60>)
 800c1c8:	4413      	add	r3, r2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe f9b3 	bl	800a536 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	607b      	str	r3, [r7, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b06      	cmp	r3, #6
 800c1da:	d9ef      	bls.n	800c1bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1dc:	480d      	ldr	r0, [pc, #52]	@ (800c214 <prvInitialiseTaskLists+0x64>)
 800c1de:	f7fe f9aa 	bl	800a536 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1e2:	480d      	ldr	r0, [pc, #52]	@ (800c218 <prvInitialiseTaskLists+0x68>)
 800c1e4:	f7fe f9a7 	bl	800a536 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1e8:	480c      	ldr	r0, [pc, #48]	@ (800c21c <prvInitialiseTaskLists+0x6c>)
 800c1ea:	f7fe f9a4 	bl	800a536 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1ee:	480c      	ldr	r0, [pc, #48]	@ (800c220 <prvInitialiseTaskLists+0x70>)
 800c1f0:	f7fe f9a1 	bl	800a536 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1f4:	480b      	ldr	r0, [pc, #44]	@ (800c224 <prvInitialiseTaskLists+0x74>)
 800c1f6:	f7fe f99e 	bl	800a536 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c228 <prvInitialiseTaskLists+0x78>)
 800c1fc:	4a05      	ldr	r2, [pc, #20]	@ (800c214 <prvInitialiseTaskLists+0x64>)
 800c1fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c200:	4b0a      	ldr	r3, [pc, #40]	@ (800c22c <prvInitialiseTaskLists+0x7c>)
 800c202:	4a05      	ldr	r2, [pc, #20]	@ (800c218 <prvInitialiseTaskLists+0x68>)
 800c204:	601a      	str	r2, [r3, #0]
}
 800c206:	bf00      	nop
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	2000154c 	.word	0x2000154c
 800c214:	200015d8 	.word	0x200015d8
 800c218:	200015ec 	.word	0x200015ec
 800c21c:	20001608 	.word	0x20001608
 800c220:	2000161c 	.word	0x2000161c
 800c224:	20001634 	.word	0x20001634
 800c228:	20001600 	.word	0x20001600
 800c22c:	20001604 	.word	0x20001604

0800c230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c236:	e019      	b.n	800c26c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c238:	f000 ff1e 	bl	800d078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23c:	4b10      	ldr	r3, [pc, #64]	@ (800c280 <prvCheckTasksWaitingTermination+0x50>)
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3304      	adds	r3, #4
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fe f9fe 	bl	800a64a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c24e:	4b0d      	ldr	r3, [pc, #52]	@ (800c284 <prvCheckTasksWaitingTermination+0x54>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3b01      	subs	r3, #1
 800c254:	4a0b      	ldr	r2, [pc, #44]	@ (800c284 <prvCheckTasksWaitingTermination+0x54>)
 800c256:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c258:	4b0b      	ldr	r3, [pc, #44]	@ (800c288 <prvCheckTasksWaitingTermination+0x58>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4a0a      	ldr	r2, [pc, #40]	@ (800c288 <prvCheckTasksWaitingTermination+0x58>)
 800c260:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c262:	f000 ff3b 	bl	800d0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f810 	bl	800c28c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c26c:	4b06      	ldr	r3, [pc, #24]	@ (800c288 <prvCheckTasksWaitingTermination+0x58>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e1      	bne.n	800c238 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	2000161c 	.word	0x2000161c
 800c284:	20001648 	.word	0x20001648
 800c288:	20001630 	.word	0x20001630

0800c28c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c298:	4618      	mov	r0, r3
 800c29a:	f001 f8dd 	bl	800d458 <vPortFree>
			vPortFree( pxTCB );
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f001 f8da 	bl	800d458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c2e4 <prvResetNextTaskUnblockTime+0x38>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d104      	bne.n	800c2c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c2be:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2c4:	e008      	b.n	800c2d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2c6:	4b07      	ldr	r3, [pc, #28]	@ (800c2e4 <prvResetNextTaskUnblockTime+0x38>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4a04      	ldr	r2, [pc, #16]	@ (800c2e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c2d6:	6013      	str	r3, [r2, #0]
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	20001600 	.word	0x20001600
 800c2e8:	20001668 	.word	0x20001668

0800c2ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c320 <xTaskGetSchedulerState+0x34>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d102      	bne.n	800c300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	607b      	str	r3, [r7, #4]
 800c2fe:	e008      	b.n	800c312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c300:	4b08      	ldr	r3, [pc, #32]	@ (800c324 <xTaskGetSchedulerState+0x38>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d102      	bne.n	800c30e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c308:	2302      	movs	r3, #2
 800c30a:	607b      	str	r3, [r7, #4]
 800c30c:	e001      	b.n	800c312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c30e:	2300      	movs	r3, #0
 800c310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c312:	687b      	ldr	r3, [r7, #4]
	}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	20001654 	.word	0x20001654
 800c324:	20001670 	.word	0x20001670

0800c328 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d05e      	beq.n	800c3fc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c342:	4b31      	ldr	r3, [pc, #196]	@ (800c408 <xTaskPriorityInherit+0xe0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c348:	429a      	cmp	r2, r3
 800c34a:	d24e      	bcs.n	800c3ea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	2b00      	cmp	r3, #0
 800c352:	db06      	blt.n	800c362 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c354:	4b2c      	ldr	r3, [pc, #176]	@ (800c408 <xTaskPriorityInherit+0xe0>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35a:	f1c3 0207 	rsb	r2, r3, #7
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	6959      	ldr	r1, [r3, #20]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c36a:	4613      	mov	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4a26      	ldr	r2, [pc, #152]	@ (800c40c <xTaskPriorityInherit+0xe4>)
 800c374:	4413      	add	r3, r2
 800c376:	4299      	cmp	r1, r3
 800c378:	d12f      	bne.n	800c3da <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe f963 	bl	800a64a <uxListRemove>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10a      	bne.n	800c3a0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38e:	2201      	movs	r2, #1
 800c390:	fa02 f303 	lsl.w	r3, r2, r3
 800c394:	43da      	mvns	r2, r3
 800c396:	4b1e      	ldr	r3, [pc, #120]	@ (800c410 <xTaskPriorityInherit+0xe8>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4013      	ands	r3, r2
 800c39c:	4a1c      	ldr	r2, [pc, #112]	@ (800c410 <xTaskPriorityInherit+0xe8>)
 800c39e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3a0:	4b19      	ldr	r3, [pc, #100]	@ (800c408 <xTaskPriorityInherit+0xe0>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	409a      	lsls	r2, r3
 800c3b2:	4b17      	ldr	r3, [pc, #92]	@ (800c410 <xTaskPriorityInherit+0xe8>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	4a15      	ldr	r2, [pc, #84]	@ (800c410 <xTaskPriorityInherit+0xe8>)
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4a10      	ldr	r2, [pc, #64]	@ (800c40c <xTaskPriorityInherit+0xe4>)
 800c3ca:	441a      	add	r2, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f7fe f8dc 	bl	800a590 <vListInsertEnd>
 800c3d8:	e004      	b.n	800c3e4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3da:	4b0b      	ldr	r3, [pc, #44]	@ (800c408 <xTaskPriorityInherit+0xe0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	e008      	b.n	800c3fc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3ee:	4b06      	ldr	r3, [pc, #24]	@ (800c408 <xTaskPriorityInherit+0xe0>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d201      	bcs.n	800c3fc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
	}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20001548 	.word	0x20001548
 800c40c:	2000154c 	.word	0x2000154c
 800c410:	20001650 	.word	0x20001650

0800c414 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d070      	beq.n	800c50c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c42a:	4b3b      	ldr	r3, [pc, #236]	@ (800c518 <xTaskPriorityDisinherit+0x104>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	429a      	cmp	r2, r3
 800c432:	d00b      	beq.n	800c44c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60fb      	str	r3, [r7, #12]
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10b      	bne.n	800c46c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	60bb      	str	r3, [r7, #8]
}
 800c466:	bf00      	nop
 800c468:	bf00      	nop
 800c46a:	e7fd      	b.n	800c468 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c470:	1e5a      	subs	r2, r3, #1
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c47e:	429a      	cmp	r2, r3
 800c480:	d044      	beq.n	800c50c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c486:	2b00      	cmp	r3, #0
 800c488:	d140      	bne.n	800c50c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f8db 	bl	800a64a <uxListRemove>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d115      	bne.n	800c4c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c49e:	491f      	ldr	r1, [pc, #124]	@ (800c51c <xTaskPriorityDisinherit+0x108>)
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTaskPriorityDisinherit+0xb2>
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	43da      	mvns	r2, r3
 800c4bc:	4b18      	ldr	r3, [pc, #96]	@ (800c520 <xTaskPriorityDisinherit+0x10c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	4a17      	ldr	r2, [pc, #92]	@ (800c520 <xTaskPriorityDisinherit+0x10c>)
 800c4c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d2:	f1c3 0207 	rsb	r2, r3, #7
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4de:	2201      	movs	r2, #1
 800c4e0:	409a      	lsls	r2, r3
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c520 <xTaskPriorityDisinherit+0x10c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	4a0d      	ldr	r2, [pc, #52]	@ (800c520 <xTaskPriorityDisinherit+0x10c>)
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4a08      	ldr	r2, [pc, #32]	@ (800c51c <xTaskPriorityDisinherit+0x108>)
 800c4fa:	441a      	add	r2, r3
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fe f844 	bl	800a590 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c508:	2301      	movs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c50c:	697b      	ldr	r3, [r7, #20]
	}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20001548 	.word	0x20001548
 800c51c:	2000154c 	.word	0x2000154c
 800c520:	20001650 	.word	0x20001650

0800c524 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c532:	2301      	movs	r3, #1
 800c534:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d079      	beq.n	800c630 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	60fb      	str	r3, [r7, #12]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d902      	bls.n	800c56c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	e002      	b.n	800c572 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c570:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d059      	beq.n	800c630 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	429a      	cmp	r2, r3
 800c584:	d154      	bne.n	800c630 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c586:	4b2c      	ldr	r3, [pc, #176]	@ (800c638 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	69ba      	ldr	r2, [r7, #24]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d10b      	bne.n	800c5a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	60bb      	str	r3, [r7, #8]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	db04      	blt.n	800c5c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	f1c3 0207 	rsb	r2, r3, #7
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	6959      	ldr	r1, [r3, #20]
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	4a19      	ldr	r2, [pc, #100]	@ (800c63c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c5d6:	4413      	add	r3, r2
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	d129      	bne.n	800c630 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe f832 	bl	800a64a <uxListRemove>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	43da      	mvns	r2, r3
 800c5f8:	4b11      	ldr	r3, [pc, #68]	@ (800c640 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	4a10      	ldr	r2, [pc, #64]	@ (800c640 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c600:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c606:	2201      	movs	r2, #1
 800c608:	409a      	lsls	r2, r3
 800c60a:	4b0d      	ldr	r3, [pc, #52]	@ (800c640 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4313      	orrs	r3, r2
 800c610:	4a0b      	ldr	r2, [pc, #44]	@ (800c640 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c612:	6013      	str	r3, [r2, #0]
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c618:	4613      	mov	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4413      	add	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4a06      	ldr	r2, [pc, #24]	@ (800c63c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c622:	441a      	add	r2, r3
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	3304      	adds	r3, #4
 800c628:	4619      	mov	r1, r3
 800c62a:	4610      	mov	r0, r2
 800c62c:	f7fd ffb0 	bl	800a590 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c630:	bf00      	nop
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20001548 	.word	0x20001548
 800c63c:	2000154c 	.word	0x2000154c
 800c640:	20001650 	.word	0x20001650

0800c644 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c64a:	4b09      	ldr	r3, [pc, #36]	@ (800c670 <uxTaskResetEventItemValue+0x2c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c652:	4b07      	ldr	r3, [pc, #28]	@ (800c670 <uxTaskResetEventItemValue+0x2c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c658:	4b05      	ldr	r3, [pc, #20]	@ (800c670 <uxTaskResetEventItemValue+0x2c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f1c2 0207 	rsb	r2, r2, #7
 800c660:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c662:	687b      	ldr	r3, [r7, #4]
}
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	20001548 	.word	0x20001548

0800c674 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c678:	4b07      	ldr	r3, [pc, #28]	@ (800c698 <pvTaskIncrementMutexHeldCount+0x24>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d004      	beq.n	800c68a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c680:	4b05      	ldr	r3, [pc, #20]	@ (800c698 <pvTaskIncrementMutexHeldCount+0x24>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c686:	3201      	adds	r2, #1
 800c688:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c68a:	4b03      	ldr	r3, [pc, #12]	@ (800c698 <pvTaskIncrementMutexHeldCount+0x24>)
 800c68c:	681b      	ldr	r3, [r3, #0]
	}
 800c68e:	4618      	mov	r0, r3
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	20001548 	.word	0x20001548

0800c69c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6a6:	4b29      	ldr	r3, [pc, #164]	@ (800c74c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ac:	4b28      	ldr	r3, [pc, #160]	@ (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fd ffc9 	bl	800a64a <uxListRemove>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c6be:	4b24      	ldr	r3, [pc, #144]	@ (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ca:	43da      	mvns	r2, r3
 800c6cc:	4b21      	ldr	r3, [pc, #132]	@ (800c754 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	4a20      	ldr	r2, [pc, #128]	@ (800c754 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6dc:	d10a      	bne.n	800c6f4 <prvAddCurrentTaskToDelayedList+0x58>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d007      	beq.n	800c6f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	481a      	ldr	r0, [pc, #104]	@ (800c758 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c6ee:	f7fd ff4f 	bl	800a590 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6f2:	e026      	b.n	800c742 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6fc:	4b14      	ldr	r3, [pc, #80]	@ (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d209      	bcs.n	800c720 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c70c:	4b13      	ldr	r3, [pc, #76]	@ (800c75c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	4b0f      	ldr	r3, [pc, #60]	@ (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3304      	adds	r3, #4
 800c716:	4619      	mov	r1, r3
 800c718:	4610      	mov	r0, r2
 800c71a:	f7fd ff5d 	bl	800a5d8 <vListInsert>
}
 800c71e:	e010      	b.n	800c742 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c720:	4b0f      	ldr	r3, [pc, #60]	@ (800c760 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	4b0a      	ldr	r3, [pc, #40]	@ (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3304      	adds	r3, #4
 800c72a:	4619      	mov	r1, r3
 800c72c:	4610      	mov	r0, r2
 800c72e:	f7fd ff53 	bl	800a5d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c732:	4b0c      	ldr	r3, [pc, #48]	@ (800c764 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d202      	bcs.n	800c742 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c73c:	4a09      	ldr	r2, [pc, #36]	@ (800c764 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6013      	str	r3, [r2, #0]
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	2000164c 	.word	0x2000164c
 800c750:	20001548 	.word	0x20001548
 800c754:	20001650 	.word	0x20001650
 800c758:	20001634 	.word	0x20001634
 800c75c:	20001604 	.word	0x20001604
 800c760:	20001600 	.word	0x20001600
 800c764:	20001668 	.word	0x20001668

0800c768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c76e:	2300      	movs	r3, #0
 800c770:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c772:	f000 fafb 	bl	800cd6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c776:	4b11      	ldr	r3, [pc, #68]	@ (800c7bc <xTimerCreateTimerTask+0x54>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00a      	beq.n	800c794 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c77e:	4b10      	ldr	r3, [pc, #64]	@ (800c7c0 <xTimerCreateTimerTask+0x58>)
 800c780:	9301      	str	r3, [sp, #4]
 800c782:	2306      	movs	r3, #6
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	2300      	movs	r3, #0
 800c788:	2280      	movs	r2, #128	@ 0x80
 800c78a:	490e      	ldr	r1, [pc, #56]	@ (800c7c4 <xTimerCreateTimerTask+0x5c>)
 800c78c:	480e      	ldr	r0, [pc, #56]	@ (800c7c8 <xTimerCreateTimerTask+0x60>)
 800c78e:	f7fe feed 	bl	800b56c <xTaskCreate>
 800c792:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10b      	bne.n	800c7b2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	603b      	str	r3, [r7, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	bf00      	nop
 800c7b0:	e7fd      	b.n	800c7ae <xTimerCreateTimerTask+0x46>
	return xReturn;
 800c7b2:	687b      	ldr	r3, [r7, #4]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	200016a4 	.word	0x200016a4
 800c7c0:	200016a8 	.word	0x200016a8
 800c7c4:	0801dcd4 	.word	0x0801dcd4
 800c7c8:	0800c905 	.word	0x0800c905

0800c7cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08a      	sub	sp, #40	@ 0x28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <xTimerGenericCommand+0x30>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	623b      	str	r3, [r7, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	e7fd      	b.n	800c7f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c7fc:	4b19      	ldr	r3, [pc, #100]	@ (800c864 <xTimerGenericCommand+0x98>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d02a      	beq.n	800c85a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	2b05      	cmp	r3, #5
 800c814:	dc18      	bgt.n	800c848 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c816:	f7ff fd69 	bl	800c2ec <xTaskGetSchedulerState>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d109      	bne.n	800c834 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c820:	4b10      	ldr	r3, [pc, #64]	@ (800c864 <xTimerGenericCommand+0x98>)
 800c822:	6818      	ldr	r0, [r3, #0]
 800c824:	f107 0110 	add.w	r1, r7, #16
 800c828:	2300      	movs	r3, #0
 800c82a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c82c:	f7fe f82a 	bl	800a884 <xQueueGenericSend>
 800c830:	6278      	str	r0, [r7, #36]	@ 0x24
 800c832:	e012      	b.n	800c85a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c834:	4b0b      	ldr	r3, [pc, #44]	@ (800c864 <xTimerGenericCommand+0x98>)
 800c836:	6818      	ldr	r0, [r3, #0]
 800c838:	f107 0110 	add.w	r1, r7, #16
 800c83c:	2300      	movs	r3, #0
 800c83e:	2200      	movs	r2, #0
 800c840:	f7fe f820 	bl	800a884 <xQueueGenericSend>
 800c844:	6278      	str	r0, [r7, #36]	@ 0x24
 800c846:	e008      	b.n	800c85a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c848:	4b06      	ldr	r3, [pc, #24]	@ (800c864 <xTimerGenericCommand+0x98>)
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	f107 0110 	add.w	r1, r7, #16
 800c850:	2300      	movs	r3, #0
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	f7fe f918 	bl	800aa88 <xQueueGenericSendFromISR>
 800c858:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3728      	adds	r7, #40	@ 0x28
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	200016a4 	.word	0x200016a4

0800c868 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c872:	4b23      	ldr	r3, [pc, #140]	@ (800c900 <prvProcessExpiredTimer+0x98>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	3304      	adds	r3, #4
 800c880:	4618      	mov	r0, r3
 800c882:	f7fd fee2 	bl	800a64a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	d023      	beq.n	800c8dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	699a      	ldr	r2, [r3, #24]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	18d1      	adds	r1, r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	6978      	ldr	r0, [r7, #20]
 800c8a2:	f000 f8d5 	bl	800ca50 <prvInsertTimerInActiveList>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d020      	beq.n	800c8ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6978      	ldr	r0, [r7, #20]
 800c8b8:	f7ff ff88 	bl	800c7cc <xTimerGenericCommand>
 800c8bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d114      	bne.n	800c8ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	60fb      	str	r3, [r7, #12]
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	e7fd      	b.n	800c8d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c8e2:	f023 0301 	bic.w	r3, r3, #1
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	6978      	ldr	r0, [r7, #20]
 800c8f4:	4798      	blx	r3
}
 800c8f6:	bf00      	nop
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	2000169c 	.word	0x2000169c

0800c904 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c90c:	f107 0308 	add.w	r3, r7, #8
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f859 	bl	800c9c8 <prvGetNextExpireTime>
 800c916:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	4619      	mov	r1, r3
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f000 f805 	bl	800c92c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c922:	f000 f8d7 	bl	800cad4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c926:	bf00      	nop
 800c928:	e7f0      	b.n	800c90c <prvTimerTask+0x8>
	...

0800c92c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c936:	f7ff f861 	bl	800b9fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c93a:	f107 0308 	add.w	r3, r7, #8
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 f866 	bl	800ca10 <prvSampleTimeNow>
 800c944:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d130      	bne.n	800c9ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10a      	bne.n	800c968 <prvProcessTimerOrBlockTask+0x3c>
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d806      	bhi.n	800c968 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c95a:	f7ff f85d 	bl	800ba18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c95e:	68f9      	ldr	r1, [r7, #12]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff ff81 	bl	800c868 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c966:	e024      	b.n	800c9b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d008      	beq.n	800c980 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c96e:	4b13      	ldr	r3, [pc, #76]	@ (800c9bc <prvProcessTimerOrBlockTask+0x90>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <prvProcessTimerOrBlockTask+0x50>
 800c978:	2301      	movs	r3, #1
 800c97a:	e000      	b.n	800c97e <prvProcessTimerOrBlockTask+0x52>
 800c97c:	2300      	movs	r3, #0
 800c97e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c980:	4b0f      	ldr	r3, [pc, #60]	@ (800c9c0 <prvProcessTimerOrBlockTask+0x94>)
 800c982:	6818      	ldr	r0, [r3, #0]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	4619      	mov	r1, r3
 800c98e:	f7fe fdb9 	bl	800b504 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c992:	f7ff f841 	bl	800ba18 <xTaskResumeAll>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10a      	bne.n	800c9b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c99c:	4b09      	ldr	r3, [pc, #36]	@ (800c9c4 <prvProcessTimerOrBlockTask+0x98>)
 800c99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	f3bf 8f6f 	isb	sy
}
 800c9ac:	e001      	b.n	800c9b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c9ae:	f7ff f833 	bl	800ba18 <xTaskResumeAll>
}
 800c9b2:	bf00      	nop
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	200016a0 	.word	0x200016a0
 800c9c0:	200016a4 	.word	0x200016a4
 800c9c4:	e000ed04 	.word	0xe000ed04

0800c9c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800ca0c <prvGetNextExpireTime+0x44>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d101      	bne.n	800c9de <prvGetNextExpireTime+0x16>
 800c9da:	2201      	movs	r2, #1
 800c9dc:	e000      	b.n	800c9e0 <prvGetNextExpireTime+0x18>
 800c9de:	2200      	movs	r2, #0
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d105      	bne.n	800c9f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <prvGetNextExpireTime+0x44>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e001      	b.n	800c9fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	2000169c 	.word	0x2000169c

0800ca10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca18:	f7ff f89c 	bl	800bb54 <xTaskGetTickCount>
 800ca1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca4c <prvSampleTimeNow+0x3c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d205      	bcs.n	800ca34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca28:	f000 f93a 	bl	800cca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	e002      	b.n	800ca3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca3a:	4a04      	ldr	r2, [pc, #16]	@ (800ca4c <prvSampleTimeNow+0x3c>)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ca40:	68fb      	ldr	r3, [r7, #12]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	200016ac 	.word	0x200016ac

0800ca50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d812      	bhi.n	800ca9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d302      	bcc.n	800ca8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca84:	2301      	movs	r3, #1
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	e01b      	b.n	800cac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca8a:	4b10      	ldr	r3, [pc, #64]	@ (800cacc <prvInsertTimerInActiveList+0x7c>)
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3304      	adds	r3, #4
 800ca92:	4619      	mov	r1, r3
 800ca94:	4610      	mov	r0, r2
 800ca96:	f7fd fd9f 	bl	800a5d8 <vListInsert>
 800ca9a:	e012      	b.n	800cac2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d206      	bcs.n	800cab2 <prvInsertTimerInActiveList+0x62>
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d302      	bcc.n	800cab2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800caac:	2301      	movs	r3, #1
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	e007      	b.n	800cac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cab2:	4b07      	ldr	r3, [pc, #28]	@ (800cad0 <prvInsertTimerInActiveList+0x80>)
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3304      	adds	r3, #4
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7fd fd8b 	bl	800a5d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cac2:	697b      	ldr	r3, [r7, #20]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	200016a0 	.word	0x200016a0
 800cad0:	2000169c 	.word	0x2000169c

0800cad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08e      	sub	sp, #56	@ 0x38
 800cad8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cada:	e0ce      	b.n	800cc7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	da19      	bge.n	800cb16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cae2:	1d3b      	adds	r3, r7, #4
 800cae4:	3304      	adds	r3, #4
 800cae6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10b      	bne.n	800cb06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	61fb      	str	r3, [r7, #28]
}
 800cb00:	bf00      	nop
 800cb02:	bf00      	nop
 800cb04:	e7fd      	b.n	800cb02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb0c:	6850      	ldr	r0, [r2, #4]
 800cb0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb10:	6892      	ldr	r2, [r2, #8]
 800cb12:	4611      	mov	r1, r2
 800cb14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f2c0 80ae 	blt.w	800cc7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb24:	695b      	ldr	r3, [r3, #20]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d004      	beq.n	800cb34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2c:	3304      	adds	r3, #4
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fd fd8b 	bl	800a64a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb34:	463b      	mov	r3, r7
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff ff6a 	bl	800ca10 <prvSampleTimeNow>
 800cb3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b09      	cmp	r3, #9
 800cb42:	f200 8097 	bhi.w	800cc74 <prvProcessReceivedCommands+0x1a0>
 800cb46:	a201      	add	r2, pc, #4	@ (adr r2, 800cb4c <prvProcessReceivedCommands+0x78>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cb75 	.word	0x0800cb75
 800cb50:	0800cb75 	.word	0x0800cb75
 800cb54:	0800cb75 	.word	0x0800cb75
 800cb58:	0800cbeb 	.word	0x0800cbeb
 800cb5c:	0800cbff 	.word	0x0800cbff
 800cb60:	0800cc4b 	.word	0x0800cc4b
 800cb64:	0800cb75 	.word	0x0800cb75
 800cb68:	0800cb75 	.word	0x0800cb75
 800cb6c:	0800cbeb 	.word	0x0800cbeb
 800cb70:	0800cbff 	.word	0x0800cbff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cb7a:	f043 0301 	orr.w	r3, r3, #1
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	18d1      	adds	r1, r2, r3
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb94:	f7ff ff5c 	bl	800ca50 <prvInsertTimerInActiveList>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d06c      	beq.n	800cc78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cba4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d061      	beq.n	800cc78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	441a      	add	r2, r3
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbc6:	f7ff fe01 	bl	800c7cc <xTimerGenericCommand>
 800cbca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d152      	bne.n	800cc78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	61bb      	str	r3, [r7, #24]
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	e7fd      	b.n	800cbe6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cbf0:	f023 0301 	bic.w	r3, r3, #1
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800cbfc:	e03d      	b.n	800cc7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc04:	f043 0301 	orr.w	r3, r3, #1
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10b      	bne.n	800cc36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	617b      	str	r3, [r7, #20]
}
 800cc30:	bf00      	nop
 800cc32:	bf00      	nop
 800cc34:	e7fd      	b.n	800cc32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc38:	699a      	ldr	r2, [r3, #24]
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3c:	18d1      	adds	r1, r2, r3
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc44:	f7ff ff04 	bl	800ca50 <prvInsertTimerInActiveList>
					break;
 800cc48:	e017      	b.n	800cc7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc50:	f003 0302 	and.w	r3, r3, #2
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d103      	bne.n	800cc60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cc58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc5a:	f000 fbfd 	bl	800d458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc5e:	e00c      	b.n	800cc7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc66:	f023 0301 	bic.w	r3, r3, #1
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800cc72:	e002      	b.n	800cc7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cc74:	bf00      	nop
 800cc76:	e000      	b.n	800cc7a <prvProcessReceivedCommands+0x1a6>
					break;
 800cc78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc7a:	4b08      	ldr	r3, [pc, #32]	@ (800cc9c <prvProcessReceivedCommands+0x1c8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	1d39      	adds	r1, r7, #4
 800cc80:	2200      	movs	r2, #0
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe f82e 	bl	800ace4 <xQueueReceive>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f47f af26 	bne.w	800cadc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cc90:	bf00      	nop
 800cc92:	bf00      	nop
 800cc94:	3730      	adds	r7, #48	@ 0x30
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	200016a4 	.word	0x200016a4

0800cca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cca6:	e049      	b.n	800cd3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cca8:	4b2e      	ldr	r3, [pc, #184]	@ (800cd64 <prvSwitchTimerLists+0xc4>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb2:	4b2c      	ldr	r3, [pc, #176]	@ (800cd64 <prvSwitchTimerLists+0xc4>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fd fcc2 	bl	800a64a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d02f      	beq.n	800cd3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	4413      	add	r3, r2
 800cce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d90e      	bls.n	800cd0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccfa:	4b1a      	ldr	r3, [pc, #104]	@ (800cd64 <prvSwitchTimerLists+0xc4>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3304      	adds	r3, #4
 800cd02:	4619      	mov	r1, r3
 800cd04:	4610      	mov	r0, r2
 800cd06:	f7fd fc67 	bl	800a5d8 <vListInsert>
 800cd0a:	e017      	b.n	800cd3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2300      	movs	r3, #0
 800cd12:	693a      	ldr	r2, [r7, #16]
 800cd14:	2100      	movs	r1, #0
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7ff fd58 	bl	800c7cc <xTimerGenericCommand>
 800cd1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	603b      	str	r3, [r7, #0]
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd3c:	4b09      	ldr	r3, [pc, #36]	@ (800cd64 <prvSwitchTimerLists+0xc4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1b0      	bne.n	800cca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cd46:	4b07      	ldr	r3, [pc, #28]	@ (800cd64 <prvSwitchTimerLists+0xc4>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cd4c:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <prvSwitchTimerLists+0xc8>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a04      	ldr	r2, [pc, #16]	@ (800cd64 <prvSwitchTimerLists+0xc4>)
 800cd52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cd54:	4a04      	ldr	r2, [pc, #16]	@ (800cd68 <prvSwitchTimerLists+0xc8>)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	6013      	str	r3, [r2, #0]
}
 800cd5a:	bf00      	nop
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	2000169c 	.word	0x2000169c
 800cd68:	200016a0 	.word	0x200016a0

0800cd6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd70:	f000 f982 	bl	800d078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd74:	4b12      	ldr	r3, [pc, #72]	@ (800cdc0 <prvCheckForValidListAndQueue+0x54>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d11d      	bne.n	800cdb8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd7c:	4811      	ldr	r0, [pc, #68]	@ (800cdc4 <prvCheckForValidListAndQueue+0x58>)
 800cd7e:	f7fd fbda 	bl	800a536 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd82:	4811      	ldr	r0, [pc, #68]	@ (800cdc8 <prvCheckForValidListAndQueue+0x5c>)
 800cd84:	f7fd fbd7 	bl	800a536 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd88:	4b10      	ldr	r3, [pc, #64]	@ (800cdcc <prvCheckForValidListAndQueue+0x60>)
 800cd8a:	4a0e      	ldr	r2, [pc, #56]	@ (800cdc4 <prvCheckForValidListAndQueue+0x58>)
 800cd8c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd8e:	4b10      	ldr	r3, [pc, #64]	@ (800cdd0 <prvCheckForValidListAndQueue+0x64>)
 800cd90:	4a0d      	ldr	r2, [pc, #52]	@ (800cdc8 <prvCheckForValidListAndQueue+0x5c>)
 800cd92:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cd94:	2200      	movs	r2, #0
 800cd96:	2110      	movs	r1, #16
 800cd98:	2001      	movs	r0, #1
 800cd9a:	f7fd fceb 	bl	800a774 <xQueueGenericCreate>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4a07      	ldr	r2, [pc, #28]	@ (800cdc0 <prvCheckForValidListAndQueue+0x54>)
 800cda2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cda4:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <prvCheckForValidListAndQueue+0x54>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d005      	beq.n	800cdb8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cdac:	4b04      	ldr	r3, [pc, #16]	@ (800cdc0 <prvCheckForValidListAndQueue+0x54>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4908      	ldr	r1, [pc, #32]	@ (800cdd4 <prvCheckForValidListAndQueue+0x68>)
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fb52 	bl	800b45c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdb8:	f000 f990 	bl	800d0dc <vPortExitCritical>
}
 800cdbc:	bf00      	nop
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	200016a4 	.word	0x200016a4
 800cdc4:	20001674 	.word	0x20001674
 800cdc8:	20001688 	.word	0x20001688
 800cdcc:	2000169c 	.word	0x2000169c
 800cdd0:	200016a0 	.word	0x200016a0
 800cdd4:	0801dcdc 	.word	0x0801dcdc

0800cdd8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08a      	sub	sp, #40	@ 0x28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800cde6:	f06f 0301 	mvn.w	r3, #1
 800cdea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cdf8:	4b06      	ldr	r3, [pc, #24]	@ (800ce14 <xTimerPendFunctionCallFromISR+0x3c>)
 800cdfa:	6818      	ldr	r0, [r3, #0]
 800cdfc:	f107 0114 	add.w	r1, r7, #20
 800ce00:	2300      	movs	r3, #0
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	f7fd fe40 	bl	800aa88 <xQueueGenericSendFromISR>
 800ce08:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3728      	adds	r7, #40	@ 0x28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	200016a4 	.word	0x200016a4

0800ce18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	3b04      	subs	r3, #4
 800ce28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ce30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	3b04      	subs	r3, #4
 800ce36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f023 0201 	bic.w	r2, r3, #1
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3b04      	subs	r3, #4
 800ce46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce48:	4a0c      	ldr	r2, [pc, #48]	@ (800ce7c <pxPortInitialiseStack+0x64>)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3b14      	subs	r3, #20
 800ce52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3b04      	subs	r3, #4
 800ce5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f06f 0202 	mvn.w	r2, #2
 800ce66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	3b20      	subs	r3, #32
 800ce6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	0800ce81 	.word	0x0800ce81

0800ce80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce8a:	4b13      	ldr	r3, [pc, #76]	@ (800ced8 <prvTaskExitError+0x58>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d00b      	beq.n	800ceac <prvTaskExitError+0x2c>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	60fb      	str	r3, [r7, #12]
}
 800cea6:	bf00      	nop
 800cea8:	bf00      	nop
 800ceaa:	e7fd      	b.n	800cea8 <prvTaskExitError+0x28>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60bb      	str	r3, [r7, #8]
}
 800cebe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cec0:	bf00      	nop
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0fc      	beq.n	800cec2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cec8:	bf00      	nop
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	200000ac 	.word	0x200000ac
 800cedc:	00000000 	.word	0x00000000

0800cee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cee0:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <pxCurrentTCBConst2>)
 800cee2:	6819      	ldr	r1, [r3, #0]
 800cee4:	6808      	ldr	r0, [r1, #0]
 800cee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceea:	f380 8809 	msr	PSP, r0
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f04f 0000 	mov.w	r0, #0
 800cef6:	f380 8811 	msr	BASEPRI, r0
 800cefa:	4770      	bx	lr
 800cefc:	f3af 8000 	nop.w

0800cf00 <pxCurrentTCBConst2>:
 800cf00:	20001548 	.word	0x20001548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop

0800cf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf08:	4808      	ldr	r0, [pc, #32]	@ (800cf2c <prvPortStartFirstTask+0x24>)
 800cf0a:	6800      	ldr	r0, [r0, #0]
 800cf0c:	6800      	ldr	r0, [r0, #0]
 800cf0e:	f380 8808 	msr	MSP, r0
 800cf12:	f04f 0000 	mov.w	r0, #0
 800cf16:	f380 8814 	msr	CONTROL, r0
 800cf1a:	b662      	cpsie	i
 800cf1c:	b661      	cpsie	f
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	df00      	svc	0
 800cf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf2a:	bf00      	nop
 800cf2c:	e000ed08 	.word	0xe000ed08

0800cf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf36:	4b47      	ldr	r3, [pc, #284]	@ (800d054 <xPortStartScheduler+0x124>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a47      	ldr	r2, [pc, #284]	@ (800d058 <xPortStartScheduler+0x128>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d10b      	bne.n	800cf58 <xPortStartScheduler+0x28>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	613b      	str	r3, [r7, #16]
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf58:	4b3e      	ldr	r3, [pc, #248]	@ (800d054 <xPortStartScheduler+0x124>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a3f      	ldr	r2, [pc, #252]	@ (800d05c <xPortStartScheduler+0x12c>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d10b      	bne.n	800cf7a <xPortStartScheduler+0x4a>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60fb      	str	r3, [r7, #12]
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop
 800cf78:	e7fd      	b.n	800cf76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf7a:	4b39      	ldr	r3, [pc, #228]	@ (800d060 <xPortStartScheduler+0x130>)
 800cf7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	22ff      	movs	r2, #255	@ 0xff
 800cf8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf94:	78fb      	ldrb	r3, [r7, #3]
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	4b31      	ldr	r3, [pc, #196]	@ (800d064 <xPortStartScheduler+0x134>)
 800cfa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfa2:	4b31      	ldr	r3, [pc, #196]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfa4:	2207      	movs	r2, #7
 800cfa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfa8:	e009      	b.n	800cfbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cfaa:	4b2f      	ldr	r3, [pc, #188]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4a2d      	ldr	r2, [pc, #180]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfc6:	2b80      	cmp	r3, #128	@ 0x80
 800cfc8:	d0ef      	beq.n	800cfaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cfca:	4b27      	ldr	r3, [pc, #156]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f1c3 0307 	rsb	r3, r3, #7
 800cfd2:	2b04      	cmp	r3, #4
 800cfd4:	d00b      	beq.n	800cfee <xPortStartScheduler+0xbe>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	60bb      	str	r3, [r7, #8]
}
 800cfe8:	bf00      	nop
 800cfea:	bf00      	nop
 800cfec:	e7fd      	b.n	800cfea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cfee:	4b1e      	ldr	r3, [pc, #120]	@ (800d068 <xPortStartScheduler+0x138>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	021b      	lsls	r3, r3, #8
 800cff4:	4a1c      	ldr	r2, [pc, #112]	@ (800d068 <xPortStartScheduler+0x138>)
 800cff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cff8:	4b1b      	ldr	r3, [pc, #108]	@ (800d068 <xPortStartScheduler+0x138>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d000:	4a19      	ldr	r2, [pc, #100]	@ (800d068 <xPortStartScheduler+0x138>)
 800d002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	b2da      	uxtb	r2, r3
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d00c:	4b17      	ldr	r3, [pc, #92]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a16      	ldr	r2, [pc, #88]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d018:	4b14      	ldr	r3, [pc, #80]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a13      	ldr	r2, [pc, #76]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d024:	f000 f8da 	bl	800d1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d028:	4b11      	ldr	r3, [pc, #68]	@ (800d070 <xPortStartScheduler+0x140>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d02e:	f000 f8f9 	bl	800d224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d032:	4b10      	ldr	r3, [pc, #64]	@ (800d074 <xPortStartScheduler+0x144>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a0f      	ldr	r2, [pc, #60]	@ (800d074 <xPortStartScheduler+0x144>)
 800d038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d03e:	f7ff ff63 	bl	800cf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d042:	f7fe fe63 	bl	800bd0c <vTaskSwitchContext>
	prvTaskExitError();
 800d046:	f7ff ff1b 	bl	800ce80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3718      	adds	r7, #24
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	e000ed00 	.word	0xe000ed00
 800d058:	410fc271 	.word	0x410fc271
 800d05c:	410fc270 	.word	0x410fc270
 800d060:	e000e400 	.word	0xe000e400
 800d064:	200016b0 	.word	0x200016b0
 800d068:	200016b4 	.word	0x200016b4
 800d06c:	e000ed20 	.word	0xe000ed20
 800d070:	200000ac 	.word	0x200000ac
 800d074:	e000ef34 	.word	0xe000ef34

0800d078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d092:	4b10      	ldr	r3, [pc, #64]	@ (800d0d4 <vPortEnterCritical+0x5c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	4a0e      	ldr	r2, [pc, #56]	@ (800d0d4 <vPortEnterCritical+0x5c>)
 800d09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d09c:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d4 <vPortEnterCritical+0x5c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d110      	bne.n	800d0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d8 <vPortEnterCritical+0x60>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00b      	beq.n	800d0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	603b      	str	r3, [r7, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	e7fd      	b.n	800d0c2 <vPortEnterCritical+0x4a>
	}
}
 800d0c6:	bf00      	nop
 800d0c8:	370c      	adds	r7, #12
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	200000ac 	.word	0x200000ac
 800d0d8:	e000ed04 	.word	0xe000ed04

0800d0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d0e2:	4b12      	ldr	r3, [pc, #72]	@ (800d12c <vPortExitCritical+0x50>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10b      	bne.n	800d102 <vPortExitCritical+0x26>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	607b      	str	r3, [r7, #4]
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	e7fd      	b.n	800d0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d102:	4b0a      	ldr	r3, [pc, #40]	@ (800d12c <vPortExitCritical+0x50>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3b01      	subs	r3, #1
 800d108:	4a08      	ldr	r2, [pc, #32]	@ (800d12c <vPortExitCritical+0x50>)
 800d10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d10c:	4b07      	ldr	r3, [pc, #28]	@ (800d12c <vPortExitCritical+0x50>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d105      	bne.n	800d120 <vPortExitCritical+0x44>
 800d114:	2300      	movs	r3, #0
 800d116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	f383 8811 	msr	BASEPRI, r3
}
 800d11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d120:	bf00      	nop
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	200000ac 	.word	0x200000ac

0800d130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d130:	f3ef 8009 	mrs	r0, PSP
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	4b15      	ldr	r3, [pc, #84]	@ (800d190 <pxCurrentTCBConst>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	f01e 0f10 	tst.w	lr, #16
 800d140:	bf08      	it	eq
 800d142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d154:	f380 8811 	msr	BASEPRI, r0
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f7fe fdd4 	bl	800bd0c <vTaskSwitchContext>
 800d164:	f04f 0000 	mov.w	r0, #0
 800d168:	f380 8811 	msr	BASEPRI, r0
 800d16c:	bc09      	pop	{r0, r3}
 800d16e:	6819      	ldr	r1, [r3, #0]
 800d170:	6808      	ldr	r0, [r1, #0]
 800d172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d176:	f01e 0f10 	tst.w	lr, #16
 800d17a:	bf08      	it	eq
 800d17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d180:	f380 8809 	msr	PSP, r0
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	f3af 8000 	nop.w

0800d190 <pxCurrentTCBConst>:
 800d190:	20001548 	.word	0x20001548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop

0800d198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	607b      	str	r3, [r7, #4]
}
 800d1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1b2:	f7fe fcf1 	bl	800bb98 <xTaskIncrementTick>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1bc:	4b06      	ldr	r3, [pc, #24]	@ (800d1d8 <xPortSysTickHandler+0x40>)
 800d1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	f383 8811 	msr	BASEPRI, r3
}
 800d1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1d0:	bf00      	nop
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	e000ed04 	.word	0xe000ed04

0800d1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d210 <vPortSetupTimerInterrupt+0x34>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d214 <vPortSetupTimerInterrupt+0x38>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <vPortSetupTimerInterrupt+0x3c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d21c <vPortSetupTimerInterrupt+0x40>)
 800d1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f6:	099b      	lsrs	r3, r3, #6
 800d1f8:	4a09      	ldr	r2, [pc, #36]	@ (800d220 <vPortSetupTimerInterrupt+0x44>)
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d1fe:	4b04      	ldr	r3, [pc, #16]	@ (800d210 <vPortSetupTimerInterrupt+0x34>)
 800d200:	2207      	movs	r2, #7
 800d202:	601a      	str	r2, [r3, #0]
}
 800d204:	bf00      	nop
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	e000e010 	.word	0xe000e010
 800d214:	e000e018 	.word	0xe000e018
 800d218:	200000a0 	.word	0x200000a0
 800d21c:	10624dd3 	.word	0x10624dd3
 800d220:	e000e014 	.word	0xe000e014

0800d224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d234 <vPortEnableVFP+0x10>
 800d228:	6801      	ldr	r1, [r0, #0]
 800d22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d22e:	6001      	str	r1, [r0, #0]
 800d230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d232:	bf00      	nop
 800d234:	e000ed88 	.word	0xe000ed88

0800d238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d23e:	f3ef 8305 	mrs	r3, IPSR
 800d242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b0f      	cmp	r3, #15
 800d248:	d915      	bls.n	800d276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d24a:	4a18      	ldr	r2, [pc, #96]	@ (800d2ac <vPortValidateInterruptPriority+0x74>)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d254:	4b16      	ldr	r3, [pc, #88]	@ (800d2b0 <vPortValidateInterruptPriority+0x78>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	7afa      	ldrb	r2, [r7, #11]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d20b      	bcs.n	800d276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	607b      	str	r3, [r7, #4]
}
 800d270:	bf00      	nop
 800d272:	bf00      	nop
 800d274:	e7fd      	b.n	800d272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d276:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b4 <vPortValidateInterruptPriority+0x7c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d27e:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b8 <vPortValidateInterruptPriority+0x80>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	d90b      	bls.n	800d29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	603b      	str	r3, [r7, #0]
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	e7fd      	b.n	800d29a <vPortValidateInterruptPriority+0x62>
	}
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	e000e3f0 	.word	0xe000e3f0
 800d2b0:	200016b0 	.word	0x200016b0
 800d2b4:	e000ed0c 	.word	0xe000ed0c
 800d2b8:	200016b4 	.word	0x200016b4

0800d2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08a      	sub	sp, #40	@ 0x28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2c8:	f7fe fb98 	bl	800b9fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800d440 <pvPortMalloc+0x184>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2d4:	f000 f924 	bl	800d520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800d444 <pvPortMalloc+0x188>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f040 8095 	bne.w	800d410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01e      	beq.n	800d32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d2ec:	2208      	movs	r2, #8
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d015      	beq.n	800d32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f023 0307 	bic.w	r3, r3, #7
 800d304:	3308      	adds	r3, #8
 800d306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f003 0307 	and.w	r3, r3, #7
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00b      	beq.n	800d32a <pvPortMalloc+0x6e>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	617b      	str	r3, [r7, #20]
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop
 800d328:	e7fd      	b.n	800d326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d06f      	beq.n	800d410 <pvPortMalloc+0x154>
 800d330:	4b45      	ldr	r3, [pc, #276]	@ (800d448 <pvPortMalloc+0x18c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	429a      	cmp	r2, r3
 800d338:	d86a      	bhi.n	800d410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d33a:	4b44      	ldr	r3, [pc, #272]	@ (800d44c <pvPortMalloc+0x190>)
 800d33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d33e:	4b43      	ldr	r3, [pc, #268]	@ (800d44c <pvPortMalloc+0x190>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d344:	e004      	b.n	800d350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	429a      	cmp	r2, r3
 800d358:	d903      	bls.n	800d362 <pvPortMalloc+0xa6>
 800d35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1f1      	bne.n	800d346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d362:	4b37      	ldr	r3, [pc, #220]	@ (800d440 <pvPortMalloc+0x184>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d368:	429a      	cmp	r2, r3
 800d36a:	d051      	beq.n	800d410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2208      	movs	r2, #8
 800d372:	4413      	add	r3, r2
 800d374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	1ad2      	subs	r2, r2, r3
 800d386:	2308      	movs	r3, #8
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d920      	bls.n	800d3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4413      	add	r3, r2
 800d394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	f003 0307 	and.w	r3, r3, #7
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	613b      	str	r3, [r7, #16]
}
 800d3b2:	bf00      	nop
 800d3b4:	bf00      	nop
 800d3b6:	e7fd      	b.n	800d3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	1ad2      	subs	r2, r2, r3
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3ca:	69b8      	ldr	r0, [r7, #24]
 800d3cc:	f000 f90a 	bl	800d5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	4a1b      	ldr	r2, [pc, #108]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3de:	4b1a      	ldr	r3, [pc, #104]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d450 <pvPortMalloc+0x194>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d203      	bcs.n	800d3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3ea:	4b17      	ldr	r3, [pc, #92]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a18      	ldr	r2, [pc, #96]	@ (800d450 <pvPortMalloc+0x194>)
 800d3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	4b13      	ldr	r3, [pc, #76]	@ (800d444 <pvPortMalloc+0x188>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d406:	4b13      	ldr	r3, [pc, #76]	@ (800d454 <pvPortMalloc+0x198>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3301      	adds	r3, #1
 800d40c:	4a11      	ldr	r2, [pc, #68]	@ (800d454 <pvPortMalloc+0x198>)
 800d40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d410:	f7fe fb02 	bl	800ba18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00b      	beq.n	800d436 <pvPortMalloc+0x17a>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	60fb      	str	r3, [r7, #12]
}
 800d430:	bf00      	nop
 800d432:	bf00      	nop
 800d434:	e7fd      	b.n	800d432 <pvPortMalloc+0x176>
	return pvReturn;
 800d436:	69fb      	ldr	r3, [r7, #28]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3728      	adds	r7, #40	@ 0x28
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	2000a2c0 	.word	0x2000a2c0
 800d444:	2000a2d4 	.word	0x2000a2d4
 800d448:	2000a2c4 	.word	0x2000a2c4
 800d44c:	2000a2b8 	.word	0x2000a2b8
 800d450:	2000a2c8 	.word	0x2000a2c8
 800d454:	2000a2cc 	.word	0x2000a2cc

0800d458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d04f      	beq.n	800d50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d46a:	2308      	movs	r3, #8
 800d46c:	425b      	negs	r3, r3
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	4413      	add	r3, r2
 800d472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	4b25      	ldr	r3, [pc, #148]	@ (800d514 <vPortFree+0xbc>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4013      	ands	r3, r2
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10b      	bne.n	800d49e <vPortFree+0x46>
	__asm volatile
 800d486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	60fb      	str	r3, [r7, #12]
}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	e7fd      	b.n	800d49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00b      	beq.n	800d4be <vPortFree+0x66>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	60bb      	str	r3, [r7, #8]
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	e7fd      	b.n	800d4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	4b14      	ldr	r3, [pc, #80]	@ (800d514 <vPortFree+0xbc>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d01e      	beq.n	800d50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d11a      	bne.n	800d50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d514 <vPortFree+0xbc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	43db      	mvns	r3, r3
 800d4de:	401a      	ands	r2, r3
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4e4:	f7fe fa8a 	bl	800b9fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <vPortFree+0xc0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	4a09      	ldr	r2, [pc, #36]	@ (800d518 <vPortFree+0xc0>)
 800d4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4f6:	6938      	ldr	r0, [r7, #16]
 800d4f8:	f000 f874 	bl	800d5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d4fc:	4b07      	ldr	r3, [pc, #28]	@ (800d51c <vPortFree+0xc4>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3301      	adds	r3, #1
 800d502:	4a06      	ldr	r2, [pc, #24]	@ (800d51c <vPortFree+0xc4>)
 800d504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d506:	f7fe fa87 	bl	800ba18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d50a:	bf00      	nop
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	2000a2d4 	.word	0x2000a2d4
 800d518:	2000a2c4 	.word	0x2000a2c4
 800d51c:	2000a2d0 	.word	0x2000a2d0

0800d520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d526:	f44f 430c 	mov.w	r3, #35840	@ 0x8c00
 800d52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d52c:	4b27      	ldr	r3, [pc, #156]	@ (800d5cc <prvHeapInit+0xac>)
 800d52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00c      	beq.n	800d554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3307      	adds	r3, #7
 800d53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 0307 	bic.w	r3, r3, #7
 800d546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	4a1f      	ldr	r2, [pc, #124]	@ (800d5cc <prvHeapInit+0xac>)
 800d550:	4413      	add	r3, r2
 800d552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d558:	4a1d      	ldr	r2, [pc, #116]	@ (800d5d0 <prvHeapInit+0xb0>)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d55e:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d0 <prvHeapInit+0xb0>)
 800d560:	2200      	movs	r2, #0
 800d562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	4413      	add	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d56c:	2208      	movs	r2, #8
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1a9b      	subs	r3, r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f023 0307 	bic.w	r3, r3, #7
 800d57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4a15      	ldr	r2, [pc, #84]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d582:	4b14      	ldr	r3, [pc, #80]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2200      	movs	r2, #0
 800d588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d58a:	4b12      	ldr	r3, [pc, #72]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	1ad2      	subs	r2, r2, r3
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d8 <prvHeapInit+0xb8>)
 800d5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	4a09      	ldr	r2, [pc, #36]	@ (800d5dc <prvHeapInit+0xbc>)
 800d5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5b8:	4b09      	ldr	r3, [pc, #36]	@ (800d5e0 <prvHeapInit+0xc0>)
 800d5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d5be:	601a      	str	r2, [r3, #0]
}
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	200016b8 	.word	0x200016b8
 800d5d0:	2000a2b8 	.word	0x2000a2b8
 800d5d4:	2000a2c0 	.word	0x2000a2c0
 800d5d8:	2000a2c8 	.word	0x2000a2c8
 800d5dc:	2000a2c4 	.word	0x2000a2c4
 800d5e0:	2000a2d4 	.word	0x2000a2d4

0800d5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d5ec:	4b28      	ldr	r3, [pc, #160]	@ (800d690 <prvInsertBlockIntoFreeList+0xac>)
 800d5ee:	60fb      	str	r3, [r7, #12]
 800d5f0:	e002      	b.n	800d5f8 <prvInsertBlockIntoFreeList+0x14>
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d8f7      	bhi.n	800d5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	4413      	add	r3, r2
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d108      	bne.n	800d626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	441a      	add	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	441a      	add	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d118      	bne.n	800d66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	4b15      	ldr	r3, [pc, #84]	@ (800d694 <prvInsertBlockIntoFreeList+0xb0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d00d      	beq.n	800d662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	441a      	add	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	e008      	b.n	800d674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d662:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <prvInsertBlockIntoFreeList+0xb0>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	e003      	b.n	800d674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d002      	beq.n	800d682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d682:	bf00      	nop
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	2000a2b8 	.word	0x2000a2b8
 800d694:	2000a2c0 	.word	0x2000a2c0

0800d698 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d007      	beq.n	800d6bc <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	6852      	ldr	r2, [r2, #4]
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	4798      	blx	r3
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	e006      	b.n	800d6ca <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	6852      	ldr	r2, [r2, #4]
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
    return ERR_OK;
 800d6c8:	2300      	movs	r3, #0
  }
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08e      	sub	sp, #56	@ 0x38
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800d6ec:	f107 0314 	add.w	r3, r7, #20
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	4806      	ldr	r0, [pc, #24]	@ (800d70c <netifapi_netif_common+0x38>)
 800d6f4:	f000 f99a 	bl	800da2c <tcpip_api_call>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800d6fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d702:	4618      	mov	r0, r3
 800d704:	3738      	adds	r7, #56	@ 0x38
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	0800d699 	.word	0x0800d699

0800d710 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d71a:	f007 fd37 	bl	801518c <sys_timeouts_sleeptime>
 800d71e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d726:	d10b      	bne.n	800d740 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d728:	4813      	ldr	r0, [pc, #76]	@ (800d778 <tcpip_timeouts_mbox_fetch+0x68>)
 800d72a:	f00c fe5e 	bl	801a3ea <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d72e:	2200      	movs	r2, #0
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f00c fdd2 	bl	801a2dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d738:	480f      	ldr	r0, [pc, #60]	@ (800d778 <tcpip_timeouts_mbox_fetch+0x68>)
 800d73a:	f00c fe47 	bl	801a3cc <sys_mutex_lock>
    return;
 800d73e:	e018      	b.n	800d772 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d746:	f007 fce7 	bl	8015118 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d74a:	e7e6      	b.n	800d71a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d74c:	480a      	ldr	r0, [pc, #40]	@ (800d778 <tcpip_timeouts_mbox_fetch+0x68>)
 800d74e:	f00c fe4c 	bl	801a3ea <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f00c fdc0 	bl	801a2dc <sys_arch_mbox_fetch>
 800d75c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d75e:	4806      	ldr	r0, [pc, #24]	@ (800d778 <tcpip_timeouts_mbox_fetch+0x68>)
 800d760:	f00c fe34 	bl	801a3cc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d102      	bne.n	800d772 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d76c:	f007 fcd4 	bl	8015118 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d770:	e7d3      	b.n	800d71a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	2000a2e4 	.word	0x2000a2e4

0800d77c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d784:	4810      	ldr	r0, [pc, #64]	@ (800d7c8 <tcpip_thread+0x4c>)
 800d786:	f00c fe21 	bl	801a3cc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d78a:	4b10      	ldr	r3, [pc, #64]	@ (800d7cc <tcpip_thread+0x50>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d005      	beq.n	800d79e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d792:	4b0e      	ldr	r3, [pc, #56]	@ (800d7cc <tcpip_thread+0x50>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a0e      	ldr	r2, [pc, #56]	@ (800d7d0 <tcpip_thread+0x54>)
 800d798:	6812      	ldr	r2, [r2, #0]
 800d79a:	4610      	mov	r0, r2
 800d79c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d79e:	f107 030c 	add.w	r3, r7, #12
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	480b      	ldr	r0, [pc, #44]	@ (800d7d4 <tcpip_thread+0x58>)
 800d7a6:	f7ff ffb3 	bl	800d710 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d106      	bne.n	800d7be <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d7b0:	4b09      	ldr	r3, [pc, #36]	@ (800d7d8 <tcpip_thread+0x5c>)
 800d7b2:	2291      	movs	r2, #145	@ 0x91
 800d7b4:	4909      	ldr	r1, [pc, #36]	@ (800d7dc <tcpip_thread+0x60>)
 800d7b6:	480a      	ldr	r0, [pc, #40]	@ (800d7e0 <tcpip_thread+0x64>)
 800d7b8:	f00d fcfa 	bl	801b1b0 <iprintf>
      continue;
 800d7bc:	e003      	b.n	800d7c6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 f80f 	bl	800d7e4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d7c6:	e7ea      	b.n	800d79e <tcpip_thread+0x22>
 800d7c8:	2000a2e4 	.word	0x2000a2e4
 800d7cc:	2000a2d8 	.word	0x2000a2d8
 800d7d0:	2000a2dc 	.word	0x2000a2dc
 800d7d4:	2000a2e0 	.word	0x2000a2e0
 800d7d8:	0801dce4 	.word	0x0801dce4
 800d7dc:	0801dd14 	.word	0x0801dd14
 800d7e0:	0801dd34 	.word	0x0801dd34

0800d7e4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d026      	beq.n	800d842 <tcpip_thread_handle_msg+0x5e>
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	dc2b      	bgt.n	800d850 <tcpip_thread_handle_msg+0x6c>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <tcpip_thread_handle_msg+0x1e>
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d015      	beq.n	800d82c <tcpip_thread_handle_msg+0x48>
 800d800:	e026      	b.n	800d850 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	6850      	ldr	r0, [r2, #4]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	6892      	ldr	r2, [r2, #8]
 800d80e:	4611      	mov	r1, r2
 800d810:	4798      	blx	r3
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d004      	beq.n	800d822 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f001 fe89 	bl	800f534 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	2009      	movs	r0, #9
 800d826:	f000 ffe3 	bl	800e7f0 <memp_free>
      break;
 800d82a:	e018      	b.n	800d85e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	6892      	ldr	r2, [r2, #8]
 800d834:	4610      	mov	r0, r2
 800d836:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d838:	6879      	ldr	r1, [r7, #4]
 800d83a:	2008      	movs	r0, #8
 800d83c:	f000 ffd8 	bl	800e7f0 <memp_free>
      break;
 800d840:	e00d      	b.n	800d85e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	6892      	ldr	r2, [r2, #8]
 800d84a:	4610      	mov	r0, r2
 800d84c:	4798      	blx	r3
      break;
 800d84e:	e006      	b.n	800d85e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d850:	4b05      	ldr	r3, [pc, #20]	@ (800d868 <tcpip_thread_handle_msg+0x84>)
 800d852:	22cf      	movs	r2, #207	@ 0xcf
 800d854:	4905      	ldr	r1, [pc, #20]	@ (800d86c <tcpip_thread_handle_msg+0x88>)
 800d856:	4806      	ldr	r0, [pc, #24]	@ (800d870 <tcpip_thread_handle_msg+0x8c>)
 800d858:	f00d fcaa 	bl	801b1b0 <iprintf>
      break;
 800d85c:	bf00      	nop
  }
}
 800d85e:	bf00      	nop
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	0801dce4 	.word	0x0801dce4
 800d86c:	0801dd14 	.word	0x0801dd14
 800d870:	0801dd34 	.word	0x0801dd34

0800d874 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d880:	481a      	ldr	r0, [pc, #104]	@ (800d8ec <tcpip_inpkt+0x78>)
 800d882:	f00c fd6a 	bl	801a35a <sys_mbox_valid>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d105      	bne.n	800d898 <tcpip_inpkt+0x24>
 800d88c:	4b18      	ldr	r3, [pc, #96]	@ (800d8f0 <tcpip_inpkt+0x7c>)
 800d88e:	22fc      	movs	r2, #252	@ 0xfc
 800d890:	4918      	ldr	r1, [pc, #96]	@ (800d8f4 <tcpip_inpkt+0x80>)
 800d892:	4819      	ldr	r0, [pc, #100]	@ (800d8f8 <tcpip_inpkt+0x84>)
 800d894:	f00d fc8c 	bl	801b1b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d898:	2009      	movs	r0, #9
 800d89a:	f000 ff57 	bl	800e74c <memp_malloc>
 800d89e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8aa:	e01a      	b.n	800d8e2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d8c4:	6979      	ldr	r1, [r7, #20]
 800d8c6:	4809      	ldr	r0, [pc, #36]	@ (800d8ec <tcpip_inpkt+0x78>)
 800d8c8:	f00c fcee 	bl	801a2a8 <sys_mbox_trypost>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d006      	beq.n	800d8e0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d8d2:	6979      	ldr	r1, [r7, #20]
 800d8d4:	2009      	movs	r0, #9
 800d8d6:	f000 ff8b 	bl	800e7f0 <memp_free>
    return ERR_MEM;
 800d8da:	f04f 33ff 	mov.w	r3, #4294967295
 800d8de:	e000      	b.n	800d8e2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d8e0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3718      	adds	r7, #24
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2000a2e0 	.word	0x2000a2e0
 800d8f0:	0801dce4 	.word	0x0801dce4
 800d8f4:	0801dd5c 	.word	0x0801dd5c
 800d8f8:	0801dd34 	.word	0x0801dd34

0800d8fc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d90c:	f003 0318 	and.w	r3, r3, #24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d006      	beq.n	800d922 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d914:	4a08      	ldr	r2, [pc, #32]	@ (800d938 <tcpip_input+0x3c>)
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ffab 	bl	800d874 <tcpip_inpkt>
 800d91e:	4603      	mov	r3, r0
 800d920:	e005      	b.n	800d92e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d922:	4a06      	ldr	r2, [pc, #24]	@ (800d93c <tcpip_input+0x40>)
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7ff ffa4 	bl	800d874 <tcpip_inpkt>
 800d92c:	4603      	mov	r3, r0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	0801a095 	.word	0x0801a095
 800d93c:	08018e5d 	.word	0x08018e5d

0800d940 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d94a:	4814      	ldr	r0, [pc, #80]	@ (800d99c <tcpip_callback+0x5c>)
 800d94c:	f00c fd05 	bl	801a35a <sys_mbox_valid>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d106      	bne.n	800d964 <tcpip_callback+0x24>
 800d956:	4b12      	ldr	r3, [pc, #72]	@ (800d9a0 <tcpip_callback+0x60>)
 800d958:	f240 1239 	movw	r2, #313	@ 0x139
 800d95c:	4911      	ldr	r1, [pc, #68]	@ (800d9a4 <tcpip_callback+0x64>)
 800d95e:	4812      	ldr	r0, [pc, #72]	@ (800d9a8 <tcpip_callback+0x68>)
 800d960:	f00d fc26 	bl	801b1b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d964:	2008      	movs	r0, #8
 800d966:	f000 fef1 	bl	800e74c <memp_malloc>
 800d96a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d102      	bne.n	800d978 <tcpip_callback+0x38>
    return ERR_MEM;
 800d972:	f04f 33ff 	mov.w	r3, #4294967295
 800d976:	e00d      	b.n	800d994 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2201      	movs	r2, #1
 800d97c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800d98a:	68f9      	ldr	r1, [r7, #12]
 800d98c:	4803      	ldr	r0, [pc, #12]	@ (800d99c <tcpip_callback+0x5c>)
 800d98e:	f00c fc75 	bl	801a27c <sys_mbox_post>
  return ERR_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	2000a2e0 	.word	0x2000a2e0
 800d9a0:	0801dce4 	.word	0x0801dce4
 800d9a4:	0801dd5c 	.word	0x0801dd5c
 800d9a8:	0801dd34 	.word	0x0801dd34

0800d9ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d9b6:	4819      	ldr	r0, [pc, #100]	@ (800da1c <tcpip_try_callback+0x70>)
 800d9b8:	f00c fccf 	bl	801a35a <sys_mbox_valid>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <tcpip_try_callback+0x24>
 800d9c2:	4b17      	ldr	r3, [pc, #92]	@ (800da20 <tcpip_try_callback+0x74>)
 800d9c4:	f240 125d 	movw	r2, #349	@ 0x15d
 800d9c8:	4916      	ldr	r1, [pc, #88]	@ (800da24 <tcpip_try_callback+0x78>)
 800d9ca:	4817      	ldr	r0, [pc, #92]	@ (800da28 <tcpip_try_callback+0x7c>)
 800d9cc:	f00d fbf0 	bl	801b1b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d9d0:	2008      	movs	r0, #8
 800d9d2:	f000 febb 	bl	800e74c <memp_malloc>
 800d9d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d102      	bne.n	800d9e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d9de:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e2:	e017      	b.n	800da14 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d9f6:	68f9      	ldr	r1, [r7, #12]
 800d9f8:	4808      	ldr	r0, [pc, #32]	@ (800da1c <tcpip_try_callback+0x70>)
 800d9fa:	f00c fc55 	bl	801a2a8 <sys_mbox_trypost>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d006      	beq.n	800da12 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800da04:	68f9      	ldr	r1, [r7, #12]
 800da06:	2008      	movs	r0, #8
 800da08:	f000 fef2 	bl	800e7f0 <memp_free>
    return ERR_MEM;
 800da0c:	f04f 33ff 	mov.w	r3, #4294967295
 800da10:	e000      	b.n	800da14 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	2000a2e0 	.word	0x2000a2e0
 800da20:	0801dce4 	.word	0x0801dce4
 800da24:	0801dd5c 	.word	0x0801dd5c
 800da28:	0801dd34 	.word	0x0801dd34

0800da2c <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800da36:	4808      	ldr	r0, [pc, #32]	@ (800da58 <tcpip_api_call+0x2c>)
 800da38:	f00c fcc8 	bl	801a3cc <sys_mutex_lock>
  err = fn(call);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6838      	ldr	r0, [r7, #0]
 800da40:	4798      	blx	r3
 800da42:	4603      	mov	r3, r0
 800da44:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800da46:	4804      	ldr	r0, [pc, #16]	@ (800da58 <tcpip_api_call+0x2c>)
 800da48:	f00c fccf 	bl	801a3ea <sys_mutex_unlock>
  return err;
 800da4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	2000a2e4 	.word	0x2000a2e4

0800da5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af02      	add	r7, sp, #8
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  lwip_init();
 800da66:	f000 f9ea 	bl	800de3e <lwip_init>

  tcpip_init_done = initfunc;
 800da6a:	4a17      	ldr	r2, [pc, #92]	@ (800dac8 <tcpip_init+0x6c>)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800da70:	4a16      	ldr	r2, [pc, #88]	@ (800dacc <tcpip_init+0x70>)
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800da76:	210a      	movs	r1, #10
 800da78:	4815      	ldr	r0, [pc, #84]	@ (800dad0 <tcpip_init+0x74>)
 800da7a:	f00c fbe1 	bl	801a240 <sys_mbox_new>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800da84:	4b13      	ldr	r3, [pc, #76]	@ (800dad4 <tcpip_init+0x78>)
 800da86:	f240 2261 	movw	r2, #609	@ 0x261
 800da8a:	4913      	ldr	r1, [pc, #76]	@ (800dad8 <tcpip_init+0x7c>)
 800da8c:	4813      	ldr	r0, [pc, #76]	@ (800dadc <tcpip_init+0x80>)
 800da8e:	f00d fb8f 	bl	801b1b0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800da92:	4813      	ldr	r0, [pc, #76]	@ (800dae0 <tcpip_init+0x84>)
 800da94:	f00c fc80 	bl	801a398 <sys_mutex_new>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d006      	beq.n	800daac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800da9e:	4b0d      	ldr	r3, [pc, #52]	@ (800dad4 <tcpip_init+0x78>)
 800daa0:	f240 2265 	movw	r2, #613	@ 0x265
 800daa4:	490f      	ldr	r1, [pc, #60]	@ (800dae4 <tcpip_init+0x88>)
 800daa6:	480d      	ldr	r0, [pc, #52]	@ (800dadc <tcpip_init+0x80>)
 800daa8:	f00d fb82 	bl	801b1b0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800daac:	f04f 33ff 	mov.w	r3, #4294967295
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dab6:	2200      	movs	r2, #0
 800dab8:	490b      	ldr	r1, [pc, #44]	@ (800dae8 <tcpip_init+0x8c>)
 800daba:	480c      	ldr	r0, [pc, #48]	@ (800daec <tcpip_init+0x90>)
 800dabc:	f00c fca2 	bl	801a404 <sys_thread_new>
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	2000a2d8 	.word	0x2000a2d8
 800dacc:	2000a2dc 	.word	0x2000a2dc
 800dad0:	2000a2e0 	.word	0x2000a2e0
 800dad4:	0801dce4 	.word	0x0801dce4
 800dad8:	0801dd6c 	.word	0x0801dd6c
 800dadc:	0801dd34 	.word	0x0801dd34
 800dae0:	2000a2e4 	.word	0x2000a2e4
 800dae4:	0801dd90 	.word	0x0801dd90
 800dae8:	0800d77d 	.word	0x0800d77d
 800daec:	0801ddb4 	.word	0x0801ddb4

0800daf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800dafa:	88fb      	ldrh	r3, [r7, #6]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	b21a      	sxth	r2, r3
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	0a1b      	lsrs	r3, r3, #8
 800db04:	b29b      	uxth	r3, r3
 800db06:	b21b      	sxth	r3, r3
 800db08:	4313      	orrs	r3, r2
 800db0a:	b21b      	sxth	r3, r3
 800db0c:	b29b      	uxth	r3, r3
}
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	061a      	lsls	r2, r3, #24
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	021b      	lsls	r3, r3, #8
 800db2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db2e:	431a      	orrs	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	0a1b      	lsrs	r3, r3, #8
 800db34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	0e1b      	lsrs	r3, r3, #24
 800db3e:	4313      	orrs	r3, r2
}
 800db40:	4618      	mov	r0, r3
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b089      	sub	sp, #36	@ 0x24
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00d      	beq.n	800db8c <lwip_standard_chksum+0x40>
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	dd0a      	ble.n	800db8c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	1c53      	adds	r3, r2, #1
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	f107 030e 	add.w	r3, r7, #14
 800db80:	3301      	adds	r3, #1
 800db82:	7812      	ldrb	r2, [r2, #0]
 800db84:	701a      	strb	r2, [r3, #0]
    len--;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	3b01      	subs	r3, #1
 800db8a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800db90:	e00a      	b.n	800dba8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	1c9a      	adds	r2, r3, #2
 800db96:	61ba      	str	r2, [r7, #24]
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	4413      	add	r3, r2
 800dba0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	3b02      	subs	r3, #2
 800dba6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	dcf1      	bgt.n	800db92 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dd04      	ble.n	800dbbe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800dbb4:	f107 030e 	add.w	r3, r7, #14
 800dbb8:	69ba      	ldr	r2, [r7, #24]
 800dbba:	7812      	ldrb	r2, [r2, #0]
 800dbbc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800dbbe:	89fb      	ldrh	r3, [r7, #14]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	0c1a      	lsrs	r2, r3, #16
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	4413      	add	r3, r2
 800dbd2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	0c1a      	lsrs	r2, r3, #16
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	4413      	add	r3, r2
 800dbde:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d007      	beq.n	800dbf6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	021b      	lsls	r3, r3, #8
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	b29b      	uxth	r3, r3
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3724      	adds	r7, #36	@ 0x24
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b086      	sub	sp, #24
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	607b      	str	r3, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	72fb      	strb	r3, [r7, #11]
 800dc14:	4613      	mov	r3, r2
 800dc16:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	e02b      	b.n	800dc7a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	895b      	ldrh	r3, [r3, #10]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f7ff ff8d 	bl	800db4c <lwip_standard_chksum>
 800dc32:	4603      	mov	r3, r0
 800dc34:	461a      	mov	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4413      	add	r3, r2
 800dc3a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	0c1a      	lsrs	r2, r3, #16
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	4413      	add	r3, r2
 800dc46:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	895b      	ldrh	r3, [r3, #10]
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00e      	beq.n	800dc74 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	bf0c      	ite	eq
 800dc5c:	2301      	moveq	r3, #1
 800dc5e:	2300      	movne	r3, #0
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	021b      	lsls	r3, r3, #8
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	0a1b      	lsrs	r3, r3, #8
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	4313      	orrs	r3, r2
 800dc72:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	617b      	str	r3, [r7, #20]
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1d0      	bne.n	800dc22 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	021b      	lsls	r3, r3, #8
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	4313      	orrs	r3, r2
 800dc94:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800dc96:	7afb      	ldrb	r3, [r7, #11]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff ff28 	bl	800daf0 <lwip_htons>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4413      	add	r3, r2
 800dca8:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800dcaa:	893b      	ldrh	r3, [r7, #8]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7ff ff1f 	bl	800daf0 <lwip_htons>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4413      	add	r3, r2
 800dcba:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	0c1a      	lsrs	r2, r3, #16
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4413      	add	r3, r2
 800dcc6:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	0c1a      	lsrs	r2, r3, #16
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	43db      	mvns	r3, r3
 800dcda:	b29b      	uxth	r3, r3
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	607b      	str	r3, [r7, #4]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	72fb      	strb	r3, [r7, #11]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	0c1b      	lsrs	r3, r3, #16
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	4413      	add	r3, r2
 800dd0a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	693a      	ldr	r2, [r7, #16]
 800dd18:	4413      	add	r3, r2
 800dd1a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	0c1b      	lsrs	r3, r3, #16
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	4413      	add	r3, r2
 800dd24:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	0c1a      	lsrs	r2, r3, #16
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	4413      	add	r3, r2
 800dd30:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	0c1a      	lsrs	r2, r3, #16
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	4413      	add	r3, r2
 800dd3c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800dd3e:	893a      	ldrh	r2, [r7, #8]
 800dd40:	7af9      	ldrb	r1, [r7, #11]
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff ff5e 	bl	800dc06 <inet_cksum_pseudo_base>
 800dd4a:	4603      	mov	r3, r0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af02      	add	r7, sp, #8
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	607b      	str	r3, [r7, #4]
 800dd5e:	460b      	mov	r3, r1
 800dd60:	72fb      	strb	r3, [r7, #11]
 800dd62:	4613      	mov	r3, r2
 800dd64:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800dd66:	893a      	ldrh	r2, [r7, #8]
 800dd68:	7af9      	ldrb	r1, [r7, #11]
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f7ff ffb7 	bl	800dce4 <inet_chksum_pseudo>
 800dd76:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dd8c:	887b      	ldrh	r3, [r7, #2]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fedb 	bl	800db4c <lwip_standard_chksum>
 800dd96:	4603      	mov	r3, r0
 800dd98:	43db      	mvns	r3, r3
 800dd9a:	b29b      	uxth	r3, r3
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	e02b      	b.n	800de12 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	895b      	ldrh	r3, [r3, #10]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	f7ff fec1 	bl	800db4c <lwip_standard_chksum>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	0c1a      	lsrs	r2, r3, #16
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4413      	add	r3, r2
 800ddde:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	895b      	ldrh	r3, [r3, #10]
 800dde4:	f003 0301 	and.w	r3, r3, #1
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00e      	beq.n	800de0c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bf0c      	ite	eq
 800ddf4:	2301      	moveq	r3, #1
 800ddf6:	2300      	movne	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	021b      	lsls	r3, r3, #8
 800de00:	b29a      	uxth	r2, r3
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	b2db      	uxtb	r3, r3
 800de08:	4313      	orrs	r3, r2
 800de0a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	613b      	str	r3, [r7, #16]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1d0      	bne.n	800ddba <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d007      	beq.n	800de2e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	021b      	lsls	r3, r3, #8
 800de22:	b29a      	uxth	r2, r3
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	0a1b      	lsrs	r3, r3, #8
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	4313      	orrs	r3, r2
 800de2c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	b29b      	uxth	r3, r3
 800de32:	43db      	mvns	r3, r3
 800de34:	b29b      	uxth	r3, r3
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800de48:	f00c fa98 	bl	801a37c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800de4c:	f000 f8d4 	bl	800dff8 <mem_init>
  memp_init();
 800de50:	f000 fc30 	bl	800e6b4 <memp_init>
  pbuf_init();
  netif_init();
 800de54:	f000 fcf6 	bl	800e844 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800de58:	f007 f9d0 	bl	80151fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800de5c:	f001 feac 	bl	800fbb8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800de60:	f007 f912 	bl	8015088 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	4603      	mov	r3, r0
 800de74:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800de76:	4b05      	ldr	r3, [pc, #20]	@ (800de8c <ptr_to_mem+0x20>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	88fb      	ldrh	r3, [r7, #6]
 800de7c:	4413      	add	r3, r2
}
 800de7e:	4618      	mov	r0, r3
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	2000f314 	.word	0x2000f314

0800de90 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800de98:	4b05      	ldr	r3, [pc, #20]	@ (800deb0 <mem_to_ptr+0x20>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	b29b      	uxth	r3, r3
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	2000f314 	.word	0x2000f314

0800deb4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800debc:	4b45      	ldr	r3, [pc, #276]	@ (800dfd4 <plug_holes+0x120>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d206      	bcs.n	800ded4 <plug_holes+0x20>
 800dec6:	4b44      	ldr	r3, [pc, #272]	@ (800dfd8 <plug_holes+0x124>)
 800dec8:	f240 12df 	movw	r2, #479	@ 0x1df
 800decc:	4943      	ldr	r1, [pc, #268]	@ (800dfdc <plug_holes+0x128>)
 800dece:	4844      	ldr	r0, [pc, #272]	@ (800dfe0 <plug_holes+0x12c>)
 800ded0:	f00d f96e 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ded4:	4b43      	ldr	r3, [pc, #268]	@ (800dfe4 <plug_holes+0x130>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d306      	bcc.n	800deec <plug_holes+0x38>
 800dede:	4b3e      	ldr	r3, [pc, #248]	@ (800dfd8 <plug_holes+0x124>)
 800dee0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dee4:	4940      	ldr	r1, [pc, #256]	@ (800dfe8 <plug_holes+0x134>)
 800dee6:	483e      	ldr	r0, [pc, #248]	@ (800dfe0 <plug_holes+0x12c>)
 800dee8:	f00d f962 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	791b      	ldrb	r3, [r3, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d006      	beq.n	800df02 <plug_holes+0x4e>
 800def4:	4b38      	ldr	r3, [pc, #224]	@ (800dfd8 <plug_holes+0x124>)
 800def6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800defa:	493c      	ldr	r1, [pc, #240]	@ (800dfec <plug_holes+0x138>)
 800defc:	4838      	ldr	r0, [pc, #224]	@ (800dfe0 <plug_holes+0x12c>)
 800defe:	f00d f957 	bl	801b1b0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800df0a:	d906      	bls.n	800df1a <plug_holes+0x66>
 800df0c:	4b32      	ldr	r3, [pc, #200]	@ (800dfd8 <plug_holes+0x124>)
 800df0e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800df12:	4937      	ldr	r1, [pc, #220]	@ (800dff0 <plug_holes+0x13c>)
 800df14:	4832      	ldr	r0, [pc, #200]	@ (800dfe0 <plug_holes+0x12c>)
 800df16:	f00d f94b 	bl	801b1b0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7ff ffa4 	bl	800de6c <ptr_to_mem>
 800df24:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d024      	beq.n	800df78 <plug_holes+0xc4>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	791b      	ldrb	r3, [r3, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d120      	bne.n	800df78 <plug_holes+0xc4>
 800df36:	4b2b      	ldr	r3, [pc, #172]	@ (800dfe4 <plug_holes+0x130>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d01b      	beq.n	800df78 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800df40:	4b2c      	ldr	r3, [pc, #176]	@ (800dff4 <plug_holes+0x140>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	429a      	cmp	r2, r3
 800df48:	d102      	bne.n	800df50 <plug_holes+0x9c>
      lfree = mem;
 800df4a:	4a2a      	ldr	r2, [pc, #168]	@ (800dff4 <plug_holes+0x140>)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	881a      	ldrh	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	881b      	ldrh	r3, [r3, #0]
 800df5c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800df60:	d00a      	beq.n	800df78 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff ff80 	bl	800de6c <ptr_to_mem>
 800df6c:	4604      	mov	r4, r0
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff ff8e 	bl	800de90 <mem_to_ptr>
 800df74:	4603      	mov	r3, r0
 800df76:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	885b      	ldrh	r3, [r3, #2]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff ff75 	bl	800de6c <ptr_to_mem>
 800df82:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d01f      	beq.n	800dfcc <plug_holes+0x118>
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	791b      	ldrb	r3, [r3, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d11b      	bne.n	800dfcc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800df94:	4b17      	ldr	r3, [pc, #92]	@ (800dff4 <plug_holes+0x140>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d102      	bne.n	800dfa4 <plug_holes+0xf0>
      lfree = pmem;
 800df9e:	4a15      	ldr	r2, [pc, #84]	@ (800dff4 <plug_holes+0x140>)
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	881a      	ldrh	r2, [r3, #0]
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800dfb4:	d00a      	beq.n	800dfcc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff ff56 	bl	800de6c <ptr_to_mem>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	68b8      	ldr	r0, [r7, #8]
 800dfc4:	f7ff ff64 	bl	800de90 <mem_to_ptr>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dfcc:	bf00      	nop
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd90      	pop	{r4, r7, pc}
 800dfd4:	2000f314 	.word	0x2000f314
 800dfd8:	0801ddbc 	.word	0x0801ddbc
 800dfdc:	0801ddec 	.word	0x0801ddec
 800dfe0:	0801de04 	.word	0x0801de04
 800dfe4:	2000f318 	.word	0x2000f318
 800dfe8:	0801de2c 	.word	0x0801de2c
 800dfec:	0801de48 	.word	0x0801de48
 800dff0:	0801de64 	.word	0x0801de64
 800dff4:	2000f320 	.word	0x2000f320

0800dff8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dffe:	4b1f      	ldr	r3, [pc, #124]	@ (800e07c <mem_init+0x84>)
 800e000:	3303      	adds	r3, #3
 800e002:	f023 0303 	bic.w	r3, r3, #3
 800e006:	461a      	mov	r2, r3
 800e008:	4b1d      	ldr	r3, [pc, #116]	@ (800e080 <mem_init+0x88>)
 800e00a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e00c:	4b1c      	ldr	r3, [pc, #112]	@ (800e080 <mem_init+0x88>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800e018:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e026:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 800e02a:	f7ff ff1f 	bl	800de6c <ptr_to_mem>
 800e02e:	4603      	mov	r3, r0
 800e030:	4a14      	ldr	r2, [pc, #80]	@ (800e084 <mem_init+0x8c>)
 800e032:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e034:	4b13      	ldr	r3, [pc, #76]	@ (800e084 <mem_init+0x8c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2201      	movs	r2, #1
 800e03a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e03c:	4b11      	ldr	r3, [pc, #68]	@ (800e084 <mem_init+0x8c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800e044:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e046:	4b0f      	ldr	r3, [pc, #60]	@ (800e084 <mem_init+0x8c>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800e04e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e050:	4b0b      	ldr	r3, [pc, #44]	@ (800e080 <mem_init+0x88>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a0c      	ldr	r2, [pc, #48]	@ (800e088 <mem_init+0x90>)
 800e056:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e058:	480c      	ldr	r0, [pc, #48]	@ (800e08c <mem_init+0x94>)
 800e05a:	f00c f99d 	bl	801a398 <sys_mutex_new>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d006      	beq.n	800e072 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e064:	4b0a      	ldr	r3, [pc, #40]	@ (800e090 <mem_init+0x98>)
 800e066:	f240 221f 	movw	r2, #543	@ 0x21f
 800e06a:	490a      	ldr	r1, [pc, #40]	@ (800e094 <mem_init+0x9c>)
 800e06c:	480a      	ldr	r0, [pc, #40]	@ (800e098 <mem_init+0xa0>)
 800e06e:	f00d f89f 	bl	801b1b0 <iprintf>
  }
}
 800e072:	bf00      	nop
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	2000a300 	.word	0x2000a300
 800e080:	2000f314 	.word	0x2000f314
 800e084:	2000f318 	.word	0x2000f318
 800e088:	2000f320 	.word	0x2000f320
 800e08c:	2000f31c 	.word	0x2000f31c
 800e090:	0801ddbc 	.word	0x0801ddbc
 800e094:	0801de90 	.word	0x0801de90
 800e098:	0801de04 	.word	0x0801de04

0800e09c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff fef3 	bl	800de90 <mem_to_ptr>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	881b      	ldrh	r3, [r3, #0]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7ff feda 	bl	800de6c <ptr_to_mem>
 800e0b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	885b      	ldrh	r3, [r3, #2]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff fed4 	bl	800de6c <ptr_to_mem>
 800e0c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e0ce:	d818      	bhi.n	800e102 <mem_link_valid+0x66>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	885b      	ldrh	r3, [r3, #2]
 800e0d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e0d8:	d813      	bhi.n	800e102 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e0de:	8afa      	ldrh	r2, [r7, #22]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d004      	beq.n	800e0ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	881b      	ldrh	r3, [r3, #0]
 800e0e8:	8afa      	ldrh	r2, [r7, #22]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d109      	bne.n	800e102 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e0ee:	4b08      	ldr	r3, [pc, #32]	@ (800e110 <mem_link_valid+0x74>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e0f2:	693a      	ldr	r2, [r7, #16]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d006      	beq.n	800e106 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	885b      	ldrh	r3, [r3, #2]
 800e0fc:	8afa      	ldrh	r2, [r7, #22]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d001      	beq.n	800e106 <mem_link_valid+0x6a>
    return 0;
 800e102:	2300      	movs	r3, #0
 800e104:	e000      	b.n	800e108 <mem_link_valid+0x6c>
  }
  return 1;
 800e106:	2301      	movs	r3, #1
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3718      	adds	r7, #24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	2000f318 	.word	0x2000f318

0800e114 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d070      	beq.n	800e204 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f003 0303 	and.w	r3, r3, #3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d00d      	beq.n	800e148 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e12c:	4b37      	ldr	r3, [pc, #220]	@ (800e20c <mem_free+0xf8>)
 800e12e:	f240 2273 	movw	r2, #627	@ 0x273
 800e132:	4937      	ldr	r1, [pc, #220]	@ (800e210 <mem_free+0xfc>)
 800e134:	4837      	ldr	r0, [pc, #220]	@ (800e214 <mem_free+0x100>)
 800e136:	f00d f83b 	bl	801b1b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e13a:	f00c f981 	bl	801a440 <sys_arch_protect>
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f00c f98b 	bl	801a45c <sys_arch_unprotect>
    return;
 800e146:	e05e      	b.n	800e206 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3b08      	subs	r3, #8
 800e14c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e14e:	4b32      	ldr	r3, [pc, #200]	@ (800e218 <mem_free+0x104>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	429a      	cmp	r2, r3
 800e156:	d306      	bcc.n	800e166 <mem_free+0x52>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f103 020c 	add.w	r2, r3, #12
 800e15e:	4b2f      	ldr	r3, [pc, #188]	@ (800e21c <mem_free+0x108>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	429a      	cmp	r2, r3
 800e164:	d90d      	bls.n	800e182 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e166:	4b29      	ldr	r3, [pc, #164]	@ (800e20c <mem_free+0xf8>)
 800e168:	f240 227f 	movw	r2, #639	@ 0x27f
 800e16c:	492c      	ldr	r1, [pc, #176]	@ (800e220 <mem_free+0x10c>)
 800e16e:	4829      	ldr	r0, [pc, #164]	@ (800e214 <mem_free+0x100>)
 800e170:	f00d f81e 	bl	801b1b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e174:	f00c f964 	bl	801a440 <sys_arch_protect>
 800e178:	6138      	str	r0, [r7, #16]
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f00c f96e 	bl	801a45c <sys_arch_unprotect>
    return;
 800e180:	e041      	b.n	800e206 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e182:	4828      	ldr	r0, [pc, #160]	@ (800e224 <mem_free+0x110>)
 800e184:	f00c f922 	bl	801a3cc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	791b      	ldrb	r3, [r3, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d110      	bne.n	800e1b2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e190:	4b1e      	ldr	r3, [pc, #120]	@ (800e20c <mem_free+0xf8>)
 800e192:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e196:	4924      	ldr	r1, [pc, #144]	@ (800e228 <mem_free+0x114>)
 800e198:	481e      	ldr	r0, [pc, #120]	@ (800e214 <mem_free+0x100>)
 800e19a:	f00d f809 	bl	801b1b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e19e:	4821      	ldr	r0, [pc, #132]	@ (800e224 <mem_free+0x110>)
 800e1a0:	f00c f923 	bl	801a3ea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e1a4:	f00c f94c 	bl	801a440 <sys_arch_protect>
 800e1a8:	6178      	str	r0, [r7, #20]
 800e1aa:	6978      	ldr	r0, [r7, #20]
 800e1ac:	f00c f956 	bl	801a45c <sys_arch_unprotect>
    return;
 800e1b0:	e029      	b.n	800e206 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e1b2:	69f8      	ldr	r0, [r7, #28]
 800e1b4:	f7ff ff72 	bl	800e09c <mem_link_valid>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d110      	bne.n	800e1e0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e1be:	4b13      	ldr	r3, [pc, #76]	@ (800e20c <mem_free+0xf8>)
 800e1c0:	f240 2295 	movw	r2, #661	@ 0x295
 800e1c4:	4919      	ldr	r1, [pc, #100]	@ (800e22c <mem_free+0x118>)
 800e1c6:	4813      	ldr	r0, [pc, #76]	@ (800e214 <mem_free+0x100>)
 800e1c8:	f00c fff2 	bl	801b1b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e1cc:	4815      	ldr	r0, [pc, #84]	@ (800e224 <mem_free+0x110>)
 800e1ce:	f00c f90c 	bl	801a3ea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e1d2:	f00c f935 	bl	801a440 <sys_arch_protect>
 800e1d6:	61b8      	str	r0, [r7, #24]
 800e1d8:	69b8      	ldr	r0, [r7, #24]
 800e1da:	f00c f93f 	bl	801a45c <sys_arch_unprotect>
    return;
 800e1de:	e012      	b.n	800e206 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e1e6:	4b12      	ldr	r3, [pc, #72]	@ (800e230 <mem_free+0x11c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69fa      	ldr	r2, [r7, #28]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d202      	bcs.n	800e1f6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e1f0:	4a0f      	ldr	r2, [pc, #60]	@ (800e230 <mem_free+0x11c>)
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e1f6:	69f8      	ldr	r0, [r7, #28]
 800e1f8:	f7ff fe5c 	bl	800deb4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e1fc:	4809      	ldr	r0, [pc, #36]	@ (800e224 <mem_free+0x110>)
 800e1fe:	f00c f8f4 	bl	801a3ea <sys_mutex_unlock>
 800e202:	e000      	b.n	800e206 <mem_free+0xf2>
    return;
 800e204:	bf00      	nop
}
 800e206:	3720      	adds	r7, #32
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	0801ddbc 	.word	0x0801ddbc
 800e210:	0801deac 	.word	0x0801deac
 800e214:	0801de04 	.word	0x0801de04
 800e218:	2000f314 	.word	0x2000f314
 800e21c:	2000f318 	.word	0x2000f318
 800e220:	0801ded0 	.word	0x0801ded0
 800e224:	2000f31c 	.word	0x2000f31c
 800e228:	0801deec 	.word	0x0801deec
 800e22c:	0801df14 	.word	0x0801df14
 800e230:	2000f320 	.word	0x2000f320

0800e234 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	460b      	mov	r3, r1
 800e23e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e240:	887b      	ldrh	r3, [r7, #2]
 800e242:	3303      	adds	r3, #3
 800e244:	b29b      	uxth	r3, r3
 800e246:	f023 0303 	bic.w	r3, r3, #3
 800e24a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e24c:	8bfb      	ldrh	r3, [r7, #30]
 800e24e:	2b0b      	cmp	r3, #11
 800e250:	d801      	bhi.n	800e256 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e252:	230c      	movs	r3, #12
 800e254:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e256:	8bfb      	ldrh	r3, [r7, #30]
 800e258:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e25c:	d803      	bhi.n	800e266 <mem_trim+0x32>
 800e25e:	8bfa      	ldrh	r2, [r7, #30]
 800e260:	887b      	ldrh	r3, [r7, #2]
 800e262:	429a      	cmp	r2, r3
 800e264:	d201      	bcs.n	800e26a <mem_trim+0x36>
    return NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	e0d8      	b.n	800e41c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e26a:	4b6e      	ldr	r3, [pc, #440]	@ (800e424 <mem_trim+0x1f0>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	d304      	bcc.n	800e27e <mem_trim+0x4a>
 800e274:	4b6c      	ldr	r3, [pc, #432]	@ (800e428 <mem_trim+0x1f4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d306      	bcc.n	800e28c <mem_trim+0x58>
 800e27e:	4b6b      	ldr	r3, [pc, #428]	@ (800e42c <mem_trim+0x1f8>)
 800e280:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e284:	496a      	ldr	r1, [pc, #424]	@ (800e430 <mem_trim+0x1fc>)
 800e286:	486b      	ldr	r0, [pc, #428]	@ (800e434 <mem_trim+0x200>)
 800e288:	f00c ff92 	bl	801b1b0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e28c:	4b65      	ldr	r3, [pc, #404]	@ (800e424 <mem_trim+0x1f0>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	429a      	cmp	r2, r3
 800e294:	d304      	bcc.n	800e2a0 <mem_trim+0x6c>
 800e296:	4b64      	ldr	r3, [pc, #400]	@ (800e428 <mem_trim+0x1f4>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d307      	bcc.n	800e2b0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2a0:	f00c f8ce 	bl	801a440 <sys_arch_protect>
 800e2a4:	60b8      	str	r0, [r7, #8]
 800e2a6:	68b8      	ldr	r0, [r7, #8]
 800e2a8:	f00c f8d8 	bl	801a45c <sys_arch_unprotect>
    return rmem;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	e0b5      	b.n	800e41c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3b08      	subs	r3, #8
 800e2b4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e2b6:	69b8      	ldr	r0, [r7, #24]
 800e2b8:	f7ff fdea 	bl	800de90 <mem_to_ptr>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	881a      	ldrh	r2, [r3, #0]
 800e2c4:	8afb      	ldrh	r3, [r7, #22]
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3b08      	subs	r3, #8
 800e2cc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e2ce:	8bfa      	ldrh	r2, [r7, #30]
 800e2d0:	8abb      	ldrh	r3, [r7, #20]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d906      	bls.n	800e2e4 <mem_trim+0xb0>
 800e2d6:	4b55      	ldr	r3, [pc, #340]	@ (800e42c <mem_trim+0x1f8>)
 800e2d8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e2dc:	4956      	ldr	r1, [pc, #344]	@ (800e438 <mem_trim+0x204>)
 800e2de:	4855      	ldr	r0, [pc, #340]	@ (800e434 <mem_trim+0x200>)
 800e2e0:	f00c ff66 	bl	801b1b0 <iprintf>
  if (newsize > size) {
 800e2e4:	8bfa      	ldrh	r2, [r7, #30]
 800e2e6:	8abb      	ldrh	r3, [r7, #20]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d901      	bls.n	800e2f0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e095      	b.n	800e41c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e2f0:	8bfa      	ldrh	r2, [r7, #30]
 800e2f2:	8abb      	ldrh	r3, [r7, #20]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d101      	bne.n	800e2fc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	e08f      	b.n	800e41c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e2fc:	484f      	ldr	r0, [pc, #316]	@ (800e43c <mem_trim+0x208>)
 800e2fe:	f00c f865 	bl	801a3cc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	881b      	ldrh	r3, [r3, #0]
 800e306:	4618      	mov	r0, r3
 800e308:	f7ff fdb0 	bl	800de6c <ptr_to_mem>
 800e30c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	791b      	ldrb	r3, [r3, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d13f      	bne.n	800e396 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e31e:	d106      	bne.n	800e32e <mem_trim+0xfa>
 800e320:	4b42      	ldr	r3, [pc, #264]	@ (800e42c <mem_trim+0x1f8>)
 800e322:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e326:	4946      	ldr	r1, [pc, #280]	@ (800e440 <mem_trim+0x20c>)
 800e328:	4842      	ldr	r0, [pc, #264]	@ (800e434 <mem_trim+0x200>)
 800e32a:	f00c ff41 	bl	801b1b0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e334:	8afa      	ldrh	r2, [r7, #22]
 800e336:	8bfb      	ldrh	r3, [r7, #30]
 800e338:	4413      	add	r3, r2
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	3308      	adds	r3, #8
 800e33e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e340:	4b40      	ldr	r3, [pc, #256]	@ (800e444 <mem_trim+0x210>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	429a      	cmp	r2, r3
 800e348:	d106      	bne.n	800e358 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e34a:	89fb      	ldrh	r3, [r7, #14]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff fd8d 	bl	800de6c <ptr_to_mem>
 800e352:	4603      	mov	r3, r0
 800e354:	4a3b      	ldr	r2, [pc, #236]	@ (800e444 <mem_trim+0x210>)
 800e356:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e358:	89fb      	ldrh	r3, [r7, #14]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fd86 	bl	800de6c <ptr_to_mem>
 800e360:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2200      	movs	r2, #0
 800e366:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	89ba      	ldrh	r2, [r7, #12]
 800e36c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	8afa      	ldrh	r2, [r7, #22]
 800e372:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	89fa      	ldrh	r2, [r7, #14]
 800e378:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e382:	d047      	beq.n	800e414 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	4618      	mov	r0, r3
 800e38a:	f7ff fd6f 	bl	800de6c <ptr_to_mem>
 800e38e:	4602      	mov	r2, r0
 800e390:	89fb      	ldrh	r3, [r7, #14]
 800e392:	8053      	strh	r3, [r2, #2]
 800e394:	e03e      	b.n	800e414 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e396:	8bfb      	ldrh	r3, [r7, #30]
 800e398:	f103 0214 	add.w	r2, r3, #20
 800e39c:	8abb      	ldrh	r3, [r7, #20]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d838      	bhi.n	800e414 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e3a2:	8afa      	ldrh	r2, [r7, #22]
 800e3a4:	8bfb      	ldrh	r3, [r7, #30]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e3b6:	d106      	bne.n	800e3c6 <mem_trim+0x192>
 800e3b8:	4b1c      	ldr	r3, [pc, #112]	@ (800e42c <mem_trim+0x1f8>)
 800e3ba:	f240 3216 	movw	r2, #790	@ 0x316
 800e3be:	4920      	ldr	r1, [pc, #128]	@ (800e440 <mem_trim+0x20c>)
 800e3c0:	481c      	ldr	r0, [pc, #112]	@ (800e434 <mem_trim+0x200>)
 800e3c2:	f00c fef5 	bl	801b1b0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e3c6:	89fb      	ldrh	r3, [r7, #14]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff fd4f 	bl	800de6c <ptr_to_mem>
 800e3ce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e444 <mem_trim+0x210>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d202      	bcs.n	800e3e0 <mem_trim+0x1ac>
      lfree = mem2;
 800e3da:	4a1a      	ldr	r2, [pc, #104]	@ (800e444 <mem_trim+0x210>)
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	881a      	ldrh	r2, [r3, #0]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	8afa      	ldrh	r2, [r7, #22]
 800e3f2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	89fa      	ldrh	r2, [r7, #14]
 800e3f8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e402:	d007      	beq.n	800e414 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	4618      	mov	r0, r3
 800e40a:	f7ff fd2f 	bl	800de6c <ptr_to_mem>
 800e40e:	4602      	mov	r2, r0
 800e410:	89fb      	ldrh	r3, [r7, #14]
 800e412:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e414:	4809      	ldr	r0, [pc, #36]	@ (800e43c <mem_trim+0x208>)
 800e416:	f00b ffe8 	bl	801a3ea <sys_mutex_unlock>
  return rmem;
 800e41a:	687b      	ldr	r3, [r7, #4]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3720      	adds	r7, #32
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	2000f314 	.word	0x2000f314
 800e428:	2000f318 	.word	0x2000f318
 800e42c:	0801ddbc 	.word	0x0801ddbc
 800e430:	0801df48 	.word	0x0801df48
 800e434:	0801de04 	.word	0x0801de04
 800e438:	0801df60 	.word	0x0801df60
 800e43c:	2000f31c 	.word	0x2000f31c
 800e440:	0801df80 	.word	0x0801df80
 800e444:	2000f320 	.word	0x2000f320

0800e448 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e452:	88fb      	ldrh	r3, [r7, #6]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <mem_malloc+0x14>
    return NULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	e0e2      	b.n	800e622 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e45c:	88fb      	ldrh	r3, [r7, #6]
 800e45e:	3303      	adds	r3, #3
 800e460:	b29b      	uxth	r3, r3
 800e462:	f023 0303 	bic.w	r3, r3, #3
 800e466:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e468:	8bbb      	ldrh	r3, [r7, #28]
 800e46a:	2b0b      	cmp	r3, #11
 800e46c:	d801      	bhi.n	800e472 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e46e:	230c      	movs	r3, #12
 800e470:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e472:	8bbb      	ldrh	r3, [r7, #28]
 800e474:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e478:	d803      	bhi.n	800e482 <mem_malloc+0x3a>
 800e47a:	8bba      	ldrh	r2, [r7, #28]
 800e47c:	88fb      	ldrh	r3, [r7, #6]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d201      	bcs.n	800e486 <mem_malloc+0x3e>
    return NULL;
 800e482:	2300      	movs	r3, #0
 800e484:	e0cd      	b.n	800e622 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e486:	4869      	ldr	r0, [pc, #420]	@ (800e62c <mem_malloc+0x1e4>)
 800e488:	f00b ffa0 	bl	801a3cc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e48c:	4b68      	ldr	r3, [pc, #416]	@ (800e630 <mem_malloc+0x1e8>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff fcfd 	bl	800de90 <mem_to_ptr>
 800e496:	4603      	mov	r3, r0
 800e498:	83fb      	strh	r3, [r7, #30]
 800e49a:	e0b7      	b.n	800e60c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e49c:	8bfb      	ldrh	r3, [r7, #30]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7ff fce4 	bl	800de6c <ptr_to_mem>
 800e4a4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	791b      	ldrb	r3, [r3, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f040 80a7 	bne.w	800e5fe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	881b      	ldrh	r3, [r3, #0]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	8bfb      	ldrh	r3, [r7, #30]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	f1a3 0208 	sub.w	r2, r3, #8
 800e4be:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	f0c0 809c 	bcc.w	800e5fe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	8bfb      	ldrh	r3, [r7, #30]
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	f1a3 0208 	sub.w	r2, r3, #8
 800e4d4:	8bbb      	ldrh	r3, [r7, #28]
 800e4d6:	3314      	adds	r3, #20
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d333      	bcc.n	800e544 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e4dc:	8bfa      	ldrh	r2, [r7, #30]
 800e4de:	8bbb      	ldrh	r3, [r7, #28]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	3308      	adds	r3, #8
 800e4e6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e4e8:	8a7b      	ldrh	r3, [r7, #18]
 800e4ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e4ee:	d106      	bne.n	800e4fe <mem_malloc+0xb6>
 800e4f0:	4b50      	ldr	r3, [pc, #320]	@ (800e634 <mem_malloc+0x1ec>)
 800e4f2:	f240 3287 	movw	r2, #903	@ 0x387
 800e4f6:	4950      	ldr	r1, [pc, #320]	@ (800e638 <mem_malloc+0x1f0>)
 800e4f8:	4850      	ldr	r0, [pc, #320]	@ (800e63c <mem_malloc+0x1f4>)
 800e4fa:	f00c fe59 	bl	801b1b0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e4fe:	8a7b      	ldrh	r3, [r7, #18]
 800e500:	4618      	mov	r0, r3
 800e502:	f7ff fcb3 	bl	800de6c <ptr_to_mem>
 800e506:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	881a      	ldrh	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	8bfa      	ldrh	r2, [r7, #30]
 800e51a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	8a7a      	ldrh	r2, [r7, #18]
 800e520:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2201      	movs	r2, #1
 800e526:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e530:	d00b      	beq.n	800e54a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff fc98 	bl	800de6c <ptr_to_mem>
 800e53c:	4602      	mov	r2, r0
 800e53e:	8a7b      	ldrh	r3, [r7, #18]
 800e540:	8053      	strh	r3, [r2, #2]
 800e542:	e002      	b.n	800e54a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	2201      	movs	r2, #1
 800e548:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e54a:	4b39      	ldr	r3, [pc, #228]	@ (800e630 <mem_malloc+0x1e8>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	429a      	cmp	r2, r3
 800e552:	d127      	bne.n	800e5a4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e554:	4b36      	ldr	r3, [pc, #216]	@ (800e630 <mem_malloc+0x1e8>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e55a:	e005      	b.n	800e568 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	881b      	ldrh	r3, [r3, #0]
 800e560:	4618      	mov	r0, r3
 800e562:	f7ff fc83 	bl	800de6c <ptr_to_mem>
 800e566:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	791b      	ldrb	r3, [r3, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d004      	beq.n	800e57a <mem_malloc+0x132>
 800e570:	4b33      	ldr	r3, [pc, #204]	@ (800e640 <mem_malloc+0x1f8>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	69ba      	ldr	r2, [r7, #24]
 800e576:	429a      	cmp	r2, r3
 800e578:	d1f0      	bne.n	800e55c <mem_malloc+0x114>
          }
          lfree = cur;
 800e57a:	4a2d      	ldr	r2, [pc, #180]	@ (800e630 <mem_malloc+0x1e8>)
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e580:	4b2b      	ldr	r3, [pc, #172]	@ (800e630 <mem_malloc+0x1e8>)
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	4b2e      	ldr	r3, [pc, #184]	@ (800e640 <mem_malloc+0x1f8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d00b      	beq.n	800e5a4 <mem_malloc+0x15c>
 800e58c:	4b28      	ldr	r3, [pc, #160]	@ (800e630 <mem_malloc+0x1e8>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	791b      	ldrb	r3, [r3, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d006      	beq.n	800e5a4 <mem_malloc+0x15c>
 800e596:	4b27      	ldr	r3, [pc, #156]	@ (800e634 <mem_malloc+0x1ec>)
 800e598:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e59c:	4929      	ldr	r1, [pc, #164]	@ (800e644 <mem_malloc+0x1fc>)
 800e59e:	4827      	ldr	r0, [pc, #156]	@ (800e63c <mem_malloc+0x1f4>)
 800e5a0:	f00c fe06 	bl	801b1b0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e5a4:	4821      	ldr	r0, [pc, #132]	@ (800e62c <mem_malloc+0x1e4>)
 800e5a6:	f00b ff20 	bl	801a3ea <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e5aa:	8bba      	ldrh	r2, [r7, #28]
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	4a23      	ldr	r2, [pc, #140]	@ (800e640 <mem_malloc+0x1f8>)
 800e5b4:	6812      	ldr	r2, [r2, #0]
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d906      	bls.n	800e5c8 <mem_malloc+0x180>
 800e5ba:	4b1e      	ldr	r3, [pc, #120]	@ (800e634 <mem_malloc+0x1ec>)
 800e5bc:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e5c0:	4921      	ldr	r1, [pc, #132]	@ (800e648 <mem_malloc+0x200>)
 800e5c2:	481e      	ldr	r0, [pc, #120]	@ (800e63c <mem_malloc+0x1f4>)
 800e5c4:	f00c fdf4 	bl	801b1b0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	f003 0303 	and.w	r3, r3, #3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d006      	beq.n	800e5e0 <mem_malloc+0x198>
 800e5d2:	4b18      	ldr	r3, [pc, #96]	@ (800e634 <mem_malloc+0x1ec>)
 800e5d4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e5d8:	491c      	ldr	r1, [pc, #112]	@ (800e64c <mem_malloc+0x204>)
 800e5da:	4818      	ldr	r0, [pc, #96]	@ (800e63c <mem_malloc+0x1f4>)
 800e5dc:	f00c fde8 	bl	801b1b0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	f003 0303 	and.w	r3, r3, #3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d006      	beq.n	800e5f8 <mem_malloc+0x1b0>
 800e5ea:	4b12      	ldr	r3, [pc, #72]	@ (800e634 <mem_malloc+0x1ec>)
 800e5ec:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e5f0:	4917      	ldr	r1, [pc, #92]	@ (800e650 <mem_malloc+0x208>)
 800e5f2:	4812      	ldr	r0, [pc, #72]	@ (800e63c <mem_malloc+0x1f4>)
 800e5f4:	f00c fddc 	bl	801b1b0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	e011      	b.n	800e622 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e5fe:	8bfb      	ldrh	r3, [r7, #30]
 800e600:	4618      	mov	r0, r3
 800e602:	f7ff fc33 	bl	800de6c <ptr_to_mem>
 800e606:	4603      	mov	r3, r0
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e60c:	8bfa      	ldrh	r2, [r7, #30]
 800e60e:	8bbb      	ldrh	r3, [r7, #28]
 800e610:	f5c3 43a0 	rsb	r3, r3, #20480	@ 0x5000
 800e614:	429a      	cmp	r2, r3
 800e616:	f4ff af41 	bcc.w	800e49c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e61a:	4804      	ldr	r0, [pc, #16]	@ (800e62c <mem_malloc+0x1e4>)
 800e61c:	f00b fee5 	bl	801a3ea <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3720      	adds	r7, #32
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	2000f31c 	.word	0x2000f31c
 800e630:	2000f320 	.word	0x2000f320
 800e634:	0801ddbc 	.word	0x0801ddbc
 800e638:	0801df80 	.word	0x0801df80
 800e63c:	0801de04 	.word	0x0801de04
 800e640:	2000f318 	.word	0x2000f318
 800e644:	0801df94 	.word	0x0801df94
 800e648:	0801dfb0 	.word	0x0801dfb0
 800e64c:	0801dfe0 	.word	0x0801dfe0
 800e650:	0801e010 	.word	0x0801e010

0800e654 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	3303      	adds	r3, #3
 800e66a:	f023 0303 	bic.w	r3, r3, #3
 800e66e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e670:	2300      	movs	r3, #0
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	e011      	b.n	800e69a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	889b      	ldrh	r3, [r3, #4]
 800e68c:	461a      	mov	r2, r3
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	4413      	add	r3, r2
 800e692:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	3301      	adds	r3, #1
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	88db      	ldrh	r3, [r3, #6]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	dbe7      	blt.n	800e676 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e6a6:	bf00      	nop
 800e6a8:	bf00      	nop
 800e6aa:	3714      	adds	r7, #20
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	80fb      	strh	r3, [r7, #6]
 800e6be:	e009      	b.n	800e6d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e6c0:	88fb      	ldrh	r3, [r7, #6]
 800e6c2:	4a08      	ldr	r2, [pc, #32]	@ (800e6e4 <memp_init+0x30>)
 800e6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7ff ffc3 	bl	800e654 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e6ce:	88fb      	ldrh	r3, [r7, #6]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	80fb      	strh	r3, [r7, #6]
 800e6d4:	88fb      	ldrh	r3, [r7, #6]
 800e6d6:	2b0c      	cmp	r3, #12
 800e6d8:	d9f2      	bls.n	800e6c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e6da:	bf00      	nop
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	0806c968 	.word	0x0806c968

0800e6e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e6f0:	f00b fea6 	bl	801a440 <sys_arch_protect>
 800e6f4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d015      	beq.n	800e730 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	6812      	ldr	r2, [r2, #0]
 800e70c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f003 0303 	and.w	r3, r3, #3
 800e714:	2b00      	cmp	r3, #0
 800e716:	d006      	beq.n	800e726 <do_memp_malloc_pool+0x3e>
 800e718:	4b09      	ldr	r3, [pc, #36]	@ (800e740 <do_memp_malloc_pool+0x58>)
 800e71a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e71e:	4909      	ldr	r1, [pc, #36]	@ (800e744 <do_memp_malloc_pool+0x5c>)
 800e720:	4809      	ldr	r0, [pc, #36]	@ (800e748 <do_memp_malloc_pool+0x60>)
 800e722:	f00c fd45 	bl	801b1b0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f00b fe98 	bl	801a45c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	e003      	b.n	800e738 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f00b fe93 	bl	801a45c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	0801e0cc 	.word	0x0801e0cc
 800e744:	0801e0fc 	.word	0x0801e0fc
 800e748:	0801e120 	.word	0x0801e120

0800e74c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	4603      	mov	r3, r0
 800e754:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	2b0c      	cmp	r3, #12
 800e75a:	d908      	bls.n	800e76e <memp_malloc+0x22>
 800e75c:	4b0a      	ldr	r3, [pc, #40]	@ (800e788 <memp_malloc+0x3c>)
 800e75e:	f240 1257 	movw	r2, #343	@ 0x157
 800e762:	490a      	ldr	r1, [pc, #40]	@ (800e78c <memp_malloc+0x40>)
 800e764:	480a      	ldr	r0, [pc, #40]	@ (800e790 <memp_malloc+0x44>)
 800e766:	f00c fd23 	bl	801b1b0 <iprintf>
 800e76a:	2300      	movs	r3, #0
 800e76c:	e008      	b.n	800e780 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	4a08      	ldr	r2, [pc, #32]	@ (800e794 <memp_malloc+0x48>)
 800e772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e776:	4618      	mov	r0, r3
 800e778:	f7ff ffb6 	bl	800e6e8 <do_memp_malloc_pool>
 800e77c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e77e:	68fb      	ldr	r3, [r7, #12]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	0801e0cc 	.word	0x0801e0cc
 800e78c:	0801e15c 	.word	0x0801e15c
 800e790:	0801e120 	.word	0x0801e120
 800e794:	0806c968 	.word	0x0806c968

0800e798 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	f003 0303 	and.w	r3, r3, #3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d006      	beq.n	800e7ba <do_memp_free_pool+0x22>
 800e7ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e4 <do_memp_free_pool+0x4c>)
 800e7ae:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e7b2:	490d      	ldr	r1, [pc, #52]	@ (800e7e8 <do_memp_free_pool+0x50>)
 800e7b4:	480d      	ldr	r0, [pc, #52]	@ (800e7ec <do_memp_free_pool+0x54>)
 800e7b6:	f00c fcfb 	bl	801b1b0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e7be:	f00b fe3f 	bl	801a440 <sys_arch_protect>
 800e7c2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e7d6:	68b8      	ldr	r0, [r7, #8]
 800e7d8:	f00b fe40 	bl	801a45c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e7dc:	bf00      	nop
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	0801e0cc 	.word	0x0801e0cc
 800e7e8:	0801e17c 	.word	0x0801e17c
 800e7ec:	0801e120 	.word	0x0801e120

0800e7f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	6039      	str	r1, [r7, #0]
 800e7fa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
 800e7fe:	2b0c      	cmp	r3, #12
 800e800:	d907      	bls.n	800e812 <memp_free+0x22>
 800e802:	4b0c      	ldr	r3, [pc, #48]	@ (800e834 <memp_free+0x44>)
 800e804:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e808:	490b      	ldr	r1, [pc, #44]	@ (800e838 <memp_free+0x48>)
 800e80a:	480c      	ldr	r0, [pc, #48]	@ (800e83c <memp_free+0x4c>)
 800e80c:	f00c fcd0 	bl	801b1b0 <iprintf>
 800e810:	e00c      	b.n	800e82c <memp_free+0x3c>

  if (mem == NULL) {
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d008      	beq.n	800e82a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	4a09      	ldr	r2, [pc, #36]	@ (800e840 <memp_free+0x50>)
 800e81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e820:	6839      	ldr	r1, [r7, #0]
 800e822:	4618      	mov	r0, r3
 800e824:	f7ff ffb8 	bl	800e798 <do_memp_free_pool>
 800e828:	e000      	b.n	800e82c <memp_free+0x3c>
    return;
 800e82a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	0801e0cc 	.word	0x0801e0cc
 800e838:	0801e19c 	.word	0x0801e19c
 800e83c:	0801e120 	.word	0x0801e120
 800e840:	0806c968 	.word	0x0806c968

0800e844 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e848:	bf00      	nop
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
	...

0800e854 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d108      	bne.n	800e87a <netif_add+0x26>
 800e868:	4b5b      	ldr	r3, [pc, #364]	@ (800e9d8 <netif_add+0x184>)
 800e86a:	f240 1227 	movw	r2, #295	@ 0x127
 800e86e:	495b      	ldr	r1, [pc, #364]	@ (800e9dc <netif_add+0x188>)
 800e870:	485b      	ldr	r0, [pc, #364]	@ (800e9e0 <netif_add+0x18c>)
 800e872:	f00c fc9d 	bl	801b1b0 <iprintf>
 800e876:	2300      	movs	r3, #0
 800e878:	e0a9      	b.n	800e9ce <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d108      	bne.n	800e892 <netif_add+0x3e>
 800e880:	4b55      	ldr	r3, [pc, #340]	@ (800e9d8 <netif_add+0x184>)
 800e882:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e886:	4957      	ldr	r1, [pc, #348]	@ (800e9e4 <netif_add+0x190>)
 800e888:	4855      	ldr	r0, [pc, #340]	@ (800e9e0 <netif_add+0x18c>)
 800e88a:	f00c fc91 	bl	801b1b0 <iprintf>
 800e88e:	2300      	movs	r3, #0
 800e890:	e09d      	b.n	800e9ce <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e898:	4b53      	ldr	r3, [pc, #332]	@ (800e9e8 <netif_add+0x194>)
 800e89a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d101      	bne.n	800e8a6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e8a2:	4b51      	ldr	r3, [pc, #324]	@ (800e9e8 <netif_add+0x194>)
 800e8a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e8ac:	4b4e      	ldr	r3, [pc, #312]	@ (800e9e8 <netif_add+0x194>)
 800e8ae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	4a49      	ldr	r2, [pc, #292]	@ (800e9ec <netif_add+0x198>)
 800e8c6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3324      	adds	r3, #36	@ 0x24
 800e8da:	2204      	movs	r2, #4
 800e8dc:	2100      	movs	r1, #0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f00c fdc8 	bl	801b474 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6a3a      	ldr	r2, [r7, #32]
 800e8ee:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800e9f0 <netif_add+0x19c>)
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8fe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	68b9      	ldr	r1, [r7, #8]
 800e906:	68f8      	ldr	r0, [r7, #12]
 800e908:	f000 f914 	bl	800eb34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	4798      	blx	r3
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <netif_add+0xc8>
    return NULL;
 800e918:	2300      	movs	r3, #0
 800e91a:	e058      	b.n	800e9ce <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e922:	2bff      	cmp	r3, #255	@ 0xff
 800e924:	d103      	bne.n	800e92e <netif_add+0xda>
        netif->num = 0;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e932:	4b30      	ldr	r3, [pc, #192]	@ (800e9f4 <netif_add+0x1a0>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	e02b      	b.n	800e992 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d106      	bne.n	800e950 <netif_add+0xfc>
 800e942:	4b25      	ldr	r3, [pc, #148]	@ (800e9d8 <netif_add+0x184>)
 800e944:	f240 128b 	movw	r2, #395	@ 0x18b
 800e948:	492b      	ldr	r1, [pc, #172]	@ (800e9f8 <netif_add+0x1a4>)
 800e94a:	4825      	ldr	r0, [pc, #148]	@ (800e9e0 <netif_add+0x18c>)
 800e94c:	f00c fc30 	bl	801b1b0 <iprintf>
        num_netifs++;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	3301      	adds	r3, #1
 800e954:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	2bff      	cmp	r3, #255	@ 0xff
 800e95a:	dd06      	ble.n	800e96a <netif_add+0x116>
 800e95c:	4b1e      	ldr	r3, [pc, #120]	@ (800e9d8 <netif_add+0x184>)
 800e95e:	f240 128d 	movw	r2, #397	@ 0x18d
 800e962:	4926      	ldr	r1, [pc, #152]	@ (800e9fc <netif_add+0x1a8>)
 800e964:	481e      	ldr	r0, [pc, #120]	@ (800e9e0 <netif_add+0x18c>)
 800e966:	f00c fc23 	bl	801b1b0 <iprintf>
        if (netif2->num == netif->num) {
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e976:	429a      	cmp	r2, r3
 800e978:	d108      	bne.n	800e98c <netif_add+0x138>
          netif->num++;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e980:	3301      	adds	r3, #1
 800e982:	b2da      	uxtb	r2, r3
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800e98a:	e005      	b.n	800e998 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	617b      	str	r3, [r7, #20]
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1d0      	bne.n	800e93a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1be      	bne.n	800e91c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e9a4:	2bfe      	cmp	r3, #254	@ 0xfe
 800e9a6:	d103      	bne.n	800e9b0 <netif_add+0x15c>
    netif_num = 0;
 800e9a8:	4b11      	ldr	r3, [pc, #68]	@ (800e9f0 <netif_add+0x19c>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	701a      	strb	r2, [r3, #0]
 800e9ae:	e006      	b.n	800e9be <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <netif_add+0x19c>)
 800e9bc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e9be:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f4 <netif_add+0x1a0>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e9c6:	4a0b      	ldr	r2, [pc, #44]	@ (800e9f4 <netif_add+0x1a0>)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3718      	adds	r7, #24
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	0801e1b8 	.word	0x0801e1b8
 800e9dc:	0801e24c 	.word	0x0801e24c
 800e9e0:	0801e208 	.word	0x0801e208
 800e9e4:	0801e268 	.word	0x0801e268
 800e9e8:	0806c9ec 	.word	0x0806c9ec
 800e9ec:	0800edf5 	.word	0x0800edf5
 800e9f0:	20013d58 	.word	0x20013d58
 800e9f4:	20013d50 	.word	0x20013d50
 800e9f8:	0801e28c 	.word	0x0801e28c
 800e9fc:	0801e2a0 	.word	0x0801e2a0

0800ea00 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f002 fc21 	bl	8011254 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f007 f933 	bl	8015c80 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ea1a:	bf00      	nop
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
	...

0800ea24 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d106      	bne.n	800ea44 <netif_do_set_ipaddr+0x20>
 800ea36:	4b1d      	ldr	r3, [pc, #116]	@ (800eaac <netif_do_set_ipaddr+0x88>)
 800ea38:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ea3c:	491c      	ldr	r1, [pc, #112]	@ (800eab0 <netif_do_set_ipaddr+0x8c>)
 800ea3e:	481d      	ldr	r0, [pc, #116]	@ (800eab4 <netif_do_set_ipaddr+0x90>)
 800ea40:	f00c fbb6 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d106      	bne.n	800ea58 <netif_do_set_ipaddr+0x34>
 800ea4a:	4b18      	ldr	r3, [pc, #96]	@ (800eaac <netif_do_set_ipaddr+0x88>)
 800ea4c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ea50:	4917      	ldr	r1, [pc, #92]	@ (800eab0 <netif_do_set_ipaddr+0x8c>)
 800ea52:	4818      	ldr	r0, [pc, #96]	@ (800eab4 <netif_do_set_ipaddr+0x90>)
 800ea54:	f00c fbac 	bl	801b1b0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d01c      	beq.n	800eaa0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	3304      	adds	r3, #4
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ea76:	f107 0314 	add.w	r3, r7, #20
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff ffbf 	bl	800ea00 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <netif_do_set_ipaddr+0x6a>
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	e000      	b.n	800ea90 <netif_do_set_ipaddr+0x6c>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ea94:	2101      	movs	r1, #1
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f000 f8d2 	bl	800ec40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e000      	b.n	800eaa2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3718      	adds	r7, #24
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	0801e1b8 	.word	0x0801e1b8
 800eab0:	0801e2d0 	.word	0x0801e2d0
 800eab4:	0801e208 	.word	0x0801e208

0800eab8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3308      	adds	r3, #8
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d00a      	beq.n	800eae8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <netif_do_set_netmask+0x26>
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	e000      	b.n	800eae0 <netif_do_set_netmask+0x28>
 800eade:	2300      	movs	r3, #0
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800eae4:	2301      	movs	r3, #1
 800eae6:	e000      	b.n	800eaea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b085      	sub	sp, #20
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	60f8      	str	r0, [r7, #12]
 800eafe:	60b9      	str	r1, [r7, #8]
 800eb00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	330c      	adds	r3, #12
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d00a      	beq.n	800eb26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <netif_do_set_gw+0x26>
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	e000      	b.n	800eb1e <netif_do_set_gw+0x28>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800eb22:	2301      	movs	r3, #1
 800eb24:	e000      	b.n	800eb28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800eb50:	4b1c      	ldr	r3, [pc, #112]	@ (800ebc4 <netif_set_addr+0x90>)
 800eb52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d101      	bne.n	800eb5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800eb5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ebc4 <netif_set_addr+0x90>)
 800eb5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d101      	bne.n	800eb68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800eb64:	4b17      	ldr	r3, [pc, #92]	@ (800ebc4 <netif_set_addr+0x90>)
 800eb66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d003      	beq.n	800eb76 <netif_set_addr+0x42>
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <netif_set_addr+0x46>
 800eb76:	2301      	movs	r3, #1
 800eb78:	e000      	b.n	800eb7c <netif_set_addr+0x48>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d006      	beq.n	800eb92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800eb84:	f107 0310 	add.w	r3, r7, #16
 800eb88:	461a      	mov	r2, r3
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f7ff ff49 	bl	800ea24 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	6879      	ldr	r1, [r7, #4]
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f7ff ff8e 	bl	800eab8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800eb9c:	69ba      	ldr	r2, [r7, #24]
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f7ff ffa8 	bl	800eaf6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d106      	bne.n	800ebba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ebac:	f107 0310 	add.w	r3, r7, #16
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	68b9      	ldr	r1, [r7, #8]
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7ff ff35 	bl	800ea24 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ebba:	bf00      	nop
 800ebbc:	3720      	adds	r7, #32
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0806c9ec 	.word	0x0806c9ec

0800ebc8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ebd0:	4a04      	ldr	r2, [pc, #16]	@ (800ebe4 <netif_set_default+0x1c>)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ebd6:	bf00      	nop
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	20013d54 	.word	0x20013d54

0800ebe8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d107      	bne.n	800ec06 <netif_set_up+0x1e>
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ec34 <netif_set_up+0x4c>)
 800ebf8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ebfc:	490e      	ldr	r1, [pc, #56]	@ (800ec38 <netif_set_up+0x50>)
 800ebfe:	480f      	ldr	r0, [pc, #60]	@ (800ec3c <netif_set_up+0x54>)
 800ec00:	f00c fad6 	bl	801b1b0 <iprintf>
 800ec04:	e013      	b.n	800ec2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec0c:	f003 0301 	and.w	r3, r3, #1
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10c      	bne.n	800ec2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec1a:	f043 0301 	orr.w	r3, r3, #1
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ec26:	2103      	movs	r1, #3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 f809 	bl	800ec40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	0801e1b8 	.word	0x0801e1b8
 800ec38:	0801e340 	.word	0x0801e340
 800ec3c:	0801e208 	.word	0x0801e208

0800ec40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <netif_issue_reports+0x20>
 800ec52:	4b18      	ldr	r3, [pc, #96]	@ (800ecb4 <netif_issue_reports+0x74>)
 800ec54:	f240 326d 	movw	r2, #877	@ 0x36d
 800ec58:	4917      	ldr	r1, [pc, #92]	@ (800ecb8 <netif_issue_reports+0x78>)
 800ec5a:	4818      	ldr	r0, [pc, #96]	@ (800ecbc <netif_issue_reports+0x7c>)
 800ec5c:	f00c faa8 	bl	801b1b0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec66:	f003 0304 	and.w	r3, r3, #4
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d01e      	beq.n	800ecac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d017      	beq.n	800ecac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ec7c:	78fb      	ldrb	r3, [r7, #3]
 800ec7e:	f003 0301 	and.w	r3, r3, #1
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d013      	beq.n	800ecae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	3304      	adds	r3, #4
 800ec8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00e      	beq.n	800ecae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec96:	f003 0308 	and.w	r3, r3, #8
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d007      	beq.n	800ecae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f009 fe6b 	bl	8018980 <etharp_request>
 800ecaa:	e000      	b.n	800ecae <netif_issue_reports+0x6e>
    return;
 800ecac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	0801e1b8 	.word	0x0801e1b8
 800ecb8:	0801e35c 	.word	0x0801e35c
 800ecbc:	0801e208 	.word	0x0801e208

0800ecc0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d107      	bne.n	800ecde <netif_set_down+0x1e>
 800ecce:	4b12      	ldr	r3, [pc, #72]	@ (800ed18 <netif_set_down+0x58>)
 800ecd0:	f240 329b 	movw	r2, #923	@ 0x39b
 800ecd4:	4911      	ldr	r1, [pc, #68]	@ (800ed1c <netif_set_down+0x5c>)
 800ecd6:	4812      	ldr	r0, [pc, #72]	@ (800ed20 <netif_set_down+0x60>)
 800ecd8:	f00c fa6a 	bl	801b1b0 <iprintf>
 800ecdc:	e019      	b.n	800ed12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d012      	beq.n	800ed12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ecf2:	f023 0301 	bic.w	r3, r3, #1
 800ecf6:	b2da      	uxtb	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ed04:	f003 0308 	and.w	r3, r3, #8
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f009 f9f1 	bl	80180f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	0801e1b8 	.word	0x0801e1b8
 800ed1c:	0801e380 	.word	0x0801e380
 800ed20:	0801e208 	.word	0x0801e208

0800ed24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d107      	bne.n	800ed42 <netif_set_link_up+0x1e>
 800ed32:	4b15      	ldr	r3, [pc, #84]	@ (800ed88 <netif_set_link_up+0x64>)
 800ed34:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ed38:	4914      	ldr	r1, [pc, #80]	@ (800ed8c <netif_set_link_up+0x68>)
 800ed3a:	4815      	ldr	r0, [pc, #84]	@ (800ed90 <netif_set_link_up+0x6c>)
 800ed3c:	f00c fa38 	bl	801b1b0 <iprintf>
 800ed40:	e01e      	b.n	800ed80 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d117      	bne.n	800ed80 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ed56:	f043 0304 	orr.w	r3, r3, #4
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f007 fbb6 	bl	80164d4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed68:	2103      	movs	r1, #3
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff ff68 	bl	800ec40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	69db      	ldr	r3, [r3, #28]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d003      	beq.n	800ed80 <netif_set_link_up+0x5c>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	0801e1b8 	.word	0x0801e1b8
 800ed8c:	0801e3a0 	.word	0x0801e3a0
 800ed90:	0801e208 	.word	0x0801e208

0800ed94 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d107      	bne.n	800edb2 <netif_set_link_down+0x1e>
 800eda2:	4b11      	ldr	r3, [pc, #68]	@ (800ede8 <netif_set_link_down+0x54>)
 800eda4:	f240 4206 	movw	r2, #1030	@ 0x406
 800eda8:	4910      	ldr	r1, [pc, #64]	@ (800edec <netif_set_link_down+0x58>)
 800edaa:	4811      	ldr	r0, [pc, #68]	@ (800edf0 <netif_set_link_down+0x5c>)
 800edac:	f00c fa00 	bl	801b1b0 <iprintf>
 800edb0:	e017      	b.n	800ede2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800edb8:	f003 0304 	and.w	r3, r3, #4
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d010      	beq.n	800ede2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800edc6:	f023 0304 	bic.w	r3, r3, #4
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	69db      	ldr	r3, [r3, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d003      	beq.n	800ede2 <netif_set_link_down+0x4e>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	69db      	ldr	r3, [r3, #28]
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	0801e1b8 	.word	0x0801e1b8
 800edec:	0801e3c4 	.word	0x0801e3c4
 800edf0:	0801e208 	.word	0x0801e208

0800edf4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ee00:	f06f 030b 	mvn.w	r3, #11
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d013      	beq.n	800ee48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ee20:	4b0d      	ldr	r3, [pc, #52]	@ (800ee58 <netif_get_by_index+0x48>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	60fb      	str	r3, [r7, #12]
 800ee26:	e00c      	b.n	800ee42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ee2e:	3301      	adds	r3, #1
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	79fa      	ldrb	r2, [r7, #7]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d101      	bne.n	800ee3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	e006      	b.n	800ee4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	60fb      	str	r3, [r7, #12]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1ef      	bne.n	800ee28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	20013d50 	.word	0x20013d50

0800ee5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ee62:	f00b faed 	bl	801a440 <sys_arch_protect>
 800ee66:	6038      	str	r0, [r7, #0]
 800ee68:	4b0d      	ldr	r3, [pc, #52]	@ (800eea0 <pbuf_free_ooseq+0x44>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	701a      	strb	r2, [r3, #0]
 800ee6e:	6838      	ldr	r0, [r7, #0]
 800ee70:	f00b faf4 	bl	801a45c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee74:	4b0b      	ldr	r3, [pc, #44]	@ (800eea4 <pbuf_free_ooseq+0x48>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	607b      	str	r3, [r7, #4]
 800ee7a:	e00a      	b.n	800ee92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d003      	beq.n	800ee8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f002 fa23 	bl	80112d0 <tcp_free_ooseq>
      return;
 800ee8a:	e005      	b.n	800ee98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	607b      	str	r3, [r7, #4]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1f1      	bne.n	800ee7c <pbuf_free_ooseq+0x20>
    }
  }
}
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	20013d59 	.word	0x20013d59
 800eea4:	20013d68 	.word	0x20013d68

0800eea8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800eeb0:	f7ff ffd4 	bl	800ee5c <pbuf_free_ooseq>
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eec2:	f00b fabd 	bl	801a440 <sys_arch_protect>
 800eec6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800eec8:	4b0f      	ldr	r3, [pc, #60]	@ (800ef08 <pbuf_pool_is_empty+0x4c>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800eece:	4b0e      	ldr	r3, [pc, #56]	@ (800ef08 <pbuf_pool_is_empty+0x4c>)
 800eed0:	2201      	movs	r2, #1
 800eed2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f00b fac1 	bl	801a45c <sys_arch_unprotect>

  if (!queued) {
 800eeda:	78fb      	ldrb	r3, [r7, #3]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10f      	bne.n	800ef00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800eee0:	2100      	movs	r1, #0
 800eee2:	480a      	ldr	r0, [pc, #40]	@ (800ef0c <pbuf_pool_is_empty+0x50>)
 800eee4:	f7fe fd62 	bl	800d9ac <tcpip_try_callback>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d008      	beq.n	800ef00 <pbuf_pool_is_empty+0x44>
 800eeee:	f00b faa7 	bl	801a440 <sys_arch_protect>
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	4b04      	ldr	r3, [pc, #16]	@ (800ef08 <pbuf_pool_is_empty+0x4c>)
 800eef6:	2200      	movs	r2, #0
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f00b faae 	bl	801a45c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	20013d59 	.word	0x20013d59
 800ef0c:	0800eea9 	.word	0x0800eea9

0800ef10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	460b      	mov	r3, r1
 800ef20:	80fb      	strh	r3, [r7, #6]
 800ef22:	4613      	mov	r3, r2
 800ef24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	88fa      	ldrh	r2, [r7, #6]
 800ef36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	88ba      	ldrh	r2, [r7, #4]
 800ef3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ef3e:	8b3b      	ldrh	r3, [r7, #24]
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	7f3a      	ldrb	r2, [r7, #28]
 800ef4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	73da      	strb	r2, [r3, #15]
}
 800ef58:	bf00      	nop
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b08c      	sub	sp, #48	@ 0x30
 800ef68:	af02      	add	r7, sp, #8
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	71fb      	strb	r3, [r7, #7]
 800ef6e:	460b      	mov	r3, r1
 800ef70:	80bb      	strh	r3, [r7, #4]
 800ef72:	4613      	mov	r3, r2
 800ef74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ef76:	79fb      	ldrb	r3, [r7, #7]
 800ef78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ef7a:	887b      	ldrh	r3, [r7, #2]
 800ef7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ef80:	f000 8082 	beq.w	800f088 <pbuf_alloc+0x124>
 800ef84:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ef88:	f300 80ca 	bgt.w	800f120 <pbuf_alloc+0x1bc>
 800ef8c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ef90:	d010      	beq.n	800efb4 <pbuf_alloc+0x50>
 800ef92:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ef96:	f300 80c3 	bgt.w	800f120 <pbuf_alloc+0x1bc>
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d002      	beq.n	800efa4 <pbuf_alloc+0x40>
 800ef9e:	2b41      	cmp	r3, #65	@ 0x41
 800efa0:	f040 80be 	bne.w	800f120 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800efa4:	887a      	ldrh	r2, [r7, #2]
 800efa6:	88bb      	ldrh	r3, [r7, #4]
 800efa8:	4619      	mov	r1, r3
 800efaa:	2000      	movs	r0, #0
 800efac:	f000 f8d4 	bl	800f158 <pbuf_alloc_reference>
 800efb0:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800efb2:	e0bf      	b.n	800f134 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800efb4:	2300      	movs	r3, #0
 800efb6:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800efbc:	88bb      	ldrh	r3, [r7, #4]
 800efbe:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800efc0:	200c      	movs	r0, #12
 800efc2:	f7ff fbc3 	bl	800e74c <memp_malloc>
 800efc6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d109      	bne.n	800efe2 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800efce:	f7ff ff75 	bl	800eebc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800efd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <pbuf_alloc+0x7a>
            pbuf_free(p);
 800efd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800efda:	f000 faab 	bl	800f534 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800efde:	2300      	movs	r3, #0
 800efe0:	e0a9      	b.n	800f136 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800efe2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efe4:	3303      	adds	r3, #3
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	f023 0303 	bic.w	r3, r3, #3
 800efec:	b29b      	uxth	r3, r3
 800efee:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800eff2:	3304      	adds	r3, #4
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	8b7a      	ldrh	r2, [r7, #26]
 800eff8:	4293      	cmp	r3, r2
 800effa:	bf28      	it	cs
 800effc:	4613      	movcs	r3, r2
 800effe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f000:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f002:	3310      	adds	r3, #16
 800f004:	693a      	ldr	r2, [r7, #16]
 800f006:	4413      	add	r3, r2
 800f008:	3303      	adds	r3, #3
 800f00a:	f023 0303 	bic.w	r3, r3, #3
 800f00e:	4618      	mov	r0, r3
 800f010:	89f9      	ldrh	r1, [r7, #14]
 800f012:	8b7a      	ldrh	r2, [r7, #26]
 800f014:	2300      	movs	r3, #0
 800f016:	9301      	str	r3, [sp, #4]
 800f018:	887b      	ldrh	r3, [r7, #2]
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	460b      	mov	r3, r1
 800f01e:	4601      	mov	r1, r0
 800f020:	6938      	ldr	r0, [r7, #16]
 800f022:	f7ff ff75 	bl	800ef10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	f003 0303 	and.w	r3, r3, #3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d006      	beq.n	800f040 <pbuf_alloc+0xdc>
 800f032:	4b43      	ldr	r3, [pc, #268]	@ (800f140 <pbuf_alloc+0x1dc>)
 800f034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f038:	4942      	ldr	r1, [pc, #264]	@ (800f144 <pbuf_alloc+0x1e0>)
 800f03a:	4843      	ldr	r0, [pc, #268]	@ (800f148 <pbuf_alloc+0x1e4>)
 800f03c:	f00c f8b8 	bl	801b1b0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f042:	3303      	adds	r3, #3
 800f044:	f023 0303 	bic.w	r3, r3, #3
 800f048:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d106      	bne.n	800f05e <pbuf_alloc+0xfa>
 800f050:	4b3b      	ldr	r3, [pc, #236]	@ (800f140 <pbuf_alloc+0x1dc>)
 800f052:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f056:	493d      	ldr	r1, [pc, #244]	@ (800f14c <pbuf_alloc+0x1e8>)
 800f058:	483b      	ldr	r0, [pc, #236]	@ (800f148 <pbuf_alloc+0x1e4>)
 800f05a:	f00c f8a9 	bl	801b1b0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	d102      	bne.n	800f06a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	627b      	str	r3, [r7, #36]	@ 0x24
 800f068:	e002      	b.n	800f070 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f074:	8b7a      	ldrh	r2, [r7, #26]
 800f076:	89fb      	ldrh	r3, [r7, #14]
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800f080:	8b7b      	ldrh	r3, [r7, #26]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d19c      	bne.n	800efc0 <pbuf_alloc+0x5c>
      break;
 800f086:	e055      	b.n	800f134 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f088:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f08a:	3303      	adds	r3, #3
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	f023 0303 	bic.w	r3, r3, #3
 800f092:	b29a      	uxth	r2, r3
 800f094:	88bb      	ldrh	r3, [r7, #4]
 800f096:	3303      	adds	r3, #3
 800f098:	b29b      	uxth	r3, r3
 800f09a:	f023 0303 	bic.w	r3, r3, #3
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4413      	add	r3, r2
 800f0a2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f0a4:	8b3b      	ldrh	r3, [r7, #24]
 800f0a6:	3310      	adds	r3, #16
 800f0a8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f0aa:	8b3a      	ldrh	r2, [r7, #24]
 800f0ac:	88bb      	ldrh	r3, [r7, #4]
 800f0ae:	3303      	adds	r3, #3
 800f0b0:	f023 0303 	bic.w	r3, r3, #3
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d306      	bcc.n	800f0c6 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f0b8:	8afa      	ldrh	r2, [r7, #22]
 800f0ba:	88bb      	ldrh	r3, [r7, #4]
 800f0bc:	3303      	adds	r3, #3
 800f0be:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d201      	bcs.n	800f0ca <pbuf_alloc+0x166>
        return NULL;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	e035      	b.n	800f136 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f0ca:	8afb      	ldrh	r3, [r7, #22]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff f9bb 	bl	800e448 <mem_malloc>
 800f0d2:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d101      	bne.n	800f0de <pbuf_alloc+0x17a>
        return NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	e02b      	b.n	800f136 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f0de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0e4:	4413      	add	r3, r2
 800f0e6:	3303      	adds	r3, #3
 800f0e8:	f023 0303 	bic.w	r3, r3, #3
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	88b9      	ldrh	r1, [r7, #4]
 800f0f0:	88ba      	ldrh	r2, [r7, #4]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	887b      	ldrh	r3, [r7, #2]
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f100:	f7ff ff06 	bl	800ef10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	f003 0303 	and.w	r3, r3, #3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d010      	beq.n	800f132 <pbuf_alloc+0x1ce>
 800f110:	4b0b      	ldr	r3, [pc, #44]	@ (800f140 <pbuf_alloc+0x1dc>)
 800f112:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800f116:	490e      	ldr	r1, [pc, #56]	@ (800f150 <pbuf_alloc+0x1ec>)
 800f118:	480b      	ldr	r0, [pc, #44]	@ (800f148 <pbuf_alloc+0x1e4>)
 800f11a:	f00c f849 	bl	801b1b0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f11e:	e008      	b.n	800f132 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f120:	4b07      	ldr	r3, [pc, #28]	@ (800f140 <pbuf_alloc+0x1dc>)
 800f122:	f240 1227 	movw	r2, #295	@ 0x127
 800f126:	490b      	ldr	r1, [pc, #44]	@ (800f154 <pbuf_alloc+0x1f0>)
 800f128:	4807      	ldr	r0, [pc, #28]	@ (800f148 <pbuf_alloc+0x1e4>)
 800f12a:	f00c f841 	bl	801b1b0 <iprintf>
      return NULL;
 800f12e:	2300      	movs	r3, #0
 800f130:	e001      	b.n	800f136 <pbuf_alloc+0x1d2>
      break;
 800f132:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f136:	4618      	mov	r0, r3
 800f138:	3728      	adds	r7, #40	@ 0x28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	0801e3e8 	.word	0x0801e3e8
 800f144:	0801e418 	.word	0x0801e418
 800f148:	0801e448 	.word	0x0801e448
 800f14c:	0801e470 	.word	0x0801e470
 800f150:	0801e4a4 	.word	0x0801e4a4
 800f154:	0801e4d0 	.word	0x0801e4d0

0800f158 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b086      	sub	sp, #24
 800f15c:	af02      	add	r7, sp, #8
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	807b      	strh	r3, [r7, #2]
 800f164:	4613      	mov	r3, r2
 800f166:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f168:	883b      	ldrh	r3, [r7, #0]
 800f16a:	2b41      	cmp	r3, #65	@ 0x41
 800f16c:	d009      	beq.n	800f182 <pbuf_alloc_reference+0x2a>
 800f16e:	883b      	ldrh	r3, [r7, #0]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d006      	beq.n	800f182 <pbuf_alloc_reference+0x2a>
 800f174:	4b0f      	ldr	r3, [pc, #60]	@ (800f1b4 <pbuf_alloc_reference+0x5c>)
 800f176:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f17a:	490f      	ldr	r1, [pc, #60]	@ (800f1b8 <pbuf_alloc_reference+0x60>)
 800f17c:	480f      	ldr	r0, [pc, #60]	@ (800f1bc <pbuf_alloc_reference+0x64>)
 800f17e:	f00c f817 	bl	801b1b0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f182:	200b      	movs	r0, #11
 800f184:	f7ff fae2 	bl	800e74c <memp_malloc>
 800f188:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f190:	2300      	movs	r3, #0
 800f192:	e00b      	b.n	800f1ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f194:	8879      	ldrh	r1, [r7, #2]
 800f196:	887a      	ldrh	r2, [r7, #2]
 800f198:	2300      	movs	r3, #0
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	883b      	ldrh	r3, [r7, #0]
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	6879      	ldr	r1, [r7, #4]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f7ff feb3 	bl	800ef10 <pbuf_init_alloced_pbuf>
  return p;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	0801e3e8 	.word	0x0801e3e8
 800f1b8:	0801e4ec 	.word	0x0801e4ec
 800f1bc:	0801e448 	.word	0x0801e448

0800f1c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	607b      	str	r3, [r7, #4]
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	73fb      	strb	r3, [r7, #15]
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	81bb      	strh	r3, [r7, #12]
 800f1d0:	4613      	mov	r3, r2
 800f1d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
 800f1d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f1d8:	8a7b      	ldrh	r3, [r7, #18]
 800f1da:	3303      	adds	r3, #3
 800f1dc:	f023 0203 	bic.w	r2, r3, #3
 800f1e0:	89bb      	ldrh	r3, [r7, #12]
 800f1e2:	441a      	add	r2, r3
 800f1e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d901      	bls.n	800f1ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e018      	b.n	800f220 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f1ee:	6a3b      	ldr	r3, [r7, #32]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f1f4:	8a7b      	ldrh	r3, [r7, #18]
 800f1f6:	3303      	adds	r3, #3
 800f1f8:	f023 0303 	bic.w	r3, r3, #3
 800f1fc:	6a3a      	ldr	r2, [r7, #32]
 800f1fe:	4413      	add	r3, r2
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	e001      	b.n	800f208 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f204:	2300      	movs	r3, #0
 800f206:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	89b9      	ldrh	r1, [r7, #12]
 800f20c:	89ba      	ldrh	r2, [r7, #12]
 800f20e:	2302      	movs	r3, #2
 800f210:	9301      	str	r3, [sp, #4]
 800f212:	897b      	ldrh	r3, [r7, #10]
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	460b      	mov	r3, r1
 800f218:	6979      	ldr	r1, [r7, #20]
 800f21a:	f7ff fe79 	bl	800ef10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f21e:	687b      	ldr	r3, [r7, #4]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3718      	adds	r7, #24
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d106      	bne.n	800f248 <pbuf_realloc+0x20>
 800f23a:	4b3a      	ldr	r3, [pc, #232]	@ (800f324 <pbuf_realloc+0xfc>)
 800f23c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f240:	4939      	ldr	r1, [pc, #228]	@ (800f328 <pbuf_realloc+0x100>)
 800f242:	483a      	ldr	r0, [pc, #232]	@ (800f32c <pbuf_realloc+0x104>)
 800f244:	f00b ffb4 	bl	801b1b0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	891b      	ldrh	r3, [r3, #8]
 800f24c:	887a      	ldrh	r2, [r7, #2]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d263      	bcs.n	800f31a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	891a      	ldrh	r2, [r3, #8]
 800f256:	887b      	ldrh	r3, [r7, #2]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f25c:	887b      	ldrh	r3, [r7, #2]
 800f25e:	817b      	strh	r3, [r7, #10]
  q = p;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f264:	e018      	b.n	800f298 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	895b      	ldrh	r3, [r3, #10]
 800f26a:	897a      	ldrh	r2, [r7, #10]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	891a      	ldrh	r2, [r3, #8]
 800f274:	893b      	ldrh	r3, [r7, #8]
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d106      	bne.n	800f298 <pbuf_realloc+0x70>
 800f28a:	4b26      	ldr	r3, [pc, #152]	@ (800f324 <pbuf_realloc+0xfc>)
 800f28c:	f240 12af 	movw	r2, #431	@ 0x1af
 800f290:	4927      	ldr	r1, [pc, #156]	@ (800f330 <pbuf_realloc+0x108>)
 800f292:	4826      	ldr	r0, [pc, #152]	@ (800f32c <pbuf_realloc+0x104>)
 800f294:	f00b ff8c 	bl	801b1b0 <iprintf>
  while (rem_len > q->len) {
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	895b      	ldrh	r3, [r3, #10]
 800f29c:	897a      	ldrh	r2, [r7, #10]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d8e1      	bhi.n	800f266 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	7b1b      	ldrb	r3, [r3, #12]
 800f2a6:	f003 030f 	and.w	r3, r3, #15
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d121      	bne.n	800f2f2 <pbuf_realloc+0xca>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	895b      	ldrh	r3, [r3, #10]
 800f2b2:	897a      	ldrh	r2, [r7, #10]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d01c      	beq.n	800f2f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	7b5b      	ldrb	r3, [r3, #13]
 800f2bc:	f003 0302 	and.w	r3, r3, #2
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d116      	bne.n	800f2f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	685a      	ldr	r2, [r3, #4]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	897b      	ldrh	r3, [r7, #10]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7fe ffac 	bl	800e234 <mem_trim>
 800f2dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d106      	bne.n	800f2f2 <pbuf_realloc+0xca>
 800f2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f324 <pbuf_realloc+0xfc>)
 800f2e6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f2ea:	4912      	ldr	r1, [pc, #72]	@ (800f334 <pbuf_realloc+0x10c>)
 800f2ec:	480f      	ldr	r0, [pc, #60]	@ (800f32c <pbuf_realloc+0x104>)
 800f2ee:	f00b ff5f 	bl	801b1b0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	897a      	ldrh	r2, [r7, #10]
 800f2f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	895a      	ldrh	r2, [r3, #10]
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d004      	beq.n	800f312 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f000 f911 	bl	800f534 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	e000      	b.n	800f31c <pbuf_realloc+0xf4>
    return;
 800f31a:	bf00      	nop

}
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	0801e3e8 	.word	0x0801e3e8
 800f328:	0801e500 	.word	0x0801e500
 800f32c:	0801e448 	.word	0x0801e448
 800f330:	0801e518 	.word	0x0801e518
 800f334:	0801e530 	.word	0x0801e530

0800f338 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	4613      	mov	r3, r2
 800f344:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d106      	bne.n	800f35a <pbuf_add_header_impl+0x22>
 800f34c:	4b2b      	ldr	r3, [pc, #172]	@ (800f3fc <pbuf_add_header_impl+0xc4>)
 800f34e:	f240 12df 	movw	r2, #479	@ 0x1df
 800f352:	492b      	ldr	r1, [pc, #172]	@ (800f400 <pbuf_add_header_impl+0xc8>)
 800f354:	482b      	ldr	r0, [pc, #172]	@ (800f404 <pbuf_add_header_impl+0xcc>)
 800f356:	f00b ff2b 	bl	801b1b0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <pbuf_add_header_impl+0x30>
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f366:	d301      	bcc.n	800f36c <pbuf_add_header_impl+0x34>
    return 1;
 800f368:	2301      	movs	r3, #1
 800f36a:	e043      	b.n	800f3f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <pbuf_add_header_impl+0x3e>
    return 0;
 800f372:	2300      	movs	r3, #0
 800f374:	e03e      	b.n	800f3f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	891a      	ldrh	r2, [r3, #8]
 800f37e:	8a7b      	ldrh	r3, [r7, #18]
 800f380:	4413      	add	r3, r2
 800f382:	b29b      	uxth	r3, r3
 800f384:	8a7a      	ldrh	r2, [r7, #18]
 800f386:	429a      	cmp	r2, r3
 800f388:	d901      	bls.n	800f38e <pbuf_add_header_impl+0x56>
    return 1;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e032      	b.n	800f3f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	7b1b      	ldrb	r3, [r3, #12]
 800f392:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f394:	8a3b      	ldrh	r3, [r7, #16]
 800f396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00c      	beq.n	800f3b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	685a      	ldr	r2, [r3, #4]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	425b      	negs	r3, r3
 800f3a6:	4413      	add	r3, r2
 800f3a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	3310      	adds	r3, #16
 800f3ae:	697a      	ldr	r2, [r7, #20]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d20d      	bcs.n	800f3d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e01d      	b.n	800f3f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d006      	beq.n	800f3cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	425b      	negs	r3, r3
 800f3c6:	4413      	add	r3, r2
 800f3c8:	617b      	str	r3, [r7, #20]
 800f3ca:	e001      	b.n	800f3d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e011      	b.n	800f3f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	895a      	ldrh	r2, [r3, #10]
 800f3da:	8a7b      	ldrh	r3, [r7, #18]
 800f3dc:	4413      	add	r3, r2
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	891a      	ldrh	r2, [r3, #8]
 800f3e8:	8a7b      	ldrh	r3, [r7, #18]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	811a      	strh	r2, [r3, #8]


  return 0;
 800f3f2:	2300      	movs	r3, #0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	0801e3e8 	.word	0x0801e3e8
 800f400:	0801e54c 	.word	0x0801e54c
 800f404:	0801e448 	.word	0x0801e448

0800f408 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f412:	2200      	movs	r2, #0
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7ff ff8e 	bl	800f338 <pbuf_add_header_impl>
 800f41c:	4603      	mov	r3, r0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
	...

0800f428 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d106      	bne.n	800f446 <pbuf_remove_header+0x1e>
 800f438:	4b20      	ldr	r3, [pc, #128]	@ (800f4bc <pbuf_remove_header+0x94>)
 800f43a:	f240 224b 	movw	r2, #587	@ 0x24b
 800f43e:	4920      	ldr	r1, [pc, #128]	@ (800f4c0 <pbuf_remove_header+0x98>)
 800f440:	4820      	ldr	r0, [pc, #128]	@ (800f4c4 <pbuf_remove_header+0x9c>)
 800f442:	f00b feb5 	bl	801b1b0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <pbuf_remove_header+0x2c>
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f452:	d301      	bcc.n	800f458 <pbuf_remove_header+0x30>
    return 1;
 800f454:	2301      	movs	r3, #1
 800f456:	e02c      	b.n	800f4b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <pbuf_remove_header+0x3a>
    return 0;
 800f45e:	2300      	movs	r3, #0
 800f460:	e027      	b.n	800f4b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	895b      	ldrh	r3, [r3, #10]
 800f46a:	89fa      	ldrh	r2, [r7, #14]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d908      	bls.n	800f482 <pbuf_remove_header+0x5a>
 800f470:	4b12      	ldr	r3, [pc, #72]	@ (800f4bc <pbuf_remove_header+0x94>)
 800f472:	f240 2255 	movw	r2, #597	@ 0x255
 800f476:	4914      	ldr	r1, [pc, #80]	@ (800f4c8 <pbuf_remove_header+0xa0>)
 800f478:	4812      	ldr	r0, [pc, #72]	@ (800f4c4 <pbuf_remove_header+0x9c>)
 800f47a:	f00b fe99 	bl	801b1b0 <iprintf>
 800f47e:	2301      	movs	r3, #1
 800f480:	e017      	b.n	800f4b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	441a      	add	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	895a      	ldrh	r2, [r3, #10]
 800f498:	89fb      	ldrh	r3, [r7, #14]
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	891a      	ldrh	r2, [r3, #8]
 800f4a6:	89fb      	ldrh	r3, [r7, #14]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	0801e3e8 	.word	0x0801e3e8
 800f4c0:	0801e54c 	.word	0x0801e54c
 800f4c4:	0801e448 	.word	0x0801e448
 800f4c8:	0801e558 	.word	0x0801e558

0800f4cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	807b      	strh	r3, [r7, #2]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f4dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	da08      	bge.n	800f4f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f4e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4e8:	425b      	negs	r3, r3
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff ff9b 	bl	800f428 <pbuf_remove_header>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	e007      	b.n	800f506 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f4f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4fa:	787a      	ldrb	r2, [r7, #1]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff ff1a 	bl	800f338 <pbuf_add_header_impl>
 800f504:	4603      	mov	r3, r0
  }
}
 800f506:	4618      	mov	r0, r3
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b082      	sub	sp, #8
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	460b      	mov	r3, r1
 800f518:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f51a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f51e:	2201      	movs	r2, #1
 800f520:	4619      	mov	r1, r3
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff ffd2 	bl	800f4cc <pbuf_header_impl>
 800f528:	4603      	mov	r3, r0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
	...

0800f534 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b088      	sub	sp, #32
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d106      	bne.n	800f556 <pbuf_free+0x22>
 800f548:	4b3b      	ldr	r3, [pc, #236]	@ (800f638 <pbuf_free+0x104>)
 800f54a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f54e:	493b      	ldr	r1, [pc, #236]	@ (800f63c <pbuf_free+0x108>)
 800f550:	483b      	ldr	r0, [pc, #236]	@ (800f640 <pbuf_free+0x10c>)
 800f552:	f00b fe2d 	bl	801b1b0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f556:	2300      	movs	r3, #0
 800f558:	e069      	b.n	800f62e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f55e:	e062      	b.n	800f626 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f560:	f00a ff6e 	bl	801a440 <sys_arch_protect>
 800f564:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	7b9b      	ldrb	r3, [r3, #14]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d106      	bne.n	800f57c <pbuf_free+0x48>
 800f56e:	4b32      	ldr	r3, [pc, #200]	@ (800f638 <pbuf_free+0x104>)
 800f570:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f574:	4933      	ldr	r1, [pc, #204]	@ (800f644 <pbuf_free+0x110>)
 800f576:	4832      	ldr	r0, [pc, #200]	@ (800f640 <pbuf_free+0x10c>)
 800f578:	f00b fe1a 	bl	801b1b0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	7b9b      	ldrb	r3, [r3, #14]
 800f580:	3b01      	subs	r3, #1
 800f582:	b2da      	uxtb	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	739a      	strb	r2, [r3, #14]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	7b9b      	ldrb	r3, [r3, #14]
 800f58c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f58e:	69b8      	ldr	r0, [r7, #24]
 800f590:	f00a ff64 	bl	801a45c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d143      	bne.n	800f622 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	7b1b      	ldrb	r3, [r3, #12]
 800f5a4:	f003 030f 	and.w	r3, r3, #15
 800f5a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	7b5b      	ldrb	r3, [r3, #13]
 800f5ae:	f003 0302 	and.w	r3, r3, #2
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d011      	beq.n	800f5da <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	691b      	ldr	r3, [r3, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <pbuf_free+0x9c>
 800f5c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f638 <pbuf_free+0x104>)
 800f5c4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f5c8:	491f      	ldr	r1, [pc, #124]	@ (800f648 <pbuf_free+0x114>)
 800f5ca:	481d      	ldr	r0, [pc, #116]	@ (800f640 <pbuf_free+0x10c>)
 800f5cc:	f00b fdf0 	bl	801b1b0 <iprintf>
        pc->custom_free_function(p);
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	4798      	blx	r3
 800f5d8:	e01d      	b.n	800f616 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d104      	bne.n	800f5ea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f5e0:	6879      	ldr	r1, [r7, #4]
 800f5e2:	200c      	movs	r0, #12
 800f5e4:	f7ff f904 	bl	800e7f0 <memp_free>
 800f5e8:	e015      	b.n	800f616 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f5ea:	7bfb      	ldrb	r3, [r7, #15]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d104      	bne.n	800f5fa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f5f0:	6879      	ldr	r1, [r7, #4]
 800f5f2:	200b      	movs	r0, #11
 800f5f4:	f7ff f8fc 	bl	800e7f0 <memp_free>
 800f5f8:	e00d      	b.n	800f616 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d103      	bne.n	800f608 <pbuf_free+0xd4>
          mem_free(p);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7fe fd87 	bl	800e114 <mem_free>
 800f606:	e006      	b.n	800f616 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f608:	4b0b      	ldr	r3, [pc, #44]	@ (800f638 <pbuf_free+0x104>)
 800f60a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f60e:	490f      	ldr	r1, [pc, #60]	@ (800f64c <pbuf_free+0x118>)
 800f610:	480b      	ldr	r0, [pc, #44]	@ (800f640 <pbuf_free+0x10c>)
 800f612:	f00b fdcd 	bl	801b1b0 <iprintf>
        }
      }
      count++;
 800f616:	7ffb      	ldrb	r3, [r7, #31]
 800f618:	3301      	adds	r3, #1
 800f61a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	607b      	str	r3, [r7, #4]
 800f620:	e001      	b.n	800f626 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d199      	bne.n	800f560 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f62c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3720      	adds	r7, #32
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	0801e3e8 	.word	0x0801e3e8
 800f63c:	0801e54c 	.word	0x0801e54c
 800f640:	0801e448 	.word	0x0801e448
 800f644:	0801e578 	.word	0x0801e578
 800f648:	0801e590 	.word	0x0801e590
 800f64c:	0801e5b4 	.word	0x0801e5b4

0800f650 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f65c:	e005      	b.n	800f66a <pbuf_clen+0x1a>
    ++len;
 800f65e:	89fb      	ldrh	r3, [r7, #14]
 800f660:	3301      	adds	r3, #1
 800f662:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1f6      	bne.n	800f65e <pbuf_clen+0xe>
  }
  return len;
 800f670:	89fb      	ldrh	r3, [r7, #14]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
	...

0800f680 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d016      	beq.n	800f6bc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f68e:	f00a fed7 	bl	801a440 <sys_arch_protect>
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	7b9b      	ldrb	r3, [r3, #14]
 800f698:	3301      	adds	r3, #1
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	739a      	strb	r2, [r3, #14]
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f00a fedb 	bl	801a45c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	7b9b      	ldrb	r3, [r3, #14]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <pbuf_ref+0x3c>
 800f6ae:	4b05      	ldr	r3, [pc, #20]	@ (800f6c4 <pbuf_ref+0x44>)
 800f6b0:	f240 3242 	movw	r2, #834	@ 0x342
 800f6b4:	4904      	ldr	r1, [pc, #16]	@ (800f6c8 <pbuf_ref+0x48>)
 800f6b6:	4805      	ldr	r0, [pc, #20]	@ (800f6cc <pbuf_ref+0x4c>)
 800f6b8:	f00b fd7a 	bl	801b1b0 <iprintf>
  }
}
 800f6bc:	bf00      	nop
 800f6be:	3710      	adds	r7, #16
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	0801e3e8 	.word	0x0801e3e8
 800f6c8:	0801e5c8 	.word	0x0801e5c8
 800f6cc:	0801e448 	.word	0x0801e448

0800f6d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <pbuf_cat+0x16>
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d107      	bne.n	800f6f6 <pbuf_cat+0x26>
 800f6e6:	4b20      	ldr	r3, [pc, #128]	@ (800f768 <pbuf_cat+0x98>)
 800f6e8:	f240 3259 	movw	r2, #857	@ 0x359
 800f6ec:	491f      	ldr	r1, [pc, #124]	@ (800f76c <pbuf_cat+0x9c>)
 800f6ee:	4820      	ldr	r0, [pc, #128]	@ (800f770 <pbuf_cat+0xa0>)
 800f6f0:	f00b fd5e 	bl	801b1b0 <iprintf>
 800f6f4:	e034      	b.n	800f760 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	60fb      	str	r3, [r7, #12]
 800f6fa:	e00a      	b.n	800f712 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	891a      	ldrh	r2, [r3, #8]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	891b      	ldrh	r3, [r3, #8]
 800f704:	4413      	add	r3, r2
 800f706:	b29a      	uxth	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	60fb      	str	r3, [r7, #12]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1f0      	bne.n	800f6fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	891a      	ldrh	r2, [r3, #8]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	895b      	ldrh	r3, [r3, #10]
 800f722:	429a      	cmp	r2, r3
 800f724:	d006      	beq.n	800f734 <pbuf_cat+0x64>
 800f726:	4b10      	ldr	r3, [pc, #64]	@ (800f768 <pbuf_cat+0x98>)
 800f728:	f240 3262 	movw	r2, #866	@ 0x362
 800f72c:	4911      	ldr	r1, [pc, #68]	@ (800f774 <pbuf_cat+0xa4>)
 800f72e:	4810      	ldr	r0, [pc, #64]	@ (800f770 <pbuf_cat+0xa0>)
 800f730:	f00b fd3e 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d006      	beq.n	800f74a <pbuf_cat+0x7a>
 800f73c:	4b0a      	ldr	r3, [pc, #40]	@ (800f768 <pbuf_cat+0x98>)
 800f73e:	f240 3263 	movw	r2, #867	@ 0x363
 800f742:	490d      	ldr	r1, [pc, #52]	@ (800f778 <pbuf_cat+0xa8>)
 800f744:	480a      	ldr	r0, [pc, #40]	@ (800f770 <pbuf_cat+0xa0>)
 800f746:	f00b fd33 	bl	801b1b0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	891a      	ldrh	r2, [r3, #8]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	891b      	ldrh	r3, [r3, #8]
 800f752:	4413      	add	r3, r2
 800f754:	b29a      	uxth	r2, r3
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	0801e3e8 	.word	0x0801e3e8
 800f76c:	0801e5dc 	.word	0x0801e5dc
 800f770:	0801e448 	.word	0x0801e448
 800f774:	0801e614 	.word	0x0801e614
 800f778:	0801e644 	.word	0x0801e644

0800f77c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7ff ffa1 	bl	800f6d0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f78e:	6838      	ldr	r0, [r7, #0]
 800f790:	f7ff ff76 	bl	800f680 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f794:	bf00      	nop
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	617b      	str	r3, [r7, #20]
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d008      	beq.n	800f7c6 <pbuf_copy+0x2a>
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d005      	beq.n	800f7c6 <pbuf_copy+0x2a>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	891a      	ldrh	r2, [r3, #8]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	891b      	ldrh	r3, [r3, #8]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d209      	bcs.n	800f7da <pbuf_copy+0x3e>
 800f7c6:	4b57      	ldr	r3, [pc, #348]	@ (800f924 <pbuf_copy+0x188>)
 800f7c8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f7cc:	4956      	ldr	r1, [pc, #344]	@ (800f928 <pbuf_copy+0x18c>)
 800f7ce:	4857      	ldr	r0, [pc, #348]	@ (800f92c <pbuf_copy+0x190>)
 800f7d0:	f00b fcee 	bl	801b1b0 <iprintf>
 800f7d4:	f06f 030f 	mvn.w	r3, #15
 800f7d8:	e09f      	b.n	800f91a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	895b      	ldrh	r3, [r3, #10]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	1ad2      	subs	r2, r2, r3
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	895b      	ldrh	r3, [r3, #10]
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	1acb      	subs	r3, r1, r3
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d306      	bcc.n	800f800 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	895b      	ldrh	r3, [r3, #10]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	60fb      	str	r3, [r7, #12]
 800f7fe:	e005      	b.n	800f80c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	895b      	ldrh	r3, [r3, #10]
 800f804:	461a      	mov	r2, r3
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685a      	ldr	r2, [r3, #4]
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	18d0      	adds	r0, r2, r3
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685a      	ldr	r2, [r3, #4]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	4413      	add	r3, r2
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	4619      	mov	r1, r3
 800f820:	f00b fee5 	bl	801b5ee <memcpy>
    offset_to += len;
 800f824:	697a      	ldr	r2, [r7, #20]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	4413      	add	r3, r2
 800f82a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4413      	add	r3, r2
 800f832:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	895b      	ldrh	r3, [r3, #10]
 800f838:	461a      	mov	r2, r3
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d906      	bls.n	800f84e <pbuf_copy+0xb2>
 800f840:	4b38      	ldr	r3, [pc, #224]	@ (800f924 <pbuf_copy+0x188>)
 800f842:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f846:	493a      	ldr	r1, [pc, #232]	@ (800f930 <pbuf_copy+0x194>)
 800f848:	4838      	ldr	r0, [pc, #224]	@ (800f92c <pbuf_copy+0x190>)
 800f84a:	f00b fcb1 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	895b      	ldrh	r3, [r3, #10]
 800f852:	461a      	mov	r2, r3
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	4293      	cmp	r3, r2
 800f858:	d906      	bls.n	800f868 <pbuf_copy+0xcc>
 800f85a:	4b32      	ldr	r3, [pc, #200]	@ (800f924 <pbuf_copy+0x188>)
 800f85c:	f240 32da 	movw	r2, #986	@ 0x3da
 800f860:	4934      	ldr	r1, [pc, #208]	@ (800f934 <pbuf_copy+0x198>)
 800f862:	4832      	ldr	r0, [pc, #200]	@ (800f92c <pbuf_copy+0x190>)
 800f864:	f00b fca4 	bl	801b1b0 <iprintf>
    if (offset_from >= p_from->len) {
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	895b      	ldrh	r3, [r3, #10]
 800f86c:	461a      	mov	r2, r3
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	4293      	cmp	r3, r2
 800f872:	d304      	bcc.n	800f87e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	895b      	ldrh	r3, [r3, #10]
 800f882:	461a      	mov	r2, r3
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	4293      	cmp	r3, r2
 800f888:	d114      	bne.n	800f8b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10c      	bne.n	800f8b4 <pbuf_copy+0x118>
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d009      	beq.n	800f8b4 <pbuf_copy+0x118>
 800f8a0:	4b20      	ldr	r3, [pc, #128]	@ (800f924 <pbuf_copy+0x188>)
 800f8a2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f8a6:	4924      	ldr	r1, [pc, #144]	@ (800f938 <pbuf_copy+0x19c>)
 800f8a8:	4820      	ldr	r0, [pc, #128]	@ (800f92c <pbuf_copy+0x190>)
 800f8aa:	f00b fc81 	bl	801b1b0 <iprintf>
 800f8ae:	f06f 030f 	mvn.w	r3, #15
 800f8b2:	e032      	b.n	800f91a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d013      	beq.n	800f8e2 <pbuf_copy+0x146>
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	895a      	ldrh	r2, [r3, #10]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	891b      	ldrh	r3, [r3, #8]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d10d      	bne.n	800f8e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d009      	beq.n	800f8e2 <pbuf_copy+0x146>
 800f8ce:	4b15      	ldr	r3, [pc, #84]	@ (800f924 <pbuf_copy+0x188>)
 800f8d0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f8d4:	4919      	ldr	r1, [pc, #100]	@ (800f93c <pbuf_copy+0x1a0>)
 800f8d6:	4815      	ldr	r0, [pc, #84]	@ (800f92c <pbuf_copy+0x190>)
 800f8d8:	f00b fc6a 	bl	801b1b0 <iprintf>
 800f8dc:	f06f 0305 	mvn.w	r3, #5
 800f8e0:	e01b      	b.n	800f91a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d013      	beq.n	800f910 <pbuf_copy+0x174>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	895a      	ldrh	r2, [r3, #10]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	891b      	ldrh	r3, [r3, #8]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d10d      	bne.n	800f910 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d009      	beq.n	800f910 <pbuf_copy+0x174>
 800f8fc:	4b09      	ldr	r3, [pc, #36]	@ (800f924 <pbuf_copy+0x188>)
 800f8fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f902:	490e      	ldr	r1, [pc, #56]	@ (800f93c <pbuf_copy+0x1a0>)
 800f904:	4809      	ldr	r0, [pc, #36]	@ (800f92c <pbuf_copy+0x190>)
 800f906:	f00b fc53 	bl	801b1b0 <iprintf>
 800f90a:	f06f 0305 	mvn.w	r3, #5
 800f90e:	e004      	b.n	800f91a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	f47f af61 	bne.w	800f7da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3718      	adds	r7, #24
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	0801e3e8 	.word	0x0801e3e8
 800f928:	0801e690 	.word	0x0801e690
 800f92c:	0801e448 	.word	0x0801e448
 800f930:	0801e6c0 	.word	0x0801e6c0
 800f934:	0801e6d8 	.word	0x0801e6d8
 800f938:	0801e6f4 	.word	0x0801e6f4
 800f93c:	0801e704 	.word	0x0801e704

0800f940 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b088      	sub	sp, #32
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	4611      	mov	r1, r2
 800f94c:	461a      	mov	r2, r3
 800f94e:	460b      	mov	r3, r1
 800f950:	80fb      	strh	r3, [r7, #6]
 800f952:	4613      	mov	r3, r2
 800f954:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d108      	bne.n	800f976 <pbuf_copy_partial+0x36>
 800f964:	4b2b      	ldr	r3, [pc, #172]	@ (800fa14 <pbuf_copy_partial+0xd4>)
 800f966:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f96a:	492b      	ldr	r1, [pc, #172]	@ (800fa18 <pbuf_copy_partial+0xd8>)
 800f96c:	482b      	ldr	r0, [pc, #172]	@ (800fa1c <pbuf_copy_partial+0xdc>)
 800f96e:	f00b fc1f 	bl	801b1b0 <iprintf>
 800f972:	2300      	movs	r3, #0
 800f974:	e04a      	b.n	800fa0c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d108      	bne.n	800f98e <pbuf_copy_partial+0x4e>
 800f97c:	4b25      	ldr	r3, [pc, #148]	@ (800fa14 <pbuf_copy_partial+0xd4>)
 800f97e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f982:	4927      	ldr	r1, [pc, #156]	@ (800fa20 <pbuf_copy_partial+0xe0>)
 800f984:	4825      	ldr	r0, [pc, #148]	@ (800fa1c <pbuf_copy_partial+0xdc>)
 800f986:	f00b fc13 	bl	801b1b0 <iprintf>
 800f98a:	2300      	movs	r3, #0
 800f98c:	e03e      	b.n	800fa0c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	61fb      	str	r3, [r7, #28]
 800f992:	e034      	b.n	800f9fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f994:	88bb      	ldrh	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00a      	beq.n	800f9b0 <pbuf_copy_partial+0x70>
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	895b      	ldrh	r3, [r3, #10]
 800f99e:	88ba      	ldrh	r2, [r7, #4]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d305      	bcc.n	800f9b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	895b      	ldrh	r3, [r3, #10]
 800f9a8:	88ba      	ldrh	r2, [r7, #4]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	80bb      	strh	r3, [r7, #4]
 800f9ae:	e023      	b.n	800f9f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	895a      	ldrh	r2, [r3, #10]
 800f9b4:	88bb      	ldrh	r3, [r7, #4]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f9ba:	8b3a      	ldrh	r2, [r7, #24]
 800f9bc:	88fb      	ldrh	r3, [r7, #6]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d901      	bls.n	800f9c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f9c2:	88fb      	ldrh	r3, [r7, #6]
 800f9c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f9c6:	8b7b      	ldrh	r3, [r7, #26]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	18d0      	adds	r0, r2, r3
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	685a      	ldr	r2, [r3, #4]
 800f9d0:	88bb      	ldrh	r3, [r7, #4]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	8b3a      	ldrh	r2, [r7, #24]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	f00b fe09 	bl	801b5ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f9dc:	8afa      	ldrh	r2, [r7, #22]
 800f9de:	8b3b      	ldrh	r3, [r7, #24]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f9e4:	8b7a      	ldrh	r2, [r7, #26]
 800f9e6:	8b3b      	ldrh	r3, [r7, #24]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	8b3b      	ldrh	r3, [r7, #24]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	61fb      	str	r3, [r7, #28]
 800f9fe:	88fb      	ldrh	r3, [r7, #6]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <pbuf_copy_partial+0xca>
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1c4      	bne.n	800f994 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fa0a:	8afb      	ldrh	r3, [r7, #22]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3720      	adds	r7, #32
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	0801e3e8 	.word	0x0801e3e8
 800fa18:	0801e730 	.word	0x0801e730
 800fa1c:	0801e448 	.word	0x0801e448
 800fa20:	0801e750 	.word	0x0801e750

0800fa24 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b087      	sub	sp, #28
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800fa32:	897b      	ldrh	r3, [r7, #10]
 800fa34:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800fa3a:	e007      	b.n	800fa4c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	895b      	ldrh	r3, [r3, #10]
 800fa40:	8afa      	ldrh	r2, [r7, #22]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d004      	beq.n	800fa5c <pbuf_skip_const+0x38>
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	895b      	ldrh	r3, [r3, #10]
 800fa56:	8afa      	ldrh	r2, [r7, #22]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d2ef      	bcs.n	800fa3c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d002      	beq.n	800fa68 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	8afa      	ldrh	r2, [r7, #22]
 800fa66:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800fa68:	693b      	ldr	r3, [r7, #16]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	371c      	adds	r7, #28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr

0800fa76 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b086      	sub	sp, #24
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	60f8      	str	r0, [r7, #12]
 800fa7e:	460b      	mov	r3, r1
 800fa80:	607a      	str	r2, [r7, #4]
 800fa82:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800fa84:	897b      	ldrh	r3, [r7, #10]
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7ff ffca 	bl	800fa24 <pbuf_skip_const>
 800fa90:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800fa92:	697b      	ldr	r3, [r7, #20]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3718      	adds	r7, #24
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	603a      	str	r2, [r7, #0]
 800faa6:	71fb      	strb	r3, [r7, #7]
 800faa8:	460b      	mov	r3, r1
 800faaa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	8919      	ldrh	r1, [r3, #8]
 800fab0:	88ba      	ldrh	r2, [r7, #4]
 800fab2:	79fb      	ldrb	r3, [r7, #7]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff fa55 	bl	800ef64 <pbuf_alloc>
 800faba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d101      	bne.n	800fac6 <pbuf_clone+0x2a>
    return NULL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	e011      	b.n	800faea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7ff fe67 	bl	800f79c <pbuf_copy>
 800face:	4603      	mov	r3, r0
 800fad0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fad2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d006      	beq.n	800fae8 <pbuf_clone+0x4c>
 800fada:	4b06      	ldr	r3, [pc, #24]	@ (800faf4 <pbuf_clone+0x58>)
 800fadc:	f240 5224 	movw	r2, #1316	@ 0x524
 800fae0:	4905      	ldr	r1, [pc, #20]	@ (800faf8 <pbuf_clone+0x5c>)
 800fae2:	4806      	ldr	r0, [pc, #24]	@ (800fafc <pbuf_clone+0x60>)
 800fae4:	f00b fb64 	bl	801b1b0 <iprintf>
  return q;
 800fae8:	68fb      	ldr	r3, [r7, #12]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	0801e3e8 	.word	0x0801e3e8
 800faf8:	0801e85c 	.word	0x0801e85c
 800fafc:	0801e448 	.word	0x0801e448

0800fb00 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800fb0c:	887b      	ldrh	r3, [r7, #2]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f80c 	bl	800fb2e <pbuf_try_get_at>
 800fb16:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	db02      	blt.n	800fb24 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	e000      	b.n	800fb26 <pbuf_get_at+0x26>
  }
  return 0;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b084      	sub	sp, #16
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	460b      	mov	r3, r1
 800fb38:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800fb3a:	f107 020a 	add.w	r2, r7, #10
 800fb3e:	887b      	ldrh	r3, [r7, #2]
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff ff6e 	bl	800fa24 <pbuf_skip_const>
 800fb48:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00a      	beq.n	800fb66 <pbuf_try_get_at+0x38>
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	895a      	ldrh	r2, [r3, #10]
 800fb54:	897b      	ldrh	r3, [r7, #10]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d905      	bls.n	800fb66 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	897a      	ldrh	r2, [r7, #10]
 800fb60:	4413      	add	r3, r2
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	e001      	b.n	800fb6a <pbuf_try_get_at+0x3c>
  }
  return -1;
 800fb66:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b084      	sub	sp, #16
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	807b      	strh	r3, [r7, #2]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800fb82:	f107 020a 	add.w	r2, r7, #10
 800fb86:	887b      	ldrh	r3, [r7, #2]
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff ff73 	bl	800fa76 <pbuf_skip>
 800fb90:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00a      	beq.n	800fbae <pbuf_put_at+0x3c>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	895a      	ldrh	r2, [r3, #10]
 800fb9c:	897b      	ldrh	r3, [r7, #10]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d905      	bls.n	800fbae <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	897a      	ldrh	r2, [r7, #10]
 800fba8:	4413      	add	r3, r2
 800fbaa:	787a      	ldrb	r2, [r7, #1]
 800fbac:	701a      	strb	r2, [r3, #0]
  }
}
 800fbae:	bf00      	nop
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
	...

0800fbb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fbbc:	f00a fd28 	bl	801a610 <rand>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	4b01      	ldr	r3, [pc, #4]	@ (800fbd8 <tcp_init+0x20>)
 800fbd2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fbd4:	bf00      	nop
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	200000b0 	.word	0x200000b0

0800fbdc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	7d1b      	ldrb	r3, [r3, #20]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d105      	bne.n	800fbf8 <tcp_free+0x1c>
 800fbec:	4b06      	ldr	r3, [pc, #24]	@ (800fc08 <tcp_free+0x2c>)
 800fbee:	22d4      	movs	r2, #212	@ 0xd4
 800fbf0:	4906      	ldr	r1, [pc, #24]	@ (800fc0c <tcp_free+0x30>)
 800fbf2:	4807      	ldr	r0, [pc, #28]	@ (800fc10 <tcp_free+0x34>)
 800fbf4:	f00b fadc 	bl	801b1b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fbf8:	6879      	ldr	r1, [r7, #4]
 800fbfa:	2001      	movs	r0, #1
 800fbfc:	f7fe fdf8 	bl	800e7f0 <memp_free>
}
 800fc00:	bf00      	nop
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	0801e8e8 	.word	0x0801e8e8
 800fc0c:	0801e918 	.word	0x0801e918
 800fc10:	0801e92c 	.word	0x0801e92c

0800fc14 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7d1b      	ldrb	r3, [r3, #20]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d105      	bne.n	800fc30 <tcp_free_listen+0x1c>
 800fc24:	4b06      	ldr	r3, [pc, #24]	@ (800fc40 <tcp_free_listen+0x2c>)
 800fc26:	22df      	movs	r2, #223	@ 0xdf
 800fc28:	4906      	ldr	r1, [pc, #24]	@ (800fc44 <tcp_free_listen+0x30>)
 800fc2a:	4807      	ldr	r0, [pc, #28]	@ (800fc48 <tcp_free_listen+0x34>)
 800fc2c:	f00b fac0 	bl	801b1b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	2002      	movs	r0, #2
 800fc34:	f7fe fddc 	bl	800e7f0 <memp_free>
}
 800fc38:	bf00      	nop
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	0801e8e8 	.word	0x0801e8e8
 800fc44:	0801e954 	.word	0x0801e954
 800fc48:	0801e92c 	.word	0x0801e92c

0800fc4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fc50:	f000 fea6 	bl	80109a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fc54:	4b07      	ldr	r3, [pc, #28]	@ (800fc74 <tcp_tmr+0x28>)
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	4b05      	ldr	r3, [pc, #20]	@ (800fc74 <tcp_tmr+0x28>)
 800fc5e:	701a      	strb	r2, [r3, #0]
 800fc60:	4b04      	ldr	r3, [pc, #16]	@ (800fc74 <tcp_tmr+0x28>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	f003 0301 	and.w	r3, r3, #1
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fc6c:	f000 fb56 	bl	801031c <tcp_slowtmr>
  }
}
 800fc70:	bf00      	nop
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20013d71 	.word	0x20013d71

0800fc78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d105      	bne.n	800fc94 <tcp_remove_listener+0x1c>
 800fc88:	4b0d      	ldr	r3, [pc, #52]	@ (800fcc0 <tcp_remove_listener+0x48>)
 800fc8a:	22ff      	movs	r2, #255	@ 0xff
 800fc8c:	490d      	ldr	r1, [pc, #52]	@ (800fcc4 <tcp_remove_listener+0x4c>)
 800fc8e:	480e      	ldr	r0, [pc, #56]	@ (800fcc8 <tcp_remove_listener+0x50>)
 800fc90:	f00b fa8e 	bl	801b1b0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	60fb      	str	r3, [r7, #12]
 800fc98:	e00a      	b.n	800fcb0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d102      	bne.n	800fcaa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1f1      	bne.n	800fc9a <tcp_remove_listener+0x22>
    }
  }
}
 800fcb6:	bf00      	nop
 800fcb8:	bf00      	nop
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	0801e8e8 	.word	0x0801e8e8
 800fcc4:	0801e970 	.word	0x0801e970
 800fcc8:	0801e92c 	.word	0x0801e92c

0800fccc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <tcp_listen_closed+0x1c>
 800fcda:	4b14      	ldr	r3, [pc, #80]	@ (800fd2c <tcp_listen_closed+0x60>)
 800fcdc:	f240 1211 	movw	r2, #273	@ 0x111
 800fce0:	4913      	ldr	r1, [pc, #76]	@ (800fd30 <tcp_listen_closed+0x64>)
 800fce2:	4814      	ldr	r0, [pc, #80]	@ (800fd34 <tcp_listen_closed+0x68>)
 800fce4:	f00b fa64 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7d1b      	ldrb	r3, [r3, #20]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d006      	beq.n	800fcfe <tcp_listen_closed+0x32>
 800fcf0:	4b0e      	ldr	r3, [pc, #56]	@ (800fd2c <tcp_listen_closed+0x60>)
 800fcf2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800fcf6:	4910      	ldr	r1, [pc, #64]	@ (800fd38 <tcp_listen_closed+0x6c>)
 800fcf8:	480e      	ldr	r0, [pc, #56]	@ (800fd34 <tcp_listen_closed+0x68>)
 800fcfa:	f00b fa59 	bl	801b1b0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fcfe:	2301      	movs	r3, #1
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	e00b      	b.n	800fd1c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fd04:	4a0d      	ldr	r2, [pc, #52]	@ (800fd3c <tcp_listen_closed+0x70>)
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	6879      	ldr	r1, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7ff ffb1 	bl	800fc78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b03      	cmp	r3, #3
 800fd20:	d9f0      	bls.n	800fd04 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fd22:	bf00      	nop
 800fd24:	bf00      	nop
 800fd26:	3710      	adds	r7, #16
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	0801e8e8 	.word	0x0801e8e8
 800fd30:	0801e998 	.word	0x0801e998
 800fd34:	0801e92c 	.word	0x0801e92c
 800fd38:	0801e9a4 	.word	0x0801e9a4
 800fd3c:	0806c9b4 	.word	0x0806c9b4

0800fd40 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fd40:	b5b0      	push	{r4, r5, r7, lr}
 800fd42:	b088      	sub	sp, #32
 800fd44:	af04      	add	r7, sp, #16
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d106      	bne.n	800fd60 <tcp_close_shutdown+0x20>
 800fd52:	4b63      	ldr	r3, [pc, #396]	@ (800fee0 <tcp_close_shutdown+0x1a0>)
 800fd54:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800fd58:	4962      	ldr	r1, [pc, #392]	@ (800fee4 <tcp_close_shutdown+0x1a4>)
 800fd5a:	4863      	ldr	r0, [pc, #396]	@ (800fee8 <tcp_close_shutdown+0x1a8>)
 800fd5c:	f00b fa28 	bl	801b1b0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fd60:	78fb      	ldrb	r3, [r7, #3]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d067      	beq.n	800fe36 <tcp_close_shutdown+0xf6>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	7d1b      	ldrb	r3, [r3, #20]
 800fd6a:	2b04      	cmp	r3, #4
 800fd6c:	d003      	beq.n	800fd76 <tcp_close_shutdown+0x36>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	7d1b      	ldrb	r3, [r3, #20]
 800fd72:	2b07      	cmp	r3, #7
 800fd74:	d15f      	bne.n	800fe36 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d105      	bne.n	800fd8a <tcp_close_shutdown+0x4a>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd82:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d055      	beq.n	800fe36 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	8b5b      	ldrh	r3, [r3, #26]
 800fd8e:	f003 0310 	and.w	r3, r3, #16
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d106      	bne.n	800fda4 <tcp_close_shutdown+0x64>
 800fd96:	4b52      	ldr	r3, [pc, #328]	@ (800fee0 <tcp_close_shutdown+0x1a0>)
 800fd98:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800fd9c:	4953      	ldr	r1, [pc, #332]	@ (800feec <tcp_close_shutdown+0x1ac>)
 800fd9e:	4852      	ldr	r0, [pc, #328]	@ (800fee8 <tcp_close_shutdown+0x1a8>)
 800fda0:	f00b fa06 	bl	801b1b0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fdac:	687d      	ldr	r5, [r7, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	3304      	adds	r3, #4
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	8ad2      	ldrh	r2, [r2, #22]
 800fdb6:	6879      	ldr	r1, [r7, #4]
 800fdb8:	8b09      	ldrh	r1, [r1, #24]
 800fdba:	9102      	str	r1, [sp, #8]
 800fdbc:	9201      	str	r2, [sp, #4]
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	462b      	mov	r3, r5
 800fdc2:	4622      	mov	r2, r4
 800fdc4:	4601      	mov	r1, r0
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f004 fedc 	bl	8014b84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f001 f8cb 	bl	8010f68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fdd2:	4b47      	ldr	r3, [pc, #284]	@ (800fef0 <tcp_close_shutdown+0x1b0>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	687a      	ldr	r2, [r7, #4]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d105      	bne.n	800fde8 <tcp_close_shutdown+0xa8>
 800fddc:	4b44      	ldr	r3, [pc, #272]	@ (800fef0 <tcp_close_shutdown+0x1b0>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	4a43      	ldr	r2, [pc, #268]	@ (800fef0 <tcp_close_shutdown+0x1b0>)
 800fde4:	6013      	str	r3, [r2, #0]
 800fde6:	e013      	b.n	800fe10 <tcp_close_shutdown+0xd0>
 800fde8:	4b41      	ldr	r3, [pc, #260]	@ (800fef0 <tcp_close_shutdown+0x1b0>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	e00c      	b.n	800fe0a <tcp_close_shutdown+0xca>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d104      	bne.n	800fe04 <tcp_close_shutdown+0xc4>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	68da      	ldr	r2, [r3, #12]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	60da      	str	r2, [r3, #12]
 800fe02:	e005      	b.n	800fe10 <tcp_close_shutdown+0xd0>
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	60fb      	str	r3, [r7, #12]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1ef      	bne.n	800fdf0 <tcp_close_shutdown+0xb0>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	60da      	str	r2, [r3, #12]
 800fe16:	4b37      	ldr	r3, [pc, #220]	@ (800fef4 <tcp_close_shutdown+0x1b4>)
 800fe18:	2201      	movs	r2, #1
 800fe1a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fe1c:	4b36      	ldr	r3, [pc, #216]	@ (800fef8 <tcp_close_shutdown+0x1b8>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d102      	bne.n	800fe2c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fe26:	f003 fd75 	bl	8013914 <tcp_trigger_input_pcb_close>
 800fe2a:	e002      	b.n	800fe32 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff fed5 	bl	800fbdc <tcp_free>
      }
      return ERR_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	e050      	b.n	800fed8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7d1b      	ldrb	r3, [r3, #20]
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d03b      	beq.n	800feb6 <tcp_close_shutdown+0x176>
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	dc44      	bgt.n	800fecc <tcp_close_shutdown+0x18c>
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d002      	beq.n	800fe4c <tcp_close_shutdown+0x10c>
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d02a      	beq.n	800fea0 <tcp_close_shutdown+0x160>
 800fe4a:	e03f      	b.n	800fecc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	8adb      	ldrh	r3, [r3, #22]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d021      	beq.n	800fe98 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe54:	4b29      	ldr	r3, [pc, #164]	@ (800fefc <tcp_close_shutdown+0x1bc>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d105      	bne.n	800fe6a <tcp_close_shutdown+0x12a>
 800fe5e:	4b27      	ldr	r3, [pc, #156]	@ (800fefc <tcp_close_shutdown+0x1bc>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	4a25      	ldr	r2, [pc, #148]	@ (800fefc <tcp_close_shutdown+0x1bc>)
 800fe66:	6013      	str	r3, [r2, #0]
 800fe68:	e013      	b.n	800fe92 <tcp_close_shutdown+0x152>
 800fe6a:	4b24      	ldr	r3, [pc, #144]	@ (800fefc <tcp_close_shutdown+0x1bc>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	60bb      	str	r3, [r7, #8]
 800fe70:	e00c      	b.n	800fe8c <tcp_close_shutdown+0x14c>
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d104      	bne.n	800fe86 <tcp_close_shutdown+0x146>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	68da      	ldr	r2, [r3, #12]
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	60da      	str	r2, [r3, #12]
 800fe84:	e005      	b.n	800fe92 <tcp_close_shutdown+0x152>
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	60bb      	str	r3, [r7, #8]
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1ef      	bne.n	800fe72 <tcp_close_shutdown+0x132>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7ff fe9f 	bl	800fbdc <tcp_free>
      break;
 800fe9e:	e01a      	b.n	800fed6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7ff ff13 	bl	800fccc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fea6:	6879      	ldr	r1, [r7, #4]
 800fea8:	4815      	ldr	r0, [pc, #84]	@ (800ff00 <tcp_close_shutdown+0x1c0>)
 800feaa:	f001 f8ad 	bl	8011008 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7ff feb0 	bl	800fc14 <tcp_free_listen>
      break;
 800feb4:	e00f      	b.n	800fed6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	480d      	ldr	r0, [pc, #52]	@ (800fef0 <tcp_close_shutdown+0x1b0>)
 800feba:	f001 f8a5 	bl	8011008 <tcp_pcb_remove>
 800febe:	4b0d      	ldr	r3, [pc, #52]	@ (800fef4 <tcp_close_shutdown+0x1b4>)
 800fec0:	2201      	movs	r2, #1
 800fec2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7ff fe89 	bl	800fbdc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800feca:	e004      	b.n	800fed6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f819 	bl	800ff04 <tcp_close_shutdown_fin>
 800fed2:	4603      	mov	r3, r0
 800fed4:	e000      	b.n	800fed8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bdb0      	pop	{r4, r5, r7, pc}
 800fee0:	0801e8e8 	.word	0x0801e8e8
 800fee4:	0801e9bc 	.word	0x0801e9bc
 800fee8:	0801e92c 	.word	0x0801e92c
 800feec:	0801e9dc 	.word	0x0801e9dc
 800fef0:	20013d68 	.word	0x20013d68
 800fef4:	20013d70 	.word	0x20013d70
 800fef8:	20013dac 	.word	0x20013dac
 800fefc:	20013d60 	.word	0x20013d60
 800ff00:	20013d64 	.word	0x20013d64

0800ff04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d106      	bne.n	800ff20 <tcp_close_shutdown_fin+0x1c>
 800ff12:	4b2e      	ldr	r3, [pc, #184]	@ (800ffcc <tcp_close_shutdown_fin+0xc8>)
 800ff14:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ff18:	492d      	ldr	r1, [pc, #180]	@ (800ffd0 <tcp_close_shutdown_fin+0xcc>)
 800ff1a:	482e      	ldr	r0, [pc, #184]	@ (800ffd4 <tcp_close_shutdown_fin+0xd0>)
 800ff1c:	f00b f948 	bl	801b1b0 <iprintf>

  switch (pcb->state) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	7d1b      	ldrb	r3, [r3, #20]
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	d020      	beq.n	800ff6a <tcp_close_shutdown_fin+0x66>
 800ff28:	2b07      	cmp	r3, #7
 800ff2a:	dc2b      	bgt.n	800ff84 <tcp_close_shutdown_fin+0x80>
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d002      	beq.n	800ff36 <tcp_close_shutdown_fin+0x32>
 800ff30:	2b04      	cmp	r3, #4
 800ff32:	d00d      	beq.n	800ff50 <tcp_close_shutdown_fin+0x4c>
 800ff34:	e026      	b.n	800ff84 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f003 ff04 	bl	8013d44 <tcp_send_fin>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d11f      	bne.n	800ff88 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2205      	movs	r2, #5
 800ff4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff4e:	e01b      	b.n	800ff88 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f003 fef7 	bl	8013d44 <tcp_send_fin>
 800ff56:	4603      	mov	r3, r0
 800ff58:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d114      	bne.n	800ff8c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2205      	movs	r2, #5
 800ff66:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff68:	e010      	b.n	800ff8c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f003 feea 	bl	8013d44 <tcp_send_fin>
 800ff70:	4603      	mov	r3, r0
 800ff72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d109      	bne.n	800ff90 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2209      	movs	r2, #9
 800ff80:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff82:	e005      	b.n	800ff90 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ff84:	2300      	movs	r3, #0
 800ff86:	e01c      	b.n	800ffc2 <tcp_close_shutdown_fin+0xbe>
      break;
 800ff88:	bf00      	nop
 800ff8a:	e002      	b.n	800ff92 <tcp_close_shutdown_fin+0x8e>
      break;
 800ff8c:	bf00      	nop
 800ff8e:	e000      	b.n	800ff92 <tcp_close_shutdown_fin+0x8e>
      break;
 800ff90:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ff92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d103      	bne.n	800ffa2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f004 f810 	bl	8013fc0 <tcp_output>
 800ffa0:	e00d      	b.n	800ffbe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ffa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffaa:	d108      	bne.n	800ffbe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	8b5b      	ldrh	r3, [r3, #26]
 800ffb0:	f043 0308 	orr.w	r3, r3, #8
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e001      	b.n	800ffc2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ffbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	0801e8e8 	.word	0x0801e8e8
 800ffd0:	0801e998 	.word	0x0801e998
 800ffd4:	0801e92c 	.word	0x0801e92c

0800ffd8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d109      	bne.n	800fffa <tcp_close+0x22>
 800ffe6:	4b0f      	ldr	r3, [pc, #60]	@ (8010024 <tcp_close+0x4c>)
 800ffe8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ffec:	490e      	ldr	r1, [pc, #56]	@ (8010028 <tcp_close+0x50>)
 800ffee:	480f      	ldr	r0, [pc, #60]	@ (801002c <tcp_close+0x54>)
 800fff0:	f00b f8de 	bl	801b1b0 <iprintf>
 800fff4:	f06f 030f 	mvn.w	r3, #15
 800fff8:	e00f      	b.n	801001a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7d1b      	ldrb	r3, [r3, #20]
 800fffe:	2b01      	cmp	r3, #1
 8010000:	d006      	beq.n	8010010 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	8b5b      	ldrh	r3, [r3, #26]
 8010006:	f043 0310 	orr.w	r3, r3, #16
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010010:	2101      	movs	r1, #1
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff fe94 	bl	800fd40 <tcp_close_shutdown>
 8010018:	4603      	mov	r3, r0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	0801e8e8 	.word	0x0801e8e8
 8010028:	0801e9f8 	.word	0x0801e9f8
 801002c:	0801e92c 	.word	0x0801e92c

08010030 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b08e      	sub	sp, #56	@ 0x38
 8010034:	af04      	add	r7, sp, #16
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d107      	bne.n	8010050 <tcp_abandon+0x20>
 8010040:	4b52      	ldr	r3, [pc, #328]	@ (801018c <tcp_abandon+0x15c>)
 8010042:	f240 223d 	movw	r2, #573	@ 0x23d
 8010046:	4952      	ldr	r1, [pc, #328]	@ (8010190 <tcp_abandon+0x160>)
 8010048:	4852      	ldr	r0, [pc, #328]	@ (8010194 <tcp_abandon+0x164>)
 801004a:	f00b f8b1 	bl	801b1b0 <iprintf>
 801004e:	e099      	b.n	8010184 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7d1b      	ldrb	r3, [r3, #20]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d106      	bne.n	8010066 <tcp_abandon+0x36>
 8010058:	4b4c      	ldr	r3, [pc, #304]	@ (801018c <tcp_abandon+0x15c>)
 801005a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801005e:	494e      	ldr	r1, [pc, #312]	@ (8010198 <tcp_abandon+0x168>)
 8010060:	484c      	ldr	r0, [pc, #304]	@ (8010194 <tcp_abandon+0x164>)
 8010062:	f00b f8a5 	bl	801b1b0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	7d1b      	ldrb	r3, [r3, #20]
 801006a:	2b0a      	cmp	r3, #10
 801006c:	d107      	bne.n	801007e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	484a      	ldr	r0, [pc, #296]	@ (801019c <tcp_abandon+0x16c>)
 8010072:	f000 ffc9 	bl	8011008 <tcp_pcb_remove>
    tcp_free(pcb);
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7ff fdb0 	bl	800fbdc <tcp_free>
 801007c:	e082      	b.n	8010184 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801008a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010090:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010098:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	7d1b      	ldrb	r3, [r3, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d126      	bne.n	80100f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	8adb      	ldrh	r3, [r3, #22]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d02e      	beq.n	801010e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80100b0:	4b3b      	ldr	r3, [pc, #236]	@ (80101a0 <tcp_abandon+0x170>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d105      	bne.n	80100c6 <tcp_abandon+0x96>
 80100ba:	4b39      	ldr	r3, [pc, #228]	@ (80101a0 <tcp_abandon+0x170>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	4a37      	ldr	r2, [pc, #220]	@ (80101a0 <tcp_abandon+0x170>)
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	e013      	b.n	80100ee <tcp_abandon+0xbe>
 80100c6:	4b36      	ldr	r3, [pc, #216]	@ (80101a0 <tcp_abandon+0x170>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	61fb      	str	r3, [r7, #28]
 80100cc:	e00c      	b.n	80100e8 <tcp_abandon+0xb8>
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d104      	bne.n	80100e2 <tcp_abandon+0xb2>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68da      	ldr	r2, [r3, #12]
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	60da      	str	r2, [r3, #12]
 80100e0:	e005      	b.n	80100ee <tcp_abandon+0xbe>
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	61fb      	str	r3, [r7, #28]
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1ef      	bne.n	80100ce <tcp_abandon+0x9e>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	60da      	str	r2, [r3, #12]
 80100f4:	e00b      	b.n	801010e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	8adb      	ldrh	r3, [r3, #22]
 80100fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	4828      	ldr	r0, [pc, #160]	@ (80101a4 <tcp_abandon+0x174>)
 8010104:	f000 ff80 	bl	8011008 <tcp_pcb_remove>
 8010108:	4b27      	ldr	r3, [pc, #156]	@ (80101a8 <tcp_abandon+0x178>)
 801010a:	2201      	movs	r2, #1
 801010c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010112:	2b00      	cmp	r3, #0
 8010114:	d004      	beq.n	8010120 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801011a:	4618      	mov	r0, r3
 801011c:	f000 fd22 	bl	8010b64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010124:	2b00      	cmp	r3, #0
 8010126:	d004      	beq.n	8010132 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fd19 	bl	8010b64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010136:	2b00      	cmp	r3, #0
 8010138:	d004      	beq.n	8010144 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801013e:	4618      	mov	r0, r3
 8010140:	f000 fd10 	bl	8010b64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00e      	beq.n	8010168 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801014a:	6879      	ldr	r1, [r7, #4]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	3304      	adds	r3, #4
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	8b12      	ldrh	r2, [r2, #24]
 8010154:	9202      	str	r2, [sp, #8]
 8010156:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010158:	9201      	str	r2, [sp, #4]
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	460b      	mov	r3, r1
 801015e:	697a      	ldr	r2, [r7, #20]
 8010160:	69b9      	ldr	r1, [r7, #24]
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f004 fd0e 	bl	8014b84 <tcp_rst>
    }
    last_state = pcb->state;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	7d1b      	ldrb	r3, [r3, #20]
 801016c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fd34 	bl	800fbdc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d004      	beq.n	8010184 <tcp_abandon+0x154>
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	f06f 010c 	mvn.w	r1, #12
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	4798      	blx	r3
  }
}
 8010184:	3728      	adds	r7, #40	@ 0x28
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	0801e8e8 	.word	0x0801e8e8
 8010190:	0801ea2c 	.word	0x0801ea2c
 8010194:	0801e92c 	.word	0x0801e92c
 8010198:	0801ea48 	.word	0x0801ea48
 801019c:	20013d6c 	.word	0x20013d6c
 80101a0:	20013d60 	.word	0x20013d60
 80101a4:	20013d68 	.word	0x20013d68
 80101a8:	20013d70 	.word	0x20013d70

080101ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80101b4:	2101      	movs	r1, #1
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7ff ff3a 	bl	8010030 <tcp_abandon>
}
 80101bc:	bf00      	nop
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d106      	bne.n	80101e0 <tcp_update_rcv_ann_wnd+0x1c>
 80101d2:	4b25      	ldr	r3, [pc, #148]	@ (8010268 <tcp_update_rcv_ann_wnd+0xa4>)
 80101d4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80101d8:	4924      	ldr	r1, [pc, #144]	@ (801026c <tcp_update_rcv_ann_wnd+0xa8>)
 80101da:	4825      	ldr	r0, [pc, #148]	@ (8010270 <tcp_update_rcv_ann_wnd+0xac>)
 80101dc:	f00a ffe8 	bl	801b1b0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80101e8:	4413      	add	r3, r2
 80101ea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80101f4:	f241 61d0 	movw	r1, #5840	@ 0x16d0
 80101f8:	428a      	cmp	r2, r1
 80101fa:	bf28      	it	cs
 80101fc:	460a      	movcs	r2, r1
 80101fe:	b292      	uxth	r2, r2
 8010200:	4413      	add	r3, r2
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	2b00      	cmp	r3, #0
 8010208:	db08      	blt.n	801021c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	e020      	b.n	801025e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010224:	1ad3      	subs	r3, r2, r3
 8010226:	2b00      	cmp	r3, #0
 8010228:	dd03      	ble.n	8010232 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010230:	e014      	b.n	801025c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010244:	d306      	bcc.n	8010254 <tcp_update_rcv_ann_wnd+0x90>
 8010246:	4b08      	ldr	r3, [pc, #32]	@ (8010268 <tcp_update_rcv_ann_wnd+0xa4>)
 8010248:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801024c:	4909      	ldr	r1, [pc, #36]	@ (8010274 <tcp_update_rcv_ann_wnd+0xb0>)
 801024e:	4808      	ldr	r0, [pc, #32]	@ (8010270 <tcp_update_rcv_ann_wnd+0xac>)
 8010250:	f00a ffae 	bl	801b1b0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	b29a      	uxth	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801025c:	2300      	movs	r3, #0
  }
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	0801e8e8 	.word	0x0801e8e8
 801026c:	0801eb44 	.word	0x0801eb44
 8010270:	0801e92c 	.word	0x0801e92c
 8010274:	0801eb68 	.word	0x0801eb68

08010278 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d107      	bne.n	801029a <tcp_recved+0x22>
 801028a:	4b20      	ldr	r3, [pc, #128]	@ (801030c <tcp_recved+0x94>)
 801028c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8010290:	491f      	ldr	r1, [pc, #124]	@ (8010310 <tcp_recved+0x98>)
 8010292:	4820      	ldr	r0, [pc, #128]	@ (8010314 <tcp_recved+0x9c>)
 8010294:	f00a ff8c 	bl	801b1b0 <iprintf>
 8010298:	e034      	b.n	8010304 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7d1b      	ldrb	r3, [r3, #20]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d106      	bne.n	80102b0 <tcp_recved+0x38>
 80102a2:	4b1a      	ldr	r3, [pc, #104]	@ (801030c <tcp_recved+0x94>)
 80102a4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80102a8:	491b      	ldr	r1, [pc, #108]	@ (8010318 <tcp_recved+0xa0>)
 80102aa:	481a      	ldr	r0, [pc, #104]	@ (8010314 <tcp_recved+0x9c>)
 80102ac:	f00a ff80 	bl	801b1b0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80102b4:	887b      	ldrh	r3, [r7, #2]
 80102b6:	4413      	add	r3, r2
 80102b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80102ba:	89fb      	ldrh	r3, [r7, #14]
 80102bc:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d804      	bhi.n	80102ce <tcp_recved+0x56>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102c8:	89fa      	ldrh	r2, [r7, #14]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d204      	bcs.n	80102d8 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80102d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80102d6:	e002      	b.n	80102de <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	89fa      	ldrh	r2, [r7, #14]
 80102dc:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff ff70 	bl	80101c4 <tcp_update_rcv_ann_wnd>
 80102e4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	f640 3267 	movw	r2, #2919	@ 0xb67
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d909      	bls.n	8010304 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	8b5b      	ldrh	r3, [r3, #26]
 80102f4:	f043 0302 	orr.w	r3, r3, #2
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f003 fe5e 	bl	8013fc0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010304:	3710      	adds	r7, #16
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	0801e8e8 	.word	0x0801e8e8
 8010310:	0801eb84 	.word	0x0801eb84
 8010314:	0801e92c 	.word	0x0801e92c
 8010318:	0801eb9c 	.word	0x0801eb9c

0801031c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801031c:	b5b0      	push	{r4, r5, r7, lr}
 801031e:	b090      	sub	sp, #64	@ 0x40
 8010320:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010322:	2300      	movs	r3, #0
 8010324:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8010328:	4b95      	ldr	r3, [pc, #596]	@ (8010580 <tcp_slowtmr+0x264>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	3301      	adds	r3, #1
 801032e:	4a94      	ldr	r2, [pc, #592]	@ (8010580 <tcp_slowtmr+0x264>)
 8010330:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010332:	4b94      	ldr	r3, [pc, #592]	@ (8010584 <tcp_slowtmr+0x268>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	3301      	adds	r3, #1
 8010338:	b2da      	uxtb	r2, r3
 801033a:	4b92      	ldr	r3, [pc, #584]	@ (8010584 <tcp_slowtmr+0x268>)
 801033c:	701a      	strb	r2, [r3, #0]
 801033e:	e000      	b.n	8010342 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010340:	bf00      	nop
  prev = NULL;
 8010342:	2300      	movs	r3, #0
 8010344:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8010346:	4b90      	ldr	r3, [pc, #576]	@ (8010588 <tcp_slowtmr+0x26c>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801034c:	e29f      	b.n	801088e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801034e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010350:	7d1b      	ldrb	r3, [r3, #20]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <tcp_slowtmr+0x48>
 8010356:	4b8d      	ldr	r3, [pc, #564]	@ (801058c <tcp_slowtmr+0x270>)
 8010358:	f240 42be 	movw	r2, #1214	@ 0x4be
 801035c:	498c      	ldr	r1, [pc, #560]	@ (8010590 <tcp_slowtmr+0x274>)
 801035e:	488d      	ldr	r0, [pc, #564]	@ (8010594 <tcp_slowtmr+0x278>)
 8010360:	f00a ff26 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	7d1b      	ldrb	r3, [r3, #20]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d106      	bne.n	801037a <tcp_slowtmr+0x5e>
 801036c:	4b87      	ldr	r3, [pc, #540]	@ (801058c <tcp_slowtmr+0x270>)
 801036e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010372:	4989      	ldr	r1, [pc, #548]	@ (8010598 <tcp_slowtmr+0x27c>)
 8010374:	4887      	ldr	r0, [pc, #540]	@ (8010594 <tcp_slowtmr+0x278>)
 8010376:	f00a ff1b 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801037a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801037c:	7d1b      	ldrb	r3, [r3, #20]
 801037e:	2b0a      	cmp	r3, #10
 8010380:	d106      	bne.n	8010390 <tcp_slowtmr+0x74>
 8010382:	4b82      	ldr	r3, [pc, #520]	@ (801058c <tcp_slowtmr+0x270>)
 8010384:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010388:	4984      	ldr	r1, [pc, #528]	@ (801059c <tcp_slowtmr+0x280>)
 801038a:	4882      	ldr	r0, [pc, #520]	@ (8010594 <tcp_slowtmr+0x278>)
 801038c:	f00a ff10 	bl	801b1b0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010392:	7f9a      	ldrb	r2, [r3, #30]
 8010394:	4b7b      	ldr	r3, [pc, #492]	@ (8010584 <tcp_slowtmr+0x268>)
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	429a      	cmp	r2, r3
 801039a:	d105      	bne.n	80103a8 <tcp_slowtmr+0x8c>
      prev = pcb;
 801039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80103a6:	e272      	b.n	801088e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80103a8:	4b76      	ldr	r3, [pc, #472]	@ (8010584 <tcp_slowtmr+0x268>)
 80103aa:	781a      	ldrb	r2, [r3, #0]
 80103ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ae:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80103b0:	2300      	movs	r3, #0
 80103b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80103b6:	2300      	movs	r3, #0
 80103b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80103bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103be:	7d1b      	ldrb	r3, [r3, #20]
 80103c0:	2b02      	cmp	r3, #2
 80103c2:	d10a      	bne.n	80103da <tcp_slowtmr+0xbe>
 80103c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80103ca:	2b05      	cmp	r3, #5
 80103cc:	d905      	bls.n	80103da <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80103ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103d2:	3301      	adds	r3, #1
 80103d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80103d8:	e11e      	b.n	8010618 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80103da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80103e0:	2b0b      	cmp	r3, #11
 80103e2:	d905      	bls.n	80103f0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80103e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103e8:	3301      	adds	r3, #1
 80103ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103ee:	e113      	b.n	8010618 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80103f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d075      	beq.n	80104e6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80103fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d006      	beq.n	8010410 <tcp_slowtmr+0xf4>
 8010402:	4b62      	ldr	r3, [pc, #392]	@ (801058c <tcp_slowtmr+0x270>)
 8010404:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8010408:	4965      	ldr	r1, [pc, #404]	@ (80105a0 <tcp_slowtmr+0x284>)
 801040a:	4862      	ldr	r0, [pc, #392]	@ (8010594 <tcp_slowtmr+0x278>)
 801040c:	f00a fed0 	bl	801b1b0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d106      	bne.n	8010426 <tcp_slowtmr+0x10a>
 8010418:	4b5c      	ldr	r3, [pc, #368]	@ (801058c <tcp_slowtmr+0x270>)
 801041a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801041e:	4961      	ldr	r1, [pc, #388]	@ (80105a4 <tcp_slowtmr+0x288>)
 8010420:	485c      	ldr	r0, [pc, #368]	@ (8010594 <tcp_slowtmr+0x278>)
 8010422:	f00a fec5 	bl	801b1b0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010428:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801042c:	2b0b      	cmp	r3, #11
 801042e:	d905      	bls.n	801043c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010434:	3301      	adds	r3, #1
 8010436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801043a:	e0ed      	b.n	8010618 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801043c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010442:	3b01      	subs	r3, #1
 8010444:	4a58      	ldr	r2, [pc, #352]	@ (80105a8 <tcp_slowtmr+0x28c>)
 8010446:	5cd3      	ldrb	r3, [r2, r3]
 8010448:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801044a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801044c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010450:	7c7a      	ldrb	r2, [r7, #17]
 8010452:	429a      	cmp	r2, r3
 8010454:	d907      	bls.n	8010466 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010458:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801045c:	3301      	adds	r3, #1
 801045e:	b2da      	uxtb	r2, r3
 8010460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010462:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010468:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801046c:	7c7a      	ldrb	r2, [r7, #17]
 801046e:	429a      	cmp	r2, r3
 8010470:	f200 80d2 	bhi.w	8010618 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010474:	2301      	movs	r3, #1
 8010476:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801047a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801047e:	2b00      	cmp	r3, #0
 8010480:	d108      	bne.n	8010494 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010484:	f004 fc72 	bl	8014d6c <tcp_zero_window_probe>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d014      	beq.n	80104b8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801048e:	2300      	movs	r3, #0
 8010490:	623b      	str	r3, [r7, #32]
 8010492:	e011      	b.n	80104b8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801049a:	4619      	mov	r1, r3
 801049c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801049e:	f003 fb05 	bl	8013aac <tcp_split_unsent_seg>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d107      	bne.n	80104b8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80104a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104aa:	f003 fd89 	bl	8013fc0 <tcp_output>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d101      	bne.n	80104b8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80104b4:	2300      	movs	r3, #0
 80104b6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80104b8:	6a3b      	ldr	r3, [r7, #32]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f000 80ac 	beq.w	8010618 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80104c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80104c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80104ce:	2b06      	cmp	r3, #6
 80104d0:	f200 80a2 	bhi.w	8010618 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80104d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80104da:	3301      	adds	r3, #1
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80104e4:	e098      	b.n	8010618 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80104e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	db0f      	blt.n	8010510 <tcp_slowtmr+0x1f4>
 80104f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80104f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d008      	beq.n	8010510 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80104fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010500:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010504:	b29b      	uxth	r3, r3
 8010506:	3301      	adds	r3, #1
 8010508:	b29b      	uxth	r3, r3
 801050a:	b21a      	sxth	r2, r3
 801050c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8010510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010512:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8010516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010518:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801051c:	429a      	cmp	r2, r3
 801051e:	db7b      	blt.n	8010618 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010522:	f004 f855 	bl	80145d0 <tcp_rexmit_rto_prepare>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d007      	beq.n	801053c <tcp_slowtmr+0x220>
 801052c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010530:	2b00      	cmp	r3, #0
 8010532:	d171      	bne.n	8010618 <tcp_slowtmr+0x2fc>
 8010534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d06d      	beq.n	8010618 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801053c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801053e:	7d1b      	ldrb	r3, [r3, #20]
 8010540:	2b02      	cmp	r3, #2
 8010542:	d03a      	beq.n	80105ba <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801054a:	2b0c      	cmp	r3, #12
 801054c:	bf28      	it	cs
 801054e:	230c      	movcs	r3, #12
 8010550:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010554:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010558:	10db      	asrs	r3, r3, #3
 801055a:	b21b      	sxth	r3, r3
 801055c:	461a      	mov	r2, r3
 801055e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010560:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010564:	4413      	add	r3, r2
 8010566:	7efa      	ldrb	r2, [r7, #27]
 8010568:	4910      	ldr	r1, [pc, #64]	@ (80105ac <tcp_slowtmr+0x290>)
 801056a:	5c8a      	ldrb	r2, [r1, r2]
 801056c:	4093      	lsls	r3, r2
 801056e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010576:	4293      	cmp	r3, r2
 8010578:	dc1a      	bgt.n	80105b0 <tcp_slowtmr+0x294>
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	b21a      	sxth	r2, r3
 801057e:	e019      	b.n	80105b4 <tcp_slowtmr+0x298>
 8010580:	20013d5c 	.word	0x20013d5c
 8010584:	20013d72 	.word	0x20013d72
 8010588:	20013d68 	.word	0x20013d68
 801058c:	0801e8e8 	.word	0x0801e8e8
 8010590:	0801ec2c 	.word	0x0801ec2c
 8010594:	0801e92c 	.word	0x0801e92c
 8010598:	0801ec58 	.word	0x0801ec58
 801059c:	0801ec84 	.word	0x0801ec84
 80105a0:	0801ecb4 	.word	0x0801ecb4
 80105a4:	0801ece8 	.word	0x0801ece8
 80105a8:	0806c9ac 	.word	0x0806c9ac
 80105ac:	0806c99c 	.word	0x0806c99c
 80105b0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80105b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80105ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105bc:	2200      	movs	r2, #0
 80105be:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80105c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80105c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105cc:	4293      	cmp	r3, r2
 80105ce:	bf28      	it	cs
 80105d0:	4613      	movcs	r3, r2
 80105d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80105d4:	8a7b      	ldrh	r3, [r7, #18]
 80105d6:	085b      	lsrs	r3, r3, #1
 80105d8:	b29a      	uxth	r2, r3
 80105da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80105e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80105e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105ea:	005b      	lsls	r3, r3, #1
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d206      	bcs.n	8010600 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80105f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105f6:	005b      	lsls	r3, r3, #1
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010602:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010606:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801060a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801060c:	2200      	movs	r2, #0
 801060e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8010612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010614:	f004 f856 	bl	80146c4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8010618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061a:	7d1b      	ldrb	r3, [r3, #20]
 801061c:	2b06      	cmp	r3, #6
 801061e:	d111      	bne.n	8010644 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010622:	8b5b      	ldrh	r3, [r3, #26]
 8010624:	f003 0310 	and.w	r3, r3, #16
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00b      	beq.n	8010644 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801062c:	4b9d      	ldr	r3, [pc, #628]	@ (80108a4 <tcp_slowtmr+0x588>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010632:	6a1b      	ldr	r3, [r3, #32]
 8010634:	1ad3      	subs	r3, r2, r3
 8010636:	2b28      	cmp	r3, #40	@ 0x28
 8010638:	d904      	bls.n	8010644 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801063a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801063e:	3301      	adds	r3, #1
 8010640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010646:	7a5b      	ldrb	r3, [r3, #9]
 8010648:	f003 0308 	and.w	r3, r3, #8
 801064c:	2b00      	cmp	r3, #0
 801064e:	d04c      	beq.n	80106ea <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8010650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010652:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010654:	2b04      	cmp	r3, #4
 8010656:	d003      	beq.n	8010660 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801065c:	2b07      	cmp	r3, #7
 801065e:	d144      	bne.n	80106ea <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010660:	4b90      	ldr	r3, [pc, #576]	@ (80108a4 <tcp_slowtmr+0x588>)
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010666:	6a1b      	ldr	r3, [r3, #32]
 8010668:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801066a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010670:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8010674:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8010678:	498b      	ldr	r1, [pc, #556]	@ (80108a8 <tcp_slowtmr+0x58c>)
 801067a:	fba1 1303 	umull	r1, r3, r1, r3
 801067e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010680:	429a      	cmp	r2, r3
 8010682:	d90a      	bls.n	801069a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8010684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010688:	3301      	adds	r3, #1
 801068a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801068e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010692:	3301      	adds	r3, #1
 8010694:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010698:	e027      	b.n	80106ea <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801069a:	4b82      	ldr	r3, [pc, #520]	@ (80108a4 <tcp_slowtmr+0x588>)
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a0:	6a1b      	ldr	r3, [r3, #32]
 80106a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80106a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80106aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80106b0:	4618      	mov	r0, r3
 80106b2:	4b7e      	ldr	r3, [pc, #504]	@ (80108ac <tcp_slowtmr+0x590>)
 80106b4:	fb00 f303 	mul.w	r3, r0, r3
 80106b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80106ba:	497b      	ldr	r1, [pc, #492]	@ (80108a8 <tcp_slowtmr+0x58c>)
 80106bc:	fba1 1303 	umull	r1, r3, r1, r3
 80106c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d911      	bls.n	80106ea <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80106c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106c8:	f004 fb10 	bl	8014cec <tcp_keepalive>
 80106cc:	4603      	mov	r3, r0
 80106ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80106d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d107      	bne.n	80106ea <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80106da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106dc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80106e0:	3301      	adds	r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80106ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d011      	beq.n	8010716 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80106f2:	4b6c      	ldr	r3, [pc, #432]	@ (80108a4 <tcp_slowtmr+0x588>)
 80106f4:	681a      	ldr	r2, [r3, #0]
 80106f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f8:	6a1b      	ldr	r3, [r3, #32]
 80106fa:	1ad2      	subs	r2, r2, r3
 80106fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010702:	4619      	mov	r1, r3
 8010704:	460b      	mov	r3, r1
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	440b      	add	r3, r1
 801070a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801070c:	429a      	cmp	r2, r3
 801070e:	d302      	bcc.n	8010716 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8010710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010712:	f000 fddd 	bl	80112d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010718:	7d1b      	ldrb	r3, [r3, #20]
 801071a:	2b03      	cmp	r3, #3
 801071c:	d10b      	bne.n	8010736 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801071e:	4b61      	ldr	r3, [pc, #388]	@ (80108a4 <tcp_slowtmr+0x588>)
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010724:	6a1b      	ldr	r3, [r3, #32]
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	2b28      	cmp	r3, #40	@ 0x28
 801072a:	d904      	bls.n	8010736 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 801072c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010730:	3301      	adds	r3, #1
 8010732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010738:	7d1b      	ldrb	r3, [r3, #20]
 801073a:	2b09      	cmp	r3, #9
 801073c:	d10b      	bne.n	8010756 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801073e:	4b59      	ldr	r3, [pc, #356]	@ (80108a4 <tcp_slowtmr+0x588>)
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010744:	6a1b      	ldr	r3, [r3, #32]
 8010746:	1ad3      	subs	r3, r2, r3
 8010748:	2bf0      	cmp	r3, #240	@ 0xf0
 801074a:	d904      	bls.n	8010756 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 801074c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010750:	3301      	adds	r3, #1
 8010752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801075a:	2b00      	cmp	r3, #0
 801075c:	d060      	beq.n	8010820 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 801075e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010764:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010768:	f000 fbfe 	bl	8010f68 <tcp_pcb_purge>
      if (prev != NULL) {
 801076c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801076e:	2b00      	cmp	r3, #0
 8010770:	d010      	beq.n	8010794 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010772:	4b4f      	ldr	r3, [pc, #316]	@ (80108b0 <tcp_slowtmr+0x594>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010778:	429a      	cmp	r2, r3
 801077a:	d106      	bne.n	801078a <tcp_slowtmr+0x46e>
 801077c:	4b4d      	ldr	r3, [pc, #308]	@ (80108b4 <tcp_slowtmr+0x598>)
 801077e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010782:	494d      	ldr	r1, [pc, #308]	@ (80108b8 <tcp_slowtmr+0x59c>)
 8010784:	484d      	ldr	r0, [pc, #308]	@ (80108bc <tcp_slowtmr+0x5a0>)
 8010786:	f00a fd13 	bl	801b1b0 <iprintf>
        prev->next = pcb->next;
 801078a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078c:	68da      	ldr	r2, [r3, #12]
 801078e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010790:	60da      	str	r2, [r3, #12]
 8010792:	e00f      	b.n	80107b4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010794:	4b46      	ldr	r3, [pc, #280]	@ (80108b0 <tcp_slowtmr+0x594>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801079a:	429a      	cmp	r2, r3
 801079c:	d006      	beq.n	80107ac <tcp_slowtmr+0x490>
 801079e:	4b45      	ldr	r3, [pc, #276]	@ (80108b4 <tcp_slowtmr+0x598>)
 80107a0:	f240 5271 	movw	r2, #1393	@ 0x571
 80107a4:	4946      	ldr	r1, [pc, #280]	@ (80108c0 <tcp_slowtmr+0x5a4>)
 80107a6:	4845      	ldr	r0, [pc, #276]	@ (80108bc <tcp_slowtmr+0x5a0>)
 80107a8:	f00a fd02 	bl	801b1b0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80107ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	4a3f      	ldr	r2, [pc, #252]	@ (80108b0 <tcp_slowtmr+0x594>)
 80107b2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80107b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d013      	beq.n	80107e4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80107bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107be:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80107c4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80107c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c8:	3304      	adds	r3, #4
 80107ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107cc:	8ad2      	ldrh	r2, [r2, #22]
 80107ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107d0:	8b09      	ldrh	r1, [r1, #24]
 80107d2:	9102      	str	r1, [sp, #8]
 80107d4:	9201      	str	r2, [sp, #4]
 80107d6:	9300      	str	r3, [sp, #0]
 80107d8:	462b      	mov	r3, r5
 80107da:	4622      	mov	r2, r4
 80107dc:	4601      	mov	r1, r0
 80107de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107e0:	f004 f9d0 	bl	8014b84 <tcp_rst>
      err_arg = pcb->callback_arg;
 80107e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e6:	691b      	ldr	r3, [r3, #16]
 80107e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80107ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ec:	7d1b      	ldrb	r3, [r3, #20]
 80107ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80107f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80107f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80107fa:	6838      	ldr	r0, [r7, #0]
 80107fc:	f7ff f9ee 	bl	800fbdc <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010800:	4b30      	ldr	r3, [pc, #192]	@ (80108c4 <tcp_slowtmr+0x5a8>)
 8010802:	2200      	movs	r2, #0
 8010804:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d004      	beq.n	8010816 <tcp_slowtmr+0x4fa>
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f06f 010c 	mvn.w	r1, #12
 8010812:	68b8      	ldr	r0, [r7, #8]
 8010814:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010816:	4b2b      	ldr	r3, [pc, #172]	@ (80108c4 <tcp_slowtmr+0x5a8>)
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d037      	beq.n	801088e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 801081e:	e590      	b.n	8010342 <tcp_slowtmr+0x26>
      prev = pcb;
 8010820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010822:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801082a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801082c:	7f1b      	ldrb	r3, [r3, #28]
 801082e:	3301      	adds	r3, #1
 8010830:	b2da      	uxtb	r2, r3
 8010832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010834:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010838:	7f1a      	ldrb	r2, [r3, #28]
 801083a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083c:	7f5b      	ldrb	r3, [r3, #29]
 801083e:	429a      	cmp	r2, r3
 8010840:	d325      	bcc.n	801088e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8010842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010844:	2200      	movs	r2, #0
 8010846:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010848:	4b1e      	ldr	r3, [pc, #120]	@ (80108c4 <tcp_slowtmr+0x5a8>)
 801084a:	2200      	movs	r2, #0
 801084c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801084e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00b      	beq.n	8010870 <tcp_slowtmr+0x554>
 8010858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801085e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010860:	6912      	ldr	r2, [r2, #16]
 8010862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010864:	4610      	mov	r0, r2
 8010866:	4798      	blx	r3
 8010868:	4603      	mov	r3, r0
 801086a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801086e:	e002      	b.n	8010876 <tcp_slowtmr+0x55a>
 8010870:	2300      	movs	r3, #0
 8010872:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010876:	4b13      	ldr	r3, [pc, #76]	@ (80108c4 <tcp_slowtmr+0x5a8>)
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	f47f ad60 	bne.w	8010340 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010880:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010884:	2b00      	cmp	r3, #0
 8010886:	d102      	bne.n	801088e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8010888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801088a:	f003 fb99 	bl	8013fc0 <tcp_output>
  while (pcb != NULL) {
 801088e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010890:	2b00      	cmp	r3, #0
 8010892:	f47f ad5c 	bne.w	801034e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010896:	2300      	movs	r3, #0
 8010898:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801089a:	4b0b      	ldr	r3, [pc, #44]	@ (80108c8 <tcp_slowtmr+0x5ac>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80108a0:	e067      	b.n	8010972 <tcp_slowtmr+0x656>
 80108a2:	bf00      	nop
 80108a4:	20013d5c 	.word	0x20013d5c
 80108a8:	10624dd3 	.word	0x10624dd3
 80108ac:	000124f8 	.word	0x000124f8
 80108b0:	20013d68 	.word	0x20013d68
 80108b4:	0801e8e8 	.word	0x0801e8e8
 80108b8:	0801ed20 	.word	0x0801ed20
 80108bc:	0801e92c 	.word	0x0801e92c
 80108c0:	0801ed4c 	.word	0x0801ed4c
 80108c4:	20013d70 	.word	0x20013d70
 80108c8:	20013d6c 	.word	0x20013d6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	7d1b      	ldrb	r3, [r3, #20]
 80108d0:	2b0a      	cmp	r3, #10
 80108d2:	d006      	beq.n	80108e2 <tcp_slowtmr+0x5c6>
 80108d4:	4b2b      	ldr	r3, [pc, #172]	@ (8010984 <tcp_slowtmr+0x668>)
 80108d6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80108da:	492b      	ldr	r1, [pc, #172]	@ (8010988 <tcp_slowtmr+0x66c>)
 80108dc:	482b      	ldr	r0, [pc, #172]	@ (801098c <tcp_slowtmr+0x670>)
 80108de:	f00a fc67 	bl	801b1b0 <iprintf>
    pcb_remove = 0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80108e8:	4b29      	ldr	r3, [pc, #164]	@ (8010990 <tcp_slowtmr+0x674>)
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ee:	6a1b      	ldr	r3, [r3, #32]
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	2bf0      	cmp	r3, #240	@ 0xf0
 80108f4:	d904      	bls.n	8010900 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80108f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108fa:	3301      	adds	r3, #1
 80108fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010904:	2b00      	cmp	r3, #0
 8010906:	d02f      	beq.n	8010968 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010908:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801090a:	f000 fb2d 	bl	8010f68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	2b00      	cmp	r3, #0
 8010912:	d010      	beq.n	8010936 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010914:	4b1f      	ldr	r3, [pc, #124]	@ (8010994 <tcp_slowtmr+0x678>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801091a:	429a      	cmp	r2, r3
 801091c:	d106      	bne.n	801092c <tcp_slowtmr+0x610>
 801091e:	4b19      	ldr	r3, [pc, #100]	@ (8010984 <tcp_slowtmr+0x668>)
 8010920:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010924:	491c      	ldr	r1, [pc, #112]	@ (8010998 <tcp_slowtmr+0x67c>)
 8010926:	4819      	ldr	r0, [pc, #100]	@ (801098c <tcp_slowtmr+0x670>)
 8010928:	f00a fc42 	bl	801b1b0 <iprintf>
        prev->next = pcb->next;
 801092c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092e:	68da      	ldr	r2, [r3, #12]
 8010930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010932:	60da      	str	r2, [r3, #12]
 8010934:	e00f      	b.n	8010956 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010936:	4b17      	ldr	r3, [pc, #92]	@ (8010994 <tcp_slowtmr+0x678>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801093c:	429a      	cmp	r2, r3
 801093e:	d006      	beq.n	801094e <tcp_slowtmr+0x632>
 8010940:	4b10      	ldr	r3, [pc, #64]	@ (8010984 <tcp_slowtmr+0x668>)
 8010942:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010946:	4915      	ldr	r1, [pc, #84]	@ (801099c <tcp_slowtmr+0x680>)
 8010948:	4810      	ldr	r0, [pc, #64]	@ (801098c <tcp_slowtmr+0x670>)
 801094a:	f00a fc31 	bl	801b1b0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	4a10      	ldr	r2, [pc, #64]	@ (8010994 <tcp_slowtmr+0x678>)
 8010954:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010958:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801095a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010960:	69f8      	ldr	r0, [r7, #28]
 8010962:	f7ff f93b 	bl	800fbdc <tcp_free>
 8010966:	e004      	b.n	8010972 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1a9      	bne.n	80108cc <tcp_slowtmr+0x5b0>
    }
  }
}
 8010978:	bf00      	nop
 801097a:	bf00      	nop
 801097c:	3730      	adds	r7, #48	@ 0x30
 801097e:	46bd      	mov	sp, r7
 8010980:	bdb0      	pop	{r4, r5, r7, pc}
 8010982:	bf00      	nop
 8010984:	0801e8e8 	.word	0x0801e8e8
 8010988:	0801ed78 	.word	0x0801ed78
 801098c:	0801e92c 	.word	0x0801e92c
 8010990:	20013d5c 	.word	0x20013d5c
 8010994:	20013d6c 	.word	0x20013d6c
 8010998:	0801eda8 	.word	0x0801eda8
 801099c:	0801edd0 	.word	0x0801edd0

080109a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80109a6:	4b2d      	ldr	r3, [pc, #180]	@ (8010a5c <tcp_fasttmr+0xbc>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	3301      	adds	r3, #1
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	4b2b      	ldr	r3, [pc, #172]	@ (8010a5c <tcp_fasttmr+0xbc>)
 80109b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80109b2:	4b2b      	ldr	r3, [pc, #172]	@ (8010a60 <tcp_fasttmr+0xc0>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80109b8:	e048      	b.n	8010a4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	7f9a      	ldrb	r2, [r3, #30]
 80109be:	4b27      	ldr	r3, [pc, #156]	@ (8010a5c <tcp_fasttmr+0xbc>)
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d03f      	beq.n	8010a46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80109c6:	4b25      	ldr	r3, [pc, #148]	@ (8010a5c <tcp_fasttmr+0xbc>)
 80109c8:	781a      	ldrb	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	8b5b      	ldrh	r3, [r3, #26]
 80109d2:	f003 0301 	and.w	r3, r3, #1
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d010      	beq.n	80109fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8b5b      	ldrh	r3, [r3, #26]
 80109de:	f043 0302 	orr.w	r3, r3, #2
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f003 fae9 	bl	8013fc0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	8b5b      	ldrh	r3, [r3, #26]
 80109f2:	f023 0303 	bic.w	r3, r3, #3
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	8b5b      	ldrh	r3, [r3, #26]
 8010a00:	f003 0308 	and.w	r3, r3, #8
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d009      	beq.n	8010a1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	8b5b      	ldrh	r3, [r3, #26]
 8010a0c:	f023 0308 	bic.w	r3, r3, #8
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f7ff fa74 	bl	800ff04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00a      	beq.n	8010a40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8010a64 <tcp_fasttmr+0xc4>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f000 f819 	bl	8010a68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010a36:	4b0b      	ldr	r3, [pc, #44]	@ (8010a64 <tcp_fasttmr+0xc4>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d000      	beq.n	8010a40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010a3e:	e7b8      	b.n	80109b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	607b      	str	r3, [r7, #4]
 8010a44:	e002      	b.n	8010a4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1b3      	bne.n	80109ba <tcp_fasttmr+0x1a>
    }
  }
}
 8010a52:	bf00      	nop
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	20013d72 	.word	0x20013d72
 8010a60:	20013d68 	.word	0x20013d68
 8010a64:	20013d70 	.word	0x20013d70

08010a68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010a68:	b590      	push	{r4, r7, lr}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d109      	bne.n	8010a8a <tcp_process_refused_data+0x22>
 8010a76:	4b38      	ldr	r3, [pc, #224]	@ (8010b58 <tcp_process_refused_data+0xf0>)
 8010a78:	f240 6209 	movw	r2, #1545	@ 0x609
 8010a7c:	4937      	ldr	r1, [pc, #220]	@ (8010b5c <tcp_process_refused_data+0xf4>)
 8010a7e:	4838      	ldr	r0, [pc, #224]	@ (8010b60 <tcp_process_refused_data+0xf8>)
 8010a80:	f00a fb96 	bl	801b1b0 <iprintf>
 8010a84:	f06f 030f 	mvn.w	r3, #15
 8010a88:	e061      	b.n	8010b4e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a8e:	7b5b      	ldrb	r3, [r3, #13]
 8010a90:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a96:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00b      	beq.n	8010ac0 <tcp_process_refused_data+0x58>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6918      	ldr	r0, [r3, #16]
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	68ba      	ldr	r2, [r7, #8]
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	47a0      	blx	r4
 8010aba:	4603      	mov	r3, r0
 8010abc:	73fb      	strb	r3, [r7, #15]
 8010abe:	e007      	b.n	8010ad0 <tcp_process_refused_data+0x68>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	68ba      	ldr	r2, [r7, #8]
 8010ac4:	6879      	ldr	r1, [r7, #4]
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	f000 f8a6 	bl	8010c18 <tcp_recv_null>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d12b      	bne.n	8010b30 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	f003 0320 	and.w	r3, r3, #32
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d034      	beq.n	8010b4c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ae6:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d005      	beq.n	8010afa <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010af2:	3301      	adds	r3, #1
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d00b      	beq.n	8010b1c <tcp_process_refused_data+0xb4>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6918      	ldr	r0, [r3, #16]
 8010b0e:	2300      	movs	r3, #0
 8010b10:	2200      	movs	r2, #0
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	47a0      	blx	r4
 8010b16:	4603      	mov	r3, r0
 8010b18:	73fb      	strb	r3, [r7, #15]
 8010b1a:	e001      	b.n	8010b20 <tcp_process_refused_data+0xb8>
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b24:	f113 0f0d 	cmn.w	r3, #13
 8010b28:	d110      	bne.n	8010b4c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010b2a:	f06f 030c 	mvn.w	r3, #12
 8010b2e:	e00e      	b.n	8010b4e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b34:	f113 0f0d 	cmn.w	r3, #13
 8010b38:	d102      	bne.n	8010b40 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010b3a:	f06f 030c 	mvn.w	r3, #12
 8010b3e:	e006      	b.n	8010b4e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68ba      	ldr	r2, [r7, #8]
 8010b44:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010b46:	f06f 0304 	mvn.w	r3, #4
 8010b4a:	e000      	b.n	8010b4e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3714      	adds	r7, #20
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd90      	pop	{r4, r7, pc}
 8010b56:	bf00      	nop
 8010b58:	0801e8e8 	.word	0x0801e8e8
 8010b5c:	0801edf8 	.word	0x0801edf8
 8010b60:	0801e92c 	.word	0x0801e92c

08010b64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010b6c:	e007      	b.n	8010b7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f80a 	bl	8010b8e <tcp_seg_free>
    seg = next;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d1f4      	bne.n	8010b6e <tcp_segs_free+0xa>
  }
}
 8010b84:	bf00      	nop
 8010b86:	bf00      	nop
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b082      	sub	sp, #8
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00c      	beq.n	8010bb6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d004      	beq.n	8010bae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fe fcc3 	bl	800f534 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	2003      	movs	r0, #3
 8010bb2:	f7fd fe1d 	bl	800e7f0 <memp_free>
  }
}
 8010bb6:	bf00      	nop
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
	...

08010bc0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_seg_copy+0x1c>
 8010bce:	4b0f      	ldr	r3, [pc, #60]	@ (8010c0c <tcp_seg_copy+0x4c>)
 8010bd0:	f240 6282 	movw	r2, #1666	@ 0x682
 8010bd4:	490e      	ldr	r1, [pc, #56]	@ (8010c10 <tcp_seg_copy+0x50>)
 8010bd6:	480f      	ldr	r0, [pc, #60]	@ (8010c14 <tcp_seg_copy+0x54>)
 8010bd8:	f00a faea 	bl	801b1b0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010bdc:	2003      	movs	r0, #3
 8010bde:	f7fd fdb5 	bl	800e74c <memp_malloc>
 8010be2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d101      	bne.n	8010bee <tcp_seg_copy+0x2e>
    return NULL;
 8010bea:	2300      	movs	r3, #0
 8010bec:	e00a      	b.n	8010c04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010bee:	2214      	movs	r2, #20
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f00a fcfb 	bl	801b5ee <memcpy>
  pbuf_ref(cseg->p);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fe fd3f 	bl	800f680 <pbuf_ref>
  return cseg;
 8010c02:	68fb      	ldr	r3, [r7, #12]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3710      	adds	r7, #16
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	0801e8e8 	.word	0x0801e8e8
 8010c10:	0801ee3c 	.word	0x0801ee3c
 8010c14:	0801e92c 	.word	0x0801e92c

08010c18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d109      	bne.n	8010c40 <tcp_recv_null+0x28>
 8010c2c:	4b12      	ldr	r3, [pc, #72]	@ (8010c78 <tcp_recv_null+0x60>)
 8010c2e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010c32:	4912      	ldr	r1, [pc, #72]	@ (8010c7c <tcp_recv_null+0x64>)
 8010c34:	4812      	ldr	r0, [pc, #72]	@ (8010c80 <tcp_recv_null+0x68>)
 8010c36:	f00a fabb 	bl	801b1b0 <iprintf>
 8010c3a:	f06f 030f 	mvn.w	r3, #15
 8010c3e:	e016      	b.n	8010c6e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d009      	beq.n	8010c5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	891b      	ldrh	r3, [r3, #8]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	68b8      	ldr	r0, [r7, #8]
 8010c4e:	f7ff fb13 	bl	8010278 <tcp_recved>
    pbuf_free(p);
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7fe fc6e 	bl	800f534 <pbuf_free>
 8010c58:	e008      	b.n	8010c6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d104      	bne.n	8010c6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010c62:	68b8      	ldr	r0, [r7, #8]
 8010c64:	f7ff f9b8 	bl	800ffd8 <tcp_close>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	e000      	b.n	8010c6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	0801e8e8 	.word	0x0801e8e8
 8010c7c:	0801ee58 	.word	0x0801ee58
 8010c80:	0801e92c 	.word	0x0801e92c

08010c84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	db01      	blt.n	8010c9a <tcp_kill_prio+0x16>
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	e000      	b.n	8010c9c <tcp_kill_prio+0x18>
 8010c9a:	237f      	movs	r3, #127	@ 0x7f
 8010c9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010c9e:	7afb      	ldrb	r3, [r7, #11]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d034      	beq.n	8010d0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010ca4:	7afb      	ldrb	r3, [r7, #11]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cb2:	4b19      	ldr	r3, [pc, #100]	@ (8010d18 <tcp_kill_prio+0x94>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	617b      	str	r3, [r7, #20]
 8010cb8:	e01f      	b.n	8010cfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	7d5b      	ldrb	r3, [r3, #21]
 8010cbe:	7afa      	ldrb	r2, [r7, #11]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d80c      	bhi.n	8010cde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010cc8:	7afa      	ldrb	r2, [r7, #11]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d112      	bne.n	8010cf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cce:	4b13      	ldr	r3, [pc, #76]	@ (8010d1c <tcp_kill_prio+0x98>)
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	68fa      	ldr	r2, [r7, #12]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d80a      	bhi.n	8010cf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010cde:	4b0f      	ldr	r3, [pc, #60]	@ (8010d1c <tcp_kill_prio+0x98>)
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	7d5b      	ldrb	r3, [r3, #21]
 8010cf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	617b      	str	r3, [r7, #20]
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1dc      	bne.n	8010cba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d004      	beq.n	8010d10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010d06:	6938      	ldr	r0, [r7, #16]
 8010d08:	f7ff fa50 	bl	80101ac <tcp_abort>
 8010d0c:	e000      	b.n	8010d10 <tcp_kill_prio+0x8c>
    return;
 8010d0e:	bf00      	nop
  }
}
 8010d10:	3718      	adds	r7, #24
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	20013d68 	.word	0x20013d68
 8010d1c:	20013d5c 	.word	0x20013d5c

08010d20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b086      	sub	sp, #24
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	4603      	mov	r3, r0
 8010d28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010d2a:	79fb      	ldrb	r3, [r7, #7]
 8010d2c:	2b08      	cmp	r3, #8
 8010d2e:	d009      	beq.n	8010d44 <tcp_kill_state+0x24>
 8010d30:	79fb      	ldrb	r3, [r7, #7]
 8010d32:	2b09      	cmp	r3, #9
 8010d34:	d006      	beq.n	8010d44 <tcp_kill_state+0x24>
 8010d36:	4b1a      	ldr	r3, [pc, #104]	@ (8010da0 <tcp_kill_state+0x80>)
 8010d38:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010d3c:	4919      	ldr	r1, [pc, #100]	@ (8010da4 <tcp_kill_state+0x84>)
 8010d3e:	481a      	ldr	r0, [pc, #104]	@ (8010da8 <tcp_kill_state+0x88>)
 8010d40:	f00a fa36 	bl	801b1b0 <iprintf>

  inactivity = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d4c:	4b17      	ldr	r3, [pc, #92]	@ (8010dac <tcp_kill_state+0x8c>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	617b      	str	r3, [r7, #20]
 8010d52:	e017      	b.n	8010d84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	7d1b      	ldrb	r3, [r3, #20]
 8010d58:	79fa      	ldrb	r2, [r7, #7]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d10f      	bne.n	8010d7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010d5e:	4b14      	ldr	r3, [pc, #80]	@ (8010db0 <tcp_kill_state+0x90>)
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	6a1b      	ldr	r3, [r3, #32]
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d807      	bhi.n	8010d7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010d6e:	4b10      	ldr	r3, [pc, #64]	@ (8010db0 <tcp_kill_state+0x90>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	6a1b      	ldr	r3, [r3, #32]
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	617b      	str	r3, [r7, #20]
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1e4      	bne.n	8010d54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d003      	beq.n	8010d98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010d90:	2100      	movs	r1, #0
 8010d92:	6938      	ldr	r0, [r7, #16]
 8010d94:	f7ff f94c 	bl	8010030 <tcp_abandon>
  }
}
 8010d98:	bf00      	nop
 8010d9a:	3718      	adds	r7, #24
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	0801e8e8 	.word	0x0801e8e8
 8010da4:	0801ee74 	.word	0x0801ee74
 8010da8:	0801e92c 	.word	0x0801e92c
 8010dac:	20013d68 	.word	0x20013d68
 8010db0:	20013d5c 	.word	0x20013d5c

08010db4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dc2:	4b12      	ldr	r3, [pc, #72]	@ (8010e0c <tcp_kill_timewait+0x58>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	60fb      	str	r3, [r7, #12]
 8010dc8:	e012      	b.n	8010df0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010dca:	4b11      	ldr	r3, [pc, #68]	@ (8010e10 <tcp_kill_timewait+0x5c>)
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6a1b      	ldr	r3, [r3, #32]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d807      	bhi.n	8010dea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010dda:	4b0d      	ldr	r3, [pc, #52]	@ (8010e10 <tcp_kill_timewait+0x5c>)
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	6a1b      	ldr	r3, [r3, #32]
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	60fb      	str	r3, [r7, #12]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1e9      	bne.n	8010dca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d002      	beq.n	8010e02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010dfc:	68b8      	ldr	r0, [r7, #8]
 8010dfe:	f7ff f9d5 	bl	80101ac <tcp_abort>
  }
}
 8010e02:	bf00      	nop
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	20013d6c 	.word	0x20013d6c
 8010e10:	20013d5c 	.word	0x20013d5c

08010e14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010e1a:	4b10      	ldr	r3, [pc, #64]	@ (8010e5c <tcp_handle_closepend+0x48>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010e20:	e014      	b.n	8010e4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	8b5b      	ldrh	r3, [r3, #26]
 8010e2c:	f003 0308 	and.w	r3, r3, #8
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d009      	beq.n	8010e48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	8b5b      	ldrh	r3, [r3, #26]
 8010e38:	f023 0308 	bic.w	r3, r3, #8
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff f85e 	bl	800ff04 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d1e7      	bne.n	8010e22 <tcp_handle_closepend+0xe>
  }
}
 8010e52:	bf00      	nop
 8010e54:	bf00      	nop
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	20013d68 	.word	0x20013d68

08010e60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e6a:	2001      	movs	r0, #1
 8010e6c:	f7fd fc6e 	bl	800e74c <memp_malloc>
 8010e70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d126      	bne.n	8010ec6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010e78:	f7ff ffcc 	bl	8010e14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010e7c:	f7ff ff9a 	bl	8010db4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e80:	2001      	movs	r0, #1
 8010e82:	f7fd fc63 	bl	800e74c <memp_malloc>
 8010e86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d11b      	bne.n	8010ec6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010e8e:	2009      	movs	r0, #9
 8010e90:	f7ff ff46 	bl	8010d20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e94:	2001      	movs	r0, #1
 8010e96:	f7fd fc59 	bl	800e74c <memp_malloc>
 8010e9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d111      	bne.n	8010ec6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010ea2:	2008      	movs	r0, #8
 8010ea4:	f7ff ff3c 	bl	8010d20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	f7fd fc4f 	bl	800e74c <memp_malloc>
 8010eae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d107      	bne.n	8010ec6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7ff fee3 	bl	8010c84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ebe:	2001      	movs	r0, #1
 8010ec0:	f7fd fc44 	bl	800e74c <memp_malloc>
 8010ec4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d03f      	beq.n	8010f4c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010ecc:	229c      	movs	r2, #156	@ 0x9c
 8010ece:	2100      	movs	r1, #0
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f00a facf 	bl	801b474 <memset>
    pcb->prio = prio;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	79fa      	ldrb	r2, [r7, #7]
 8010eda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010ee2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	22ff      	movs	r2, #255	@ 0xff
 8010efa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010f02:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2206      	movs	r2, #6
 8010f08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2206      	movs	r2, #6
 8010f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f18:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8010f22:	4b0d      	ldr	r3, [pc, #52]	@ (8010f58 <tcp_alloc+0xf8>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010f5c <tcp_alloc+0xfc>)
 8010f2c:	781a      	ldrb	r2, [r3, #0]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010f38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	4a08      	ldr	r2, [pc, #32]	@ (8010f60 <tcp_alloc+0x100>)
 8010f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	4a07      	ldr	r2, [pc, #28]	@ (8010f64 <tcp_alloc+0x104>)
 8010f48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	20013d5c 	.word	0x20013d5c
 8010f5c:	20013d72 	.word	0x20013d72
 8010f60:	08010c19 	.word	0x08010c19
 8010f64:	006ddd00 	.word	0x006ddd00

08010f68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d107      	bne.n	8010f86 <tcp_pcb_purge+0x1e>
 8010f76:	4b21      	ldr	r3, [pc, #132]	@ (8010ffc <tcp_pcb_purge+0x94>)
 8010f78:	f640 0251 	movw	r2, #2129	@ 0x851
 8010f7c:	4920      	ldr	r1, [pc, #128]	@ (8011000 <tcp_pcb_purge+0x98>)
 8010f7e:	4821      	ldr	r0, [pc, #132]	@ (8011004 <tcp_pcb_purge+0x9c>)
 8010f80:	f00a f916 	bl	801b1b0 <iprintf>
 8010f84:	e037      	b.n	8010ff6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	7d1b      	ldrb	r3, [r3, #20]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d033      	beq.n	8010ff6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010f92:	2b0a      	cmp	r3, #10
 8010f94:	d02f      	beq.n	8010ff6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d02b      	beq.n	8010ff6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d007      	beq.n	8010fb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fe fac2 	bl	800f534 <pbuf_free>
      pcb->refused_data = NULL;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d002      	beq.n	8010fc4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 f986 	bl	80112d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010fca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7ff fdc7 	bl	8010b64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff fdc2 	bl	8010b64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	0801e8e8 	.word	0x0801e8e8
 8011000:	0801ef34 	.word	0x0801ef34
 8011004:	0801e92c 	.word	0x0801e92c

08011008 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d106      	bne.n	8011026 <tcp_pcb_remove+0x1e>
 8011018:	4b3e      	ldr	r3, [pc, #248]	@ (8011114 <tcp_pcb_remove+0x10c>)
 801101a:	f640 0283 	movw	r2, #2179	@ 0x883
 801101e:	493e      	ldr	r1, [pc, #248]	@ (8011118 <tcp_pcb_remove+0x110>)
 8011020:	483e      	ldr	r0, [pc, #248]	@ (801111c <tcp_pcb_remove+0x114>)
 8011022:	f00a f8c5 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d106      	bne.n	801103a <tcp_pcb_remove+0x32>
 801102c:	4b39      	ldr	r3, [pc, #228]	@ (8011114 <tcp_pcb_remove+0x10c>)
 801102e:	f640 0284 	movw	r2, #2180	@ 0x884
 8011032:	493b      	ldr	r1, [pc, #236]	@ (8011120 <tcp_pcb_remove+0x118>)
 8011034:	4839      	ldr	r0, [pc, #228]	@ (801111c <tcp_pcb_remove+0x114>)
 8011036:	f00a f8bb 	bl	801b1b0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	429a      	cmp	r2, r3
 8011042:	d105      	bne.n	8011050 <tcp_pcb_remove+0x48>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	68da      	ldr	r2, [r3, #12]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	601a      	str	r2, [r3, #0]
 801104e:	e013      	b.n	8011078 <tcp_pcb_remove+0x70>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e00c      	b.n	8011072 <tcp_pcb_remove+0x6a>
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	429a      	cmp	r2, r3
 8011060:	d104      	bne.n	801106c <tcp_pcb_remove+0x64>
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	68da      	ldr	r2, [r3, #12]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	60da      	str	r2, [r3, #12]
 801106a:	e005      	b.n	8011078 <tcp_pcb_remove+0x70>
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	60fb      	str	r3, [r7, #12]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1ef      	bne.n	8011058 <tcp_pcb_remove+0x50>
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	2200      	movs	r2, #0
 801107c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801107e:	6838      	ldr	r0, [r7, #0]
 8011080:	f7ff ff72 	bl	8010f68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	7d1b      	ldrb	r3, [r3, #20]
 8011088:	2b0a      	cmp	r3, #10
 801108a:	d013      	beq.n	80110b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011090:	2b01      	cmp	r3, #1
 8011092:	d00f      	beq.n	80110b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	8b5b      	ldrh	r3, [r3, #26]
 8011098:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801109c:	2b00      	cmp	r3, #0
 801109e:	d009      	beq.n	80110b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	8b5b      	ldrh	r3, [r3, #26]
 80110a4:	f043 0302 	orr.w	r3, r3, #2
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80110ae:	6838      	ldr	r0, [r7, #0]
 80110b0:	f002 ff86 	bl	8013fc0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	7d1b      	ldrb	r3, [r3, #20]
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d020      	beq.n	80110fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d006      	beq.n	80110d2 <tcp_pcb_remove+0xca>
 80110c4:	4b13      	ldr	r3, [pc, #76]	@ (8011114 <tcp_pcb_remove+0x10c>)
 80110c6:	f640 0293 	movw	r2, #2195	@ 0x893
 80110ca:	4916      	ldr	r1, [pc, #88]	@ (8011124 <tcp_pcb_remove+0x11c>)
 80110cc:	4813      	ldr	r0, [pc, #76]	@ (801111c <tcp_pcb_remove+0x114>)
 80110ce:	f00a f86f 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d006      	beq.n	80110e8 <tcp_pcb_remove+0xe0>
 80110da:	4b0e      	ldr	r3, [pc, #56]	@ (8011114 <tcp_pcb_remove+0x10c>)
 80110dc:	f640 0294 	movw	r2, #2196	@ 0x894
 80110e0:	4911      	ldr	r1, [pc, #68]	@ (8011128 <tcp_pcb_remove+0x120>)
 80110e2:	480e      	ldr	r0, [pc, #56]	@ (801111c <tcp_pcb_remove+0x114>)
 80110e4:	f00a f864 	bl	801b1b0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d006      	beq.n	80110fe <tcp_pcb_remove+0xf6>
 80110f0:	4b08      	ldr	r3, [pc, #32]	@ (8011114 <tcp_pcb_remove+0x10c>)
 80110f2:	f640 0296 	movw	r2, #2198	@ 0x896
 80110f6:	490d      	ldr	r1, [pc, #52]	@ (801112c <tcp_pcb_remove+0x124>)
 80110f8:	4808      	ldr	r0, [pc, #32]	@ (801111c <tcp_pcb_remove+0x114>)
 80110fa:	f00a f859 	bl	801b1b0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2200      	movs	r2, #0
 8011102:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	2200      	movs	r2, #0
 8011108:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801110a:	bf00      	nop
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	0801e8e8 	.word	0x0801e8e8
 8011118:	0801ef50 	.word	0x0801ef50
 801111c:	0801e92c 	.word	0x0801e92c
 8011120:	0801ef6c 	.word	0x0801ef6c
 8011124:	0801ef8c 	.word	0x0801ef8c
 8011128:	0801efa4 	.word	0x0801efa4
 801112c:	0801efc0 	.word	0x0801efc0

08011130 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <tcp_next_iss+0x1c>
 801113e:	4b0a      	ldr	r3, [pc, #40]	@ (8011168 <tcp_next_iss+0x38>)
 8011140:	f640 02af 	movw	r2, #2223	@ 0x8af
 8011144:	4909      	ldr	r1, [pc, #36]	@ (801116c <tcp_next_iss+0x3c>)
 8011146:	480a      	ldr	r0, [pc, #40]	@ (8011170 <tcp_next_iss+0x40>)
 8011148:	f00a f832 	bl	801b1b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801114c:	4b09      	ldr	r3, [pc, #36]	@ (8011174 <tcp_next_iss+0x44>)
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	4b09      	ldr	r3, [pc, #36]	@ (8011178 <tcp_next_iss+0x48>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4413      	add	r3, r2
 8011156:	4a07      	ldr	r2, [pc, #28]	@ (8011174 <tcp_next_iss+0x44>)
 8011158:	6013      	str	r3, [r2, #0]
  return iss;
 801115a:	4b06      	ldr	r3, [pc, #24]	@ (8011174 <tcp_next_iss+0x44>)
 801115c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801115e:	4618      	mov	r0, r3
 8011160:	3708      	adds	r7, #8
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	0801e8e8 	.word	0x0801e8e8
 801116c:	0801efd8 	.word	0x0801efd8
 8011170:	0801e92c 	.word	0x0801e92c
 8011174:	200000b4 	.word	0x200000b4
 8011178:	20013d5c 	.word	0x20013d5c

0801117c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d106      	bne.n	801119e <tcp_eff_send_mss_netif+0x22>
 8011190:	4b14      	ldr	r3, [pc, #80]	@ (80111e4 <tcp_eff_send_mss_netif+0x68>)
 8011192:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8011196:	4914      	ldr	r1, [pc, #80]	@ (80111e8 <tcp_eff_send_mss_netif+0x6c>)
 8011198:	4814      	ldr	r0, [pc, #80]	@ (80111ec <tcp_eff_send_mss_netif+0x70>)
 801119a:	f00a f809 	bl	801b1b0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d101      	bne.n	80111a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80111a4:	89fb      	ldrh	r3, [r7, #14]
 80111a6:	e019      	b.n	80111dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80111ae:	8afb      	ldrh	r3, [r7, #22]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d012      	beq.n	80111da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80111b4:	2328      	movs	r3, #40	@ 0x28
 80111b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80111b8:	8afa      	ldrh	r2, [r7, #22]
 80111ba:	8abb      	ldrh	r3, [r7, #20]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d904      	bls.n	80111ca <tcp_eff_send_mss_netif+0x4e>
 80111c0:	8afa      	ldrh	r2, [r7, #22]
 80111c2:	8abb      	ldrh	r3, [r7, #20]
 80111c4:	1ad3      	subs	r3, r2, r3
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	e000      	b.n	80111cc <tcp_eff_send_mss_netif+0x50>
 80111ca:	2300      	movs	r3, #0
 80111cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80111ce:	8a7a      	ldrh	r2, [r7, #18]
 80111d0:	89fb      	ldrh	r3, [r7, #14]
 80111d2:	4293      	cmp	r3, r2
 80111d4:	bf28      	it	cs
 80111d6:	4613      	movcs	r3, r2
 80111d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80111da:	89fb      	ldrh	r3, [r7, #14]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	0801e8e8 	.word	0x0801e8e8
 80111e8:	0801eff4 	.word	0x0801eff4
 80111ec:	0801e92c 	.word	0x0801e92c

080111f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d119      	bne.n	8011238 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011204:	4b10      	ldr	r3, [pc, #64]	@ (8011248 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011206:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801120a:	4910      	ldr	r1, [pc, #64]	@ (801124c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801120c:	4810      	ldr	r0, [pc, #64]	@ (8011250 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801120e:	f009 ffcf 	bl	801b1b0 <iprintf>

  while (pcb != NULL) {
 8011212:	e011      	b.n	8011238 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	429a      	cmp	r2, r3
 801121e:	d108      	bne.n	8011232 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	f7fe ffc0 	bl	80101ac <tcp_abort>
      pcb = next;
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	60fb      	str	r3, [r7, #12]
 8011230:	e002      	b.n	8011238 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1ea      	bne.n	8011214 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801123e:	bf00      	nop
 8011240:	bf00      	nop
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	0801e8e8 	.word	0x0801e8e8
 801124c:	0801f01c 	.word	0x0801f01c
 8011250:	0801e92c 	.word	0x0801e92c

08011254 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d02a      	beq.n	80112ba <tcp_netif_ip_addr_changed+0x66>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d026      	beq.n	80112ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801126c:	4b15      	ldr	r3, [pc, #84]	@ (80112c4 <tcp_netif_ip_addr_changed+0x70>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4619      	mov	r1, r3
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f7ff ffbc 	bl	80111f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011278:	4b13      	ldr	r3, [pc, #76]	@ (80112c8 <tcp_netif_ip_addr_changed+0x74>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4619      	mov	r1, r3
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7ff ffb6 	bl	80111f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d017      	beq.n	80112ba <tcp_netif_ip_addr_changed+0x66>
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d013      	beq.n	80112ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011292:	4b0e      	ldr	r3, [pc, #56]	@ (80112cc <tcp_netif_ip_addr_changed+0x78>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	60fb      	str	r3, [r7, #12]
 8011298:	e00c      	b.n	80112b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d103      	bne.n	80112ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	60fb      	str	r3, [r7, #12]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1ef      	bne.n	801129a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80112ba:	bf00      	nop
 80112bc:	3710      	adds	r7, #16
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20013d68 	.word	0x20013d68
 80112c8:	20013d60 	.word	0x20013d60
 80112cc:	20013d64 	.word	0x20013d64

080112d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d007      	beq.n	80112f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7ff fc3d 	bl	8010b64 <tcp_segs_free>
    pcb->ooseq = NULL;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80112f8:	b590      	push	{r4, r7, lr}
 80112fa:	b08d      	sub	sp, #52	@ 0x34
 80112fc:	af04      	add	r7, sp, #16
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d105      	bne.n	8011314 <tcp_input+0x1c>
 8011308:	4b8b      	ldr	r3, [pc, #556]	@ (8011538 <tcp_input+0x240>)
 801130a:	2283      	movs	r2, #131	@ 0x83
 801130c:	498b      	ldr	r1, [pc, #556]	@ (801153c <tcp_input+0x244>)
 801130e:	488c      	ldr	r0, [pc, #560]	@ (8011540 <tcp_input+0x248>)
 8011310:	f009 ff4e 	bl	801b1b0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	4a8a      	ldr	r2, [pc, #552]	@ (8011544 <tcp_input+0x24c>)
 801131a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	895b      	ldrh	r3, [r3, #10]
 8011320:	2b13      	cmp	r3, #19
 8011322:	f240 83e3 	bls.w	8011aec <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011326:	4b88      	ldr	r3, [pc, #544]	@ (8011548 <tcp_input+0x250>)
 8011328:	695b      	ldr	r3, [r3, #20]
 801132a:	4a87      	ldr	r2, [pc, #540]	@ (8011548 <tcp_input+0x250>)
 801132c:	6812      	ldr	r2, [r2, #0]
 801132e:	4611      	mov	r1, r2
 8011330:	4618      	mov	r0, r3
 8011332:	f008 f81f 	bl	8019374 <ip4_addr_isbroadcast_u32>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	f040 83d9 	bne.w	8011af0 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801133e:	4b82      	ldr	r3, [pc, #520]	@ (8011548 <tcp_input+0x250>)
 8011340:	695b      	ldr	r3, [r3, #20]
 8011342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011346:	2be0      	cmp	r3, #224	@ 0xe0
 8011348:	f000 83d2 	beq.w	8011af0 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	891a      	ldrh	r2, [r3, #8]
 8011350:	4b7e      	ldr	r3, [pc, #504]	@ (801154c <tcp_input+0x254>)
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	4b7e      	ldr	r3, [pc, #504]	@ (8011550 <tcp_input+0x258>)
 8011356:	2106      	movs	r1, #6
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7fc fcfb 	bl	800dd54 <ip_chksum_pseudo>
 801135e:	4603      	mov	r3, r0
 8011360:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8011362:	8a3b      	ldrh	r3, [r7, #16]
 8011364:	2b00      	cmp	r3, #0
 8011366:	f040 83c5 	bne.w	8011af4 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801136a:	4b76      	ldr	r3, [pc, #472]	@ (8011544 <tcp_input+0x24c>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	899b      	ldrh	r3, [r3, #12]
 8011370:	b29b      	uxth	r3, r3
 8011372:	4618      	mov	r0, r3
 8011374:	f7fc fbbc 	bl	800daf0 <lwip_htons>
 8011378:	4603      	mov	r3, r0
 801137a:	0b1b      	lsrs	r3, r3, #12
 801137c:	b29b      	uxth	r3, r3
 801137e:	b2db      	uxtb	r3, r3
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	2b13      	cmp	r3, #19
 8011388:	f240 83b6 	bls.w	8011af8 <tcp_input+0x800>
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	b29a      	uxth	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	891b      	ldrh	r3, [r3, #8]
 8011394:	429a      	cmp	r2, r3
 8011396:	f200 83af 	bhi.w	8011af8 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801139a:	7bfb      	ldrb	r3, [r7, #15]
 801139c:	b29b      	uxth	r3, r3
 801139e:	3b14      	subs	r3, #20
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	4b6c      	ldr	r3, [pc, #432]	@ (8011554 <tcp_input+0x25c>)
 80113a4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80113a6:	4b6c      	ldr	r3, [pc, #432]	@ (8011558 <tcp_input+0x260>)
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	895a      	ldrh	r2, [r3, #10]
 80113b0:	7bfb      	ldrb	r3, [r7, #15]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d309      	bcc.n	80113cc <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80113b8:	4b66      	ldr	r3, [pc, #408]	@ (8011554 <tcp_input+0x25c>)
 80113ba:	881a      	ldrh	r2, [r3, #0]
 80113bc:	4b67      	ldr	r3, [pc, #412]	@ (801155c <tcp_input+0x264>)
 80113be:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7fe f82f 	bl	800f428 <pbuf_remove_header>
 80113ca:	e04e      	b.n	801146a <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d105      	bne.n	80113e0 <tcp_input+0xe8>
 80113d4:	4b58      	ldr	r3, [pc, #352]	@ (8011538 <tcp_input+0x240>)
 80113d6:	22c2      	movs	r2, #194	@ 0xc2
 80113d8:	4961      	ldr	r1, [pc, #388]	@ (8011560 <tcp_input+0x268>)
 80113da:	4859      	ldr	r0, [pc, #356]	@ (8011540 <tcp_input+0x248>)
 80113dc:	f009 fee8 	bl	801b1b0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80113e0:	2114      	movs	r1, #20
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f7fe f820 	bl	800f428 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	895a      	ldrh	r2, [r3, #10]
 80113ec:	4b5b      	ldr	r3, [pc, #364]	@ (801155c <tcp_input+0x264>)
 80113ee:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80113f0:	4b58      	ldr	r3, [pc, #352]	@ (8011554 <tcp_input+0x25c>)
 80113f2:	881a      	ldrh	r2, [r3, #0]
 80113f4:	4b59      	ldr	r3, [pc, #356]	@ (801155c <tcp_input+0x264>)
 80113f6:	881b      	ldrh	r3, [r3, #0]
 80113f8:	1ad3      	subs	r3, r2, r3
 80113fa:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80113fc:	4b57      	ldr	r3, [pc, #348]	@ (801155c <tcp_input+0x264>)
 80113fe:	881b      	ldrh	r3, [r3, #0]
 8011400:	4619      	mov	r1, r3
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7fe f810 	bl	800f428 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	895b      	ldrh	r3, [r3, #10]
 801140e:	89ba      	ldrh	r2, [r7, #12]
 8011410:	429a      	cmp	r2, r3
 8011412:	f200 8373 	bhi.w	8011afc <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	4a4e      	ldr	r2, [pc, #312]	@ (8011558 <tcp_input+0x260>)
 801141e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	89ba      	ldrh	r2, [r7, #12]
 8011426:	4611      	mov	r1, r2
 8011428:	4618      	mov	r0, r3
 801142a:	f7fd fffd 	bl	800f428 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	891a      	ldrh	r2, [r3, #8]
 8011432:	89bb      	ldrh	r3, [r7, #12]
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	895b      	ldrh	r3, [r3, #10]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d005      	beq.n	8011450 <tcp_input+0x158>
 8011444:	4b3c      	ldr	r3, [pc, #240]	@ (8011538 <tcp_input+0x240>)
 8011446:	22df      	movs	r2, #223	@ 0xdf
 8011448:	4946      	ldr	r1, [pc, #280]	@ (8011564 <tcp_input+0x26c>)
 801144a:	483d      	ldr	r0, [pc, #244]	@ (8011540 <tcp_input+0x248>)
 801144c:	f009 feb0 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	891a      	ldrh	r2, [r3, #8]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	891b      	ldrh	r3, [r3, #8]
 801145a:	429a      	cmp	r2, r3
 801145c:	d005      	beq.n	801146a <tcp_input+0x172>
 801145e:	4b36      	ldr	r3, [pc, #216]	@ (8011538 <tcp_input+0x240>)
 8011460:	22e0      	movs	r2, #224	@ 0xe0
 8011462:	4941      	ldr	r1, [pc, #260]	@ (8011568 <tcp_input+0x270>)
 8011464:	4836      	ldr	r0, [pc, #216]	@ (8011540 <tcp_input+0x248>)
 8011466:	f009 fea3 	bl	801b1b0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801146a:	4b36      	ldr	r3, [pc, #216]	@ (8011544 <tcp_input+0x24c>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	881b      	ldrh	r3, [r3, #0]
 8011470:	b29b      	uxth	r3, r3
 8011472:	4a34      	ldr	r2, [pc, #208]	@ (8011544 <tcp_input+0x24c>)
 8011474:	6814      	ldr	r4, [r2, #0]
 8011476:	4618      	mov	r0, r3
 8011478:	f7fc fb3a 	bl	800daf0 <lwip_htons>
 801147c:	4603      	mov	r3, r0
 801147e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011480:	4b30      	ldr	r3, [pc, #192]	@ (8011544 <tcp_input+0x24c>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	885b      	ldrh	r3, [r3, #2]
 8011486:	b29b      	uxth	r3, r3
 8011488:	4a2e      	ldr	r2, [pc, #184]	@ (8011544 <tcp_input+0x24c>)
 801148a:	6814      	ldr	r4, [r2, #0]
 801148c:	4618      	mov	r0, r3
 801148e:	f7fc fb2f 	bl	800daf0 <lwip_htons>
 8011492:	4603      	mov	r3, r0
 8011494:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011496:	4b2b      	ldr	r3, [pc, #172]	@ (8011544 <tcp_input+0x24c>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4a29      	ldr	r2, [pc, #164]	@ (8011544 <tcp_input+0x24c>)
 801149e:	6814      	ldr	r4, [r2, #0]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fc fb3a 	bl	800db1a <lwip_htonl>
 80114a6:	4603      	mov	r3, r0
 80114a8:	6063      	str	r3, [r4, #4]
 80114aa:	6863      	ldr	r3, [r4, #4]
 80114ac:	4a2f      	ldr	r2, [pc, #188]	@ (801156c <tcp_input+0x274>)
 80114ae:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80114b0:	4b24      	ldr	r3, [pc, #144]	@ (8011544 <tcp_input+0x24c>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	4a23      	ldr	r2, [pc, #140]	@ (8011544 <tcp_input+0x24c>)
 80114b8:	6814      	ldr	r4, [r2, #0]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fc fb2d 	bl	800db1a <lwip_htonl>
 80114c0:	4603      	mov	r3, r0
 80114c2:	60a3      	str	r3, [r4, #8]
 80114c4:	68a3      	ldr	r3, [r4, #8]
 80114c6:	4a2a      	ldr	r2, [pc, #168]	@ (8011570 <tcp_input+0x278>)
 80114c8:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80114ca:	4b1e      	ldr	r3, [pc, #120]	@ (8011544 <tcp_input+0x24c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	89db      	ldrh	r3, [r3, #14]
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	4a1c      	ldr	r2, [pc, #112]	@ (8011544 <tcp_input+0x24c>)
 80114d4:	6814      	ldr	r4, [r2, #0]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fc fb0a 	bl	800daf0 <lwip_htons>
 80114dc:	4603      	mov	r3, r0
 80114de:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80114e0:	4b18      	ldr	r3, [pc, #96]	@ (8011544 <tcp_input+0x24c>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	899b      	ldrh	r3, [r3, #12]
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fc fb01 	bl	800daf0 <lwip_htons>
 80114ee:	4603      	mov	r3, r0
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	4b1e      	ldr	r3, [pc, #120]	@ (8011574 <tcp_input+0x27c>)
 80114fa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	891a      	ldrh	r2, [r3, #8]
 8011500:	4b1d      	ldr	r3, [pc, #116]	@ (8011578 <tcp_input+0x280>)
 8011502:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011504:	4b1b      	ldr	r3, [pc, #108]	@ (8011574 <tcp_input+0x27c>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	f003 0303 	and.w	r3, r3, #3
 801150c:	2b00      	cmp	r3, #0
 801150e:	d00c      	beq.n	801152a <tcp_input+0x232>
    tcplen++;
 8011510:	4b19      	ldr	r3, [pc, #100]	@ (8011578 <tcp_input+0x280>)
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	3301      	adds	r3, #1
 8011516:	b29a      	uxth	r2, r3
 8011518:	4b17      	ldr	r3, [pc, #92]	@ (8011578 <tcp_input+0x280>)
 801151a:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	891a      	ldrh	r2, [r3, #8]
 8011520:	4b15      	ldr	r3, [pc, #84]	@ (8011578 <tcp_input+0x280>)
 8011522:	881b      	ldrh	r3, [r3, #0]
 8011524:	429a      	cmp	r2, r3
 8011526:	f200 82eb 	bhi.w	8011b00 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801152a:	2300      	movs	r3, #0
 801152c:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801152e:	4b13      	ldr	r3, [pc, #76]	@ (801157c <tcp_input+0x284>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	61bb      	str	r3, [r7, #24]
 8011534:	e09b      	b.n	801166e <tcp_input+0x376>
 8011536:	bf00      	nop
 8011538:	0801f050 	.word	0x0801f050
 801153c:	0801f084 	.word	0x0801f084
 8011540:	0801f09c 	.word	0x0801f09c
 8011544:	20013d88 	.word	0x20013d88
 8011548:	2000a2e8 	.word	0x2000a2e8
 801154c:	2000a2fc 	.word	0x2000a2fc
 8011550:	2000a2f8 	.word	0x2000a2f8
 8011554:	20013d8c 	.word	0x20013d8c
 8011558:	20013d90 	.word	0x20013d90
 801155c:	20013d8e 	.word	0x20013d8e
 8011560:	0801f0c4 	.word	0x0801f0c4
 8011564:	0801f0d4 	.word	0x0801f0d4
 8011568:	0801f0e0 	.word	0x0801f0e0
 801156c:	20013d98 	.word	0x20013d98
 8011570:	20013d9c 	.word	0x20013d9c
 8011574:	20013da4 	.word	0x20013da4
 8011578:	20013da2 	.word	0x20013da2
 801157c:	20013d68 	.word	0x20013d68
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	7d1b      	ldrb	r3, [r3, #20]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d105      	bne.n	8011594 <tcp_input+0x29c>
 8011588:	4b88      	ldr	r3, [pc, #544]	@ (80117ac <tcp_input+0x4b4>)
 801158a:	22fb      	movs	r2, #251	@ 0xfb
 801158c:	4988      	ldr	r1, [pc, #544]	@ (80117b0 <tcp_input+0x4b8>)
 801158e:	4889      	ldr	r0, [pc, #548]	@ (80117b4 <tcp_input+0x4bc>)
 8011590:	f009 fe0e 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	7d1b      	ldrb	r3, [r3, #20]
 8011598:	2b0a      	cmp	r3, #10
 801159a:	d105      	bne.n	80115a8 <tcp_input+0x2b0>
 801159c:	4b83      	ldr	r3, [pc, #524]	@ (80117ac <tcp_input+0x4b4>)
 801159e:	22fc      	movs	r2, #252	@ 0xfc
 80115a0:	4985      	ldr	r1, [pc, #532]	@ (80117b8 <tcp_input+0x4c0>)
 80115a2:	4884      	ldr	r0, [pc, #528]	@ (80117b4 <tcp_input+0x4bc>)
 80115a4:	f009 fe04 	bl	801b1b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80115a8:	69bb      	ldr	r3, [r7, #24]
 80115aa:	7d1b      	ldrb	r3, [r3, #20]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d105      	bne.n	80115bc <tcp_input+0x2c4>
 80115b0:	4b7e      	ldr	r3, [pc, #504]	@ (80117ac <tcp_input+0x4b4>)
 80115b2:	22fd      	movs	r2, #253	@ 0xfd
 80115b4:	4981      	ldr	r1, [pc, #516]	@ (80117bc <tcp_input+0x4c4>)
 80115b6:	487f      	ldr	r0, [pc, #508]	@ (80117b4 <tcp_input+0x4bc>)
 80115b8:	f009 fdfa 	bl	801b1b0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115bc:	69bb      	ldr	r3, [r7, #24]
 80115be:	7a1b      	ldrb	r3, [r3, #8]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d00c      	beq.n	80115de <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115c4:	69bb      	ldr	r3, [r7, #24]
 80115c6:	7a1a      	ldrb	r2, [r3, #8]
 80115c8:	4b7d      	ldr	r3, [pc, #500]	@ (80117c0 <tcp_input+0x4c8>)
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80115d0:	3301      	adds	r3, #1
 80115d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d002      	beq.n	80115de <tcp_input+0x2e6>
      prev = pcb;
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	61fb      	str	r3, [r7, #28]
      continue;
 80115dc:	e044      	b.n	8011668 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	8b1a      	ldrh	r2, [r3, #24]
 80115e2:	4b78      	ldr	r3, [pc, #480]	@ (80117c4 <tcp_input+0x4cc>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d13a      	bne.n	8011664 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	8ada      	ldrh	r2, [r3, #22]
 80115f2:	4b74      	ldr	r3, [pc, #464]	@ (80117c4 <tcp_input+0x4cc>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	885b      	ldrh	r3, [r3, #2]
 80115f8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d132      	bne.n	8011664 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	685a      	ldr	r2, [r3, #4]
 8011602:	4b6f      	ldr	r3, [pc, #444]	@ (80117c0 <tcp_input+0x4c8>)
 8011604:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011606:	429a      	cmp	r2, r3
 8011608:	d12c      	bne.n	8011664 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	4b6c      	ldr	r3, [pc, #432]	@ (80117c0 <tcp_input+0x4c8>)
 8011610:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011612:	429a      	cmp	r2, r3
 8011614:	d126      	bne.n	8011664 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	69ba      	ldr	r2, [r7, #24]
 801161c:	429a      	cmp	r2, r3
 801161e:	d106      	bne.n	801162e <tcp_input+0x336>
 8011620:	4b62      	ldr	r3, [pc, #392]	@ (80117ac <tcp_input+0x4b4>)
 8011622:	f240 120d 	movw	r2, #269	@ 0x10d
 8011626:	4968      	ldr	r1, [pc, #416]	@ (80117c8 <tcp_input+0x4d0>)
 8011628:	4862      	ldr	r0, [pc, #392]	@ (80117b4 <tcp_input+0x4bc>)
 801162a:	f009 fdc1 	bl	801b1b0 <iprintf>
      if (prev != NULL) {
 801162e:	69fb      	ldr	r3, [r7, #28]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00a      	beq.n	801164a <tcp_input+0x352>
        prev->next = pcb->next;
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	68da      	ldr	r2, [r3, #12]
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801163c:	4b63      	ldr	r3, [pc, #396]	@ (80117cc <tcp_input+0x4d4>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011644:	4a61      	ldr	r2, [pc, #388]	@ (80117cc <tcp_input+0x4d4>)
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801164a:	69bb      	ldr	r3, [r7, #24]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	69ba      	ldr	r2, [r7, #24]
 8011650:	429a      	cmp	r2, r3
 8011652:	d110      	bne.n	8011676 <tcp_input+0x37e>
 8011654:	4b55      	ldr	r3, [pc, #340]	@ (80117ac <tcp_input+0x4b4>)
 8011656:	f240 1215 	movw	r2, #277	@ 0x115
 801165a:	495d      	ldr	r1, [pc, #372]	@ (80117d0 <tcp_input+0x4d8>)
 801165c:	4855      	ldr	r0, [pc, #340]	@ (80117b4 <tcp_input+0x4bc>)
 801165e:	f009 fda7 	bl	801b1b0 <iprintf>
      break;
 8011662:	e008      	b.n	8011676 <tcp_input+0x37e>
    }
    prev = pcb;
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	61bb      	str	r3, [r7, #24]
 801166e:	69bb      	ldr	r3, [r7, #24]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d185      	bne.n	8011580 <tcp_input+0x288>
 8011674:	e000      	b.n	8011678 <tcp_input+0x380>
      break;
 8011676:	bf00      	nop
  }

  if (pcb == NULL) {
 8011678:	69bb      	ldr	r3, [r7, #24]
 801167a:	2b00      	cmp	r3, #0
 801167c:	f040 80b0 	bne.w	80117e0 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011680:	4b54      	ldr	r3, [pc, #336]	@ (80117d4 <tcp_input+0x4dc>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	61bb      	str	r3, [r7, #24]
 8011686:	e03f      	b.n	8011708 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	7d1b      	ldrb	r3, [r3, #20]
 801168c:	2b0a      	cmp	r3, #10
 801168e:	d006      	beq.n	801169e <tcp_input+0x3a6>
 8011690:	4b46      	ldr	r3, [pc, #280]	@ (80117ac <tcp_input+0x4b4>)
 8011692:	f240 121f 	movw	r2, #287	@ 0x11f
 8011696:	4950      	ldr	r1, [pc, #320]	@ (80117d8 <tcp_input+0x4e0>)
 8011698:	4846      	ldr	r0, [pc, #280]	@ (80117b4 <tcp_input+0x4bc>)
 801169a:	f009 fd89 	bl	801b1b0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	7a1b      	ldrb	r3, [r3, #8]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d009      	beq.n	80116ba <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	7a1a      	ldrb	r2, [r3, #8]
 80116aa:	4b45      	ldr	r3, [pc, #276]	@ (80117c0 <tcp_input+0x4c8>)
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80116b2:	3301      	adds	r3, #1
 80116b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d122      	bne.n	8011700 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	8b1a      	ldrh	r2, [r3, #24]
 80116be:	4b41      	ldr	r3, [pc, #260]	@ (80117c4 <tcp_input+0x4cc>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d11b      	bne.n	8011702 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	8ada      	ldrh	r2, [r3, #22]
 80116ce:	4b3d      	ldr	r3, [pc, #244]	@ (80117c4 <tcp_input+0x4cc>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	885b      	ldrh	r3, [r3, #2]
 80116d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d113      	bne.n	8011702 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	685a      	ldr	r2, [r3, #4]
 80116de:	4b38      	ldr	r3, [pc, #224]	@ (80117c0 <tcp_input+0x4c8>)
 80116e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d10d      	bne.n	8011702 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	4b35      	ldr	r3, [pc, #212]	@ (80117c0 <tcp_input+0x4c8>)
 80116ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d107      	bne.n	8011702 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80116f2:	69b8      	ldr	r0, [r7, #24]
 80116f4:	f000 fb5e 	bl	8011db4 <tcp_timewait_input>
        }
        pbuf_free(p);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7fd ff1b 	bl	800f534 <pbuf_free>
        return;
 80116fe:	e205      	b.n	8011b0c <tcp_input+0x814>
        continue;
 8011700:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011702:	69bb      	ldr	r3, [r7, #24]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	61bb      	str	r3, [r7, #24]
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1bc      	bne.n	8011688 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801170e:	2300      	movs	r3, #0
 8011710:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011712:	4b32      	ldr	r3, [pc, #200]	@ (80117dc <tcp_input+0x4e4>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	617b      	str	r3, [r7, #20]
 8011718:	e02a      	b.n	8011770 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	7a1b      	ldrb	r3, [r3, #8]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d00c      	beq.n	801173c <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	7a1a      	ldrb	r2, [r3, #8]
 8011726:	4b26      	ldr	r3, [pc, #152]	@ (80117c0 <tcp_input+0x4c8>)
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801172e:	3301      	adds	r3, #1
 8011730:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011732:	429a      	cmp	r2, r3
 8011734:	d002      	beq.n	801173c <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	61fb      	str	r3, [r7, #28]
        continue;
 801173a:	e016      	b.n	801176a <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	8ada      	ldrh	r2, [r3, #22]
 8011740:	4b20      	ldr	r3, [pc, #128]	@ (80117c4 <tcp_input+0x4cc>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	885b      	ldrh	r3, [r3, #2]
 8011746:	b29b      	uxth	r3, r3
 8011748:	429a      	cmp	r2, r3
 801174a:	d10c      	bne.n	8011766 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	4b1b      	ldr	r3, [pc, #108]	@ (80117c0 <tcp_input+0x4c8>)
 8011752:	695b      	ldr	r3, [r3, #20]
 8011754:	429a      	cmp	r2, r3
 8011756:	d00f      	beq.n	8011778 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00d      	beq.n	801177a <tcp_input+0x482>
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d009      	beq.n	801177a <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	617b      	str	r3, [r7, #20]
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1d1      	bne.n	801171a <tcp_input+0x422>
 8011776:	e000      	b.n	801177a <tcp_input+0x482>
            break;
 8011778:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d02f      	beq.n	80117e0 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00a      	beq.n	801179c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	68da      	ldr	r2, [r3, #12]
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801178e:	4b13      	ldr	r3, [pc, #76]	@ (80117dc <tcp_input+0x4e4>)
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011796:	4a11      	ldr	r2, [pc, #68]	@ (80117dc <tcp_input+0x4e4>)
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801179c:	6978      	ldr	r0, [r7, #20]
 801179e:	f000 fa0b 	bl	8011bb8 <tcp_listen_input>
      }
      pbuf_free(p);
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7fd fec6 	bl	800f534 <pbuf_free>
      return;
 80117a8:	e1b0      	b.n	8011b0c <tcp_input+0x814>
 80117aa:	bf00      	nop
 80117ac:	0801f050 	.word	0x0801f050
 80117b0:	0801f100 	.word	0x0801f100
 80117b4:	0801f09c 	.word	0x0801f09c
 80117b8:	0801f128 	.word	0x0801f128
 80117bc:	0801f154 	.word	0x0801f154
 80117c0:	2000a2e8 	.word	0x2000a2e8
 80117c4:	20013d88 	.word	0x20013d88
 80117c8:	0801f17c 	.word	0x0801f17c
 80117cc:	20013d68 	.word	0x20013d68
 80117d0:	0801f1a8 	.word	0x0801f1a8
 80117d4:	20013d6c 	.word	0x20013d6c
 80117d8:	0801f1d4 	.word	0x0801f1d4
 80117dc:	20013d64 	.word	0x20013d64
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80117e0:	69bb      	ldr	r3, [r7, #24]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 8158 	beq.w	8011a98 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80117e8:	4b95      	ldr	r3, [pc, #596]	@ (8011a40 <tcp_input+0x748>)
 80117ea:	2200      	movs	r2, #0
 80117ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	891a      	ldrh	r2, [r3, #8]
 80117f2:	4b93      	ldr	r3, [pc, #588]	@ (8011a40 <tcp_input+0x748>)
 80117f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80117f6:	4a92      	ldr	r2, [pc, #584]	@ (8011a40 <tcp_input+0x748>)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80117fc:	4b91      	ldr	r3, [pc, #580]	@ (8011a44 <tcp_input+0x74c>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	4a8f      	ldr	r2, [pc, #572]	@ (8011a40 <tcp_input+0x748>)
 8011802:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8011804:	4b90      	ldr	r3, [pc, #576]	@ (8011a48 <tcp_input+0x750>)
 8011806:	2200      	movs	r2, #0
 8011808:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801180a:	4b90      	ldr	r3, [pc, #576]	@ (8011a4c <tcp_input+0x754>)
 801180c:	2200      	movs	r2, #0
 801180e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011810:	4b8f      	ldr	r3, [pc, #572]	@ (8011a50 <tcp_input+0x758>)
 8011812:	2200      	movs	r2, #0
 8011814:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011816:	4b8f      	ldr	r3, [pc, #572]	@ (8011a54 <tcp_input+0x75c>)
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	f003 0308 	and.w	r3, r3, #8
 801181e:	2b00      	cmp	r3, #0
 8011820:	d006      	beq.n	8011830 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	7b5b      	ldrb	r3, [r3, #13]
 8011826:	f043 0301 	orr.w	r3, r3, #1
 801182a:	b2da      	uxtb	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011834:	2b00      	cmp	r3, #0
 8011836:	d017      	beq.n	8011868 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011838:	69b8      	ldr	r0, [r7, #24]
 801183a:	f7ff f915 	bl	8010a68 <tcp_process_refused_data>
 801183e:	4603      	mov	r3, r0
 8011840:	f113 0f0d 	cmn.w	r3, #13
 8011844:	d007      	beq.n	8011856 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00c      	beq.n	8011868 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801184e:	4b82      	ldr	r3, [pc, #520]	@ (8011a58 <tcp_input+0x760>)
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d008      	beq.n	8011868 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801185a:	2b00      	cmp	r3, #0
 801185c:	f040 80e4 	bne.w	8011a28 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011860:	69b8      	ldr	r0, [r7, #24]
 8011862:	f003 f9e1 	bl	8014c28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011866:	e0df      	b.n	8011a28 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8011868:	4a7c      	ldr	r2, [pc, #496]	@ (8011a5c <tcp_input+0x764>)
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801186e:	69b8      	ldr	r0, [r7, #24]
 8011870:	f000 fb1a 	bl	8011ea8 <tcp_process>
 8011874:	4603      	mov	r3, r0
 8011876:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011878:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801187c:	f113 0f0d 	cmn.w	r3, #13
 8011880:	f000 80d4 	beq.w	8011a2c <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8011884:	4b71      	ldr	r3, [pc, #452]	@ (8011a4c <tcp_input+0x754>)
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	f003 0308 	and.w	r3, r3, #8
 801188c:	2b00      	cmp	r3, #0
 801188e:	d015      	beq.n	80118bc <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011896:	2b00      	cmp	r3, #0
 8011898:	d008      	beq.n	80118ac <tcp_input+0x5b4>
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118a0:	69ba      	ldr	r2, [r7, #24]
 80118a2:	6912      	ldr	r2, [r2, #16]
 80118a4:	f06f 010d 	mvn.w	r1, #13
 80118a8:	4610      	mov	r0, r2
 80118aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80118ac:	69b9      	ldr	r1, [r7, #24]
 80118ae:	486c      	ldr	r0, [pc, #432]	@ (8011a60 <tcp_input+0x768>)
 80118b0:	f7ff fbaa 	bl	8011008 <tcp_pcb_remove>
        tcp_free(pcb);
 80118b4:	69b8      	ldr	r0, [r7, #24]
 80118b6:	f7fe f991 	bl	800fbdc <tcp_free>
 80118ba:	e0da      	b.n	8011a72 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 80118bc:	2300      	movs	r3, #0
 80118be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80118c0:	4b63      	ldr	r3, [pc, #396]	@ (8011a50 <tcp_input+0x758>)
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d01d      	beq.n	8011904 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80118c8:	4b61      	ldr	r3, [pc, #388]	@ (8011a50 <tcp_input+0x758>)
 80118ca:	881b      	ldrh	r3, [r3, #0]
 80118cc:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00a      	beq.n	80118ee <tcp_input+0x5f6>
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118de:	69ba      	ldr	r2, [r7, #24]
 80118e0:	6910      	ldr	r0, [r2, #16]
 80118e2:	897a      	ldrh	r2, [r7, #10]
 80118e4:	69b9      	ldr	r1, [r7, #24]
 80118e6:	4798      	blx	r3
 80118e8:	4603      	mov	r3, r0
 80118ea:	74fb      	strb	r3, [r7, #19]
 80118ec:	e001      	b.n	80118f2 <tcp_input+0x5fa>
 80118ee:	2300      	movs	r3, #0
 80118f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80118f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118f6:	f113 0f0d 	cmn.w	r3, #13
 80118fa:	f000 8099 	beq.w	8011a30 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 80118fe:	4b54      	ldr	r3, [pc, #336]	@ (8011a50 <tcp_input+0x758>)
 8011900:	2200      	movs	r2, #0
 8011902:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011904:	69b8      	ldr	r0, [r7, #24]
 8011906:	f000 f917 	bl	8011b38 <tcp_input_delayed_close>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	f040 8091 	bne.w	8011a34 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011912:	4b4d      	ldr	r3, [pc, #308]	@ (8011a48 <tcp_input+0x750>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d041      	beq.n	801199e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801191e:	2b00      	cmp	r3, #0
 8011920:	d006      	beq.n	8011930 <tcp_input+0x638>
 8011922:	4b50      	ldr	r3, [pc, #320]	@ (8011a64 <tcp_input+0x76c>)
 8011924:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011928:	494f      	ldr	r1, [pc, #316]	@ (8011a68 <tcp_input+0x770>)
 801192a:	4850      	ldr	r0, [pc, #320]	@ (8011a6c <tcp_input+0x774>)
 801192c:	f009 fc40 	bl	801b1b0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	8b5b      	ldrh	r3, [r3, #26]
 8011934:	f003 0310 	and.w	r3, r3, #16
 8011938:	2b00      	cmp	r3, #0
 801193a:	d008      	beq.n	801194e <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801193c:	4b42      	ldr	r3, [pc, #264]	@ (8011a48 <tcp_input+0x750>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	4618      	mov	r0, r3
 8011942:	f7fd fdf7 	bl	800f534 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011946:	69b8      	ldr	r0, [r7, #24]
 8011948:	f7fe fc30 	bl	80101ac <tcp_abort>
            goto aborted;
 801194c:	e091      	b.n	8011a72 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00c      	beq.n	8011972 <tcp_input+0x67a>
 8011958:	69bb      	ldr	r3, [r7, #24]
 801195a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	6918      	ldr	r0, [r3, #16]
 8011962:	4b39      	ldr	r3, [pc, #228]	@ (8011a48 <tcp_input+0x750>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	2300      	movs	r3, #0
 8011968:	69b9      	ldr	r1, [r7, #24]
 801196a:	47a0      	blx	r4
 801196c:	4603      	mov	r3, r0
 801196e:	74fb      	strb	r3, [r7, #19]
 8011970:	e008      	b.n	8011984 <tcp_input+0x68c>
 8011972:	4b35      	ldr	r3, [pc, #212]	@ (8011a48 <tcp_input+0x750>)
 8011974:	681a      	ldr	r2, [r3, #0]
 8011976:	2300      	movs	r3, #0
 8011978:	69b9      	ldr	r1, [r7, #24]
 801197a:	2000      	movs	r0, #0
 801197c:	f7ff f94c 	bl	8010c18 <tcp_recv_null>
 8011980:	4603      	mov	r3, r0
 8011982:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011988:	f113 0f0d 	cmn.w	r3, #13
 801198c:	d054      	beq.n	8011a38 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801198e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d003      	beq.n	801199e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011996:	4b2c      	ldr	r3, [pc, #176]	@ (8011a48 <tcp_input+0x750>)
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801199e:	4b2b      	ldr	r3, [pc, #172]	@ (8011a4c <tcp_input+0x754>)
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	f003 0320 	and.w	r3, r3, #32
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d031      	beq.n	8011a0e <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 80119aa:	69bb      	ldr	r3, [r7, #24]
 80119ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d009      	beq.n	80119c6 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119b6:	7b5a      	ldrb	r2, [r3, #13]
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119bc:	f042 0220 	orr.w	r2, r2, #32
 80119c0:	b2d2      	uxtb	r2, r2
 80119c2:	735a      	strb	r2, [r3, #13]
 80119c4:	e023      	b.n	8011a0e <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119ca:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d005      	beq.n	80119de <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119d6:	3301      	adds	r3, #1
 80119d8:	b29a      	uxth	r2, r3
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d00b      	beq.n	8011a00 <tcp_input+0x708>
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80119ee:	69bb      	ldr	r3, [r7, #24]
 80119f0:	6918      	ldr	r0, [r3, #16]
 80119f2:	2300      	movs	r3, #0
 80119f4:	2200      	movs	r2, #0
 80119f6:	69b9      	ldr	r1, [r7, #24]
 80119f8:	47a0      	blx	r4
 80119fa:	4603      	mov	r3, r0
 80119fc:	74fb      	strb	r3, [r7, #19]
 80119fe:	e001      	b.n	8011a04 <tcp_input+0x70c>
 8011a00:	2300      	movs	r3, #0
 8011a02:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a08:	f113 0f0d 	cmn.w	r3, #13
 8011a0c:	d016      	beq.n	8011a3c <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a0e:	4b13      	ldr	r3, [pc, #76]	@ (8011a5c <tcp_input+0x764>)
 8011a10:	2200      	movs	r2, #0
 8011a12:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011a14:	69b8      	ldr	r0, [r7, #24]
 8011a16:	f000 f88f 	bl	8011b38 <tcp_input_delayed_close>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d127      	bne.n	8011a70 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011a20:	69b8      	ldr	r0, [r7, #24]
 8011a22:	f002 facd 	bl	8013fc0 <tcp_output>
 8011a26:	e024      	b.n	8011a72 <tcp_input+0x77a>
        goto aborted;
 8011a28:	bf00      	nop
 8011a2a:	e022      	b.n	8011a72 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011a2c:	bf00      	nop
 8011a2e:	e020      	b.n	8011a72 <tcp_input+0x77a>
              goto aborted;
 8011a30:	bf00      	nop
 8011a32:	e01e      	b.n	8011a72 <tcp_input+0x77a>
          goto aborted;
 8011a34:	bf00      	nop
 8011a36:	e01c      	b.n	8011a72 <tcp_input+0x77a>
            goto aborted;
 8011a38:	bf00      	nop
 8011a3a:	e01a      	b.n	8011a72 <tcp_input+0x77a>
              goto aborted;
 8011a3c:	bf00      	nop
 8011a3e:	e018      	b.n	8011a72 <tcp_input+0x77a>
 8011a40:	20013d74 	.word	0x20013d74
 8011a44:	20013d88 	.word	0x20013d88
 8011a48:	20013da8 	.word	0x20013da8
 8011a4c:	20013da5 	.word	0x20013da5
 8011a50:	20013da0 	.word	0x20013da0
 8011a54:	20013da4 	.word	0x20013da4
 8011a58:	20013da2 	.word	0x20013da2
 8011a5c:	20013dac 	.word	0x20013dac
 8011a60:	20013d68 	.word	0x20013d68
 8011a64:	0801f050 	.word	0x0801f050
 8011a68:	0801f204 	.word	0x0801f204
 8011a6c:	0801f09c 	.word	0x0801f09c
          goto aborted;
 8011a70:	bf00      	nop
    tcp_input_pcb = NULL;
 8011a72:	4b28      	ldr	r3, [pc, #160]	@ (8011b14 <tcp_input+0x81c>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011a78:	4b27      	ldr	r3, [pc, #156]	@ (8011b18 <tcp_input+0x820>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011a7e:	4b27      	ldr	r3, [pc, #156]	@ (8011b1c <tcp_input+0x824>)
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d041      	beq.n	8011b0a <tcp_input+0x812>
      pbuf_free(inseg.p);
 8011a86:	4b25      	ldr	r3, [pc, #148]	@ (8011b1c <tcp_input+0x824>)
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fd fd52 	bl	800f534 <pbuf_free>
      inseg.p = NULL;
 8011a90:	4b22      	ldr	r3, [pc, #136]	@ (8011b1c <tcp_input+0x824>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011a96:	e038      	b.n	8011b0a <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011a98:	4b21      	ldr	r3, [pc, #132]	@ (8011b20 <tcp_input+0x828>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	899b      	ldrh	r3, [r3, #12]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7fc f825 	bl	800daf0 <lwip_htons>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	f003 0304 	and.w	r3, r3, #4
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d118      	bne.n	8011ae4 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8011b24 <tcp_input+0x82c>)
 8011ab4:	6819      	ldr	r1, [r3, #0]
 8011ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8011b28 <tcp_input+0x830>)
 8011ab8:	881b      	ldrh	r3, [r3, #0]
 8011aba:	461a      	mov	r2, r3
 8011abc:	4b1b      	ldr	r3, [pc, #108]	@ (8011b2c <tcp_input+0x834>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ac2:	4b17      	ldr	r3, [pc, #92]	@ (8011b20 <tcp_input+0x828>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ac6:	885b      	ldrh	r3, [r3, #2]
 8011ac8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011aca:	4a15      	ldr	r2, [pc, #84]	@ (8011b20 <tcp_input+0x828>)
 8011acc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ace:	8812      	ldrh	r2, [r2, #0]
 8011ad0:	b292      	uxth	r2, r2
 8011ad2:	9202      	str	r2, [sp, #8]
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	4b16      	ldr	r3, [pc, #88]	@ (8011b30 <tcp_input+0x838>)
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	4b16      	ldr	r3, [pc, #88]	@ (8011b34 <tcp_input+0x83c>)
 8011adc:	4602      	mov	r2, r0
 8011ade:	2000      	movs	r0, #0
 8011ae0:	f003 f850 	bl	8014b84 <tcp_rst>
    pbuf_free(p);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7fd fd25 	bl	800f534 <pbuf_free>
  return;
 8011aea:	e00e      	b.n	8011b0a <tcp_input+0x812>
    goto dropped;
 8011aec:	bf00      	nop
 8011aee:	e008      	b.n	8011b02 <tcp_input+0x80a>
    goto dropped;
 8011af0:	bf00      	nop
 8011af2:	e006      	b.n	8011b02 <tcp_input+0x80a>
      goto dropped;
 8011af4:	bf00      	nop
 8011af6:	e004      	b.n	8011b02 <tcp_input+0x80a>
    goto dropped;
 8011af8:	bf00      	nop
 8011afa:	e002      	b.n	8011b02 <tcp_input+0x80a>
      goto dropped;
 8011afc:	bf00      	nop
 8011afe:	e000      	b.n	8011b02 <tcp_input+0x80a>
      goto dropped;
 8011b00:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7fd fd16 	bl	800f534 <pbuf_free>
 8011b08:	e000      	b.n	8011b0c <tcp_input+0x814>
  return;
 8011b0a:	bf00      	nop
}
 8011b0c:	3724      	adds	r7, #36	@ 0x24
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd90      	pop	{r4, r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20013dac 	.word	0x20013dac
 8011b18:	20013da8 	.word	0x20013da8
 8011b1c:	20013d74 	.word	0x20013d74
 8011b20:	20013d88 	.word	0x20013d88
 8011b24:	20013d9c 	.word	0x20013d9c
 8011b28:	20013da2 	.word	0x20013da2
 8011b2c:	20013d98 	.word	0x20013d98
 8011b30:	2000a2f8 	.word	0x2000a2f8
 8011b34:	2000a2fc 	.word	0x2000a2fc

08011b38 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <tcp_input_delayed_close+0x1c>
 8011b46:	4b17      	ldr	r3, [pc, #92]	@ (8011ba4 <tcp_input_delayed_close+0x6c>)
 8011b48:	f240 225a 	movw	r2, #602	@ 0x25a
 8011b4c:	4916      	ldr	r1, [pc, #88]	@ (8011ba8 <tcp_input_delayed_close+0x70>)
 8011b4e:	4817      	ldr	r0, [pc, #92]	@ (8011bac <tcp_input_delayed_close+0x74>)
 8011b50:	f009 fb2e 	bl	801b1b0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011b54:	4b16      	ldr	r3, [pc, #88]	@ (8011bb0 <tcp_input_delayed_close+0x78>)
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	f003 0310 	and.w	r3, r3, #16
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d01c      	beq.n	8011b9a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	8b5b      	ldrh	r3, [r3, #26]
 8011b64:	f003 0310 	and.w	r3, r3, #16
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d10d      	bne.n	8011b88 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d008      	beq.n	8011b88 <tcp_input_delayed_close+0x50>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	6912      	ldr	r2, [r2, #16]
 8011b80:	f06f 010e 	mvn.w	r1, #14
 8011b84:	4610      	mov	r0, r2
 8011b86:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011b88:	6879      	ldr	r1, [r7, #4]
 8011b8a:	480a      	ldr	r0, [pc, #40]	@ (8011bb4 <tcp_input_delayed_close+0x7c>)
 8011b8c:	f7ff fa3c 	bl	8011008 <tcp_pcb_remove>
    tcp_free(pcb);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7fe f823 	bl	800fbdc <tcp_free>
    return 1;
 8011b96:	2301      	movs	r3, #1
 8011b98:	e000      	b.n	8011b9c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	0801f050 	.word	0x0801f050
 8011ba8:	0801f220 	.word	0x0801f220
 8011bac:	0801f09c 	.word	0x0801f09c
 8011bb0:	20013da5 	.word	0x20013da5
 8011bb4:	20013d68 	.word	0x20013d68

08011bb8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011bb8:	b590      	push	{r4, r7, lr}
 8011bba:	b08b      	sub	sp, #44	@ 0x2c
 8011bbc:	af04      	add	r7, sp, #16
 8011bbe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8011d80 <tcp_listen_input+0x1c8>)
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	f003 0304 	and.w	r3, r3, #4
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	f040 80d2 	bne.w	8011d72 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d106      	bne.n	8011be2 <tcp_listen_input+0x2a>
 8011bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8011d84 <tcp_listen_input+0x1cc>)
 8011bd6:	f240 2281 	movw	r2, #641	@ 0x281
 8011bda:	496b      	ldr	r1, [pc, #428]	@ (8011d88 <tcp_listen_input+0x1d0>)
 8011bdc:	486b      	ldr	r0, [pc, #428]	@ (8011d8c <tcp_listen_input+0x1d4>)
 8011bde:	f009 fae7 	bl	801b1b0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011be2:	4b67      	ldr	r3, [pc, #412]	@ (8011d80 <tcp_listen_input+0x1c8>)
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	f003 0310 	and.w	r3, r3, #16
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d019      	beq.n	8011c22 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bee:	4b68      	ldr	r3, [pc, #416]	@ (8011d90 <tcp_listen_input+0x1d8>)
 8011bf0:	6819      	ldr	r1, [r3, #0]
 8011bf2:	4b68      	ldr	r3, [pc, #416]	@ (8011d94 <tcp_listen_input+0x1dc>)
 8011bf4:	881b      	ldrh	r3, [r3, #0]
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	4b67      	ldr	r3, [pc, #412]	@ (8011d98 <tcp_listen_input+0x1e0>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bfe:	4b67      	ldr	r3, [pc, #412]	@ (8011d9c <tcp_listen_input+0x1e4>)
 8011c00:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c02:	885b      	ldrh	r3, [r3, #2]
 8011c04:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c06:	4a65      	ldr	r2, [pc, #404]	@ (8011d9c <tcp_listen_input+0x1e4>)
 8011c08:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c0a:	8812      	ldrh	r2, [r2, #0]
 8011c0c:	b292      	uxth	r2, r2
 8011c0e:	9202      	str	r2, [sp, #8]
 8011c10:	9301      	str	r3, [sp, #4]
 8011c12:	4b63      	ldr	r3, [pc, #396]	@ (8011da0 <tcp_listen_input+0x1e8>)
 8011c14:	9300      	str	r3, [sp, #0]
 8011c16:	4b63      	ldr	r3, [pc, #396]	@ (8011da4 <tcp_listen_input+0x1ec>)
 8011c18:	4602      	mov	r2, r0
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f002 ffb2 	bl	8014b84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011c20:	e0a9      	b.n	8011d76 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011c22:	4b57      	ldr	r3, [pc, #348]	@ (8011d80 <tcp_listen_input+0x1c8>)
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	f003 0302 	and.w	r3, r3, #2
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	f000 80a3 	beq.w	8011d76 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	7d5b      	ldrb	r3, [r3, #21]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff f913 	bl	8010e60 <tcp_alloc>
 8011c3a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d111      	bne.n	8011c66 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	699b      	ldr	r3, [r3, #24]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00a      	beq.n	8011c60 <tcp_listen_input+0xa8>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	699b      	ldr	r3, [r3, #24]
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	6910      	ldr	r0, [r2, #16]
 8011c52:	f04f 32ff 	mov.w	r2, #4294967295
 8011c56:	2100      	movs	r1, #0
 8011c58:	4798      	blx	r3
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	73bb      	strb	r3, [r7, #14]
      return;
 8011c5e:	e08b      	b.n	8011d78 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c60:	23f0      	movs	r3, #240	@ 0xf0
 8011c62:	73bb      	strb	r3, [r7, #14]
      return;
 8011c64:	e088      	b.n	8011d78 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011c66:	4b50      	ldr	r3, [pc, #320]	@ (8011da8 <tcp_listen_input+0x1f0>)
 8011c68:	695a      	ldr	r2, [r3, #20]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8011da8 <tcp_listen_input+0x1f0>)
 8011c70:	691a      	ldr	r2, [r3, #16]
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	8ada      	ldrh	r2, [r3, #22]
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011c7e:	4b47      	ldr	r3, [pc, #284]	@ (8011d9c <tcp_listen_input+0x1e4>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	881b      	ldrh	r3, [r3, #0]
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2203      	movs	r2, #3
 8011c8e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011c90:	4b41      	ldr	r3, [pc, #260]	@ (8011d98 <tcp_listen_input+0x1e0>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	1c5a      	adds	r2, r3, #1
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011ca2:	6978      	ldr	r0, [r7, #20]
 8011ca4:	f7ff fa44 	bl	8011130 <tcp_next_iss>
 8011ca8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	693a      	ldr	r2, [r7, #16]
 8011cae:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	693a      	ldr	r2, [r7, #16]
 8011cb4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	693a      	ldr	r2, [r7, #16]
 8011cba:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011cc2:	4b35      	ldr	r3, [pc, #212]	@ (8011d98 <tcp_listen_input+0x1e0>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	1e5a      	subs	r2, r3, #1
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	691a      	ldr	r2, [r3, #16]
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	7a5b      	ldrb	r3, [r3, #9]
 8011cde:	f003 030c 	and.w	r3, r3, #12
 8011ce2:	b2da      	uxtb	r2, r3
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	7a1a      	ldrb	r2, [r3, #8]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8011dac <tcp_listen_input+0x1f4>)
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	60da      	str	r2, [r3, #12]
 8011cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8011dac <tcp_listen_input+0x1f4>)
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	6013      	str	r3, [r2, #0]
 8011cfe:	f003 f903 	bl	8014f08 <tcp_timer_needed>
 8011d02:	4b2b      	ldr	r3, [pc, #172]	@ (8011db0 <tcp_listen_input+0x1f8>)
 8011d04:	2201      	movs	r2, #1
 8011d06:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011d08:	6978      	ldr	r0, [r7, #20]
 8011d0a:	f001 fd8b 	bl	8013824 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011d0e:	4b23      	ldr	r3, [pc, #140]	@ (8011d9c <tcp_listen_input+0x1e4>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	89db      	ldrh	r3, [r3, #14]
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	3304      	adds	r3, #4
 8011d30:	4618      	mov	r0, r3
 8011d32:	f006 fff9 	bl	8018d28 <ip4_route>
 8011d36:	4601      	mov	r1, r0
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	3304      	adds	r3, #4
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f7ff fa1c 	bl	801117c <tcp_eff_send_mss_netif>
 8011d44:	4603      	mov	r3, r0
 8011d46:	461a      	mov	r2, r3
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011d4c:	2112      	movs	r1, #18
 8011d4e:	6978      	ldr	r0, [r7, #20]
 8011d50:	f002 f848 	bl	8013de4 <tcp_enqueue_flags>
 8011d54:	4603      	mov	r3, r0
 8011d56:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d004      	beq.n	8011d6a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011d60:	2100      	movs	r1, #0
 8011d62:	6978      	ldr	r0, [r7, #20]
 8011d64:	f7fe f964 	bl	8010030 <tcp_abandon>
      return;
 8011d68:	e006      	b.n	8011d78 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011d6a:	6978      	ldr	r0, [r7, #20]
 8011d6c:	f002 f928 	bl	8013fc0 <tcp_output>
  return;
 8011d70:	e001      	b.n	8011d76 <tcp_listen_input+0x1be>
    return;
 8011d72:	bf00      	nop
 8011d74:	e000      	b.n	8011d78 <tcp_listen_input+0x1c0>
  return;
 8011d76:	bf00      	nop
}
 8011d78:	371c      	adds	r7, #28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd90      	pop	{r4, r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	20013da4 	.word	0x20013da4
 8011d84:	0801f050 	.word	0x0801f050
 8011d88:	0801f248 	.word	0x0801f248
 8011d8c:	0801f09c 	.word	0x0801f09c
 8011d90:	20013d9c 	.word	0x20013d9c
 8011d94:	20013da2 	.word	0x20013da2
 8011d98:	20013d98 	.word	0x20013d98
 8011d9c:	20013d88 	.word	0x20013d88
 8011da0:	2000a2f8 	.word	0x2000a2f8
 8011da4:	2000a2fc 	.word	0x2000a2fc
 8011da8:	2000a2e8 	.word	0x2000a2e8
 8011dac:	20013d68 	.word	0x20013d68
 8011db0:	20013d70 	.word	0x20013d70

08011db4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af04      	add	r7, sp, #16
 8011dba:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8011e7c <tcp_timewait_input+0xc8>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f003 0304 	and.w	r3, r3, #4
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d153      	bne.n	8011e70 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d106      	bne.n	8011ddc <tcp_timewait_input+0x28>
 8011dce:	4b2c      	ldr	r3, [pc, #176]	@ (8011e80 <tcp_timewait_input+0xcc>)
 8011dd0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011dd4:	492b      	ldr	r1, [pc, #172]	@ (8011e84 <tcp_timewait_input+0xd0>)
 8011dd6:	482c      	ldr	r0, [pc, #176]	@ (8011e88 <tcp_timewait_input+0xd4>)
 8011dd8:	f009 f9ea 	bl	801b1b0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011ddc:	4b27      	ldr	r3, [pc, #156]	@ (8011e7c <tcp_timewait_input+0xc8>)
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	f003 0302 	and.w	r3, r3, #2
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d02a      	beq.n	8011e3e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011de8:	4b28      	ldr	r3, [pc, #160]	@ (8011e8c <tcp_timewait_input+0xd8>)
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011df0:	1ad3      	subs	r3, r2, r3
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	db2d      	blt.n	8011e52 <tcp_timewait_input+0x9e>
 8011df6:	4b25      	ldr	r3, [pc, #148]	@ (8011e8c <tcp_timewait_input+0xd8>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dfe:	6879      	ldr	r1, [r7, #4]
 8011e00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011e02:	440b      	add	r3, r1
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	dc23      	bgt.n	8011e52 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e0a:	4b21      	ldr	r3, [pc, #132]	@ (8011e90 <tcp_timewait_input+0xdc>)
 8011e0c:	6819      	ldr	r1, [r3, #0]
 8011e0e:	4b21      	ldr	r3, [pc, #132]	@ (8011e94 <tcp_timewait_input+0xe0>)
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	4b1d      	ldr	r3, [pc, #116]	@ (8011e8c <tcp_timewait_input+0xd8>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8011e98 <tcp_timewait_input+0xe4>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e1e:	885b      	ldrh	r3, [r3, #2]
 8011e20:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e22:	4a1d      	ldr	r2, [pc, #116]	@ (8011e98 <tcp_timewait_input+0xe4>)
 8011e24:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e26:	8812      	ldrh	r2, [r2, #0]
 8011e28:	b292      	uxth	r2, r2
 8011e2a:	9202      	str	r2, [sp, #8]
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8011e9c <tcp_timewait_input+0xe8>)
 8011e30:	9300      	str	r3, [sp, #0]
 8011e32:	4b1b      	ldr	r3, [pc, #108]	@ (8011ea0 <tcp_timewait_input+0xec>)
 8011e34:	4602      	mov	r2, r0
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f002 fea4 	bl	8014b84 <tcp_rst>
      return;
 8011e3c:	e01b      	b.n	8011e76 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011e7c <tcp_timewait_input+0xc8>)
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	f003 0301 	and.w	r3, r3, #1
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d003      	beq.n	8011e52 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011e4a:	4b16      	ldr	r3, [pc, #88]	@ (8011ea4 <tcp_timewait_input+0xf0>)
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011e52:	4b10      	ldr	r3, [pc, #64]	@ (8011e94 <tcp_timewait_input+0xe0>)
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d00c      	beq.n	8011e74 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8b5b      	ldrh	r3, [r3, #26]
 8011e5e:	f043 0302 	orr.w	r3, r3, #2
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f002 f8a9 	bl	8013fc0 <tcp_output>
  }
  return;
 8011e6e:	e001      	b.n	8011e74 <tcp_timewait_input+0xc0>
    return;
 8011e70:	bf00      	nop
 8011e72:	e000      	b.n	8011e76 <tcp_timewait_input+0xc2>
  return;
 8011e74:	bf00      	nop
}
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	20013da4 	.word	0x20013da4
 8011e80:	0801f050 	.word	0x0801f050
 8011e84:	0801f268 	.word	0x0801f268
 8011e88:	0801f09c 	.word	0x0801f09c
 8011e8c:	20013d98 	.word	0x20013d98
 8011e90:	20013d9c 	.word	0x20013d9c
 8011e94:	20013da2 	.word	0x20013da2
 8011e98:	20013d88 	.word	0x20013d88
 8011e9c:	2000a2f8 	.word	0x2000a2f8
 8011ea0:	2000a2fc 	.word	0x2000a2fc
 8011ea4:	20013d5c 	.word	0x20013d5c

08011ea8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011ea8:	b590      	push	{r4, r7, lr}
 8011eaa:	b08d      	sub	sp, #52	@ 0x34
 8011eac:	af04      	add	r7, sp, #16
 8011eae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d106      	bne.n	8011ecc <tcp_process+0x24>
 8011ebe:	4b9d      	ldr	r3, [pc, #628]	@ (8012134 <tcp_process+0x28c>)
 8011ec0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011ec4:	499c      	ldr	r1, [pc, #624]	@ (8012138 <tcp_process+0x290>)
 8011ec6:	489d      	ldr	r0, [pc, #628]	@ (801213c <tcp_process+0x294>)
 8011ec8:	f009 f972 	bl	801b1b0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011ecc:	4b9c      	ldr	r3, [pc, #624]	@ (8012140 <tcp_process+0x298>)
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	f003 0304 	and.w	r3, r3, #4
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d04e      	beq.n	8011f76 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	7d1b      	ldrb	r3, [r3, #20]
 8011edc:	2b02      	cmp	r3, #2
 8011ede:	d108      	bne.n	8011ef2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ee4:	4b97      	ldr	r3, [pc, #604]	@ (8012144 <tcp_process+0x29c>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d123      	bne.n	8011f34 <tcp_process+0x8c>
        acceptable = 1;
 8011eec:	2301      	movs	r3, #1
 8011eee:	77fb      	strb	r3, [r7, #31]
 8011ef0:	e020      	b.n	8011f34 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ef6:	4b94      	ldr	r3, [pc, #592]	@ (8012148 <tcp_process+0x2a0>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d102      	bne.n	8011f04 <tcp_process+0x5c>
        acceptable = 1;
 8011efe:	2301      	movs	r3, #1
 8011f00:	77fb      	strb	r3, [r7, #31]
 8011f02:	e017      	b.n	8011f34 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f04:	4b90      	ldr	r3, [pc, #576]	@ (8012148 <tcp_process+0x2a0>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	db10      	blt.n	8011f34 <tcp_process+0x8c>
 8011f12:	4b8d      	ldr	r3, [pc, #564]	@ (8012148 <tcp_process+0x2a0>)
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f1a:	6879      	ldr	r1, [r7, #4]
 8011f1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011f1e:	440b      	add	r3, r1
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	dc06      	bgt.n	8011f34 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	8b5b      	ldrh	r3, [r3, #26]
 8011f2a:	f043 0302 	orr.w	r3, r3, #2
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011f34:	7ffb      	ldrb	r3, [r7, #31]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d01b      	beq.n	8011f72 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	7d1b      	ldrb	r3, [r3, #20]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d106      	bne.n	8011f50 <tcp_process+0xa8>
 8011f42:	4b7c      	ldr	r3, [pc, #496]	@ (8012134 <tcp_process+0x28c>)
 8011f44:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011f48:	4980      	ldr	r1, [pc, #512]	@ (801214c <tcp_process+0x2a4>)
 8011f4a:	487c      	ldr	r0, [pc, #496]	@ (801213c <tcp_process+0x294>)
 8011f4c:	f009 f930 	bl	801b1b0 <iprintf>
      recv_flags |= TF_RESET;
 8011f50:	4b7f      	ldr	r3, [pc, #508]	@ (8012150 <tcp_process+0x2a8>)
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	f043 0308 	orr.w	r3, r3, #8
 8011f58:	b2da      	uxtb	r2, r3
 8011f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8012150 <tcp_process+0x2a8>)
 8011f5c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	8b5b      	ldrh	r3, [r3, #26]
 8011f62:	f023 0301 	bic.w	r3, r3, #1
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011f6c:	f06f 030d 	mvn.w	r3, #13
 8011f70:	e37a      	b.n	8012668 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011f72:	2300      	movs	r3, #0
 8011f74:	e378      	b.n	8012668 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011f76:	4b72      	ldr	r3, [pc, #456]	@ (8012140 <tcp_process+0x298>)
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	f003 0302 	and.w	r3, r3, #2
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d010      	beq.n	8011fa4 <tcp_process+0xfc>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	7d1b      	ldrb	r3, [r3, #20]
 8011f86:	2b02      	cmp	r3, #2
 8011f88:	d00c      	beq.n	8011fa4 <tcp_process+0xfc>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	7d1b      	ldrb	r3, [r3, #20]
 8011f8e:	2b03      	cmp	r3, #3
 8011f90:	d008      	beq.n	8011fa4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	8b5b      	ldrh	r3, [r3, #26]
 8011f96:	f043 0302 	orr.w	r3, r3, #2
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	e361      	b.n	8012668 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	8b5b      	ldrh	r3, [r3, #26]
 8011fa8:	f003 0310 	and.w	r3, r3, #16
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d103      	bne.n	8011fb8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011fb0:	4b68      	ldr	r3, [pc, #416]	@ (8012154 <tcp_process+0x2ac>)
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f001 fc2b 	bl	8013824 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	7d1b      	ldrb	r3, [r3, #20]
 8011fd2:	3b02      	subs	r3, #2
 8011fd4:	2b07      	cmp	r3, #7
 8011fd6:	f200 8337 	bhi.w	8012648 <tcp_process+0x7a0>
 8011fda:	a201      	add	r2, pc, #4	@ (adr r2, 8011fe0 <tcp_process+0x138>)
 8011fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fe0:	08012001 	.word	0x08012001
 8011fe4:	08012231 	.word	0x08012231
 8011fe8:	080123a9 	.word	0x080123a9
 8011fec:	080123d3 	.word	0x080123d3
 8011ff0:	080124f7 	.word	0x080124f7
 8011ff4:	080123a9 	.word	0x080123a9
 8011ff8:	08012583 	.word	0x08012583
 8011ffc:	08012613 	.word	0x08012613
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012000:	4b4f      	ldr	r3, [pc, #316]	@ (8012140 <tcp_process+0x298>)
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	f003 0310 	and.w	r3, r3, #16
 8012008:	2b00      	cmp	r3, #0
 801200a:	f000 80e4 	beq.w	80121d6 <tcp_process+0x32e>
 801200e:	4b4c      	ldr	r3, [pc, #304]	@ (8012140 <tcp_process+0x298>)
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	f003 0302 	and.w	r3, r3, #2
 8012016:	2b00      	cmp	r3, #0
 8012018:	f000 80dd 	beq.w	80121d6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	4b48      	ldr	r3, [pc, #288]	@ (8012144 <tcp_process+0x29c>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	429a      	cmp	r2, r3
 8012028:	f040 80d5 	bne.w	80121d6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801202c:	4b46      	ldr	r3, [pc, #280]	@ (8012148 <tcp_process+0x2a0>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	1c5a      	adds	r2, r3, #1
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801203e:	4b41      	ldr	r3, [pc, #260]	@ (8012144 <tcp_process+0x29c>)
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012046:	4b44      	ldr	r3, [pc, #272]	@ (8012158 <tcp_process+0x2b0>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	89db      	ldrh	r3, [r3, #14]
 801204c:	b29a      	uxth	r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012060:	4b39      	ldr	r3, [pc, #228]	@ (8012148 <tcp_process+0x2a0>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	1e5a      	subs	r2, r3, #1
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2204      	movs	r2, #4
 801206e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3304      	adds	r3, #4
 8012078:	4618      	mov	r0, r3
 801207a:	f006 fe55 	bl	8018d28 <ip4_route>
 801207e:	4601      	mov	r1, r0
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	3304      	adds	r3, #4
 8012084:	461a      	mov	r2, r3
 8012086:	4620      	mov	r0, r4
 8012088:	f7ff f878 	bl	801117c <tcp_eff_send_mss_netif>
 801208c:	4603      	mov	r3, r0
 801208e:	461a      	mov	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012098:	009a      	lsls	r2, r3, #2
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801209e:	005b      	lsls	r3, r3, #1
 80120a0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80120a4:	428b      	cmp	r3, r1
 80120a6:	bf38      	it	cc
 80120a8:	460b      	movcc	r3, r1
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d204      	bcs.n	80120b8 <tcp_process+0x210>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	e00d      	b.n	80120d4 <tcp_process+0x22c>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120bc:	005b      	lsls	r3, r3, #1
 80120be:	f241 121c 	movw	r2, #4380	@ 0x111c
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d904      	bls.n	80120d0 <tcp_process+0x228>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120ca:	005b      	lsls	r3, r3, #1
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	e001      	b.n	80120d4 <tcp_process+0x22c>
 80120d0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80120d4:	687a      	ldr	r2, [r7, #4]
 80120d6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d106      	bne.n	80120f2 <tcp_process+0x24a>
 80120e4:	4b13      	ldr	r3, [pc, #76]	@ (8012134 <tcp_process+0x28c>)
 80120e6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80120ea:	491c      	ldr	r1, [pc, #112]	@ (801215c <tcp_process+0x2b4>)
 80120ec:	4813      	ldr	r0, [pc, #76]	@ (801213c <tcp_process+0x294>)
 80120ee:	f009 f85f 	bl	801b1b0 <iprintf>
        --pcb->snd_queuelen;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80120f8:	3b01      	subs	r3, #1
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012106:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d12a      	bne.n	8012164 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012112:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d106      	bne.n	8012128 <tcp_process+0x280>
 801211a:	4b06      	ldr	r3, [pc, #24]	@ (8012134 <tcp_process+0x28c>)
 801211c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012120:	490f      	ldr	r1, [pc, #60]	@ (8012160 <tcp_process+0x2b8>)
 8012122:	4806      	ldr	r0, [pc, #24]	@ (801213c <tcp_process+0x294>)
 8012124:	f009 f844 	bl	801b1b0 <iprintf>
          pcb->unsent = rseg->next;
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012130:	e01c      	b.n	801216c <tcp_process+0x2c4>
 8012132:	bf00      	nop
 8012134:	0801f050 	.word	0x0801f050
 8012138:	0801f288 	.word	0x0801f288
 801213c:	0801f09c 	.word	0x0801f09c
 8012140:	20013da4 	.word	0x20013da4
 8012144:	20013d9c 	.word	0x20013d9c
 8012148:	20013d98 	.word	0x20013d98
 801214c:	0801f2a4 	.word	0x0801f2a4
 8012150:	20013da5 	.word	0x20013da5
 8012154:	20013d5c 	.word	0x20013d5c
 8012158:	20013d88 	.word	0x20013d88
 801215c:	0801f2c4 	.word	0x0801f2c4
 8012160:	0801f2dc 	.word	0x0801f2dc
        } else {
          pcb->unacked = rseg->next;
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801216c:	6978      	ldr	r0, [r7, #20]
 801216e:	f7fe fd0e 	bl	8010b8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012176:	2b00      	cmp	r3, #0
 8012178:	d104      	bne.n	8012184 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012180:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012182:	e006      	b.n	8012192 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2200      	movs	r2, #0
 801218e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012198:	2b00      	cmp	r3, #0
 801219a:	d00a      	beq.n	80121b2 <tcp_process+0x30a>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	6910      	ldr	r0, [r2, #16]
 80121a6:	2200      	movs	r2, #0
 80121a8:	6879      	ldr	r1, [r7, #4]
 80121aa:	4798      	blx	r3
 80121ac:	4603      	mov	r3, r0
 80121ae:	77bb      	strb	r3, [r7, #30]
 80121b0:	e001      	b.n	80121b6 <tcp_process+0x30e>
 80121b2:	2300      	movs	r3, #0
 80121b4:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 80121b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80121ba:	f113 0f0d 	cmn.w	r3, #13
 80121be:	d102      	bne.n	80121c6 <tcp_process+0x31e>
          return ERR_ABRT;
 80121c0:	f06f 030c 	mvn.w	r3, #12
 80121c4:	e250      	b.n	8012668 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8b5b      	ldrh	r3, [r3, #26]
 80121ca:	f043 0302 	orr.w	r3, r3, #2
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80121d4:	e23a      	b.n	801264c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80121d6:	4b98      	ldr	r3, [pc, #608]	@ (8012438 <tcp_process+0x590>)
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	f003 0310 	and.w	r3, r3, #16
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f000 8234 	beq.w	801264c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121e4:	4b95      	ldr	r3, [pc, #596]	@ (801243c <tcp_process+0x594>)
 80121e6:	6819      	ldr	r1, [r3, #0]
 80121e8:	4b95      	ldr	r3, [pc, #596]	@ (8012440 <tcp_process+0x598>)
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	461a      	mov	r2, r3
 80121ee:	4b95      	ldr	r3, [pc, #596]	@ (8012444 <tcp_process+0x59c>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121f4:	4b94      	ldr	r3, [pc, #592]	@ (8012448 <tcp_process+0x5a0>)
 80121f6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121f8:	885b      	ldrh	r3, [r3, #2]
 80121fa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121fc:	4a92      	ldr	r2, [pc, #584]	@ (8012448 <tcp_process+0x5a0>)
 80121fe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012200:	8812      	ldrh	r2, [r2, #0]
 8012202:	b292      	uxth	r2, r2
 8012204:	9202      	str	r2, [sp, #8]
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	4b90      	ldr	r3, [pc, #576]	@ (801244c <tcp_process+0x5a4>)
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	4b90      	ldr	r3, [pc, #576]	@ (8012450 <tcp_process+0x5a8>)
 801220e:	4602      	mov	r2, r0
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f002 fcb7 	bl	8014b84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801221c:	2b05      	cmp	r3, #5
 801221e:	f200 8215 	bhi.w	801264c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f002 fa73 	bl	8014714 <tcp_rexmit_rto>
      break;
 801222e:	e20d      	b.n	801264c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012230:	4b81      	ldr	r3, [pc, #516]	@ (8012438 <tcp_process+0x590>)
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	f003 0310 	and.w	r3, r3, #16
 8012238:	2b00      	cmp	r3, #0
 801223a:	f000 80a1 	beq.w	8012380 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801223e:	4b7f      	ldr	r3, [pc, #508]	@ (801243c <tcp_process+0x594>)
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	3b01      	subs	r3, #1
 801224a:	2b00      	cmp	r3, #0
 801224c:	db7e      	blt.n	801234c <tcp_process+0x4a4>
 801224e:	4b7b      	ldr	r3, [pc, #492]	@ (801243c <tcp_process+0x594>)
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012256:	1ad3      	subs	r3, r2, r3
 8012258:	2b00      	cmp	r3, #0
 801225a:	dc77      	bgt.n	801234c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2204      	movs	r2, #4
 8012260:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012266:	2b00      	cmp	r3, #0
 8012268:	d102      	bne.n	8012270 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801226a:	23fa      	movs	r3, #250	@ 0xfa
 801226c:	77bb      	strb	r3, [r7, #30]
 801226e:	e01d      	b.n	80122ac <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012274:	699b      	ldr	r3, [r3, #24]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d106      	bne.n	8012288 <tcp_process+0x3e0>
 801227a:	4b76      	ldr	r3, [pc, #472]	@ (8012454 <tcp_process+0x5ac>)
 801227c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8012280:	4975      	ldr	r1, [pc, #468]	@ (8012458 <tcp_process+0x5b0>)
 8012282:	4876      	ldr	r0, [pc, #472]	@ (801245c <tcp_process+0x5b4>)
 8012284:	f008 ff94 	bl	801b1b0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801228c:	699b      	ldr	r3, [r3, #24]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d00a      	beq.n	80122a8 <tcp_process+0x400>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012296:	699b      	ldr	r3, [r3, #24]
 8012298:	687a      	ldr	r2, [r7, #4]
 801229a:	6910      	ldr	r0, [r2, #16]
 801229c:	2200      	movs	r2, #0
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	4798      	blx	r3
 80122a2:	4603      	mov	r3, r0
 80122a4:	77bb      	strb	r3, [r7, #30]
 80122a6:	e001      	b.n	80122ac <tcp_process+0x404>
 80122a8:	23f0      	movs	r3, #240	@ 0xf0
 80122aa:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80122ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00a      	beq.n	80122ca <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80122b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80122b8:	f113 0f0d 	cmn.w	r3, #13
 80122bc:	d002      	beq.n	80122c4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7fd ff74 	bl	80101ac <tcp_abort>
            }
            return ERR_ABRT;
 80122c4:	f06f 030c 	mvn.w	r3, #12
 80122c8:	e1ce      	b.n	8012668 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fae0 	bl	8012890 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80122d0:	4b63      	ldr	r3, [pc, #396]	@ (8012460 <tcp_process+0x5b8>)
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d005      	beq.n	80122e4 <tcp_process+0x43c>
            recv_acked--;
 80122d8:	4b61      	ldr	r3, [pc, #388]	@ (8012460 <tcp_process+0x5b8>)
 80122da:	881b      	ldrh	r3, [r3, #0]
 80122dc:	3b01      	subs	r3, #1
 80122de:	b29a      	uxth	r2, r3
 80122e0:	4b5f      	ldr	r3, [pc, #380]	@ (8012460 <tcp_process+0x5b8>)
 80122e2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80122e8:	009a      	lsls	r2, r3, #2
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80122ee:	005b      	lsls	r3, r3, #1
 80122f0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80122f4:	428b      	cmp	r3, r1
 80122f6:	bf38      	it	cc
 80122f8:	460b      	movcc	r3, r1
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d204      	bcs.n	8012308 <tcp_process+0x460>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012302:	009b      	lsls	r3, r3, #2
 8012304:	b29b      	uxth	r3, r3
 8012306:	e00d      	b.n	8012324 <tcp_process+0x47c>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012312:	4293      	cmp	r3, r2
 8012314:	d904      	bls.n	8012320 <tcp_process+0x478>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801231a:	005b      	lsls	r3, r3, #1
 801231c:	b29b      	uxth	r3, r3
 801231e:	e001      	b.n	8012324 <tcp_process+0x47c>
 8012320:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801232a:	4b4e      	ldr	r3, [pc, #312]	@ (8012464 <tcp_process+0x5bc>)
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	f003 0320 	and.w	r3, r3, #32
 8012332:	2b00      	cmp	r3, #0
 8012334:	d037      	beq.n	80123a6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	8b5b      	ldrh	r3, [r3, #26]
 801233a:	f043 0302 	orr.w	r3, r3, #2
 801233e:	b29a      	uxth	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2207      	movs	r2, #7
 8012348:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801234a:	e02c      	b.n	80123a6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801234c:	4b3b      	ldr	r3, [pc, #236]	@ (801243c <tcp_process+0x594>)
 801234e:	6819      	ldr	r1, [r3, #0]
 8012350:	4b3b      	ldr	r3, [pc, #236]	@ (8012440 <tcp_process+0x598>)
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	461a      	mov	r2, r3
 8012356:	4b3b      	ldr	r3, [pc, #236]	@ (8012444 <tcp_process+0x59c>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801235c:	4b3a      	ldr	r3, [pc, #232]	@ (8012448 <tcp_process+0x5a0>)
 801235e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012360:	885b      	ldrh	r3, [r3, #2]
 8012362:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012364:	4a38      	ldr	r2, [pc, #224]	@ (8012448 <tcp_process+0x5a0>)
 8012366:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012368:	8812      	ldrh	r2, [r2, #0]
 801236a:	b292      	uxth	r2, r2
 801236c:	9202      	str	r2, [sp, #8]
 801236e:	9301      	str	r3, [sp, #4]
 8012370:	4b36      	ldr	r3, [pc, #216]	@ (801244c <tcp_process+0x5a4>)
 8012372:	9300      	str	r3, [sp, #0]
 8012374:	4b36      	ldr	r3, [pc, #216]	@ (8012450 <tcp_process+0x5a8>)
 8012376:	4602      	mov	r2, r0
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f002 fc03 	bl	8014b84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801237e:	e167      	b.n	8012650 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012380:	4b2d      	ldr	r3, [pc, #180]	@ (8012438 <tcp_process+0x590>)
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	f003 0302 	and.w	r3, r3, #2
 8012388:	2b00      	cmp	r3, #0
 801238a:	f000 8161 	beq.w	8012650 <tcp_process+0x7a8>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012392:	1e5a      	subs	r2, r3, #1
 8012394:	4b2b      	ldr	r3, [pc, #172]	@ (8012444 <tcp_process+0x59c>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	429a      	cmp	r2, r3
 801239a:	f040 8159 	bne.w	8012650 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f002 f9da 	bl	8014758 <tcp_rexmit>
      break;
 80123a4:	e154      	b.n	8012650 <tcp_process+0x7a8>
 80123a6:	e153      	b.n	8012650 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f000 fa71 	bl	8012890 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80123ae:	4b2d      	ldr	r3, [pc, #180]	@ (8012464 <tcp_process+0x5bc>)
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	f003 0320 	and.w	r3, r3, #32
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f000 814c 	beq.w	8012654 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	8b5b      	ldrh	r3, [r3, #26]
 80123c0:	f043 0302 	orr.w	r3, r3, #2
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2207      	movs	r2, #7
 80123ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80123d0:	e140      	b.n	8012654 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f000 fa5c 	bl	8012890 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80123d8:	4b22      	ldr	r3, [pc, #136]	@ (8012464 <tcp_process+0x5bc>)
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	f003 0320 	and.w	r3, r3, #32
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d071      	beq.n	80124c8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123e4:	4b14      	ldr	r3, [pc, #80]	@ (8012438 <tcp_process+0x590>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	f003 0310 	and.w	r3, r3, #16
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d060      	beq.n	80124b2 <tcp_process+0x60a>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80123f4:	4b11      	ldr	r3, [pc, #68]	@ (801243c <tcp_process+0x594>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d15a      	bne.n	80124b2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012400:	2b00      	cmp	r3, #0
 8012402:	d156      	bne.n	80124b2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	8b5b      	ldrh	r3, [r3, #26]
 8012408:	f043 0302 	orr.w	r3, r3, #2
 801240c:	b29a      	uxth	r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7fe fda8 	bl	8010f68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012418:	4b13      	ldr	r3, [pc, #76]	@ (8012468 <tcp_process+0x5c0>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	429a      	cmp	r2, r3
 8012420:	d105      	bne.n	801242e <tcp_process+0x586>
 8012422:	4b11      	ldr	r3, [pc, #68]	@ (8012468 <tcp_process+0x5c0>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	4a0f      	ldr	r2, [pc, #60]	@ (8012468 <tcp_process+0x5c0>)
 801242a:	6013      	str	r3, [r2, #0]
 801242c:	e02e      	b.n	801248c <tcp_process+0x5e4>
 801242e:	4b0e      	ldr	r3, [pc, #56]	@ (8012468 <tcp_process+0x5c0>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	613b      	str	r3, [r7, #16]
 8012434:	e027      	b.n	8012486 <tcp_process+0x5de>
 8012436:	bf00      	nop
 8012438:	20013da4 	.word	0x20013da4
 801243c:	20013d9c 	.word	0x20013d9c
 8012440:	20013da2 	.word	0x20013da2
 8012444:	20013d98 	.word	0x20013d98
 8012448:	20013d88 	.word	0x20013d88
 801244c:	2000a2f8 	.word	0x2000a2f8
 8012450:	2000a2fc 	.word	0x2000a2fc
 8012454:	0801f050 	.word	0x0801f050
 8012458:	0801f2f0 	.word	0x0801f2f0
 801245c:	0801f09c 	.word	0x0801f09c
 8012460:	20013da0 	.word	0x20013da0
 8012464:	20013da5 	.word	0x20013da5
 8012468:	20013d68 	.word	0x20013d68
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	429a      	cmp	r2, r3
 8012474:	d104      	bne.n	8012480 <tcp_process+0x5d8>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	68da      	ldr	r2, [r3, #12]
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	60da      	str	r2, [r3, #12]
 801247e:	e005      	b.n	801248c <tcp_process+0x5e4>
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	613b      	str	r3, [r7, #16]
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d1ef      	bne.n	801246c <tcp_process+0x5c4>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	60da      	str	r2, [r3, #12]
 8012492:	4b77      	ldr	r3, [pc, #476]	@ (8012670 <tcp_process+0x7c8>)
 8012494:	2201      	movs	r2, #1
 8012496:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	220a      	movs	r2, #10
 801249c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801249e:	4b75      	ldr	r3, [pc, #468]	@ (8012674 <tcp_process+0x7cc>)
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	60da      	str	r2, [r3, #12]
 80124a6:	4a73      	ldr	r2, [pc, #460]	@ (8012674 <tcp_process+0x7cc>)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6013      	str	r3, [r2, #0]
 80124ac:	f002 fd2c 	bl	8014f08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80124b0:	e0d2      	b.n	8012658 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	8b5b      	ldrh	r3, [r3, #26]
 80124b6:	f043 0302 	orr.w	r3, r3, #2
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2208      	movs	r2, #8
 80124c4:	751a      	strb	r2, [r3, #20]
      break;
 80124c6:	e0c7      	b.n	8012658 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124c8:	4b6b      	ldr	r3, [pc, #428]	@ (8012678 <tcp_process+0x7d0>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	f003 0310 	and.w	r3, r3, #16
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f000 80c1 	beq.w	8012658 <tcp_process+0x7b0>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80124da:	4b68      	ldr	r3, [pc, #416]	@ (801267c <tcp_process+0x7d4>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	429a      	cmp	r2, r3
 80124e0:	f040 80ba 	bne.w	8012658 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f040 80b5 	bne.w	8012658 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2206      	movs	r2, #6
 80124f2:	751a      	strb	r2, [r3, #20]
      break;
 80124f4:	e0b0      	b.n	8012658 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f9ca 	bl	8012890 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80124fc:	4b60      	ldr	r3, [pc, #384]	@ (8012680 <tcp_process+0x7d8>)
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	f003 0320 	and.w	r3, r3, #32
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 80a9 	beq.w	801265c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	8b5b      	ldrh	r3, [r3, #26]
 801250e:	f043 0302 	orr.w	r3, r3, #2
 8012512:	b29a      	uxth	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7fe fd25 	bl	8010f68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801251e:	4b59      	ldr	r3, [pc, #356]	@ (8012684 <tcp_process+0x7dc>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	429a      	cmp	r2, r3
 8012526:	d105      	bne.n	8012534 <tcp_process+0x68c>
 8012528:	4b56      	ldr	r3, [pc, #344]	@ (8012684 <tcp_process+0x7dc>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	68db      	ldr	r3, [r3, #12]
 801252e:	4a55      	ldr	r2, [pc, #340]	@ (8012684 <tcp_process+0x7dc>)
 8012530:	6013      	str	r3, [r2, #0]
 8012532:	e013      	b.n	801255c <tcp_process+0x6b4>
 8012534:	4b53      	ldr	r3, [pc, #332]	@ (8012684 <tcp_process+0x7dc>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	e00c      	b.n	8012556 <tcp_process+0x6ae>
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	429a      	cmp	r2, r3
 8012544:	d104      	bne.n	8012550 <tcp_process+0x6a8>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	68da      	ldr	r2, [r3, #12]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	60da      	str	r2, [r3, #12]
 801254e:	e005      	b.n	801255c <tcp_process+0x6b4>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	60fb      	str	r3, [r7, #12]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d1ef      	bne.n	801253c <tcp_process+0x694>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	60da      	str	r2, [r3, #12]
 8012562:	4b43      	ldr	r3, [pc, #268]	@ (8012670 <tcp_process+0x7c8>)
 8012564:	2201      	movs	r2, #1
 8012566:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	220a      	movs	r2, #10
 801256c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801256e:	4b41      	ldr	r3, [pc, #260]	@ (8012674 <tcp_process+0x7cc>)
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	60da      	str	r2, [r3, #12]
 8012576:	4a3f      	ldr	r2, [pc, #252]	@ (8012674 <tcp_process+0x7cc>)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6013      	str	r3, [r2, #0]
 801257c:	f002 fcc4 	bl	8014f08 <tcp_timer_needed>
      }
      break;
 8012580:	e06c      	b.n	801265c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 f984 	bl	8012890 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012588:	4b3b      	ldr	r3, [pc, #236]	@ (8012678 <tcp_process+0x7d0>)
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	f003 0310 	and.w	r3, r3, #16
 8012590:	2b00      	cmp	r3, #0
 8012592:	d065      	beq.n	8012660 <tcp_process+0x7b8>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012598:	4b38      	ldr	r3, [pc, #224]	@ (801267c <tcp_process+0x7d4>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	429a      	cmp	r2, r3
 801259e:	d15f      	bne.n	8012660 <tcp_process+0x7b8>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d15b      	bne.n	8012660 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7fe fcdd 	bl	8010f68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80125ae:	4b35      	ldr	r3, [pc, #212]	@ (8012684 <tcp_process+0x7dc>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d105      	bne.n	80125c4 <tcp_process+0x71c>
 80125b8:	4b32      	ldr	r3, [pc, #200]	@ (8012684 <tcp_process+0x7dc>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	4a31      	ldr	r2, [pc, #196]	@ (8012684 <tcp_process+0x7dc>)
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	e013      	b.n	80125ec <tcp_process+0x744>
 80125c4:	4b2f      	ldr	r3, [pc, #188]	@ (8012684 <tcp_process+0x7dc>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	61bb      	str	r3, [r7, #24]
 80125ca:	e00c      	b.n	80125e6 <tcp_process+0x73e>
 80125cc:	69bb      	ldr	r3, [r7, #24]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d104      	bne.n	80125e0 <tcp_process+0x738>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	68da      	ldr	r2, [r3, #12]
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	60da      	str	r2, [r3, #12]
 80125de:	e005      	b.n	80125ec <tcp_process+0x744>
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	61bb      	str	r3, [r7, #24]
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1ef      	bne.n	80125cc <tcp_process+0x724>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	60da      	str	r2, [r3, #12]
 80125f2:	4b1f      	ldr	r3, [pc, #124]	@ (8012670 <tcp_process+0x7c8>)
 80125f4:	2201      	movs	r2, #1
 80125f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	220a      	movs	r2, #10
 80125fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80125fe:	4b1d      	ldr	r3, [pc, #116]	@ (8012674 <tcp_process+0x7cc>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	60da      	str	r2, [r3, #12]
 8012606:	4a1b      	ldr	r2, [pc, #108]	@ (8012674 <tcp_process+0x7cc>)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6013      	str	r3, [r2, #0]
 801260c:	f002 fc7c 	bl	8014f08 <tcp_timer_needed>
      }
      break;
 8012610:	e026      	b.n	8012660 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 f93c 	bl	8012890 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012618:	4b17      	ldr	r3, [pc, #92]	@ (8012678 <tcp_process+0x7d0>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	f003 0310 	and.w	r3, r3, #16
 8012620:	2b00      	cmp	r3, #0
 8012622:	d01f      	beq.n	8012664 <tcp_process+0x7bc>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012628:	4b14      	ldr	r3, [pc, #80]	@ (801267c <tcp_process+0x7d4>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	429a      	cmp	r2, r3
 801262e:	d119      	bne.n	8012664 <tcp_process+0x7bc>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012634:	2b00      	cmp	r3, #0
 8012636:	d115      	bne.n	8012664 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012638:	4b11      	ldr	r3, [pc, #68]	@ (8012680 <tcp_process+0x7d8>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	f043 0310 	orr.w	r3, r3, #16
 8012640:	b2da      	uxtb	r2, r3
 8012642:	4b0f      	ldr	r3, [pc, #60]	@ (8012680 <tcp_process+0x7d8>)
 8012644:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012646:	e00d      	b.n	8012664 <tcp_process+0x7bc>
    default:
      break;
 8012648:	bf00      	nop
 801264a:	e00c      	b.n	8012666 <tcp_process+0x7be>
      break;
 801264c:	bf00      	nop
 801264e:	e00a      	b.n	8012666 <tcp_process+0x7be>
      break;
 8012650:	bf00      	nop
 8012652:	e008      	b.n	8012666 <tcp_process+0x7be>
      break;
 8012654:	bf00      	nop
 8012656:	e006      	b.n	8012666 <tcp_process+0x7be>
      break;
 8012658:	bf00      	nop
 801265a:	e004      	b.n	8012666 <tcp_process+0x7be>
      break;
 801265c:	bf00      	nop
 801265e:	e002      	b.n	8012666 <tcp_process+0x7be>
      break;
 8012660:	bf00      	nop
 8012662:	e000      	b.n	8012666 <tcp_process+0x7be>
      break;
 8012664:	bf00      	nop
  }
  return ERR_OK;
 8012666:	2300      	movs	r3, #0
}
 8012668:	4618      	mov	r0, r3
 801266a:	3724      	adds	r7, #36	@ 0x24
 801266c:	46bd      	mov	sp, r7
 801266e:	bd90      	pop	{r4, r7, pc}
 8012670:	20013d70 	.word	0x20013d70
 8012674:	20013d6c 	.word	0x20013d6c
 8012678:	20013da4 	.word	0x20013da4
 801267c:	20013d9c 	.word	0x20013d9c
 8012680:	20013da5 	.word	0x20013da5
 8012684:	20013d68 	.word	0x20013d68

08012688 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012688:	b590      	push	{r4, r7, lr}
 801268a:	b085      	sub	sp, #20
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d106      	bne.n	80126a6 <tcp_oos_insert_segment+0x1e>
 8012698:	4b3b      	ldr	r3, [pc, #236]	@ (8012788 <tcp_oos_insert_segment+0x100>)
 801269a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801269e:	493b      	ldr	r1, [pc, #236]	@ (801278c <tcp_oos_insert_segment+0x104>)
 80126a0:	483b      	ldr	r0, [pc, #236]	@ (8012790 <tcp_oos_insert_segment+0x108>)
 80126a2:	f008 fd85 	bl	801b1b0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	691b      	ldr	r3, [r3, #16]
 80126aa:	899b      	ldrh	r3, [r3, #12]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7fb fa1e 	bl	800daf0 <lwip_htons>
 80126b4:	4603      	mov	r3, r0
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	f003 0301 	and.w	r3, r3, #1
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d028      	beq.n	8012712 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80126c0:	6838      	ldr	r0, [r7, #0]
 80126c2:	f7fe fa4f 	bl	8010b64 <tcp_segs_free>
    next = NULL;
 80126c6:	2300      	movs	r3, #0
 80126c8:	603b      	str	r3, [r7, #0]
 80126ca:	e056      	b.n	801277a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	691b      	ldr	r3, [r3, #16]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fb fa0b 	bl	800daf0 <lwip_htons>
 80126da:	4603      	mov	r3, r0
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	f003 0301 	and.w	r3, r3, #1
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00d      	beq.n	8012702 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	691b      	ldr	r3, [r3, #16]
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	b29c      	uxth	r4, r3
 80126ee:	2001      	movs	r0, #1
 80126f0:	f7fb f9fe 	bl	800daf0 <lwip_htons>
 80126f4:	4603      	mov	r3, r0
 80126f6:	461a      	mov	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	691b      	ldr	r3, [r3, #16]
 80126fc:	4322      	orrs	r2, r4
 80126fe:	b292      	uxth	r2, r2
 8012700:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f7fe fa3e 	bl	8010b8e <tcp_seg_free>
    while (next &&
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d00e      	beq.n	8012736 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	891b      	ldrh	r3, [r3, #8]
 801271c:	461a      	mov	r2, r3
 801271e:	4b1d      	ldr	r3, [pc, #116]	@ (8012794 <tcp_oos_insert_segment+0x10c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	441a      	add	r2, r3
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	691b      	ldr	r3, [r3, #16]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	6839      	ldr	r1, [r7, #0]
 801272c:	8909      	ldrh	r1, [r1, #8]
 801272e:	440b      	add	r3, r1
 8012730:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012732:	2b00      	cmp	r3, #0
 8012734:	daca      	bge.n	80126cc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d01e      	beq.n	801277a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	891b      	ldrh	r3, [r3, #8]
 8012740:	461a      	mov	r2, r3
 8012742:	4b14      	ldr	r3, [pc, #80]	@ (8012794 <tcp_oos_insert_segment+0x10c>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	441a      	add	r2, r3
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	691b      	ldr	r3, [r3, #16]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012750:	2b00      	cmp	r3, #0
 8012752:	dd12      	ble.n	801277a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	b29a      	uxth	r2, r3
 801275c:	4b0d      	ldr	r3, [pc, #52]	@ (8012794 <tcp_oos_insert_segment+0x10c>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	b29b      	uxth	r3, r3
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	b29a      	uxth	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	685a      	ldr	r2, [r3, #4]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	891b      	ldrh	r3, [r3, #8]
 8012772:	4619      	mov	r1, r3
 8012774:	4610      	mov	r0, r2
 8012776:	f7fc fd57 	bl	800f228 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	601a      	str	r2, [r3, #0]
}
 8012780:	bf00      	nop
 8012782:	3714      	adds	r7, #20
 8012784:	46bd      	mov	sp, r7
 8012786:	bd90      	pop	{r4, r7, pc}
 8012788:	0801f050 	.word	0x0801f050
 801278c:	0801f310 	.word	0x0801f310
 8012790:	0801f09c 	.word	0x0801f09c
 8012794:	20013d98 	.word	0x20013d98

08012798 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012798:	b5b0      	push	{r4, r5, r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80127a6:	e03e      	b.n	8012826 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fc ff4a 	bl	800f650 <pbuf_clen>
 80127bc:	4603      	mov	r3, r0
 80127be:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80127c6:	8a7a      	ldrh	r2, [r7, #18]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d906      	bls.n	80127da <tcp_free_acked_segments+0x42>
 80127cc:	4b2a      	ldr	r3, [pc, #168]	@ (8012878 <tcp_free_acked_segments+0xe0>)
 80127ce:	f240 4257 	movw	r2, #1111	@ 0x457
 80127d2:	492a      	ldr	r1, [pc, #168]	@ (801287c <tcp_free_acked_segments+0xe4>)
 80127d4:	482a      	ldr	r0, [pc, #168]	@ (8012880 <tcp_free_acked_segments+0xe8>)
 80127d6:	f008 fceb 	bl	801b1b0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80127e0:	8a7b      	ldrh	r3, [r7, #18]
 80127e2:	1ad3      	subs	r3, r2, r3
 80127e4:	b29a      	uxth	r2, r3
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	891a      	ldrh	r2, [r3, #8]
 80127f0:	4b24      	ldr	r3, [pc, #144]	@ (8012884 <tcp_free_acked_segments+0xec>)
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	4413      	add	r3, r2
 80127f6:	b29a      	uxth	r2, r3
 80127f8:	4b22      	ldr	r3, [pc, #136]	@ (8012884 <tcp_free_acked_segments+0xec>)
 80127fa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80127fc:	6978      	ldr	r0, [r7, #20]
 80127fe:	f7fe f9c6 	bl	8010b8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00c      	beq.n	8012826 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d109      	bne.n	8012826 <tcp_free_acked_segments+0x8e>
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d106      	bne.n	8012826 <tcp_free_acked_segments+0x8e>
 8012818:	4b17      	ldr	r3, [pc, #92]	@ (8012878 <tcp_free_acked_segments+0xe0>)
 801281a:	f240 4261 	movw	r2, #1121	@ 0x461
 801281e:	491a      	ldr	r1, [pc, #104]	@ (8012888 <tcp_free_acked_segments+0xf0>)
 8012820:	4817      	ldr	r0, [pc, #92]	@ (8012880 <tcp_free_acked_segments+0xe8>)
 8012822:	f008 fcc5 	bl	801b1b0 <iprintf>
  while (seg_list != NULL &&
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d020      	beq.n	801286e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	691b      	ldr	r3, [r3, #16]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7fb f971 	bl	800db1a <lwip_htonl>
 8012838:	4604      	mov	r4, r0
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	891b      	ldrh	r3, [r3, #8]
 801283e:	461d      	mov	r5, r3
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	899b      	ldrh	r3, [r3, #12]
 8012846:	b29b      	uxth	r3, r3
 8012848:	4618      	mov	r0, r3
 801284a:	f7fb f951 	bl	800daf0 <lwip_htons>
 801284e:	4603      	mov	r3, r0
 8012850:	b2db      	uxtb	r3, r3
 8012852:	f003 0303 	and.w	r3, r3, #3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d001      	beq.n	801285e <tcp_free_acked_segments+0xc6>
 801285a:	2301      	movs	r3, #1
 801285c:	e000      	b.n	8012860 <tcp_free_acked_segments+0xc8>
 801285e:	2300      	movs	r3, #0
 8012860:	442b      	add	r3, r5
 8012862:	18e2      	adds	r2, r4, r3
 8012864:	4b09      	ldr	r3, [pc, #36]	@ (801288c <tcp_free_acked_segments+0xf4>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801286a:	2b00      	cmp	r3, #0
 801286c:	dd9c      	ble.n	80127a8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801286e:	68bb      	ldr	r3, [r7, #8]
}
 8012870:	4618      	mov	r0, r3
 8012872:	3718      	adds	r7, #24
 8012874:	46bd      	mov	sp, r7
 8012876:	bdb0      	pop	{r4, r5, r7, pc}
 8012878:	0801f050 	.word	0x0801f050
 801287c:	0801f338 	.word	0x0801f338
 8012880:	0801f09c 	.word	0x0801f09c
 8012884:	20013da0 	.word	0x20013da0
 8012888:	0801f360 	.word	0x0801f360
 801288c:	20013d9c 	.word	0x20013d9c

08012890 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012890:	b5b0      	push	{r4, r5, r7, lr}
 8012892:	b094      	sub	sp, #80	@ 0x50
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012898:	2300      	movs	r3, #0
 801289a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_receive+0x20>
 80128a2:	4b91      	ldr	r3, [pc, #580]	@ (8012ae8 <tcp_receive+0x258>)
 80128a4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80128a8:	4990      	ldr	r1, [pc, #576]	@ (8012aec <tcp_receive+0x25c>)
 80128aa:	4891      	ldr	r0, [pc, #580]	@ (8012af0 <tcp_receive+0x260>)
 80128ac:	f008 fc80 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7d1b      	ldrb	r3, [r3, #20]
 80128b4:	2b03      	cmp	r3, #3
 80128b6:	d806      	bhi.n	80128c6 <tcp_receive+0x36>
 80128b8:	4b8b      	ldr	r3, [pc, #556]	@ (8012ae8 <tcp_receive+0x258>)
 80128ba:	f240 427c 	movw	r2, #1148	@ 0x47c
 80128be:	498d      	ldr	r1, [pc, #564]	@ (8012af4 <tcp_receive+0x264>)
 80128c0:	488b      	ldr	r0, [pc, #556]	@ (8012af0 <tcp_receive+0x260>)
 80128c2:	f008 fc75 	bl	801b1b0 <iprintf>

  if (flags & TCP_ACK) {
 80128c6:	4b8c      	ldr	r3, [pc, #560]	@ (8012af8 <tcp_receive+0x268>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	f003 0310 	and.w	r3, r3, #16
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 8264 	beq.w	8012d9c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80128da:	461a      	mov	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128e0:	4413      	add	r3, r2
 80128e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80128e8:	4b84      	ldr	r3, [pc, #528]	@ (8012afc <tcp_receive+0x26c>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	db1b      	blt.n	801292a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80128f6:	4b81      	ldr	r3, [pc, #516]	@ (8012afc <tcp_receive+0x26c>)
 80128f8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d106      	bne.n	801290c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012902:	4b7f      	ldr	r3, [pc, #508]	@ (8012b00 <tcp_receive+0x270>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	1ad3      	subs	r3, r2, r3
 8012908:	2b00      	cmp	r3, #0
 801290a:	db0e      	blt.n	801292a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012910:	4b7b      	ldr	r3, [pc, #492]	@ (8012b00 <tcp_receive+0x270>)
 8012912:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012914:	429a      	cmp	r2, r3
 8012916:	d125      	bne.n	8012964 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012918:	4b7a      	ldr	r3, [pc, #488]	@ (8012b04 <tcp_receive+0x274>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	89db      	ldrh	r3, [r3, #14]
 801291e:	b29a      	uxth	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012926:	429a      	cmp	r2, r3
 8012928:	d91c      	bls.n	8012964 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801292a:	4b76      	ldr	r3, [pc, #472]	@ (8012b04 <tcp_receive+0x274>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	89db      	ldrh	r3, [r3, #14]
 8012930:	b29a      	uxth	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012944:	429a      	cmp	r2, r3
 8012946:	d205      	bcs.n	8012954 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012954:	4b69      	ldr	r3, [pc, #420]	@ (8012afc <tcp_receive+0x26c>)
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801295c:	4b68      	ldr	r3, [pc, #416]	@ (8012b00 <tcp_receive+0x270>)
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012964:	4b66      	ldr	r3, [pc, #408]	@ (8012b00 <tcp_receive+0x270>)
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	2b00      	cmp	r3, #0
 8012970:	dc58      	bgt.n	8012a24 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012972:	4b65      	ldr	r3, [pc, #404]	@ (8012b08 <tcp_receive+0x278>)
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d14b      	bne.n	8012a12 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012984:	4413      	add	r3, r2
 8012986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012988:	429a      	cmp	r2, r3
 801298a:	d142      	bne.n	8012a12 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012992:	2b00      	cmp	r3, #0
 8012994:	db3d      	blt.n	8012a12 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801299a:	4b59      	ldr	r3, [pc, #356]	@ (8012b00 <tcp_receive+0x270>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d137      	bne.n	8012a12 <tcp_receive+0x182>
              found_dupack = 1;
 80129a2:	2301      	movs	r3, #1
 80129a4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80129ac:	2bff      	cmp	r3, #255	@ 0xff
 80129ae:	d007      	beq.n	80129c0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80129b6:	3301      	adds	r3, #1
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	d91b      	bls.n	8012a02 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80129d4:	4413      	add	r3, r2
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80129de:	429a      	cmp	r2, r3
 80129e0:	d30a      	bcc.n	80129f8 <tcp_receive+0x168>
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80129ec:	4413      	add	r3, r2
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80129f6:	e004      	b.n	8012a02 <tcp_receive+0x172>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	d902      	bls.n	8012a12 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f001 ff0f 	bl	8014830 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f040 8161 	bne.w	8012cdc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012a22:	e15b      	b.n	8012cdc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a24:	4b36      	ldr	r3, [pc, #216]	@ (8012b00 <tcp_receive+0x270>)
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a2c:	1ad3      	subs	r3, r2, r3
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f2c0 814e 	blt.w	8012cd2 <tcp_receive+0x442>
 8012a36:	4b32      	ldr	r3, [pc, #200]	@ (8012b00 <tcp_receive+0x270>)
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	f300 8146 	bgt.w	8012cd2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	8b5b      	ldrh	r3, [r3, #26]
 8012a4a:	f003 0304 	and.w	r3, r3, #4
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d010      	beq.n	8012a74 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	8b5b      	ldrh	r3, [r3, #26]
 8012a56:	f023 0304 	bic.w	r3, r3, #4
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012a82:	10db      	asrs	r3, r3, #3
 8012a84:	b21b      	sxth	r3, r3
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	4413      	add	r3, r2
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	b21a      	sxth	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012a9c:	4b18      	ldr	r3, [pc, #96]	@ (8012b00 <tcp_receive+0x270>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012ab4:	4b12      	ldr	r3, [pc, #72]	@ (8012b00 <tcp_receive+0x270>)
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	7d1b      	ldrb	r3, [r3, #20]
 8012ac0:	2b03      	cmp	r3, #3
 8012ac2:	f240 8097 	bls.w	8012bf4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d245      	bcs.n	8012b62 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	8b5b      	ldrh	r3, [r3, #26]
 8012ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d014      	beq.n	8012b0c <tcp_receive+0x27c>
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e013      	b.n	8012b0e <tcp_receive+0x27e>
 8012ae6:	bf00      	nop
 8012ae8:	0801f050 	.word	0x0801f050
 8012aec:	0801f380 	.word	0x0801f380
 8012af0:	0801f09c 	.word	0x0801f09c
 8012af4:	0801f39c 	.word	0x0801f39c
 8012af8:	20013da4 	.word	0x20013da4
 8012afc:	20013d98 	.word	0x20013d98
 8012b00:	20013d9c 	.word	0x20013d9c
 8012b04:	20013d88 	.word	0x20013d88
 8012b08:	20013da2 	.word	0x20013da2
 8012b0c:	2302      	movs	r3, #2
 8012b0e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012b12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b1c:	fb12 f303 	smulbb	r3, r2, r3
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012b24:	4293      	cmp	r3, r2
 8012b26:	bf28      	it	cs
 8012b28:	4613      	movcs	r3, r2
 8012b2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b34:	4413      	add	r3, r2
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d309      	bcc.n	8012b56 <tcp_receive+0x2c6>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b4a:	4413      	add	r3, r2
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012b54:	e04e      	b.n	8012bf4 <tcp_receive+0x364>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012b60:	e048      	b.n	8012bf4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012b68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012b6a:	4413      	add	r3, r2
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d309      	bcc.n	8012b8c <tcp_receive+0x2fc>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012b7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012b80:	4413      	add	r3, r2
 8012b82:	b29a      	uxth	r2, r3
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012b8a:	e004      	b.n	8012b96 <tcp_receive+0x306>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d326      	bcc.n	8012bf4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bc6:	4413      	add	r3, r2
 8012bc8:	b29a      	uxth	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d30a      	bcc.n	8012bea <tcp_receive+0x35a>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bde:	4413      	add	r3, r2
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012be8:	e004      	b.n	8012bf4 <tcp_receive+0x364>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012bf0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bfc:	4a98      	ldr	r2, [pc, #608]	@ (8012e60 <tcp_receive+0x5d0>)
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7ff fdca 	bl	8012798 <tcp_free_acked_segments>
 8012c04:	4602      	mov	r2, r0
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c12:	4a94      	ldr	r2, [pc, #592]	@ (8012e64 <tcp_receive+0x5d4>)
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7ff fdbf 	bl	8012798 <tcp_free_acked_segments>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d104      	bne.n	8012c32 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c2e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012c30:	e002      	b.n	8012c38 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d103      	bne.n	8012c4e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012c54:	4b84      	ldr	r3, [pc, #528]	@ (8012e68 <tcp_receive+0x5d8>)
 8012c56:	881b      	ldrh	r3, [r3, #0]
 8012c58:	4413      	add	r3, r2
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	8b5b      	ldrh	r3, [r3, #26]
 8012c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d035      	beq.n	8012cda <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d118      	bne.n	8012ca8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d00c      	beq.n	8012c98 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c86:	691b      	ldr	r3, [r3, #16]
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fa ff45 	bl	800db1a <lwip_htonl>
 8012c90:	4603      	mov	r3, r0
 8012c92:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	dc20      	bgt.n	8012cda <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	8b5b      	ldrh	r3, [r3, #26]
 8012c9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012ca0:	b29a      	uxth	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012ca6:	e018      	b.n	8012cda <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fa ff30 	bl	800db1a <lwip_htonl>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	1ae3      	subs	r3, r4, r3
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dc0b      	bgt.n	8012cda <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8b5b      	ldrh	r3, [r3, #26]
 8012cc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cd0:	e003      	b.n	8012cda <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f001 ffa8 	bl	8014c28 <tcp_send_empty_ack>
 8012cd8:	e000      	b.n	8012cdc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cda:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d05b      	beq.n	8012d9c <tcp_receive+0x50c>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ce8:	4b60      	ldr	r3, [pc, #384]	@ (8012e6c <tcp_receive+0x5dc>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	da54      	bge.n	8012d9c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8012e70 <tcp_receive+0x5e0>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	1ad3      	subs	r3, r2, r3
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012d06:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012d10:	10db      	asrs	r3, r3, #3
 8012d12:	b21b      	sxth	r3, r3
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012d2a:	4413      	add	r3, r2
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	b21a      	sxth	r2, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012d34:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	da05      	bge.n	8012d48 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012d40:	425b      	negs	r3, r3
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012d48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012d52:	109b      	asrs	r3, r3, #2
 8012d54:	b21b      	sxth	r3, r3
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012d6c:	4413      	add	r3, r2
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	b21a      	sxth	r2, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012d7c:	10db      	asrs	r3, r3, #3
 8012d7e:	b21b      	sxth	r3, r3
 8012d80:	b29a      	uxth	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	4413      	add	r3, r2
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	b21a      	sxth	r2, r3
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012d9c:	4b35      	ldr	r3, [pc, #212]	@ (8012e74 <tcp_receive+0x5e4>)
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	f000 84df 	beq.w	8013764 <tcp_receive+0xed4>
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	7d1b      	ldrb	r3, [r3, #20]
 8012daa:	2b06      	cmp	r3, #6
 8012dac:	f200 84da 	bhi.w	8013764 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012db4:	4b30      	ldr	r3, [pc, #192]	@ (8012e78 <tcp_receive+0x5e8>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f2c0 808f 	blt.w	8012ee0 <tcp_receive+0x650>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8012e74 <tcp_receive+0x5e4>)
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	4619      	mov	r1, r3
 8012dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8012e78 <tcp_receive+0x5e8>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	440b      	add	r3, r1
 8012dd2:	1ad3      	subs	r3, r2, r3
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f300 8082 	bgt.w	8012ee0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012ddc:	4b27      	ldr	r3, [pc, #156]	@ (8012e7c <tcp_receive+0x5ec>)
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012de6:	4b24      	ldr	r3, [pc, #144]	@ (8012e78 <tcp_receive+0x5e8>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012dee:	4b23      	ldr	r3, [pc, #140]	@ (8012e7c <tcp_receive+0x5ec>)
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <tcp_receive+0x574>
 8012df6:	4b22      	ldr	r3, [pc, #136]	@ (8012e80 <tcp_receive+0x5f0>)
 8012df8:	f240 5294 	movw	r2, #1428	@ 0x594
 8012dfc:	4921      	ldr	r1, [pc, #132]	@ (8012e84 <tcp_receive+0x5f4>)
 8012dfe:	4822      	ldr	r0, [pc, #136]	@ (8012e88 <tcp_receive+0x5f8>)
 8012e00:	f008 f9d6 	bl	801b1b0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e06:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d906      	bls.n	8012e1c <tcp_receive+0x58c>
 8012e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8012e80 <tcp_receive+0x5f0>)
 8012e10:	f240 5295 	movw	r2, #1429	@ 0x595
 8012e14:	491d      	ldr	r1, [pc, #116]	@ (8012e8c <tcp_receive+0x5fc>)
 8012e16:	481c      	ldr	r0, [pc, #112]	@ (8012e88 <tcp_receive+0x5f8>)
 8012e18:	f008 f9ca 	bl	801b1b0 <iprintf>
      off = (u16_t)off32;
 8012e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012e22:	4b16      	ldr	r3, [pc, #88]	@ (8012e7c <tcp_receive+0x5ec>)
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	891b      	ldrh	r3, [r3, #8]
 8012e28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d906      	bls.n	8012e3e <tcp_receive+0x5ae>
 8012e30:	4b13      	ldr	r3, [pc, #76]	@ (8012e80 <tcp_receive+0x5f0>)
 8012e32:	f240 5297 	movw	r2, #1431	@ 0x597
 8012e36:	4916      	ldr	r1, [pc, #88]	@ (8012e90 <tcp_receive+0x600>)
 8012e38:	4813      	ldr	r0, [pc, #76]	@ (8012e88 <tcp_receive+0x5f8>)
 8012e3a:	f008 f9b9 	bl	801b1b0 <iprintf>
      inseg.len -= off;
 8012e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8012e7c <tcp_receive+0x5ec>)
 8012e40:	891a      	ldrh	r2, [r3, #8]
 8012e42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8012e7c <tcp_receive+0x5ec>)
 8012e4c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e7c <tcp_receive+0x5ec>)
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	891a      	ldrh	r2, [r3, #8]
 8012e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012e5c:	e02a      	b.n	8012eb4 <tcp_receive+0x624>
 8012e5e:	bf00      	nop
 8012e60:	0801f3b8 	.word	0x0801f3b8
 8012e64:	0801f3c0 	.word	0x0801f3c0
 8012e68:	20013da0 	.word	0x20013da0
 8012e6c:	20013d9c 	.word	0x20013d9c
 8012e70:	20013d5c 	.word	0x20013d5c
 8012e74:	20013da2 	.word	0x20013da2
 8012e78:	20013d98 	.word	0x20013d98
 8012e7c:	20013d74 	.word	0x20013d74
 8012e80:	0801f050 	.word	0x0801f050
 8012e84:	0801f3c8 	.word	0x0801f3c8
 8012e88:	0801f09c 	.word	0x0801f09c
 8012e8c:	0801f3d8 	.word	0x0801f3d8
 8012e90:	0801f3e8 	.word	0x0801f3e8
        off -= p->len;
 8012e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012e96:	895b      	ldrh	r3, [r3, #10]
 8012e98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012e9c:	1ad3      	subs	r3, r2, r3
 8012e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ea4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012ea6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012eaa:	2200      	movs	r2, #0
 8012eac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012eb6:	895b      	ldrh	r3, [r3, #10]
 8012eb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d8e9      	bhi.n	8012e94 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012ec0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012ec8:	f7fc faae 	bl	800f428 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ed0:	4a90      	ldr	r2, [pc, #576]	@ (8013114 <tcp_receive+0x884>)
 8012ed2:	6013      	str	r3, [r2, #0]
 8012ed4:	4b90      	ldr	r3, [pc, #576]	@ (8013118 <tcp_receive+0x888>)
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8013114 <tcp_receive+0x884>)
 8012eda:	6812      	ldr	r2, [r2, #0]
 8012edc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ede:	e00d      	b.n	8012efc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8013114 <tcp_receive+0x884>)
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	da06      	bge.n	8012efc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	8b5b      	ldrh	r3, [r3, #26]
 8012ef2:	f043 0302 	orr.w	r3, r3, #2
 8012ef6:	b29a      	uxth	r2, r3
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012efc:	4b85      	ldr	r3, [pc, #532]	@ (8013114 <tcp_receive+0x884>)
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	f2c0 8427 	blt.w	801375a <tcp_receive+0xeca>
 8012f0c:	4b81      	ldr	r3, [pc, #516]	@ (8013114 <tcp_receive+0x884>)
 8012f0e:	681a      	ldr	r2, [r3, #0]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f14:	6879      	ldr	r1, [r7, #4]
 8012f16:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012f18:	440b      	add	r3, r1
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f300 841b 	bgt.w	801375a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f28:	4b7a      	ldr	r3, [pc, #488]	@ (8013114 <tcp_receive+0x884>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	f040 8298 	bne.w	8013462 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012f32:	4b79      	ldr	r3, [pc, #484]	@ (8013118 <tcp_receive+0x888>)
 8012f34:	891c      	ldrh	r4, [r3, #8]
 8012f36:	4b78      	ldr	r3, [pc, #480]	@ (8013118 <tcp_receive+0x888>)
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	899b      	ldrh	r3, [r3, #12]
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fa fdd6 	bl	800daf0 <lwip_htons>
 8012f44:	4603      	mov	r3, r0
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	f003 0303 	and.w	r3, r3, #3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <tcp_receive+0x6c4>
 8012f50:	2301      	movs	r3, #1
 8012f52:	e000      	b.n	8012f56 <tcp_receive+0x6c6>
 8012f54:	2300      	movs	r3, #0
 8012f56:	4423      	add	r3, r4
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	4b70      	ldr	r3, [pc, #448]	@ (801311c <tcp_receive+0x88c>)
 8012f5c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012f62:	4b6e      	ldr	r3, [pc, #440]	@ (801311c <tcp_receive+0x88c>)
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d274      	bcs.n	8013054 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f6a:	4b6b      	ldr	r3, [pc, #428]	@ (8013118 <tcp_receive+0x888>)
 8012f6c:	691b      	ldr	r3, [r3, #16]
 8012f6e:	899b      	ldrh	r3, [r3, #12]
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fa fdbc 	bl	800daf0 <lwip_htons>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	f003 0301 	and.w	r3, r3, #1
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d01e      	beq.n	8012fc2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012f84:	4b64      	ldr	r3, [pc, #400]	@ (8013118 <tcp_receive+0x888>)
 8012f86:	691b      	ldr	r3, [r3, #16]
 8012f88:	899b      	ldrh	r3, [r3, #12]
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	b21b      	sxth	r3, r3
 8012f8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012f92:	b21c      	sxth	r4, r3
 8012f94:	4b60      	ldr	r3, [pc, #384]	@ (8013118 <tcp_receive+0x888>)
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	899b      	ldrh	r3, [r3, #12]
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fa fda7 	bl	800daf0 <lwip_htons>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fa fd9f 	bl	800daf0 <lwip_htons>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	b21b      	sxth	r3, r3
 8012fb6:	4323      	orrs	r3, r4
 8012fb8:	b21a      	sxth	r2, r3
 8012fba:	4b57      	ldr	r3, [pc, #348]	@ (8013118 <tcp_receive+0x888>)
 8012fbc:	691b      	ldr	r3, [r3, #16]
 8012fbe:	b292      	uxth	r2, r2
 8012fc0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012fc6:	4b54      	ldr	r3, [pc, #336]	@ (8013118 <tcp_receive+0x888>)
 8012fc8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012fca:	4b53      	ldr	r3, [pc, #332]	@ (8013118 <tcp_receive+0x888>)
 8012fcc:	691b      	ldr	r3, [r3, #16]
 8012fce:	899b      	ldrh	r3, [r3, #12]
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fa fd8c 	bl	800daf0 <lwip_htons>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	f003 0302 	and.w	r3, r3, #2
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d005      	beq.n	8012ff0 <tcp_receive+0x760>
            inseg.len -= 1;
 8012fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8013118 <tcp_receive+0x888>)
 8012fe6:	891b      	ldrh	r3, [r3, #8]
 8012fe8:	3b01      	subs	r3, #1
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	4b4a      	ldr	r3, [pc, #296]	@ (8013118 <tcp_receive+0x888>)
 8012fee:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012ff0:	4b49      	ldr	r3, [pc, #292]	@ (8013118 <tcp_receive+0x888>)
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	4a48      	ldr	r2, [pc, #288]	@ (8013118 <tcp_receive+0x888>)
 8012ff6:	8912      	ldrh	r2, [r2, #8]
 8012ff8:	4611      	mov	r1, r2
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fc f914 	bl	800f228 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013000:	4b45      	ldr	r3, [pc, #276]	@ (8013118 <tcp_receive+0x888>)
 8013002:	891c      	ldrh	r4, [r3, #8]
 8013004:	4b44      	ldr	r3, [pc, #272]	@ (8013118 <tcp_receive+0x888>)
 8013006:	691b      	ldr	r3, [r3, #16]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	b29b      	uxth	r3, r3
 801300c:	4618      	mov	r0, r3
 801300e:	f7fa fd6f 	bl	800daf0 <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	b2db      	uxtb	r3, r3
 8013016:	f003 0303 	and.w	r3, r3, #3
 801301a:	2b00      	cmp	r3, #0
 801301c:	d001      	beq.n	8013022 <tcp_receive+0x792>
 801301e:	2301      	movs	r3, #1
 8013020:	e000      	b.n	8013024 <tcp_receive+0x794>
 8013022:	2300      	movs	r3, #0
 8013024:	4423      	add	r3, r4
 8013026:	b29a      	uxth	r2, r3
 8013028:	4b3c      	ldr	r3, [pc, #240]	@ (801311c <tcp_receive+0x88c>)
 801302a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801302c:	4b3b      	ldr	r3, [pc, #236]	@ (801311c <tcp_receive+0x88c>)
 801302e:	881b      	ldrh	r3, [r3, #0]
 8013030:	461a      	mov	r2, r3
 8013032:	4b38      	ldr	r3, [pc, #224]	@ (8013114 <tcp_receive+0x884>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	441a      	add	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801303c:	6879      	ldr	r1, [r7, #4]
 801303e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013040:	440b      	add	r3, r1
 8013042:	429a      	cmp	r2, r3
 8013044:	d006      	beq.n	8013054 <tcp_receive+0x7c4>
 8013046:	4b36      	ldr	r3, [pc, #216]	@ (8013120 <tcp_receive+0x890>)
 8013048:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801304c:	4935      	ldr	r1, [pc, #212]	@ (8013124 <tcp_receive+0x894>)
 801304e:	4836      	ldr	r0, [pc, #216]	@ (8013128 <tcp_receive+0x898>)
 8013050:	f008 f8ae 	bl	801b1b0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013058:	2b00      	cmp	r3, #0
 801305a:	f000 80e6 	beq.w	801322a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801305e:	4b2e      	ldr	r3, [pc, #184]	@ (8013118 <tcp_receive+0x888>)
 8013060:	691b      	ldr	r3, [r3, #16]
 8013062:	899b      	ldrh	r3, [r3, #12]
 8013064:	b29b      	uxth	r3, r3
 8013066:	4618      	mov	r0, r3
 8013068:	f7fa fd42 	bl	800daf0 <lwip_htons>
 801306c:	4603      	mov	r3, r0
 801306e:	b2db      	uxtb	r3, r3
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	2b00      	cmp	r3, #0
 8013076:	d010      	beq.n	801309a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013078:	e00a      	b.n	8013090 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801307e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801308a:	68f8      	ldr	r0, [r7, #12]
 801308c:	f7fd fd7f 	bl	8010b8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013094:	2b00      	cmp	r3, #0
 8013096:	d1f0      	bne.n	801307a <tcp_receive+0x7ea>
 8013098:	e0c7      	b.n	801322a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80130a0:	e051      	b.n	8013146 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80130a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a4:	691b      	ldr	r3, [r3, #16]
 80130a6:	899b      	ldrh	r3, [r3, #12]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fa fd20 	bl	800daf0 <lwip_htons>
 80130b0:	4603      	mov	r3, r0
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	f003 0301 	and.w	r3, r3, #1
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d03c      	beq.n	8013136 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80130bc:	4b16      	ldr	r3, [pc, #88]	@ (8013118 <tcp_receive+0x888>)
 80130be:	691b      	ldr	r3, [r3, #16]
 80130c0:	899b      	ldrh	r3, [r3, #12]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fa fd13 	bl	800daf0 <lwip_htons>
 80130ca:	4603      	mov	r3, r0
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d12f      	bne.n	8013136 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80130d6:	4b10      	ldr	r3, [pc, #64]	@ (8013118 <tcp_receive+0x888>)
 80130d8:	691b      	ldr	r3, [r3, #16]
 80130da:	899b      	ldrh	r3, [r3, #12]
 80130dc:	b29c      	uxth	r4, r3
 80130de:	2001      	movs	r0, #1
 80130e0:	f7fa fd06 	bl	800daf0 <lwip_htons>
 80130e4:	4603      	mov	r3, r0
 80130e6:	461a      	mov	r2, r3
 80130e8:	4b0b      	ldr	r3, [pc, #44]	@ (8013118 <tcp_receive+0x888>)
 80130ea:	691b      	ldr	r3, [r3, #16]
 80130ec:	4322      	orrs	r2, r4
 80130ee:	b292      	uxth	r2, r2
 80130f0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80130f2:	4b09      	ldr	r3, [pc, #36]	@ (8013118 <tcp_receive+0x888>)
 80130f4:	891c      	ldrh	r4, [r3, #8]
 80130f6:	4b08      	ldr	r3, [pc, #32]	@ (8013118 <tcp_receive+0x888>)
 80130f8:	691b      	ldr	r3, [r3, #16]
 80130fa:	899b      	ldrh	r3, [r3, #12]
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fa fcf6 	bl	800daf0 <lwip_htons>
 8013104:	4603      	mov	r3, r0
 8013106:	b2db      	uxtb	r3, r3
 8013108:	f003 0303 	and.w	r3, r3, #3
 801310c:	2b00      	cmp	r3, #0
 801310e:	d00d      	beq.n	801312c <tcp_receive+0x89c>
 8013110:	2301      	movs	r3, #1
 8013112:	e00c      	b.n	801312e <tcp_receive+0x89e>
 8013114:	20013d98 	.word	0x20013d98
 8013118:	20013d74 	.word	0x20013d74
 801311c:	20013da2 	.word	0x20013da2
 8013120:	0801f050 	.word	0x0801f050
 8013124:	0801f3f8 	.word	0x0801f3f8
 8013128:	0801f09c 	.word	0x0801f09c
 801312c:	2300      	movs	r3, #0
 801312e:	4423      	add	r3, r4
 8013130:	b29a      	uxth	r2, r3
 8013132:	4b98      	ldr	r3, [pc, #608]	@ (8013394 <tcp_receive+0xb04>)
 8013134:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013138:	613b      	str	r3, [r7, #16]
              next = next->next;
 801313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013140:	6938      	ldr	r0, [r7, #16]
 8013142:	f7fd fd24 	bl	8010b8e <tcp_seg_free>
            while (next &&
 8013146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00e      	beq.n	801316a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801314c:	4b91      	ldr	r3, [pc, #580]	@ (8013394 <tcp_receive+0xb04>)
 801314e:	881b      	ldrh	r3, [r3, #0]
 8013150:	461a      	mov	r2, r3
 8013152:	4b91      	ldr	r3, [pc, #580]	@ (8013398 <tcp_receive+0xb08>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	441a      	add	r2, r3
 8013158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013160:	8909      	ldrh	r1, [r1, #8]
 8013162:	440b      	add	r3, r1
 8013164:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013166:	2b00      	cmp	r3, #0
 8013168:	da9b      	bge.n	80130a2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801316a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801316c:	2b00      	cmp	r3, #0
 801316e:	d059      	beq.n	8013224 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013170:	4b88      	ldr	r3, [pc, #544]	@ (8013394 <tcp_receive+0xb04>)
 8013172:	881b      	ldrh	r3, [r3, #0]
 8013174:	461a      	mov	r2, r3
 8013176:	4b88      	ldr	r3, [pc, #544]	@ (8013398 <tcp_receive+0xb08>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	441a      	add	r2, r3
 801317c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801317e:	691b      	ldr	r3, [r3, #16]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013184:	2b00      	cmp	r3, #0
 8013186:	dd4d      	ble.n	8013224 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801318a:	691b      	ldr	r3, [r3, #16]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	b29a      	uxth	r2, r3
 8013190:	4b81      	ldr	r3, [pc, #516]	@ (8013398 <tcp_receive+0xb08>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	b29b      	uxth	r3, r3
 8013196:	1ad3      	subs	r3, r2, r3
 8013198:	b29a      	uxth	r2, r3
 801319a:	4b80      	ldr	r3, [pc, #512]	@ (801339c <tcp_receive+0xb0c>)
 801319c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801319e:	4b7f      	ldr	r3, [pc, #508]	@ (801339c <tcp_receive+0xb0c>)
 80131a0:	691b      	ldr	r3, [r3, #16]
 80131a2:	899b      	ldrh	r3, [r3, #12]
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7fa fca2 	bl	800daf0 <lwip_htons>
 80131ac:	4603      	mov	r3, r0
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	f003 0302 	and.w	r3, r3, #2
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d005      	beq.n	80131c4 <tcp_receive+0x934>
                inseg.len -= 1;
 80131b8:	4b78      	ldr	r3, [pc, #480]	@ (801339c <tcp_receive+0xb0c>)
 80131ba:	891b      	ldrh	r3, [r3, #8]
 80131bc:	3b01      	subs	r3, #1
 80131be:	b29a      	uxth	r2, r3
 80131c0:	4b76      	ldr	r3, [pc, #472]	@ (801339c <tcp_receive+0xb0c>)
 80131c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80131c4:	4b75      	ldr	r3, [pc, #468]	@ (801339c <tcp_receive+0xb0c>)
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	4a74      	ldr	r2, [pc, #464]	@ (801339c <tcp_receive+0xb0c>)
 80131ca:	8912      	ldrh	r2, [r2, #8]
 80131cc:	4611      	mov	r1, r2
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7fc f82a 	bl	800f228 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80131d4:	4b71      	ldr	r3, [pc, #452]	@ (801339c <tcp_receive+0xb0c>)
 80131d6:	891c      	ldrh	r4, [r3, #8]
 80131d8:	4b70      	ldr	r3, [pc, #448]	@ (801339c <tcp_receive+0xb0c>)
 80131da:	691b      	ldr	r3, [r3, #16]
 80131dc:	899b      	ldrh	r3, [r3, #12]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7fa fc85 	bl	800daf0 <lwip_htons>
 80131e6:	4603      	mov	r3, r0
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	f003 0303 	and.w	r3, r3, #3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <tcp_receive+0x966>
 80131f2:	2301      	movs	r3, #1
 80131f4:	e000      	b.n	80131f8 <tcp_receive+0x968>
 80131f6:	2300      	movs	r3, #0
 80131f8:	4423      	add	r3, r4
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	4b65      	ldr	r3, [pc, #404]	@ (8013394 <tcp_receive+0xb04>)
 80131fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013200:	4b64      	ldr	r3, [pc, #400]	@ (8013394 <tcp_receive+0xb04>)
 8013202:	881b      	ldrh	r3, [r3, #0]
 8013204:	461a      	mov	r2, r3
 8013206:	4b64      	ldr	r3, [pc, #400]	@ (8013398 <tcp_receive+0xb08>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	441a      	add	r2, r3
 801320c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801320e:	691b      	ldr	r3, [r3, #16]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	429a      	cmp	r2, r3
 8013214:	d006      	beq.n	8013224 <tcp_receive+0x994>
 8013216:	4b62      	ldr	r3, [pc, #392]	@ (80133a0 <tcp_receive+0xb10>)
 8013218:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801321c:	4961      	ldr	r1, [pc, #388]	@ (80133a4 <tcp_receive+0xb14>)
 801321e:	4862      	ldr	r0, [pc, #392]	@ (80133a8 <tcp_receive+0xb18>)
 8013220:	f007 ffc6 	bl	801b1b0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013228:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801322a:	4b5a      	ldr	r3, [pc, #360]	@ (8013394 <tcp_receive+0xb04>)
 801322c:	881b      	ldrh	r3, [r3, #0]
 801322e:	461a      	mov	r2, r3
 8013230:	4b59      	ldr	r3, [pc, #356]	@ (8013398 <tcp_receive+0xb08>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	441a      	add	r2, r3
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801323e:	4b55      	ldr	r3, [pc, #340]	@ (8013394 <tcp_receive+0xb04>)
 8013240:	881b      	ldrh	r3, [r3, #0]
 8013242:	429a      	cmp	r2, r3
 8013244:	d206      	bcs.n	8013254 <tcp_receive+0x9c4>
 8013246:	4b56      	ldr	r3, [pc, #344]	@ (80133a0 <tcp_receive+0xb10>)
 8013248:	f240 6207 	movw	r2, #1543	@ 0x607
 801324c:	4957      	ldr	r1, [pc, #348]	@ (80133ac <tcp_receive+0xb1c>)
 801324e:	4856      	ldr	r0, [pc, #344]	@ (80133a8 <tcp_receive+0xb18>)
 8013250:	f007 ffae 	bl	801b1b0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013258:	4b4e      	ldr	r3, [pc, #312]	@ (8013394 <tcp_receive+0xb04>)
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	1ad3      	subs	r3, r2, r3
 801325e:	b29a      	uxth	r2, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7fc ffad 	bl	80101c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801326a:	4b4c      	ldr	r3, [pc, #304]	@ (801339c <tcp_receive+0xb0c>)
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	891b      	ldrh	r3, [r3, #8]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d006      	beq.n	8013282 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013274:	4b49      	ldr	r3, [pc, #292]	@ (801339c <tcp_receive+0xb0c>)
 8013276:	685b      	ldr	r3, [r3, #4]
 8013278:	4a4d      	ldr	r2, [pc, #308]	@ (80133b0 <tcp_receive+0xb20>)
 801327a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801327c:	4b47      	ldr	r3, [pc, #284]	@ (801339c <tcp_receive+0xb0c>)
 801327e:	2200      	movs	r2, #0
 8013280:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013282:	4b46      	ldr	r3, [pc, #280]	@ (801339c <tcp_receive+0xb0c>)
 8013284:	691b      	ldr	r3, [r3, #16]
 8013286:	899b      	ldrh	r3, [r3, #12]
 8013288:	b29b      	uxth	r3, r3
 801328a:	4618      	mov	r0, r3
 801328c:	f7fa fc30 	bl	800daf0 <lwip_htons>
 8013290:	4603      	mov	r3, r0
 8013292:	b2db      	uxtb	r3, r3
 8013294:	f003 0301 	and.w	r3, r3, #1
 8013298:	2b00      	cmp	r3, #0
 801329a:	f000 80b8 	beq.w	801340e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801329e:	4b45      	ldr	r3, [pc, #276]	@ (80133b4 <tcp_receive+0xb24>)
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	f043 0320 	orr.w	r3, r3, #32
 80132a6:	b2da      	uxtb	r2, r3
 80132a8:	4b42      	ldr	r3, [pc, #264]	@ (80133b4 <tcp_receive+0xb24>)
 80132aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80132ac:	e0af      	b.n	801340e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132b8:	691b      	ldr	r3, [r3, #16]
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	4a36      	ldr	r2, [pc, #216]	@ (8013398 <tcp_receive+0xb08>)
 80132be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	891b      	ldrh	r3, [r3, #8]
 80132c4:	461c      	mov	r4, r3
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	691b      	ldr	r3, [r3, #16]
 80132ca:	899b      	ldrh	r3, [r3, #12]
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fa fc0e 	bl	800daf0 <lwip_htons>
 80132d4:	4603      	mov	r3, r0
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	f003 0303 	and.w	r3, r3, #3
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d001      	beq.n	80132e4 <tcp_receive+0xa54>
 80132e0:	2301      	movs	r3, #1
 80132e2:	e000      	b.n	80132e6 <tcp_receive+0xa56>
 80132e4:	2300      	movs	r3, #0
 80132e6:	191a      	adds	r2, r3, r4
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132ec:	441a      	add	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132f6:	461c      	mov	r4, r3
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	891b      	ldrh	r3, [r3, #8]
 80132fc:	461d      	mov	r5, r3
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	691b      	ldr	r3, [r3, #16]
 8013302:	899b      	ldrh	r3, [r3, #12]
 8013304:	b29b      	uxth	r3, r3
 8013306:	4618      	mov	r0, r3
 8013308:	f7fa fbf2 	bl	800daf0 <lwip_htons>
 801330c:	4603      	mov	r3, r0
 801330e:	b2db      	uxtb	r3, r3
 8013310:	f003 0303 	and.w	r3, r3, #3
 8013314:	2b00      	cmp	r3, #0
 8013316:	d001      	beq.n	801331c <tcp_receive+0xa8c>
 8013318:	2301      	movs	r3, #1
 801331a:	e000      	b.n	801331e <tcp_receive+0xa8e>
 801331c:	2300      	movs	r3, #0
 801331e:	442b      	add	r3, r5
 8013320:	429c      	cmp	r4, r3
 8013322:	d206      	bcs.n	8013332 <tcp_receive+0xaa2>
 8013324:	4b1e      	ldr	r3, [pc, #120]	@ (80133a0 <tcp_receive+0xb10>)
 8013326:	f240 622b 	movw	r2, #1579	@ 0x62b
 801332a:	4923      	ldr	r1, [pc, #140]	@ (80133b8 <tcp_receive+0xb28>)
 801332c:	481e      	ldr	r0, [pc, #120]	@ (80133a8 <tcp_receive+0xb18>)
 801332e:	f007 ff3f 	bl	801b1b0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	891b      	ldrh	r3, [r3, #8]
 8013336:	461c      	mov	r4, r3
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	899b      	ldrh	r3, [r3, #12]
 801333e:	b29b      	uxth	r3, r3
 8013340:	4618      	mov	r0, r3
 8013342:	f7fa fbd5 	bl	800daf0 <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	b2db      	uxtb	r3, r3
 801334a:	f003 0303 	and.w	r3, r3, #3
 801334e:	2b00      	cmp	r3, #0
 8013350:	d001      	beq.n	8013356 <tcp_receive+0xac6>
 8013352:	2301      	movs	r3, #1
 8013354:	e000      	b.n	8013358 <tcp_receive+0xac8>
 8013356:	2300      	movs	r3, #0
 8013358:	1919      	adds	r1, r3, r4
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801335e:	b28b      	uxth	r3, r1
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	b29a      	uxth	r2, r3
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7fc ff2b 	bl	80101c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	891b      	ldrh	r3, [r3, #8]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d028      	beq.n	80133ca <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013378:	4b0d      	ldr	r3, [pc, #52]	@ (80133b0 <tcp_receive+0xb20>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d01d      	beq.n	80133bc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013380:	4b0b      	ldr	r3, [pc, #44]	@ (80133b0 <tcp_receive+0xb20>)
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	4619      	mov	r1, r3
 801338a:	4610      	mov	r0, r2
 801338c:	f7fc f9a0 	bl	800f6d0 <pbuf_cat>
 8013390:	e018      	b.n	80133c4 <tcp_receive+0xb34>
 8013392:	bf00      	nop
 8013394:	20013da2 	.word	0x20013da2
 8013398:	20013d98 	.word	0x20013d98
 801339c:	20013d74 	.word	0x20013d74
 80133a0:	0801f050 	.word	0x0801f050
 80133a4:	0801f430 	.word	0x0801f430
 80133a8:	0801f09c 	.word	0x0801f09c
 80133ac:	0801f46c 	.word	0x0801f46c
 80133b0:	20013da8 	.word	0x20013da8
 80133b4:	20013da5 	.word	0x20013da5
 80133b8:	0801f48c 	.word	0x0801f48c
            } else {
              recv_data = cseg->p;
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	4a70      	ldr	r2, [pc, #448]	@ (8013584 <tcp_receive+0xcf4>)
 80133c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	2200      	movs	r2, #0
 80133c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	691b      	ldr	r3, [r3, #16]
 80133ce:	899b      	ldrh	r3, [r3, #12]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fa fb8c 	bl	800daf0 <lwip_htons>
 80133d8:	4603      	mov	r3, r0
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	f003 0301 	and.w	r3, r3, #1
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00d      	beq.n	8013400 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80133e4:	4b68      	ldr	r3, [pc, #416]	@ (8013588 <tcp_receive+0xcf8>)
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	f043 0320 	orr.w	r3, r3, #32
 80133ec:	b2da      	uxtb	r2, r3
 80133ee:	4b66      	ldr	r3, [pc, #408]	@ (8013588 <tcp_receive+0xcf8>)
 80133f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	7d1b      	ldrb	r3, [r3, #20]
 80133f6:	2b04      	cmp	r3, #4
 80133f8:	d102      	bne.n	8013400 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2207      	movs	r2, #7
 80133fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013408:	68b8      	ldr	r0, [r7, #8]
 801340a:	f7fd fbc0 	bl	8010b8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013412:	2b00      	cmp	r3, #0
 8013414:	d008      	beq.n	8013428 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801341a:	691b      	ldr	r3, [r3, #16]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013422:	429a      	cmp	r2, r3
 8013424:	f43f af43 	beq.w	80132ae <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	8b5b      	ldrh	r3, [r3, #26]
 801342c:	f003 0301 	and.w	r3, r3, #1
 8013430:	2b00      	cmp	r3, #0
 8013432:	d00e      	beq.n	8013452 <tcp_receive+0xbc2>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	8b5b      	ldrh	r3, [r3, #26]
 8013438:	f023 0301 	bic.w	r3, r3, #1
 801343c:	b29a      	uxth	r2, r3
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	835a      	strh	r2, [r3, #26]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8b5b      	ldrh	r3, [r3, #26]
 8013446:	f043 0302 	orr.w	r3, r3, #2
 801344a:	b29a      	uxth	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013450:	e187      	b.n	8013762 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	8b5b      	ldrh	r3, [r3, #26]
 8013456:	f043 0301 	orr.w	r3, r3, #1
 801345a:	b29a      	uxth	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013460:	e17f      	b.n	8013762 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013466:	2b00      	cmp	r3, #0
 8013468:	d106      	bne.n	8013478 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801346a:	4848      	ldr	r0, [pc, #288]	@ (801358c <tcp_receive+0xcfc>)
 801346c:	f7fd fba8 	bl	8010bc0 <tcp_seg_copy>
 8013470:	4602      	mov	r2, r0
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	675a      	str	r2, [r3, #116]	@ 0x74
 8013476:	e16c      	b.n	8013752 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013478:	2300      	movs	r3, #0
 801347a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013482:	e156      	b.n	8013732 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	685a      	ldr	r2, [r3, #4]
 801348a:	4b41      	ldr	r3, [pc, #260]	@ (8013590 <tcp_receive+0xd00>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	429a      	cmp	r2, r3
 8013490:	d11d      	bne.n	80134ce <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013492:	4b3e      	ldr	r3, [pc, #248]	@ (801358c <tcp_receive+0xcfc>)
 8013494:	891a      	ldrh	r2, [r3, #8]
 8013496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013498:	891b      	ldrh	r3, [r3, #8]
 801349a:	429a      	cmp	r2, r3
 801349c:	f240 814e 	bls.w	801373c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80134a0:	483a      	ldr	r0, [pc, #232]	@ (801358c <tcp_receive+0xcfc>)
 80134a2:	f7fd fb8d 	bl	8010bc0 <tcp_seg_copy>
 80134a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f000 8148 	beq.w	8013740 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80134b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d003      	beq.n	80134be <tcp_receive+0xc2e>
                    prev->next = cseg;
 80134b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	601a      	str	r2, [r3, #0]
 80134bc:	e002      	b.n	80134c4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	697a      	ldr	r2, [r7, #20]
 80134c2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80134c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80134c6:	6978      	ldr	r0, [r7, #20]
 80134c8:	f7ff f8de 	bl	8012688 <tcp_oos_insert_segment>
                }
                break;
 80134cc:	e138      	b.n	8013740 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80134ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d117      	bne.n	8013504 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80134d4:	4b2e      	ldr	r3, [pc, #184]	@ (8013590 <tcp_receive+0xd00>)
 80134d6:	681a      	ldr	r2, [r3, #0]
 80134d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	685b      	ldr	r3, [r3, #4]
 80134de:	1ad3      	subs	r3, r2, r3
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	da57      	bge.n	8013594 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80134e4:	4829      	ldr	r0, [pc, #164]	@ (801358c <tcp_receive+0xcfc>)
 80134e6:	f7fd fb6b 	bl	8010bc0 <tcp_seg_copy>
 80134ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f000 8128 	beq.w	8013744 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	69ba      	ldr	r2, [r7, #24]
 80134f8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80134fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80134fc:	69b8      	ldr	r0, [r7, #24]
 80134fe:	f7ff f8c3 	bl	8012688 <tcp_oos_insert_segment>
                  }
                  break;
 8013502:	e11f      	b.n	8013744 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013504:	4b22      	ldr	r3, [pc, #136]	@ (8013590 <tcp_receive+0xd00>)
 8013506:	681a      	ldr	r2, [r3, #0]
 8013508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801350a:	691b      	ldr	r3, [r3, #16]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	1ad3      	subs	r3, r2, r3
 8013510:	3b01      	subs	r3, #1
 8013512:	2b00      	cmp	r3, #0
 8013514:	db3e      	blt.n	8013594 <tcp_receive+0xd04>
 8013516:	4b1e      	ldr	r3, [pc, #120]	@ (8013590 <tcp_receive+0xd00>)
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351c:	691b      	ldr	r3, [r3, #16]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	1ad3      	subs	r3, r2, r3
 8013522:	3301      	adds	r3, #1
 8013524:	2b00      	cmp	r3, #0
 8013526:	dc35      	bgt.n	8013594 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013528:	4818      	ldr	r0, [pc, #96]	@ (801358c <tcp_receive+0xcfc>)
 801352a:	f7fd fb49 	bl	8010bc0 <tcp_seg_copy>
 801352e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	2b00      	cmp	r3, #0
 8013534:	f000 8108 	beq.w	8013748 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801353a:	691b      	ldr	r3, [r3, #16]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013540:	8912      	ldrh	r2, [r2, #8]
 8013542:	441a      	add	r2, r3
 8013544:	4b12      	ldr	r3, [pc, #72]	@ (8013590 <tcp_receive+0xd00>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	2b00      	cmp	r3, #0
 801354c:	dd12      	ble.n	8013574 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801354e:	4b10      	ldr	r3, [pc, #64]	@ (8013590 <tcp_receive+0xd00>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	b29a      	uxth	r2, r3
 8013554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013556:	691b      	ldr	r3, [r3, #16]
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	b29b      	uxth	r3, r3
 801355c:	1ad3      	subs	r3, r2, r3
 801355e:	b29a      	uxth	r2, r3
 8013560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013562:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013566:	685a      	ldr	r2, [r3, #4]
 8013568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801356a:	891b      	ldrh	r3, [r3, #8]
 801356c:	4619      	mov	r1, r3
 801356e:	4610      	mov	r0, r2
 8013570:	f7fb fe5a 	bl	800f228 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013576:	69fa      	ldr	r2, [r7, #28]
 8013578:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801357a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801357c:	69f8      	ldr	r0, [r7, #28]
 801357e:	f7ff f883 	bl	8012688 <tcp_oos_insert_segment>
                  }
                  break;
 8013582:	e0e1      	b.n	8013748 <tcp_receive+0xeb8>
 8013584:	20013da8 	.word	0x20013da8
 8013588:	20013da5 	.word	0x20013da5
 801358c:	20013d74 	.word	0x20013d74
 8013590:	20013d98 	.word	0x20013d98
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013596:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	f040 80c5 	bne.w	801372c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80135a2:	4b7f      	ldr	r3, [pc, #508]	@ (80137a0 <tcp_receive+0xf10>)
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a8:	691b      	ldr	r3, [r3, #16]
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f340 80bc 	ble.w	801372c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80135b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b6:	691b      	ldr	r3, [r3, #16]
 80135b8:	899b      	ldrh	r3, [r3, #12]
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fa fa97 	bl	800daf0 <lwip_htons>
 80135c2:	4603      	mov	r3, r0
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	f003 0301 	and.w	r3, r3, #1
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f040 80be 	bne.w	801374c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80135d0:	4874      	ldr	r0, [pc, #464]	@ (80137a4 <tcp_receive+0xf14>)
 80135d2:	f7fd faf5 	bl	8010bc0 <tcp_seg_copy>
 80135d6:	4602      	mov	r2, r0
 80135d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80135dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f000 80b5 	beq.w	8013750 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80135e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80135ee:	8912      	ldrh	r2, [r2, #8]
 80135f0:	441a      	add	r2, r3
 80135f2:	4b6b      	ldr	r3, [pc, #428]	@ (80137a0 <tcp_receive+0xf10>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	1ad3      	subs	r3, r2, r3
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dd12      	ble.n	8013622 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80135fc:	4b68      	ldr	r3, [pc, #416]	@ (80137a0 <tcp_receive+0xf10>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	b29a      	uxth	r2, r3
 8013602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013604:	691b      	ldr	r3, [r3, #16]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	b29b      	uxth	r3, r3
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	b29a      	uxth	r2, r3
 801360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013610:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013614:	685a      	ldr	r2, [r3, #4]
 8013616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013618:	891b      	ldrh	r3, [r3, #8]
 801361a:	4619      	mov	r1, r3
 801361c:	4610      	mov	r0, r2
 801361e:	f7fb fe03 	bl	800f228 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013622:	4b61      	ldr	r3, [pc, #388]	@ (80137a8 <tcp_receive+0xf18>)
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	461a      	mov	r2, r3
 8013628:	4b5d      	ldr	r3, [pc, #372]	@ (80137a0 <tcp_receive+0xf10>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	441a      	add	r2, r3
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013632:	6879      	ldr	r1, [r7, #4]
 8013634:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013636:	440b      	add	r3, r1
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	f340 8088 	ble.w	8013750 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	899b      	ldrh	r3, [r3, #12]
 8013648:	b29b      	uxth	r3, r3
 801364a:	4618      	mov	r0, r3
 801364c:	f7fa fa50 	bl	800daf0 <lwip_htons>
 8013650:	4603      	mov	r3, r0
 8013652:	b2db      	uxtb	r3, r3
 8013654:	f003 0301 	and.w	r3, r3, #1
 8013658:	2b00      	cmp	r3, #0
 801365a:	d021      	beq.n	80136a0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	691b      	ldr	r3, [r3, #16]
 8013662:	899b      	ldrh	r3, [r3, #12]
 8013664:	b29b      	uxth	r3, r3
 8013666:	b21b      	sxth	r3, r3
 8013668:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801366c:	b21c      	sxth	r4, r3
 801366e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	691b      	ldr	r3, [r3, #16]
 8013674:	899b      	ldrh	r3, [r3, #12]
 8013676:	b29b      	uxth	r3, r3
 8013678:	4618      	mov	r0, r3
 801367a:	f7fa fa39 	bl	800daf0 <lwip_htons>
 801367e:	4603      	mov	r3, r0
 8013680:	b2db      	uxtb	r3, r3
 8013682:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013686:	b29b      	uxth	r3, r3
 8013688:	4618      	mov	r0, r3
 801368a:	f7fa fa31 	bl	800daf0 <lwip_htons>
 801368e:	4603      	mov	r3, r0
 8013690:	b21b      	sxth	r3, r3
 8013692:	4323      	orrs	r3, r4
 8013694:	b21a      	sxth	r2, r3
 8013696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	691b      	ldr	r3, [r3, #16]
 801369c:	b292      	uxth	r2, r2
 801369e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136aa:	4413      	add	r3, r2
 80136ac:	b299      	uxth	r1, r3
 80136ae:	4b3c      	ldr	r3, [pc, #240]	@ (80137a0 <tcp_receive+0xf10>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	1a8a      	subs	r2, r1, r2
 80136ba:	b292      	uxth	r2, r2
 80136bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80136be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	685a      	ldr	r2, [r3, #4]
 80136c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	891b      	ldrh	r3, [r3, #8]
 80136ca:	4619      	mov	r1, r3
 80136cc:	4610      	mov	r0, r2
 80136ce:	f7fb fdab 	bl	800f228 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80136d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	891c      	ldrh	r4, [r3, #8]
 80136d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	691b      	ldr	r3, [r3, #16]
 80136de:	899b      	ldrh	r3, [r3, #12]
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fa fa04 	bl	800daf0 <lwip_htons>
 80136e8:	4603      	mov	r3, r0
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	f003 0303 	and.w	r3, r3, #3
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d001      	beq.n	80136f8 <tcp_receive+0xe68>
 80136f4:	2301      	movs	r3, #1
 80136f6:	e000      	b.n	80136fa <tcp_receive+0xe6a>
 80136f8:	2300      	movs	r3, #0
 80136fa:	4423      	add	r3, r4
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	4b2a      	ldr	r3, [pc, #168]	@ (80137a8 <tcp_receive+0xf18>)
 8013700:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013702:	4b29      	ldr	r3, [pc, #164]	@ (80137a8 <tcp_receive+0xf18>)
 8013704:	881b      	ldrh	r3, [r3, #0]
 8013706:	461a      	mov	r2, r3
 8013708:	4b25      	ldr	r3, [pc, #148]	@ (80137a0 <tcp_receive+0xf10>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	441a      	add	r2, r3
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013712:	6879      	ldr	r1, [r7, #4]
 8013714:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013716:	440b      	add	r3, r1
 8013718:	429a      	cmp	r2, r3
 801371a:	d019      	beq.n	8013750 <tcp_receive+0xec0>
 801371c:	4b23      	ldr	r3, [pc, #140]	@ (80137ac <tcp_receive+0xf1c>)
 801371e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013722:	4923      	ldr	r1, [pc, #140]	@ (80137b0 <tcp_receive+0xf20>)
 8013724:	4823      	ldr	r0, [pc, #140]	@ (80137b4 <tcp_receive+0xf24>)
 8013726:	f007 fd43 	bl	801b1b0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801372a:	e011      	b.n	8013750 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013734:	2b00      	cmp	r3, #0
 8013736:	f47f aea5 	bne.w	8013484 <tcp_receive+0xbf4>
 801373a:	e00a      	b.n	8013752 <tcp_receive+0xec2>
                break;
 801373c:	bf00      	nop
 801373e:	e008      	b.n	8013752 <tcp_receive+0xec2>
                break;
 8013740:	bf00      	nop
 8013742:	e006      	b.n	8013752 <tcp_receive+0xec2>
                  break;
 8013744:	bf00      	nop
 8013746:	e004      	b.n	8013752 <tcp_receive+0xec2>
                  break;
 8013748:	bf00      	nop
 801374a:	e002      	b.n	8013752 <tcp_receive+0xec2>
                  break;
 801374c:	bf00      	nop
 801374e:	e000      	b.n	8013752 <tcp_receive+0xec2>
                break;
 8013750:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f001 fa68 	bl	8014c28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013758:	e003      	b.n	8013762 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f001 fa64 	bl	8014c28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013760:	e01a      	b.n	8013798 <tcp_receive+0xf08>
 8013762:	e019      	b.n	8013798 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013764:	4b0e      	ldr	r3, [pc, #56]	@ (80137a0 <tcp_receive+0xf10>)
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801376c:	1ad3      	subs	r3, r2, r3
 801376e:	2b00      	cmp	r3, #0
 8013770:	db0a      	blt.n	8013788 <tcp_receive+0xef8>
 8013772:	4b0b      	ldr	r3, [pc, #44]	@ (80137a0 <tcp_receive+0xf10>)
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801377a:	6879      	ldr	r1, [r7, #4]
 801377c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801377e:	440b      	add	r3, r1
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	3301      	adds	r3, #1
 8013784:	2b00      	cmp	r3, #0
 8013786:	dd07      	ble.n	8013798 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	8b5b      	ldrh	r3, [r3, #26]
 801378c:	f043 0302 	orr.w	r3, r3, #2
 8013790:	b29a      	uxth	r2, r3
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013796:	e7ff      	b.n	8013798 <tcp_receive+0xf08>
 8013798:	bf00      	nop
 801379a:	3750      	adds	r7, #80	@ 0x50
 801379c:	46bd      	mov	sp, r7
 801379e:	bdb0      	pop	{r4, r5, r7, pc}
 80137a0:	20013d98 	.word	0x20013d98
 80137a4:	20013d74 	.word	0x20013d74
 80137a8:	20013da2 	.word	0x20013da2
 80137ac:	0801f050 	.word	0x0801f050
 80137b0:	0801f3f8 	.word	0x0801f3f8
 80137b4:	0801f09c 	.word	0x0801f09c

080137b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80137be:	4b15      	ldr	r3, [pc, #84]	@ (8013814 <tcp_get_next_optbyte+0x5c>)
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	1c5a      	adds	r2, r3, #1
 80137c4:	b291      	uxth	r1, r2
 80137c6:	4a13      	ldr	r2, [pc, #76]	@ (8013814 <tcp_get_next_optbyte+0x5c>)
 80137c8:	8011      	strh	r1, [r2, #0]
 80137ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80137cc:	4b12      	ldr	r3, [pc, #72]	@ (8013818 <tcp_get_next_optbyte+0x60>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d004      	beq.n	80137de <tcp_get_next_optbyte+0x26>
 80137d4:	4b11      	ldr	r3, [pc, #68]	@ (801381c <tcp_get_next_optbyte+0x64>)
 80137d6:	881b      	ldrh	r3, [r3, #0]
 80137d8:	88fa      	ldrh	r2, [r7, #6]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d208      	bcs.n	80137f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80137de:	4b10      	ldr	r3, [pc, #64]	@ (8013820 <tcp_get_next_optbyte+0x68>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	3314      	adds	r3, #20
 80137e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80137e6:	88fb      	ldrh	r3, [r7, #6]
 80137e8:	683a      	ldr	r2, [r7, #0]
 80137ea:	4413      	add	r3, r2
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	e00b      	b.n	8013808 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80137f0:	88fb      	ldrh	r3, [r7, #6]
 80137f2:	b2da      	uxtb	r2, r3
 80137f4:	4b09      	ldr	r3, [pc, #36]	@ (801381c <tcp_get_next_optbyte+0x64>)
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	1ad3      	subs	r3, r2, r3
 80137fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80137fe:	4b06      	ldr	r3, [pc, #24]	@ (8013818 <tcp_get_next_optbyte+0x60>)
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	797b      	ldrb	r3, [r7, #5]
 8013804:	4413      	add	r3, r2
 8013806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013808:	4618      	mov	r0, r3
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	20013d94 	.word	0x20013d94
 8013818:	20013d90 	.word	0x20013d90
 801381c:	20013d8e 	.word	0x20013d8e
 8013820:	20013d88 	.word	0x20013d88

08013824 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <tcp_parseopt+0x1c>
 8013832:	4b33      	ldr	r3, [pc, #204]	@ (8013900 <tcp_parseopt+0xdc>)
 8013834:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013838:	4932      	ldr	r1, [pc, #200]	@ (8013904 <tcp_parseopt+0xe0>)
 801383a:	4833      	ldr	r0, [pc, #204]	@ (8013908 <tcp_parseopt+0xe4>)
 801383c:	f007 fcb8 	bl	801b1b0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013840:	4b32      	ldr	r3, [pc, #200]	@ (801390c <tcp_parseopt+0xe8>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d057      	beq.n	80138f8 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013848:	4b31      	ldr	r3, [pc, #196]	@ (8013910 <tcp_parseopt+0xec>)
 801384a:	2200      	movs	r2, #0
 801384c:	801a      	strh	r2, [r3, #0]
 801384e:	e047      	b.n	80138e0 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8013850:	f7ff ffb2 	bl	80137b8 <tcp_get_next_optbyte>
 8013854:	4603      	mov	r3, r0
 8013856:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013858:	7bfb      	ldrb	r3, [r7, #15]
 801385a:	2b02      	cmp	r3, #2
 801385c:	d006      	beq.n	801386c <tcp_parseopt+0x48>
 801385e:	2b02      	cmp	r3, #2
 8013860:	dc2b      	bgt.n	80138ba <tcp_parseopt+0x96>
 8013862:	2b00      	cmp	r3, #0
 8013864:	d043      	beq.n	80138ee <tcp_parseopt+0xca>
 8013866:	2b01      	cmp	r3, #1
 8013868:	d039      	beq.n	80138de <tcp_parseopt+0xba>
 801386a:	e026      	b.n	80138ba <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801386c:	f7ff ffa4 	bl	80137b8 <tcp_get_next_optbyte>
 8013870:	4603      	mov	r3, r0
 8013872:	2b04      	cmp	r3, #4
 8013874:	d13d      	bne.n	80138f2 <tcp_parseopt+0xce>
 8013876:	4b26      	ldr	r3, [pc, #152]	@ (8013910 <tcp_parseopt+0xec>)
 8013878:	881b      	ldrh	r3, [r3, #0]
 801387a:	3301      	adds	r3, #1
 801387c:	4a23      	ldr	r2, [pc, #140]	@ (801390c <tcp_parseopt+0xe8>)
 801387e:	8812      	ldrh	r2, [r2, #0]
 8013880:	4293      	cmp	r3, r2
 8013882:	da36      	bge.n	80138f2 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013884:	f7ff ff98 	bl	80137b8 <tcp_get_next_optbyte>
 8013888:	4603      	mov	r3, r0
 801388a:	021b      	lsls	r3, r3, #8
 801388c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801388e:	f7ff ff93 	bl	80137b8 <tcp_get_next_optbyte>
 8013892:	4603      	mov	r3, r0
 8013894:	461a      	mov	r2, r3
 8013896:	89bb      	ldrh	r3, [r7, #12]
 8013898:	4313      	orrs	r3, r2
 801389a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801389c:	89bb      	ldrh	r3, [r7, #12]
 801389e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80138a2:	4293      	cmp	r3, r2
 80138a4:	d804      	bhi.n	80138b0 <tcp_parseopt+0x8c>
 80138a6:	89bb      	ldrh	r3, [r7, #12]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d001      	beq.n	80138b0 <tcp_parseopt+0x8c>
 80138ac:	89ba      	ldrh	r2, [r7, #12]
 80138ae:	e001      	b.n	80138b4 <tcp_parseopt+0x90>
 80138b0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80138b8:	e012      	b.n	80138e0 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80138ba:	f7ff ff7d 	bl	80137b8 <tcp_get_next_optbyte>
 80138be:	4603      	mov	r3, r0
 80138c0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80138c2:	7afb      	ldrb	r3, [r7, #11]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d916      	bls.n	80138f6 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80138c8:	7afb      	ldrb	r3, [r7, #11]
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	4b10      	ldr	r3, [pc, #64]	@ (8013910 <tcp_parseopt+0xec>)
 80138ce:	881b      	ldrh	r3, [r3, #0]
 80138d0:	4413      	add	r3, r2
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	3b02      	subs	r3, #2
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	4b0d      	ldr	r3, [pc, #52]	@ (8013910 <tcp_parseopt+0xec>)
 80138da:	801a      	strh	r2, [r3, #0]
 80138dc:	e000      	b.n	80138e0 <tcp_parseopt+0xbc>
          break;
 80138de:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80138e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013910 <tcp_parseopt+0xec>)
 80138e2:	881a      	ldrh	r2, [r3, #0]
 80138e4:	4b09      	ldr	r3, [pc, #36]	@ (801390c <tcp_parseopt+0xe8>)
 80138e6:	881b      	ldrh	r3, [r3, #0]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d3b1      	bcc.n	8013850 <tcp_parseopt+0x2c>
 80138ec:	e004      	b.n	80138f8 <tcp_parseopt+0xd4>
          return;
 80138ee:	bf00      	nop
 80138f0:	e002      	b.n	80138f8 <tcp_parseopt+0xd4>
            return;
 80138f2:	bf00      	nop
 80138f4:	e000      	b.n	80138f8 <tcp_parseopt+0xd4>
            return;
 80138f6:	bf00      	nop
      }
    }
  }
}
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	0801f050 	.word	0x0801f050
 8013904:	0801f4b4 	.word	0x0801f4b4
 8013908:	0801f09c 	.word	0x0801f09c
 801390c:	20013d8c 	.word	0x20013d8c
 8013910:	20013d94 	.word	0x20013d94

08013914 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013914:	b480      	push	{r7}
 8013916:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013918:	4b05      	ldr	r3, [pc, #20]	@ (8013930 <tcp_trigger_input_pcb_close+0x1c>)
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	f043 0310 	orr.w	r3, r3, #16
 8013920:	b2da      	uxtb	r2, r3
 8013922:	4b03      	ldr	r3, [pc, #12]	@ (8013930 <tcp_trigger_input_pcb_close+0x1c>)
 8013924:	701a      	strb	r2, [r3, #0]
}
 8013926:	bf00      	nop
 8013928:	46bd      	mov	sp, r7
 801392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392e:	4770      	bx	lr
 8013930:	20013da5 	.word	0x20013da5

08013934 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b084      	sub	sp, #16
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d00a      	beq.n	801395c <tcp_route+0x28>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	7a1b      	ldrb	r3, [r3, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d006      	beq.n	801395c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	7a1b      	ldrb	r3, [r3, #8]
 8013952:	4618      	mov	r0, r3
 8013954:	f7fb fa5c 	bl	800ee10 <netif_get_by_index>
 8013958:	4603      	mov	r3, r0
 801395a:	e003      	b.n	8013964 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f005 f9e3 	bl	8018d28 <ip4_route>
 8013962:	4603      	mov	r3, r0
  }
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801396c:	b590      	push	{r4, r7, lr}
 801396e:	b087      	sub	sp, #28
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	603b      	str	r3, [r7, #0]
 8013978:	4613      	mov	r3, r2
 801397a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d105      	bne.n	801398e <tcp_create_segment+0x22>
 8013982:	4b45      	ldr	r3, [pc, #276]	@ (8013a98 <tcp_create_segment+0x12c>)
 8013984:	22a3      	movs	r2, #163	@ 0xa3
 8013986:	4945      	ldr	r1, [pc, #276]	@ (8013a9c <tcp_create_segment+0x130>)
 8013988:	4845      	ldr	r0, [pc, #276]	@ (8013aa0 <tcp_create_segment+0x134>)
 801398a:	f007 fc11 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d105      	bne.n	80139a0 <tcp_create_segment+0x34>
 8013994:	4b40      	ldr	r3, [pc, #256]	@ (8013a98 <tcp_create_segment+0x12c>)
 8013996:	22a4      	movs	r2, #164	@ 0xa4
 8013998:	4942      	ldr	r1, [pc, #264]	@ (8013aa4 <tcp_create_segment+0x138>)
 801399a:	4841      	ldr	r0, [pc, #260]	@ (8013aa0 <tcp_create_segment+0x134>)
 801399c:	f007 fc08 	bl	801b1b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80139a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	b2db      	uxtb	r3, r3
 80139a8:	f003 0304 	and.w	r3, r3, #4
 80139ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80139ae:	2003      	movs	r0, #3
 80139b0:	f7fa fecc 	bl	800e74c <memp_malloc>
 80139b4:	6138      	str	r0, [r7, #16]
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d104      	bne.n	80139c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80139bc:	68b8      	ldr	r0, [r7, #8]
 80139be:	f7fb fdb9 	bl	800f534 <pbuf_free>
    return NULL;
 80139c2:	2300      	movs	r3, #0
 80139c4:	e063      	b.n	8013a8e <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80139cc:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	2200      	movs	r2, #0
 80139d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	891a      	ldrh	r2, [r3, #8]
 80139de:	7dfb      	ldrb	r3, [r7, #23]
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d205      	bcs.n	80139f2 <tcp_create_segment+0x86>
 80139e6:	4b2c      	ldr	r3, [pc, #176]	@ (8013a98 <tcp_create_segment+0x12c>)
 80139e8:	22b0      	movs	r2, #176	@ 0xb0
 80139ea:	492f      	ldr	r1, [pc, #188]	@ (8013aa8 <tcp_create_segment+0x13c>)
 80139ec:	482c      	ldr	r0, [pc, #176]	@ (8013aa0 <tcp_create_segment+0x134>)
 80139ee:	f007 fbdf 	bl	801b1b0 <iprintf>
  seg->len = p->tot_len - optlen;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	891a      	ldrh	r2, [r3, #8]
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	2200      	movs	r2, #0
 8013a06:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013a08:	2114      	movs	r1, #20
 8013a0a:	68b8      	ldr	r0, [r7, #8]
 8013a0c:	f7fb fcfc 	bl	800f408 <pbuf_add_header>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d004      	beq.n	8013a20 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013a16:	6938      	ldr	r0, [r7, #16]
 8013a18:	f7fd f8b9 	bl	8010b8e <tcp_seg_free>
    return NULL;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	e036      	b.n	8013a8e <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	685a      	ldr	r2, [r3, #4]
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	8ada      	ldrh	r2, [r3, #22]
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	691c      	ldr	r4, [r3, #16]
 8013a32:	4610      	mov	r0, r2
 8013a34:	f7fa f85c 	bl	800daf0 <lwip_htons>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	8b1a      	ldrh	r2, [r3, #24]
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	691c      	ldr	r4, [r3, #16]
 8013a44:	4610      	mov	r0, r2
 8013a46:	f7fa f853 	bl	800daf0 <lwip_htons>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	691c      	ldr	r4, [r3, #16]
 8013a52:	6838      	ldr	r0, [r7, #0]
 8013a54:	f7fa f861 	bl	800db1a <lwip_htonl>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a5c:	7dfb      	ldrb	r3, [r7, #23]
 8013a5e:	089b      	lsrs	r3, r3, #2
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	3305      	adds	r3, #5
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	031b      	lsls	r3, r3, #12
 8013a68:	b29a      	uxth	r2, r3
 8013a6a:	79fb      	ldrb	r3, [r7, #7]
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	691c      	ldr	r4, [r3, #16]
 8013a76:	4610      	mov	r0, r2
 8013a78:	f7fa f83a 	bl	800daf0 <lwip_htons>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	691b      	ldr	r3, [r3, #16]
 8013a84:	2200      	movs	r2, #0
 8013a86:	749a      	strb	r2, [r3, #18]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	74da      	strb	r2, [r3, #19]
  return seg;
 8013a8c:	693b      	ldr	r3, [r7, #16]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	371c      	adds	r7, #28
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd90      	pop	{r4, r7, pc}
 8013a96:	bf00      	nop
 8013a98:	0801f4d0 	.word	0x0801f4d0
 8013a9c:	0801f504 	.word	0x0801f504
 8013aa0:	0801f524 	.word	0x0801f524
 8013aa4:	0801f54c 	.word	0x0801f54c
 8013aa8:	0801f570 	.word	0x0801f570

08013aac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013aac:	b590      	push	{r4, r7, lr}
 8013aae:	b08b      	sub	sp, #44	@ 0x2c
 8013ab0:	af02      	add	r7, sp, #8
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	460b      	mov	r3, r1
 8013ab6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	61bb      	str	r3, [r7, #24]
 8013abc:	2300      	movs	r3, #0
 8013abe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d106      	bne.n	8013ad8 <tcp_split_unsent_seg+0x2c>
 8013aca:	4b97      	ldr	r3, [pc, #604]	@ (8013d28 <tcp_split_unsent_seg+0x27c>)
 8013acc:	f240 324b 	movw	r2, #843	@ 0x34b
 8013ad0:	4996      	ldr	r1, [pc, #600]	@ (8013d2c <tcp_split_unsent_seg+0x280>)
 8013ad2:	4897      	ldr	r0, [pc, #604]	@ (8013d30 <tcp_split_unsent_seg+0x284>)
 8013ad4:	f007 fb6c 	bl	801b1b0 <iprintf>

  useg = pcb->unsent;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013adc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d102      	bne.n	8013aea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ae8:	e119      	b.n	8013d1e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8013aea:	887b      	ldrh	r3, [r7, #2]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d109      	bne.n	8013b04 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013af0:	4b8d      	ldr	r3, [pc, #564]	@ (8013d28 <tcp_split_unsent_seg+0x27c>)
 8013af2:	f240 3253 	movw	r2, #851	@ 0x353
 8013af6:	498f      	ldr	r1, [pc, #572]	@ (8013d34 <tcp_split_unsent_seg+0x288>)
 8013af8:	488d      	ldr	r0, [pc, #564]	@ (8013d30 <tcp_split_unsent_seg+0x284>)
 8013afa:	f007 fb59 	bl	801b1b0 <iprintf>
    return ERR_VAL;
 8013afe:	f06f 0305 	mvn.w	r3, #5
 8013b02:	e10c      	b.n	8013d1e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	891b      	ldrh	r3, [r3, #8]
 8013b08:	887a      	ldrh	r2, [r7, #2]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d301      	bcc.n	8013b12 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e105      	b.n	8013d1e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b16:	887a      	ldrh	r2, [r7, #2]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d906      	bls.n	8013b2a <tcp_split_unsent_seg+0x7e>
 8013b1c:	4b82      	ldr	r3, [pc, #520]	@ (8013d28 <tcp_split_unsent_seg+0x27c>)
 8013b1e:	f240 325b 	movw	r2, #859	@ 0x35b
 8013b22:	4985      	ldr	r1, [pc, #532]	@ (8013d38 <tcp_split_unsent_seg+0x28c>)
 8013b24:	4882      	ldr	r0, [pc, #520]	@ (8013d30 <tcp_split_unsent_seg+0x284>)
 8013b26:	f007 fb43 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	891b      	ldrh	r3, [r3, #8]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d106      	bne.n	8013b40 <tcp_split_unsent_seg+0x94>
 8013b32:	4b7d      	ldr	r3, [pc, #500]	@ (8013d28 <tcp_split_unsent_seg+0x27c>)
 8013b34:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8013b38:	4980      	ldr	r1, [pc, #512]	@ (8013d3c <tcp_split_unsent_seg+0x290>)
 8013b3a:	487d      	ldr	r0, [pc, #500]	@ (8013d30 <tcp_split_unsent_seg+0x284>)
 8013b3c:	f007 fb38 	bl	801b1b0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	7b1b      	ldrb	r3, [r3, #12]
 8013b44:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	f003 0304 	and.w	r3, r3, #4
 8013b50:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	891a      	ldrh	r2, [r3, #8]
 8013b56:	887b      	ldrh	r3, [r7, #2]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013b5c:	7bbb      	ldrb	r3, [r7, #14]
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	89bb      	ldrh	r3, [r7, #12]
 8013b62:	4413      	add	r3, r2
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	2036      	movs	r0, #54	@ 0x36
 8013b6e:	f7fb f9f9 	bl	800ef64 <pbuf_alloc>
 8013b72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b74:	693b      	ldr	r3, [r7, #16]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f000 80ba 	beq.w	8013cf0 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	685b      	ldr	r3, [r3, #4]
 8013b80:	891a      	ldrh	r2, [r3, #8]
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	891b      	ldrh	r3, [r3, #8]
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	887b      	ldrh	r3, [r7, #2]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	6858      	ldr	r0, [r3, #4]
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	685a      	ldr	r2, [r3, #4]
 8013b98:	7bbb      	ldrb	r3, [r7, #14]
 8013b9a:	18d1      	adds	r1, r2, r3
 8013b9c:	897b      	ldrh	r3, [r7, #10]
 8013b9e:	89ba      	ldrh	r2, [r7, #12]
 8013ba0:	f7fb fece 	bl	800f940 <pbuf_copy_partial>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	89bb      	ldrh	r3, [r7, #12]
 8013baa:	4293      	cmp	r3, r2
 8013bac:	f040 80a2 	bne.w	8013cf4 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	691b      	ldr	r3, [r3, #16]
 8013bb4:	899b      	ldrh	r3, [r3, #12]
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7f9 ff99 	bl	800daf0 <lwip_htons>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	b2db      	uxtb	r3, r3
 8013bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013bc6:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013bc8:	2300      	movs	r3, #0
 8013bca:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013bcc:	7ffb      	ldrb	r3, [r7, #31]
 8013bce:	f003 0308 	and.w	r3, r3, #8
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d007      	beq.n	8013be6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013bd6:	7ffb      	ldrb	r3, [r7, #31]
 8013bd8:	f023 0308 	bic.w	r3, r3, #8
 8013bdc:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8013bde:	7fbb      	ldrb	r3, [r7, #30]
 8013be0:	f043 0308 	orr.w	r3, r3, #8
 8013be4:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013be6:	7ffb      	ldrb	r3, [r7, #31]
 8013be8:	f003 0301 	and.w	r3, r3, #1
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d007      	beq.n	8013c00 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013bf0:	7ffb      	ldrb	r3, [r7, #31]
 8013bf2:	f023 0301 	bic.w	r3, r3, #1
 8013bf6:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013bf8:	7fbb      	ldrb	r3, [r7, #30]
 8013bfa:	f043 0301 	orr.w	r3, r3, #1
 8013bfe:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	691b      	ldr	r3, [r3, #16]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7f9 ff87 	bl	800db1a <lwip_htonl>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	887b      	ldrh	r3, [r7, #2]
 8013c10:	18d1      	adds	r1, r2, r3
 8013c12:	7fba      	ldrb	r2, [r7, #30]
 8013c14:	7bfb      	ldrb	r3, [r7, #15]
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	6939      	ldr	r1, [r7, #16]
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7ff fea5 	bl	801396c <tcp_create_segment>
 8013c22:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013c24:	69bb      	ldr	r3, [r7, #24]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d066      	beq.n	8013cf8 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fb fd0e 	bl	800f650 <pbuf_clen>
 8013c34:	4603      	mov	r3, r0
 8013c36:	461a      	mov	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013c3e:	1a9b      	subs	r3, r3, r2
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	6858      	ldr	r0, [r3, #4]
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	891a      	ldrh	r2, [r3, #8]
 8013c52:	89bb      	ldrh	r3, [r7, #12]
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	4619      	mov	r1, r3
 8013c5a:	f7fb fae5 	bl	800f228 <pbuf_realloc>
  useg->len -= remainder;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	891a      	ldrh	r2, [r3, #8]
 8013c62:	89bb      	ldrh	r3, [r7, #12]
 8013c64:	1ad3      	subs	r3, r2, r3
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	899b      	ldrh	r3, [r3, #12]
 8013c72:	b29c      	uxth	r4, r3
 8013c74:	7ffb      	ldrb	r3, [r7, #31]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7f9 ff39 	bl	800daf0 <lwip_htons>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	461a      	mov	r2, r3
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	691b      	ldr	r3, [r3, #16]
 8013c86:	4322      	orrs	r2, r4
 8013c88:	b292      	uxth	r2, r2
 8013c8a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fb fcda 	bl	800f650 <pbuf_clen>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ca6:	4413      	add	r3, r2
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	685b      	ldr	r3, [r3, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7fb fccb 	bl	800f650 <pbuf_clen>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013cc4:	4413      	add	r3, r2
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	69ba      	ldr	r2, [r7, #24]
 8013cda:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d103      	bne.n	8013cec <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013cec:	2300      	movs	r3, #0
 8013cee:	e016      	b.n	8013d1e <tcp_split_unsent_seg+0x272>
    goto memerr;
 8013cf0:	bf00      	nop
 8013cf2:	e002      	b.n	8013cfa <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013cf4:	bf00      	nop
 8013cf6:	e000      	b.n	8013cfa <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013cf8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d006      	beq.n	8013d0e <tcp_split_unsent_seg+0x262>
 8013d00:	4b09      	ldr	r3, [pc, #36]	@ (8013d28 <tcp_split_unsent_seg+0x27c>)
 8013d02:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013d06:	490e      	ldr	r1, [pc, #56]	@ (8013d40 <tcp_split_unsent_seg+0x294>)
 8013d08:	4809      	ldr	r0, [pc, #36]	@ (8013d30 <tcp_split_unsent_seg+0x284>)
 8013d0a:	f007 fa51 	bl	801b1b0 <iprintf>
  if (p != NULL) {
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d002      	beq.n	8013d1a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8013d14:	6938      	ldr	r0, [r7, #16]
 8013d16:	f7fb fc0d 	bl	800f534 <pbuf_free>
  }

  return ERR_MEM;
 8013d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3724      	adds	r7, #36	@ 0x24
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd90      	pop	{r4, r7, pc}
 8013d26:	bf00      	nop
 8013d28:	0801f4d0 	.word	0x0801f4d0
 8013d2c:	0801f8c0 	.word	0x0801f8c0
 8013d30:	0801f524 	.word	0x0801f524
 8013d34:	0801f8e4 	.word	0x0801f8e4
 8013d38:	0801f908 	.word	0x0801f908
 8013d3c:	0801f918 	.word	0x0801f918
 8013d40:	0801f928 	.word	0x0801f928

08013d44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013d44:	b590      	push	{r4, r7, lr}
 8013d46:	b085      	sub	sp, #20
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d106      	bne.n	8013d60 <tcp_send_fin+0x1c>
 8013d52:	4b21      	ldr	r3, [pc, #132]	@ (8013dd8 <tcp_send_fin+0x94>)
 8013d54:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013d58:	4920      	ldr	r1, [pc, #128]	@ (8013ddc <tcp_send_fin+0x98>)
 8013d5a:	4821      	ldr	r0, [pc, #132]	@ (8013de0 <tcp_send_fin+0x9c>)
 8013d5c:	f007 fa28 	bl	801b1b0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d02e      	beq.n	8013dc6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d6c:	60fb      	str	r3, [r7, #12]
 8013d6e:	e002      	b.n	8013d76 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d1f8      	bne.n	8013d70 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	691b      	ldr	r3, [r3, #16]
 8013d82:	899b      	ldrh	r3, [r3, #12]
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7f9 feb2 	bl	800daf0 <lwip_htons>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	f003 0307 	and.w	r3, r3, #7
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d116      	bne.n	8013dc6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	691b      	ldr	r3, [r3, #16]
 8013d9c:	899b      	ldrh	r3, [r3, #12]
 8013d9e:	b29c      	uxth	r4, r3
 8013da0:	2001      	movs	r0, #1
 8013da2:	f7f9 fea5 	bl	800daf0 <lwip_htons>
 8013da6:	4603      	mov	r3, r0
 8013da8:	461a      	mov	r2, r3
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	691b      	ldr	r3, [r3, #16]
 8013dae:	4322      	orrs	r2, r4
 8013db0:	b292      	uxth	r2, r2
 8013db2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	8b5b      	ldrh	r3, [r3, #26]
 8013db8:	f043 0320 	orr.w	r3, r3, #32
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	e004      	b.n	8013dd0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013dc6:	2101      	movs	r1, #1
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f000 f80b 	bl	8013de4 <tcp_enqueue_flags>
 8013dce:	4603      	mov	r3, r0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3714      	adds	r7, #20
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd90      	pop	{r4, r7, pc}
 8013dd8:	0801f4d0 	.word	0x0801f4d0
 8013ddc:	0801f934 	.word	0x0801f934
 8013de0:	0801f524 	.word	0x0801f524

08013de4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b088      	sub	sp, #32
 8013de8:	af02      	add	r7, sp, #8
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	460b      	mov	r3, r1
 8013dee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013df0:	2300      	movs	r3, #0
 8013df2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013df4:	2300      	movs	r3, #0
 8013df6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013df8:	78fb      	ldrb	r3, [r7, #3]
 8013dfa:	f003 0303 	and.w	r3, r3, #3
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d106      	bne.n	8013e10 <tcp_enqueue_flags+0x2c>
 8013e02:	4b67      	ldr	r3, [pc, #412]	@ (8013fa0 <tcp_enqueue_flags+0x1bc>)
 8013e04:	f240 4211 	movw	r2, #1041	@ 0x411
 8013e08:	4966      	ldr	r1, [pc, #408]	@ (8013fa4 <tcp_enqueue_flags+0x1c0>)
 8013e0a:	4867      	ldr	r0, [pc, #412]	@ (8013fa8 <tcp_enqueue_flags+0x1c4>)
 8013e0c:	f007 f9d0 	bl	801b1b0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d106      	bne.n	8013e24 <tcp_enqueue_flags+0x40>
 8013e16:	4b62      	ldr	r3, [pc, #392]	@ (8013fa0 <tcp_enqueue_flags+0x1bc>)
 8013e18:	f240 4213 	movw	r2, #1043	@ 0x413
 8013e1c:	4963      	ldr	r1, [pc, #396]	@ (8013fac <tcp_enqueue_flags+0x1c8>)
 8013e1e:	4862      	ldr	r0, [pc, #392]	@ (8013fa8 <tcp_enqueue_flags+0x1c4>)
 8013e20:	f007 f9c6 	bl	801b1b0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e24:	78fb      	ldrb	r3, [r7, #3]
 8013e26:	f003 0302 	and.w	r3, r3, #2
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d001      	beq.n	8013e32 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e2e:	2301      	movs	r3, #1
 8013e30:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e32:	7dfb      	ldrb	r3, [r7, #23]
 8013e34:	009b      	lsls	r3, r3, #2
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	f003 0304 	and.w	r3, r3, #4
 8013e3c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e3e:	7dbb      	ldrb	r3, [r7, #22]
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013e46:	4619      	mov	r1, r3
 8013e48:	2036      	movs	r0, #54	@ 0x36
 8013e4a:	f7fb f88b 	bl	800ef64 <pbuf_alloc>
 8013e4e:	60f8      	str	r0, [r7, #12]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d109      	bne.n	8013e6a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	8b5b      	ldrh	r3, [r3, #26]
 8013e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e64:	f04f 33ff 	mov.w	r3, #4294967295
 8013e68:	e095      	b.n	8013f96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	895a      	ldrh	r2, [r3, #10]
 8013e6e:	7dbb      	ldrb	r3, [r7, #22]
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d206      	bcs.n	8013e84 <tcp_enqueue_flags+0xa0>
 8013e76:	4b4a      	ldr	r3, [pc, #296]	@ (8013fa0 <tcp_enqueue_flags+0x1bc>)
 8013e78:	f240 4239 	movw	r2, #1081	@ 0x439
 8013e7c:	494c      	ldr	r1, [pc, #304]	@ (8013fb0 <tcp_enqueue_flags+0x1cc>)
 8013e7e:	484a      	ldr	r0, [pc, #296]	@ (8013fa8 <tcp_enqueue_flags+0x1c4>)
 8013e80:	f007 f996 	bl	801b1b0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013e88:	78fa      	ldrb	r2, [r7, #3]
 8013e8a:	7dfb      	ldrb	r3, [r7, #23]
 8013e8c:	9300      	str	r3, [sp, #0]
 8013e8e:	460b      	mov	r3, r1
 8013e90:	68f9      	ldr	r1, [r7, #12]
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7ff fd6a 	bl	801396c <tcp_create_segment>
 8013e98:	60b8      	str	r0, [r7, #8]
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d109      	bne.n	8013eb4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	8b5b      	ldrh	r3, [r3, #26]
 8013ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013eae:	f04f 33ff 	mov.w	r3, #4294967295
 8013eb2:	e070      	b.n	8013f96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	691b      	ldr	r3, [r3, #16]
 8013eb8:	f003 0303 	and.w	r3, r3, #3
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d006      	beq.n	8013ece <tcp_enqueue_flags+0xea>
 8013ec0:	4b37      	ldr	r3, [pc, #220]	@ (8013fa0 <tcp_enqueue_flags+0x1bc>)
 8013ec2:	f240 4242 	movw	r2, #1090	@ 0x442
 8013ec6:	493b      	ldr	r1, [pc, #236]	@ (8013fb4 <tcp_enqueue_flags+0x1d0>)
 8013ec8:	4837      	ldr	r0, [pc, #220]	@ (8013fa8 <tcp_enqueue_flags+0x1c4>)
 8013eca:	f007 f971 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	891b      	ldrh	r3, [r3, #8]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d006      	beq.n	8013ee4 <tcp_enqueue_flags+0x100>
 8013ed6:	4b32      	ldr	r3, [pc, #200]	@ (8013fa0 <tcp_enqueue_flags+0x1bc>)
 8013ed8:	f240 4243 	movw	r2, #1091	@ 0x443
 8013edc:	4936      	ldr	r1, [pc, #216]	@ (8013fb8 <tcp_enqueue_flags+0x1d4>)
 8013ede:	4832      	ldr	r0, [pc, #200]	@ (8013fa8 <tcp_enqueue_flags+0x1c4>)
 8013ee0:	f007 f966 	bl	801b1b0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d103      	bne.n	8013ef4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013ef2:	e00d      	b.n	8013f10 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ef8:	613b      	str	r3, [r7, #16]
 8013efa:	e002      	b.n	8013f02 <tcp_enqueue_flags+0x11e>
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	613b      	str	r3, [r7, #16]
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d1f8      	bne.n	8013efc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	68ba      	ldr	r2, [r7, #8]
 8013f0e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2200      	movs	r2, #0
 8013f14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f18:	78fb      	ldrb	r3, [r7, #3]
 8013f1a:	f003 0302 	and.w	r3, r3, #2
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d104      	bne.n	8013f2c <tcp_enqueue_flags+0x148>
 8013f22:	78fb      	ldrb	r3, [r7, #3]
 8013f24:	f003 0301 	and.w	r3, r3, #1
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d004      	beq.n	8013f36 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f30:	1c5a      	adds	r2, r3, #1
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f36:	78fb      	ldrb	r3, [r7, #3]
 8013f38:	f003 0301 	and.w	r3, r3, #1
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d006      	beq.n	8013f4e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	8b5b      	ldrh	r3, [r3, #26]
 8013f44:	f043 0320 	orr.w	r3, r3, #32
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7fb fb7c 	bl	800f650 <pbuf_clen>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013f62:	4413      	add	r3, r2
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00e      	beq.n	8013f94 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d10a      	bne.n	8013f94 <tcp_enqueue_flags+0x1b0>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d106      	bne.n	8013f94 <tcp_enqueue_flags+0x1b0>
 8013f86:	4b06      	ldr	r3, [pc, #24]	@ (8013fa0 <tcp_enqueue_flags+0x1bc>)
 8013f88:	f240 4265 	movw	r2, #1125	@ 0x465
 8013f8c:	490b      	ldr	r1, [pc, #44]	@ (8013fbc <tcp_enqueue_flags+0x1d8>)
 8013f8e:	4806      	ldr	r0, [pc, #24]	@ (8013fa8 <tcp_enqueue_flags+0x1c4>)
 8013f90:	f007 f90e 	bl	801b1b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013f94:	2300      	movs	r3, #0
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3718      	adds	r7, #24
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	0801f4d0 	.word	0x0801f4d0
 8013fa4:	0801f950 	.word	0x0801f950
 8013fa8:	0801f524 	.word	0x0801f524
 8013fac:	0801f9a8 	.word	0x0801f9a8
 8013fb0:	0801f9c8 	.word	0x0801f9c8
 8013fb4:	0801fa04 	.word	0x0801fa04
 8013fb8:	0801fa1c 	.word	0x0801fa1c
 8013fbc:	0801fa48 	.word	0x0801fa48

08013fc0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013fc0:	b5b0      	push	{r4, r5, r7, lr}
 8013fc2:	b08a      	sub	sp, #40	@ 0x28
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d106      	bne.n	8013fdc <tcp_output+0x1c>
 8013fce:	4b8a      	ldr	r3, [pc, #552]	@ (80141f8 <tcp_output+0x238>)
 8013fd0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013fd4:	4989      	ldr	r1, [pc, #548]	@ (80141fc <tcp_output+0x23c>)
 8013fd6:	488a      	ldr	r0, [pc, #552]	@ (8014200 <tcp_output+0x240>)
 8013fd8:	f007 f8ea 	bl	801b1b0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7d1b      	ldrb	r3, [r3, #20]
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	d106      	bne.n	8013ff2 <tcp_output+0x32>
 8013fe4:	4b84      	ldr	r3, [pc, #528]	@ (80141f8 <tcp_output+0x238>)
 8013fe6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013fea:	4986      	ldr	r1, [pc, #536]	@ (8014204 <tcp_output+0x244>)
 8013fec:	4884      	ldr	r0, [pc, #528]	@ (8014200 <tcp_output+0x240>)
 8013fee:	f007 f8df 	bl	801b1b0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013ff2:	4b85      	ldr	r3, [pc, #532]	@ (8014208 <tcp_output+0x248>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d101      	bne.n	8014000 <tcp_output+0x40>
    return ERR_OK;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	e1d1      	b.n	80143a4 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801400c:	4293      	cmp	r3, r2
 801400e:	bf28      	it	cs
 8014010:	4613      	movcs	r3, r2
 8014012:	b29b      	uxth	r3, r3
 8014014:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801401a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401e:	2b00      	cmp	r3, #0
 8014020:	d10b      	bne.n	801403a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	8b5b      	ldrh	r3, [r3, #26]
 8014026:	f003 0302 	and.w	r3, r3, #2
 801402a:	2b00      	cmp	r3, #0
 801402c:	f000 81ad 	beq.w	801438a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f000 fdf9 	bl	8014c28 <tcp_send_empty_ack>
 8014036:	4603      	mov	r3, r0
 8014038:	e1b4      	b.n	80143a4 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801403a:	6879      	ldr	r1, [r7, #4]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	3304      	adds	r3, #4
 8014040:	461a      	mov	r2, r3
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f7ff fc76 	bl	8013934 <tcp_route>
 8014048:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <tcp_output+0x96>
    return ERR_RTE;
 8014050:	f06f 0303 	mvn.w	r3, #3
 8014054:	e1a6      	b.n	80143a4 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d003      	beq.n	8014064 <tcp_output+0xa4>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d111      	bne.n	8014088 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d002      	beq.n	8014070 <tcp_output+0xb0>
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	3304      	adds	r3, #4
 801406e:	e000      	b.n	8014072 <tcp_output+0xb2>
 8014070:	2300      	movs	r3, #0
 8014072:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d102      	bne.n	8014080 <tcp_output+0xc0>
      return ERR_RTE;
 801407a:	f06f 0303 	mvn.w	r3, #3
 801407e:	e191      	b.n	80143a4 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801408a:	691b      	ldr	r3, [r3, #16]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	4618      	mov	r0, r3
 8014090:	f7f9 fd43 	bl	800db1a <lwip_htonl>
 8014094:	4602      	mov	r2, r0
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801409e:	8912      	ldrh	r2, [r2, #8]
 80140a0:	4413      	add	r3, r2
 80140a2:	69ba      	ldr	r2, [r7, #24]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d227      	bcs.n	80140f8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80140ae:	461a      	mov	r2, r3
 80140b0:	69bb      	ldr	r3, [r7, #24]
 80140b2:	4293      	cmp	r3, r2
 80140b4:	d114      	bne.n	80140e0 <tcp_output+0x120>
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d110      	bne.n	80140e0 <tcp_output+0x120>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d10b      	bne.n	80140e0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2200      	movs	r2, #0
 80140cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2201      	movs	r2, #1
 80140d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	8b5b      	ldrh	r3, [r3, #26]
 80140e4:	f003 0302 	and.w	r3, r3, #2
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f000 8150 	beq.w	801438e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 fd9a 	bl	8014c28 <tcp_send_empty_ack>
 80140f4:	4603      	mov	r3, r0
 80140f6:	e155      	b.n	80143a4 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2200      	movs	r2, #0
 80140fc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014104:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014106:	6a3b      	ldr	r3, [r7, #32]
 8014108:	2b00      	cmp	r3, #0
 801410a:	f000 811f 	beq.w	801434c <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801410e:	e002      	b.n	8014116 <tcp_output+0x156>
 8014110:	6a3b      	ldr	r3, [r7, #32]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	623b      	str	r3, [r7, #32]
 8014116:	6a3b      	ldr	r3, [r7, #32]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d1f8      	bne.n	8014110 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801411e:	e115      	b.n	801434c <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014122:	691b      	ldr	r3, [r3, #16]
 8014124:	899b      	ldrh	r3, [r3, #12]
 8014126:	b29b      	uxth	r3, r3
 8014128:	4618      	mov	r0, r3
 801412a:	f7f9 fce1 	bl	800daf0 <lwip_htons>
 801412e:	4603      	mov	r3, r0
 8014130:	b2db      	uxtb	r3, r3
 8014132:	f003 0304 	and.w	r3, r3, #4
 8014136:	2b00      	cmp	r3, #0
 8014138:	d006      	beq.n	8014148 <tcp_output+0x188>
 801413a:	4b2f      	ldr	r3, [pc, #188]	@ (80141f8 <tcp_output+0x238>)
 801413c:	f240 5236 	movw	r2, #1334	@ 0x536
 8014140:	4932      	ldr	r1, [pc, #200]	@ (801420c <tcp_output+0x24c>)
 8014142:	482f      	ldr	r0, [pc, #188]	@ (8014200 <tcp_output+0x240>)
 8014144:	f007 f834 	bl	801b1b0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801414c:	2b00      	cmp	r3, #0
 801414e:	d01f      	beq.n	8014190 <tcp_output+0x1d0>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	8b5b      	ldrh	r3, [r3, #26]
 8014154:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014158:	2b00      	cmp	r3, #0
 801415a:	d119      	bne.n	8014190 <tcp_output+0x1d0>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014160:	2b00      	cmp	r3, #0
 8014162:	d00b      	beq.n	801417c <tcp_output+0x1bc>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d110      	bne.n	8014190 <tcp_output+0x1d0>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014172:	891a      	ldrh	r2, [r3, #8]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014178:	429a      	cmp	r2, r3
 801417a:	d209      	bcs.n	8014190 <tcp_output+0x1d0>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014182:	2b00      	cmp	r3, #0
 8014184:	d004      	beq.n	8014190 <tcp_output+0x1d0>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801418c:	2b0f      	cmp	r3, #15
 801418e:	d901      	bls.n	8014194 <tcp_output+0x1d4>
 8014190:	2301      	movs	r3, #1
 8014192:	e000      	b.n	8014196 <tcp_output+0x1d6>
 8014194:	2300      	movs	r3, #0
 8014196:	2b00      	cmp	r3, #0
 8014198:	d106      	bne.n	80141a8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	8b5b      	ldrh	r3, [r3, #26]
 801419e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f000 80e7 	beq.w	8014376 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	7d1b      	ldrb	r3, [r3, #20]
 80141ac:	2b02      	cmp	r3, #2
 80141ae:	d00d      	beq.n	80141cc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80141b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b2:	691b      	ldr	r3, [r3, #16]
 80141b4:	899b      	ldrh	r3, [r3, #12]
 80141b6:	b29c      	uxth	r4, r3
 80141b8:	2010      	movs	r0, #16
 80141ba:	f7f9 fc99 	bl	800daf0 <lwip_htons>
 80141be:	4603      	mov	r3, r0
 80141c0:	461a      	mov	r2, r3
 80141c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	4322      	orrs	r2, r4
 80141c8:	b292      	uxth	r2, r2
 80141ca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80141cc:	697a      	ldr	r2, [r7, #20]
 80141ce:	6879      	ldr	r1, [r7, #4]
 80141d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141d2:	f000 f90b 	bl	80143ec <tcp_output_segment>
 80141d6:	4603      	mov	r3, r0
 80141d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80141da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d016      	beq.n	8014210 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	8b5b      	ldrh	r3, [r3, #26]
 80141e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	835a      	strh	r2, [r3, #26]
      return err;
 80141f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141f4:	e0d6      	b.n	80143a4 <tcp_output+0x3e4>
 80141f6:	bf00      	nop
 80141f8:	0801f4d0 	.word	0x0801f4d0
 80141fc:	0801fa70 	.word	0x0801fa70
 8014200:	0801f524 	.word	0x0801f524
 8014204:	0801fa88 	.word	0x0801fa88
 8014208:	20013dac 	.word	0x20013dac
 801420c:	0801fab0 	.word	0x0801fab0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8014210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014212:	2200      	movs	r2, #0
 8014214:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	7d1b      	ldrb	r3, [r3, #20]
 8014222:	2b02      	cmp	r3, #2
 8014224:	d006      	beq.n	8014234 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	8b5b      	ldrh	r3, [r3, #26]
 801422a:	f023 0303 	bic.w	r3, r3, #3
 801422e:	b29a      	uxth	r2, r3
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014236:	691b      	ldr	r3, [r3, #16]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	4618      	mov	r0, r3
 801423c:	f7f9 fc6d 	bl	800db1a <lwip_htonl>
 8014240:	4604      	mov	r4, r0
 8014242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014244:	891b      	ldrh	r3, [r3, #8]
 8014246:	461d      	mov	r5, r3
 8014248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801424a:	691b      	ldr	r3, [r3, #16]
 801424c:	899b      	ldrh	r3, [r3, #12]
 801424e:	b29b      	uxth	r3, r3
 8014250:	4618      	mov	r0, r3
 8014252:	f7f9 fc4d 	bl	800daf0 <lwip_htons>
 8014256:	4603      	mov	r3, r0
 8014258:	b2db      	uxtb	r3, r3
 801425a:	f003 0303 	and.w	r3, r3, #3
 801425e:	2b00      	cmp	r3, #0
 8014260:	d001      	beq.n	8014266 <tcp_output+0x2a6>
 8014262:	2301      	movs	r3, #1
 8014264:	e000      	b.n	8014268 <tcp_output+0x2a8>
 8014266:	2300      	movs	r3, #0
 8014268:	442b      	add	r3, r5
 801426a:	4423      	add	r3, r4
 801426c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	1ad3      	subs	r3, r2, r3
 8014276:	2b00      	cmp	r3, #0
 8014278:	da02      	bge.n	8014280 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	68ba      	ldr	r2, [r7, #8]
 801427e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014282:	891b      	ldrh	r3, [r3, #8]
 8014284:	461c      	mov	r4, r3
 8014286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014288:	691b      	ldr	r3, [r3, #16]
 801428a:	899b      	ldrh	r3, [r3, #12]
 801428c:	b29b      	uxth	r3, r3
 801428e:	4618      	mov	r0, r3
 8014290:	f7f9 fc2e 	bl	800daf0 <lwip_htons>
 8014294:	4603      	mov	r3, r0
 8014296:	b2db      	uxtb	r3, r3
 8014298:	f003 0303 	and.w	r3, r3, #3
 801429c:	2b00      	cmp	r3, #0
 801429e:	d001      	beq.n	80142a4 <tcp_output+0x2e4>
 80142a0:	2301      	movs	r3, #1
 80142a2:	e000      	b.n	80142a6 <tcp_output+0x2e6>
 80142a4:	2300      	movs	r3, #0
 80142a6:	4423      	add	r3, r4
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d049      	beq.n	8014340 <tcp_output+0x380>
      seg->next = NULL;
 80142ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ae:	2200      	movs	r2, #0
 80142b0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d105      	bne.n	80142c6 <tcp_output+0x306>
        pcb->unacked = seg;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142be:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80142c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c2:	623b      	str	r3, [r7, #32]
 80142c4:	e03f      	b.n	8014346 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80142c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c8:	691b      	ldr	r3, [r3, #16]
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7f9 fc24 	bl	800db1a <lwip_htonl>
 80142d2:	4604      	mov	r4, r0
 80142d4:	6a3b      	ldr	r3, [r7, #32]
 80142d6:	691b      	ldr	r3, [r3, #16]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	4618      	mov	r0, r3
 80142dc:	f7f9 fc1d 	bl	800db1a <lwip_htonl>
 80142e0:	4603      	mov	r3, r0
 80142e2:	1ae3      	subs	r3, r4, r3
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	da24      	bge.n	8014332 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	3370      	adds	r3, #112	@ 0x70
 80142ec:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80142ee:	e002      	b.n	80142f6 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d011      	beq.n	8014322 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80142fe:	69fb      	ldr	r3, [r7, #28]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	685b      	ldr	r3, [r3, #4]
 8014306:	4618      	mov	r0, r3
 8014308:	f7f9 fc07 	bl	800db1a <lwip_htonl>
 801430c:	4604      	mov	r4, r0
 801430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014310:	691b      	ldr	r3, [r3, #16]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	4618      	mov	r0, r3
 8014316:	f7f9 fc00 	bl	800db1a <lwip_htonl>
 801431a:	4603      	mov	r3, r0
 801431c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801431e:	2b00      	cmp	r3, #0
 8014320:	dbe6      	blt.n	80142f0 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014328:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801432e:	601a      	str	r2, [r3, #0]
 8014330:	e009      	b.n	8014346 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014332:	6a3b      	ldr	r3, [r7, #32]
 8014334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014336:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	623b      	str	r3, [r7, #32]
 801433e:	e002      	b.n	8014346 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014340:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014342:	f7fc fc24 	bl	8010b8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801434a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801434e:	2b00      	cmp	r3, #0
 8014350:	d012      	beq.n	8014378 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014354:	691b      	ldr	r3, [r3, #16]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	4618      	mov	r0, r3
 801435a:	f7f9 fbde 	bl	800db1a <lwip_htonl>
 801435e:	4602      	mov	r2, r0
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014364:	1ad3      	subs	r3, r2, r3
 8014366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014368:	8912      	ldrh	r2, [r2, #8]
 801436a:	4413      	add	r3, r2
  while (seg != NULL &&
 801436c:	69ba      	ldr	r2, [r7, #24]
 801436e:	429a      	cmp	r2, r3
 8014370:	f4bf aed6 	bcs.w	8014120 <tcp_output+0x160>
 8014374:	e000      	b.n	8014378 <tcp_output+0x3b8>
      break;
 8014376:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801437c:	2b00      	cmp	r3, #0
 801437e:	d108      	bne.n	8014392 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014388:	e004      	b.n	8014394 <tcp_output+0x3d4>
    goto output_done;
 801438a:	bf00      	nop
 801438c:	e002      	b.n	8014394 <tcp_output+0x3d4>
    goto output_done;
 801438e:	bf00      	nop
 8014390:	e000      	b.n	8014394 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014392:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	8b5b      	ldrh	r3, [r3, #26]
 8014398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801439c:	b29a      	uxth	r2, r3
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143a2:	2300      	movs	r3, #0
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3728      	adds	r7, #40	@ 0x28
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bdb0      	pop	{r4, r5, r7, pc}

080143ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d106      	bne.n	80143c8 <tcp_output_segment_busy+0x1c>
 80143ba:	4b09      	ldr	r3, [pc, #36]	@ (80143e0 <tcp_output_segment_busy+0x34>)
 80143bc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80143c0:	4908      	ldr	r1, [pc, #32]	@ (80143e4 <tcp_output_segment_busy+0x38>)
 80143c2:	4809      	ldr	r0, [pc, #36]	@ (80143e8 <tcp_output_segment_busy+0x3c>)
 80143c4:	f006 fef4 	bl	801b1b0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	7b9b      	ldrb	r3, [r3, #14]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d001      	beq.n	80143d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80143d2:	2301      	movs	r3, #1
 80143d4:	e000      	b.n	80143d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80143d6:	2300      	movs	r3, #0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}
 80143e0:	0801f4d0 	.word	0x0801f4d0
 80143e4:	0801fac8 	.word	0x0801fac8
 80143e8:	0801f524 	.word	0x0801f524

080143ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80143ec:	b5b0      	push	{r4, r5, r7, lr}
 80143ee:	b08c      	sub	sp, #48	@ 0x30
 80143f0:	af04      	add	r7, sp, #16
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <tcp_output_segment+0x20>
 80143fe:	4b6d      	ldr	r3, [pc, #436]	@ (80145b4 <tcp_output_segment+0x1c8>)
 8014400:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8014404:	496c      	ldr	r1, [pc, #432]	@ (80145b8 <tcp_output_segment+0x1cc>)
 8014406:	486d      	ldr	r0, [pc, #436]	@ (80145bc <tcp_output_segment+0x1d0>)
 8014408:	f006 fed2 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d106      	bne.n	8014420 <tcp_output_segment+0x34>
 8014412:	4b68      	ldr	r3, [pc, #416]	@ (80145b4 <tcp_output_segment+0x1c8>)
 8014414:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8014418:	4969      	ldr	r1, [pc, #420]	@ (80145c0 <tcp_output_segment+0x1d4>)
 801441a:	4868      	ldr	r0, [pc, #416]	@ (80145bc <tcp_output_segment+0x1d0>)
 801441c:	f006 fec8 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <tcp_output_segment+0x48>
 8014426:	4b63      	ldr	r3, [pc, #396]	@ (80145b4 <tcp_output_segment+0x1c8>)
 8014428:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801442c:	4965      	ldr	r1, [pc, #404]	@ (80145c4 <tcp_output_segment+0x1d8>)
 801442e:	4863      	ldr	r0, [pc, #396]	@ (80145bc <tcp_output_segment+0x1d0>)
 8014430:	f006 febe 	bl	801b1b0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014434:	68f8      	ldr	r0, [r7, #12]
 8014436:	f7ff ffb9 	bl	80143ac <tcp_output_segment_busy>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d001      	beq.n	8014444 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	e0b3      	b.n	80145ac <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	691c      	ldr	r4, [r3, #16]
 801444c:	4610      	mov	r0, r2
 801444e:	f7f9 fb64 	bl	800db1a <lwip_htonl>
 8014452:	4603      	mov	r3, r0
 8014454:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	691c      	ldr	r4, [r3, #16]
 801445e:	4610      	mov	r0, r2
 8014460:	f7f9 fb46 	bl	800daf0 <lwip_htons>
 8014464:	4603      	mov	r3, r0
 8014466:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801446c:	68ba      	ldr	r2, [r7, #8]
 801446e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014470:	441a      	add	r2, r3
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	3314      	adds	r3, #20
 801447c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	7b1b      	ldrb	r3, [r3, #12]
 8014482:	f003 0301 	and.w	r3, r3, #1
 8014486:	2b00      	cmp	r3, #0
 8014488:	d015      	beq.n	80144b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	3304      	adds	r3, #4
 801448e:	461a      	mov	r2, r3
 8014490:	6879      	ldr	r1, [r7, #4]
 8014492:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8014496:	f7fc fe71 	bl	801117c <tcp_eff_send_mss_netif>
 801449a:	4603      	mov	r3, r0
 801449c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801449e:	8b7b      	ldrh	r3, [r7, #26]
 80144a0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7f9 fb38 	bl	800db1a <lwip_htonl>
 80144aa:	4602      	mov	r2, r0
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	3304      	adds	r3, #4
 80144b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80144bc:	2b00      	cmp	r3, #0
 80144be:	da02      	bge.n	80144c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	2200      	movs	r2, #0
 80144c4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10c      	bne.n	80144e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80144ce:	4b3e      	ldr	r3, [pc, #248]	@ (80145c8 <tcp_output_segment+0x1dc>)
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	691b      	ldr	r3, [r3, #16]
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7f9 fb1c 	bl	800db1a <lwip_htonl>
 80144e2:	4602      	mov	r2, r0
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	691a      	ldr	r2, [r3, #16]
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	685b      	ldr	r3, [r3, #4]
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	8959      	ldrh	r1, [r3, #10]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	8b3a      	ldrh	r2, [r7, #24]
 8014502:	1a8a      	subs	r2, r1, r2
 8014504:	b292      	uxth	r2, r2
 8014506:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	8919      	ldrh	r1, [r3, #8]
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	8b3a      	ldrh	r2, [r7, #24]
 8014514:	1a8a      	subs	r2, r1, r2
 8014516:	b292      	uxth	r2, r2
 8014518:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	6912      	ldr	r2, [r2, #16]
 8014522:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	691b      	ldr	r3, [r3, #16]
 8014528:	2200      	movs	r2, #0
 801452a:	741a      	strb	r2, [r3, #16]
 801452c:	2200      	movs	r2, #0
 801452e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	691a      	ldr	r2, [r3, #16]
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	7b1b      	ldrb	r3, [r3, #12]
 8014538:	f003 0301 	and.w	r3, r3, #1
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <tcp_output_segment+0x158>
 8014540:	2318      	movs	r3, #24
 8014542:	e000      	b.n	8014546 <tcp_output_segment+0x15a>
 8014544:	2314      	movs	r3, #20
 8014546:	4413      	add	r3, r2
 8014548:	69fa      	ldr	r2, [r7, #28]
 801454a:	429a      	cmp	r2, r3
 801454c:	d006      	beq.n	801455c <tcp_output_segment+0x170>
 801454e:	4b19      	ldr	r3, [pc, #100]	@ (80145b4 <tcp_output_segment+0x1c8>)
 8014550:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014554:	491d      	ldr	r1, [pc, #116]	@ (80145cc <tcp_output_segment+0x1e0>)
 8014556:	4819      	ldr	r0, [pc, #100]	@ (80145bc <tcp_output_segment+0x1d0>)
 8014558:	f006 fe2a 	bl	801b1b0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014564:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014566:	68bd      	ldr	r5, [r7, #8]
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801456c:	68fa      	ldr	r2, [r7, #12]
 801456e:	6914      	ldr	r4, [r2, #16]
 8014570:	9300      	str	r3, [sp, #0]
 8014572:	462b      	mov	r3, r5
 8014574:	460a      	mov	r2, r1
 8014576:	2106      	movs	r1, #6
 8014578:	f7f9 fbec 	bl	800dd54 <ip_chksum_pseudo>
 801457c:	4603      	mov	r3, r0
 801457e:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	6858      	ldr	r0, [r3, #4]
 8014584:	68b9      	ldr	r1, [r7, #8]
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	1d1c      	adds	r4, r3, #4
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	7add      	ldrb	r5, [r3, #11]
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	7a9b      	ldrb	r3, [r3, #10]
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	9202      	str	r2, [sp, #8]
 8014596:	2206      	movs	r2, #6
 8014598:	9201      	str	r2, [sp, #4]
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	462b      	mov	r3, r5
 801459e:	4622      	mov	r2, r4
 80145a0:	f004 fdaa 	bl	80190f8 <ip4_output_if>
 80145a4:	4603      	mov	r3, r0
 80145a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80145a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3720      	adds	r7, #32
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bdb0      	pop	{r4, r5, r7, pc}
 80145b4:	0801f4d0 	.word	0x0801f4d0
 80145b8:	0801faf0 	.word	0x0801faf0
 80145bc:	0801f524 	.word	0x0801f524
 80145c0:	0801fb10 	.word	0x0801fb10
 80145c4:	0801fb30 	.word	0x0801fb30
 80145c8:	20013d5c 	.word	0x20013d5c
 80145cc:	0801fb54 	.word	0x0801fb54

080145d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80145d0:	b5b0      	push	{r4, r5, r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_rexmit_rto_prepare+0x1c>
 80145de:	4b36      	ldr	r3, [pc, #216]	@ (80146b8 <tcp_rexmit_rto_prepare+0xe8>)
 80145e0:	f240 6263 	movw	r2, #1635	@ 0x663
 80145e4:	4935      	ldr	r1, [pc, #212]	@ (80146bc <tcp_rexmit_rto_prepare+0xec>)
 80145e6:	4836      	ldr	r0, [pc, #216]	@ (80146c0 <tcp_rexmit_rto_prepare+0xf0>)
 80145e8:	f006 fde2 	bl	801b1b0 <iprintf>

  if (pcb->unacked == NULL) {
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d102      	bne.n	80145fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80145f4:	f06f 0305 	mvn.w	r3, #5
 80145f8:	e059      	b.n	80146ae <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145fe:	60fb      	str	r3, [r7, #12]
 8014600:	e00b      	b.n	801461a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014602:	68f8      	ldr	r0, [r7, #12]
 8014604:	f7ff fed2 	bl	80143ac <tcp_output_segment_busy>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d002      	beq.n	8014614 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801460e:	f06f 0305 	mvn.w	r3, #5
 8014612:	e04c      	b.n	80146ae <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1ef      	bne.n	8014602 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014622:	68f8      	ldr	r0, [r7, #12]
 8014624:	f7ff fec2 	bl	80143ac <tcp_output_segment_busy>
 8014628:	4603      	mov	r3, r0
 801462a:	2b00      	cmp	r3, #0
 801462c:	d002      	beq.n	8014634 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801462e:	f06f 0305 	mvn.w	r3, #5
 8014632:	e03c      	b.n	80146ae <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014640:	2b00      	cmp	r3, #0
 8014642:	d104      	bne.n	801464e <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	895a      	ldrh	r2, [r3, #10]
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	8b5b      	ldrh	r3, [r3, #26]
 8014660:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8014664:	b29a      	uxth	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	4618      	mov	r0, r3
 8014672:	f7f9 fa52 	bl	800db1a <lwip_htonl>
 8014676:	4604      	mov	r4, r0
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	891b      	ldrh	r3, [r3, #8]
 801467c:	461d      	mov	r5, r3
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	691b      	ldr	r3, [r3, #16]
 8014682:	899b      	ldrh	r3, [r3, #12]
 8014684:	b29b      	uxth	r3, r3
 8014686:	4618      	mov	r0, r3
 8014688:	f7f9 fa32 	bl	800daf0 <lwip_htons>
 801468c:	4603      	mov	r3, r0
 801468e:	b2db      	uxtb	r3, r3
 8014690:	f003 0303 	and.w	r3, r3, #3
 8014694:	2b00      	cmp	r3, #0
 8014696:	d001      	beq.n	801469c <tcp_rexmit_rto_prepare+0xcc>
 8014698:	2301      	movs	r3, #1
 801469a:	e000      	b.n	801469e <tcp_rexmit_rto_prepare+0xce>
 801469c:	2300      	movs	r3, #0
 801469e:	442b      	add	r3, r5
 80146a0:	18e2      	adds	r2, r4, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80146ac:	2300      	movs	r3, #0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3710      	adds	r7, #16
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bdb0      	pop	{r4, r5, r7, pc}
 80146b6:	bf00      	nop
 80146b8:	0801f4d0 	.word	0x0801f4d0
 80146bc:	0801fb68 	.word	0x0801fb68
 80146c0:	0801f524 	.word	0x0801f524

080146c4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d106      	bne.n	80146e0 <tcp_rexmit_rto_commit+0x1c>
 80146d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014708 <tcp_rexmit_rto_commit+0x44>)
 80146d4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80146d8:	490c      	ldr	r1, [pc, #48]	@ (801470c <tcp_rexmit_rto_commit+0x48>)
 80146da:	480d      	ldr	r0, [pc, #52]	@ (8014710 <tcp_rexmit_rto_commit+0x4c>)
 80146dc:	f006 fd68 	bl	801b1b0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80146e6:	2bff      	cmp	r3, #255	@ 0xff
 80146e8:	d007      	beq.n	80146fa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80146f0:	3301      	adds	r3, #1
 80146f2:	b2da      	uxtb	r2, r3
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f7ff fc60 	bl	8013fc0 <tcp_output>
}
 8014700:	bf00      	nop
 8014702:	3708      	adds	r7, #8
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}
 8014708:	0801f4d0 	.word	0x0801f4d0
 801470c:	0801fb8c 	.word	0x0801fb8c
 8014710:	0801f524 	.word	0x0801f524

08014714 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d106      	bne.n	8014730 <tcp_rexmit_rto+0x1c>
 8014722:	4b0a      	ldr	r3, [pc, #40]	@ (801474c <tcp_rexmit_rto+0x38>)
 8014724:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014728:	4909      	ldr	r1, [pc, #36]	@ (8014750 <tcp_rexmit_rto+0x3c>)
 801472a:	480a      	ldr	r0, [pc, #40]	@ (8014754 <tcp_rexmit_rto+0x40>)
 801472c:	f006 fd40 	bl	801b1b0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7ff ff4d 	bl	80145d0 <tcp_rexmit_rto_prepare>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d102      	bne.n	8014742 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f7ff ffc1 	bl	80146c4 <tcp_rexmit_rto_commit>
  }
}
 8014742:	bf00      	nop
 8014744:	3708      	adds	r7, #8
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	0801f4d0 	.word	0x0801f4d0
 8014750:	0801fbb0 	.word	0x0801fbb0
 8014754:	0801f524 	.word	0x0801f524

08014758 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014758:	b590      	push	{r4, r7, lr}
 801475a:	b085      	sub	sp, #20
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <tcp_rexmit+0x1c>
 8014766:	4b2f      	ldr	r3, [pc, #188]	@ (8014824 <tcp_rexmit+0xcc>)
 8014768:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801476c:	492e      	ldr	r1, [pc, #184]	@ (8014828 <tcp_rexmit+0xd0>)
 801476e:	482f      	ldr	r0, [pc, #188]	@ (801482c <tcp_rexmit+0xd4>)
 8014770:	f006 fd1e 	bl	801b1b0 <iprintf>

  if (pcb->unacked == NULL) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014778:	2b00      	cmp	r3, #0
 801477a:	d102      	bne.n	8014782 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801477c:	f06f 0305 	mvn.w	r3, #5
 8014780:	e04c      	b.n	801481c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014786:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014788:	68b8      	ldr	r0, [r7, #8]
 801478a:	f7ff fe0f 	bl	80143ac <tcp_output_segment_busy>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014794:	f06f 0305 	mvn.w	r3, #5
 8014798:	e040      	b.n	801481c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	681a      	ldr	r2, [r3, #0]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	336c      	adds	r3, #108	@ 0x6c
 80147a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147a8:	e002      	b.n	80147b0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d011      	beq.n	80147dc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	691b      	ldr	r3, [r3, #16]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7f9 f9aa 	bl	800db1a <lwip_htonl>
 80147c6:	4604      	mov	r4, r0
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	691b      	ldr	r3, [r3, #16]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f9 f9a3 	bl	800db1a <lwip_htonl>
 80147d4:	4603      	mov	r3, r0
 80147d6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147d8:	2b00      	cmp	r3, #0
 80147da:	dbe6      	blt.n	80147aa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	68ba      	ldr	r2, [r7, #8]
 80147e8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d103      	bne.n	80147fa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014800:	2bff      	cmp	r3, #255	@ 0xff
 8014802:	d007      	beq.n	8014814 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801480a:	3301      	adds	r3, #1
 801480c:	b2da      	uxtb	r2, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2200      	movs	r2, #0
 8014818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801481a:	2300      	movs	r3, #0
}
 801481c:	4618      	mov	r0, r3
 801481e:	3714      	adds	r7, #20
 8014820:	46bd      	mov	sp, r7
 8014822:	bd90      	pop	{r4, r7, pc}
 8014824:	0801f4d0 	.word	0x0801f4d0
 8014828:	0801fbcc 	.word	0x0801fbcc
 801482c:	0801f524 	.word	0x0801f524

08014830 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d106      	bne.n	801484c <tcp_rexmit_fast+0x1c>
 801483e:	4b2a      	ldr	r3, [pc, #168]	@ (80148e8 <tcp_rexmit_fast+0xb8>)
 8014840:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014844:	4929      	ldr	r1, [pc, #164]	@ (80148ec <tcp_rexmit_fast+0xbc>)
 8014846:	482a      	ldr	r0, [pc, #168]	@ (80148f0 <tcp_rexmit_fast+0xc0>)
 8014848:	f006 fcb2 	bl	801b1b0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014850:	2b00      	cmp	r3, #0
 8014852:	d044      	beq.n	80148de <tcp_rexmit_fast+0xae>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	8b5b      	ldrh	r3, [r3, #26]
 8014858:	f003 0304 	and.w	r3, r3, #4
 801485c:	2b00      	cmp	r3, #0
 801485e:	d13e      	bne.n	80148de <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f7ff ff79 	bl	8014758 <tcp_rexmit>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d138      	bne.n	80148de <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014878:	4293      	cmp	r3, r2
 801487a:	bf28      	it	cs
 801487c:	4613      	movcs	r3, r2
 801487e:	b29b      	uxth	r3, r3
 8014880:	0fda      	lsrs	r2, r3, #31
 8014882:	4413      	add	r3, r2
 8014884:	105b      	asrs	r3, r3, #1
 8014886:	b29a      	uxth	r2, r3
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014894:	461a      	mov	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	429a      	cmp	r2, r3
 801489e:	d206      	bcs.n	80148ae <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80148b8:	4619      	mov	r1, r3
 80148ba:	0049      	lsls	r1, r1, #1
 80148bc:	440b      	add	r3, r1
 80148be:	b29b      	uxth	r3, r3
 80148c0:	4413      	add	r3, r2
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	8b5b      	ldrh	r3, [r3, #26]
 80148ce:	f043 0304 	orr.w	r3, r3, #4
 80148d2:	b29a      	uxth	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2200      	movs	r2, #0
 80148dc:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80148de:	bf00      	nop
 80148e0:	3708      	adds	r7, #8
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	bf00      	nop
 80148e8:	0801f4d0 	.word	0x0801f4d0
 80148ec:	0801fbe4 	.word	0x0801fbe4
 80148f0:	0801f524 	.word	0x0801f524

080148f4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b086      	sub	sp, #24
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	607b      	str	r3, [r7, #4]
 80148fe:	460b      	mov	r3, r1
 8014900:	817b      	strh	r3, [r7, #10]
 8014902:	4613      	mov	r3, r2
 8014904:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014906:	897a      	ldrh	r2, [r7, #10]
 8014908:	893b      	ldrh	r3, [r7, #8]
 801490a:	4413      	add	r3, r2
 801490c:	b29b      	uxth	r3, r3
 801490e:	3314      	adds	r3, #20
 8014910:	b29b      	uxth	r3, r3
 8014912:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014916:	4619      	mov	r1, r3
 8014918:	2022      	movs	r0, #34	@ 0x22
 801491a:	f7fa fb23 	bl	800ef64 <pbuf_alloc>
 801491e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d04d      	beq.n	80149c2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014926:	897b      	ldrh	r3, [r7, #10]
 8014928:	3313      	adds	r3, #19
 801492a:	697a      	ldr	r2, [r7, #20]
 801492c:	8952      	ldrh	r2, [r2, #10]
 801492e:	4293      	cmp	r3, r2
 8014930:	db06      	blt.n	8014940 <tcp_output_alloc_header_common+0x4c>
 8014932:	4b26      	ldr	r3, [pc, #152]	@ (80149cc <tcp_output_alloc_header_common+0xd8>)
 8014934:	f240 7223 	movw	r2, #1827	@ 0x723
 8014938:	4925      	ldr	r1, [pc, #148]	@ (80149d0 <tcp_output_alloc_header_common+0xdc>)
 801493a:	4826      	ldr	r0, [pc, #152]	@ (80149d4 <tcp_output_alloc_header_common+0xe0>)
 801493c:	f006 fc38 	bl	801b1b0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014946:	8c3b      	ldrh	r3, [r7, #32]
 8014948:	4618      	mov	r0, r3
 801494a:	f7f9 f8d1 	bl	800daf0 <lwip_htons>
 801494e:	4603      	mov	r3, r0
 8014950:	461a      	mov	r2, r3
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014958:	4618      	mov	r0, r3
 801495a:	f7f9 f8c9 	bl	800daf0 <lwip_htons>
 801495e:	4603      	mov	r3, r0
 8014960:	461a      	mov	r2, r3
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801496c:	68f8      	ldr	r0, [r7, #12]
 801496e:	f7f9 f8d4 	bl	800db1a <lwip_htonl>
 8014972:	4602      	mov	r2, r0
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014978:	897b      	ldrh	r3, [r7, #10]
 801497a:	089b      	lsrs	r3, r3, #2
 801497c:	b29b      	uxth	r3, r3
 801497e:	3305      	adds	r3, #5
 8014980:	b29b      	uxth	r3, r3
 8014982:	031b      	lsls	r3, r3, #12
 8014984:	b29a      	uxth	r2, r3
 8014986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801498a:	b29b      	uxth	r3, r3
 801498c:	4313      	orrs	r3, r2
 801498e:	b29b      	uxth	r3, r3
 8014990:	4618      	mov	r0, r3
 8014992:	f7f9 f8ad 	bl	800daf0 <lwip_htons>
 8014996:	4603      	mov	r3, r0
 8014998:	461a      	mov	r2, r3
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801499e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7f9 f8a5 	bl	800daf0 <lwip_htons>
 80149a6:	4603      	mov	r3, r0
 80149a8:	461a      	mov	r2, r3
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	2200      	movs	r2, #0
 80149b2:	741a      	strb	r2, [r3, #16]
 80149b4:	2200      	movs	r2, #0
 80149b6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	2200      	movs	r2, #0
 80149bc:	749a      	strb	r2, [r3, #18]
 80149be:	2200      	movs	r2, #0
 80149c0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80149c2:	697b      	ldr	r3, [r7, #20]
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3718      	adds	r7, #24
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}
 80149cc:	0801f4d0 	.word	0x0801f4d0
 80149d0:	0801fc04 	.word	0x0801fc04
 80149d4:	0801f524 	.word	0x0801f524

080149d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80149d8:	b5b0      	push	{r4, r5, r7, lr}
 80149da:	b08a      	sub	sp, #40	@ 0x28
 80149dc:	af04      	add	r7, sp, #16
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	607b      	str	r3, [r7, #4]
 80149e2:	460b      	mov	r3, r1
 80149e4:	817b      	strh	r3, [r7, #10]
 80149e6:	4613      	mov	r3, r2
 80149e8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d106      	bne.n	80149fe <tcp_output_alloc_header+0x26>
 80149f0:	4b15      	ldr	r3, [pc, #84]	@ (8014a48 <tcp_output_alloc_header+0x70>)
 80149f2:	f240 7242 	movw	r2, #1858	@ 0x742
 80149f6:	4915      	ldr	r1, [pc, #84]	@ (8014a4c <tcp_output_alloc_header+0x74>)
 80149f8:	4815      	ldr	r0, [pc, #84]	@ (8014a50 <tcp_output_alloc_header+0x78>)
 80149fa:	f006 fbd9 	bl	801b1b0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	8adb      	ldrh	r3, [r3, #22]
 8014a06:	68fa      	ldr	r2, [r7, #12]
 8014a08:	8b12      	ldrh	r2, [r2, #24]
 8014a0a:	68f9      	ldr	r1, [r7, #12]
 8014a0c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014a0e:	893d      	ldrh	r5, [r7, #8]
 8014a10:	897c      	ldrh	r4, [r7, #10]
 8014a12:	9103      	str	r1, [sp, #12]
 8014a14:	2110      	movs	r1, #16
 8014a16:	9102      	str	r1, [sp, #8]
 8014a18:	9201      	str	r2, [sp, #4]
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	462a      	mov	r2, r5
 8014a20:	4621      	mov	r1, r4
 8014a22:	f7ff ff67 	bl	80148f4 <tcp_output_alloc_header_common>
 8014a26:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d006      	beq.n	8014a3c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014a36:	441a      	add	r2, r3
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8014a3c:	697b      	ldr	r3, [r7, #20]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3718      	adds	r7, #24
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bdb0      	pop	{r4, r5, r7, pc}
 8014a46:	bf00      	nop
 8014a48:	0801f4d0 	.word	0x0801f4d0
 8014a4c:	0801fc34 	.word	0x0801fc34
 8014a50:	0801f524 	.word	0x0801f524

08014a54 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b088      	sub	sp, #32
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	4611      	mov	r1, r2
 8014a60:	461a      	mov	r2, r3
 8014a62:	460b      	mov	r3, r1
 8014a64:	71fb      	strb	r3, [r7, #7]
 8014a66:	4613      	mov	r3, r2
 8014a68:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d106      	bne.n	8014a82 <tcp_output_fill_options+0x2e>
 8014a74:	4b12      	ldr	r3, [pc, #72]	@ (8014ac0 <tcp_output_fill_options+0x6c>)
 8014a76:	f240 7256 	movw	r2, #1878	@ 0x756
 8014a7a:	4912      	ldr	r1, [pc, #72]	@ (8014ac4 <tcp_output_fill_options+0x70>)
 8014a7c:	4812      	ldr	r0, [pc, #72]	@ (8014ac8 <tcp_output_fill_options+0x74>)
 8014a7e:	f006 fb97 	bl	801b1b0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014a88:	69bb      	ldr	r3, [r7, #24]
 8014a8a:	3314      	adds	r3, #20
 8014a8c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014a8e:	8bfb      	ldrh	r3, [r7, #30]
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	461a      	mov	r2, r3
 8014a94:	79fb      	ldrb	r3, [r7, #7]
 8014a96:	009b      	lsls	r3, r3, #2
 8014a98:	f003 0304 	and.w	r3, r3, #4
 8014a9c:	4413      	add	r3, r2
 8014a9e:	3314      	adds	r3, #20
 8014aa0:	69ba      	ldr	r2, [r7, #24]
 8014aa2:	4413      	add	r3, r2
 8014aa4:	697a      	ldr	r2, [r7, #20]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d006      	beq.n	8014ab8 <tcp_output_fill_options+0x64>
 8014aaa:	4b05      	ldr	r3, [pc, #20]	@ (8014ac0 <tcp_output_fill_options+0x6c>)
 8014aac:	f240 7275 	movw	r2, #1909	@ 0x775
 8014ab0:	4906      	ldr	r1, [pc, #24]	@ (8014acc <tcp_output_fill_options+0x78>)
 8014ab2:	4805      	ldr	r0, [pc, #20]	@ (8014ac8 <tcp_output_fill_options+0x74>)
 8014ab4:	f006 fb7c 	bl	801b1b0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014ab8:	bf00      	nop
 8014aba:	3720      	adds	r7, #32
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	0801f4d0 	.word	0x0801f4d0
 8014ac4:	0801fc5c 	.word	0x0801fc5c
 8014ac8:	0801f524 	.word	0x0801f524
 8014acc:	0801fb54 	.word	0x0801fb54

08014ad0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b08c      	sub	sp, #48	@ 0x30
 8014ad4:	af04      	add	r7, sp, #16
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d106      	bne.n	8014af2 <tcp_output_control_segment+0x22>
 8014ae4:	4b24      	ldr	r3, [pc, #144]	@ (8014b78 <tcp_output_control_segment+0xa8>)
 8014ae6:	f240 7287 	movw	r2, #1927	@ 0x787
 8014aea:	4924      	ldr	r1, [pc, #144]	@ (8014b7c <tcp_output_control_segment+0xac>)
 8014aec:	4824      	ldr	r0, [pc, #144]	@ (8014b80 <tcp_output_control_segment+0xb0>)
 8014aee:	f006 fb5f 	bl	801b1b0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014af2:	683a      	ldr	r2, [r7, #0]
 8014af4:	6879      	ldr	r1, [r7, #4]
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f7fe ff1c 	bl	8013934 <tcp_route>
 8014afc:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d102      	bne.n	8014b0a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014b04:	23fc      	movs	r3, #252	@ 0xfc
 8014b06:	77fb      	strb	r3, [r7, #31]
 8014b08:	e02c      	b.n	8014b64 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	891a      	ldrh	r2, [r3, #8]
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2106      	movs	r1, #6
 8014b1c:	68b8      	ldr	r0, [r7, #8]
 8014b1e:	f7f9 f919 	bl	800dd54 <ip_chksum_pseudo>
 8014b22:	4603      	mov	r3, r0
 8014b24:	461a      	mov	r2, r3
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d006      	beq.n	8014b3e <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	7adb      	ldrb	r3, [r3, #11]
 8014b34:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	7a9b      	ldrb	r3, [r3, #10]
 8014b3a:	777b      	strb	r3, [r7, #29]
 8014b3c:	e003      	b.n	8014b46 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014b3e:	23ff      	movs	r3, #255	@ 0xff
 8014b40:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014b42:	2300      	movs	r3, #0
 8014b44:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b46:	7fba      	ldrb	r2, [r7, #30]
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	9302      	str	r3, [sp, #8]
 8014b4c:	2306      	movs	r3, #6
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	7f7b      	ldrb	r3, [r7, #29]
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	4613      	mov	r3, r2
 8014b56:	683a      	ldr	r2, [r7, #0]
 8014b58:	6879      	ldr	r1, [r7, #4]
 8014b5a:	68b8      	ldr	r0, [r7, #8]
 8014b5c:	f004 facc 	bl	80190f8 <ip4_output_if>
 8014b60:	4603      	mov	r3, r0
 8014b62:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014b64:	68b8      	ldr	r0, [r7, #8]
 8014b66:	f7fa fce5 	bl	800f534 <pbuf_free>
  return err;
 8014b6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3720      	adds	r7, #32
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	0801f4d0 	.word	0x0801f4d0
 8014b7c:	0801fc84 	.word	0x0801fc84
 8014b80:	0801f524 	.word	0x0801f524

08014b84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014b84:	b590      	push	{r4, r7, lr}
 8014b86:	b08b      	sub	sp, #44	@ 0x2c
 8014b88:	af04      	add	r7, sp, #16
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
 8014b90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d106      	bne.n	8014ba6 <tcp_rst+0x22>
 8014b98:	4b1f      	ldr	r3, [pc, #124]	@ (8014c18 <tcp_rst+0x94>)
 8014b9a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8014b9e:	491f      	ldr	r1, [pc, #124]	@ (8014c1c <tcp_rst+0x98>)
 8014ba0:	481f      	ldr	r0, [pc, #124]	@ (8014c20 <tcp_rst+0x9c>)
 8014ba2:	f006 fb05 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d106      	bne.n	8014bba <tcp_rst+0x36>
 8014bac:	4b1a      	ldr	r3, [pc, #104]	@ (8014c18 <tcp_rst+0x94>)
 8014bae:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8014bb2:	491c      	ldr	r1, [pc, #112]	@ (8014c24 <tcp_rst+0xa0>)
 8014bb4:	481a      	ldr	r0, [pc, #104]	@ (8014c20 <tcp_rst+0x9c>)
 8014bb6:	f006 fafb 	bl	801b1b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014bba:	2300      	movs	r3, #0
 8014bbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014bbe:	f24a 032d 	movw	r3, #41005	@ 0xa02d
 8014bc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014bc4:	7dfb      	ldrb	r3, [r7, #23]
 8014bc6:	b29c      	uxth	r4, r3
 8014bc8:	68b8      	ldr	r0, [r7, #8]
 8014bca:	f7f8 ffa6 	bl	800db1a <lwip_htonl>
 8014bce:	4602      	mov	r2, r0
 8014bd0:	8abb      	ldrh	r3, [r7, #20]
 8014bd2:	9303      	str	r3, [sp, #12]
 8014bd4:	2314      	movs	r3, #20
 8014bd6:	9302      	str	r3, [sp, #8]
 8014bd8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014bda:	9301      	str	r3, [sp, #4]
 8014bdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014bde:	9300      	str	r3, [sp, #0]
 8014be0:	4613      	mov	r3, r2
 8014be2:	2200      	movs	r2, #0
 8014be4:	4621      	mov	r1, r4
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7ff fe84 	bl	80148f4 <tcp_output_alloc_header_common>
 8014bec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00c      	beq.n	8014c0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bf4:	7dfb      	ldrb	r3, [r7, #23]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	6939      	ldr	r1, [r7, #16]
 8014bfa:	68f8      	ldr	r0, [r7, #12]
 8014bfc:	f7ff ff2a 	bl	8014a54 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c02:	683a      	ldr	r2, [r7, #0]
 8014c04:	6939      	ldr	r1, [r7, #16]
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7ff ff62 	bl	8014ad0 <tcp_output_control_segment>
 8014c0c:	e000      	b.n	8014c10 <tcp_rst+0x8c>
    return;
 8014c0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014c10:	371c      	adds	r7, #28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd90      	pop	{r4, r7, pc}
 8014c16:	bf00      	nop
 8014c18:	0801f4d0 	.word	0x0801f4d0
 8014c1c:	0801fcb0 	.word	0x0801fcb0
 8014c20:	0801f524 	.word	0x0801f524
 8014c24:	0801fccc 	.word	0x0801fccc

08014c28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014c28:	b590      	push	{r4, r7, lr}
 8014c2a:	b087      	sub	sp, #28
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014c30:	2300      	movs	r3, #0
 8014c32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014c34:	2300      	movs	r3, #0
 8014c36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d106      	bne.n	8014c4c <tcp_send_empty_ack+0x24>
 8014c3e:	4b28      	ldr	r3, [pc, #160]	@ (8014ce0 <tcp_send_empty_ack+0xb8>)
 8014c40:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8014c44:	4927      	ldr	r1, [pc, #156]	@ (8014ce4 <tcp_send_empty_ack+0xbc>)
 8014c46:	4828      	ldr	r0, [pc, #160]	@ (8014ce8 <tcp_send_empty_ack+0xc0>)
 8014c48:	f006 fab2 	bl	801b1b0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c4c:	7dfb      	ldrb	r3, [r7, #23]
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	f003 0304 	and.w	r3, r3, #4
 8014c56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c58:	7d7b      	ldrb	r3, [r7, #21]
 8014c5a:	b29c      	uxth	r4, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7f8 ff5a 	bl	800db1a <lwip_htonl>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2200      	movs	r2, #0
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f7ff feb3 	bl	80149d8 <tcp_output_alloc_header>
 8014c72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d109      	bne.n	8014c8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	8b5b      	ldrh	r3, [r3, #26]
 8014c7e:	f043 0303 	orr.w	r3, r3, #3
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014c88:	f06f 0301 	mvn.w	r3, #1
 8014c8c:	e023      	b.n	8014cd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014c8e:	7dbb      	ldrb	r3, [r7, #22]
 8014c90:	7dfa      	ldrb	r2, [r7, #23]
 8014c92:	6939      	ldr	r1, [r7, #16]
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ff fedd 	bl	8014a54 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3304      	adds	r3, #4
 8014ca0:	6939      	ldr	r1, [r7, #16]
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f7ff ff14 	bl	8014ad0 <tcp_output_control_segment>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d007      	beq.n	8014cc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	8b5b      	ldrh	r3, [r3, #26]
 8014cb8:	f043 0303 	orr.w	r3, r3, #3
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	835a      	strh	r2, [r3, #26]
 8014cc2:	e006      	b.n	8014cd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	8b5b      	ldrh	r3, [r3, #26]
 8014cc8:	f023 0303 	bic.w	r3, r3, #3
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	371c      	adds	r7, #28
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd90      	pop	{r4, r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	0801f4d0 	.word	0x0801f4d0
 8014ce4:	0801fce8 	.word	0x0801fce8
 8014ce8:	0801f524 	.word	0x0801f524

08014cec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014cec:	b590      	push	{r4, r7, lr}
 8014cee:	b085      	sub	sp, #20
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d106      	bne.n	8014d0c <tcp_keepalive+0x20>
 8014cfe:	4b18      	ldr	r3, [pc, #96]	@ (8014d60 <tcp_keepalive+0x74>)
 8014d00:	f640 0224 	movw	r2, #2084	@ 0x824
 8014d04:	4917      	ldr	r1, [pc, #92]	@ (8014d64 <tcp_keepalive+0x78>)
 8014d06:	4818      	ldr	r0, [pc, #96]	@ (8014d68 <tcp_keepalive+0x7c>)
 8014d08:	f006 fa52 	bl	801b1b0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014d0c:	7abb      	ldrb	r3, [r7, #10]
 8014d0e:	b29c      	uxth	r4, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d14:	3b01      	subs	r3, #1
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f8 feff 	bl	800db1a <lwip_htonl>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2200      	movs	r2, #0
 8014d20:	4621      	mov	r1, r4
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7ff fe58 	bl	80149d8 <tcp_output_alloc_header>
 8014d28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d102      	bne.n	8014d36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014d30:	f04f 33ff 	mov.w	r3, #4294967295
 8014d34:	e010      	b.n	8014d58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d36:	7abb      	ldrb	r3, [r7, #10]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	68f9      	ldr	r1, [r7, #12]
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7ff fe89 	bl	8014a54 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	3304      	adds	r3, #4
 8014d48:	68f9      	ldr	r1, [r7, #12]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7ff fec0 	bl	8014ad0 <tcp_output_control_segment>
 8014d50:	4603      	mov	r3, r0
 8014d52:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3714      	adds	r7, #20
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd90      	pop	{r4, r7, pc}
 8014d60:	0801f4d0 	.word	0x0801f4d0
 8014d64:	0801fd08 	.word	0x0801fd08
 8014d68:	0801f524 	.word	0x0801f524

08014d6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014d6c:	b590      	push	{r4, r7, lr}
 8014d6e:	b08b      	sub	sp, #44	@ 0x2c
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d74:	2300      	movs	r3, #0
 8014d76:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d106      	bne.n	8014d8c <tcp_zero_window_probe+0x20>
 8014d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8014eb4 <tcp_zero_window_probe+0x148>)
 8014d80:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014d84:	494c      	ldr	r1, [pc, #304]	@ (8014eb8 <tcp_zero_window_probe+0x14c>)
 8014d86:	484d      	ldr	r0, [pc, #308]	@ (8014ebc <tcp_zero_window_probe+0x150>)
 8014d88:	f006 fa12 	bl	801b1b0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8014d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d101      	bne.n	8014d9c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	e087      	b.n	8014eac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014da2:	2bff      	cmp	r3, #255	@ 0xff
 8014da4:	d007      	beq.n	8014db6 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014dac:	3301      	adds	r3, #1
 8014dae:	b2da      	uxtb	r2, r3
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db8:	691b      	ldr	r3, [r3, #16]
 8014dba:	899b      	ldrh	r3, [r3, #12]
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7f8 fe96 	bl	800daf0 <lwip_htons>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	f003 0301 	and.w	r3, r3, #1
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d005      	beq.n	8014ddc <tcp_zero_window_probe+0x70>
 8014dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd2:	891b      	ldrh	r3, [r3, #8]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d101      	bne.n	8014ddc <tcp_zero_window_probe+0x70>
 8014dd8:	2301      	movs	r3, #1
 8014dda:	e000      	b.n	8014dde <tcp_zero_window_probe+0x72>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014de2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	bf0c      	ite	eq
 8014dea:	2301      	moveq	r3, #1
 8014dec:	2300      	movne	r3, #0
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014df2:	7cfb      	ldrb	r3, [r7, #19]
 8014df4:	b299      	uxth	r1, r3
 8014df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df8:	691b      	ldr	r3, [r3, #16]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	8c3a      	ldrh	r2, [r7, #32]
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f7ff fdea 	bl	80149d8 <tcp_output_alloc_header>
 8014e04:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d102      	bne.n	8014e12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e10:	e04c      	b.n	8014eac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014e18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d011      	beq.n	8014e44 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	899b      	ldrh	r3, [r3, #12]
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	b21b      	sxth	r3, r3
 8014e28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014e2c:	b21c      	sxth	r4, r3
 8014e2e:	2011      	movs	r0, #17
 8014e30:	f7f8 fe5e 	bl	800daf0 <lwip_htons>
 8014e34:	4603      	mov	r3, r0
 8014e36:	b21b      	sxth	r3, r3
 8014e38:	4323      	orrs	r3, r4
 8014e3a:	b21b      	sxth	r3, r3
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	819a      	strh	r2, [r3, #12]
 8014e42:	e010      	b.n	8014e66 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	3314      	adds	r3, #20
 8014e4a:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e4e:	6858      	ldr	r0, [r3, #4]
 8014e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	891a      	ldrh	r2, [r3, #8]
 8014e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e58:	891b      	ldrh	r3, [r3, #8]
 8014e5a:	1ad3      	subs	r3, r2, r3
 8014e5c:	b29b      	uxth	r3, r3
 8014e5e:	2201      	movs	r2, #1
 8014e60:	6979      	ldr	r1, [r7, #20]
 8014e62:	f7fa fd6d 	bl	800f940 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e68:	691b      	ldr	r3, [r3, #16]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7f8 fe54 	bl	800db1a <lwip_htonl>
 8014e72:	4603      	mov	r3, r0
 8014e74:	3301      	adds	r3, #1
 8014e76:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	1ad3      	subs	r3, r2, r3
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	da02      	bge.n	8014e8a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	68fa      	ldr	r2, [r7, #12]
 8014e88:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e8a:	7cfb      	ldrb	r3, [r7, #19]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	69f9      	ldr	r1, [r7, #28]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ff fddf 	bl	8014a54 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3304      	adds	r3, #4
 8014e9c:	69f9      	ldr	r1, [r7, #28]
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7ff fe16 	bl	8014ad0 <tcp_output_control_segment>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ea8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	372c      	adds	r7, #44	@ 0x2c
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd90      	pop	{r4, r7, pc}
 8014eb4:	0801f4d0 	.word	0x0801f4d0
 8014eb8:	0801fd24 	.word	0x0801fd24
 8014ebc:	0801f524 	.word	0x0801f524

08014ec0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014ec8:	f7fa fec0 	bl	800fc4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8014ef8 <tcpip_tcp_timer+0x38>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d103      	bne.n	8014edc <tcpip_tcp_timer+0x1c>
 8014ed4:	4b09      	ldr	r3, [pc, #36]	@ (8014efc <tcpip_tcp_timer+0x3c>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d005      	beq.n	8014ee8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014edc:	2200      	movs	r2, #0
 8014ede:	4908      	ldr	r1, [pc, #32]	@ (8014f00 <tcpip_tcp_timer+0x40>)
 8014ee0:	20fa      	movs	r0, #250	@ 0xfa
 8014ee2:	f000 f8f3 	bl	80150cc <sys_timeout>
 8014ee6:	e003      	b.n	8014ef0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014ee8:	4b06      	ldr	r3, [pc, #24]	@ (8014f04 <tcpip_tcp_timer+0x44>)
 8014eea:	2200      	movs	r2, #0
 8014eec:	601a      	str	r2, [r3, #0]
  }
}
 8014eee:	bf00      	nop
 8014ef0:	bf00      	nop
 8014ef2:	3708      	adds	r7, #8
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	20013d68 	.word	0x20013d68
 8014efc:	20013d6c 	.word	0x20013d6c
 8014f00:	08014ec1 	.word	0x08014ec1
 8014f04:	20013db8 	.word	0x20013db8

08014f08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8014f38 <tcp_timer_needed+0x30>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d10f      	bne.n	8014f34 <tcp_timer_needed+0x2c>
 8014f14:	4b09      	ldr	r3, [pc, #36]	@ (8014f3c <tcp_timer_needed+0x34>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d103      	bne.n	8014f24 <tcp_timer_needed+0x1c>
 8014f1c:	4b08      	ldr	r3, [pc, #32]	@ (8014f40 <tcp_timer_needed+0x38>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d007      	beq.n	8014f34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014f24:	4b04      	ldr	r3, [pc, #16]	@ (8014f38 <tcp_timer_needed+0x30>)
 8014f26:	2201      	movs	r2, #1
 8014f28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	4905      	ldr	r1, [pc, #20]	@ (8014f44 <tcp_timer_needed+0x3c>)
 8014f2e:	20fa      	movs	r0, #250	@ 0xfa
 8014f30:	f000 f8cc 	bl	80150cc <sys_timeout>
  }
}
 8014f34:	bf00      	nop
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	20013db8 	.word	0x20013db8
 8014f3c:	20013d68 	.word	0x20013d68
 8014f40:	20013d6c 	.word	0x20013d6c
 8014f44:	08014ec1 	.word	0x08014ec1

08014f48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f54:	200a      	movs	r0, #10
 8014f56:	f7f9 fbf9 	bl	800e74c <memp_malloc>
 8014f5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d109      	bne.n	8014f76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d151      	bne.n	801500c <sys_timeout_abs+0xc4>
 8014f68:	4b2a      	ldr	r3, [pc, #168]	@ (8015014 <sys_timeout_abs+0xcc>)
 8014f6a:	22be      	movs	r2, #190	@ 0xbe
 8014f6c:	492a      	ldr	r1, [pc, #168]	@ (8015018 <sys_timeout_abs+0xd0>)
 8014f6e:	482b      	ldr	r0, [pc, #172]	@ (801501c <sys_timeout_abs+0xd4>)
 8014f70:	f006 f91e 	bl	801b1b0 <iprintf>
    return;
 8014f74:	e04a      	b.n	801500c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	68ba      	ldr	r2, [r7, #8]
 8014f80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	68fa      	ldr	r2, [r7, #12]
 8014f8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f8e:	4b24      	ldr	r3, [pc, #144]	@ (8015020 <sys_timeout_abs+0xd8>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d103      	bne.n	8014f9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014f96:	4a22      	ldr	r2, [pc, #136]	@ (8015020 <sys_timeout_abs+0xd8>)
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	6013      	str	r3, [r2, #0]
    return;
 8014f9c:	e037      	b.n	801500e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	685a      	ldr	r2, [r3, #4]
 8014fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8015020 <sys_timeout_abs+0xd8>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	1ad3      	subs	r3, r2, r3
 8014faa:	0fdb      	lsrs	r3, r3, #31
 8014fac:	f003 0301 	and.w	r3, r3, #1
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d007      	beq.n	8014fc6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8015020 <sys_timeout_abs+0xd8>)
 8014fb8:	681a      	ldr	r2, [r3, #0]
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014fbe:	4a18      	ldr	r2, [pc, #96]	@ (8015020 <sys_timeout_abs+0xd8>)
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	6013      	str	r3, [r2, #0]
 8014fc4:	e023      	b.n	801500e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fc6:	4b16      	ldr	r3, [pc, #88]	@ (8015020 <sys_timeout_abs+0xd8>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	617b      	str	r3, [r7, #20]
 8014fcc:	e01a      	b.n	8015004 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d00b      	beq.n	8014fee <sys_timeout_abs+0xa6>
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	685a      	ldr	r2, [r3, #4]
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	1ad3      	subs	r3, r2, r3
 8014fe2:	0fdb      	lsrs	r3, r3, #31
 8014fe4:	f003 0301 	and.w	r3, r3, #1
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d007      	beq.n	8014ffe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	693a      	ldr	r2, [r7, #16]
 8014ffa:	601a      	str	r2, [r3, #0]
        break;
 8014ffc:	e007      	b.n	801500e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	617b      	str	r3, [r7, #20]
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d1e1      	bne.n	8014fce <sys_timeout_abs+0x86>
 801500a:	e000      	b.n	801500e <sys_timeout_abs+0xc6>
    return;
 801500c:	bf00      	nop
      }
    }
  }
}
 801500e:	3718      	adds	r7, #24
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	0801fd48 	.word	0x0801fd48
 8015018:	0801fd7c 	.word	0x0801fd7c
 801501c:	0801fdbc 	.word	0x0801fdbc
 8015020:	20013db0 	.word	0x20013db0

08015024 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b086      	sub	sp, #24
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	4798      	blx	r3

  now = sys_now();
 8015036:	f7ee f993 	bl	8003360 <sys_now>
 801503a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	4b0f      	ldr	r3, [pc, #60]	@ (8015080 <lwip_cyclic_timer+0x5c>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4413      	add	r3, r2
 8015046:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	1ad3      	subs	r3, r2, r3
 801504e:	0fdb      	lsrs	r3, r3, #31
 8015050:	f003 0301 	and.w	r3, r3, #1
 8015054:	b2db      	uxtb	r3, r3
 8015056:	2b00      	cmp	r3, #0
 8015058:	d009      	beq.n	801506e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	4413      	add	r3, r2
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	4907      	ldr	r1, [pc, #28]	@ (8015084 <lwip_cyclic_timer+0x60>)
 8015066:	4618      	mov	r0, r3
 8015068:	f7ff ff6e 	bl	8014f48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801506c:	e004      	b.n	8015078 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	4904      	ldr	r1, [pc, #16]	@ (8015084 <lwip_cyclic_timer+0x60>)
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	f7ff ff68 	bl	8014f48 <sys_timeout_abs>
}
 8015078:	bf00      	nop
 801507a:	3718      	adds	r7, #24
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	20013db4 	.word	0x20013db4
 8015084:	08015025 	.word	0x08015025

08015088 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b082      	sub	sp, #8
 801508c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801508e:	2301      	movs	r3, #1
 8015090:	607b      	str	r3, [r7, #4]
 8015092:	e00e      	b.n	80150b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015094:	4a0b      	ldr	r2, [pc, #44]	@ (80150c4 <sys_timeouts_init+0x3c>)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	00db      	lsls	r3, r3, #3
 80150a0:	4a08      	ldr	r2, [pc, #32]	@ (80150c4 <sys_timeouts_init+0x3c>)
 80150a2:	4413      	add	r3, r2
 80150a4:	461a      	mov	r2, r3
 80150a6:	4908      	ldr	r1, [pc, #32]	@ (80150c8 <sys_timeouts_init+0x40>)
 80150a8:	f000 f810 	bl	80150cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	3301      	adds	r3, #1
 80150b0:	607b      	str	r3, [r7, #4]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	2b04      	cmp	r3, #4
 80150b6:	d9ed      	bls.n	8015094 <sys_timeouts_init+0xc>
  }
}
 80150b8:	bf00      	nop
 80150ba:	bf00      	nop
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	0806c9c4 	.word	0x0806c9c4
 80150c8:	08015025 	.word	0x08015025

080150cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b086      	sub	sp, #24
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80150de:	d306      	bcc.n	80150ee <sys_timeout+0x22>
 80150e0:	4b0a      	ldr	r3, [pc, #40]	@ (801510c <sys_timeout+0x40>)
 80150e2:	f240 1229 	movw	r2, #297	@ 0x129
 80150e6:	490a      	ldr	r1, [pc, #40]	@ (8015110 <sys_timeout+0x44>)
 80150e8:	480a      	ldr	r0, [pc, #40]	@ (8015114 <sys_timeout+0x48>)
 80150ea:	f006 f861 	bl	801b1b0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80150ee:	f7ee f937 	bl	8003360 <sys_now>
 80150f2:	4602      	mov	r2, r0
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	4413      	add	r3, r2
 80150f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80150fa:	687a      	ldr	r2, [r7, #4]
 80150fc:	68b9      	ldr	r1, [r7, #8]
 80150fe:	6978      	ldr	r0, [r7, #20]
 8015100:	f7ff ff22 	bl	8014f48 <sys_timeout_abs>
#endif
}
 8015104:	bf00      	nop
 8015106:	3718      	adds	r7, #24
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	0801fd48 	.word	0x0801fd48
 8015110:	0801fde4 	.word	0x0801fde4
 8015114:	0801fdbc 	.word	0x0801fdbc

08015118 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801511e:	f7ee f91f 	bl	8003360 <sys_now>
 8015122:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015124:	4b17      	ldr	r3, [pc, #92]	@ (8015184 <sys_check_timeouts+0x6c>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d022      	beq.n	8015176 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	68fa      	ldr	r2, [r7, #12]
 8015136:	1ad3      	subs	r3, r2, r3
 8015138:	0fdb      	lsrs	r3, r3, #31
 801513a:	f003 0301 	and.w	r3, r3, #1
 801513e:	b2db      	uxtb	r3, r3
 8015140:	2b00      	cmp	r3, #0
 8015142:	d11a      	bne.n	801517a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	4a0e      	ldr	r2, [pc, #56]	@ (8015184 <sys_check_timeouts+0x6c>)
 801514a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	68db      	ldr	r3, [r3, #12]
 8015156:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	4a0a      	ldr	r2, [pc, #40]	@ (8015188 <sys_check_timeouts+0x70>)
 801515e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015160:	68b9      	ldr	r1, [r7, #8]
 8015162:	200a      	movs	r0, #10
 8015164:	f7f9 fb44 	bl	800e7f0 <memp_free>
    if (handler != NULL) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d0da      	beq.n	8015124 <sys_check_timeouts+0xc>
      handler(arg);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	6838      	ldr	r0, [r7, #0]
 8015172:	4798      	blx	r3
  do {
 8015174:	e7d6      	b.n	8015124 <sys_check_timeouts+0xc>
      return;
 8015176:	bf00      	nop
 8015178:	e000      	b.n	801517c <sys_check_timeouts+0x64>
      return;
 801517a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801517c:	3710      	adds	r7, #16
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
 8015182:	bf00      	nop
 8015184:	20013db0 	.word	0x20013db0
 8015188:	20013db4 	.word	0x20013db4

0801518c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015192:	4b16      	ldr	r3, [pc, #88]	@ (80151ec <sys_timeouts_sleeptime+0x60>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d102      	bne.n	80151a0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801519a:	f04f 33ff 	mov.w	r3, #4294967295
 801519e:	e020      	b.n	80151e2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80151a0:	f7ee f8de 	bl	8003360 <sys_now>
 80151a4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80151a6:	4b11      	ldr	r3, [pc, #68]	@ (80151ec <sys_timeouts_sleeptime+0x60>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	685a      	ldr	r2, [r3, #4]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	1ad3      	subs	r3, r2, r3
 80151b0:	0fdb      	lsrs	r3, r3, #31
 80151b2:	f003 0301 	and.w	r3, r3, #1
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d001      	beq.n	80151c0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	e010      	b.n	80151e2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80151c0:	4b0a      	ldr	r3, [pc, #40]	@ (80151ec <sys_timeouts_sleeptime+0x60>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	685a      	ldr	r2, [r3, #4]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	1ad3      	subs	r3, r2, r3
 80151ca:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	da06      	bge.n	80151e0 <sys_timeouts_sleeptime+0x54>
 80151d2:	4b07      	ldr	r3, [pc, #28]	@ (80151f0 <sys_timeouts_sleeptime+0x64>)
 80151d4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80151d8:	4906      	ldr	r1, [pc, #24]	@ (80151f4 <sys_timeouts_sleeptime+0x68>)
 80151da:	4807      	ldr	r0, [pc, #28]	@ (80151f8 <sys_timeouts_sleeptime+0x6c>)
 80151dc:	f005 ffe8 	bl	801b1b0 <iprintf>
    return ret;
 80151e0:	683b      	ldr	r3, [r7, #0]
  }
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3708      	adds	r7, #8
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	20013db0 	.word	0x20013db0
 80151f0:	0801fd48 	.word	0x0801fd48
 80151f4:	0801fe1c 	.word	0x0801fe1c
 80151f8:	0801fdbc 	.word	0x0801fdbc

080151fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015200:	f005 fa06 	bl	801a610 <rand>
 8015204:	4603      	mov	r3, r0
 8015206:	b29b      	uxth	r3, r3
 8015208:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801520c:	b29b      	uxth	r3, r3
 801520e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015212:	b29a      	uxth	r2, r3
 8015214:	4b01      	ldr	r3, [pc, #4]	@ (801521c <udp_init+0x20>)
 8015216:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015218:	bf00      	nop
 801521a:	bd80      	pop	{r7, pc}
 801521c:	200000b8 	.word	0x200000b8

08015220 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015220:	b480      	push	{r7}
 8015222:	b083      	sub	sp, #12
 8015224:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015226:	2300      	movs	r3, #0
 8015228:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801522a:	4b17      	ldr	r3, [pc, #92]	@ (8015288 <udp_new_port+0x68>)
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	1c5a      	adds	r2, r3, #1
 8015230:	b291      	uxth	r1, r2
 8015232:	4a15      	ldr	r2, [pc, #84]	@ (8015288 <udp_new_port+0x68>)
 8015234:	8011      	strh	r1, [r2, #0]
 8015236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801523a:	4293      	cmp	r3, r2
 801523c:	d103      	bne.n	8015246 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801523e:	4b12      	ldr	r3, [pc, #72]	@ (8015288 <udp_new_port+0x68>)
 8015240:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015244:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015246:	4b11      	ldr	r3, [pc, #68]	@ (801528c <udp_new_port+0x6c>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	603b      	str	r3, [r7, #0]
 801524c:	e011      	b.n	8015272 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	8a5a      	ldrh	r2, [r3, #18]
 8015252:	4b0d      	ldr	r3, [pc, #52]	@ (8015288 <udp_new_port+0x68>)
 8015254:	881b      	ldrh	r3, [r3, #0]
 8015256:	429a      	cmp	r2, r3
 8015258:	d108      	bne.n	801526c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801525a:	88fb      	ldrh	r3, [r7, #6]
 801525c:	3301      	adds	r3, #1
 801525e:	80fb      	strh	r3, [r7, #6]
 8015260:	88fb      	ldrh	r3, [r7, #6]
 8015262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015266:	d3e0      	bcc.n	801522a <udp_new_port+0xa>
        return 0;
 8015268:	2300      	movs	r3, #0
 801526a:	e007      	b.n	801527c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	603b      	str	r3, [r7, #0]
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1ea      	bne.n	801524e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015278:	4b03      	ldr	r3, [pc, #12]	@ (8015288 <udp_new_port+0x68>)
 801527a:	881b      	ldrh	r3, [r3, #0]
}
 801527c:	4618      	mov	r0, r3
 801527e:	370c      	adds	r7, #12
 8015280:	46bd      	mov	sp, r7
 8015282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015286:	4770      	bx	lr
 8015288:	200000b8 	.word	0x200000b8
 801528c:	20013dbc 	.word	0x20013dbc

08015290 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	4613      	mov	r3, r2
 801529c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d105      	bne.n	80152b0 <udp_input_local_match+0x20>
 80152a4:	4b27      	ldr	r3, [pc, #156]	@ (8015344 <udp_input_local_match+0xb4>)
 80152a6:	2287      	movs	r2, #135	@ 0x87
 80152a8:	4927      	ldr	r1, [pc, #156]	@ (8015348 <udp_input_local_match+0xb8>)
 80152aa:	4828      	ldr	r0, [pc, #160]	@ (801534c <udp_input_local_match+0xbc>)
 80152ac:	f005 ff80 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d105      	bne.n	80152c2 <udp_input_local_match+0x32>
 80152b6:	4b23      	ldr	r3, [pc, #140]	@ (8015344 <udp_input_local_match+0xb4>)
 80152b8:	2288      	movs	r2, #136	@ 0x88
 80152ba:	4925      	ldr	r1, [pc, #148]	@ (8015350 <udp_input_local_match+0xc0>)
 80152bc:	4823      	ldr	r0, [pc, #140]	@ (801534c <udp_input_local_match+0xbc>)
 80152be:	f005 ff77 	bl	801b1b0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	7a1b      	ldrb	r3, [r3, #8]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00b      	beq.n	80152e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	7a1a      	ldrb	r2, [r3, #8]
 80152ce:	4b21      	ldr	r3, [pc, #132]	@ (8015354 <udp_input_local_match+0xc4>)
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80152d6:	3301      	adds	r3, #1
 80152d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152da:	429a      	cmp	r2, r3
 80152dc:	d001      	beq.n	80152e2 <udp_input_local_match+0x52>
    return 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	e02b      	b.n	801533a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d018      	beq.n	801531a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d013      	beq.n	8015316 <udp_input_local_match+0x86>
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00f      	beq.n	8015316 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152f6:	4b17      	ldr	r3, [pc, #92]	@ (8015354 <udp_input_local_match+0xc4>)
 80152f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152fe:	d00a      	beq.n	8015316 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	4b13      	ldr	r3, [pc, #76]	@ (8015354 <udp_input_local_match+0xc4>)
 8015306:	695b      	ldr	r3, [r3, #20]
 8015308:	405a      	eors	r2, r3
 801530a:	68bb      	ldr	r3, [r7, #8]
 801530c:	3308      	adds	r3, #8
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015312:	2b00      	cmp	r3, #0
 8015314:	d110      	bne.n	8015338 <udp_input_local_match+0xa8>
          return 1;
 8015316:	2301      	movs	r3, #1
 8015318:	e00f      	b.n	801533a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d009      	beq.n	8015334 <udp_input_local_match+0xa4>
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d005      	beq.n	8015334 <udp_input_local_match+0xa4>
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	4b09      	ldr	r3, [pc, #36]	@ (8015354 <udp_input_local_match+0xc4>)
 801532e:	695b      	ldr	r3, [r3, #20]
 8015330:	429a      	cmp	r2, r3
 8015332:	d101      	bne.n	8015338 <udp_input_local_match+0xa8>
        return 1;
 8015334:	2301      	movs	r3, #1
 8015336:	e000      	b.n	801533a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015338:	2300      	movs	r3, #0
}
 801533a:	4618      	mov	r0, r3
 801533c:	3710      	adds	r7, #16
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}
 8015342:	bf00      	nop
 8015344:	0801fe30 	.word	0x0801fe30
 8015348:	0801fe60 	.word	0x0801fe60
 801534c:	0801fe84 	.word	0x0801fe84
 8015350:	0801feac 	.word	0x0801feac
 8015354:	2000a2e8 	.word	0x2000a2e8

08015358 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015358:	b590      	push	{r4, r7, lr}
 801535a:	b08d      	sub	sp, #52	@ 0x34
 801535c:	af02      	add	r7, sp, #8
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015362:	2300      	movs	r3, #0
 8015364:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d105      	bne.n	8015378 <udp_input+0x20>
 801536c:	4b87      	ldr	r3, [pc, #540]	@ (801558c <udp_input+0x234>)
 801536e:	22cf      	movs	r2, #207	@ 0xcf
 8015370:	4987      	ldr	r1, [pc, #540]	@ (8015590 <udp_input+0x238>)
 8015372:	4888      	ldr	r0, [pc, #544]	@ (8015594 <udp_input+0x23c>)
 8015374:	f005 ff1c 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d105      	bne.n	801538a <udp_input+0x32>
 801537e:	4b83      	ldr	r3, [pc, #524]	@ (801558c <udp_input+0x234>)
 8015380:	22d0      	movs	r2, #208	@ 0xd0
 8015382:	4985      	ldr	r1, [pc, #532]	@ (8015598 <udp_input+0x240>)
 8015384:	4883      	ldr	r0, [pc, #524]	@ (8015594 <udp_input+0x23c>)
 8015386:	f005 ff13 	bl	801b1b0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	895b      	ldrh	r3, [r3, #10]
 801538e:	2b07      	cmp	r3, #7
 8015390:	d803      	bhi.n	801539a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015392:	6878      	ldr	r0, [r7, #4]
 8015394:	f7fa f8ce 	bl	800f534 <pbuf_free>
    goto end;
 8015398:	e0f0      	b.n	801557c <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80153a0:	4b7e      	ldr	r3, [pc, #504]	@ (801559c <udp_input+0x244>)
 80153a2:	695b      	ldr	r3, [r3, #20]
 80153a4:	4a7d      	ldr	r2, [pc, #500]	@ (801559c <udp_input+0x244>)
 80153a6:	6812      	ldr	r2, [r2, #0]
 80153a8:	4611      	mov	r1, r2
 80153aa:	4618      	mov	r0, r3
 80153ac:	f003 ffe2 	bl	8019374 <ip4_addr_isbroadcast_u32>
 80153b0:	4603      	mov	r3, r0
 80153b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	881b      	ldrh	r3, [r3, #0]
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7f8 fb98 	bl	800daf0 <lwip_htons>
 80153c0:	4603      	mov	r3, r0
 80153c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	885b      	ldrh	r3, [r3, #2]
 80153c8:	b29b      	uxth	r3, r3
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7f8 fb90 	bl	800daf0 <lwip_htons>
 80153d0:	4603      	mov	r3, r0
 80153d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80153d4:	2300      	movs	r3, #0
 80153d6:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 80153d8:	2300      	movs	r3, #0
 80153da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80153dc:	2300      	movs	r3, #0
 80153de:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153e0:	4b6f      	ldr	r3, [pc, #444]	@ (80155a0 <udp_input+0x248>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	61fb      	str	r3, [r7, #28]
 80153e6:	e054      	b.n	8015492 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	8a5b      	ldrh	r3, [r3, #18]
 80153ec:	89fa      	ldrh	r2, [r7, #14]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d14a      	bne.n	8015488 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80153f2:	7cfb      	ldrb	r3, [r7, #19]
 80153f4:	461a      	mov	r2, r3
 80153f6:	6839      	ldr	r1, [r7, #0]
 80153f8:	69f8      	ldr	r0, [r7, #28]
 80153fa:	f7ff ff49 	bl	8015290 <udp_input_local_match>
 80153fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015400:	2b00      	cmp	r3, #0
 8015402:	d041      	beq.n	8015488 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	7c1b      	ldrb	r3, [r3, #16]
 8015408:	f003 0304 	and.w	r3, r3, #4
 801540c:	2b00      	cmp	r3, #0
 801540e:	d11d      	bne.n	801544c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015412:	2b00      	cmp	r3, #0
 8015414:	d102      	bne.n	801541c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015416:	69fb      	ldr	r3, [r7, #28]
 8015418:	627b      	str	r3, [r7, #36]	@ 0x24
 801541a:	e017      	b.n	801544c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801541c:	7cfb      	ldrb	r3, [r7, #19]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d014      	beq.n	801544c <udp_input+0xf4>
 8015422:	4b5e      	ldr	r3, [pc, #376]	@ (801559c <udp_input+0x244>)
 8015424:	695b      	ldr	r3, [r3, #20]
 8015426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801542a:	d10f      	bne.n	801544c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	3304      	adds	r3, #4
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	429a      	cmp	r2, r3
 8015438:	d008      	beq.n	801544c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	3304      	adds	r3, #4
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	429a      	cmp	r2, r3
 8015446:	d101      	bne.n	801544c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	8a9b      	ldrh	r3, [r3, #20]
 8015450:	8a3a      	ldrh	r2, [r7, #16]
 8015452:	429a      	cmp	r2, r3
 8015454:	d118      	bne.n	8015488 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015456:	69fb      	ldr	r3, [r7, #28]
 8015458:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801545a:	2b00      	cmp	r3, #0
 801545c:	d005      	beq.n	801546a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	685a      	ldr	r2, [r3, #4]
 8015462:	4b4e      	ldr	r3, [pc, #312]	@ (801559c <udp_input+0x244>)
 8015464:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015466:	429a      	cmp	r2, r3
 8015468:	d10e      	bne.n	8015488 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801546a:	6a3b      	ldr	r3, [r7, #32]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d014      	beq.n	801549a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	68da      	ldr	r2, [r3, #12]
 8015474:	6a3b      	ldr	r3, [r7, #32]
 8015476:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015478:	4b49      	ldr	r3, [pc, #292]	@ (80155a0 <udp_input+0x248>)
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015480:	4a47      	ldr	r2, [pc, #284]	@ (80155a0 <udp_input+0x248>)
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015486:	e008      	b.n	801549a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	61fb      	str	r3, [r7, #28]
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1a7      	bne.n	80153e8 <udp_input+0x90>
 8015498:	e000      	b.n	801549c <udp_input+0x144>
        break;
 801549a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801549c:	69fb      	ldr	r3, [r7, #28]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d101      	bne.n	80154a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80154a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154a4:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80154a6:	69fb      	ldr	r3, [r7, #28]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d002      	beq.n	80154b2 <udp_input+0x15a>
    for_us = 1;
 80154ac:	2301      	movs	r3, #1
 80154ae:	76fb      	strb	r3, [r7, #27]
 80154b0:	e00a      	b.n	80154c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	3304      	adds	r3, #4
 80154b6:	681a      	ldr	r2, [r3, #0]
 80154b8:	4b38      	ldr	r3, [pc, #224]	@ (801559c <udp_input+0x244>)
 80154ba:	695b      	ldr	r3, [r3, #20]
 80154bc:	429a      	cmp	r2, r3
 80154be:	bf0c      	ite	eq
 80154c0:	2301      	moveq	r3, #1
 80154c2:	2300      	movne	r3, #0
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80154c8:	7efb      	ldrb	r3, [r7, #27]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d052      	beq.n	8015574 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	88db      	ldrh	r3, [r3, #6]
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d00b      	beq.n	80154f0 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	891a      	ldrh	r2, [r3, #8]
 80154dc:	4b31      	ldr	r3, [pc, #196]	@ (80155a4 <udp_input+0x24c>)
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	4b31      	ldr	r3, [pc, #196]	@ (80155a8 <udp_input+0x250>)
 80154e2:	2111      	movs	r1, #17
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f7f8 fc35 	bl	800dd54 <ip_chksum_pseudo>
 80154ea:	4603      	mov	r3, r0
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d146      	bne.n	801557e <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80154f0:	2108      	movs	r1, #8
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7f9 ff98 	bl	800f428 <pbuf_remove_header>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00a      	beq.n	8015514 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80154fe:	4b23      	ldr	r3, [pc, #140]	@ (801558c <udp_input+0x234>)
 8015500:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015504:	4929      	ldr	r1, [pc, #164]	@ (80155ac <udp_input+0x254>)
 8015506:	4823      	ldr	r0, [pc, #140]	@ (8015594 <udp_input+0x23c>)
 8015508:	f005 fe52 	bl	801b1b0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f7fa f811 	bl	800f534 <pbuf_free>
      goto end;
 8015512:	e033      	b.n	801557c <udp_input+0x224>
    }

    if (pcb != NULL) {
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d012      	beq.n	8015540 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	699b      	ldr	r3, [r3, #24]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d00a      	beq.n	8015538 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	699c      	ldr	r4, [r3, #24]
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	69d8      	ldr	r0, [r3, #28]
 801552a:	8a3b      	ldrh	r3, [r7, #16]
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	4b1e      	ldr	r3, [pc, #120]	@ (80155a8 <udp_input+0x250>)
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	69f9      	ldr	r1, [r7, #28]
 8015534:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015536:	e026      	b.n	8015586 <udp_input+0x22e>
        pbuf_free(p);
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	f7f9 fffb 	bl	800f534 <pbuf_free>
        goto end;
 801553e:	e01d      	b.n	801557c <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015540:	7cfb      	ldrb	r3, [r7, #19]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d112      	bne.n	801556c <udp_input+0x214>
 8015546:	4b15      	ldr	r3, [pc, #84]	@ (801559c <udp_input+0x244>)
 8015548:	695b      	ldr	r3, [r3, #20]
 801554a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801554e:	2be0      	cmp	r3, #224	@ 0xe0
 8015550:	d00c      	beq.n	801556c <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015552:	4b12      	ldr	r3, [pc, #72]	@ (801559c <udp_input+0x244>)
 8015554:	899b      	ldrh	r3, [r3, #12]
 8015556:	3308      	adds	r3, #8
 8015558:	b29b      	uxth	r3, r3
 801555a:	b21b      	sxth	r3, r3
 801555c:	4619      	mov	r1, r3
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7f9 ffd5 	bl	800f50e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015564:	2103      	movs	r1, #3
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f003 fb4a 	bl	8018c00 <icmp_dest_unreach>
      pbuf_free(p);
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f7f9 ffe1 	bl	800f534 <pbuf_free>
  return;
 8015572:	e008      	b.n	8015586 <udp_input+0x22e>
    pbuf_free(p);
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f7f9 ffdd 	bl	800f534 <pbuf_free>
  return;
 801557a:	e004      	b.n	8015586 <udp_input+0x22e>
 801557c:	e003      	b.n	8015586 <udp_input+0x22e>
            goto chkerr;
 801557e:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7f9 ffd7 	bl	800f534 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015586:	372c      	adds	r7, #44	@ 0x2c
 8015588:	46bd      	mov	sp, r7
 801558a:	bd90      	pop	{r4, r7, pc}
 801558c:	0801fe30 	.word	0x0801fe30
 8015590:	0801fed4 	.word	0x0801fed4
 8015594:	0801fe84 	.word	0x0801fe84
 8015598:	0801feec 	.word	0x0801feec
 801559c:	2000a2e8 	.word	0x2000a2e8
 80155a0:	20013dbc 	.word	0x20013dbc
 80155a4:	2000a2fc 	.word	0x2000a2fc
 80155a8:	2000a2f8 	.word	0x2000a2f8
 80155ac:	0801ff08 	.word	0x0801ff08

080155b0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b088      	sub	sp, #32
 80155b4:	af02      	add	r7, sp, #8
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
 80155bc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d109      	bne.n	80155d8 <udp_sendto+0x28>
 80155c4:	4b23      	ldr	r3, [pc, #140]	@ (8015654 <udp_sendto+0xa4>)
 80155c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80155ca:	4923      	ldr	r1, [pc, #140]	@ (8015658 <udp_sendto+0xa8>)
 80155cc:	4823      	ldr	r0, [pc, #140]	@ (801565c <udp_sendto+0xac>)
 80155ce:	f005 fdef 	bl	801b1b0 <iprintf>
 80155d2:	f06f 030f 	mvn.w	r3, #15
 80155d6:	e038      	b.n	801564a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d109      	bne.n	80155f2 <udp_sendto+0x42>
 80155de:	4b1d      	ldr	r3, [pc, #116]	@ (8015654 <udp_sendto+0xa4>)
 80155e0:	f240 2219 	movw	r2, #537	@ 0x219
 80155e4:	491e      	ldr	r1, [pc, #120]	@ (8015660 <udp_sendto+0xb0>)
 80155e6:	481d      	ldr	r0, [pc, #116]	@ (801565c <udp_sendto+0xac>)
 80155e8:	f005 fde2 	bl	801b1b0 <iprintf>
 80155ec:	f06f 030f 	mvn.w	r3, #15
 80155f0:	e02b      	b.n	801564a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d109      	bne.n	801560c <udp_sendto+0x5c>
 80155f8:	4b16      	ldr	r3, [pc, #88]	@ (8015654 <udp_sendto+0xa4>)
 80155fa:	f240 221a 	movw	r2, #538	@ 0x21a
 80155fe:	4919      	ldr	r1, [pc, #100]	@ (8015664 <udp_sendto+0xb4>)
 8015600:	4816      	ldr	r0, [pc, #88]	@ (801565c <udp_sendto+0xac>)
 8015602:	f005 fdd5 	bl	801b1b0 <iprintf>
 8015606:	f06f 030f 	mvn.w	r3, #15
 801560a:	e01e      	b.n	801564a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	7a1b      	ldrb	r3, [r3, #8]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d006      	beq.n	8015622 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	7a1b      	ldrb	r3, [r3, #8]
 8015618:	4618      	mov	r0, r3
 801561a:	f7f9 fbf9 	bl	800ee10 <netif_get_by_index>
 801561e:	6178      	str	r0, [r7, #20]
 8015620:	e003      	b.n	801562a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f003 fb80 	bl	8018d28 <ip4_route>
 8015628:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d102      	bne.n	8015636 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015630:	f06f 0303 	mvn.w	r3, #3
 8015634:	e009      	b.n	801564a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015636:	887a      	ldrh	r2, [r7, #2]
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	4613      	mov	r3, r2
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	68b9      	ldr	r1, [r7, #8]
 8015642:	68f8      	ldr	r0, [r7, #12]
 8015644:	f000 f810 	bl	8015668 <udp_sendto_if>
 8015648:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801564a:	4618      	mov	r0, r3
 801564c:	3718      	adds	r7, #24
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	0801fe30 	.word	0x0801fe30
 8015658:	0801ff54 	.word	0x0801ff54
 801565c:	0801fe84 	.word	0x0801fe84
 8015660:	0801ff6c 	.word	0x0801ff6c
 8015664:	0801ff88 	.word	0x0801ff88

08015668 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b088      	sub	sp, #32
 801566c:	af02      	add	r7, sp, #8
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d109      	bne.n	8015690 <udp_sendto_if+0x28>
 801567c:	4b2e      	ldr	r3, [pc, #184]	@ (8015738 <udp_sendto_if+0xd0>)
 801567e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015682:	492e      	ldr	r1, [pc, #184]	@ (801573c <udp_sendto_if+0xd4>)
 8015684:	482e      	ldr	r0, [pc, #184]	@ (8015740 <udp_sendto_if+0xd8>)
 8015686:	f005 fd93 	bl	801b1b0 <iprintf>
 801568a:	f06f 030f 	mvn.w	r3, #15
 801568e:	e04f      	b.n	8015730 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d109      	bne.n	80156aa <udp_sendto_if+0x42>
 8015696:	4b28      	ldr	r3, [pc, #160]	@ (8015738 <udp_sendto_if+0xd0>)
 8015698:	f240 2281 	movw	r2, #641	@ 0x281
 801569c:	4929      	ldr	r1, [pc, #164]	@ (8015744 <udp_sendto_if+0xdc>)
 801569e:	4828      	ldr	r0, [pc, #160]	@ (8015740 <udp_sendto_if+0xd8>)
 80156a0:	f005 fd86 	bl	801b1b0 <iprintf>
 80156a4:	f06f 030f 	mvn.w	r3, #15
 80156a8:	e042      	b.n	8015730 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d109      	bne.n	80156c4 <udp_sendto_if+0x5c>
 80156b0:	4b21      	ldr	r3, [pc, #132]	@ (8015738 <udp_sendto_if+0xd0>)
 80156b2:	f240 2282 	movw	r2, #642	@ 0x282
 80156b6:	4924      	ldr	r1, [pc, #144]	@ (8015748 <udp_sendto_if+0xe0>)
 80156b8:	4821      	ldr	r0, [pc, #132]	@ (8015740 <udp_sendto_if+0xd8>)
 80156ba:	f005 fd79 	bl	801b1b0 <iprintf>
 80156be:	f06f 030f 	mvn.w	r3, #15
 80156c2:	e035      	b.n	8015730 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80156c4:	6a3b      	ldr	r3, [r7, #32]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d109      	bne.n	80156de <udp_sendto_if+0x76>
 80156ca:	4b1b      	ldr	r3, [pc, #108]	@ (8015738 <udp_sendto_if+0xd0>)
 80156cc:	f240 2283 	movw	r2, #643	@ 0x283
 80156d0:	491e      	ldr	r1, [pc, #120]	@ (801574c <udp_sendto_if+0xe4>)
 80156d2:	481b      	ldr	r0, [pc, #108]	@ (8015740 <udp_sendto_if+0xd8>)
 80156d4:	f005 fd6c 	bl	801b1b0 <iprintf>
 80156d8:	f06f 030f 	mvn.w	r3, #15
 80156dc:	e028      	b.n	8015730 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d009      	beq.n	80156f8 <udp_sendto_if+0x90>
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d005      	beq.n	80156f8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156f4:	2be0      	cmp	r3, #224	@ 0xe0
 80156f6:	d103      	bne.n	8015700 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	3304      	adds	r3, #4
 80156fc:	617b      	str	r3, [r7, #20]
 80156fe:	e00b      	b.n	8015718 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	681a      	ldr	r2, [r3, #0]
 8015704:	6a3b      	ldr	r3, [r7, #32]
 8015706:	3304      	adds	r3, #4
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	429a      	cmp	r2, r3
 801570c:	d002      	beq.n	8015714 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801570e:	f06f 0303 	mvn.w	r3, #3
 8015712:	e00d      	b.n	8015730 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015718:	887a      	ldrh	r2, [r7, #2]
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	9301      	str	r3, [sp, #4]
 801571e:	6a3b      	ldr	r3, [r7, #32]
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	4613      	mov	r3, r2
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	68b9      	ldr	r1, [r7, #8]
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f000 f811 	bl	8015750 <udp_sendto_if_src>
 801572e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015730:	4618      	mov	r0, r3
 8015732:	3718      	adds	r7, #24
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	0801fe30 	.word	0x0801fe30
 801573c:	0801ffa4 	.word	0x0801ffa4
 8015740:	0801fe84 	.word	0x0801fe84
 8015744:	0801ffc0 	.word	0x0801ffc0
 8015748:	0801ffdc 	.word	0x0801ffdc
 801574c:	0801fffc 	.word	0x0801fffc

08015750 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b08c      	sub	sp, #48	@ 0x30
 8015754:	af04      	add	r7, sp, #16
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d109      	bne.n	8015778 <udp_sendto_if_src+0x28>
 8015764:	4b65      	ldr	r3, [pc, #404]	@ (80158fc <udp_sendto_if_src+0x1ac>)
 8015766:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801576a:	4965      	ldr	r1, [pc, #404]	@ (8015900 <udp_sendto_if_src+0x1b0>)
 801576c:	4865      	ldr	r0, [pc, #404]	@ (8015904 <udp_sendto_if_src+0x1b4>)
 801576e:	f005 fd1f 	bl	801b1b0 <iprintf>
 8015772:	f06f 030f 	mvn.w	r3, #15
 8015776:	e0bc      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d109      	bne.n	8015792 <udp_sendto_if_src+0x42>
 801577e:	4b5f      	ldr	r3, [pc, #380]	@ (80158fc <udp_sendto_if_src+0x1ac>)
 8015780:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015784:	4960      	ldr	r1, [pc, #384]	@ (8015908 <udp_sendto_if_src+0x1b8>)
 8015786:	485f      	ldr	r0, [pc, #380]	@ (8015904 <udp_sendto_if_src+0x1b4>)
 8015788:	f005 fd12 	bl	801b1b0 <iprintf>
 801578c:	f06f 030f 	mvn.w	r3, #15
 8015790:	e0af      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d109      	bne.n	80157ac <udp_sendto_if_src+0x5c>
 8015798:	4b58      	ldr	r3, [pc, #352]	@ (80158fc <udp_sendto_if_src+0x1ac>)
 801579a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801579e:	495b      	ldr	r1, [pc, #364]	@ (801590c <udp_sendto_if_src+0x1bc>)
 80157a0:	4858      	ldr	r0, [pc, #352]	@ (8015904 <udp_sendto_if_src+0x1b4>)
 80157a2:	f005 fd05 	bl	801b1b0 <iprintf>
 80157a6:	f06f 030f 	mvn.w	r3, #15
 80157aa:	e0a2      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80157ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d109      	bne.n	80157c6 <udp_sendto_if_src+0x76>
 80157b2:	4b52      	ldr	r3, [pc, #328]	@ (80158fc <udp_sendto_if_src+0x1ac>)
 80157b4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80157b8:	4955      	ldr	r1, [pc, #340]	@ (8015910 <udp_sendto_if_src+0x1c0>)
 80157ba:	4852      	ldr	r0, [pc, #328]	@ (8015904 <udp_sendto_if_src+0x1b4>)
 80157bc:	f005 fcf8 	bl	801b1b0 <iprintf>
 80157c0:	f06f 030f 	mvn.w	r3, #15
 80157c4:	e095      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80157c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d109      	bne.n	80157e0 <udp_sendto_if_src+0x90>
 80157cc:	4b4b      	ldr	r3, [pc, #300]	@ (80158fc <udp_sendto_if_src+0x1ac>)
 80157ce:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80157d2:	4950      	ldr	r1, [pc, #320]	@ (8015914 <udp_sendto_if_src+0x1c4>)
 80157d4:	484b      	ldr	r0, [pc, #300]	@ (8015904 <udp_sendto_if_src+0x1b4>)
 80157d6:	f005 fceb 	bl	801b1b0 <iprintf>
 80157da:	f06f 030f 	mvn.w	r3, #15
 80157de:	e088      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	8a5b      	ldrh	r3, [r3, #18]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10f      	bne.n	8015808 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80157e8:	68f9      	ldr	r1, [r7, #12]
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	8a5b      	ldrh	r3, [r3, #18]
 80157ee:	461a      	mov	r2, r3
 80157f0:	68f8      	ldr	r0, [r7, #12]
 80157f2:	f000 f893 	bl	801591c <udp_bind>
 80157f6:	4603      	mov	r3, r0
 80157f8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80157fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d002      	beq.n	8015808 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015802:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015806:	e074      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	891b      	ldrh	r3, [r3, #8]
 801580c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8015810:	4293      	cmp	r3, r2
 8015812:	d902      	bls.n	801581a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015814:	f04f 33ff 	mov.w	r3, #4294967295
 8015818:	e06b      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801581a:	2108      	movs	r1, #8
 801581c:	68b8      	ldr	r0, [r7, #8]
 801581e:	f7f9 fdf3 	bl	800f408 <pbuf_add_header>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	d015      	beq.n	8015854 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015828:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801582c:	2108      	movs	r1, #8
 801582e:	2022      	movs	r0, #34	@ 0x22
 8015830:	f7f9 fb98 	bl	800ef64 <pbuf_alloc>
 8015834:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015836:	69fb      	ldr	r3, [r7, #28]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d102      	bne.n	8015842 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801583c:	f04f 33ff 	mov.w	r3, #4294967295
 8015840:	e057      	b.n	80158f2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	891b      	ldrh	r3, [r3, #8]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d006      	beq.n	8015858 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801584a:	68b9      	ldr	r1, [r7, #8]
 801584c:	69f8      	ldr	r0, [r7, #28]
 801584e:	f7f9 ff95 	bl	800f77c <pbuf_chain>
 8015852:	e001      	b.n	8015858 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	895b      	ldrh	r3, [r3, #10]
 801585c:	2b07      	cmp	r3, #7
 801585e:	d806      	bhi.n	801586e <udp_sendto_if_src+0x11e>
 8015860:	4b26      	ldr	r3, [pc, #152]	@ (80158fc <udp_sendto_if_src+0x1ac>)
 8015862:	f240 320d 	movw	r2, #781	@ 0x30d
 8015866:	492c      	ldr	r1, [pc, #176]	@ (8015918 <udp_sendto_if_src+0x1c8>)
 8015868:	4826      	ldr	r0, [pc, #152]	@ (8015904 <udp_sendto_if_src+0x1b4>)
 801586a:	f005 fca1 	bl	801b1b0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	8a5b      	ldrh	r3, [r3, #18]
 8015878:	4618      	mov	r0, r3
 801587a:	f7f8 f939 	bl	800daf0 <lwip_htons>
 801587e:	4603      	mov	r3, r0
 8015880:	461a      	mov	r2, r3
 8015882:	697b      	ldr	r3, [r7, #20]
 8015884:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015886:	887b      	ldrh	r3, [r7, #2]
 8015888:	4618      	mov	r0, r3
 801588a:	f7f8 f931 	bl	800daf0 <lwip_htons>
 801588e:	4603      	mov	r3, r0
 8015890:	461a      	mov	r2, r3
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	2200      	movs	r2, #0
 801589a:	719a      	strb	r2, [r3, #6]
 801589c:	2200      	movs	r2, #0
 801589e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	891b      	ldrh	r3, [r3, #8]
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7f8 f923 	bl	800daf0 <lwip_htons>
 80158aa:	4603      	mov	r3, r0
 80158ac:	461a      	mov	r2, r3
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80158b2:	2311      	movs	r3, #17
 80158b4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	7adb      	ldrb	r3, [r3, #11]
 80158ba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	7a9b      	ldrb	r3, [r3, #10]
 80158c0:	7cb9      	ldrb	r1, [r7, #18]
 80158c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80158c4:	9202      	str	r2, [sp, #8]
 80158c6:	7cfa      	ldrb	r2, [r7, #19]
 80158c8:	9201      	str	r2, [sp, #4]
 80158ca:	9300      	str	r3, [sp, #0]
 80158cc:	460b      	mov	r3, r1
 80158ce:	687a      	ldr	r2, [r7, #4]
 80158d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158d2:	69f8      	ldr	r0, [r7, #28]
 80158d4:	f003 fc3a 	bl	801914c <ip4_output_if_src>
 80158d8:	4603      	mov	r3, r0
 80158da:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80158dc:	69fa      	ldr	r2, [r7, #28]
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d004      	beq.n	80158ee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80158e4:	69f8      	ldr	r0, [r7, #28]
 80158e6:	f7f9 fe25 	bl	800f534 <pbuf_free>
    q = NULL;
 80158ea:	2300      	movs	r3, #0
 80158ec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80158ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3720      	adds	r7, #32
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	0801fe30 	.word	0x0801fe30
 8015900:	0802001c 	.word	0x0802001c
 8015904:	0801fe84 	.word	0x0801fe84
 8015908:	0802003c 	.word	0x0802003c
 801590c:	0802005c 	.word	0x0802005c
 8015910:	08020080 	.word	0x08020080
 8015914:	080200a4 	.word	0x080200a4
 8015918:	080200c8 	.word	0x080200c8

0801591c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b086      	sub	sp, #24
 8015920:	af00      	add	r7, sp, #0
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	4613      	mov	r3, r2
 8015928:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d101      	bne.n	8015934 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015930:	4b39      	ldr	r3, [pc, #228]	@ (8015a18 <udp_bind+0xfc>)
 8015932:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d109      	bne.n	801594e <udp_bind+0x32>
 801593a:	4b38      	ldr	r3, [pc, #224]	@ (8015a1c <udp_bind+0x100>)
 801593c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8015940:	4937      	ldr	r1, [pc, #220]	@ (8015a20 <udp_bind+0x104>)
 8015942:	4838      	ldr	r0, [pc, #224]	@ (8015a24 <udp_bind+0x108>)
 8015944:	f005 fc34 	bl	801b1b0 <iprintf>
 8015948:	f06f 030f 	mvn.w	r3, #15
 801594c:	e060      	b.n	8015a10 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801594e:	2300      	movs	r3, #0
 8015950:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015952:	4b35      	ldr	r3, [pc, #212]	@ (8015a28 <udp_bind+0x10c>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	617b      	str	r3, [r7, #20]
 8015958:	e009      	b.n	801596e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801595a:	68fa      	ldr	r2, [r7, #12]
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	429a      	cmp	r2, r3
 8015960:	d102      	bne.n	8015968 <udp_bind+0x4c>
      rebind = 1;
 8015962:	2301      	movs	r3, #1
 8015964:	74fb      	strb	r3, [r7, #19]
      break;
 8015966:	e005      	b.n	8015974 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	68db      	ldr	r3, [r3, #12]
 801596c:	617b      	str	r3, [r7, #20]
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d1f2      	bne.n	801595a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015974:	88fb      	ldrh	r3, [r7, #6]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d109      	bne.n	801598e <udp_bind+0x72>
    port = udp_new_port();
 801597a:	f7ff fc51 	bl	8015220 <udp_new_port>
 801597e:	4603      	mov	r3, r0
 8015980:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015982:	88fb      	ldrh	r3, [r7, #6]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d12c      	bne.n	80159e2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015988:	f06f 0307 	mvn.w	r3, #7
 801598c:	e040      	b.n	8015a10 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801598e:	4b26      	ldr	r3, [pc, #152]	@ (8015a28 <udp_bind+0x10c>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	617b      	str	r3, [r7, #20]
 8015994:	e022      	b.n	80159dc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015996:	68fa      	ldr	r2, [r7, #12]
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	429a      	cmp	r2, r3
 801599c:	d01b      	beq.n	80159d6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	8a5b      	ldrh	r3, [r3, #18]
 80159a2:	88fa      	ldrh	r2, [r7, #6]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d116      	bne.n	80159d6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d00d      	beq.n	80159d0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d00a      	beq.n	80159d0 <udp_bind+0xb4>
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d006      	beq.n	80159d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159c2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d003      	beq.n	80159d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d102      	bne.n	80159d6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80159d0:	f06f 0307 	mvn.w	r3, #7
 80159d4:	e01c      	b.n	8015a10 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	68db      	ldr	r3, [r3, #12]
 80159da:	617b      	str	r3, [r7, #20]
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d1d9      	bne.n	8015996 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d002      	beq.n	80159ee <udp_bind+0xd2>
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	e000      	b.n	80159f0 <udp_bind+0xd4>
 80159ee:	2300      	movs	r3, #0
 80159f0:	68fa      	ldr	r2, [r7, #12]
 80159f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	88fa      	ldrh	r2, [r7, #6]
 80159f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80159fa:	7cfb      	ldrb	r3, [r7, #19]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d106      	bne.n	8015a0e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015a00:	4b09      	ldr	r3, [pc, #36]	@ (8015a28 <udp_bind+0x10c>)
 8015a02:	681a      	ldr	r2, [r3, #0]
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015a08:	4a07      	ldr	r2, [pc, #28]	@ (8015a28 <udp_bind+0x10c>)
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015a0e:	2300      	movs	r3, #0
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3718      	adds	r7, #24
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	0806c9ec 	.word	0x0806c9ec
 8015a1c:	0801fe30 	.word	0x0801fe30
 8015a20:	080200f8 	.word	0x080200f8
 8015a24:	0801fe84 	.word	0x0801fe84
 8015a28:	20013dbc 	.word	0x20013dbc

08015a2c <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d007      	beq.n	8015a4c <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015a42:	3301      	adds	r3, #1
 8015a44:	b2da      	uxtb	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8015a4a:	e002      	b.n	8015a52 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	721a      	strb	r2, [r3, #8]
}
 8015a52:	bf00      	nop
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr
	...

08015a60 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	4613      	mov	r3, r2
 8015a6c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d109      	bne.n	8015a88 <udp_connect+0x28>
 8015a74:	4b2c      	ldr	r3, [pc, #176]	@ (8015b28 <udp_connect+0xc8>)
 8015a76:	f240 4235 	movw	r2, #1077	@ 0x435
 8015a7a:	492c      	ldr	r1, [pc, #176]	@ (8015b2c <udp_connect+0xcc>)
 8015a7c:	482c      	ldr	r0, [pc, #176]	@ (8015b30 <udp_connect+0xd0>)
 8015a7e:	f005 fb97 	bl	801b1b0 <iprintf>
 8015a82:	f06f 030f 	mvn.w	r3, #15
 8015a86:	e04b      	b.n	8015b20 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d109      	bne.n	8015aa2 <udp_connect+0x42>
 8015a8e:	4b26      	ldr	r3, [pc, #152]	@ (8015b28 <udp_connect+0xc8>)
 8015a90:	f240 4236 	movw	r2, #1078	@ 0x436
 8015a94:	4927      	ldr	r1, [pc, #156]	@ (8015b34 <udp_connect+0xd4>)
 8015a96:	4826      	ldr	r0, [pc, #152]	@ (8015b30 <udp_connect+0xd0>)
 8015a98:	f005 fb8a 	bl	801b1b0 <iprintf>
 8015a9c:	f06f 030f 	mvn.w	r3, #15
 8015aa0:	e03e      	b.n	8015b20 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	8a5b      	ldrh	r3, [r3, #18]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d10f      	bne.n	8015aca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015aaa:	68f9      	ldr	r1, [r7, #12]
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	8a5b      	ldrh	r3, [r3, #18]
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	68f8      	ldr	r0, [r7, #12]
 8015ab4:	f7ff ff32 	bl	801591c <udp_bind>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8015abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d002      	beq.n	8015aca <udp_connect+0x6a>
      return err;
 8015ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ac8:	e02a      	b.n	8015b20 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d002      	beq.n	8015ad6 <udp_connect+0x76>
 8015ad0:	68bb      	ldr	r3, [r7, #8]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	e000      	b.n	8015ad8 <udp_connect+0x78>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	68fa      	ldr	r2, [r7, #12]
 8015ada:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	88fa      	ldrh	r2, [r7, #6]
 8015ae0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	7c1b      	ldrb	r3, [r3, #16]
 8015ae6:	f043 0304 	orr.w	r3, r3, #4
 8015aea:	b2da      	uxtb	r2, r3
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015af0:	4b11      	ldr	r3, [pc, #68]	@ (8015b38 <udp_connect+0xd8>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	613b      	str	r3, [r7, #16]
 8015af6:	e008      	b.n	8015b0a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015af8:	68fa      	ldr	r2, [r7, #12]
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d101      	bne.n	8015b04 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	e00d      	b.n	8015b20 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	68db      	ldr	r3, [r3, #12]
 8015b08:	613b      	str	r3, [r7, #16]
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d1f3      	bne.n	8015af8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015b10:	4b09      	ldr	r3, [pc, #36]	@ (8015b38 <udp_connect+0xd8>)
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015b18:	4a07      	ldr	r2, [pc, #28]	@ (8015b38 <udp_connect+0xd8>)
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015b1e:	2300      	movs	r3, #0
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3718      	adds	r7, #24
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	0801fe30 	.word	0x0801fe30
 8015b2c:	08020110 	.word	0x08020110
 8015b30:	0801fe84 	.word	0x0801fe84
 8015b34:	0802012c 	.word	0x0802012c
 8015b38:	20013dbc 	.word	0x20013dbc

08015b3c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d107      	bne.n	8015b5a <udp_disconnect+0x1e>
 8015b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8015b80 <udp_disconnect+0x44>)
 8015b4c:	f240 426a 	movw	r2, #1130	@ 0x46a
 8015b50:	490c      	ldr	r1, [pc, #48]	@ (8015b84 <udp_disconnect+0x48>)
 8015b52:	480d      	ldr	r0, [pc, #52]	@ (8015b88 <udp_disconnect+0x4c>)
 8015b54:	f005 fb2c 	bl	801b1b0 <iprintf>
 8015b58:	e00f      	b.n	8015b7a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2200      	movs	r2, #0
 8015b64:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	7c1b      	ldrb	r3, [r3, #16]
 8015b70:	f023 0304 	bic.w	r3, r3, #4
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	741a      	strb	r2, [r3, #16]
}
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	0801fe30 	.word	0x0801fe30
 8015b84:	08020148 	.word	0x08020148
 8015b88:	0801fe84 	.word	0x0801fe84

08015b8c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	60b9      	str	r1, [r7, #8]
 8015b96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d107      	bne.n	8015bae <udp_recv+0x22>
 8015b9e:	4b08      	ldr	r3, [pc, #32]	@ (8015bc0 <udp_recv+0x34>)
 8015ba0:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015ba4:	4907      	ldr	r1, [pc, #28]	@ (8015bc4 <udp_recv+0x38>)
 8015ba6:	4808      	ldr	r0, [pc, #32]	@ (8015bc8 <udp_recv+0x3c>)
 8015ba8:	f005 fb02 	bl	801b1b0 <iprintf>
 8015bac:	e005      	b.n	8015bba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	68ba      	ldr	r2, [r7, #8]
 8015bb2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	61da      	str	r2, [r3, #28]
}
 8015bba:	3710      	adds	r7, #16
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	0801fe30 	.word	0x0801fe30
 8015bc4:	08020164 	.word	0x08020164
 8015bc8:	0801fe84 	.word	0x0801fe84

08015bcc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d107      	bne.n	8015bea <udp_remove+0x1e>
 8015bda:	4b19      	ldr	r3, [pc, #100]	@ (8015c40 <udp_remove+0x74>)
 8015bdc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8015be0:	4918      	ldr	r1, [pc, #96]	@ (8015c44 <udp_remove+0x78>)
 8015be2:	4819      	ldr	r0, [pc, #100]	@ (8015c48 <udp_remove+0x7c>)
 8015be4:	f005 fae4 	bl	801b1b0 <iprintf>
 8015be8:	e026      	b.n	8015c38 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015bea:	4b18      	ldr	r3, [pc, #96]	@ (8015c4c <udp_remove+0x80>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	687a      	ldr	r2, [r7, #4]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d105      	bne.n	8015c00 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015bf4:	4b15      	ldr	r3, [pc, #84]	@ (8015c4c <udp_remove+0x80>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	68db      	ldr	r3, [r3, #12]
 8015bfa:	4a14      	ldr	r2, [pc, #80]	@ (8015c4c <udp_remove+0x80>)
 8015bfc:	6013      	str	r3, [r2, #0]
 8015bfe:	e017      	b.n	8015c30 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015c00:	4b12      	ldr	r3, [pc, #72]	@ (8015c4c <udp_remove+0x80>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	60fb      	str	r3, [r7, #12]
 8015c06:	e010      	b.n	8015c2a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	68db      	ldr	r3, [r3, #12]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d009      	beq.n	8015c24 <udp_remove+0x58>
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d104      	bne.n	8015c24 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	68da      	ldr	r2, [r3, #12]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	60da      	str	r2, [r3, #12]
        break;
 8015c22:	e005      	b.n	8015c30 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	60fb      	str	r3, [r7, #12]
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d1eb      	bne.n	8015c08 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015c30:	6879      	ldr	r1, [r7, #4]
 8015c32:	2000      	movs	r0, #0
 8015c34:	f7f8 fddc 	bl	800e7f0 <memp_free>
}
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	0801fe30 	.word	0x0801fe30
 8015c44:	0802017c 	.word	0x0802017c
 8015c48:	0801fe84 	.word	0x0801fe84
 8015c4c:	20013dbc 	.word	0x20013dbc

08015c50 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015c56:	2000      	movs	r0, #0
 8015c58:	f7f8 fd78 	bl	800e74c <memp_malloc>
 8015c5c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d007      	beq.n	8015c74 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015c64:	2220      	movs	r2, #32
 8015c66:	2100      	movs	r1, #0
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f005 fc03 	bl	801b474 <memset>
    pcb->ttl = UDP_TTL;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	22ff      	movs	r2, #255	@ 0xff
 8015c72:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015c74:	687b      	ldr	r3, [r7, #4]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3708      	adds	r7, #8
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
	...

08015c80 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015c80:	b480      	push	{r7}
 8015c82:	b085      	sub	sp, #20
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d01e      	beq.n	8015cce <udp_netif_ip_addr_changed+0x4e>
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d01a      	beq.n	8015cce <udp_netif_ip_addr_changed+0x4e>
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d017      	beq.n	8015cce <udp_netif_ip_addr_changed+0x4e>
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d013      	beq.n	8015cce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cdc <udp_netif_ip_addr_changed+0x5c>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	60fb      	str	r3, [r7, #12]
 8015cac:	e00c      	b.n	8015cc8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d103      	bne.n	8015cc2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	681a      	ldr	r2, [r3, #0]
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	68db      	ldr	r3, [r3, #12]
 8015cc6:	60fb      	str	r3, [r7, #12]
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d1ef      	bne.n	8015cae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015cce:	bf00      	nop
 8015cd0:	3714      	adds	r7, #20
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop
 8015cdc:	20013dbc 	.word	0x20013dbc

08015ce0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015ce4:	4b20      	ldr	r3, [pc, #128]	@ (8015d68 <dhcp_inc_pcb_refcount+0x88>)
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d133      	bne.n	8015d54 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015cec:	4b1f      	ldr	r3, [pc, #124]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d005      	beq.n	8015d00 <dhcp_inc_pcb_refcount+0x20>
 8015cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8015d70 <dhcp_inc_pcb_refcount+0x90>)
 8015cf6:	22e5      	movs	r2, #229	@ 0xe5
 8015cf8:	491e      	ldr	r1, [pc, #120]	@ (8015d74 <dhcp_inc_pcb_refcount+0x94>)
 8015cfa:	481f      	ldr	r0, [pc, #124]	@ (8015d78 <dhcp_inc_pcb_refcount+0x98>)
 8015cfc:	f005 fa58 	bl	801b1b0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015d00:	f7ff ffa6 	bl	8015c50 <udp_new>
 8015d04:	4603      	mov	r3, r0
 8015d06:	4a19      	ldr	r2, [pc, #100]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d08:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015d0a:	4b18      	ldr	r3, [pc, #96]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d102      	bne.n	8015d18 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015d12:	f04f 33ff 	mov.w	r3, #4294967295
 8015d16:	e024      	b.n	8015d62 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015d18:	4b14      	ldr	r3, [pc, #80]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	7a5a      	ldrb	r2, [r3, #9]
 8015d1e:	4b13      	ldr	r3, [pc, #76]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	f042 0220 	orr.w	r2, r2, #32
 8015d26:	b2d2      	uxtb	r2, r2
 8015d28:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015d2a:	4b10      	ldr	r3, [pc, #64]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2244      	movs	r2, #68	@ 0x44
 8015d30:	4912      	ldr	r1, [pc, #72]	@ (8015d7c <dhcp_inc_pcb_refcount+0x9c>)
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7ff fdf2 	bl	801591c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015d38:	4b0c      	ldr	r3, [pc, #48]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	2243      	movs	r2, #67	@ 0x43
 8015d3e:	490f      	ldr	r1, [pc, #60]	@ (8015d7c <dhcp_inc_pcb_refcount+0x9c>)
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7ff fe8d 	bl	8015a60 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015d46:	4b09      	ldr	r3, [pc, #36]	@ (8015d6c <dhcp_inc_pcb_refcount+0x8c>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	490c      	ldr	r1, [pc, #48]	@ (8015d80 <dhcp_inc_pcb_refcount+0xa0>)
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7ff ff1c 	bl	8015b8c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015d54:	4b04      	ldr	r3, [pc, #16]	@ (8015d68 <dhcp_inc_pcb_refcount+0x88>)
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	4b02      	ldr	r3, [pc, #8]	@ (8015d68 <dhcp_inc_pcb_refcount+0x88>)
 8015d5e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	20013dec 	.word	0x20013dec
 8015d6c:	20013de8 	.word	0x20013de8
 8015d70:	08020194 	.word	0x08020194
 8015d74:	080201cc 	.word	0x080201cc
 8015d78:	080201f4 	.word	0x080201f4
 8015d7c:	0806c9ec 	.word	0x0806c9ec
 8015d80:	08017641 	.word	0x08017641

08015d84 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015d88:	4b0e      	ldr	r3, [pc, #56]	@ (8015dc4 <dhcp_dec_pcb_refcount+0x40>)
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d105      	bne.n	8015d9c <dhcp_dec_pcb_refcount+0x18>
 8015d90:	4b0d      	ldr	r3, [pc, #52]	@ (8015dc8 <dhcp_dec_pcb_refcount+0x44>)
 8015d92:	22ff      	movs	r2, #255	@ 0xff
 8015d94:	490d      	ldr	r1, [pc, #52]	@ (8015dcc <dhcp_dec_pcb_refcount+0x48>)
 8015d96:	480e      	ldr	r0, [pc, #56]	@ (8015dd0 <dhcp_dec_pcb_refcount+0x4c>)
 8015d98:	f005 fa0a 	bl	801b1b0 <iprintf>
  dhcp_pcb_refcount--;
 8015d9c:	4b09      	ldr	r3, [pc, #36]	@ (8015dc4 <dhcp_dec_pcb_refcount+0x40>)
 8015d9e:	781b      	ldrb	r3, [r3, #0]
 8015da0:	3b01      	subs	r3, #1
 8015da2:	b2da      	uxtb	r2, r3
 8015da4:	4b07      	ldr	r3, [pc, #28]	@ (8015dc4 <dhcp_dec_pcb_refcount+0x40>)
 8015da6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015da8:	4b06      	ldr	r3, [pc, #24]	@ (8015dc4 <dhcp_dec_pcb_refcount+0x40>)
 8015daa:	781b      	ldrb	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d107      	bne.n	8015dc0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015db0:	4b08      	ldr	r3, [pc, #32]	@ (8015dd4 <dhcp_dec_pcb_refcount+0x50>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7ff ff09 	bl	8015bcc <udp_remove>
    dhcp_pcb = NULL;
 8015dba:	4b06      	ldr	r3, [pc, #24]	@ (8015dd4 <dhcp_dec_pcb_refcount+0x50>)
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	601a      	str	r2, [r3, #0]
  }
}
 8015dc0:	bf00      	nop
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	20013dec 	.word	0x20013dec
 8015dc8:	08020194 	.word	0x08020194
 8015dcc:	0802021c 	.word	0x0802021c
 8015dd0:	080201f4 	.word	0x080201f4
 8015dd4:	20013de8 	.word	0x20013de8

08015dd8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b084      	sub	sp, #16
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015de6:	210c      	movs	r1, #12
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f001 f85a 	bl	8016ea2 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015dee:	4b06      	ldr	r3, [pc, #24]	@ (8015e08 <dhcp_handle_nak+0x30>)
 8015df0:	4a05      	ldr	r2, [pc, #20]	@ (8015e08 <dhcp_handle_nak+0x30>)
 8015df2:	4905      	ldr	r1, [pc, #20]	@ (8015e08 <dhcp_handle_nak+0x30>)
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f7f8 fe9d 	bl	800eb34 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 fc48 	bl	8016690 <dhcp_discover>
}
 8015e00:	bf00      	nop
 8015e02:	3710      	adds	r7, #16
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}
 8015e08:	0806c9ec 	.word	0x0806c9ec

08015e0c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b084      	sub	sp, #16
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e18:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015e1a:	2108      	movs	r1, #8
 8015e1c:	68f8      	ldr	r0, [r7, #12]
 8015e1e:	f001 f840 	bl	8016ea2 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	331c      	adds	r3, #28
 8015e26:	2200      	movs	r2, #0
 8015e28:	4619      	mov	r1, r3
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f002 fbbc 	bl	80185a8 <etharp_query>
 8015e30:	4603      	mov	r3, r0
 8015e32:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	799b      	ldrb	r3, [r3, #6]
 8015e38:	2bff      	cmp	r3, #255	@ 0xff
 8015e3a:	d005      	beq.n	8015e48 <dhcp_check+0x3c>
    dhcp->tries++;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	799b      	ldrb	r3, [r3, #6]
 8015e40:	3301      	adds	r3, #1
 8015e42:	b2da      	uxtb	r2, r3
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015e48:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015e4c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e4e:	893b      	ldrh	r3, [r7, #8]
 8015e50:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015e54:	4a06      	ldr	r2, [pc, #24]	@ (8015e70 <dhcp_check+0x64>)
 8015e56:	fb82 1203 	smull	r1, r2, r2, r3
 8015e5a:	1152      	asrs	r2, r2, #5
 8015e5c:	17db      	asrs	r3, r3, #31
 8015e5e:	1ad3      	subs	r3, r2, r3
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015e66:	bf00      	nop
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}
 8015e6e:	bf00      	nop
 8015e70:	10624dd3 	.word	0x10624dd3

08015e74 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b084      	sub	sp, #16
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015e84:	4b0c      	ldr	r3, [pc, #48]	@ (8015eb8 <dhcp_handle_offer+0x44>)
 8015e86:	789b      	ldrb	r3, [r3, #2]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d011      	beq.n	8015eb0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015e92:	4b0a      	ldr	r3, [pc, #40]	@ (8015ebc <dhcp_handle_offer+0x48>)
 8015e94:	689b      	ldr	r3, [r3, #8]
 8015e96:	4618      	mov	r0, r3
 8015e98:	f7f7 fe3f 	bl	800db1a <lwip_htonl>
 8015e9c:	4602      	mov	r2, r0
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	691a      	ldr	r2, [r3, #16]
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 f808 	bl	8015ec0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015eb0:	bf00      	nop
 8015eb2:	3710      	adds	r7, #16
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}
 8015eb8:	20013de0 	.word	0x20013de0
 8015ebc:	20013dc0 	.word	0x20013dc0

08015ec0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015ec0:	b5b0      	push	{r4, r5, r7, lr}
 8015ec2:	b08a      	sub	sp, #40	@ 0x28
 8015ec4:	af02      	add	r7, sp, #8
 8015ec6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d109      	bne.n	8015ee2 <dhcp_select+0x22>
 8015ece:	4b71      	ldr	r3, [pc, #452]	@ (8016094 <dhcp_select+0x1d4>)
 8015ed0:	f240 1277 	movw	r2, #375	@ 0x177
 8015ed4:	4970      	ldr	r1, [pc, #448]	@ (8016098 <dhcp_select+0x1d8>)
 8015ed6:	4871      	ldr	r0, [pc, #452]	@ (801609c <dhcp_select+0x1dc>)
 8015ed8:	f005 f96a 	bl	801b1b0 <iprintf>
 8015edc:	f06f 030f 	mvn.w	r3, #15
 8015ee0:	e0d3      	b.n	801608a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ee6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d109      	bne.n	8015f02 <dhcp_select+0x42>
 8015eee:	4b69      	ldr	r3, [pc, #420]	@ (8016094 <dhcp_select+0x1d4>)
 8015ef0:	f240 1279 	movw	r2, #377	@ 0x179
 8015ef4:	496a      	ldr	r1, [pc, #424]	@ (80160a0 <dhcp_select+0x1e0>)
 8015ef6:	4869      	ldr	r0, [pc, #420]	@ (801609c <dhcp_select+0x1dc>)
 8015ef8:	f005 f95a 	bl	801b1b0 <iprintf>
 8015efc:	f06f 0305 	mvn.w	r3, #5
 8015f00:	e0c3      	b.n	801608a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015f02:	2101      	movs	r1, #1
 8015f04:	69b8      	ldr	r0, [r7, #24]
 8015f06:	f000 ffcc 	bl	8016ea2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015f0a:	f107 030c 	add.w	r3, r7, #12
 8015f0e:	2203      	movs	r2, #3
 8015f10:	69b9      	ldr	r1, [r7, #24]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f001 fc5e 	bl	80177d4 <dhcp_create_msg>
 8015f18:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	f000 8085 	beq.w	801602c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015f28:	89b8      	ldrh	r0, [r7, #12]
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015f30:	2302      	movs	r3, #2
 8015f32:	2239      	movs	r2, #57	@ 0x39
 8015f34:	f000 ffd0 	bl	8016ed8 <dhcp_option>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015f3c:	89b8      	ldrh	r0, [r7, #12]
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f48:	461a      	mov	r2, r3
 8015f4a:	f001 f81f 	bl	8016f8c <dhcp_option_short>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015f52:	89b8      	ldrh	r0, [r7, #12]
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015f5a:	2304      	movs	r3, #4
 8015f5c:	2232      	movs	r2, #50	@ 0x32
 8015f5e:	f000 ffbb 	bl	8016ed8 <dhcp_option>
 8015f62:	4603      	mov	r3, r0
 8015f64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015f66:	89bc      	ldrh	r4, [r7, #12]
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015f6e:	69bb      	ldr	r3, [r7, #24]
 8015f70:	69db      	ldr	r3, [r3, #28]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7f7 fdd1 	bl	800db1a <lwip_htonl>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	4629      	mov	r1, r5
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f001 f836 	bl	8016ff0 <dhcp_option_long>
 8015f84:	4603      	mov	r3, r0
 8015f86:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015f88:	89b8      	ldrh	r0, [r7, #12]
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015f90:	2304      	movs	r3, #4
 8015f92:	2236      	movs	r2, #54	@ 0x36
 8015f94:	f000 ffa0 	bl	8016ed8 <dhcp_option>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015f9c:	89bc      	ldrh	r4, [r7, #12]
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	699b      	ldr	r3, [r3, #24]
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f7 fdb6 	bl	800db1a <lwip_htonl>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	461a      	mov	r2, r3
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f001 f81b 	bl	8016ff0 <dhcp_option_long>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015fbe:	89b8      	ldrh	r0, [r7, #12]
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015fc6:	2303      	movs	r3, #3
 8015fc8:	2237      	movs	r2, #55	@ 0x37
 8015fca:	f000 ff85 	bl	8016ed8 <dhcp_option>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	77fb      	strb	r3, [r7, #31]
 8015fd6:	e00e      	b.n	8015ff6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015fd8:	89b8      	ldrh	r0, [r7, #12]
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015fe0:	7ffb      	ldrb	r3, [r7, #31]
 8015fe2:	4a30      	ldr	r2, [pc, #192]	@ (80160a4 <dhcp_select+0x1e4>)
 8015fe4:	5cd3      	ldrb	r3, [r2, r3]
 8015fe6:	461a      	mov	r2, r3
 8015fe8:	f000 ffaa 	bl	8016f40 <dhcp_option_byte>
 8015fec:	4603      	mov	r3, r0
 8015fee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ff0:	7ffb      	ldrb	r3, [r7, #31]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	77fb      	strb	r3, [r7, #31]
 8015ff6:	7ffb      	ldrb	r3, [r7, #31]
 8015ff8:	2b02      	cmp	r3, #2
 8015ffa:	d9ed      	bls.n	8015fd8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015ffc:	89b8      	ldrh	r0, [r7, #12]
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	33f0      	adds	r3, #240	@ 0xf0
 8016002:	697a      	ldr	r2, [r7, #20]
 8016004:	4619      	mov	r1, r3
 8016006:	f001 fcbb 	bl	8017980 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801600a:	4b27      	ldr	r3, [pc, #156]	@ (80160a8 <dhcp_select+0x1e8>)
 801600c:	6818      	ldr	r0, [r3, #0]
 801600e:	4b27      	ldr	r3, [pc, #156]	@ (80160ac <dhcp_select+0x1ec>)
 8016010:	9301      	str	r3, [sp, #4]
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	9300      	str	r3, [sp, #0]
 8016016:	2343      	movs	r3, #67	@ 0x43
 8016018:	4a25      	ldr	r2, [pc, #148]	@ (80160b0 <dhcp_select+0x1f0>)
 801601a:	6979      	ldr	r1, [r7, #20]
 801601c:	f7ff fb98 	bl	8015750 <udp_sendto_if_src>
 8016020:	4603      	mov	r3, r0
 8016022:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8016024:	6978      	ldr	r0, [r7, #20]
 8016026:	f7f9 fa85 	bl	800f534 <pbuf_free>
 801602a:	e001      	b.n	8016030 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801602c:	23ff      	movs	r3, #255	@ 0xff
 801602e:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	799b      	ldrb	r3, [r3, #6]
 8016034:	2bff      	cmp	r3, #255	@ 0xff
 8016036:	d005      	beq.n	8016044 <dhcp_select+0x184>
    dhcp->tries++;
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	799b      	ldrb	r3, [r3, #6]
 801603c:	3301      	adds	r3, #1
 801603e:	b2da      	uxtb	r2, r3
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	799b      	ldrb	r3, [r3, #6]
 8016048:	2b05      	cmp	r3, #5
 801604a:	d80d      	bhi.n	8016068 <dhcp_select+0x1a8>
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	799b      	ldrb	r3, [r3, #6]
 8016050:	461a      	mov	r2, r3
 8016052:	2301      	movs	r3, #1
 8016054:	4093      	lsls	r3, r2
 8016056:	b29b      	uxth	r3, r3
 8016058:	461a      	mov	r2, r3
 801605a:	0152      	lsls	r2, r2, #5
 801605c:	1ad2      	subs	r2, r2, r3
 801605e:	0092      	lsls	r2, r2, #2
 8016060:	4413      	add	r3, r2
 8016062:	00db      	lsls	r3, r3, #3
 8016064:	b29b      	uxth	r3, r3
 8016066:	e001      	b.n	801606c <dhcp_select+0x1ac>
 8016068:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801606c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801606e:	89fb      	ldrh	r3, [r7, #14]
 8016070:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016074:	4a0f      	ldr	r2, [pc, #60]	@ (80160b4 <dhcp_select+0x1f4>)
 8016076:	fb82 1203 	smull	r1, r2, r2, r3
 801607a:	1152      	asrs	r2, r2, #5
 801607c:	17db      	asrs	r3, r3, #31
 801607e:	1ad3      	subs	r3, r2, r3
 8016080:	b29a      	uxth	r2, r3
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016086:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801608a:	4618      	mov	r0, r3
 801608c:	3720      	adds	r7, #32
 801608e:	46bd      	mov	sp, r7
 8016090:	bdb0      	pop	{r4, r5, r7, pc}
 8016092:	bf00      	nop
 8016094:	08020194 	.word	0x08020194
 8016098:	08020240 	.word	0x08020240
 801609c:	080201f4 	.word	0x080201f4
 80160a0:	0802025c 	.word	0x0802025c
 80160a4:	200000bc 	.word	0x200000bc
 80160a8:	20013de8 	.word	0x20013de8
 80160ac:	0806c9ec 	.word	0x0806c9ec
 80160b0:	0806c9f0 	.word	0x0806c9f0
 80160b4:	10624dd3 	.word	0x10624dd3

080160b8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80160be:	4b27      	ldr	r3, [pc, #156]	@ (801615c <dhcp_coarse_tmr+0xa4>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	607b      	str	r3, [r7, #4]
 80160c4:	e042      	b.n	801614c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ca:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d039      	beq.n	8016146 <dhcp_coarse_tmr+0x8e>
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	795b      	ldrb	r3, [r3, #5]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d035      	beq.n	8016146 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	8a9b      	ldrh	r3, [r3, #20]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d012      	beq.n	8016108 <dhcp_coarse_tmr+0x50>
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	8a5b      	ldrh	r3, [r3, #18]
 80160e6:	3301      	adds	r3, #1
 80160e8:	b29a      	uxth	r2, r3
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	825a      	strh	r2, [r3, #18]
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	8a5a      	ldrh	r2, [r3, #18]
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	8a9b      	ldrh	r3, [r3, #20]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d106      	bne.n	8016108 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 fe2c 	bl	8016d58 <dhcp_release_and_stop>
        dhcp_start(netif);
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 f969 	bl	80163d8 <dhcp_start>
 8016106:	e01e      	b.n	8016146 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	8a1b      	ldrh	r3, [r3, #16]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d00b      	beq.n	8016128 <dhcp_coarse_tmr+0x70>
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	8a1b      	ldrh	r3, [r3, #16]
 8016114:	1e5a      	subs	r2, r3, #1
 8016116:	b291      	uxth	r1, r2
 8016118:	683a      	ldr	r2, [r7, #0]
 801611a:	8211      	strh	r1, [r2, #16]
 801611c:	2b01      	cmp	r3, #1
 801611e:	d103      	bne.n	8016128 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f000 f8c6 	bl	80162b2 <dhcp_t2_timeout>
 8016126:	e00e      	b.n	8016146 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	89db      	ldrh	r3, [r3, #14]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d00a      	beq.n	8016146 <dhcp_coarse_tmr+0x8e>
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	89db      	ldrh	r3, [r3, #14]
 8016134:	1e5a      	subs	r2, r3, #1
 8016136:	b291      	uxth	r1, r2
 8016138:	683a      	ldr	r2, [r7, #0]
 801613a:	81d1      	strh	r1, [r2, #14]
 801613c:	2b01      	cmp	r3, #1
 801613e:	d102      	bne.n	8016146 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f000 f888 	bl	8016256 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	607b      	str	r3, [r7, #4]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d1b9      	bne.n	80160c6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016152:	bf00      	nop
 8016154:	bf00      	nop
 8016156:	3708      	adds	r7, #8
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	20013d50 	.word	0x20013d50

08016160 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b082      	sub	sp, #8
 8016164:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016166:	4b16      	ldr	r3, [pc, #88]	@ (80161c0 <dhcp_fine_tmr+0x60>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	607b      	str	r3, [r7, #4]
 801616c:	e020      	b.n	80161b0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016172:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d017      	beq.n	80161aa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	891b      	ldrh	r3, [r3, #8]
 801617e:	2b01      	cmp	r3, #1
 8016180:	d906      	bls.n	8016190 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	891b      	ldrh	r3, [r3, #8]
 8016186:	3b01      	subs	r3, #1
 8016188:	b29a      	uxth	r2, r3
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	811a      	strh	r2, [r3, #8]
 801618e:	e00c      	b.n	80161aa <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	891b      	ldrh	r3, [r3, #8]
 8016194:	2b01      	cmp	r3, #1
 8016196:	d108      	bne.n	80161aa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	891b      	ldrh	r3, [r3, #8]
 801619c:	3b01      	subs	r3, #1
 801619e:	b29a      	uxth	r2, r3
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 f80d 	bl	80161c4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	607b      	str	r3, [r7, #4]
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d1db      	bne.n	801616e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80161b6:	bf00      	nop
 80161b8:	bf00      	nop
 80161ba:	3708      	adds	r7, #8
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}
 80161c0:	20013d50 	.word	0x20013d50

080161c4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b084      	sub	sp, #16
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	795b      	ldrb	r3, [r3, #5]
 80161d6:	2b0c      	cmp	r3, #12
 80161d8:	d003      	beq.n	80161e2 <dhcp_timeout+0x1e>
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	795b      	ldrb	r3, [r3, #5]
 80161de:	2b06      	cmp	r3, #6
 80161e0:	d103      	bne.n	80161ea <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fa54 	bl	8016690 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80161e8:	e031      	b.n	801624e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	795b      	ldrb	r3, [r3, #5]
 80161ee:	2b01      	cmp	r3, #1
 80161f0:	d10e      	bne.n	8016210 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	799b      	ldrb	r3, [r3, #6]
 80161f6:	2b05      	cmp	r3, #5
 80161f8:	d803      	bhi.n	8016202 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f7ff fe60 	bl	8015ec0 <dhcp_select>
}
 8016200:	e025      	b.n	801624e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 fda8 	bl	8016d58 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 f8e5 	bl	80163d8 <dhcp_start>
}
 801620e:	e01e      	b.n	801624e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	795b      	ldrb	r3, [r3, #5]
 8016214:	2b08      	cmp	r3, #8
 8016216:	d10b      	bne.n	8016230 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	799b      	ldrb	r3, [r3, #6]
 801621c:	2b01      	cmp	r3, #1
 801621e:	d803      	bhi.n	8016228 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f7ff fdf3 	bl	8015e0c <dhcp_check>
}
 8016226:	e012      	b.n	801624e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 fad3 	bl	80167d4 <dhcp_bind>
}
 801622e:	e00e      	b.n	801624e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	795b      	ldrb	r3, [r3, #5]
 8016234:	2b03      	cmp	r3, #3
 8016236:	d10a      	bne.n	801624e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	799b      	ldrb	r3, [r3, #6]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d803      	bhi.n	8016248 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f000 fcd5 	bl	8016bf0 <dhcp_reboot>
}
 8016246:	e002      	b.n	801624e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 fa21 	bl	8016690 <dhcp_discover>
}
 801624e:	bf00      	nop
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016256:	b580      	push	{r7, lr}
 8016258:	b084      	sub	sp, #16
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016262:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	795b      	ldrb	r3, [r3, #5]
 8016268:	2b01      	cmp	r3, #1
 801626a:	d007      	beq.n	801627c <dhcp_t1_timeout+0x26>
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	795b      	ldrb	r3, [r3, #5]
 8016270:	2b0a      	cmp	r3, #10
 8016272:	d003      	beq.n	801627c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016278:	2b05      	cmp	r3, #5
 801627a:	d116      	bne.n	80162aa <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 fb83 	bl	8016988 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	899b      	ldrh	r3, [r3, #12]
 8016286:	461a      	mov	r2, r3
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	8a5b      	ldrh	r3, [r3, #18]
 801628c:	1ad3      	subs	r3, r2, r3
 801628e:	2b01      	cmp	r3, #1
 8016290:	dd0b      	ble.n	80162aa <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	899b      	ldrh	r3, [r3, #12]
 8016296:	461a      	mov	r2, r3
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	8a5b      	ldrh	r3, [r3, #18]
 801629c:	1ad3      	subs	r3, r2, r3
 801629e:	0fda      	lsrs	r2, r3, #31
 80162a0:	4413      	add	r3, r2
 80162a2:	105b      	asrs	r3, r3, #1
 80162a4:	b29a      	uxth	r2, r3
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80162aa:	bf00      	nop
 80162ac:	3710      	adds	r7, #16
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}

080162b2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80162b2:	b580      	push	{r7, lr}
 80162b4:	b084      	sub	sp, #16
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	795b      	ldrb	r3, [r3, #5]
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	d00b      	beq.n	80162e0 <dhcp_t2_timeout+0x2e>
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	795b      	ldrb	r3, [r3, #5]
 80162cc:	2b0a      	cmp	r3, #10
 80162ce:	d007      	beq.n	80162e0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80162d4:	2b05      	cmp	r3, #5
 80162d6:	d003      	beq.n	80162e0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	795b      	ldrb	r3, [r3, #5]
 80162dc:	2b04      	cmp	r3, #4
 80162de:	d116      	bne.n	801630e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 fbeb 	bl	8016abc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	8a9b      	ldrh	r3, [r3, #20]
 80162ea:	461a      	mov	r2, r3
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	8a5b      	ldrh	r3, [r3, #18]
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	2b01      	cmp	r3, #1
 80162f4:	dd0b      	ble.n	801630e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	8a9b      	ldrh	r3, [r3, #20]
 80162fa:	461a      	mov	r2, r3
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	8a5b      	ldrh	r3, [r3, #18]
 8016300:	1ad3      	subs	r3, r2, r3
 8016302:	0fda      	lsrs	r2, r3, #31
 8016304:	4413      	add	r3, r2
 8016306:	105b      	asrs	r3, r3, #1
 8016308:	b29a      	uxth	r2, r3
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801630e:	bf00      	nop
 8016310:	3710      	adds	r7, #16
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}
	...

08016318 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016326:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2200      	movs	r2, #0
 801632c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2200      	movs	r2, #0
 8016332:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016334:	4b26      	ldr	r3, [pc, #152]	@ (80163d0 <dhcp_handle_ack+0xb8>)
 8016336:	78db      	ldrb	r3, [r3, #3]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d003      	beq.n	8016344 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801633c:	4b25      	ldr	r3, [pc, #148]	@ (80163d4 <dhcp_handle_ack+0xbc>)
 801633e:	68da      	ldr	r2, [r3, #12]
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016344:	4b22      	ldr	r3, [pc, #136]	@ (80163d0 <dhcp_handle_ack+0xb8>)
 8016346:	791b      	ldrb	r3, [r3, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d004      	beq.n	8016356 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801634c:	4b21      	ldr	r3, [pc, #132]	@ (80163d4 <dhcp_handle_ack+0xbc>)
 801634e:	691a      	ldr	r2, [r3, #16]
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016354:	e004      	b.n	8016360 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801635a:	085a      	lsrs	r2, r3, #1
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016360:	4b1b      	ldr	r3, [pc, #108]	@ (80163d0 <dhcp_handle_ack+0xb8>)
 8016362:	795b      	ldrb	r3, [r3, #5]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d004      	beq.n	8016372 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016368:	4b1a      	ldr	r3, [pc, #104]	@ (80163d4 <dhcp_handle_ack+0xbc>)
 801636a:	695a      	ldr	r2, [r3, #20]
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	631a      	str	r2, [r3, #48]	@ 0x30
 8016370:	e007      	b.n	8016382 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016376:	4613      	mov	r3, r2
 8016378:	00db      	lsls	r3, r3, #3
 801637a:	1a9b      	subs	r3, r3, r2
 801637c:	08da      	lsrs	r2, r3, #3
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	691a      	ldr	r2, [r3, #16]
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801638a:	4b11      	ldr	r3, [pc, #68]	@ (80163d0 <dhcp_handle_ack+0xb8>)
 801638c:	799b      	ldrb	r3, [r3, #6]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d00b      	beq.n	80163aa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016392:	4b10      	ldr	r3, [pc, #64]	@ (80163d4 <dhcp_handle_ack+0xbc>)
 8016394:	699b      	ldr	r3, [r3, #24]
 8016396:	4618      	mov	r0, r3
 8016398:	f7f7 fbbf 	bl	800db1a <lwip_htonl>
 801639c:	4602      	mov	r2, r0
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	2201      	movs	r2, #1
 80163a6:	71da      	strb	r2, [r3, #7]
 80163a8:	e002      	b.n	80163b0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2200      	movs	r2, #0
 80163ae:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80163b0:	4b07      	ldr	r3, [pc, #28]	@ (80163d0 <dhcp_handle_ack+0xb8>)
 80163b2:	79db      	ldrb	r3, [r3, #7]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d007      	beq.n	80163c8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80163b8:	4b06      	ldr	r3, [pc, #24]	@ (80163d4 <dhcp_handle_ack+0xbc>)
 80163ba:	69db      	ldr	r3, [r3, #28]
 80163bc:	4618      	mov	r0, r3
 80163be:	f7f7 fbac 	bl	800db1a <lwip_htonl>
 80163c2:	4602      	mov	r2, r0
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80163c8:	bf00      	nop
 80163ca:	3710      	adds	r7, #16
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	20013de0 	.word	0x20013de0
 80163d4:	20013dc0 	.word	0x20013dc0

080163d8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d109      	bne.n	80163fa <dhcp_start+0x22>
 80163e6:	4b37      	ldr	r3, [pc, #220]	@ (80164c4 <dhcp_start+0xec>)
 80163e8:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80163ec:	4936      	ldr	r1, [pc, #216]	@ (80164c8 <dhcp_start+0xf0>)
 80163ee:	4837      	ldr	r0, [pc, #220]	@ (80164cc <dhcp_start+0xf4>)
 80163f0:	f004 fede 	bl	801b1b0 <iprintf>
 80163f4:	f06f 030f 	mvn.w	r3, #15
 80163f8:	e060      	b.n	80164bc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016400:	f003 0301 	and.w	r3, r3, #1
 8016404:	2b00      	cmp	r3, #0
 8016406:	d109      	bne.n	801641c <dhcp_start+0x44>
 8016408:	4b2e      	ldr	r3, [pc, #184]	@ (80164c4 <dhcp_start+0xec>)
 801640a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801640e:	4930      	ldr	r1, [pc, #192]	@ (80164d0 <dhcp_start+0xf8>)
 8016410:	482e      	ldr	r0, [pc, #184]	@ (80164cc <dhcp_start+0xf4>)
 8016412:	f004 fecd 	bl	801b1b0 <iprintf>
 8016416:	f06f 030f 	mvn.w	r3, #15
 801641a:	e04f      	b.n	80164bc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016420:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016426:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801642a:	d202      	bcs.n	8016432 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801642c:	f04f 33ff 	mov.w	r3, #4294967295
 8016430:	e044      	b.n	80164bc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d10d      	bne.n	8016454 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016438:	2034      	movs	r0, #52	@ 0x34
 801643a:	f7f8 f805 	bl	800e448 <mem_malloc>
 801643e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d102      	bne.n	801644c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016446:	f04f 33ff 	mov.w	r3, #4294967295
 801644a:	e037      	b.n	80164bc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	68fa      	ldr	r2, [r7, #12]
 8016450:	625a      	str	r2, [r3, #36]	@ 0x24
 8016452:	e005      	b.n	8016460 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	791b      	ldrb	r3, [r3, #4]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d001      	beq.n	8016460 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801645c:	f7ff fc92 	bl	8015d84 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016460:	2234      	movs	r2, #52	@ 0x34
 8016462:	2100      	movs	r1, #0
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f005 f805 	bl	801b474 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801646a:	f7ff fc39 	bl	8015ce0 <dhcp_inc_pcb_refcount>
 801646e:	4603      	mov	r3, r0
 8016470:	2b00      	cmp	r3, #0
 8016472:	d002      	beq.n	801647a <dhcp_start+0xa2>
    return ERR_MEM;
 8016474:	f04f 33ff 	mov.w	r3, #4294967295
 8016478:	e020      	b.n	80164bc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	2201      	movs	r2, #1
 801647e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016486:	f003 0304 	and.w	r3, r3, #4
 801648a:	2b00      	cmp	r3, #0
 801648c:	d105      	bne.n	801649a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801648e:	2102      	movs	r1, #2
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	f000 fd06 	bl	8016ea2 <dhcp_set_state>
    return ERR_OK;
 8016496:	2300      	movs	r3, #0
 8016498:	e010      	b.n	80164bc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f000 f8f8 	bl	8016690 <dhcp_discover>
 80164a0:	4603      	mov	r3, r0
 80164a2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80164a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d005      	beq.n	80164b8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f000 fc53 	bl	8016d58 <dhcp_release_and_stop>
    return ERR_MEM;
 80164b2:	f04f 33ff 	mov.w	r3, #4294967295
 80164b6:	e001      	b.n	80164bc <dhcp_start+0xe4>
  }
  return result;
 80164b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	08020194 	.word	0x08020194
 80164c8:	08020278 	.word	0x08020278
 80164cc:	080201f4 	.word	0x080201f4
 80164d0:	080202bc 	.word	0x080202bc

080164d4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164e0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d025      	beq.n	8016534 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	795b      	ldrb	r3, [r3, #5]
 80164ec:	2b0a      	cmp	r3, #10
 80164ee:	d008      	beq.n	8016502 <dhcp_network_changed+0x2e>
 80164f0:	2b0a      	cmp	r3, #10
 80164f2:	dc0d      	bgt.n	8016510 <dhcp_network_changed+0x3c>
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d01f      	beq.n	8016538 <dhcp_network_changed+0x64>
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	db09      	blt.n	8016510 <dhcp_network_changed+0x3c>
 80164fc:	3b03      	subs	r3, #3
 80164fe:	2b02      	cmp	r3, #2
 8016500:	d806      	bhi.n	8016510 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	2200      	movs	r2, #0
 8016506:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f000 fb71 	bl	8016bf0 <dhcp_reboot>
      break;
 801650e:	e014      	b.n	801653a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	795b      	ldrb	r3, [r3, #5]
 8016514:	2b0c      	cmp	r3, #12
 8016516:	d906      	bls.n	8016526 <dhcp_network_changed+0x52>
 8016518:	4b09      	ldr	r3, [pc, #36]	@ (8016540 <dhcp_network_changed+0x6c>)
 801651a:	f240 326d 	movw	r2, #877	@ 0x36d
 801651e:	4909      	ldr	r1, [pc, #36]	@ (8016544 <dhcp_network_changed+0x70>)
 8016520:	4809      	ldr	r0, [pc, #36]	@ (8016548 <dhcp_network_changed+0x74>)
 8016522:	f004 fe45 	bl	801b1b0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2200      	movs	r2, #0
 801652a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f000 f8af 	bl	8016690 <dhcp_discover>
      break;
 8016532:	e002      	b.n	801653a <dhcp_network_changed+0x66>
    return;
 8016534:	bf00      	nop
 8016536:	e000      	b.n	801653a <dhcp_network_changed+0x66>
      break;
 8016538:	bf00      	nop
  }
}
 801653a:	3710      	adds	r7, #16
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}
 8016540:	08020194 	.word	0x08020194
 8016544:	080202e0 	.word	0x080202e0
 8016548:	080201f4 	.word	0x080201f4

0801654c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d107      	bne.n	801656c <dhcp_arp_reply+0x20>
 801655c:	4b0e      	ldr	r3, [pc, #56]	@ (8016598 <dhcp_arp_reply+0x4c>)
 801655e:	f240 328b 	movw	r2, #907	@ 0x38b
 8016562:	490e      	ldr	r1, [pc, #56]	@ (801659c <dhcp_arp_reply+0x50>)
 8016564:	480e      	ldr	r0, [pc, #56]	@ (80165a0 <dhcp_arp_reply+0x54>)
 8016566:	f004 fe23 	bl	801b1b0 <iprintf>
 801656a:	e012      	b.n	8016592 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016570:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00c      	beq.n	8016592 <dhcp_arp_reply+0x46>
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	795b      	ldrb	r3, [r3, #5]
 801657c:	2b08      	cmp	r3, #8
 801657e:	d108      	bne.n	8016592 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	69db      	ldr	r3, [r3, #28]
 8016588:	429a      	cmp	r2, r3
 801658a:	d102      	bne.n	8016592 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f000 f809 	bl	80165a4 <dhcp_decline>
    }
  }
}
 8016592:	3710      	adds	r7, #16
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}
 8016598:	08020194 	.word	0x08020194
 801659c:	08020278 	.word	0x08020278
 80165a0:	080201f4 	.word	0x080201f4

080165a4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80165a4:	b5b0      	push	{r4, r5, r7, lr}
 80165a6:	b08a      	sub	sp, #40	@ 0x28
 80165a8:	af02      	add	r7, sp, #8
 80165aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165b0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80165b2:	210c      	movs	r1, #12
 80165b4:	69b8      	ldr	r0, [r7, #24]
 80165b6:	f000 fc74 	bl	8016ea2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80165ba:	f107 030c 	add.w	r3, r7, #12
 80165be:	2204      	movs	r2, #4
 80165c0:	69b9      	ldr	r1, [r7, #24]
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f001 f906 	bl	80177d4 <dhcp_create_msg>
 80165c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d035      	beq.n	801663c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80165d6:	89b8      	ldrh	r0, [r7, #12]
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80165de:	2304      	movs	r3, #4
 80165e0:	2232      	movs	r2, #50	@ 0x32
 80165e2:	f000 fc79 	bl	8016ed8 <dhcp_option>
 80165e6:	4603      	mov	r3, r0
 80165e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80165ea:	89bc      	ldrh	r4, [r7, #12]
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80165f2:	69bb      	ldr	r3, [r7, #24]
 80165f4:	69db      	ldr	r3, [r3, #28]
 80165f6:	4618      	mov	r0, r3
 80165f8:	f7f7 fa8f 	bl	800db1a <lwip_htonl>
 80165fc:	4603      	mov	r3, r0
 80165fe:	461a      	mov	r2, r3
 8016600:	4629      	mov	r1, r5
 8016602:	4620      	mov	r0, r4
 8016604:	f000 fcf4 	bl	8016ff0 <dhcp_option_long>
 8016608:	4603      	mov	r3, r0
 801660a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801660c:	89b8      	ldrh	r0, [r7, #12]
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	33f0      	adds	r3, #240	@ 0xf0
 8016612:	697a      	ldr	r2, [r7, #20]
 8016614:	4619      	mov	r1, r3
 8016616:	f001 f9b3 	bl	8017980 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801661a:	4b19      	ldr	r3, [pc, #100]	@ (8016680 <dhcp_decline+0xdc>)
 801661c:	6818      	ldr	r0, [r3, #0]
 801661e:	4b19      	ldr	r3, [pc, #100]	@ (8016684 <dhcp_decline+0xe0>)
 8016620:	9301      	str	r3, [sp, #4]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	2343      	movs	r3, #67	@ 0x43
 8016628:	4a17      	ldr	r2, [pc, #92]	@ (8016688 <dhcp_decline+0xe4>)
 801662a:	6979      	ldr	r1, [r7, #20]
 801662c:	f7ff f890 	bl	8015750 <udp_sendto_if_src>
 8016630:	4603      	mov	r3, r0
 8016632:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016634:	6978      	ldr	r0, [r7, #20]
 8016636:	f7f8 ff7d 	bl	800f534 <pbuf_free>
 801663a:	e001      	b.n	8016640 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801663c:	23ff      	movs	r3, #255	@ 0xff
 801663e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	799b      	ldrb	r3, [r3, #6]
 8016644:	2bff      	cmp	r3, #255	@ 0xff
 8016646:	d005      	beq.n	8016654 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016648:	69bb      	ldr	r3, [r7, #24]
 801664a:	799b      	ldrb	r3, [r3, #6]
 801664c:	3301      	adds	r3, #1
 801664e:	b2da      	uxtb	r2, r3
 8016650:	69bb      	ldr	r3, [r7, #24]
 8016652:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016654:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016658:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801665a:	89fb      	ldrh	r3, [r7, #14]
 801665c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016660:	4a0a      	ldr	r2, [pc, #40]	@ (801668c <dhcp_decline+0xe8>)
 8016662:	fb82 1203 	smull	r1, r2, r2, r3
 8016666:	1152      	asrs	r2, r2, #5
 8016668:	17db      	asrs	r3, r3, #31
 801666a:	1ad3      	subs	r3, r2, r3
 801666c:	b29a      	uxth	r2, r3
 801666e:	69bb      	ldr	r3, [r7, #24]
 8016670:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016672:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016676:	4618      	mov	r0, r3
 8016678:	3720      	adds	r7, #32
 801667a:	46bd      	mov	sp, r7
 801667c:	bdb0      	pop	{r4, r5, r7, pc}
 801667e:	bf00      	nop
 8016680:	20013de8 	.word	0x20013de8
 8016684:	0806c9ec 	.word	0x0806c9ec
 8016688:	0806c9f0 	.word	0x0806c9f0
 801668c:	10624dd3 	.word	0x10624dd3

08016690 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b08a      	sub	sp, #40	@ 0x28
 8016694:	af02      	add	r7, sp, #8
 8016696:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801669c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801669e:	2300      	movs	r3, #0
 80166a0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80166a2:	69bb      	ldr	r3, [r7, #24]
 80166a4:	2200      	movs	r2, #0
 80166a6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80166a8:	2106      	movs	r1, #6
 80166aa:	69b8      	ldr	r0, [r7, #24]
 80166ac:	f000 fbf9 	bl	8016ea2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80166b0:	f107 0308 	add.w	r3, r7, #8
 80166b4:	2201      	movs	r2, #1
 80166b6:	69b9      	ldr	r1, [r7, #24]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f001 f88b 	bl	80177d4 <dhcp_create_msg>
 80166be:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d04b      	beq.n	801675e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80166c6:	693b      	ldr	r3, [r7, #16]
 80166c8:	685b      	ldr	r3, [r3, #4]
 80166ca:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80166cc:	8938      	ldrh	r0, [r7, #8]
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80166d4:	2302      	movs	r3, #2
 80166d6:	2239      	movs	r2, #57	@ 0x39
 80166d8:	f000 fbfe 	bl	8016ed8 <dhcp_option>
 80166dc:	4603      	mov	r3, r0
 80166de:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80166e0:	8938      	ldrh	r0, [r7, #8]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166ec:	461a      	mov	r2, r3
 80166ee:	f000 fc4d 	bl	8016f8c <dhcp_option_short>
 80166f2:	4603      	mov	r3, r0
 80166f4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80166f6:	8938      	ldrh	r0, [r7, #8]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80166fe:	2303      	movs	r3, #3
 8016700:	2237      	movs	r2, #55	@ 0x37
 8016702:	f000 fbe9 	bl	8016ed8 <dhcp_option>
 8016706:	4603      	mov	r3, r0
 8016708:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801670a:	2300      	movs	r3, #0
 801670c:	77fb      	strb	r3, [r7, #31]
 801670e:	e00e      	b.n	801672e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016710:	8938      	ldrh	r0, [r7, #8]
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016718:	7ffb      	ldrb	r3, [r7, #31]
 801671a:	4a29      	ldr	r2, [pc, #164]	@ (80167c0 <dhcp_discover+0x130>)
 801671c:	5cd3      	ldrb	r3, [r2, r3]
 801671e:	461a      	mov	r2, r3
 8016720:	f000 fc0e 	bl	8016f40 <dhcp_option_byte>
 8016724:	4603      	mov	r3, r0
 8016726:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016728:	7ffb      	ldrb	r3, [r7, #31]
 801672a:	3301      	adds	r3, #1
 801672c:	77fb      	strb	r3, [r7, #31]
 801672e:	7ffb      	ldrb	r3, [r7, #31]
 8016730:	2b02      	cmp	r3, #2
 8016732:	d9ed      	bls.n	8016710 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016734:	8938      	ldrh	r0, [r7, #8]
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	33f0      	adds	r3, #240	@ 0xf0
 801673a:	693a      	ldr	r2, [r7, #16]
 801673c:	4619      	mov	r1, r3
 801673e:	f001 f91f 	bl	8017980 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016742:	4b20      	ldr	r3, [pc, #128]	@ (80167c4 <dhcp_discover+0x134>)
 8016744:	6818      	ldr	r0, [r3, #0]
 8016746:	4b20      	ldr	r3, [pc, #128]	@ (80167c8 <dhcp_discover+0x138>)
 8016748:	9301      	str	r3, [sp, #4]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	9300      	str	r3, [sp, #0]
 801674e:	2343      	movs	r3, #67	@ 0x43
 8016750:	4a1e      	ldr	r2, [pc, #120]	@ (80167cc <dhcp_discover+0x13c>)
 8016752:	6939      	ldr	r1, [r7, #16]
 8016754:	f7fe fffc 	bl	8015750 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016758:	6938      	ldr	r0, [r7, #16]
 801675a:	f7f8 feeb 	bl	800f534 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801675e:	69bb      	ldr	r3, [r7, #24]
 8016760:	799b      	ldrb	r3, [r3, #6]
 8016762:	2bff      	cmp	r3, #255	@ 0xff
 8016764:	d005      	beq.n	8016772 <dhcp_discover+0xe2>
    dhcp->tries++;
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	799b      	ldrb	r3, [r3, #6]
 801676a:	3301      	adds	r3, #1
 801676c:	b2da      	uxtb	r2, r3
 801676e:	69bb      	ldr	r3, [r7, #24]
 8016770:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	799b      	ldrb	r3, [r3, #6]
 8016776:	2b05      	cmp	r3, #5
 8016778:	d80d      	bhi.n	8016796 <dhcp_discover+0x106>
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	799b      	ldrb	r3, [r3, #6]
 801677e:	461a      	mov	r2, r3
 8016780:	2301      	movs	r3, #1
 8016782:	4093      	lsls	r3, r2
 8016784:	b29b      	uxth	r3, r3
 8016786:	461a      	mov	r2, r3
 8016788:	0152      	lsls	r2, r2, #5
 801678a:	1ad2      	subs	r2, r2, r3
 801678c:	0092      	lsls	r2, r2, #2
 801678e:	4413      	add	r3, r2
 8016790:	00db      	lsls	r3, r3, #3
 8016792:	b29b      	uxth	r3, r3
 8016794:	e001      	b.n	801679a <dhcp_discover+0x10a>
 8016796:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801679a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801679c:	897b      	ldrh	r3, [r7, #10]
 801679e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80167a2:	4a0b      	ldr	r2, [pc, #44]	@ (80167d0 <dhcp_discover+0x140>)
 80167a4:	fb82 1203 	smull	r1, r2, r2, r3
 80167a8:	1152      	asrs	r2, r2, #5
 80167aa:	17db      	asrs	r3, r3, #31
 80167ac:	1ad3      	subs	r3, r2, r3
 80167ae:	b29a      	uxth	r2, r3
 80167b0:	69bb      	ldr	r3, [r7, #24]
 80167b2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80167b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3720      	adds	r7, #32
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd80      	pop	{r7, pc}
 80167c0:	200000bc 	.word	0x200000bc
 80167c4:	20013de8 	.word	0x20013de8
 80167c8:	0806c9ec 	.word	0x0806c9ec
 80167cc:	0806c9f0 	.word	0x0806c9f0
 80167d0:	10624dd3 	.word	0x10624dd3

080167d4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b088      	sub	sp, #32
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d107      	bne.n	80167f2 <dhcp_bind+0x1e>
 80167e2:	4b64      	ldr	r3, [pc, #400]	@ (8016974 <dhcp_bind+0x1a0>)
 80167e4:	f240 4215 	movw	r2, #1045	@ 0x415
 80167e8:	4963      	ldr	r1, [pc, #396]	@ (8016978 <dhcp_bind+0x1a4>)
 80167ea:	4864      	ldr	r0, [pc, #400]	@ (801697c <dhcp_bind+0x1a8>)
 80167ec:	f004 fce0 	bl	801b1b0 <iprintf>
 80167f0:	e0bc      	b.n	801696c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167f6:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d107      	bne.n	801680e <dhcp_bind+0x3a>
 80167fe:	4b5d      	ldr	r3, [pc, #372]	@ (8016974 <dhcp_bind+0x1a0>)
 8016800:	f240 4217 	movw	r2, #1047	@ 0x417
 8016804:	495e      	ldr	r1, [pc, #376]	@ (8016980 <dhcp_bind+0x1ac>)
 8016806:	485d      	ldr	r0, [pc, #372]	@ (801697c <dhcp_bind+0x1a8>)
 8016808:	f004 fcd2 	bl	801b1b0 <iprintf>
 801680c:	e0ae      	b.n	801696c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	2200      	movs	r2, #0
 8016812:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801681c:	d019      	beq.n	8016852 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016822:	331e      	adds	r3, #30
 8016824:	4a57      	ldr	r2, [pc, #348]	@ (8016984 <dhcp_bind+0x1b0>)
 8016826:	fba2 2303 	umull	r2, r3, r2, r3
 801682a:	095b      	lsrs	r3, r3, #5
 801682c:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801682e:	69bb      	ldr	r3, [r7, #24]
 8016830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016834:	d302      	bcc.n	801683c <dhcp_bind+0x68>
      timeout = 0xffff;
 8016836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801683a:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801683c:	69bb      	ldr	r3, [r7, #24]
 801683e:	b29a      	uxth	r2, r3
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	8a9b      	ldrh	r3, [r3, #20]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d102      	bne.n	8016852 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	2201      	movs	r2, #1
 8016850:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016852:	69fb      	ldr	r3, [r7, #28]
 8016854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801685a:	d01d      	beq.n	8016898 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016860:	331e      	adds	r3, #30
 8016862:	4a48      	ldr	r2, [pc, #288]	@ (8016984 <dhcp_bind+0x1b0>)
 8016864:	fba2 2303 	umull	r2, r3, r2, r3
 8016868:	095b      	lsrs	r3, r3, #5
 801686a:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801686c:	69bb      	ldr	r3, [r7, #24]
 801686e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016872:	d302      	bcc.n	801687a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016874:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016878:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	b29a      	uxth	r2, r3
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	895b      	ldrh	r3, [r3, #10]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d102      	bne.n	8016890 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801688a:	69fb      	ldr	r3, [r7, #28]
 801688c:	2201      	movs	r2, #1
 801688e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	895a      	ldrh	r2, [r3, #10]
 8016894:	69fb      	ldr	r3, [r7, #28]
 8016896:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168a0:	d01d      	beq.n	80168de <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80168a2:	69fb      	ldr	r3, [r7, #28]
 80168a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168a6:	331e      	adds	r3, #30
 80168a8:	4a36      	ldr	r2, [pc, #216]	@ (8016984 <dhcp_bind+0x1b0>)
 80168aa:	fba2 2303 	umull	r2, r3, r2, r3
 80168ae:	095b      	lsrs	r3, r3, #5
 80168b0:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80168b2:	69bb      	ldr	r3, [r7, #24]
 80168b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80168b8:	d302      	bcc.n	80168c0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80168ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80168be:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80168c0:	69bb      	ldr	r3, [r7, #24]
 80168c2:	b29a      	uxth	r2, r3
 80168c4:	69fb      	ldr	r3, [r7, #28]
 80168c6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80168c8:	69fb      	ldr	r3, [r7, #28]
 80168ca:	899b      	ldrh	r3, [r3, #12]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d102      	bne.n	80168d6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	2201      	movs	r2, #1
 80168d4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	899a      	ldrh	r2, [r3, #12]
 80168da:	69fb      	ldr	r3, [r7, #28]
 80168dc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80168de:	69fb      	ldr	r3, [r7, #28]
 80168e0:	895a      	ldrh	r2, [r3, #10]
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	899b      	ldrh	r3, [r3, #12]
 80168e6:	429a      	cmp	r2, r3
 80168e8:	d306      	bcc.n	80168f8 <dhcp_bind+0x124>
 80168ea:	69fb      	ldr	r3, [r7, #28]
 80168ec:	899b      	ldrh	r3, [r3, #12]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d002      	beq.n	80168f8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	2200      	movs	r2, #0
 80168f6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80168f8:	69fb      	ldr	r3, [r7, #28]
 80168fa:	79db      	ldrb	r3, [r3, #7]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d003      	beq.n	8016908 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016900:	69fb      	ldr	r3, [r7, #28]
 8016902:	6a1b      	ldr	r3, [r3, #32]
 8016904:	613b      	str	r3, [r7, #16]
 8016906:	e014      	b.n	8016932 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016908:	69fb      	ldr	r3, [r7, #28]
 801690a:	331c      	adds	r3, #28
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016910:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016914:	2b00      	cmp	r3, #0
 8016916:	db02      	blt.n	801691e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016918:	23ff      	movs	r3, #255	@ 0xff
 801691a:	613b      	str	r3, [r7, #16]
 801691c:	e009      	b.n	8016932 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801691e:	7dfb      	ldrb	r3, [r7, #23]
 8016920:	2bbf      	cmp	r3, #191	@ 0xbf
 8016922:	d903      	bls.n	801692c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016924:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8016928:	613b      	str	r3, [r7, #16]
 801692a:	e002      	b.n	8016932 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801692c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016930:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016936:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d108      	bne.n	8016950 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	69da      	ldr	r2, [r3, #28]
 8016942:	693b      	ldr	r3, [r7, #16]
 8016944:	4013      	ands	r3, r2
 8016946:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801694e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016950:	210a      	movs	r1, #10
 8016952:	69f8      	ldr	r0, [r7, #28]
 8016954:	f000 faa5 	bl	8016ea2 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	f103 011c 	add.w	r1, r3, #28
 801695e:	f107 030c 	add.w	r3, r7, #12
 8016962:	f107 0210 	add.w	r2, r7, #16
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f7f8 f8e4 	bl	800eb34 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801696c:	3720      	adds	r7, #32
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	08020194 	.word	0x08020194
 8016978:	080202f4 	.word	0x080202f4
 801697c:	080201f4 	.word	0x080201f4
 8016980:	08020310 	.word	0x08020310
 8016984:	88888889 	.word	0x88888889

08016988 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b08a      	sub	sp, #40	@ 0x28
 801698c:	af02      	add	r7, sp, #8
 801698e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016994:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016996:	2105      	movs	r1, #5
 8016998:	69b8      	ldr	r0, [r7, #24]
 801699a:	f000 fa82 	bl	8016ea2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801699e:	f107 030c 	add.w	r3, r7, #12
 80169a2:	2203      	movs	r2, #3
 80169a4:	69b9      	ldr	r1, [r7, #24]
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 ff14 	bl	80177d4 <dhcp_create_msg>
 80169ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d04e      	beq.n	8016a52 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80169ba:	89b8      	ldrh	r0, [r7, #12]
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80169c2:	2302      	movs	r3, #2
 80169c4:	2239      	movs	r2, #57	@ 0x39
 80169c6:	f000 fa87 	bl	8016ed8 <dhcp_option>
 80169ca:	4603      	mov	r3, r0
 80169cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80169ce:	89b8      	ldrh	r0, [r7, #12]
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169da:	461a      	mov	r2, r3
 80169dc:	f000 fad6 	bl	8016f8c <dhcp_option_short>
 80169e0:	4603      	mov	r3, r0
 80169e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80169e4:	89b8      	ldrh	r0, [r7, #12]
 80169e6:	693b      	ldr	r3, [r7, #16]
 80169e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80169ec:	2303      	movs	r3, #3
 80169ee:	2237      	movs	r2, #55	@ 0x37
 80169f0:	f000 fa72 	bl	8016ed8 <dhcp_option>
 80169f4:	4603      	mov	r3, r0
 80169f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169f8:	2300      	movs	r3, #0
 80169fa:	77bb      	strb	r3, [r7, #30]
 80169fc:	e00e      	b.n	8016a1c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80169fe:	89b8      	ldrh	r0, [r7, #12]
 8016a00:	693b      	ldr	r3, [r7, #16]
 8016a02:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016a06:	7fbb      	ldrb	r3, [r7, #30]
 8016a08:	4a29      	ldr	r2, [pc, #164]	@ (8016ab0 <dhcp_renew+0x128>)
 8016a0a:	5cd3      	ldrb	r3, [r2, r3]
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	f000 fa97 	bl	8016f40 <dhcp_option_byte>
 8016a12:	4603      	mov	r3, r0
 8016a14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016a16:	7fbb      	ldrb	r3, [r7, #30]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	77bb      	strb	r3, [r7, #30]
 8016a1c:	7fbb      	ldrb	r3, [r7, #30]
 8016a1e:	2b02      	cmp	r3, #2
 8016a20:	d9ed      	bls.n	80169fe <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016a22:	89b8      	ldrh	r0, [r7, #12]
 8016a24:	693b      	ldr	r3, [r7, #16]
 8016a26:	33f0      	adds	r3, #240	@ 0xf0
 8016a28:	697a      	ldr	r2, [r7, #20]
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	f000 ffa8 	bl	8017980 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016a30:	4b20      	ldr	r3, [pc, #128]	@ (8016ab4 <dhcp_renew+0x12c>)
 8016a32:	6818      	ldr	r0, [r3, #0]
 8016a34:	69bb      	ldr	r3, [r7, #24]
 8016a36:	f103 0218 	add.w	r2, r3, #24
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	9300      	str	r3, [sp, #0]
 8016a3e:	2343      	movs	r3, #67	@ 0x43
 8016a40:	6979      	ldr	r1, [r7, #20]
 8016a42:	f7fe fe11 	bl	8015668 <udp_sendto_if>
 8016a46:	4603      	mov	r3, r0
 8016a48:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016a4a:	6978      	ldr	r0, [r7, #20]
 8016a4c:	f7f8 fd72 	bl	800f534 <pbuf_free>
 8016a50:	e001      	b.n	8016a56 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016a52:	23ff      	movs	r3, #255	@ 0xff
 8016a54:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016a56:	69bb      	ldr	r3, [r7, #24]
 8016a58:	799b      	ldrb	r3, [r3, #6]
 8016a5a:	2bff      	cmp	r3, #255	@ 0xff
 8016a5c:	d005      	beq.n	8016a6a <dhcp_renew+0xe2>
    dhcp->tries++;
 8016a5e:	69bb      	ldr	r3, [r7, #24]
 8016a60:	799b      	ldrb	r3, [r3, #6]
 8016a62:	3301      	adds	r3, #1
 8016a64:	b2da      	uxtb	r2, r3
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8016a6a:	69bb      	ldr	r3, [r7, #24]
 8016a6c:	799b      	ldrb	r3, [r3, #6]
 8016a6e:	2b09      	cmp	r3, #9
 8016a70:	d809      	bhi.n	8016a86 <dhcp_renew+0xfe>
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	799b      	ldrb	r3, [r3, #6]
 8016a76:	461a      	mov	r2, r3
 8016a78:	0152      	lsls	r2, r2, #5
 8016a7a:	1ad2      	subs	r2, r2, r3
 8016a7c:	0092      	lsls	r2, r2, #2
 8016a7e:	4413      	add	r3, r2
 8016a80:	011b      	lsls	r3, r3, #4
 8016a82:	b29b      	uxth	r3, r3
 8016a84:	e001      	b.n	8016a8a <dhcp_renew+0x102>
 8016a86:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8016a8a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016a8c:	89fb      	ldrh	r3, [r7, #14]
 8016a8e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016a92:	4a09      	ldr	r2, [pc, #36]	@ (8016ab8 <dhcp_renew+0x130>)
 8016a94:	fb82 1203 	smull	r1, r2, r2, r3
 8016a98:	1152      	asrs	r2, r2, #5
 8016a9a:	17db      	asrs	r3, r3, #31
 8016a9c:	1ad3      	subs	r3, r2, r3
 8016a9e:	b29a      	uxth	r2, r3
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3720      	adds	r7, #32
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	200000bc 	.word	0x200000bc
 8016ab4:	20013de8 	.word	0x20013de8
 8016ab8:	10624dd3 	.word	0x10624dd3

08016abc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b08a      	sub	sp, #40	@ 0x28
 8016ac0:	af02      	add	r7, sp, #8
 8016ac2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ac8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016aca:	2104      	movs	r1, #4
 8016acc:	69b8      	ldr	r0, [r7, #24]
 8016ace:	f000 f9e8 	bl	8016ea2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016ad2:	f107 030c 	add.w	r3, r7, #12
 8016ad6:	2203      	movs	r2, #3
 8016ad8:	69b9      	ldr	r1, [r7, #24]
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	f000 fe7a 	bl	80177d4 <dhcp_create_msg>
 8016ae0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d04c      	beq.n	8016b82 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016aee:	89b8      	ldrh	r0, [r7, #12]
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016af6:	2302      	movs	r3, #2
 8016af8:	2239      	movs	r2, #57	@ 0x39
 8016afa:	f000 f9ed 	bl	8016ed8 <dhcp_option>
 8016afe:	4603      	mov	r3, r0
 8016b00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016b02:	89b8      	ldrh	r0, [r7, #12]
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b0e:	461a      	mov	r2, r3
 8016b10:	f000 fa3c 	bl	8016f8c <dhcp_option_short>
 8016b14:	4603      	mov	r3, r0
 8016b16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016b18:	89b8      	ldrh	r0, [r7, #12]
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b20:	2303      	movs	r3, #3
 8016b22:	2237      	movs	r2, #55	@ 0x37
 8016b24:	f000 f9d8 	bl	8016ed8 <dhcp_option>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	77bb      	strb	r3, [r7, #30]
 8016b30:	e00e      	b.n	8016b50 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016b32:	89b8      	ldrh	r0, [r7, #12]
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b3a:	7fbb      	ldrb	r3, [r7, #30]
 8016b3c:	4a28      	ldr	r2, [pc, #160]	@ (8016be0 <dhcp_rebind+0x124>)
 8016b3e:	5cd3      	ldrb	r3, [r2, r3]
 8016b40:	461a      	mov	r2, r3
 8016b42:	f000 f9fd 	bl	8016f40 <dhcp_option_byte>
 8016b46:	4603      	mov	r3, r0
 8016b48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b4a:	7fbb      	ldrb	r3, [r7, #30]
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	77bb      	strb	r3, [r7, #30]
 8016b50:	7fbb      	ldrb	r3, [r7, #30]
 8016b52:	2b02      	cmp	r3, #2
 8016b54:	d9ed      	bls.n	8016b32 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016b56:	89b8      	ldrh	r0, [r7, #12]
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	33f0      	adds	r3, #240	@ 0xf0
 8016b5c:	697a      	ldr	r2, [r7, #20]
 8016b5e:	4619      	mov	r1, r3
 8016b60:	f000 ff0e 	bl	8017980 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016b64:	4b1f      	ldr	r3, [pc, #124]	@ (8016be4 <dhcp_rebind+0x128>)
 8016b66:	6818      	ldr	r0, [r3, #0]
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	2343      	movs	r3, #67	@ 0x43
 8016b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8016be8 <dhcp_rebind+0x12c>)
 8016b70:	6979      	ldr	r1, [r7, #20]
 8016b72:	f7fe fd79 	bl	8015668 <udp_sendto_if>
 8016b76:	4603      	mov	r3, r0
 8016b78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016b7a:	6978      	ldr	r0, [r7, #20]
 8016b7c:	f7f8 fcda 	bl	800f534 <pbuf_free>
 8016b80:	e001      	b.n	8016b86 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016b82:	23ff      	movs	r3, #255	@ 0xff
 8016b84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	799b      	ldrb	r3, [r3, #6]
 8016b8a:	2bff      	cmp	r3, #255	@ 0xff
 8016b8c:	d005      	beq.n	8016b9a <dhcp_rebind+0xde>
    dhcp->tries++;
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	799b      	ldrb	r3, [r3, #6]
 8016b92:	3301      	adds	r3, #1
 8016b94:	b2da      	uxtb	r2, r3
 8016b96:	69bb      	ldr	r3, [r7, #24]
 8016b98:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	799b      	ldrb	r3, [r3, #6]
 8016b9e:	2b09      	cmp	r3, #9
 8016ba0:	d809      	bhi.n	8016bb6 <dhcp_rebind+0xfa>
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	799b      	ldrb	r3, [r3, #6]
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	0152      	lsls	r2, r2, #5
 8016baa:	1ad2      	subs	r2, r2, r3
 8016bac:	0092      	lsls	r2, r2, #2
 8016bae:	4413      	add	r3, r2
 8016bb0:	00db      	lsls	r3, r3, #3
 8016bb2:	b29b      	uxth	r3, r3
 8016bb4:	e001      	b.n	8016bba <dhcp_rebind+0xfe>
 8016bb6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016bba:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016bbc:	89fb      	ldrh	r3, [r7, #14]
 8016bbe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8016bec <dhcp_rebind+0x130>)
 8016bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8016bc8:	1152      	asrs	r2, r2, #5
 8016bca:	17db      	asrs	r3, r3, #31
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3720      	adds	r7, #32
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	200000bc 	.word	0x200000bc
 8016be4:	20013de8 	.word	0x20013de8
 8016be8:	0806c9f0 	.word	0x0806c9f0
 8016bec:	10624dd3 	.word	0x10624dd3

08016bf0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016bf0:	b5b0      	push	{r4, r5, r7, lr}
 8016bf2:	b08a      	sub	sp, #40	@ 0x28
 8016bf4:	af02      	add	r7, sp, #8
 8016bf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bfc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016bfe:	2103      	movs	r1, #3
 8016c00:	69b8      	ldr	r0, [r7, #24]
 8016c02:	f000 f94e 	bl	8016ea2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016c06:	f107 030c 	add.w	r3, r7, #12
 8016c0a:	2203      	movs	r2, #3
 8016c0c:	69b9      	ldr	r1, [r7, #24]
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f000 fde0 	bl	80177d4 <dhcp_create_msg>
 8016c14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d066      	beq.n	8016cea <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016c22:	89b8      	ldrh	r0, [r7, #12]
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016c2a:	2302      	movs	r3, #2
 8016c2c:	2239      	movs	r2, #57	@ 0x39
 8016c2e:	f000 f953 	bl	8016ed8 <dhcp_option>
 8016c32:	4603      	mov	r3, r0
 8016c34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016c36:	89b8      	ldrh	r0, [r7, #12]
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	33f0      	adds	r3, #240	@ 0xf0
 8016c3c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8016c40:	4619      	mov	r1, r3
 8016c42:	f000 f9a3 	bl	8016f8c <dhcp_option_short>
 8016c46:	4603      	mov	r3, r0
 8016c48:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016c4a:	89b8      	ldrh	r0, [r7, #12]
 8016c4c:	693b      	ldr	r3, [r7, #16]
 8016c4e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016c52:	2304      	movs	r3, #4
 8016c54:	2232      	movs	r2, #50	@ 0x32
 8016c56:	f000 f93f 	bl	8016ed8 <dhcp_option>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016c5e:	89bc      	ldrh	r4, [r7, #12]
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016c66:	69bb      	ldr	r3, [r7, #24]
 8016c68:	69db      	ldr	r3, [r3, #28]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7f6 ff55 	bl	800db1a <lwip_htonl>
 8016c70:	4603      	mov	r3, r0
 8016c72:	461a      	mov	r2, r3
 8016c74:	4629      	mov	r1, r5
 8016c76:	4620      	mov	r0, r4
 8016c78:	f000 f9ba 	bl	8016ff0 <dhcp_option_long>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016c80:	89b8      	ldrh	r0, [r7, #12]
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016c88:	2303      	movs	r3, #3
 8016c8a:	2237      	movs	r2, #55	@ 0x37
 8016c8c:	f000 f924 	bl	8016ed8 <dhcp_option>
 8016c90:	4603      	mov	r3, r0
 8016c92:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c94:	2300      	movs	r3, #0
 8016c96:	77bb      	strb	r3, [r7, #30]
 8016c98:	e00e      	b.n	8016cb8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016c9a:	89b8      	ldrh	r0, [r7, #12]
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016ca2:	7fbb      	ldrb	r3, [r7, #30]
 8016ca4:	4a28      	ldr	r2, [pc, #160]	@ (8016d48 <dhcp_reboot+0x158>)
 8016ca6:	5cd3      	ldrb	r3, [r2, r3]
 8016ca8:	461a      	mov	r2, r3
 8016caa:	f000 f949 	bl	8016f40 <dhcp_option_byte>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016cb2:	7fbb      	ldrb	r3, [r7, #30]
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	77bb      	strb	r3, [r7, #30]
 8016cb8:	7fbb      	ldrb	r3, [r7, #30]
 8016cba:	2b02      	cmp	r3, #2
 8016cbc:	d9ed      	bls.n	8016c9a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016cbe:	89b8      	ldrh	r0, [r7, #12]
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	33f0      	adds	r3, #240	@ 0xf0
 8016cc4:	697a      	ldr	r2, [r7, #20]
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	f000 fe5a 	bl	8017980 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8016d4c <dhcp_reboot+0x15c>)
 8016cce:	6818      	ldr	r0, [r3, #0]
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	9300      	str	r3, [sp, #0]
 8016cd4:	2343      	movs	r3, #67	@ 0x43
 8016cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8016d50 <dhcp_reboot+0x160>)
 8016cd8:	6979      	ldr	r1, [r7, #20]
 8016cda:	f7fe fcc5 	bl	8015668 <udp_sendto_if>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016ce2:	6978      	ldr	r0, [r7, #20]
 8016ce4:	f7f8 fc26 	bl	800f534 <pbuf_free>
 8016ce8:	e001      	b.n	8016cee <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016cea:	23ff      	movs	r3, #255	@ 0xff
 8016cec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	799b      	ldrb	r3, [r3, #6]
 8016cf2:	2bff      	cmp	r3, #255	@ 0xff
 8016cf4:	d005      	beq.n	8016d02 <dhcp_reboot+0x112>
    dhcp->tries++;
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	799b      	ldrb	r3, [r3, #6]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	b2da      	uxtb	r2, r3
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016d02:	69bb      	ldr	r3, [r7, #24]
 8016d04:	799b      	ldrb	r3, [r3, #6]
 8016d06:	2b09      	cmp	r3, #9
 8016d08:	d809      	bhi.n	8016d1e <dhcp_reboot+0x12e>
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	799b      	ldrb	r3, [r3, #6]
 8016d0e:	461a      	mov	r2, r3
 8016d10:	0152      	lsls	r2, r2, #5
 8016d12:	1ad2      	subs	r2, r2, r3
 8016d14:	0092      	lsls	r2, r2, #2
 8016d16:	4413      	add	r3, r2
 8016d18:	00db      	lsls	r3, r3, #3
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	e001      	b.n	8016d22 <dhcp_reboot+0x132>
 8016d1e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016d22:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016d24:	89fb      	ldrh	r3, [r7, #14]
 8016d26:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8016d54 <dhcp_reboot+0x164>)
 8016d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8016d30:	1152      	asrs	r2, r2, #5
 8016d32:	17db      	asrs	r3, r3, #31
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	b29a      	uxth	r2, r3
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016d3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	3720      	adds	r7, #32
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bdb0      	pop	{r4, r5, r7, pc}
 8016d48:	200000bc 	.word	0x200000bc
 8016d4c:	20013de8 	.word	0x20013de8
 8016d50:	0806c9f0 	.word	0x0806c9f0
 8016d54:	10624dd3 	.word	0x10624dd3

08016d58 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016d58:	b5b0      	push	{r4, r5, r7, lr}
 8016d5a:	b08a      	sub	sp, #40	@ 0x28
 8016d5c:	af02      	add	r7, sp, #8
 8016d5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d64:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016d66:	69fb      	ldr	r3, [r7, #28]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	f000 8084 	beq.w	8016e76 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	795b      	ldrb	r3, [r3, #5]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	f000 8081 	beq.w	8016e7a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	699b      	ldr	r3, [r3, #24]
 8016d7c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016d7e:	69fb      	ldr	r3, [r7, #28]
 8016d80:	2200      	movs	r2, #0
 8016d82:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016d84:	69fb      	ldr	r3, [r7, #28]
 8016d86:	2200      	movs	r2, #0
 8016d88:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016d8a:	69fb      	ldr	r3, [r7, #28]
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	2200      	movs	r2, #0
 8016d94:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016d96:	69fb      	ldr	r3, [r7, #28]
 8016d98:	2200      	movs	r2, #0
 8016d9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016da4:	69fb      	ldr	r3, [r7, #28]
 8016da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	2200      	movs	r2, #0
 8016db0:	829a      	strh	r2, [r3, #20]
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	8a9a      	ldrh	r2, [r3, #20]
 8016db6:	69fb      	ldr	r3, [r7, #28]
 8016db8:	825a      	strh	r2, [r3, #18]
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	8a5a      	ldrh	r2, [r3, #18]
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	821a      	strh	r2, [r3, #16]
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	8a1a      	ldrh	r2, [r3, #16]
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f000 fe06 	bl	80179dc <dhcp_supplied_address>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d03b      	beq.n	8016e4e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016dd6:	f107 030e 	add.w	r3, r7, #14
 8016dda:	2207      	movs	r2, #7
 8016ddc:	69f9      	ldr	r1, [r7, #28]
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f000 fcf8 	bl	80177d4 <dhcp_create_msg>
 8016de4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016de6:	69bb      	ldr	r3, [r7, #24]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d030      	beq.n	8016e4e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016dec:	69bb      	ldr	r3, [r7, #24]
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016df2:	89f8      	ldrh	r0, [r7, #14]
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016dfa:	2304      	movs	r3, #4
 8016dfc:	2236      	movs	r2, #54	@ 0x36
 8016dfe:	f000 f86b 	bl	8016ed8 <dhcp_option>
 8016e02:	4603      	mov	r3, r0
 8016e04:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016e06:	89fc      	ldrh	r4, [r7, #14]
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7f6 fe82 	bl	800db1a <lwip_htonl>
 8016e16:	4603      	mov	r3, r0
 8016e18:	461a      	mov	r2, r3
 8016e1a:	4629      	mov	r1, r5
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	f000 f8e7 	bl	8016ff0 <dhcp_option_long>
 8016e22:	4603      	mov	r3, r0
 8016e24:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e26:	89f8      	ldrh	r0, [r7, #14]
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	33f0      	adds	r3, #240	@ 0xf0
 8016e2c:	69ba      	ldr	r2, [r7, #24]
 8016e2e:	4619      	mov	r1, r3
 8016e30:	f000 fda6 	bl	8017980 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016e34:	4b13      	ldr	r3, [pc, #76]	@ (8016e84 <dhcp_release_and_stop+0x12c>)
 8016e36:	6818      	ldr	r0, [r3, #0]
 8016e38:	f107 0210 	add.w	r2, r7, #16
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	9300      	str	r3, [sp, #0]
 8016e40:	2343      	movs	r3, #67	@ 0x43
 8016e42:	69b9      	ldr	r1, [r7, #24]
 8016e44:	f7fe fc10 	bl	8015668 <udp_sendto_if>
      pbuf_free(p_out);
 8016e48:	69b8      	ldr	r0, [r7, #24]
 8016e4a:	f7f8 fb73 	bl	800f534 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8016e88 <dhcp_release_and_stop+0x130>)
 8016e50:	4a0d      	ldr	r2, [pc, #52]	@ (8016e88 <dhcp_release_and_stop+0x130>)
 8016e52:	490d      	ldr	r1, [pc, #52]	@ (8016e88 <dhcp_release_and_stop+0x130>)
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7f7 fe6d 	bl	800eb34 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016e5a:	2100      	movs	r1, #0
 8016e5c:	69f8      	ldr	r0, [r7, #28]
 8016e5e:	f000 f820 	bl	8016ea2 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016e62:	69fb      	ldr	r3, [r7, #28]
 8016e64:	791b      	ldrb	r3, [r3, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d008      	beq.n	8016e7c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016e6a:	f7fe ff8b 	bl	8015d84 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016e6e:	69fb      	ldr	r3, [r7, #28]
 8016e70:	2200      	movs	r2, #0
 8016e72:	711a      	strb	r2, [r3, #4]
 8016e74:	e002      	b.n	8016e7c <dhcp_release_and_stop+0x124>
    return;
 8016e76:	bf00      	nop
 8016e78:	e000      	b.n	8016e7c <dhcp_release_and_stop+0x124>
    return;
 8016e7a:	bf00      	nop
  }
}
 8016e7c:	3720      	adds	r7, #32
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bdb0      	pop	{r4, r5, r7, pc}
 8016e82:	bf00      	nop
 8016e84:	20013de8 	.word	0x20013de8
 8016e88:	0806c9ec 	.word	0x0806c9ec

08016e8c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f7ff ff5f 	bl	8016d58 <dhcp_release_and_stop>
}
 8016e9a:	bf00      	nop
 8016e9c:	3708      	adds	r7, #8
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}

08016ea2 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016ea2:	b480      	push	{r7}
 8016ea4:	b083      	sub	sp, #12
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
 8016eaa:	460b      	mov	r3, r1
 8016eac:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	795b      	ldrb	r3, [r3, #5]
 8016eb2:	78fa      	ldrb	r2, [r7, #3]
 8016eb4:	429a      	cmp	r2, r3
 8016eb6:	d008      	beq.n	8016eca <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	78fa      	ldrb	r2, [r7, #3]
 8016ebc:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	811a      	strh	r2, [r3, #8]
  }
}
 8016eca:	bf00      	nop
 8016ecc:	370c      	adds	r7, #12
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed4:	4770      	bx	lr
	...

08016ed8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b082      	sub	sp, #8
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6039      	str	r1, [r7, #0]
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	80fb      	strh	r3, [r7, #6]
 8016ee8:	460b      	mov	r3, r1
 8016eea:	717b      	strb	r3, [r7, #5]
 8016eec:	4613      	mov	r3, r2
 8016eee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016ef0:	88fa      	ldrh	r2, [r7, #6]
 8016ef2:	793b      	ldrb	r3, [r7, #4]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	3302      	adds	r3, #2
 8016ef8:	2b44      	cmp	r3, #68	@ 0x44
 8016efa:	d906      	bls.n	8016f0a <dhcp_option+0x32>
 8016efc:	4b0d      	ldr	r3, [pc, #52]	@ (8016f34 <dhcp_option+0x5c>)
 8016efe:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016f02:	490d      	ldr	r1, [pc, #52]	@ (8016f38 <dhcp_option+0x60>)
 8016f04:	480d      	ldr	r0, [pc, #52]	@ (8016f3c <dhcp_option+0x64>)
 8016f06:	f004 f953 	bl	801b1b0 <iprintf>
  options[options_out_len++] = option_type;
 8016f0a:	88fb      	ldrh	r3, [r7, #6]
 8016f0c:	1c5a      	adds	r2, r3, #1
 8016f0e:	80fa      	strh	r2, [r7, #6]
 8016f10:	461a      	mov	r2, r3
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	4413      	add	r3, r2
 8016f16:	797a      	ldrb	r2, [r7, #5]
 8016f18:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016f1a:	88fb      	ldrh	r3, [r7, #6]
 8016f1c:	1c5a      	adds	r2, r3, #1
 8016f1e:	80fa      	strh	r2, [r7, #6]
 8016f20:	461a      	mov	r2, r3
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	4413      	add	r3, r2
 8016f26:	793a      	ldrb	r2, [r7, #4]
 8016f28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016f2a:	88fb      	ldrh	r3, [r7, #6]
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3708      	adds	r7, #8
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	08020194 	.word	0x08020194
 8016f38:	08020328 	.word	0x08020328
 8016f3c:	080201f4 	.word	0x080201f4

08016f40 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	4603      	mov	r3, r0
 8016f48:	6039      	str	r1, [r7, #0]
 8016f4a:	80fb      	strh	r3, [r7, #6]
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016f50:	88fb      	ldrh	r3, [r7, #6]
 8016f52:	2b43      	cmp	r3, #67	@ 0x43
 8016f54:	d906      	bls.n	8016f64 <dhcp_option_byte+0x24>
 8016f56:	4b0a      	ldr	r3, [pc, #40]	@ (8016f80 <dhcp_option_byte+0x40>)
 8016f58:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8016f5c:	4909      	ldr	r1, [pc, #36]	@ (8016f84 <dhcp_option_byte+0x44>)
 8016f5e:	480a      	ldr	r0, [pc, #40]	@ (8016f88 <dhcp_option_byte+0x48>)
 8016f60:	f004 f926 	bl	801b1b0 <iprintf>
  options[options_out_len++] = value;
 8016f64:	88fb      	ldrh	r3, [r7, #6]
 8016f66:	1c5a      	adds	r2, r3, #1
 8016f68:	80fa      	strh	r2, [r7, #6]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	4413      	add	r3, r2
 8016f70:	797a      	ldrb	r2, [r7, #5]
 8016f72:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016f74:	88fb      	ldrh	r3, [r7, #6]
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3708      	adds	r7, #8
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	08020194 	.word	0x08020194
 8016f84:	0802036c 	.word	0x0802036c
 8016f88:	080201f4 	.word	0x080201f4

08016f8c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	4603      	mov	r3, r0
 8016f94:	6039      	str	r1, [r7, #0]
 8016f96:	80fb      	strh	r3, [r7, #6]
 8016f98:	4613      	mov	r3, r2
 8016f9a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016f9c:	88fb      	ldrh	r3, [r7, #6]
 8016f9e:	3302      	adds	r3, #2
 8016fa0:	2b44      	cmp	r3, #68	@ 0x44
 8016fa2:	d906      	bls.n	8016fb2 <dhcp_option_short+0x26>
 8016fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8016fe4 <dhcp_option_short+0x58>)
 8016fa6:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8016faa:	490f      	ldr	r1, [pc, #60]	@ (8016fe8 <dhcp_option_short+0x5c>)
 8016fac:	480f      	ldr	r0, [pc, #60]	@ (8016fec <dhcp_option_short+0x60>)
 8016fae:	f004 f8ff 	bl	801b1b0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016fb2:	88bb      	ldrh	r3, [r7, #4]
 8016fb4:	0a1b      	lsrs	r3, r3, #8
 8016fb6:	b29a      	uxth	r2, r3
 8016fb8:	88fb      	ldrh	r3, [r7, #6]
 8016fba:	1c59      	adds	r1, r3, #1
 8016fbc:	80f9      	strh	r1, [r7, #6]
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	440b      	add	r3, r1
 8016fc4:	b2d2      	uxtb	r2, r2
 8016fc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016fc8:	88fb      	ldrh	r3, [r7, #6]
 8016fca:	1c5a      	adds	r2, r3, #1
 8016fcc:	80fa      	strh	r2, [r7, #6]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	4413      	add	r3, r2
 8016fd4:	88ba      	ldrh	r2, [r7, #4]
 8016fd6:	b2d2      	uxtb	r2, r2
 8016fd8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016fda:	88fb      	ldrh	r3, [r7, #6]
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	08020194 	.word	0x08020194
 8016fe8:	080203a4 	.word	0x080203a4
 8016fec:	080201f4 	.word	0x080201f4

08016ff0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	60b9      	str	r1, [r7, #8]
 8016ffa:	607a      	str	r2, [r7, #4]
 8016ffc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016ffe:	89fb      	ldrh	r3, [r7, #14]
 8017000:	3304      	adds	r3, #4
 8017002:	2b44      	cmp	r3, #68	@ 0x44
 8017004:	d906      	bls.n	8017014 <dhcp_option_long+0x24>
 8017006:	4b19      	ldr	r3, [pc, #100]	@ (801706c <dhcp_option_long+0x7c>)
 8017008:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801700c:	4918      	ldr	r1, [pc, #96]	@ (8017070 <dhcp_option_long+0x80>)
 801700e:	4819      	ldr	r0, [pc, #100]	@ (8017074 <dhcp_option_long+0x84>)
 8017010:	f004 f8ce 	bl	801b1b0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	0e1a      	lsrs	r2, r3, #24
 8017018:	89fb      	ldrh	r3, [r7, #14]
 801701a:	1c59      	adds	r1, r3, #1
 801701c:	81f9      	strh	r1, [r7, #14]
 801701e:	4619      	mov	r1, r3
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	440b      	add	r3, r1
 8017024:	b2d2      	uxtb	r2, r2
 8017026:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	0c1a      	lsrs	r2, r3, #16
 801702c:	89fb      	ldrh	r3, [r7, #14]
 801702e:	1c59      	adds	r1, r3, #1
 8017030:	81f9      	strh	r1, [r7, #14]
 8017032:	4619      	mov	r1, r3
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	440b      	add	r3, r1
 8017038:	b2d2      	uxtb	r2, r2
 801703a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	0a1a      	lsrs	r2, r3, #8
 8017040:	89fb      	ldrh	r3, [r7, #14]
 8017042:	1c59      	adds	r1, r3, #1
 8017044:	81f9      	strh	r1, [r7, #14]
 8017046:	4619      	mov	r1, r3
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	440b      	add	r3, r1
 801704c:	b2d2      	uxtb	r2, r2
 801704e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017050:	89fb      	ldrh	r3, [r7, #14]
 8017052:	1c5a      	adds	r2, r3, #1
 8017054:	81fa      	strh	r2, [r7, #14]
 8017056:	461a      	mov	r2, r3
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	4413      	add	r3, r2
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	b2d2      	uxtb	r2, r2
 8017060:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017062:	89fb      	ldrh	r3, [r7, #14]
}
 8017064:	4618      	mov	r0, r3
 8017066:	3710      	adds	r7, #16
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	08020194 	.word	0x08020194
 8017070:	080203e0 	.word	0x080203e0
 8017074:	080201f4 	.word	0x080201f4

08017078 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b092      	sub	sp, #72	@ 0x48
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
 8017080:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017082:	2300      	movs	r3, #0
 8017084:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 8017086:	2300      	movs	r3, #0
 8017088:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801708a:	2208      	movs	r2, #8
 801708c:	2100      	movs	r1, #0
 801708e:	48b8      	ldr	r0, [pc, #736]	@ (8017370 <dhcp_parse_reply+0x2f8>)
 8017090:	f004 f9f0 	bl	801b474 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	895b      	ldrh	r3, [r3, #10]
 8017098:	2b2b      	cmp	r3, #43	@ 0x2b
 801709a:	d802      	bhi.n	80170a2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801709c:	f06f 0301 	mvn.w	r3, #1
 80170a0:	e2b8      	b.n	8017614 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80170a8:	23f0      	movs	r3, #240	@ 0xf0
 80170aa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	891b      	ldrh	r3, [r3, #8]
 80170b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 80170b6:	e00c      	b.n	80170d2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80170b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170ba:	895b      	ldrh	r3, [r3, #10]
 80170bc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80170be:	1ad3      	subs	r3, r2, r3
 80170c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80170c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170c4:	895b      	ldrh	r3, [r3, #10]
 80170c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80170c8:	1ad3      	subs	r3, r2, r3
 80170ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 80170cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 80170d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d004      	beq.n	80170e2 <dhcp_parse_reply+0x6a>
 80170d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170da:	895b      	ldrh	r3, [r3, #10]
 80170dc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80170de:	429a      	cmp	r2, r3
 80170e0:	d2ea      	bcs.n	80170b8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80170e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d102      	bne.n	80170ee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80170e8:	f06f 0301 	mvn.w	r3, #1
 80170ec:	e292      	b.n	8017614 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 80170ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80170f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 80170f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80170f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 80170f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80170fe:	e247      	b.n	8017590 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8017100:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017106:	4413      	add	r3, r2
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801710c:	2300      	movs	r3, #0
 801710e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 8017112:	f04f 33ff 	mov.w	r3, #4294967295
 8017116:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8017118:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801711c:	3302      	adds	r3, #2
 801711e:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 8017120:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017122:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017126:	429a      	cmp	r2, r3
 8017128:	d202      	bcs.n	8017130 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801712a:	f06f 0301 	mvn.w	r3, #1
 801712e:	e271      	b.n	8017614 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017134:	3301      	adds	r3, #1
 8017136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017138:	8952      	ldrh	r2, [r2, #10]
 801713a:	4293      	cmp	r3, r2
 801713c:	da08      	bge.n	8017150 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801713e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017142:	3301      	adds	r3, #1
 8017144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017146:	4413      	add	r3, r2
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801714e:	e00b      	b.n	8017168 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d004      	beq.n	8017162 <dhcp_parse_reply+0xea>
 8017158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	e000      	b.n	8017164 <dhcp_parse_reply+0xec>
 8017162:	2300      	movs	r3, #0
 8017164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017168:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801716c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 8017170:	7efb      	ldrb	r3, [r7, #27]
 8017172:	2b3b      	cmp	r3, #59	@ 0x3b
 8017174:	f200 812c 	bhi.w	80173d0 <dhcp_parse_reply+0x358>
 8017178:	a201      	add	r2, pc, #4	@ (adr r2, 8017180 <dhcp_parse_reply+0x108>)
 801717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801717e:	bf00      	nop
 8017180:	08017271 	.word	0x08017271
 8017184:	08017281 	.word	0x08017281
 8017188:	080173d1 	.word	0x080173d1
 801718c:	080172a3 	.word	0x080172a3
 8017190:	080173d1 	.word	0x080173d1
 8017194:	080173d1 	.word	0x080173d1
 8017198:	080173d1 	.word	0x080173d1
 801719c:	080173d1 	.word	0x080173d1
 80171a0:	080173d1 	.word	0x080173d1
 80171a4:	080173d1 	.word	0x080173d1
 80171a8:	080173d1 	.word	0x080173d1
 80171ac:	080173d1 	.word	0x080173d1
 80171b0:	080173d1 	.word	0x080173d1
 80171b4:	080173d1 	.word	0x080173d1
 80171b8:	080173d1 	.word	0x080173d1
 80171bc:	080173d1 	.word	0x080173d1
 80171c0:	080173d1 	.word	0x080173d1
 80171c4:	080173d1 	.word	0x080173d1
 80171c8:	080173d1 	.word	0x080173d1
 80171cc:	080173d1 	.word	0x080173d1
 80171d0:	080173d1 	.word	0x080173d1
 80171d4:	080173d1 	.word	0x080173d1
 80171d8:	080173d1 	.word	0x080173d1
 80171dc:	080173d1 	.word	0x080173d1
 80171e0:	080173d1 	.word	0x080173d1
 80171e4:	080173d1 	.word	0x080173d1
 80171e8:	080173d1 	.word	0x080173d1
 80171ec:	080173d1 	.word	0x080173d1
 80171f0:	080173d1 	.word	0x080173d1
 80171f4:	080173d1 	.word	0x080173d1
 80171f8:	080173d1 	.word	0x080173d1
 80171fc:	080173d1 	.word	0x080173d1
 8017200:	080173d1 	.word	0x080173d1
 8017204:	080173d1 	.word	0x080173d1
 8017208:	080173d1 	.word	0x080173d1
 801720c:	080173d1 	.word	0x080173d1
 8017210:	080173d1 	.word	0x080173d1
 8017214:	080173d1 	.word	0x080173d1
 8017218:	080173d1 	.word	0x080173d1
 801721c:	080173d1 	.word	0x080173d1
 8017220:	080173d1 	.word	0x080173d1
 8017224:	080173d1 	.word	0x080173d1
 8017228:	080173d1 	.word	0x080173d1
 801722c:	080173d1 	.word	0x080173d1
 8017230:	080173d1 	.word	0x080173d1
 8017234:	080173d1 	.word	0x080173d1
 8017238:	080173d1 	.word	0x080173d1
 801723c:	080173d1 	.word	0x080173d1
 8017240:	080173d1 	.word	0x080173d1
 8017244:	080173d1 	.word	0x080173d1
 8017248:	080173d1 	.word	0x080173d1
 801724c:	080172cf 	.word	0x080172cf
 8017250:	080172f1 	.word	0x080172f1
 8017254:	0801732d 	.word	0x0801732d
 8017258:	0801734f 	.word	0x0801734f
 801725c:	080173d1 	.word	0x080173d1
 8017260:	080173d1 	.word	0x080173d1
 8017264:	080173d1 	.word	0x080173d1
 8017268:	0801738d 	.word	0x0801738d
 801726c:	080173af 	.word	0x080173af
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017270:	2300      	movs	r3, #0
 8017272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017276:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801727a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 801727e:	e0ab      	b.n	80173d8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017280:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017284:	2b04      	cmp	r3, #4
 8017286:	d009      	beq.n	801729c <dhcp_parse_reply+0x224>
 8017288:	4b3a      	ldr	r3, [pc, #232]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 801728a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801728e:	493a      	ldr	r1, [pc, #232]	@ (8017378 <dhcp_parse_reply+0x300>)
 8017290:	483a      	ldr	r0, [pc, #232]	@ (801737c <dhcp_parse_reply+0x304>)
 8017292:	f003 ff8d 	bl	801b1b0 <iprintf>
 8017296:	f06f 0305 	mvn.w	r3, #5
 801729a:	e1bb      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801729c:	2306      	movs	r3, #6
 801729e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80172a0:	e09a      	b.n	80173d8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80172a2:	2304      	movs	r3, #4
 80172a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80172a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80172ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d209      	bcs.n	80172c8 <dhcp_parse_reply+0x250>
 80172b4:	4b2f      	ldr	r3, [pc, #188]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 80172b6:	f240 6233 	movw	r2, #1587	@ 0x633
 80172ba:	4931      	ldr	r1, [pc, #196]	@ (8017380 <dhcp_parse_reply+0x308>)
 80172bc:	482f      	ldr	r0, [pc, #188]	@ (801737c <dhcp_parse_reply+0x304>)
 80172be:	f003 ff77 	bl	801b1b0 <iprintf>
 80172c2:	f06f 0305 	mvn.w	r3, #5
 80172c6:	e1a5      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80172c8:	2307      	movs	r3, #7
 80172ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80172cc:	e084      	b.n	80173d8 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80172ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80172d2:	2b04      	cmp	r3, #4
 80172d4:	d009      	beq.n	80172ea <dhcp_parse_reply+0x272>
 80172d6:	4b27      	ldr	r3, [pc, #156]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 80172d8:	f240 6241 	movw	r2, #1601	@ 0x641
 80172dc:	4926      	ldr	r1, [pc, #152]	@ (8017378 <dhcp_parse_reply+0x300>)
 80172de:	4827      	ldr	r0, [pc, #156]	@ (801737c <dhcp_parse_reply+0x304>)
 80172e0:	f003 ff66 	bl	801b1b0 <iprintf>
 80172e4:	f06f 0305 	mvn.w	r3, #5
 80172e8:	e194      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80172ea:	2303      	movs	r3, #3
 80172ec:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80172ee:	e073      	b.n	80173d8 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80172f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	d009      	beq.n	801730c <dhcp_parse_reply+0x294>
 80172f8:	4b1e      	ldr	r3, [pc, #120]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 80172fa:	f240 624f 	movw	r2, #1615	@ 0x64f
 80172fe:	4921      	ldr	r1, [pc, #132]	@ (8017384 <dhcp_parse_reply+0x30c>)
 8017300:	481e      	ldr	r0, [pc, #120]	@ (801737c <dhcp_parse_reply+0x304>)
 8017302:	f003 ff55 	bl	801b1b0 <iprintf>
 8017306:	f06f 0305 	mvn.w	r3, #5
 801730a:	e183      	b.n	8017614 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801730c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801730e:	2bf0      	cmp	r3, #240	@ 0xf0
 8017310:	d009      	beq.n	8017326 <dhcp_parse_reply+0x2ae>
 8017312:	4b18      	ldr	r3, [pc, #96]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 8017314:	f240 6251 	movw	r2, #1617	@ 0x651
 8017318:	491b      	ldr	r1, [pc, #108]	@ (8017388 <dhcp_parse_reply+0x310>)
 801731a:	4818      	ldr	r0, [pc, #96]	@ (801737c <dhcp_parse_reply+0x304>)
 801731c:	f003 ff48 	bl	801b1b0 <iprintf>
 8017320:	f06f 0305 	mvn.w	r3, #5
 8017324:	e176      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017326:	2300      	movs	r3, #0
 8017328:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801732a:	e055      	b.n	80173d8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801732c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017330:	2b01      	cmp	r3, #1
 8017332:	d009      	beq.n	8017348 <dhcp_parse_reply+0x2d0>
 8017334:	4b0f      	ldr	r3, [pc, #60]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 8017336:	f240 6255 	movw	r2, #1621	@ 0x655
 801733a:	4912      	ldr	r1, [pc, #72]	@ (8017384 <dhcp_parse_reply+0x30c>)
 801733c:	480f      	ldr	r0, [pc, #60]	@ (801737c <dhcp_parse_reply+0x304>)
 801733e:	f003 ff37 	bl	801b1b0 <iprintf>
 8017342:	f06f 0305 	mvn.w	r3, #5
 8017346:	e165      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017348:	2301      	movs	r3, #1
 801734a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801734c:	e044      	b.n	80173d8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801734e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017352:	2b04      	cmp	r3, #4
 8017354:	d009      	beq.n	801736a <dhcp_parse_reply+0x2f2>
 8017356:	4b07      	ldr	r3, [pc, #28]	@ (8017374 <dhcp_parse_reply+0x2fc>)
 8017358:	f240 6259 	movw	r2, #1625	@ 0x659
 801735c:	4906      	ldr	r1, [pc, #24]	@ (8017378 <dhcp_parse_reply+0x300>)
 801735e:	4807      	ldr	r0, [pc, #28]	@ (801737c <dhcp_parse_reply+0x304>)
 8017360:	f003 ff26 	bl	801b1b0 <iprintf>
 8017364:	f06f 0305 	mvn.w	r3, #5
 8017368:	e154      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801736a:	2302      	movs	r3, #2
 801736c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801736e:	e033      	b.n	80173d8 <dhcp_parse_reply+0x360>
 8017370:	20013de0 	.word	0x20013de0
 8017374:	08020194 	.word	0x08020194
 8017378:	0802041c 	.word	0x0802041c
 801737c:	080201f4 	.word	0x080201f4
 8017380:	08020428 	.word	0x08020428
 8017384:	0802043c 	.word	0x0802043c
 8017388:	08020448 	.word	0x08020448
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801738c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017390:	2b04      	cmp	r3, #4
 8017392:	d009      	beq.n	80173a8 <dhcp_parse_reply+0x330>
 8017394:	4ba1      	ldr	r3, [pc, #644]	@ (801761c <dhcp_parse_reply+0x5a4>)
 8017396:	f240 625d 	movw	r2, #1629	@ 0x65d
 801739a:	49a1      	ldr	r1, [pc, #644]	@ (8017620 <dhcp_parse_reply+0x5a8>)
 801739c:	48a1      	ldr	r0, [pc, #644]	@ (8017624 <dhcp_parse_reply+0x5ac>)
 801739e:	f003 ff07 	bl	801b1b0 <iprintf>
 80173a2:	f06f 0305 	mvn.w	r3, #5
 80173a6:	e135      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80173a8:	2304      	movs	r3, #4
 80173aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80173ac:	e014      	b.n	80173d8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80173ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80173b2:	2b04      	cmp	r3, #4
 80173b4:	d009      	beq.n	80173ca <dhcp_parse_reply+0x352>
 80173b6:	4b99      	ldr	r3, [pc, #612]	@ (801761c <dhcp_parse_reply+0x5a4>)
 80173b8:	f240 6261 	movw	r2, #1633	@ 0x661
 80173bc:	4998      	ldr	r1, [pc, #608]	@ (8017620 <dhcp_parse_reply+0x5a8>)
 80173be:	4899      	ldr	r0, [pc, #612]	@ (8017624 <dhcp_parse_reply+0x5ac>)
 80173c0:	f003 fef6 	bl	801b1b0 <iprintf>
 80173c4:	f06f 0305 	mvn.w	r3, #5
 80173c8:	e124      	b.n	8017614 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80173ca:	2305      	movs	r3, #5
 80173cc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80173ce:	e003      	b.n	80173d8 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 80173d0:	2300      	movs	r3, #0
 80173d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80173d6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80173d8:	7efb      	ldrb	r3, [r7, #27]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d105      	bne.n	80173ea <dhcp_parse_reply+0x372>
      offset++;
 80173de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80173e2:	3301      	adds	r3, #1
 80173e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80173e8:	e0a4      	b.n	8017534 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80173ea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80173ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80173f2:	4413      	add	r3, r2
 80173f4:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80173f8:	4293      	cmp	r3, r2
 80173fa:	dd02      	ble.n	8017402 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 80173fc:	f06f 0301 	mvn.w	r3, #1
 8017400:	e108      	b.n	8017614 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8017402:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017406:	b29a      	uxth	r2, r3
 8017408:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801740c:	4413      	add	r3, r2
 801740e:	b29b      	uxth	r3, r3
 8017410:	3302      	adds	r3, #2
 8017412:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 8017416:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801741a:	2b00      	cmp	r3, #0
 801741c:	f000 808a 	beq.w	8017534 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8017420:	2300      	movs	r3, #0
 8017422:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017426:	2b00      	cmp	r3, #0
 8017428:	db02      	blt.n	8017430 <dhcp_parse_reply+0x3b8>
 801742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742c:	2b07      	cmp	r3, #7
 801742e:	dd06      	ble.n	801743e <dhcp_parse_reply+0x3c6>
 8017430:	4b7a      	ldr	r3, [pc, #488]	@ (801761c <dhcp_parse_reply+0x5a4>)
 8017432:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8017436:	497c      	ldr	r1, [pc, #496]	@ (8017628 <dhcp_parse_reply+0x5b0>)
 8017438:	487a      	ldr	r0, [pc, #488]	@ (8017624 <dhcp_parse_reply+0x5ac>)
 801743a:	f003 feb9 	bl	801b1b0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801743e:	4a7b      	ldr	r2, [pc, #492]	@ (801762c <dhcp_parse_reply+0x5b4>)
 8017440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017442:	4413      	add	r3, r2
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d174      	bne.n	8017534 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 801744a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801744e:	2b04      	cmp	r3, #4
 8017450:	bf28      	it	cs
 8017452:	2304      	movcs	r3, #4
 8017454:	b2db      	uxtb	r3, r3
 8017456:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017458:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801745a:	8b3a      	ldrh	r2, [r7, #24]
 801745c:	f107 010c 	add.w	r1, r7, #12
 8017460:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017462:	f7f8 fa6d 	bl	800f940 <pbuf_copy_partial>
 8017466:	4603      	mov	r3, r0
 8017468:	461a      	mov	r2, r3
 801746a:	8b3b      	ldrh	r3, [r7, #24]
 801746c:	4293      	cmp	r3, r2
 801746e:	d002      	beq.n	8017476 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8017470:	f06f 0301 	mvn.w	r3, #1
 8017474:	e0ce      	b.n	8017614 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8017476:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801747a:	2b04      	cmp	r3, #4
 801747c:	d933      	bls.n	80174e6 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801747e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8017482:	f003 0303 	and.w	r3, r3, #3
 8017486:	b2db      	uxtb	r3, r3
 8017488:	2b00      	cmp	r3, #0
 801748a:	d009      	beq.n	80174a0 <dhcp_parse_reply+0x428>
 801748c:	4b63      	ldr	r3, [pc, #396]	@ (801761c <dhcp_parse_reply+0x5a4>)
 801748e:	f240 6281 	movw	r2, #1665	@ 0x681
 8017492:	4967      	ldr	r1, [pc, #412]	@ (8017630 <dhcp_parse_reply+0x5b8>)
 8017494:	4863      	ldr	r0, [pc, #396]	@ (8017624 <dhcp_parse_reply+0x5ac>)
 8017496:	f003 fe8b 	bl	801b1b0 <iprintf>
 801749a:	f06f 0305 	mvn.w	r3, #5
 801749e:	e0b9      	b.n	8017614 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 80174a0:	4a62      	ldr	r2, [pc, #392]	@ (801762c <dhcp_parse_reply+0x5b4>)
 80174a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a4:	4413      	add	r3, r2
 80174a6:	2201      	movs	r2, #1
 80174a8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	4618      	mov	r0, r3
 80174ae:	f7f6 fb34 	bl	800db1a <lwip_htonl>
 80174b2:	4602      	mov	r2, r0
 80174b4:	495f      	ldr	r1, [pc, #380]	@ (8017634 <dhcp_parse_reply+0x5bc>)
 80174b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80174bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80174c0:	3b04      	subs	r3, #4
 80174c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 80174c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174c8:	3304      	adds	r3, #4
 80174ca:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 80174cc:	8afa      	ldrh	r2, [r7, #22]
 80174ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d202      	bcs.n	80174da <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 80174d4:	f06f 0301 	mvn.w	r3, #1
 80174d8:	e09c      	b.n	8017614 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 80174da:	8afb      	ldrh	r3, [r7, #22]
 80174dc:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 80174de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e0:	3301      	adds	r3, #1
 80174e2:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 80174e4:	e79e      	b.n	8017424 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 80174e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80174ea:	2b04      	cmp	r3, #4
 80174ec:	d106      	bne.n	80174fc <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7f6 fb12 	bl	800db1a <lwip_htonl>
 80174f6:	4603      	mov	r3, r0
 80174f8:	60fb      	str	r3, [r7, #12]
 80174fa:	e011      	b.n	8017520 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80174fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8017500:	2b01      	cmp	r3, #1
 8017502:	d009      	beq.n	8017518 <dhcp_parse_reply+0x4a0>
 8017504:	4b45      	ldr	r3, [pc, #276]	@ (801761c <dhcp_parse_reply+0x5a4>)
 8017506:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801750a:	494b      	ldr	r1, [pc, #300]	@ (8017638 <dhcp_parse_reply+0x5c0>)
 801750c:	4845      	ldr	r0, [pc, #276]	@ (8017624 <dhcp_parse_reply+0x5ac>)
 801750e:	f003 fe4f 	bl	801b1b0 <iprintf>
 8017512:	f06f 0305 	mvn.w	r3, #5
 8017516:	e07d      	b.n	8017614 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8017518:	f107 030c 	add.w	r3, r7, #12
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017520:	4a42      	ldr	r2, [pc, #264]	@ (801762c <dhcp_parse_reply+0x5b4>)
 8017522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017524:	4413      	add	r3, r2
 8017526:	2201      	movs	r2, #1
 8017528:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801752a:	68fa      	ldr	r2, [r7, #12]
 801752c:	4941      	ldr	r1, [pc, #260]	@ (8017634 <dhcp_parse_reply+0x5bc>)
 801752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017536:	895b      	ldrh	r3, [r3, #10]
 8017538:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801753c:	429a      	cmp	r2, r3
 801753e:	d327      	bcc.n	8017590 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8017540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017542:	895b      	ldrh	r3, [r3, #10]
 8017544:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017548:	1ad3      	subs	r3, r2, r3
 801754a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801754e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017550:	895b      	ldrh	r3, [r3, #10]
 8017552:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017554:	1ad3      	subs	r3, r2, r3
 8017556:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 8017558:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801755c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801755e:	429a      	cmp	r2, r3
 8017560:	d213      	bcs.n	801758a <dhcp_parse_reply+0x512>
        q = q->next;
 8017562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801756a:	2b00      	cmp	r3, #0
 801756c:	d109      	bne.n	8017582 <dhcp_parse_reply+0x50a>
 801756e:	4b2b      	ldr	r3, [pc, #172]	@ (801761c <dhcp_parse_reply+0x5a4>)
 8017570:	f240 629d 	movw	r2, #1693	@ 0x69d
 8017574:	4931      	ldr	r1, [pc, #196]	@ (801763c <dhcp_parse_reply+0x5c4>)
 8017576:	482b      	ldr	r0, [pc, #172]	@ (8017624 <dhcp_parse_reply+0x5ac>)
 8017578:	f003 fe1a 	bl	801b1b0 <iprintf>
 801757c:	f06f 0305 	mvn.w	r3, #5
 8017580:	e048      	b.n	8017614 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8017582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017584:	685b      	ldr	r3, [r3, #4]
 8017586:	643b      	str	r3, [r7, #64]	@ 0x40
 8017588:	e002      	b.n	8017590 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801758a:	f06f 0301 	mvn.w	r3, #1
 801758e:	e041      	b.n	8017614 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017592:	2b00      	cmp	r3, #0
 8017594:	d00c      	beq.n	80175b0 <dhcp_parse_reply+0x538>
 8017596:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801759a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801759c:	429a      	cmp	r2, r3
 801759e:	d207      	bcs.n	80175b0 <dhcp_parse_reply+0x538>
 80175a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80175a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80175a6:	4413      	add	r3, r2
 80175a8:	781b      	ldrb	r3, [r3, #0]
 80175aa:	2bff      	cmp	r3, #255	@ 0xff
 80175ac:	f47f ada8 	bne.w	8017100 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80175b0:	4b1e      	ldr	r3, [pc, #120]	@ (801762c <dhcp_parse_reply+0x5b4>)
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d018      	beq.n	80175ea <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80175b8:	4b1e      	ldr	r3, [pc, #120]	@ (8017634 <dhcp_parse_reply+0x5bc>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80175be:	4b1b      	ldr	r3, [pc, #108]	@ (801762c <dhcp_parse_reply+0x5b4>)
 80175c0:	2200      	movs	r2, #0
 80175c2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d102      	bne.n	80175d0 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 80175ca:	2301      	movs	r3, #1
 80175cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80175ce:	e00c      	b.n	80175ea <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80175d0:	693b      	ldr	r3, [r7, #16]
 80175d2:	2b02      	cmp	r3, #2
 80175d4:	d102      	bne.n	80175dc <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 80175d6:	2301      	movs	r3, #1
 80175d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80175da:	e006      	b.n	80175ea <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80175dc:	693b      	ldr	r3, [r7, #16]
 80175de:	2b03      	cmp	r3, #3
 80175e0:	d103      	bne.n	80175ea <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 80175e2:	2301      	movs	r3, #1
 80175e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 80175e6:	2301      	movs	r3, #1
 80175e8:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80175ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d006      	beq.n	80175fe <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80175f0:	2300      	movs	r3, #0
 80175f2:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 80175f4:	236c      	movs	r3, #108	@ 0x6c
 80175f6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80175f8:	23ec      	movs	r3, #236	@ 0xec
 80175fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80175fc:	e559      	b.n	80170b2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80175fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017600:	2b00      	cmp	r3, #0
 8017602:	d006      	beq.n	8017612 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8017604:	2300      	movs	r3, #0
 8017606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 8017608:	232c      	movs	r3, #44	@ 0x2c
 801760a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801760c:	236c      	movs	r3, #108	@ 0x6c
 801760e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 8017610:	e54f      	b.n	80170b2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017612:	2300      	movs	r3, #0
}
 8017614:	4618      	mov	r0, r3
 8017616:	3748      	adds	r7, #72	@ 0x48
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	08020194 	.word	0x08020194
 8017620:	0802041c 	.word	0x0802041c
 8017624:	080201f4 	.word	0x080201f4
 8017628:	08020460 	.word	0x08020460
 801762c:	20013de0 	.word	0x20013de0
 8017630:	08020474 	.word	0x08020474
 8017634:	20013dc0 	.word	0x20013dc0
 8017638:	0802048c 	.word	0x0802048c
 801763c:	080204a0 	.word	0x080204a0

08017640 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b08a      	sub	sp, #40	@ 0x28
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
 801764c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801764e:	4b5e      	ldr	r3, [pc, #376]	@ (80177c8 <dhcp_recv+0x188>)
 8017650:	685b      	ldr	r3, [r3, #4]
 8017652:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017654:	69fb      	ldr	r3, [r7, #28]
 8017656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017658:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017660:	69bb      	ldr	r3, [r7, #24]
 8017662:	2b00      	cmp	r3, #0
 8017664:	f000 809a 	beq.w	801779c <dhcp_recv+0x15c>
 8017668:	69bb      	ldr	r3, [r7, #24]
 801766a:	791b      	ldrb	r3, [r3, #4]
 801766c:	2b00      	cmp	r3, #0
 801766e:	f000 8095 	beq.w	801779c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	895b      	ldrh	r3, [r3, #10]
 8017676:	2b2b      	cmp	r3, #43	@ 0x2b
 8017678:	f240 8092 	bls.w	80177a0 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	2b02      	cmp	r3, #2
 8017682:	f040 808f 	bne.w	80177a4 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017686:	2300      	movs	r3, #0
 8017688:	74fb      	strb	r3, [r7, #19]
 801768a:	e00e      	b.n	80176aa <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801768c:	7cfb      	ldrb	r3, [r7, #19]
 801768e:	69fa      	ldr	r2, [r7, #28]
 8017690:	4413      	add	r3, r2
 8017692:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8017696:	7cfb      	ldrb	r3, [r7, #19]
 8017698:	6979      	ldr	r1, [r7, #20]
 801769a:	440b      	add	r3, r1
 801769c:	7f1b      	ldrb	r3, [r3, #28]
 801769e:	429a      	cmp	r2, r3
 80176a0:	f040 8082 	bne.w	80177a8 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80176a4:	7cfb      	ldrb	r3, [r7, #19]
 80176a6:	3301      	adds	r3, #1
 80176a8:	74fb      	strb	r3, [r7, #19]
 80176aa:	69fb      	ldr	r3, [r7, #28]
 80176ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80176b0:	7cfa      	ldrb	r2, [r7, #19]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d202      	bcs.n	80176bc <dhcp_recv+0x7c>
 80176b6:	7cfb      	ldrb	r3, [r7, #19]
 80176b8:	2b05      	cmp	r3, #5
 80176ba:	d9e7      	bls.n	801768c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80176bc:	697b      	ldr	r3, [r7, #20]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7f6 fa2a 	bl	800db1a <lwip_htonl>
 80176c6:	4602      	mov	r2, r0
 80176c8:	69bb      	ldr	r3, [r7, #24]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	429a      	cmp	r2, r3
 80176ce:	d16d      	bne.n	80177ac <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80176d0:	69b9      	ldr	r1, [r7, #24]
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f7ff fcd0 	bl	8017078 <dhcp_parse_reply>
 80176d8:	4603      	mov	r3, r0
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d168      	bne.n	80177b0 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80176de:	4b3b      	ldr	r3, [pc, #236]	@ (80177cc <dhcp_recv+0x18c>)
 80176e0:	785b      	ldrb	r3, [r3, #1]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d066      	beq.n	80177b4 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	685b      	ldr	r3, [r3, #4]
 80176ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80176ec:	4b38      	ldr	r3, [pc, #224]	@ (80177d0 <dhcp_recv+0x190>)
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80176f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80176f8:	2b05      	cmp	r3, #5
 80176fa:	d12a      	bne.n	8017752 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80176fc:	69bb      	ldr	r3, [r7, #24]
 80176fe:	795b      	ldrb	r3, [r3, #5]
 8017700:	2b01      	cmp	r3, #1
 8017702:	d112      	bne.n	801772a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017706:	69f8      	ldr	r0, [r7, #28]
 8017708:	f7fe fe06 	bl	8016318 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801770c:	69fb      	ldr	r3, [r7, #28]
 801770e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017712:	f003 0308 	and.w	r3, r3, #8
 8017716:	2b00      	cmp	r3, #0
 8017718:	d003      	beq.n	8017722 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801771a:	69f8      	ldr	r0, [r7, #28]
 801771c:	f7fe fb76 	bl	8015e0c <dhcp_check>
 8017720:	e04b      	b.n	80177ba <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017722:	69f8      	ldr	r0, [r7, #28]
 8017724:	f7ff f856 	bl	80167d4 <dhcp_bind>
 8017728:	e047      	b.n	80177ba <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801772a:	69bb      	ldr	r3, [r7, #24]
 801772c:	795b      	ldrb	r3, [r3, #5]
 801772e:	2b03      	cmp	r3, #3
 8017730:	d007      	beq.n	8017742 <dhcp_recv+0x102>
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	795b      	ldrb	r3, [r3, #5]
 8017736:	2b04      	cmp	r3, #4
 8017738:	d003      	beq.n	8017742 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801773a:	69bb      	ldr	r3, [r7, #24]
 801773c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801773e:	2b05      	cmp	r3, #5
 8017740:	d13b      	bne.n	80177ba <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8017742:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017744:	69f8      	ldr	r0, [r7, #28]
 8017746:	f7fe fde7 	bl	8016318 <dhcp_handle_ack>
      dhcp_bind(netif);
 801774a:	69f8      	ldr	r0, [r7, #28]
 801774c:	f7ff f842 	bl	80167d4 <dhcp_bind>
 8017750:	e033      	b.n	80177ba <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017752:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017756:	2b06      	cmp	r3, #6
 8017758:	d113      	bne.n	8017782 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801775a:	69bb      	ldr	r3, [r7, #24]
 801775c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801775e:	2b03      	cmp	r3, #3
 8017760:	d00b      	beq.n	801777a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017762:	69bb      	ldr	r3, [r7, #24]
 8017764:	795b      	ldrb	r3, [r3, #5]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d007      	beq.n	801777a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801776e:	2b04      	cmp	r3, #4
 8017770:	d003      	beq.n	801777a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017772:	69bb      	ldr	r3, [r7, #24]
 8017774:	795b      	ldrb	r3, [r3, #5]
 8017776:	2b05      	cmp	r3, #5
 8017778:	d103      	bne.n	8017782 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801777a:	69f8      	ldr	r0, [r7, #28]
 801777c:	f7fe fb2c 	bl	8015dd8 <dhcp_handle_nak>
 8017780:	e01b      	b.n	80177ba <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017782:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017786:	2b02      	cmp	r3, #2
 8017788:	d116      	bne.n	80177b8 <dhcp_recv+0x178>
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	795b      	ldrb	r3, [r3, #5]
 801778e:	2b06      	cmp	r3, #6
 8017790:	d112      	bne.n	80177b8 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017794:	69f8      	ldr	r0, [r7, #28]
 8017796:	f7fe fb6d 	bl	8015e74 <dhcp_handle_offer>
 801779a:	e00e      	b.n	80177ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801779c:	bf00      	nop
 801779e:	e00c      	b.n	80177ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80177a0:	bf00      	nop
 80177a2:	e00a      	b.n	80177ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80177a4:	bf00      	nop
 80177a6:	e008      	b.n	80177ba <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 80177a8:	bf00      	nop
 80177aa:	e006      	b.n	80177ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80177ac:	bf00      	nop
 80177ae:	e004      	b.n	80177ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80177b0:	bf00      	nop
 80177b2:	e002      	b.n	80177ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80177b4:	bf00      	nop
 80177b6:	e000      	b.n	80177ba <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 80177b8:	bf00      	nop
  pbuf_free(p);
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7f7 feba 	bl	800f534 <pbuf_free>
}
 80177c0:	bf00      	nop
 80177c2:	3728      	adds	r7, #40	@ 0x28
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	2000a2e8 	.word	0x2000a2e8
 80177cc:	20013de0 	.word	0x20013de0
 80177d0:	20013dc0 	.word	0x20013dc0

080177d4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b088      	sub	sp, #32
 80177d8:	af00      	add	r7, sp, #0
 80177da:	60f8      	str	r0, [r7, #12]
 80177dc:	60b9      	str	r1, [r7, #8]
 80177de:	603b      	str	r3, [r7, #0]
 80177e0:	4613      	mov	r3, r2
 80177e2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d108      	bne.n	80177fc <dhcp_create_msg+0x28>
 80177ea:	4b5f      	ldr	r3, [pc, #380]	@ (8017968 <dhcp_create_msg+0x194>)
 80177ec:	f240 7269 	movw	r2, #1897	@ 0x769
 80177f0:	495e      	ldr	r1, [pc, #376]	@ (801796c <dhcp_create_msg+0x198>)
 80177f2:	485f      	ldr	r0, [pc, #380]	@ (8017970 <dhcp_create_msg+0x19c>)
 80177f4:	f003 fcdc 	bl	801b1b0 <iprintf>
 80177f8:	2300      	movs	r3, #0
 80177fa:	e0b1      	b.n	8017960 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d108      	bne.n	8017814 <dhcp_create_msg+0x40>
 8017802:	4b59      	ldr	r3, [pc, #356]	@ (8017968 <dhcp_create_msg+0x194>)
 8017804:	f240 726a 	movw	r2, #1898	@ 0x76a
 8017808:	495a      	ldr	r1, [pc, #360]	@ (8017974 <dhcp_create_msg+0x1a0>)
 801780a:	4859      	ldr	r0, [pc, #356]	@ (8017970 <dhcp_create_msg+0x19c>)
 801780c:	f003 fcd0 	bl	801b1b0 <iprintf>
 8017810:	2300      	movs	r3, #0
 8017812:	e0a5      	b.n	8017960 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017814:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017818:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801781c:	2036      	movs	r0, #54	@ 0x36
 801781e:	f7f7 fba1 	bl	800ef64 <pbuf_alloc>
 8017822:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017824:	69bb      	ldr	r3, [r7, #24]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d101      	bne.n	801782e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801782a:	2300      	movs	r3, #0
 801782c:	e098      	b.n	8017960 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801782e:	69bb      	ldr	r3, [r7, #24]
 8017830:	895b      	ldrh	r3, [r3, #10]
 8017832:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8017836:	d206      	bcs.n	8017846 <dhcp_create_msg+0x72>
 8017838:	4b4b      	ldr	r3, [pc, #300]	@ (8017968 <dhcp_create_msg+0x194>)
 801783a:	f240 7271 	movw	r2, #1905	@ 0x771
 801783e:	494e      	ldr	r1, [pc, #312]	@ (8017978 <dhcp_create_msg+0x1a4>)
 8017840:	484b      	ldr	r0, [pc, #300]	@ (8017970 <dhcp_create_msg+0x19c>)
 8017842:	f003 fcb5 	bl	801b1b0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017846:	79fb      	ldrb	r3, [r7, #7]
 8017848:	2b03      	cmp	r3, #3
 801784a:	d103      	bne.n	8017854 <dhcp_create_msg+0x80>
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	795b      	ldrb	r3, [r3, #5]
 8017850:	2b03      	cmp	r3, #3
 8017852:	d10d      	bne.n	8017870 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	799b      	ldrb	r3, [r3, #6]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d105      	bne.n	8017868 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801785c:	f002 fed8 	bl	801a610 <rand>
 8017860:	4603      	mov	r3, r0
 8017862:	461a      	mov	r2, r3
 8017864:	4b45      	ldr	r3, [pc, #276]	@ (801797c <dhcp_create_msg+0x1a8>)
 8017866:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017868:	4b44      	ldr	r3, [pc, #272]	@ (801797c <dhcp_create_msg+0x1a8>)
 801786a:	681a      	ldr	r2, [r3, #0]
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017870:	69bb      	ldr	r3, [r7, #24]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017876:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801787a:	2100      	movs	r1, #0
 801787c:	6978      	ldr	r0, [r7, #20]
 801787e:	f003 fdf9 	bl	801b474 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	2201      	movs	r2, #1
 8017886:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	2201      	movs	r2, #1
 801788c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8017894:	697b      	ldr	r3, [r7, #20]
 8017896:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	4618      	mov	r0, r3
 801789e:	f7f6 f93c 	bl	800db1a <lwip_htonl>
 80178a2:	4602      	mov	r2, r0
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80178a8:	79fb      	ldrb	r3, [r7, #7]
 80178aa:	2b08      	cmp	r3, #8
 80178ac:	d010      	beq.n	80178d0 <dhcp_create_msg+0xfc>
 80178ae:	79fb      	ldrb	r3, [r7, #7]
 80178b0:	2b04      	cmp	r3, #4
 80178b2:	d00d      	beq.n	80178d0 <dhcp_create_msg+0xfc>
 80178b4:	79fb      	ldrb	r3, [r7, #7]
 80178b6:	2b07      	cmp	r3, #7
 80178b8:	d00a      	beq.n	80178d0 <dhcp_create_msg+0xfc>
 80178ba:	79fb      	ldrb	r3, [r7, #7]
 80178bc:	2b03      	cmp	r3, #3
 80178be:	d10c      	bne.n	80178da <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80178c4:	2b05      	cmp	r3, #5
 80178c6:	d003      	beq.n	80178d0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	795b      	ldrb	r3, [r3, #5]
 80178cc:	2b04      	cmp	r3, #4
 80178ce:	d104      	bne.n	80178da <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	3304      	adds	r3, #4
 80178d4:	681a      	ldr	r2, [r3, #0]
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80178da:	2300      	movs	r3, #0
 80178dc:	83fb      	strh	r3, [r7, #30]
 80178de:	e00c      	b.n	80178fa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80178e0:	8bfa      	ldrh	r2, [r7, #30]
 80178e2:	8bfb      	ldrh	r3, [r7, #30]
 80178e4:	68f9      	ldr	r1, [r7, #12]
 80178e6:	440a      	add	r2, r1
 80178e8:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 80178ec:	697a      	ldr	r2, [r7, #20]
 80178ee:	4413      	add	r3, r2
 80178f0:	460a      	mov	r2, r1
 80178f2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80178f4:	8bfb      	ldrh	r3, [r7, #30]
 80178f6:	3301      	adds	r3, #1
 80178f8:	83fb      	strh	r3, [r7, #30]
 80178fa:	8bfb      	ldrh	r3, [r7, #30]
 80178fc:	2b05      	cmp	r3, #5
 80178fe:	d9ef      	bls.n	80178e0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	2200      	movs	r2, #0
 8017904:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017908:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801790c:	2200      	movs	r2, #0
 801790e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8017912:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8017916:	2200      	movs	r2, #0
 8017918:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801791c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8017920:	2200      	movs	r2, #0
 8017922:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017926:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801792a:	697b      	ldr	r3, [r7, #20]
 801792c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017930:	2301      	movs	r3, #1
 8017932:	2235      	movs	r2, #53	@ 0x35
 8017934:	2000      	movs	r0, #0
 8017936:	f7ff facf 	bl	8016ed8 <dhcp_option>
 801793a:	4603      	mov	r3, r0
 801793c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017944:	79fa      	ldrb	r2, [r7, #7]
 8017946:	8a7b      	ldrh	r3, [r7, #18]
 8017948:	4618      	mov	r0, r3
 801794a:	f7ff faf9 	bl	8016f40 <dhcp_option_byte>
 801794e:	4603      	mov	r3, r0
 8017950:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d002      	beq.n	801795e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	8a7a      	ldrh	r2, [r7, #18]
 801795c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801795e:	69bb      	ldr	r3, [r7, #24]
}
 8017960:	4618      	mov	r0, r3
 8017962:	3720      	adds	r7, #32
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	08020194 	.word	0x08020194
 801796c:	080204b4 	.word	0x080204b4
 8017970:	080201f4 	.word	0x080201f4
 8017974:	080204d4 	.word	0x080204d4
 8017978:	080204f4 	.word	0x080204f4
 801797c:	20013df0 	.word	0x20013df0

08017980 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b084      	sub	sp, #16
 8017984:	af00      	add	r7, sp, #0
 8017986:	4603      	mov	r3, r0
 8017988:	60b9      	str	r1, [r7, #8]
 801798a:	607a      	str	r2, [r7, #4]
 801798c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801798e:	89fb      	ldrh	r3, [r7, #14]
 8017990:	1c5a      	adds	r2, r3, #1
 8017992:	81fa      	strh	r2, [r7, #14]
 8017994:	461a      	mov	r2, r3
 8017996:	68bb      	ldr	r3, [r7, #8]
 8017998:	4413      	add	r3, r2
 801799a:	22ff      	movs	r2, #255	@ 0xff
 801799c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801799e:	e007      	b.n	80179b0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80179a0:	89fb      	ldrh	r3, [r7, #14]
 80179a2:	1c5a      	adds	r2, r3, #1
 80179a4:	81fa      	strh	r2, [r7, #14]
 80179a6:	461a      	mov	r2, r3
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	4413      	add	r3, r2
 80179ac:	2200      	movs	r2, #0
 80179ae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80179b0:	89fb      	ldrh	r3, [r7, #14]
 80179b2:	2b43      	cmp	r3, #67	@ 0x43
 80179b4:	d904      	bls.n	80179c0 <dhcp_option_trailer+0x40>
 80179b6:	89fb      	ldrh	r3, [r7, #14]
 80179b8:	f003 0303 	and.w	r3, r3, #3
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d002      	beq.n	80179c6 <dhcp_option_trailer+0x46>
 80179c0:	89fb      	ldrh	r3, [r7, #14]
 80179c2:	2b43      	cmp	r3, #67	@ 0x43
 80179c4:	d9ec      	bls.n	80179a0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80179c6:	89fb      	ldrh	r3, [r7, #14]
 80179c8:	33f0      	adds	r3, #240	@ 0xf0
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	4619      	mov	r1, r3
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f7f7 fc2a 	bl	800f228 <pbuf_realloc>
}
 80179d4:	bf00      	nop
 80179d6:	3710      	adds	r7, #16
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80179dc:	b480      	push	{r7}
 80179de:	b085      	sub	sp, #20
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d017      	beq.n	8017a1a <dhcp_supplied_address+0x3e>
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d013      	beq.n	8017a1a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179f6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	795b      	ldrb	r3, [r3, #5]
 80179fc:	2b0a      	cmp	r3, #10
 80179fe:	d007      	beq.n	8017a10 <dhcp_supplied_address+0x34>
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	795b      	ldrb	r3, [r3, #5]
 8017a04:	2b05      	cmp	r3, #5
 8017a06:	d003      	beq.n	8017a10 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017a0c:	2b04      	cmp	r3, #4
 8017a0e:	d101      	bne.n	8017a14 <dhcp_supplied_address+0x38>
 8017a10:	2301      	movs	r3, #1
 8017a12:	e000      	b.n	8017a16 <dhcp_supplied_address+0x3a>
 8017a14:	2300      	movs	r3, #0
 8017a16:	b2db      	uxtb	r3, r3
 8017a18:	e000      	b.n	8017a1c <dhcp_supplied_address+0x40>
  }
  return 0;
 8017a1a:	2300      	movs	r3, #0
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3714      	adds	r7, #20
 8017a20:	46bd      	mov	sp, r7
 8017a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a26:	4770      	bx	lr

08017a28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017a30:	492b      	ldr	r1, [pc, #172]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	4613      	mov	r3, r2
 8017a36:	005b      	lsls	r3, r3, #1
 8017a38:	4413      	add	r3, r2
 8017a3a:	00db      	lsls	r3, r3, #3
 8017a3c:	440b      	add	r3, r1
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d013      	beq.n	8017a6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017a44:	4926      	ldr	r1, [pc, #152]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	4613      	mov	r3, r2
 8017a4a:	005b      	lsls	r3, r3, #1
 8017a4c:	4413      	add	r3, r2
 8017a4e:	00db      	lsls	r3, r3, #3
 8017a50:	440b      	add	r3, r1
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7f7 fd6d 	bl	800f534 <pbuf_free>
    arp_table[i].q = NULL;
 8017a5a:	4921      	ldr	r1, [pc, #132]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017a5c:	687a      	ldr	r2, [r7, #4]
 8017a5e:	4613      	mov	r3, r2
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	4413      	add	r3, r2
 8017a64:	00db      	lsls	r3, r3, #3
 8017a66:	440b      	add	r3, r1
 8017a68:	2200      	movs	r2, #0
 8017a6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017a6c:	491c      	ldr	r1, [pc, #112]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017a6e:	687a      	ldr	r2, [r7, #4]
 8017a70:	4613      	mov	r3, r2
 8017a72:	005b      	lsls	r3, r3, #1
 8017a74:	4413      	add	r3, r2
 8017a76:	00db      	lsls	r3, r3, #3
 8017a78:	440b      	add	r3, r1
 8017a7a:	3314      	adds	r3, #20
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017a80:	4917      	ldr	r1, [pc, #92]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017a82:	687a      	ldr	r2, [r7, #4]
 8017a84:	4613      	mov	r3, r2
 8017a86:	005b      	lsls	r3, r3, #1
 8017a88:	4413      	add	r3, r2
 8017a8a:	00db      	lsls	r3, r3, #3
 8017a8c:	440b      	add	r3, r1
 8017a8e:	3312      	adds	r3, #18
 8017a90:	2200      	movs	r2, #0
 8017a92:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017a94:	4912      	ldr	r1, [pc, #72]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	4613      	mov	r3, r2
 8017a9a:	005b      	lsls	r3, r3, #1
 8017a9c:	4413      	add	r3, r2
 8017a9e:	00db      	lsls	r3, r3, #3
 8017aa0:	440b      	add	r3, r1
 8017aa2:	3308      	adds	r3, #8
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017aa8:	490d      	ldr	r1, [pc, #52]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017aaa:	687a      	ldr	r2, [r7, #4]
 8017aac:	4613      	mov	r3, r2
 8017aae:	005b      	lsls	r3, r3, #1
 8017ab0:	4413      	add	r3, r2
 8017ab2:	00db      	lsls	r3, r3, #3
 8017ab4:	440b      	add	r3, r1
 8017ab6:	3304      	adds	r3, #4
 8017ab8:	2200      	movs	r2, #0
 8017aba:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8017abc:	4908      	ldr	r1, [pc, #32]	@ (8017ae0 <etharp_free_entry+0xb8>)
 8017abe:	687a      	ldr	r2, [r7, #4]
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	005b      	lsls	r3, r3, #1
 8017ac4:	4413      	add	r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	440b      	add	r3, r1
 8017aca:	3308      	adds	r3, #8
 8017acc:	4a05      	ldr	r2, [pc, #20]	@ (8017ae4 <etharp_free_entry+0xbc>)
 8017ace:	3304      	adds	r3, #4
 8017ad0:	6810      	ldr	r0, [r2, #0]
 8017ad2:	6018      	str	r0, [r3, #0]
 8017ad4:	8892      	ldrh	r2, [r2, #4]
 8017ad6:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017ad8:	bf00      	nop
 8017ada:	3708      	adds	r7, #8
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	20013df4 	.word	0x20013df4
 8017ae4:	0806c9fc 	.word	0x0806c9fc

08017ae8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b082      	sub	sp, #8
 8017aec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017aee:	2300      	movs	r3, #0
 8017af0:	607b      	str	r3, [r7, #4]
 8017af2:	e09a      	b.n	8017c2a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8017af4:	4951      	ldr	r1, [pc, #324]	@ (8017c3c <etharp_tmr+0x154>)
 8017af6:	687a      	ldr	r2, [r7, #4]
 8017af8:	4613      	mov	r3, r2
 8017afa:	005b      	lsls	r3, r3, #1
 8017afc:	4413      	add	r3, r2
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	440b      	add	r3, r1
 8017b02:	3314      	adds	r3, #20
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017b08:	78fb      	ldrb	r3, [r7, #3]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	f000 808a 	beq.w	8017c24 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8017b10:	78fb      	ldrb	r3, [r7, #3]
 8017b12:	2b05      	cmp	r3, #5
 8017b14:	f000 8086 	beq.w	8017c24 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017b18:	4948      	ldr	r1, [pc, #288]	@ (8017c3c <etharp_tmr+0x154>)
 8017b1a:	687a      	ldr	r2, [r7, #4]
 8017b1c:	4613      	mov	r3, r2
 8017b1e:	005b      	lsls	r3, r3, #1
 8017b20:	4413      	add	r3, r2
 8017b22:	00db      	lsls	r3, r3, #3
 8017b24:	440b      	add	r3, r1
 8017b26:	3312      	adds	r3, #18
 8017b28:	881b      	ldrh	r3, [r3, #0]
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	b298      	uxth	r0, r3
 8017b2e:	4943      	ldr	r1, [pc, #268]	@ (8017c3c <etharp_tmr+0x154>)
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	4613      	mov	r3, r2
 8017b34:	005b      	lsls	r3, r3, #1
 8017b36:	4413      	add	r3, r2
 8017b38:	00db      	lsls	r3, r3, #3
 8017b3a:	440b      	add	r3, r1
 8017b3c:	3312      	adds	r3, #18
 8017b3e:	4602      	mov	r2, r0
 8017b40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017b42:	493e      	ldr	r1, [pc, #248]	@ (8017c3c <etharp_tmr+0x154>)
 8017b44:	687a      	ldr	r2, [r7, #4]
 8017b46:	4613      	mov	r3, r2
 8017b48:	005b      	lsls	r3, r3, #1
 8017b4a:	4413      	add	r3, r2
 8017b4c:	00db      	lsls	r3, r3, #3
 8017b4e:	440b      	add	r3, r1
 8017b50:	3312      	adds	r3, #18
 8017b52:	881b      	ldrh	r3, [r3, #0]
 8017b54:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017b58:	d215      	bcs.n	8017b86 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017b5a:	4938      	ldr	r1, [pc, #224]	@ (8017c3c <etharp_tmr+0x154>)
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	4613      	mov	r3, r2
 8017b60:	005b      	lsls	r3, r3, #1
 8017b62:	4413      	add	r3, r2
 8017b64:	00db      	lsls	r3, r3, #3
 8017b66:	440b      	add	r3, r1
 8017b68:	3314      	adds	r3, #20
 8017b6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017b6c:	2b01      	cmp	r3, #1
 8017b6e:	d10e      	bne.n	8017b8e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017b70:	4932      	ldr	r1, [pc, #200]	@ (8017c3c <etharp_tmr+0x154>)
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	4613      	mov	r3, r2
 8017b76:	005b      	lsls	r3, r3, #1
 8017b78:	4413      	add	r3, r2
 8017b7a:	00db      	lsls	r3, r3, #3
 8017b7c:	440b      	add	r3, r1
 8017b7e:	3312      	adds	r3, #18
 8017b80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017b82:	2b04      	cmp	r3, #4
 8017b84:	d903      	bls.n	8017b8e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017b86:	6878      	ldr	r0, [r7, #4]
 8017b88:	f7ff ff4e 	bl	8017a28 <etharp_free_entry>
 8017b8c:	e04a      	b.n	8017c24 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017b8e:	492b      	ldr	r1, [pc, #172]	@ (8017c3c <etharp_tmr+0x154>)
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	4613      	mov	r3, r2
 8017b94:	005b      	lsls	r3, r3, #1
 8017b96:	4413      	add	r3, r2
 8017b98:	00db      	lsls	r3, r3, #3
 8017b9a:	440b      	add	r3, r1
 8017b9c:	3314      	adds	r3, #20
 8017b9e:	781b      	ldrb	r3, [r3, #0]
 8017ba0:	2b03      	cmp	r3, #3
 8017ba2:	d10a      	bne.n	8017bba <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017ba4:	4925      	ldr	r1, [pc, #148]	@ (8017c3c <etharp_tmr+0x154>)
 8017ba6:	687a      	ldr	r2, [r7, #4]
 8017ba8:	4613      	mov	r3, r2
 8017baa:	005b      	lsls	r3, r3, #1
 8017bac:	4413      	add	r3, r2
 8017bae:	00db      	lsls	r3, r3, #3
 8017bb0:	440b      	add	r3, r1
 8017bb2:	3314      	adds	r3, #20
 8017bb4:	2204      	movs	r2, #4
 8017bb6:	701a      	strb	r2, [r3, #0]
 8017bb8:	e034      	b.n	8017c24 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017bba:	4920      	ldr	r1, [pc, #128]	@ (8017c3c <etharp_tmr+0x154>)
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	4613      	mov	r3, r2
 8017bc0:	005b      	lsls	r3, r3, #1
 8017bc2:	4413      	add	r3, r2
 8017bc4:	00db      	lsls	r3, r3, #3
 8017bc6:	440b      	add	r3, r1
 8017bc8:	3314      	adds	r3, #20
 8017bca:	781b      	ldrb	r3, [r3, #0]
 8017bcc:	2b04      	cmp	r3, #4
 8017bce:	d10a      	bne.n	8017be6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017bd0:	491a      	ldr	r1, [pc, #104]	@ (8017c3c <etharp_tmr+0x154>)
 8017bd2:	687a      	ldr	r2, [r7, #4]
 8017bd4:	4613      	mov	r3, r2
 8017bd6:	005b      	lsls	r3, r3, #1
 8017bd8:	4413      	add	r3, r2
 8017bda:	00db      	lsls	r3, r3, #3
 8017bdc:	440b      	add	r3, r1
 8017bde:	3314      	adds	r3, #20
 8017be0:	2202      	movs	r2, #2
 8017be2:	701a      	strb	r2, [r3, #0]
 8017be4:	e01e      	b.n	8017c24 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017be6:	4915      	ldr	r1, [pc, #84]	@ (8017c3c <etharp_tmr+0x154>)
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	4613      	mov	r3, r2
 8017bec:	005b      	lsls	r3, r3, #1
 8017bee:	4413      	add	r3, r2
 8017bf0:	00db      	lsls	r3, r3, #3
 8017bf2:	440b      	add	r3, r1
 8017bf4:	3314      	adds	r3, #20
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d113      	bne.n	8017c24 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017bfc:	490f      	ldr	r1, [pc, #60]	@ (8017c3c <etharp_tmr+0x154>)
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	4613      	mov	r3, r2
 8017c02:	005b      	lsls	r3, r3, #1
 8017c04:	4413      	add	r3, r2
 8017c06:	00db      	lsls	r3, r3, #3
 8017c08:	440b      	add	r3, r1
 8017c0a:	3308      	adds	r3, #8
 8017c0c:	6818      	ldr	r0, [r3, #0]
 8017c0e:	687a      	ldr	r2, [r7, #4]
 8017c10:	4613      	mov	r3, r2
 8017c12:	005b      	lsls	r3, r3, #1
 8017c14:	4413      	add	r3, r2
 8017c16:	00db      	lsls	r3, r3, #3
 8017c18:	4a08      	ldr	r2, [pc, #32]	@ (8017c3c <etharp_tmr+0x154>)
 8017c1a:	4413      	add	r3, r2
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	4619      	mov	r1, r3
 8017c20:	f000 feae 	bl	8018980 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	3301      	adds	r3, #1
 8017c28:	607b      	str	r3, [r7, #4]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2b09      	cmp	r3, #9
 8017c2e:	f77f af61 	ble.w	8017af4 <etharp_tmr+0xc>
      }
    }
  }
}
 8017c32:	bf00      	nop
 8017c34:	bf00      	nop
 8017c36:	3708      	adds	r7, #8
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	bd80      	pop	{r7, pc}
 8017c3c:	20013df4 	.word	0x20013df4

08017c40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b08a      	sub	sp, #40	@ 0x28
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	60f8      	str	r0, [r7, #12]
 8017c48:	460b      	mov	r3, r1
 8017c4a:	607a      	str	r2, [r7, #4]
 8017c4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017c4e:	230a      	movs	r3, #10
 8017c50:	843b      	strh	r3, [r7, #32]
 8017c52:	230a      	movs	r3, #10
 8017c54:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8017c56:	230a      	movs	r3, #10
 8017c58:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017c5e:	230a      	movs	r3, #10
 8017c60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017c62:	2300      	movs	r3, #0
 8017c64:	83bb      	strh	r3, [r7, #28]
 8017c66:	2300      	movs	r3, #0
 8017c68:	837b      	strh	r3, [r7, #26]
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c6e:	2300      	movs	r3, #0
 8017c70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017c72:	e0b1      	b.n	8017dd8 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8017c74:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017c78:	49a7      	ldr	r1, [pc, #668]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017c7a:	4613      	mov	r3, r2
 8017c7c:	005b      	lsls	r3, r3, #1
 8017c7e:	4413      	add	r3, r2
 8017c80:	00db      	lsls	r3, r3, #3
 8017c82:	440b      	add	r3, r1
 8017c84:	3314      	adds	r3, #20
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017c8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017c8e:	2b0a      	cmp	r3, #10
 8017c90:	d105      	bne.n	8017c9e <etharp_find_entry+0x5e>
 8017c92:	7dfb      	ldrb	r3, [r7, #23]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d102      	bne.n	8017c9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017c98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017c9c:	e098      	b.n	8017dd0 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017c9e:	7dfb      	ldrb	r3, [r7, #23]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	f000 8095 	beq.w	8017dd0 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017ca6:	7dfb      	ldrb	r3, [r7, #23]
 8017ca8:	2b01      	cmp	r3, #1
 8017caa:	d009      	beq.n	8017cc0 <etharp_find_entry+0x80>
 8017cac:	7dfb      	ldrb	r3, [r7, #23]
 8017cae:	2b01      	cmp	r3, #1
 8017cb0:	d806      	bhi.n	8017cc0 <etharp_find_entry+0x80>
 8017cb2:	4b9a      	ldr	r3, [pc, #616]	@ (8017f1c <etharp_find_entry+0x2dc>)
 8017cb4:	f240 1223 	movw	r2, #291	@ 0x123
 8017cb8:	4999      	ldr	r1, [pc, #612]	@ (8017f20 <etharp_find_entry+0x2e0>)
 8017cba:	489a      	ldr	r0, [pc, #616]	@ (8017f24 <etharp_find_entry+0x2e4>)
 8017cbc:	f003 fa78 	bl	801b1b0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d020      	beq.n	8017d08 <etharp_find_entry+0xc8>
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	6819      	ldr	r1, [r3, #0]
 8017cca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017cce:	4892      	ldr	r0, [pc, #584]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	005b      	lsls	r3, r3, #1
 8017cd4:	4413      	add	r3, r2
 8017cd6:	00db      	lsls	r3, r3, #3
 8017cd8:	4403      	add	r3, r0
 8017cda:	3304      	adds	r3, #4
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	4299      	cmp	r1, r3
 8017ce0:	d112      	bne.n	8017d08 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d00c      	beq.n	8017d02 <etharp_find_entry+0xc2>
 8017ce8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017cec:	498a      	ldr	r1, [pc, #552]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017cee:	4613      	mov	r3, r2
 8017cf0:	005b      	lsls	r3, r3, #1
 8017cf2:	4413      	add	r3, r2
 8017cf4:	00db      	lsls	r3, r3, #3
 8017cf6:	440b      	add	r3, r1
 8017cf8:	3308      	adds	r3, #8
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	687a      	ldr	r2, [r7, #4]
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	d102      	bne.n	8017d08 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017d02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017d06:	e103      	b.n	8017f10 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017d08:	7dfb      	ldrb	r3, [r7, #23]
 8017d0a:	2b01      	cmp	r3, #1
 8017d0c:	d140      	bne.n	8017d90 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017d0e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d12:	4981      	ldr	r1, [pc, #516]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017d14:	4613      	mov	r3, r2
 8017d16:	005b      	lsls	r3, r3, #1
 8017d18:	4413      	add	r3, r2
 8017d1a:	00db      	lsls	r3, r3, #3
 8017d1c:	440b      	add	r3, r1
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d01a      	beq.n	8017d5a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017d24:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d28:	497b      	ldr	r1, [pc, #492]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017d2a:	4613      	mov	r3, r2
 8017d2c:	005b      	lsls	r3, r3, #1
 8017d2e:	4413      	add	r3, r2
 8017d30:	00db      	lsls	r3, r3, #3
 8017d32:	440b      	add	r3, r1
 8017d34:	3312      	adds	r3, #18
 8017d36:	881b      	ldrh	r3, [r3, #0]
 8017d38:	8bba      	ldrh	r2, [r7, #28]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d848      	bhi.n	8017dd0 <etharp_find_entry+0x190>
            old_queue = i;
 8017d3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d40:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017d42:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d46:	4974      	ldr	r1, [pc, #464]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017d48:	4613      	mov	r3, r2
 8017d4a:	005b      	lsls	r3, r3, #1
 8017d4c:	4413      	add	r3, r2
 8017d4e:	00db      	lsls	r3, r3, #3
 8017d50:	440b      	add	r3, r1
 8017d52:	3312      	adds	r3, #18
 8017d54:	881b      	ldrh	r3, [r3, #0]
 8017d56:	83bb      	strh	r3, [r7, #28]
 8017d58:	e03a      	b.n	8017dd0 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017d5a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d5e:	496e      	ldr	r1, [pc, #440]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017d60:	4613      	mov	r3, r2
 8017d62:	005b      	lsls	r3, r3, #1
 8017d64:	4413      	add	r3, r2
 8017d66:	00db      	lsls	r3, r3, #3
 8017d68:	440b      	add	r3, r1
 8017d6a:	3312      	adds	r3, #18
 8017d6c:	881b      	ldrh	r3, [r3, #0]
 8017d6e:	8b7a      	ldrh	r2, [r7, #26]
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d82d      	bhi.n	8017dd0 <etharp_find_entry+0x190>
            old_pending = i;
 8017d74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d76:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8017d78:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d7c:	4966      	ldr	r1, [pc, #408]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017d7e:	4613      	mov	r3, r2
 8017d80:	005b      	lsls	r3, r3, #1
 8017d82:	4413      	add	r3, r2
 8017d84:	00db      	lsls	r3, r3, #3
 8017d86:	440b      	add	r3, r1
 8017d88:	3312      	adds	r3, #18
 8017d8a:	881b      	ldrh	r3, [r3, #0]
 8017d8c:	837b      	strh	r3, [r7, #26]
 8017d8e:	e01f      	b.n	8017dd0 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017d90:	7dfb      	ldrb	r3, [r7, #23]
 8017d92:	2b01      	cmp	r3, #1
 8017d94:	d91c      	bls.n	8017dd0 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8017d96:	7dfb      	ldrb	r3, [r7, #23]
 8017d98:	2b04      	cmp	r3, #4
 8017d9a:	d819      	bhi.n	8017dd0 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017d9c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017da0:	495d      	ldr	r1, [pc, #372]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017da2:	4613      	mov	r3, r2
 8017da4:	005b      	lsls	r3, r3, #1
 8017da6:	4413      	add	r3, r2
 8017da8:	00db      	lsls	r3, r3, #3
 8017daa:	440b      	add	r3, r1
 8017dac:	3312      	adds	r3, #18
 8017dae:	881b      	ldrh	r3, [r3, #0]
 8017db0:	8b3a      	ldrh	r2, [r7, #24]
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d80c      	bhi.n	8017dd0 <etharp_find_entry+0x190>
            old_stable = i;
 8017db6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017db8:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8017dba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017dbe:	4956      	ldr	r1, [pc, #344]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	005b      	lsls	r3, r3, #1
 8017dc4:	4413      	add	r3, r2
 8017dc6:	00db      	lsls	r3, r3, #3
 8017dc8:	440b      	add	r3, r1
 8017dca:	3312      	adds	r3, #18
 8017dcc:	881b      	ldrh	r3, [r3, #0]
 8017dce:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017dd0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017dd8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017ddc:	2b09      	cmp	r3, #9
 8017dde:	f77f af49 	ble.w	8017c74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017de2:	7afb      	ldrb	r3, [r7, #11]
 8017de4:	f003 0302 	and.w	r3, r3, #2
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d108      	bne.n	8017dfe <etharp_find_entry+0x1be>
 8017dec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017df0:	2b0a      	cmp	r3, #10
 8017df2:	d107      	bne.n	8017e04 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017df4:	7afb      	ldrb	r3, [r7, #11]
 8017df6:	f003 0301 	and.w	r3, r3, #1
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d102      	bne.n	8017e04 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8017e02:	e085      	b.n	8017f10 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017e04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017e08:	2b09      	cmp	r3, #9
 8017e0a:	dc02      	bgt.n	8017e12 <etharp_find_entry+0x1d2>
    i = empty;
 8017e0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017e10:	e039      	b.n	8017e86 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017e12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017e16:	2b09      	cmp	r3, #9
 8017e18:	dc14      	bgt.n	8017e44 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 8017e1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017e1e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017e22:	493d      	ldr	r1, [pc, #244]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017e24:	4613      	mov	r3, r2
 8017e26:	005b      	lsls	r3, r3, #1
 8017e28:	4413      	add	r3, r2
 8017e2a:	00db      	lsls	r3, r3, #3
 8017e2c:	440b      	add	r3, r1
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d018      	beq.n	8017e66 <etharp_find_entry+0x226>
 8017e34:	4b39      	ldr	r3, [pc, #228]	@ (8017f1c <etharp_find_entry+0x2dc>)
 8017e36:	f240 126d 	movw	r2, #365	@ 0x16d
 8017e3a:	493b      	ldr	r1, [pc, #236]	@ (8017f28 <etharp_find_entry+0x2e8>)
 8017e3c:	4839      	ldr	r0, [pc, #228]	@ (8017f24 <etharp_find_entry+0x2e4>)
 8017e3e:	f003 f9b7 	bl	801b1b0 <iprintf>
 8017e42:	e010      	b.n	8017e66 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017e44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017e48:	2b09      	cmp	r3, #9
 8017e4a:	dc02      	bgt.n	8017e52 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 8017e4c:	8c3b      	ldrh	r3, [r7, #32]
 8017e4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017e50:	e009      	b.n	8017e66 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017e52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017e56:	2b09      	cmp	r3, #9
 8017e58:	dc02      	bgt.n	8017e60 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017e5a:	8bfb      	ldrh	r3, [r7, #30]
 8017e5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017e5e:	e002      	b.n	8017e66 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017e60:	f04f 33ff 	mov.w	r3, #4294967295
 8017e64:	e054      	b.n	8017f10 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017e66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017e6a:	2b09      	cmp	r3, #9
 8017e6c:	dd06      	ble.n	8017e7c <etharp_find_entry+0x23c>
 8017e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8017f1c <etharp_find_entry+0x2dc>)
 8017e70:	f240 127f 	movw	r2, #383	@ 0x17f
 8017e74:	492d      	ldr	r1, [pc, #180]	@ (8017f2c <etharp_find_entry+0x2ec>)
 8017e76:	482b      	ldr	r0, [pc, #172]	@ (8017f24 <etharp_find_entry+0x2e4>)
 8017e78:	f003 f99a 	bl	801b1b0 <iprintf>
    etharp_free_entry(i);
 8017e7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017e80:	4618      	mov	r0, r3
 8017e82:	f7ff fdd1 	bl	8017a28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017e86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017e8a:	2b09      	cmp	r3, #9
 8017e8c:	dd06      	ble.n	8017e9c <etharp_find_entry+0x25c>
 8017e8e:	4b23      	ldr	r3, [pc, #140]	@ (8017f1c <etharp_find_entry+0x2dc>)
 8017e90:	f240 1283 	movw	r2, #387	@ 0x183
 8017e94:	4925      	ldr	r1, [pc, #148]	@ (8017f2c <etharp_find_entry+0x2ec>)
 8017e96:	4823      	ldr	r0, [pc, #140]	@ (8017f24 <etharp_find_entry+0x2e4>)
 8017e98:	f003 f98a 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017e9c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017ea0:	491d      	ldr	r1, [pc, #116]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	005b      	lsls	r3, r3, #1
 8017ea6:	4413      	add	r3, r2
 8017ea8:	00db      	lsls	r3, r3, #3
 8017eaa:	440b      	add	r3, r1
 8017eac:	3314      	adds	r3, #20
 8017eae:	781b      	ldrb	r3, [r3, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d006      	beq.n	8017ec2 <etharp_find_entry+0x282>
 8017eb4:	4b19      	ldr	r3, [pc, #100]	@ (8017f1c <etharp_find_entry+0x2dc>)
 8017eb6:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8017eba:	491d      	ldr	r1, [pc, #116]	@ (8017f30 <etharp_find_entry+0x2f0>)
 8017ebc:	4819      	ldr	r0, [pc, #100]	@ (8017f24 <etharp_find_entry+0x2e4>)
 8017ebe:	f003 f977 	bl	801b1b0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d00b      	beq.n	8017ee0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017ec8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	6819      	ldr	r1, [r3, #0]
 8017ed0:	4811      	ldr	r0, [pc, #68]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017ed2:	4613      	mov	r3, r2
 8017ed4:	005b      	lsls	r3, r3, #1
 8017ed6:	4413      	add	r3, r2
 8017ed8:	00db      	lsls	r3, r3, #3
 8017eda:	4403      	add	r3, r0
 8017edc:	3304      	adds	r3, #4
 8017ede:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017ee0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017ee4:	490c      	ldr	r1, [pc, #48]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017ee6:	4613      	mov	r3, r2
 8017ee8:	005b      	lsls	r3, r3, #1
 8017eea:	4413      	add	r3, r2
 8017eec:	00db      	lsls	r3, r3, #3
 8017eee:	440b      	add	r3, r1
 8017ef0:	3312      	adds	r3, #18
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017ef6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017efa:	4907      	ldr	r1, [pc, #28]	@ (8017f18 <etharp_find_entry+0x2d8>)
 8017efc:	4613      	mov	r3, r2
 8017efe:	005b      	lsls	r3, r3, #1
 8017f00:	4413      	add	r3, r2
 8017f02:	00db      	lsls	r3, r3, #3
 8017f04:	440b      	add	r3, r1
 8017f06:	3308      	adds	r3, #8
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017f0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8017f10:	4618      	mov	r0, r3
 8017f12:	3728      	adds	r7, #40	@ 0x28
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	20013df4 	.word	0x20013df4
 8017f1c:	08020534 	.word	0x08020534
 8017f20:	0802056c 	.word	0x0802056c
 8017f24:	080205ac 	.word	0x080205ac
 8017f28:	080205d4 	.word	0x080205d4
 8017f2c:	080205ec 	.word	0x080205ec
 8017f30:	08020600 	.word	0x08020600

08017f34 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b088      	sub	sp, #32
 8017f38:	af02      	add	r7, sp, #8
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
 8017f40:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017f48:	2b06      	cmp	r3, #6
 8017f4a:	d006      	beq.n	8017f5a <etharp_update_arp_entry+0x26>
 8017f4c:	4b58      	ldr	r3, [pc, #352]	@ (80180b0 <etharp_update_arp_entry+0x17c>)
 8017f4e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8017f52:	4958      	ldr	r1, [pc, #352]	@ (80180b4 <etharp_update_arp_entry+0x180>)
 8017f54:	4858      	ldr	r0, [pc, #352]	@ (80180b8 <etharp_update_arp_entry+0x184>)
 8017f56:	f003 f92b 	bl	801b1b0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017f5a:	68bb      	ldr	r3, [r7, #8]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d012      	beq.n	8017f86 <etharp_update_arp_entry+0x52>
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d00e      	beq.n	8017f86 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	68f9      	ldr	r1, [r7, #12]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f001 fa00 	bl	8019374 <ip4_addr_isbroadcast_u32>
 8017f74:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d105      	bne.n	8017f86 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017f82:	2be0      	cmp	r3, #224	@ 0xe0
 8017f84:	d102      	bne.n	8017f8c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017f86:	f06f 030f 	mvn.w	r3, #15
 8017f8a:	e08c      	b.n	80180a6 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017f8c:	78fb      	ldrb	r3, [r7, #3]
 8017f8e:	68fa      	ldr	r2, [r7, #12]
 8017f90:	4619      	mov	r1, r3
 8017f92:	68b8      	ldr	r0, [r7, #8]
 8017f94:	f7ff fe54 	bl	8017c40 <etharp_find_entry>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017f9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	da02      	bge.n	8017faa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017fa4:	8afb      	ldrh	r3, [r7, #22]
 8017fa6:	b25b      	sxtb	r3, r3
 8017fa8:	e07d      	b.n	80180a6 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8017faa:	78fb      	ldrb	r3, [r7, #3]
 8017fac:	f003 0304 	and.w	r3, r3, #4
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d00b      	beq.n	8017fcc <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8017fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017fb8:	4940      	ldr	r1, [pc, #256]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8017fba:	4613      	mov	r3, r2
 8017fbc:	005b      	lsls	r3, r3, #1
 8017fbe:	4413      	add	r3, r2
 8017fc0:	00db      	lsls	r3, r3, #3
 8017fc2:	440b      	add	r3, r1
 8017fc4:	3314      	adds	r3, #20
 8017fc6:	2205      	movs	r2, #5
 8017fc8:	701a      	strb	r2, [r3, #0]
 8017fca:	e019      	b.n	8018000 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8017fcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017fd0:	493a      	ldr	r1, [pc, #232]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	005b      	lsls	r3, r3, #1
 8017fd6:	4413      	add	r3, r2
 8017fd8:	00db      	lsls	r3, r3, #3
 8017fda:	440b      	add	r3, r1
 8017fdc:	3314      	adds	r3, #20
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b05      	cmp	r3, #5
 8017fe2:	d102      	bne.n	8017fea <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8017fe4:	f06f 0305 	mvn.w	r3, #5
 8017fe8:	e05d      	b.n	80180a6 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017fea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017fee:	4933      	ldr	r1, [pc, #204]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8017ff0:	4613      	mov	r3, r2
 8017ff2:	005b      	lsls	r3, r3, #1
 8017ff4:	4413      	add	r3, r2
 8017ff6:	00db      	lsls	r3, r3, #3
 8017ff8:	440b      	add	r3, r1
 8017ffa:	3314      	adds	r3, #20
 8017ffc:	2202      	movs	r2, #2
 8017ffe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018000:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018004:	492d      	ldr	r1, [pc, #180]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8018006:	4613      	mov	r3, r2
 8018008:	005b      	lsls	r3, r3, #1
 801800a:	4413      	add	r3, r2
 801800c:	00db      	lsls	r3, r3, #3
 801800e:	440b      	add	r3, r1
 8018010:	3308      	adds	r3, #8
 8018012:	68fa      	ldr	r2, [r7, #12]
 8018014:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018016:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801801a:	4613      	mov	r3, r2
 801801c:	005b      	lsls	r3, r3, #1
 801801e:	4413      	add	r3, r2
 8018020:	00db      	lsls	r3, r3, #3
 8018022:	3308      	adds	r3, #8
 8018024:	4a25      	ldr	r2, [pc, #148]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8018026:	4413      	add	r3, r2
 8018028:	3304      	adds	r3, #4
 801802a:	2206      	movs	r2, #6
 801802c:	6879      	ldr	r1, [r7, #4]
 801802e:	4618      	mov	r0, r3
 8018030:	f003 fadd 	bl	801b5ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018038:	4920      	ldr	r1, [pc, #128]	@ (80180bc <etharp_update_arp_entry+0x188>)
 801803a:	4613      	mov	r3, r2
 801803c:	005b      	lsls	r3, r3, #1
 801803e:	4413      	add	r3, r2
 8018040:	00db      	lsls	r3, r3, #3
 8018042:	440b      	add	r3, r1
 8018044:	3312      	adds	r3, #18
 8018046:	2200      	movs	r2, #0
 8018048:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801804a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801804e:	491b      	ldr	r1, [pc, #108]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8018050:	4613      	mov	r3, r2
 8018052:	005b      	lsls	r3, r3, #1
 8018054:	4413      	add	r3, r2
 8018056:	00db      	lsls	r3, r3, #3
 8018058:	440b      	add	r3, r1
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d021      	beq.n	80180a4 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8018060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018064:	4915      	ldr	r1, [pc, #84]	@ (80180bc <etharp_update_arp_entry+0x188>)
 8018066:	4613      	mov	r3, r2
 8018068:	005b      	lsls	r3, r3, #1
 801806a:	4413      	add	r3, r2
 801806c:	00db      	lsls	r3, r3, #3
 801806e:	440b      	add	r3, r1
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018074:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018078:	4910      	ldr	r1, [pc, #64]	@ (80180bc <etharp_update_arp_entry+0x188>)
 801807a:	4613      	mov	r3, r2
 801807c:	005b      	lsls	r3, r3, #1
 801807e:	4413      	add	r3, r2
 8018080:	00db      	lsls	r3, r3, #3
 8018082:	440b      	add	r3, r1
 8018084:	2200      	movs	r2, #0
 8018086:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801808e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	6939      	ldr	r1, [r7, #16]
 8018098:	68f8      	ldr	r0, [r7, #12]
 801809a:	f002 f889 	bl	801a1b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801809e:	6938      	ldr	r0, [r7, #16]
 80180a0:	f7f7 fa48 	bl	800f534 <pbuf_free>
  }
  return ERR_OK;
 80180a4:	2300      	movs	r3, #0
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	3718      	adds	r7, #24
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd80      	pop	{r7, pc}
 80180ae:	bf00      	nop
 80180b0:	08020534 	.word	0x08020534
 80180b4:	0802062c 	.word	0x0802062c
 80180b8:	080205ac 	.word	0x080205ac
 80180bc:	20013df4 	.word	0x20013df4

080180c0 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b084      	sub	sp, #16
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
 80180c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 80180ca:	6878      	ldr	r0, [r7, #4]
 80180cc:	f000 fe2c 	bl	8018d28 <ip4_route>
 80180d0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d102      	bne.n	80180de <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 80180d8:	f06f 0303 	mvn.w	r3, #3
 80180dc:	e006      	b.n	80180ec <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 80180de:	2305      	movs	r3, #5
 80180e0:	683a      	ldr	r2, [r7, #0]
 80180e2:	6879      	ldr	r1, [r7, #4]
 80180e4:	68f8      	ldr	r0, [r7, #12]
 80180e6:	f7ff ff25 	bl	8017f34 <etharp_update_arp_entry>
 80180ea:	4603      	mov	r3, r0
}
 80180ec:	4618      	mov	r0, r3
 80180ee:	3710      	adds	r7, #16
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b084      	sub	sp, #16
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180fc:	2300      	movs	r3, #0
 80180fe:	60fb      	str	r3, [r7, #12]
 8018100:	e01e      	b.n	8018140 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018102:	4913      	ldr	r1, [pc, #76]	@ (8018150 <etharp_cleanup_netif+0x5c>)
 8018104:	68fa      	ldr	r2, [r7, #12]
 8018106:	4613      	mov	r3, r2
 8018108:	005b      	lsls	r3, r3, #1
 801810a:	4413      	add	r3, r2
 801810c:	00db      	lsls	r3, r3, #3
 801810e:	440b      	add	r3, r1
 8018110:	3314      	adds	r3, #20
 8018112:	781b      	ldrb	r3, [r3, #0]
 8018114:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018116:	7afb      	ldrb	r3, [r7, #11]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d00e      	beq.n	801813a <etharp_cleanup_netif+0x46>
 801811c:	490c      	ldr	r1, [pc, #48]	@ (8018150 <etharp_cleanup_netif+0x5c>)
 801811e:	68fa      	ldr	r2, [r7, #12]
 8018120:	4613      	mov	r3, r2
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	4413      	add	r3, r2
 8018126:	00db      	lsls	r3, r3, #3
 8018128:	440b      	add	r3, r1
 801812a:	3308      	adds	r3, #8
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	429a      	cmp	r2, r3
 8018132:	d102      	bne.n	801813a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018134:	68f8      	ldr	r0, [r7, #12]
 8018136:	f7ff fc77 	bl	8017a28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	3301      	adds	r3, #1
 801813e:	60fb      	str	r3, [r7, #12]
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2b09      	cmp	r3, #9
 8018144:	dddd      	ble.n	8018102 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018146:	bf00      	nop
 8018148:	bf00      	nop
 801814a:	3710      	adds	r7, #16
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	20013df4 	.word	0x20013df4

08018154 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018154:	b5b0      	push	{r4, r5, r7, lr}
 8018156:	b08a      	sub	sp, #40	@ 0x28
 8018158:	af04      	add	r7, sp, #16
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d107      	bne.n	8018174 <etharp_input+0x20>
 8018164:	4b3f      	ldr	r3, [pc, #252]	@ (8018264 <etharp_input+0x110>)
 8018166:	f240 228a 	movw	r2, #650	@ 0x28a
 801816a:	493f      	ldr	r1, [pc, #252]	@ (8018268 <etharp_input+0x114>)
 801816c:	483f      	ldr	r0, [pc, #252]	@ (801826c <etharp_input+0x118>)
 801816e:	f003 f81f 	bl	801b1b0 <iprintf>
 8018172:	e074      	b.n	801825e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	881b      	ldrh	r3, [r3, #0]
 801817e:	b29b      	uxth	r3, r3
 8018180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018184:	d10c      	bne.n	80181a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018186:	697b      	ldr	r3, [r7, #20]
 8018188:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801818a:	2b06      	cmp	r3, #6
 801818c:	d108      	bne.n	80181a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801818e:	697b      	ldr	r3, [r7, #20]
 8018190:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018192:	2b04      	cmp	r3, #4
 8018194:	d104      	bne.n	80181a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	885b      	ldrh	r3, [r3, #2]
 801819a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801819c:	2b08      	cmp	r3, #8
 801819e:	d003      	beq.n	80181a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f7f7 f9c7 	bl	800f534 <pbuf_free>
    return;
 80181a6:	e05a      	b.n	801825e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	330e      	adds	r3, #14
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	3318      	adds	r3, #24
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	3304      	adds	r3, #4
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d102      	bne.n	80181c8 <etharp_input+0x74>
    for_us = 0;
 80181c2:	2300      	movs	r3, #0
 80181c4:	74fb      	strb	r3, [r7, #19]
 80181c6:	e009      	b.n	80181dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80181c8:	68ba      	ldr	r2, [r7, #8]
 80181ca:	683b      	ldr	r3, [r7, #0]
 80181cc:	3304      	adds	r3, #4
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	429a      	cmp	r2, r3
 80181d2:	bf0c      	ite	eq
 80181d4:	2301      	moveq	r3, #1
 80181d6:	2300      	movne	r3, #0
 80181d8:	b2db      	uxtb	r3, r3
 80181da:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80181dc:	697b      	ldr	r3, [r7, #20]
 80181de:	f103 0208 	add.w	r2, r3, #8
 80181e2:	7cfb      	ldrb	r3, [r7, #19]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d001      	beq.n	80181ec <etharp_input+0x98>
 80181e8:	2301      	movs	r3, #1
 80181ea:	e000      	b.n	80181ee <etharp_input+0x9a>
 80181ec:	2302      	movs	r3, #2
 80181ee:	f107 010c 	add.w	r1, r7, #12
 80181f2:	6838      	ldr	r0, [r7, #0]
 80181f4:	f7ff fe9e 	bl	8017f34 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80181f8:	697b      	ldr	r3, [r7, #20]
 80181fa:	88db      	ldrh	r3, [r3, #6]
 80181fc:	b29b      	uxth	r3, r3
 80181fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018202:	d003      	beq.n	801820c <etharp_input+0xb8>
 8018204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018208:	d01e      	beq.n	8018248 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801820a:	e025      	b.n	8018258 <etharp_input+0x104>
      if (for_us) {
 801820c:	7cfb      	ldrb	r3, [r7, #19]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d021      	beq.n	8018256 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018212:	683b      	ldr	r3, [r7, #0]
 8018214:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018228:	697a      	ldr	r2, [r7, #20]
 801822a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801822c:	2102      	movs	r1, #2
 801822e:	9103      	str	r1, [sp, #12]
 8018230:	f107 010c 	add.w	r1, r7, #12
 8018234:	9102      	str	r1, [sp, #8]
 8018236:	9201      	str	r2, [sp, #4]
 8018238:	9300      	str	r3, [sp, #0]
 801823a:	462b      	mov	r3, r5
 801823c:	4622      	mov	r2, r4
 801823e:	4601      	mov	r1, r0
 8018240:	6838      	ldr	r0, [r7, #0]
 8018242:	f000 faef 	bl	8018824 <etharp_raw>
      break;
 8018246:	e006      	b.n	8018256 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018248:	f107 030c 	add.w	r3, r7, #12
 801824c:	4619      	mov	r1, r3
 801824e:	6838      	ldr	r0, [r7, #0]
 8018250:	f7fe f97c 	bl	801654c <dhcp_arp_reply>
      break;
 8018254:	e000      	b.n	8018258 <etharp_input+0x104>
      break;
 8018256:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	f7f7 f96b 	bl	800f534 <pbuf_free>
}
 801825e:	3718      	adds	r7, #24
 8018260:	46bd      	mov	sp, r7
 8018262:	bdb0      	pop	{r4, r5, r7, pc}
 8018264:	08020534 	.word	0x08020534
 8018268:	08020684 	.word	0x08020684
 801826c:	080205ac 	.word	0x080205ac

08018270 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b086      	sub	sp, #24
 8018274:	af02      	add	r7, sp, #8
 8018276:	60f8      	str	r0, [r7, #12]
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	4613      	mov	r3, r2
 801827c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801827e:	79fa      	ldrb	r2, [r7, #7]
 8018280:	4944      	ldr	r1, [pc, #272]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 8018282:	4613      	mov	r3, r2
 8018284:	005b      	lsls	r3, r3, #1
 8018286:	4413      	add	r3, r2
 8018288:	00db      	lsls	r3, r3, #3
 801828a:	440b      	add	r3, r1
 801828c:	3314      	adds	r3, #20
 801828e:	781b      	ldrb	r3, [r3, #0]
 8018290:	2b01      	cmp	r3, #1
 8018292:	d806      	bhi.n	80182a2 <etharp_output_to_arp_index+0x32>
 8018294:	4b40      	ldr	r3, [pc, #256]	@ (8018398 <etharp_output_to_arp_index+0x128>)
 8018296:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801829a:	4940      	ldr	r1, [pc, #256]	@ (801839c <etharp_output_to_arp_index+0x12c>)
 801829c:	4840      	ldr	r0, [pc, #256]	@ (80183a0 <etharp_output_to_arp_index+0x130>)
 801829e:	f002 ff87 	bl	801b1b0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80182a2:	79fa      	ldrb	r2, [r7, #7]
 80182a4:	493b      	ldr	r1, [pc, #236]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 80182a6:	4613      	mov	r3, r2
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	4413      	add	r3, r2
 80182ac:	00db      	lsls	r3, r3, #3
 80182ae:	440b      	add	r3, r1
 80182b0:	3314      	adds	r3, #20
 80182b2:	781b      	ldrb	r3, [r3, #0]
 80182b4:	2b02      	cmp	r3, #2
 80182b6:	d153      	bne.n	8018360 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80182b8:	79fa      	ldrb	r2, [r7, #7]
 80182ba:	4936      	ldr	r1, [pc, #216]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 80182bc:	4613      	mov	r3, r2
 80182be:	005b      	lsls	r3, r3, #1
 80182c0:	4413      	add	r3, r2
 80182c2:	00db      	lsls	r3, r3, #3
 80182c4:	440b      	add	r3, r1
 80182c6:	3312      	adds	r3, #18
 80182c8:	881b      	ldrh	r3, [r3, #0]
 80182ca:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80182ce:	d919      	bls.n	8018304 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80182d0:	79fa      	ldrb	r2, [r7, #7]
 80182d2:	4613      	mov	r3, r2
 80182d4:	005b      	lsls	r3, r3, #1
 80182d6:	4413      	add	r3, r2
 80182d8:	00db      	lsls	r3, r3, #3
 80182da:	4a2e      	ldr	r2, [pc, #184]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 80182dc:	4413      	add	r3, r2
 80182de:	3304      	adds	r3, #4
 80182e0:	4619      	mov	r1, r3
 80182e2:	68f8      	ldr	r0, [r7, #12]
 80182e4:	f000 fb4c 	bl	8018980 <etharp_request>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d138      	bne.n	8018360 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80182ee:	79fa      	ldrb	r2, [r7, #7]
 80182f0:	4928      	ldr	r1, [pc, #160]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 80182f2:	4613      	mov	r3, r2
 80182f4:	005b      	lsls	r3, r3, #1
 80182f6:	4413      	add	r3, r2
 80182f8:	00db      	lsls	r3, r3, #3
 80182fa:	440b      	add	r3, r1
 80182fc:	3314      	adds	r3, #20
 80182fe:	2203      	movs	r2, #3
 8018300:	701a      	strb	r2, [r3, #0]
 8018302:	e02d      	b.n	8018360 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018304:	79fa      	ldrb	r2, [r7, #7]
 8018306:	4923      	ldr	r1, [pc, #140]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 8018308:	4613      	mov	r3, r2
 801830a:	005b      	lsls	r3, r3, #1
 801830c:	4413      	add	r3, r2
 801830e:	00db      	lsls	r3, r3, #3
 8018310:	440b      	add	r3, r1
 8018312:	3312      	adds	r3, #18
 8018314:	881b      	ldrh	r3, [r3, #0]
 8018316:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801831a:	d321      	bcc.n	8018360 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801831c:	79fa      	ldrb	r2, [r7, #7]
 801831e:	4613      	mov	r3, r2
 8018320:	005b      	lsls	r3, r3, #1
 8018322:	4413      	add	r3, r2
 8018324:	00db      	lsls	r3, r3, #3
 8018326:	4a1b      	ldr	r2, [pc, #108]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 8018328:	4413      	add	r3, r2
 801832a:	1d19      	adds	r1, r3, #4
 801832c:	79fa      	ldrb	r2, [r7, #7]
 801832e:	4613      	mov	r3, r2
 8018330:	005b      	lsls	r3, r3, #1
 8018332:	4413      	add	r3, r2
 8018334:	00db      	lsls	r3, r3, #3
 8018336:	3308      	adds	r3, #8
 8018338:	4a16      	ldr	r2, [pc, #88]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 801833a:	4413      	add	r3, r2
 801833c:	3304      	adds	r3, #4
 801833e:	461a      	mov	r2, r3
 8018340:	68f8      	ldr	r0, [r7, #12]
 8018342:	f000 fafb 	bl	801893c <etharp_request_dst>
 8018346:	4603      	mov	r3, r0
 8018348:	2b00      	cmp	r3, #0
 801834a:	d109      	bne.n	8018360 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801834c:	79fa      	ldrb	r2, [r7, #7]
 801834e:	4911      	ldr	r1, [pc, #68]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 8018350:	4613      	mov	r3, r2
 8018352:	005b      	lsls	r3, r3, #1
 8018354:	4413      	add	r3, r2
 8018356:	00db      	lsls	r3, r3, #3
 8018358:	440b      	add	r3, r1
 801835a:	3314      	adds	r3, #20
 801835c:	2203      	movs	r2, #3
 801835e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8018366:	79fa      	ldrb	r2, [r7, #7]
 8018368:	4613      	mov	r3, r2
 801836a:	005b      	lsls	r3, r3, #1
 801836c:	4413      	add	r3, r2
 801836e:	00db      	lsls	r3, r3, #3
 8018370:	3308      	adds	r3, #8
 8018372:	4a08      	ldr	r2, [pc, #32]	@ (8018394 <etharp_output_to_arp_index+0x124>)
 8018374:	4413      	add	r3, r2
 8018376:	3304      	adds	r3, #4
 8018378:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801837c:	9200      	str	r2, [sp, #0]
 801837e:	460a      	mov	r2, r1
 8018380:	68b9      	ldr	r1, [r7, #8]
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f001 ff14 	bl	801a1b0 <ethernet_output>
 8018388:	4603      	mov	r3, r0
}
 801838a:	4618      	mov	r0, r3
 801838c:	3710      	adds	r7, #16
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	20013df4 	.word	0x20013df4
 8018398:	08020534 	.word	0x08020534
 801839c:	080206a4 	.word	0x080206a4
 80183a0:	080205ac 	.word	0x080205ac

080183a4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80183a4:	b580      	push	{r7, lr}
 80183a6:	b08a      	sub	sp, #40	@ 0x28
 80183a8:	af02      	add	r7, sp, #8
 80183aa:	60f8      	str	r0, [r7, #12]
 80183ac:	60b9      	str	r1, [r7, #8]
 80183ae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d106      	bne.n	80183c8 <etharp_output+0x24>
 80183ba:	4b73      	ldr	r3, [pc, #460]	@ (8018588 <etharp_output+0x1e4>)
 80183bc:	f240 321e 	movw	r2, #798	@ 0x31e
 80183c0:	4972      	ldr	r1, [pc, #456]	@ (801858c <etharp_output+0x1e8>)
 80183c2:	4873      	ldr	r0, [pc, #460]	@ (8018590 <etharp_output+0x1ec>)
 80183c4:	f002 fef4 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d106      	bne.n	80183dc <etharp_output+0x38>
 80183ce:	4b6e      	ldr	r3, [pc, #440]	@ (8018588 <etharp_output+0x1e4>)
 80183d0:	f240 321f 	movw	r2, #799	@ 0x31f
 80183d4:	496f      	ldr	r1, [pc, #444]	@ (8018594 <etharp_output+0x1f0>)
 80183d6:	486e      	ldr	r0, [pc, #440]	@ (8018590 <etharp_output+0x1ec>)
 80183d8:	f002 feea 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <etharp_output+0x4c>
 80183e2:	4b69      	ldr	r3, [pc, #420]	@ (8018588 <etharp_output+0x1e4>)
 80183e4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80183e8:	496b      	ldr	r1, [pc, #428]	@ (8018598 <etharp_output+0x1f4>)
 80183ea:	4869      	ldr	r0, [pc, #420]	@ (8018590 <etharp_output+0x1ec>)
 80183ec:	f002 fee0 	bl	801b1b0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	68f9      	ldr	r1, [r7, #12]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f000 ffbc 	bl	8019374 <ip4_addr_isbroadcast_u32>
 80183fc:	4603      	mov	r3, r0
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d002      	beq.n	8018408 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018402:	4b66      	ldr	r3, [pc, #408]	@ (801859c <etharp_output+0x1f8>)
 8018404:	61fb      	str	r3, [r7, #28]
 8018406:	e0af      	b.n	8018568 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018410:	2be0      	cmp	r3, #224	@ 0xe0
 8018412:	d118      	bne.n	8018446 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018414:	2301      	movs	r3, #1
 8018416:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018418:	2300      	movs	r3, #0
 801841a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801841c:	235e      	movs	r3, #94	@ 0x5e
 801841e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	3301      	adds	r3, #1
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801842a:	b2db      	uxtb	r3, r3
 801842c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	3302      	adds	r3, #2
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	3303      	adds	r3, #3
 801843a:	781b      	ldrb	r3, [r3, #0]
 801843c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801843e:	f107 0310 	add.w	r3, r7, #16
 8018442:	61fb      	str	r3, [r7, #28]
 8018444:	e090      	b.n	8018568 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	3304      	adds	r3, #4
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	405a      	eors	r2, r3
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	3308      	adds	r3, #8
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4013      	ands	r3, r2
 801845a:	2b00      	cmp	r3, #0
 801845c:	d012      	beq.n	8018484 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018464:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018468:	4293      	cmp	r3, r2
 801846a:	d00b      	beq.n	8018484 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	330c      	adds	r3, #12
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d003      	beq.n	801847e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	330c      	adds	r3, #12
 801847a:	61bb      	str	r3, [r7, #24]
 801847c:	e002      	b.n	8018484 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801847e:	f06f 0303 	mvn.w	r3, #3
 8018482:	e07d      	b.n	8018580 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018484:	4b46      	ldr	r3, [pc, #280]	@ (80185a0 <etharp_output+0x1fc>)
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	4619      	mov	r1, r3
 801848a:	4a46      	ldr	r2, [pc, #280]	@ (80185a4 <etharp_output+0x200>)
 801848c:	460b      	mov	r3, r1
 801848e:	005b      	lsls	r3, r3, #1
 8018490:	440b      	add	r3, r1
 8018492:	00db      	lsls	r3, r3, #3
 8018494:	4413      	add	r3, r2
 8018496:	3314      	adds	r3, #20
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	2b01      	cmp	r3, #1
 801849c:	d925      	bls.n	80184ea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801849e:	4b40      	ldr	r3, [pc, #256]	@ (80185a0 <etharp_output+0x1fc>)
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	4619      	mov	r1, r3
 80184a4:	4a3f      	ldr	r2, [pc, #252]	@ (80185a4 <etharp_output+0x200>)
 80184a6:	460b      	mov	r3, r1
 80184a8:	005b      	lsls	r3, r3, #1
 80184aa:	440b      	add	r3, r1
 80184ac:	00db      	lsls	r3, r3, #3
 80184ae:	4413      	add	r3, r2
 80184b0:	3308      	adds	r3, #8
 80184b2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80184b4:	68fa      	ldr	r2, [r7, #12]
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d117      	bne.n	80184ea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80184ba:	69bb      	ldr	r3, [r7, #24]
 80184bc:	681a      	ldr	r2, [r3, #0]
 80184be:	4b38      	ldr	r3, [pc, #224]	@ (80185a0 <etharp_output+0x1fc>)
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	4618      	mov	r0, r3
 80184c4:	4937      	ldr	r1, [pc, #220]	@ (80185a4 <etharp_output+0x200>)
 80184c6:	4603      	mov	r3, r0
 80184c8:	005b      	lsls	r3, r3, #1
 80184ca:	4403      	add	r3, r0
 80184cc:	00db      	lsls	r3, r3, #3
 80184ce:	440b      	add	r3, r1
 80184d0:	3304      	adds	r3, #4
 80184d2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d108      	bne.n	80184ea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80184d8:	4b31      	ldr	r3, [pc, #196]	@ (80185a0 <etharp_output+0x1fc>)
 80184da:	781b      	ldrb	r3, [r3, #0]
 80184dc:	461a      	mov	r2, r3
 80184de:	68b9      	ldr	r1, [r7, #8]
 80184e0:	68f8      	ldr	r0, [r7, #12]
 80184e2:	f7ff fec5 	bl	8018270 <etharp_output_to_arp_index>
 80184e6:	4603      	mov	r3, r0
 80184e8:	e04a      	b.n	8018580 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80184ea:	2300      	movs	r3, #0
 80184ec:	75fb      	strb	r3, [r7, #23]
 80184ee:	e031      	b.n	8018554 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80184f0:	7dfa      	ldrb	r2, [r7, #23]
 80184f2:	492c      	ldr	r1, [pc, #176]	@ (80185a4 <etharp_output+0x200>)
 80184f4:	4613      	mov	r3, r2
 80184f6:	005b      	lsls	r3, r3, #1
 80184f8:	4413      	add	r3, r2
 80184fa:	00db      	lsls	r3, r3, #3
 80184fc:	440b      	add	r3, r1
 80184fe:	3314      	adds	r3, #20
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	2b01      	cmp	r3, #1
 8018504:	d923      	bls.n	801854e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018506:	7dfa      	ldrb	r2, [r7, #23]
 8018508:	4926      	ldr	r1, [pc, #152]	@ (80185a4 <etharp_output+0x200>)
 801850a:	4613      	mov	r3, r2
 801850c:	005b      	lsls	r3, r3, #1
 801850e:	4413      	add	r3, r2
 8018510:	00db      	lsls	r3, r3, #3
 8018512:	440b      	add	r3, r1
 8018514:	3308      	adds	r3, #8
 8018516:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018518:	68fa      	ldr	r2, [r7, #12]
 801851a:	429a      	cmp	r2, r3
 801851c:	d117      	bne.n	801854e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801851e:	69bb      	ldr	r3, [r7, #24]
 8018520:	6819      	ldr	r1, [r3, #0]
 8018522:	7dfa      	ldrb	r2, [r7, #23]
 8018524:	481f      	ldr	r0, [pc, #124]	@ (80185a4 <etharp_output+0x200>)
 8018526:	4613      	mov	r3, r2
 8018528:	005b      	lsls	r3, r3, #1
 801852a:	4413      	add	r3, r2
 801852c:	00db      	lsls	r3, r3, #3
 801852e:	4403      	add	r3, r0
 8018530:	3304      	adds	r3, #4
 8018532:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018534:	4299      	cmp	r1, r3
 8018536:	d10a      	bne.n	801854e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018538:	4a19      	ldr	r2, [pc, #100]	@ (80185a0 <etharp_output+0x1fc>)
 801853a:	7dfb      	ldrb	r3, [r7, #23]
 801853c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801853e:	7dfb      	ldrb	r3, [r7, #23]
 8018540:	461a      	mov	r2, r3
 8018542:	68b9      	ldr	r1, [r7, #8]
 8018544:	68f8      	ldr	r0, [r7, #12]
 8018546:	f7ff fe93 	bl	8018270 <etharp_output_to_arp_index>
 801854a:	4603      	mov	r3, r0
 801854c:	e018      	b.n	8018580 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801854e:	7dfb      	ldrb	r3, [r7, #23]
 8018550:	3301      	adds	r3, #1
 8018552:	75fb      	strb	r3, [r7, #23]
 8018554:	7dfb      	ldrb	r3, [r7, #23]
 8018556:	2b09      	cmp	r3, #9
 8018558:	d9ca      	bls.n	80184f0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801855a:	68ba      	ldr	r2, [r7, #8]
 801855c:	69b9      	ldr	r1, [r7, #24]
 801855e:	68f8      	ldr	r0, [r7, #12]
 8018560:	f000 f822 	bl	80185a8 <etharp_query>
 8018564:	4603      	mov	r3, r0
 8018566:	e00b      	b.n	8018580 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801856e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018572:	9300      	str	r3, [sp, #0]
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	68b9      	ldr	r1, [r7, #8]
 8018578:	68f8      	ldr	r0, [r7, #12]
 801857a:	f001 fe19 	bl	801a1b0 <ethernet_output>
 801857e:	4603      	mov	r3, r0
}
 8018580:	4618      	mov	r0, r3
 8018582:	3720      	adds	r7, #32
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}
 8018588:	08020534 	.word	0x08020534
 801858c:	08020684 	.word	0x08020684
 8018590:	080205ac 	.word	0x080205ac
 8018594:	080206d4 	.word	0x080206d4
 8018598:	08020674 	.word	0x08020674
 801859c:	0806c9f4 	.word	0x0806c9f4
 80185a0:	20013ee4 	.word	0x20013ee4
 80185a4:	20013df4 	.word	0x20013df4

080185a8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b08c      	sub	sp, #48	@ 0x30
 80185ac:	af02      	add	r7, sp, #8
 80185ae:	60f8      	str	r0, [r7, #12]
 80185b0:	60b9      	str	r1, [r7, #8]
 80185b2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	332a      	adds	r3, #42	@ 0x2a
 80185b8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80185ba:	23ff      	movs	r3, #255	@ 0xff
 80185bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80185c0:	2300      	movs	r3, #0
 80185c2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	68f9      	ldr	r1, [r7, #12]
 80185ca:	4618      	mov	r0, r3
 80185cc:	f000 fed2 	bl	8019374 <ip4_addr_isbroadcast_u32>
 80185d0:	4603      	mov	r3, r0
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d10c      	bne.n	80185f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80185de:	2be0      	cmp	r3, #224	@ 0xe0
 80185e0:	d006      	beq.n	80185f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d003      	beq.n	80185f0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80185e8:	68bb      	ldr	r3, [r7, #8]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d102      	bne.n	80185f6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80185f0:	f06f 030f 	mvn.w	r3, #15
 80185f4:	e101      	b.n	80187fa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80185f6:	68fa      	ldr	r2, [r7, #12]
 80185f8:	2101      	movs	r1, #1
 80185fa:	68b8      	ldr	r0, [r7, #8]
 80185fc:	f7ff fb20 	bl	8017c40 <etharp_find_entry>
 8018600:	4603      	mov	r3, r0
 8018602:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018608:	2b00      	cmp	r3, #0
 801860a:	da02      	bge.n	8018612 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801860c:	8a7b      	ldrh	r3, [r7, #18]
 801860e:	b25b      	sxtb	r3, r3
 8018610:	e0f3      	b.n	80187fa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018612:	8a7b      	ldrh	r3, [r7, #18]
 8018614:	2b7e      	cmp	r3, #126	@ 0x7e
 8018616:	d906      	bls.n	8018626 <etharp_query+0x7e>
 8018618:	4b7a      	ldr	r3, [pc, #488]	@ (8018804 <etharp_query+0x25c>)
 801861a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801861e:	497a      	ldr	r1, [pc, #488]	@ (8018808 <etharp_query+0x260>)
 8018620:	487a      	ldr	r0, [pc, #488]	@ (801880c <etharp_query+0x264>)
 8018622:	f002 fdc5 	bl	801b1b0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018626:	8a7b      	ldrh	r3, [r7, #18]
 8018628:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801862a:	7c7a      	ldrb	r2, [r7, #17]
 801862c:	4978      	ldr	r1, [pc, #480]	@ (8018810 <etharp_query+0x268>)
 801862e:	4613      	mov	r3, r2
 8018630:	005b      	lsls	r3, r3, #1
 8018632:	4413      	add	r3, r2
 8018634:	00db      	lsls	r3, r3, #3
 8018636:	440b      	add	r3, r1
 8018638:	3314      	adds	r3, #20
 801863a:	781b      	ldrb	r3, [r3, #0]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d115      	bne.n	801866c <etharp_query+0xc4>
    is_new_entry = 1;
 8018640:	2301      	movs	r3, #1
 8018642:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018644:	7c7a      	ldrb	r2, [r7, #17]
 8018646:	4972      	ldr	r1, [pc, #456]	@ (8018810 <etharp_query+0x268>)
 8018648:	4613      	mov	r3, r2
 801864a:	005b      	lsls	r3, r3, #1
 801864c:	4413      	add	r3, r2
 801864e:	00db      	lsls	r3, r3, #3
 8018650:	440b      	add	r3, r1
 8018652:	3314      	adds	r3, #20
 8018654:	2201      	movs	r2, #1
 8018656:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018658:	7c7a      	ldrb	r2, [r7, #17]
 801865a:	496d      	ldr	r1, [pc, #436]	@ (8018810 <etharp_query+0x268>)
 801865c:	4613      	mov	r3, r2
 801865e:	005b      	lsls	r3, r3, #1
 8018660:	4413      	add	r3, r2
 8018662:	00db      	lsls	r3, r3, #3
 8018664:	440b      	add	r3, r1
 8018666:	3308      	adds	r3, #8
 8018668:	68fa      	ldr	r2, [r7, #12]
 801866a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801866c:	7c7a      	ldrb	r2, [r7, #17]
 801866e:	4968      	ldr	r1, [pc, #416]	@ (8018810 <etharp_query+0x268>)
 8018670:	4613      	mov	r3, r2
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4413      	add	r3, r2
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	440b      	add	r3, r1
 801867a:	3314      	adds	r3, #20
 801867c:	781b      	ldrb	r3, [r3, #0]
 801867e:	2b01      	cmp	r3, #1
 8018680:	d011      	beq.n	80186a6 <etharp_query+0xfe>
 8018682:	7c7a      	ldrb	r2, [r7, #17]
 8018684:	4962      	ldr	r1, [pc, #392]	@ (8018810 <etharp_query+0x268>)
 8018686:	4613      	mov	r3, r2
 8018688:	005b      	lsls	r3, r3, #1
 801868a:	4413      	add	r3, r2
 801868c:	00db      	lsls	r3, r3, #3
 801868e:	440b      	add	r3, r1
 8018690:	3314      	adds	r3, #20
 8018692:	781b      	ldrb	r3, [r3, #0]
 8018694:	2b01      	cmp	r3, #1
 8018696:	d806      	bhi.n	80186a6 <etharp_query+0xfe>
 8018698:	4b5a      	ldr	r3, [pc, #360]	@ (8018804 <etharp_query+0x25c>)
 801869a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801869e:	495d      	ldr	r1, [pc, #372]	@ (8018814 <etharp_query+0x26c>)
 80186a0:	485a      	ldr	r0, [pc, #360]	@ (801880c <etharp_query+0x264>)
 80186a2:	f002 fd85 	bl	801b1b0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80186a6:	6a3b      	ldr	r3, [r7, #32]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d102      	bne.n	80186b2 <etharp_query+0x10a>
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d10c      	bne.n	80186cc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80186b2:	68b9      	ldr	r1, [r7, #8]
 80186b4:	68f8      	ldr	r0, [r7, #12]
 80186b6:	f000 f963 	bl	8018980 <etharp_request>
 80186ba:	4603      	mov	r3, r0
 80186bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d102      	bne.n	80186cc <etharp_query+0x124>
      return result;
 80186c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80186ca:	e096      	b.n	80187fa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d106      	bne.n	80186e0 <etharp_query+0x138>
 80186d2:	4b4c      	ldr	r3, [pc, #304]	@ (8018804 <etharp_query+0x25c>)
 80186d4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80186d8:	494f      	ldr	r1, [pc, #316]	@ (8018818 <etharp_query+0x270>)
 80186da:	484c      	ldr	r0, [pc, #304]	@ (801880c <etharp_query+0x264>)
 80186dc:	f002 fd68 	bl	801b1b0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80186e0:	7c7a      	ldrb	r2, [r7, #17]
 80186e2:	494b      	ldr	r1, [pc, #300]	@ (8018810 <etharp_query+0x268>)
 80186e4:	4613      	mov	r3, r2
 80186e6:	005b      	lsls	r3, r3, #1
 80186e8:	4413      	add	r3, r2
 80186ea:	00db      	lsls	r3, r3, #3
 80186ec:	440b      	add	r3, r1
 80186ee:	3314      	adds	r3, #20
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	d917      	bls.n	8018726 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80186f6:	4a49      	ldr	r2, [pc, #292]	@ (801881c <etharp_query+0x274>)
 80186f8:	7c7b      	ldrb	r3, [r7, #17]
 80186fa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80186fc:	7c7a      	ldrb	r2, [r7, #17]
 80186fe:	4613      	mov	r3, r2
 8018700:	005b      	lsls	r3, r3, #1
 8018702:	4413      	add	r3, r2
 8018704:	00db      	lsls	r3, r3, #3
 8018706:	3308      	adds	r3, #8
 8018708:	4a41      	ldr	r2, [pc, #260]	@ (8018810 <etharp_query+0x268>)
 801870a:	4413      	add	r3, r2
 801870c:	3304      	adds	r3, #4
 801870e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018712:	9200      	str	r2, [sp, #0]
 8018714:	697a      	ldr	r2, [r7, #20]
 8018716:	6879      	ldr	r1, [r7, #4]
 8018718:	68f8      	ldr	r0, [r7, #12]
 801871a:	f001 fd49 	bl	801a1b0 <ethernet_output>
 801871e:	4603      	mov	r3, r0
 8018720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018724:	e067      	b.n	80187f6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018726:	7c7a      	ldrb	r2, [r7, #17]
 8018728:	4939      	ldr	r1, [pc, #228]	@ (8018810 <etharp_query+0x268>)
 801872a:	4613      	mov	r3, r2
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	4413      	add	r3, r2
 8018730:	00db      	lsls	r3, r3, #3
 8018732:	440b      	add	r3, r1
 8018734:	3314      	adds	r3, #20
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	2b01      	cmp	r3, #1
 801873a:	d15c      	bne.n	80187f6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801873c:	2300      	movs	r3, #0
 801873e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018744:	e01c      	b.n	8018780 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	895a      	ldrh	r2, [r3, #10]
 801874a:	69fb      	ldr	r3, [r7, #28]
 801874c:	891b      	ldrh	r3, [r3, #8]
 801874e:	429a      	cmp	r2, r3
 8018750:	d10a      	bne.n	8018768 <etharp_query+0x1c0>
 8018752:	69fb      	ldr	r3, [r7, #28]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d006      	beq.n	8018768 <etharp_query+0x1c0>
 801875a:	4b2a      	ldr	r3, [pc, #168]	@ (8018804 <etharp_query+0x25c>)
 801875c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8018760:	492f      	ldr	r1, [pc, #188]	@ (8018820 <etharp_query+0x278>)
 8018762:	482a      	ldr	r0, [pc, #168]	@ (801880c <etharp_query+0x264>)
 8018764:	f002 fd24 	bl	801b1b0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	7b1b      	ldrb	r3, [r3, #12]
 801876c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018770:	2b00      	cmp	r3, #0
 8018772:	d002      	beq.n	801877a <etharp_query+0x1d2>
        copy_needed = 1;
 8018774:	2301      	movs	r3, #1
 8018776:	61bb      	str	r3, [r7, #24]
        break;
 8018778:	e005      	b.n	8018786 <etharp_query+0x1de>
      }
      p = p->next;
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018780:	69fb      	ldr	r3, [r7, #28]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d1df      	bne.n	8018746 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018786:	69bb      	ldr	r3, [r7, #24]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d007      	beq.n	801879c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801878c:	687a      	ldr	r2, [r7, #4]
 801878e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018792:	200e      	movs	r0, #14
 8018794:	f7f7 f982 	bl	800fa9c <pbuf_clone>
 8018798:	61f8      	str	r0, [r7, #28]
 801879a:	e004      	b.n	80187a6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80187a0:	69f8      	ldr	r0, [r7, #28]
 80187a2:	f7f6 ff6d 	bl	800f680 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d021      	beq.n	80187f0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80187ac:	7c7a      	ldrb	r2, [r7, #17]
 80187ae:	4918      	ldr	r1, [pc, #96]	@ (8018810 <etharp_query+0x268>)
 80187b0:	4613      	mov	r3, r2
 80187b2:	005b      	lsls	r3, r3, #1
 80187b4:	4413      	add	r3, r2
 80187b6:	00db      	lsls	r3, r3, #3
 80187b8:	440b      	add	r3, r1
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d00a      	beq.n	80187d6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80187c0:	7c7a      	ldrb	r2, [r7, #17]
 80187c2:	4913      	ldr	r1, [pc, #76]	@ (8018810 <etharp_query+0x268>)
 80187c4:	4613      	mov	r3, r2
 80187c6:	005b      	lsls	r3, r3, #1
 80187c8:	4413      	add	r3, r2
 80187ca:	00db      	lsls	r3, r3, #3
 80187cc:	440b      	add	r3, r1
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7f6 feaf 	bl	800f534 <pbuf_free>
      }
      arp_table[i].q = p;
 80187d6:	7c7a      	ldrb	r2, [r7, #17]
 80187d8:	490d      	ldr	r1, [pc, #52]	@ (8018810 <etharp_query+0x268>)
 80187da:	4613      	mov	r3, r2
 80187dc:	005b      	lsls	r3, r3, #1
 80187de:	4413      	add	r3, r2
 80187e0:	00db      	lsls	r3, r3, #3
 80187e2:	440b      	add	r3, r1
 80187e4:	69fa      	ldr	r2, [r7, #28]
 80187e6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80187e8:	2300      	movs	r3, #0
 80187ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80187ee:	e002      	b.n	80187f6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80187f0:	23ff      	movs	r3, #255	@ 0xff
 80187f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80187f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3728      	adds	r7, #40	@ 0x28
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	08020534 	.word	0x08020534
 8018808:	080206e0 	.word	0x080206e0
 801880c:	080205ac 	.word	0x080205ac
 8018810:	20013df4 	.word	0x20013df4
 8018814:	080206f0 	.word	0x080206f0
 8018818:	080206d4 	.word	0x080206d4
 801881c:	20013ee4 	.word	0x20013ee4
 8018820:	08020718 	.word	0x08020718

08018824 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b08a      	sub	sp, #40	@ 0x28
 8018828:	af02      	add	r7, sp, #8
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
 8018830:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018832:	2300      	movs	r3, #0
 8018834:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d106      	bne.n	801884a <etharp_raw+0x26>
 801883c:	4b3a      	ldr	r3, [pc, #232]	@ (8018928 <etharp_raw+0x104>)
 801883e:	f240 4257 	movw	r2, #1111	@ 0x457
 8018842:	493a      	ldr	r1, [pc, #232]	@ (801892c <etharp_raw+0x108>)
 8018844:	483a      	ldr	r0, [pc, #232]	@ (8018930 <etharp_raw+0x10c>)
 8018846:	f002 fcb3 	bl	801b1b0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801884a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801884e:	211c      	movs	r1, #28
 8018850:	200e      	movs	r0, #14
 8018852:	f7f6 fb87 	bl	800ef64 <pbuf_alloc>
 8018856:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018858:	69bb      	ldr	r3, [r7, #24]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d102      	bne.n	8018864 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801885e:	f04f 33ff 	mov.w	r3, #4294967295
 8018862:	e05d      	b.n	8018920 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018864:	69bb      	ldr	r3, [r7, #24]
 8018866:	895b      	ldrh	r3, [r3, #10]
 8018868:	2b1b      	cmp	r3, #27
 801886a:	d806      	bhi.n	801887a <etharp_raw+0x56>
 801886c:	4b2e      	ldr	r3, [pc, #184]	@ (8018928 <etharp_raw+0x104>)
 801886e:	f240 4262 	movw	r2, #1122	@ 0x462
 8018872:	4930      	ldr	r1, [pc, #192]	@ (8018934 <etharp_raw+0x110>)
 8018874:	482e      	ldr	r0, [pc, #184]	@ (8018930 <etharp_raw+0x10c>)
 8018876:	f002 fc9b 	bl	801b1b0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801887a:	69bb      	ldr	r3, [r7, #24]
 801887c:	685b      	ldr	r3, [r3, #4]
 801887e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018880:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018882:	4618      	mov	r0, r3
 8018884:	f7f5 f934 	bl	800daf0 <lwip_htons>
 8018888:	4603      	mov	r3, r0
 801888a:	461a      	mov	r2, r3
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018896:	2b06      	cmp	r3, #6
 8018898:	d006      	beq.n	80188a8 <etharp_raw+0x84>
 801889a:	4b23      	ldr	r3, [pc, #140]	@ (8018928 <etharp_raw+0x104>)
 801889c:	f240 4269 	movw	r2, #1129	@ 0x469
 80188a0:	4925      	ldr	r1, [pc, #148]	@ (8018938 <etharp_raw+0x114>)
 80188a2:	4823      	ldr	r0, [pc, #140]	@ (8018930 <etharp_raw+0x10c>)
 80188a4:	f002 fc84 	bl	801b1b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80188a8:	697b      	ldr	r3, [r7, #20]
 80188aa:	3308      	adds	r3, #8
 80188ac:	2206      	movs	r2, #6
 80188ae:	6839      	ldr	r1, [r7, #0]
 80188b0:	4618      	mov	r0, r3
 80188b2:	f002 fe9c 	bl	801b5ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	3312      	adds	r3, #18
 80188ba:	2206      	movs	r2, #6
 80188bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80188be:	4618      	mov	r0, r3
 80188c0:	f002 fe95 	bl	801b5ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	330e      	adds	r3, #14
 80188c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80188ca:	6812      	ldr	r2, [r2, #0]
 80188cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80188ce:	697b      	ldr	r3, [r7, #20]
 80188d0:	3318      	adds	r3, #24
 80188d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188d4:	6812      	ldr	r2, [r2, #0]
 80188d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	2200      	movs	r2, #0
 80188dc:	701a      	strb	r2, [r3, #0]
 80188de:	2200      	movs	r2, #0
 80188e0:	f042 0201 	orr.w	r2, r2, #1
 80188e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80188e6:	697b      	ldr	r3, [r7, #20]
 80188e8:	2200      	movs	r2, #0
 80188ea:	f042 0208 	orr.w	r2, r2, #8
 80188ee:	709a      	strb	r2, [r3, #2]
 80188f0:	2200      	movs	r2, #0
 80188f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80188f4:	697b      	ldr	r3, [r7, #20]
 80188f6:	2206      	movs	r2, #6
 80188f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	2204      	movs	r2, #4
 80188fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018900:	f640 0306 	movw	r3, #2054	@ 0x806
 8018904:	9300      	str	r3, [sp, #0]
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	68ba      	ldr	r2, [r7, #8]
 801890a:	69b9      	ldr	r1, [r7, #24]
 801890c:	68f8      	ldr	r0, [r7, #12]
 801890e:	f001 fc4f 	bl	801a1b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018912:	69b8      	ldr	r0, [r7, #24]
 8018914:	f7f6 fe0e 	bl	800f534 <pbuf_free>
  p = NULL;
 8018918:	2300      	movs	r3, #0
 801891a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801891c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018920:	4618      	mov	r0, r3
 8018922:	3720      	adds	r7, #32
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}
 8018928:	08020534 	.word	0x08020534
 801892c:	08020684 	.word	0x08020684
 8018930:	080205ac 	.word	0x080205ac
 8018934:	08020734 	.word	0x08020734
 8018938:	08020768 	.word	0x08020768

0801893c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b088      	sub	sp, #32
 8018940:	af04      	add	r7, sp, #16
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018958:	2201      	movs	r2, #1
 801895a:	9203      	str	r2, [sp, #12]
 801895c:	68ba      	ldr	r2, [r7, #8]
 801895e:	9202      	str	r2, [sp, #8]
 8018960:	4a06      	ldr	r2, [pc, #24]	@ (801897c <etharp_request_dst+0x40>)
 8018962:	9201      	str	r2, [sp, #4]
 8018964:	9300      	str	r3, [sp, #0]
 8018966:	4603      	mov	r3, r0
 8018968:	687a      	ldr	r2, [r7, #4]
 801896a:	68f8      	ldr	r0, [r7, #12]
 801896c:	f7ff ff5a 	bl	8018824 <etharp_raw>
 8018970:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018972:	4618      	mov	r0, r3
 8018974:	3710      	adds	r7, #16
 8018976:	46bd      	mov	sp, r7
 8018978:	bd80      	pop	{r7, pc}
 801897a:	bf00      	nop
 801897c:	0806c9fc 	.word	0x0806c9fc

08018980 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b082      	sub	sp, #8
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801898a:	4a05      	ldr	r2, [pc, #20]	@ (80189a0 <etharp_request+0x20>)
 801898c:	6839      	ldr	r1, [r7, #0]
 801898e:	6878      	ldr	r0, [r7, #4]
 8018990:	f7ff ffd4 	bl	801893c <etharp_request_dst>
 8018994:	4603      	mov	r3, r0
}
 8018996:	4618      	mov	r0, r3
 8018998:	3708      	adds	r7, #8
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}
 801899e:	bf00      	nop
 80189a0:	0806c9f4 	.word	0x0806c9f4

080189a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b08e      	sub	sp, #56	@ 0x38
 80189a8:	af04      	add	r7, sp, #16
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80189ae:	4b8e      	ldr	r3, [pc, #568]	@ (8018be8 <icmp_input+0x244>)
 80189b0:	689b      	ldr	r3, [r3, #8]
 80189b2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80189b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	f003 030f 	and.w	r3, r3, #15
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80189c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80189c6:	2b13      	cmp	r3, #19
 80189c8:	f240 80f6 	bls.w	8018bb8 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	895b      	ldrh	r3, [r3, #10]
 80189d0:	2b03      	cmp	r3, #3
 80189d2:	f240 80f3 	bls.w	8018bbc <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	685b      	ldr	r3, [r3, #4]
 80189da:	781b      	ldrb	r3, [r3, #0]
 80189dc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	785b      	ldrb	r3, [r3, #1]
 80189e6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80189ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	f000 80db 	beq.w	8018baa <icmp_input+0x206>
 80189f4:	2b08      	cmp	r3, #8
 80189f6:	f040 80db 	bne.w	8018bb0 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80189fa:	4b7c      	ldr	r3, [pc, #496]	@ (8018bec <icmp_input+0x248>)
 80189fc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80189fe:	4b7a      	ldr	r3, [pc, #488]	@ (8018be8 <icmp_input+0x244>)
 8018a00:	695b      	ldr	r3, [r3, #20]
 8018a02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a06:	2be0      	cmp	r3, #224	@ 0xe0
 8018a08:	f000 80df 	beq.w	8018bca <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018a0c:	4b76      	ldr	r3, [pc, #472]	@ (8018be8 <icmp_input+0x244>)
 8018a0e:	695b      	ldr	r3, [r3, #20]
 8018a10:	4a75      	ldr	r2, [pc, #468]	@ (8018be8 <icmp_input+0x244>)
 8018a12:	6812      	ldr	r2, [r2, #0]
 8018a14:	4611      	mov	r1, r2
 8018a16:	4618      	mov	r0, r3
 8018a18:	f000 fcac 	bl	8019374 <ip4_addr_isbroadcast_u32>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	f040 80d5 	bne.w	8018bce <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	891b      	ldrh	r3, [r3, #8]
 8018a28:	2b07      	cmp	r3, #7
 8018a2a:	f240 80c9 	bls.w	8018bc0 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f7f5 f9b8 	bl	800dda4 <inet_chksum_pbuf>
 8018a34:	4603      	mov	r3, r0
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d003      	beq.n	8018a42 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f7f6 fd7a 	bl	800f534 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018a40:	e0ce      	b.n	8018be0 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018a42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a44:	330e      	adds	r3, #14
 8018a46:	4619      	mov	r1, r3
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7f6 fcdd 	bl	800f408 <pbuf_add_header>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d04b      	beq.n	8018aec <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	891a      	ldrh	r2, [r3, #8]
 8018a58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a5a:	4413      	add	r3, r2
 8018a5c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	891b      	ldrh	r3, [r3, #8]
 8018a62:	8b7a      	ldrh	r2, [r7, #26]
 8018a64:	429a      	cmp	r2, r3
 8018a66:	f0c0 80b4 	bcc.w	8018bd2 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018a6a:	8b7b      	ldrh	r3, [r7, #26]
 8018a6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018a70:	4619      	mov	r1, r3
 8018a72:	200e      	movs	r0, #14
 8018a74:	f7f6 fa76 	bl	800ef64 <pbuf_alloc>
 8018a78:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	f000 80aa 	beq.w	8018bd6 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	895b      	ldrh	r3, [r3, #10]
 8018a86:	461a      	mov	r2, r3
 8018a88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a8a:	3308      	adds	r3, #8
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d203      	bcs.n	8018a98 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018a90:	6978      	ldr	r0, [r7, #20]
 8018a92:	f7f6 fd4f 	bl	800f534 <pbuf_free>
          goto icmperr;
 8018a96:	e09f      	b.n	8018bd8 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018a9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f002 fda4 	bl	801b5ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018aa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018aa8:	4619      	mov	r1, r3
 8018aaa:	6978      	ldr	r0, [r7, #20]
 8018aac:	f7f6 fcbc 	bl	800f428 <pbuf_remove_header>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d009      	beq.n	8018aca <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8018bf0 <icmp_input+0x24c>)
 8018ab8:	22b6      	movs	r2, #182	@ 0xb6
 8018aba:	494e      	ldr	r1, [pc, #312]	@ (8018bf4 <icmp_input+0x250>)
 8018abc:	484e      	ldr	r0, [pc, #312]	@ (8018bf8 <icmp_input+0x254>)
 8018abe:	f002 fb77 	bl	801b1b0 <iprintf>
          pbuf_free(r);
 8018ac2:	6978      	ldr	r0, [r7, #20]
 8018ac4:	f7f6 fd36 	bl	800f534 <pbuf_free>
          goto icmperr;
 8018ac8:	e086      	b.n	8018bd8 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018aca:	6879      	ldr	r1, [r7, #4]
 8018acc:	6978      	ldr	r0, [r7, #20]
 8018ace:	f7f6 fe65 	bl	800f79c <pbuf_copy>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d003      	beq.n	8018ae0 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018ad8:	6978      	ldr	r0, [r7, #20]
 8018ada:	f7f6 fd2b 	bl	800f534 <pbuf_free>
          goto icmperr;
 8018ade:	e07b      	b.n	8018bd8 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	f7f6 fd27 	bl	800f534 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018ae6:	697b      	ldr	r3, [r7, #20]
 8018ae8:	607b      	str	r3, [r7, #4]
 8018aea:	e00f      	b.n	8018b0c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018aec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018aee:	330e      	adds	r3, #14
 8018af0:	4619      	mov	r1, r3
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f7f6 fc98 	bl	800f428 <pbuf_remove_header>
 8018af8:	4603      	mov	r3, r0
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d006      	beq.n	8018b0c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018afe:	4b3c      	ldr	r3, [pc, #240]	@ (8018bf0 <icmp_input+0x24c>)
 8018b00:	22c7      	movs	r2, #199	@ 0xc7
 8018b02:	493e      	ldr	r1, [pc, #248]	@ (8018bfc <icmp_input+0x258>)
 8018b04:	483c      	ldr	r0, [pc, #240]	@ (8018bf8 <icmp_input+0x254>)
 8018b06:	f002 fb53 	bl	801b1b0 <iprintf>
          goto icmperr;
 8018b0a:	e065      	b.n	8018bd8 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	685b      	ldr	r3, [r3, #4]
 8018b10:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018b12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b14:	4619      	mov	r1, r3
 8018b16:	6878      	ldr	r0, [r7, #4]
 8018b18:	f7f6 fc76 	bl	800f408 <pbuf_add_header>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d145      	bne.n	8018bae <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018b28:	69fb      	ldr	r3, [r7, #28]
 8018b2a:	681a      	ldr	r2, [r3, #0]
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018b30:	4b2d      	ldr	r3, [pc, #180]	@ (8018be8 <icmp_input+0x244>)
 8018b32:	691a      	ldr	r2, [r3, #16]
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018b38:	693b      	ldr	r3, [r7, #16]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8018b3e:	693b      	ldr	r3, [r7, #16]
 8018b40:	885b      	ldrh	r3, [r3, #2]
 8018b42:	b29b      	uxth	r3, r3
 8018b44:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018b48:	4293      	cmp	r3, r2
 8018b4a:	d907      	bls.n	8018b5c <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018b4c:	693b      	ldr	r3, [r7, #16]
 8018b4e:	885b      	ldrh	r3, [r3, #2]
 8018b50:	b29b      	uxth	r3, r3
 8018b52:	3309      	adds	r3, #9
 8018b54:	b29a      	uxth	r2, r3
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	805a      	strh	r2, [r3, #2]
 8018b5a:	e006      	b.n	8018b6a <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018b5c:	693b      	ldr	r3, [r7, #16]
 8018b5e:	885b      	ldrh	r3, [r3, #2]
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	3308      	adds	r3, #8
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	693b      	ldr	r3, [r7, #16]
 8018b68:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	22ff      	movs	r2, #255	@ 0xff
 8018b6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	2200      	movs	r2, #0
 8018b74:	729a      	strb	r2, [r3, #10]
 8018b76:	2200      	movs	r2, #0
 8018b78:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8018b7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b7c:	4619      	mov	r1, r3
 8018b7e:	68f8      	ldr	r0, [r7, #12]
 8018b80:	f7f5 f8fe 	bl	800dd80 <inet_chksum>
 8018b84:	4603      	mov	r3, r0
 8018b86:	461a      	mov	r2, r3
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	9302      	str	r3, [sp, #8]
 8018b90:	2301      	movs	r3, #1
 8018b92:	9301      	str	r3, [sp, #4]
 8018b94:	2300      	movs	r3, #0
 8018b96:	9300      	str	r3, [sp, #0]
 8018b98:	23ff      	movs	r3, #255	@ 0xff
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	69f9      	ldr	r1, [r7, #28]
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f000 faaa 	bl	80190f8 <ip4_output_if>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018ba8:	e001      	b.n	8018bae <icmp_input+0x20a>
      break;
 8018baa:	bf00      	nop
 8018bac:	e000      	b.n	8018bb0 <icmp_input+0x20c>
      break;
 8018bae:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018bb0:	6878      	ldr	r0, [r7, #4]
 8018bb2:	f7f6 fcbf 	bl	800f534 <pbuf_free>
  return;
 8018bb6:	e013      	b.n	8018be0 <icmp_input+0x23c>
    goto lenerr;
 8018bb8:	bf00      	nop
 8018bba:	e002      	b.n	8018bc2 <icmp_input+0x21e>
    goto lenerr;
 8018bbc:	bf00      	nop
 8018bbe:	e000      	b.n	8018bc2 <icmp_input+0x21e>
        goto lenerr;
 8018bc0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018bc2:	6878      	ldr	r0, [r7, #4]
 8018bc4:	f7f6 fcb6 	bl	800f534 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018bc8:	e00a      	b.n	8018be0 <icmp_input+0x23c>
        goto icmperr;
 8018bca:	bf00      	nop
 8018bcc:	e004      	b.n	8018bd8 <icmp_input+0x234>
        goto icmperr;
 8018bce:	bf00      	nop
 8018bd0:	e002      	b.n	8018bd8 <icmp_input+0x234>
          goto icmperr;
 8018bd2:	bf00      	nop
 8018bd4:	e000      	b.n	8018bd8 <icmp_input+0x234>
          goto icmperr;
 8018bd6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f7f6 fcab 	bl	800f534 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018bde:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018be0:	3728      	adds	r7, #40	@ 0x28
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}
 8018be6:	bf00      	nop
 8018be8:	2000a2e8 	.word	0x2000a2e8
 8018bec:	2000a2fc 	.word	0x2000a2fc
 8018bf0:	080207ac 	.word	0x080207ac
 8018bf4:	080207e4 	.word	0x080207e4
 8018bf8:	0802081c 	.word	0x0802081c
 8018bfc:	08020844 	.word	0x08020844

08018c00 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b082      	sub	sp, #8
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
 8018c08:	460b      	mov	r3, r1
 8018c0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018c0c:	78fb      	ldrb	r3, [r7, #3]
 8018c0e:	461a      	mov	r2, r3
 8018c10:	2103      	movs	r1, #3
 8018c12:	6878      	ldr	r0, [r7, #4]
 8018c14:	f000 f814 	bl	8018c40 <icmp_send_response>
}
 8018c18:	bf00      	nop
 8018c1a:	3708      	adds	r7, #8
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}

08018c20 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
 8018c28:	460b      	mov	r3, r1
 8018c2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018c2c:	78fb      	ldrb	r3, [r7, #3]
 8018c2e:	461a      	mov	r2, r3
 8018c30:	210b      	movs	r1, #11
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f000 f804 	bl	8018c40 <icmp_send_response>
}
 8018c38:	bf00      	nop
 8018c3a:	3708      	adds	r7, #8
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}

08018c40 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b08c      	sub	sp, #48	@ 0x30
 8018c44:	af04      	add	r7, sp, #16
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	460b      	mov	r3, r1
 8018c4a:	70fb      	strb	r3, [r7, #3]
 8018c4c:	4613      	mov	r3, r2
 8018c4e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018c50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018c54:	2124      	movs	r1, #36	@ 0x24
 8018c56:	2022      	movs	r0, #34	@ 0x22
 8018c58:	f7f6 f984 	bl	800ef64 <pbuf_alloc>
 8018c5c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8018c5e:	69bb      	ldr	r3, [r7, #24]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d056      	beq.n	8018d12 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018c64:	69bb      	ldr	r3, [r7, #24]
 8018c66:	895b      	ldrh	r3, [r3, #10]
 8018c68:	2b23      	cmp	r3, #35	@ 0x23
 8018c6a:	d806      	bhi.n	8018c7a <icmp_send_response+0x3a>
 8018c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8018d1c <icmp_send_response+0xdc>)
 8018c6e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8018c72:	492b      	ldr	r1, [pc, #172]	@ (8018d20 <icmp_send_response+0xe0>)
 8018c74:	482b      	ldr	r0, [pc, #172]	@ (8018d24 <icmp_send_response+0xe4>)
 8018c76:	f002 fa9b 	bl	801b1b0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018c80:	69bb      	ldr	r3, [r7, #24]
 8018c82:	685b      	ldr	r3, [r3, #4]
 8018c84:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	78fa      	ldrb	r2, [r7, #3]
 8018c8a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018c8c:	693b      	ldr	r3, [r7, #16]
 8018c8e:	78ba      	ldrb	r2, [r7, #2]
 8018c90:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	2200      	movs	r2, #0
 8018c96:	711a      	strb	r2, [r3, #4]
 8018c98:	2200      	movs	r2, #0
 8018c9a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018c9c:	693b      	ldr	r3, [r7, #16]
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	719a      	strb	r2, [r3, #6]
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018ca6:	69bb      	ldr	r3, [r7, #24]
 8018ca8:	685b      	ldr	r3, [r3, #4]
 8018caa:	f103 0008 	add.w	r0, r3, #8
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	221c      	movs	r2, #28
 8018cb4:	4619      	mov	r1, r3
 8018cb6:	f002 fc9a 	bl	801b5ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	68db      	ldr	r3, [r3, #12]
 8018cbe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018cc0:	f107 030c 	add.w	r3, r7, #12
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f000 f82f 	bl	8018d28 <ip4_route>
 8018cca:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8018ccc:	69fb      	ldr	r3, [r7, #28]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d01b      	beq.n	8018d0a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	709a      	strb	r2, [r3, #2]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018cdc:	69bb      	ldr	r3, [r7, #24]
 8018cde:	895b      	ldrh	r3, [r3, #10]
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	6938      	ldr	r0, [r7, #16]
 8018ce4:	f7f5 f84c 	bl	800dd80 <inet_chksum>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	461a      	mov	r2, r3
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018cf0:	f107 020c 	add.w	r2, r7, #12
 8018cf4:	69fb      	ldr	r3, [r7, #28]
 8018cf6:	9302      	str	r3, [sp, #8]
 8018cf8:	2301      	movs	r3, #1
 8018cfa:	9301      	str	r3, [sp, #4]
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	9300      	str	r3, [sp, #0]
 8018d00:	23ff      	movs	r3, #255	@ 0xff
 8018d02:	2100      	movs	r1, #0
 8018d04:	69b8      	ldr	r0, [r7, #24]
 8018d06:	f000 f9f7 	bl	80190f8 <ip4_output_if>
  }
  pbuf_free(q);
 8018d0a:	69b8      	ldr	r0, [r7, #24]
 8018d0c:	f7f6 fc12 	bl	800f534 <pbuf_free>
 8018d10:	e000      	b.n	8018d14 <icmp_send_response+0xd4>
    return;
 8018d12:	bf00      	nop
}
 8018d14:	3720      	adds	r7, #32
 8018d16:	46bd      	mov	sp, r7
 8018d18:	bd80      	pop	{r7, pc}
 8018d1a:	bf00      	nop
 8018d1c:	080207ac 	.word	0x080207ac
 8018d20:	08020878 	.word	0x08020878
 8018d24:	0802081c 	.word	0x0802081c

08018d28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018d28:	b480      	push	{r7}
 8018d2a:	b085      	sub	sp, #20
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018d30:	4b33      	ldr	r3, [pc, #204]	@ (8018e00 <ip4_route+0xd8>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	60fb      	str	r3, [r7, #12]
 8018d36:	e036      	b.n	8018da6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018d3e:	f003 0301 	and.w	r3, r3, #1
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d02b      	beq.n	8018da0 <ip4_route+0x78>
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018d4e:	089b      	lsrs	r3, r3, #2
 8018d50:	f003 0301 	and.w	r3, r3, #1
 8018d54:	b2db      	uxtb	r3, r3
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d022      	beq.n	8018da0 <ip4_route+0x78>
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	3304      	adds	r3, #4
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d01d      	beq.n	8018da0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681a      	ldr	r2, [r3, #0]
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	3304      	adds	r3, #4
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	405a      	eors	r2, r3
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	3308      	adds	r3, #8
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	4013      	ands	r3, r2
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d101      	bne.n	8018d80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	e038      	b.n	8018df2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018d86:	f003 0302 	and.w	r3, r3, #2
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d108      	bne.n	8018da0 <ip4_route+0x78>
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	330c      	adds	r3, #12
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	d101      	bne.n	8018da0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	e028      	b.n	8018df2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	60fb      	str	r3, [r7, #12]
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d1c5      	bne.n	8018d38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018dac:	4b15      	ldr	r3, [pc, #84]	@ (8018e04 <ip4_route+0xdc>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d01a      	beq.n	8018dea <ip4_route+0xc2>
 8018db4:	4b13      	ldr	r3, [pc, #76]	@ (8018e04 <ip4_route+0xdc>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018dbc:	f003 0301 	and.w	r3, r3, #1
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d012      	beq.n	8018dea <ip4_route+0xc2>
 8018dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8018e04 <ip4_route+0xdc>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018dcc:	f003 0304 	and.w	r3, r3, #4
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d00a      	beq.n	8018dea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8018e04 <ip4_route+0xdc>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	3304      	adds	r3, #4
 8018dda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d004      	beq.n	8018dea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018de8:	d101      	bne.n	8018dee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018dea:	2300      	movs	r3, #0
 8018dec:	e001      	b.n	8018df2 <ip4_route+0xca>
  }

  return netif_default;
 8018dee:	4b05      	ldr	r3, [pc, #20]	@ (8018e04 <ip4_route+0xdc>)
 8018df0:	681b      	ldr	r3, [r3, #0]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3714      	adds	r7, #20
 8018df6:	46bd      	mov	sp, r7
 8018df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfc:	4770      	bx	lr
 8018dfe:	bf00      	nop
 8018e00:	20013d50 	.word	0x20013d50
 8018e04:	20013d54 	.word	0x20013d54

08018e08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018e16:	f003 0301 	and.w	r3, r3, #1
 8018e1a:	b2db      	uxtb	r3, r3
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d016      	beq.n	8018e4e <ip4_input_accept+0x46>
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	3304      	adds	r3, #4
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d011      	beq.n	8018e4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8018e58 <ip4_input_accept+0x50>)
 8018e2c:	695a      	ldr	r2, [r3, #20]
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	3304      	adds	r3, #4
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	429a      	cmp	r2, r3
 8018e36:	d008      	beq.n	8018e4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018e38:	4b07      	ldr	r3, [pc, #28]	@ (8018e58 <ip4_input_accept+0x50>)
 8018e3a:	695b      	ldr	r3, [r3, #20]
 8018e3c:	6879      	ldr	r1, [r7, #4]
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f000 fa98 	bl	8019374 <ip4_addr_isbroadcast_u32>
 8018e44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d001      	beq.n	8018e4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	e000      	b.n	8018e50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018e4e:	2300      	movs	r3, #0
}
 8018e50:	4618      	mov	r0, r3
 8018e52:	3708      	adds	r7, #8
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bd80      	pop	{r7, pc}
 8018e58:	2000a2e8 	.word	0x2000a2e8

08018e5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b088      	sub	sp, #32
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
 8018e64:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018e66:	2301      	movs	r3, #1
 8018e68:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	685b      	ldr	r3, [r3, #4]
 8018e6e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8018e70:	693b      	ldr	r3, [r7, #16]
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	091b      	lsrs	r3, r3, #4
 8018e76:	b2db      	uxtb	r3, r3
 8018e78:	2b04      	cmp	r3, #4
 8018e7a:	d004      	beq.n	8018e86 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018e7c:	6878      	ldr	r0, [r7, #4]
 8018e7e:	f7f6 fb59 	bl	800f534 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018e82:	2300      	movs	r3, #0
 8018e84:	e130      	b.n	80190e8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018e86:	693b      	ldr	r3, [r7, #16]
 8018e88:	781b      	ldrb	r3, [r3, #0]
 8018e8a:	f003 030f 	and.w	r3, r3, #15
 8018e8e:	b2db      	uxtb	r3, r3
 8018e90:	009b      	lsls	r3, r3, #2
 8018e92:	b2db      	uxtb	r3, r3
 8018e94:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	885b      	ldrh	r3, [r3, #2]
 8018e9a:	b29b      	uxth	r3, r3
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f7f4 fe27 	bl	800daf0 <lwip_htons>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	891b      	ldrh	r3, [r3, #8]
 8018eaa:	89ba      	ldrh	r2, [r7, #12]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d204      	bcs.n	8018eba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018eb0:	89bb      	ldrh	r3, [r7, #12]
 8018eb2:	4619      	mov	r1, r3
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f7f6 f9b7 	bl	800f228 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	895b      	ldrh	r3, [r3, #10]
 8018ebe:	89fa      	ldrh	r2, [r7, #14]
 8018ec0:	429a      	cmp	r2, r3
 8018ec2:	d807      	bhi.n	8018ed4 <ip4_input+0x78>
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	891b      	ldrh	r3, [r3, #8]
 8018ec8:	89ba      	ldrh	r2, [r7, #12]
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d802      	bhi.n	8018ed4 <ip4_input+0x78>
 8018ece:	89fb      	ldrh	r3, [r7, #14]
 8018ed0:	2b13      	cmp	r3, #19
 8018ed2:	d804      	bhi.n	8018ede <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7f6 fb2d 	bl	800f534 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018eda:	2300      	movs	r3, #0
 8018edc:	e104      	b.n	80190e8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8018ede:	89fb      	ldrh	r3, [r7, #14]
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	6938      	ldr	r0, [r7, #16]
 8018ee4:	f7f4 ff4c 	bl	800dd80 <inet_chksum>
 8018ee8:	4603      	mov	r3, r0
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d004      	beq.n	8018ef8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8018eee:	6878      	ldr	r0, [r7, #4]
 8018ef0:	f7f6 fb20 	bl	800f534 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	e0f7      	b.n	80190e8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018ef8:	693b      	ldr	r3, [r7, #16]
 8018efa:	691b      	ldr	r3, [r3, #16]
 8018efc:	4a7c      	ldr	r2, [pc, #496]	@ (80190f0 <ip4_input+0x294>)
 8018efe:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018f00:	693b      	ldr	r3, [r7, #16]
 8018f02:	68db      	ldr	r3, [r3, #12]
 8018f04:	4a7a      	ldr	r2, [pc, #488]	@ (80190f0 <ip4_input+0x294>)
 8018f06:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018f08:	4b79      	ldr	r3, [pc, #484]	@ (80190f0 <ip4_input+0x294>)
 8018f0a:	695b      	ldr	r3, [r3, #20]
 8018f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018f10:	2be0      	cmp	r3, #224	@ 0xe0
 8018f12:	d112      	bne.n	8018f3a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018f1a:	f003 0301 	and.w	r3, r3, #1
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d007      	beq.n	8018f34 <ip4_input+0xd8>
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	3304      	adds	r3, #4
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d002      	beq.n	8018f34 <ip4_input+0xd8>
      netif = inp;
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	61fb      	str	r3, [r7, #28]
 8018f32:	e02a      	b.n	8018f8a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018f34:	2300      	movs	r3, #0
 8018f36:	61fb      	str	r3, [r7, #28]
 8018f38:	e027      	b.n	8018f8a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018f3a:	6838      	ldr	r0, [r7, #0]
 8018f3c:	f7ff ff64 	bl	8018e08 <ip4_input_accept>
 8018f40:	4603      	mov	r3, r0
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d002      	beq.n	8018f4c <ip4_input+0xf0>
      netif = inp;
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	61fb      	str	r3, [r7, #28]
 8018f4a:	e01e      	b.n	8018f8a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018f50:	4b67      	ldr	r3, [pc, #412]	@ (80190f0 <ip4_input+0x294>)
 8018f52:	695b      	ldr	r3, [r3, #20]
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8018f58:	d017      	beq.n	8018f8a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018f5a:	4b66      	ldr	r3, [pc, #408]	@ (80190f4 <ip4_input+0x298>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	61fb      	str	r3, [r7, #28]
 8018f60:	e00e      	b.n	8018f80 <ip4_input+0x124>
          if (netif == inp) {
 8018f62:	69fa      	ldr	r2, [r7, #28]
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d006      	beq.n	8018f78 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018f6a:	69f8      	ldr	r0, [r7, #28]
 8018f6c:	f7ff ff4c 	bl	8018e08 <ip4_input_accept>
 8018f70:	4603      	mov	r3, r0
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d108      	bne.n	8018f88 <ip4_input+0x12c>
 8018f76:	e000      	b.n	8018f7a <ip4_input+0x11e>
            continue;
 8018f78:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018f7a:	69fb      	ldr	r3, [r7, #28]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	61fb      	str	r3, [r7, #28]
 8018f80:	69fb      	ldr	r3, [r7, #28]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d1ed      	bne.n	8018f62 <ip4_input+0x106>
 8018f86:	e000      	b.n	8018f8a <ip4_input+0x12e>
            break;
 8018f88:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018f8a:	69fb      	ldr	r3, [r7, #28]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d111      	bne.n	8018fb4 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	7a5b      	ldrb	r3, [r3, #9]
 8018f94:	2b11      	cmp	r3, #17
 8018f96:	d10d      	bne.n	8018fb4 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018f98:	89fb      	ldrh	r3, [r7, #14]
 8018f9a:	693a      	ldr	r2, [r7, #16]
 8018f9c:	4413      	add	r3, r2
 8018f9e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018fa0:	69bb      	ldr	r3, [r7, #24]
 8018fa2:	885b      	ldrh	r3, [r3, #2]
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8018faa:	d103      	bne.n	8018fb4 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018fb4:	697b      	ldr	r3, [r7, #20]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d017      	beq.n	8018fea <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018fba:	4b4d      	ldr	r3, [pc, #308]	@ (80190f0 <ip4_input+0x294>)
 8018fbc:	691b      	ldr	r3, [r3, #16]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d013      	beq.n	8018fea <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80190f0 <ip4_input+0x294>)
 8018fc4:	691b      	ldr	r3, [r3, #16]
 8018fc6:	6839      	ldr	r1, [r7, #0]
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f000 f9d3 	bl	8019374 <ip4_addr_isbroadcast_u32>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d105      	bne.n	8018fe0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018fd4:	4b46      	ldr	r3, [pc, #280]	@ (80190f0 <ip4_input+0x294>)
 8018fd6:	691b      	ldr	r3, [r3, #16]
 8018fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018fdc:	2be0      	cmp	r3, #224	@ 0xe0
 8018fde:	d104      	bne.n	8018fea <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f7f6 faa7 	bl	800f534 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	e07e      	b.n	80190e8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018fea:	69fb      	ldr	r3, [r7, #28]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d104      	bne.n	8018ffa <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f7f6 fa9f 	bl	800f534 <pbuf_free>
    return ERR_OK;
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	e076      	b.n	80190e8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018ffa:	693b      	ldr	r3, [r7, #16]
 8018ffc:	88db      	ldrh	r3, [r3, #6]
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	461a      	mov	r2, r3
 8019002:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019006:	4013      	ands	r3, r2
 8019008:	2b00      	cmp	r3, #0
 801900a:	d00b      	beq.n	8019024 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801900c:	6878      	ldr	r0, [r7, #4]
 801900e:	f000 fcf7 	bl	8019a00 <ip4_reass>
 8019012:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d101      	bne.n	801901e <ip4_input+0x1c2>
      return ERR_OK;
 801901a:	2300      	movs	r3, #0
 801901c:	e064      	b.n	80190e8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	685b      	ldr	r3, [r3, #4]
 8019022:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019024:	4a32      	ldr	r2, [pc, #200]	@ (80190f0 <ip4_input+0x294>)
 8019026:	69fb      	ldr	r3, [r7, #28]
 8019028:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801902a:	4a31      	ldr	r2, [pc, #196]	@ (80190f0 <ip4_input+0x294>)
 801902c:	683b      	ldr	r3, [r7, #0]
 801902e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019030:	4a2f      	ldr	r2, [pc, #188]	@ (80190f0 <ip4_input+0x294>)
 8019032:	693b      	ldr	r3, [r7, #16]
 8019034:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	f003 030f 	and.w	r3, r3, #15
 801903e:	b2db      	uxtb	r3, r3
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	b2db      	uxtb	r3, r3
 8019044:	461a      	mov	r2, r3
 8019046:	4b2a      	ldr	r3, [pc, #168]	@ (80190f0 <ip4_input+0x294>)
 8019048:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801904a:	89fb      	ldrh	r3, [r7, #14]
 801904c:	4619      	mov	r1, r3
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f7f6 f9ea 	bl	800f428 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019054:	693b      	ldr	r3, [r7, #16]
 8019056:	7a5b      	ldrb	r3, [r3, #9]
 8019058:	2b11      	cmp	r3, #17
 801905a:	d006      	beq.n	801906a <ip4_input+0x20e>
 801905c:	2b11      	cmp	r3, #17
 801905e:	dc13      	bgt.n	8019088 <ip4_input+0x22c>
 8019060:	2b01      	cmp	r3, #1
 8019062:	d00c      	beq.n	801907e <ip4_input+0x222>
 8019064:	2b06      	cmp	r3, #6
 8019066:	d005      	beq.n	8019074 <ip4_input+0x218>
 8019068:	e00e      	b.n	8019088 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801906a:	6839      	ldr	r1, [r7, #0]
 801906c:	6878      	ldr	r0, [r7, #4]
 801906e:	f7fc f973 	bl	8015358 <udp_input>
        break;
 8019072:	e026      	b.n	80190c2 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019074:	6839      	ldr	r1, [r7, #0]
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	f7f8 f93e 	bl	80112f8 <tcp_input>
        break;
 801907c:	e021      	b.n	80190c2 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801907e:	6839      	ldr	r1, [r7, #0]
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f7ff fc8f 	bl	80189a4 <icmp_input>
        break;
 8019086:	e01c      	b.n	80190c2 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019088:	4b19      	ldr	r3, [pc, #100]	@ (80190f0 <ip4_input+0x294>)
 801908a:	695b      	ldr	r3, [r3, #20]
 801908c:	69f9      	ldr	r1, [r7, #28]
 801908e:	4618      	mov	r0, r3
 8019090:	f000 f970 	bl	8019374 <ip4_addr_isbroadcast_u32>
 8019094:	4603      	mov	r3, r0
 8019096:	2b00      	cmp	r3, #0
 8019098:	d10f      	bne.n	80190ba <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801909a:	4b15      	ldr	r3, [pc, #84]	@ (80190f0 <ip4_input+0x294>)
 801909c:	695b      	ldr	r3, [r3, #20]
 801909e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80190a2:	2be0      	cmp	r3, #224	@ 0xe0
 80190a4:	d009      	beq.n	80190ba <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80190a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80190aa:	4619      	mov	r1, r3
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	f7f6 fa2e 	bl	800f50e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80190b2:	2102      	movs	r1, #2
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	f7ff fda3 	bl	8018c00 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80190ba:	6878      	ldr	r0, [r7, #4]
 80190bc:	f7f6 fa3a 	bl	800f534 <pbuf_free>
        break;
 80190c0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80190c2:	4b0b      	ldr	r3, [pc, #44]	@ (80190f0 <ip4_input+0x294>)
 80190c4:	2200      	movs	r2, #0
 80190c6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80190c8:	4b09      	ldr	r3, [pc, #36]	@ (80190f0 <ip4_input+0x294>)
 80190ca:	2200      	movs	r2, #0
 80190cc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80190ce:	4b08      	ldr	r3, [pc, #32]	@ (80190f0 <ip4_input+0x294>)
 80190d0:	2200      	movs	r2, #0
 80190d2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80190d4:	4b06      	ldr	r3, [pc, #24]	@ (80190f0 <ip4_input+0x294>)
 80190d6:	2200      	movs	r2, #0
 80190d8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80190da:	4b05      	ldr	r3, [pc, #20]	@ (80190f0 <ip4_input+0x294>)
 80190dc:	2200      	movs	r2, #0
 80190de:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80190e0:	4b03      	ldr	r3, [pc, #12]	@ (80190f0 <ip4_input+0x294>)
 80190e2:	2200      	movs	r2, #0
 80190e4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80190e6:	2300      	movs	r3, #0
}
 80190e8:	4618      	mov	r0, r3
 80190ea:	3720      	adds	r7, #32
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	2000a2e8 	.word	0x2000a2e8
 80190f4:	20013d50 	.word	0x20013d50

080190f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b08a      	sub	sp, #40	@ 0x28
 80190fc:	af04      	add	r7, sp, #16
 80190fe:	60f8      	str	r0, [r7, #12]
 8019100:	60b9      	str	r1, [r7, #8]
 8019102:	607a      	str	r2, [r7, #4]
 8019104:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d009      	beq.n	8019124 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d003      	beq.n	801911e <ip4_output_if+0x26>
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d102      	bne.n	8019124 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019120:	3304      	adds	r3, #4
 8019122:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019124:	78fa      	ldrb	r2, [r7, #3]
 8019126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019128:	9302      	str	r3, [sp, #8]
 801912a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801912e:	9301      	str	r3, [sp, #4]
 8019130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019134:	9300      	str	r3, [sp, #0]
 8019136:	4613      	mov	r3, r2
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	6979      	ldr	r1, [r7, #20]
 801913c:	68f8      	ldr	r0, [r7, #12]
 801913e:	f000 f805 	bl	801914c <ip4_output_if_src>
 8019142:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019144:	4618      	mov	r0, r3
 8019146:	3718      	adds	r7, #24
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b088      	sub	sp, #32
 8019150:	af00      	add	r7, sp, #0
 8019152:	60f8      	str	r0, [r7, #12]
 8019154:	60b9      	str	r1, [r7, #8]
 8019156:	607a      	str	r2, [r7, #4]
 8019158:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801915a:	2300      	movs	r3, #0
 801915c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	7b9b      	ldrb	r3, [r3, #14]
 8019162:	2b01      	cmp	r3, #1
 8019164:	d006      	beq.n	8019174 <ip4_output_if_src+0x28>
 8019166:	4b7d      	ldr	r3, [pc, #500]	@ (801935c <ip4_output_if_src+0x210>)
 8019168:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801916c:	497c      	ldr	r1, [pc, #496]	@ (8019360 <ip4_output_if_src+0x214>)
 801916e:	487d      	ldr	r0, [pc, #500]	@ (8019364 <ip4_output_if_src+0x218>)
 8019170:	f002 f81e 	bl	801b1b0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2b00      	cmp	r3, #0
 8019178:	f000 80c4 	beq.w	8019304 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801917c:	2314      	movs	r3, #20
 801917e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019180:	2114      	movs	r1, #20
 8019182:	68f8      	ldr	r0, [r7, #12]
 8019184:	f7f6 f940 	bl	800f408 <pbuf_add_header>
 8019188:	4603      	mov	r3, r0
 801918a:	2b00      	cmp	r3, #0
 801918c:	d002      	beq.n	8019194 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801918e:	f06f 0301 	mvn.w	r3, #1
 8019192:	e0df      	b.n	8019354 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	685b      	ldr	r3, [r3, #4]
 8019198:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	895b      	ldrh	r3, [r3, #10]
 801919e:	2b13      	cmp	r3, #19
 80191a0:	d806      	bhi.n	80191b0 <ip4_output_if_src+0x64>
 80191a2:	4b6e      	ldr	r3, [pc, #440]	@ (801935c <ip4_output_if_src+0x210>)
 80191a4:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80191a8:	496f      	ldr	r1, [pc, #444]	@ (8019368 <ip4_output_if_src+0x21c>)
 80191aa:	486e      	ldr	r0, [pc, #440]	@ (8019364 <ip4_output_if_src+0x218>)
 80191ac:	f002 f800 	bl	801b1b0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80191b0:	69bb      	ldr	r3, [r7, #24]
 80191b2:	78fa      	ldrb	r2, [r7, #3]
 80191b4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80191bc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80191be:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80191c2:	78fb      	ldrb	r3, [r7, #3]
 80191c4:	021b      	lsls	r3, r3, #8
 80191c6:	4313      	orrs	r3, r2
 80191c8:	021b      	lsls	r3, r3, #8
 80191ca:	b21a      	sxth	r2, r3
 80191cc:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80191d0:	78fb      	ldrb	r3, [r7, #3]
 80191d2:	021b      	lsls	r3, r3, #8
 80191d4:	430b      	orrs	r3, r1
 80191d6:	121b      	asrs	r3, r3, #8
 80191d8:	b21b      	sxth	r3, r3
 80191da:	b2db      	uxtb	r3, r3
 80191dc:	b21b      	sxth	r3, r3
 80191de:	4313      	orrs	r3, r2
 80191e0:	b21b      	sxth	r3, r3
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	461a      	mov	r2, r3
 80191e6:	69fb      	ldr	r3, [r7, #28]
 80191e8:	4413      	add	r3, r2
 80191ea:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681a      	ldr	r2, [r3, #0]
 80191f0:	69bb      	ldr	r3, [r7, #24]
 80191f2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80191f4:	69bb      	ldr	r3, [r7, #24]
 80191f6:	691b      	ldr	r3, [r3, #16]
 80191f8:	b29b      	uxth	r3, r3
 80191fa:	69fa      	ldr	r2, [r7, #28]
 80191fc:	4413      	add	r3, r2
 80191fe:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8019200:	69bb      	ldr	r3, [r7, #24]
 8019202:	691b      	ldr	r3, [r3, #16]
 8019204:	0c1b      	lsrs	r3, r3, #16
 8019206:	69fa      	ldr	r2, [r7, #28]
 8019208:	4413      	add	r3, r2
 801920a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801920c:	8afb      	ldrh	r3, [r7, #22]
 801920e:	089b      	lsrs	r3, r3, #2
 8019210:	b29b      	uxth	r3, r3
 8019212:	b2db      	uxtb	r3, r3
 8019214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019218:	b2da      	uxtb	r2, r3
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801921e:	69bb      	ldr	r3, [r7, #24]
 8019220:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019224:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8019226:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801922a:	69bb      	ldr	r3, [r7, #24]
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	021b      	lsls	r3, r3, #8
 8019230:	4313      	orrs	r3, r2
 8019232:	021b      	lsls	r3, r3, #8
 8019234:	b21a      	sxth	r2, r3
 8019236:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 801923a:	69bb      	ldr	r3, [r7, #24]
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	021b      	lsls	r3, r3, #8
 8019240:	430b      	orrs	r3, r1
 8019242:	121b      	asrs	r3, r3, #8
 8019244:	b21b      	sxth	r3, r3
 8019246:	b2db      	uxtb	r3, r3
 8019248:	b21b      	sxth	r3, r3
 801924a:	4313      	orrs	r3, r2
 801924c:	b21b      	sxth	r3, r3
 801924e:	b29b      	uxth	r3, r3
 8019250:	461a      	mov	r2, r3
 8019252:	69fb      	ldr	r3, [r7, #28]
 8019254:	4413      	add	r3, r2
 8019256:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	891b      	ldrh	r3, [r3, #8]
 801925c:	4618      	mov	r0, r3
 801925e:	f7f4 fc47 	bl	800daf0 <lwip_htons>
 8019262:	4603      	mov	r3, r0
 8019264:	461a      	mov	r2, r3
 8019266:	69bb      	ldr	r3, [r7, #24]
 8019268:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801926a:	69bb      	ldr	r3, [r7, #24]
 801926c:	885b      	ldrh	r3, [r3, #2]
 801926e:	b29b      	uxth	r3, r3
 8019270:	461a      	mov	r2, r3
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	4413      	add	r3, r2
 8019276:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019278:	69bb      	ldr	r3, [r7, #24]
 801927a:	2200      	movs	r2, #0
 801927c:	719a      	strb	r2, [r3, #6]
 801927e:	2200      	movs	r2, #0
 8019280:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019282:	4b3a      	ldr	r3, [pc, #232]	@ (801936c <ip4_output_if_src+0x220>)
 8019284:	881b      	ldrh	r3, [r3, #0]
 8019286:	4618      	mov	r0, r3
 8019288:	f7f4 fc32 	bl	800daf0 <lwip_htons>
 801928c:	4603      	mov	r3, r0
 801928e:	461a      	mov	r2, r3
 8019290:	69bb      	ldr	r3, [r7, #24]
 8019292:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8019294:	69bb      	ldr	r3, [r7, #24]
 8019296:	889b      	ldrh	r3, [r3, #4]
 8019298:	b29b      	uxth	r3, r3
 801929a:	461a      	mov	r2, r3
 801929c:	69fb      	ldr	r3, [r7, #28]
 801929e:	4413      	add	r3, r2
 80192a0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80192a2:	4b32      	ldr	r3, [pc, #200]	@ (801936c <ip4_output_if_src+0x220>)
 80192a4:	881b      	ldrh	r3, [r3, #0]
 80192a6:	3301      	adds	r3, #1
 80192a8:	b29a      	uxth	r2, r3
 80192aa:	4b30      	ldr	r3, [pc, #192]	@ (801936c <ip4_output_if_src+0x220>)
 80192ac:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80192ae:	68bb      	ldr	r3, [r7, #8]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d104      	bne.n	80192be <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80192b4:	4b2e      	ldr	r3, [pc, #184]	@ (8019370 <ip4_output_if_src+0x224>)
 80192b6:	681a      	ldr	r2, [r3, #0]
 80192b8:	69bb      	ldr	r3, [r7, #24]
 80192ba:	60da      	str	r2, [r3, #12]
 80192bc:	e003      	b.n	80192c6 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80192be:	68bb      	ldr	r3, [r7, #8]
 80192c0:	681a      	ldr	r2, [r3, #0]
 80192c2:	69bb      	ldr	r3, [r7, #24]
 80192c4:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80192c6:	69bb      	ldr	r3, [r7, #24]
 80192c8:	68db      	ldr	r3, [r3, #12]
 80192ca:	b29b      	uxth	r3, r3
 80192cc:	69fa      	ldr	r2, [r7, #28]
 80192ce:	4413      	add	r3, r2
 80192d0:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80192d2:	69bb      	ldr	r3, [r7, #24]
 80192d4:	68db      	ldr	r3, [r3, #12]
 80192d6:	0c1b      	lsrs	r3, r3, #16
 80192d8:	69fa      	ldr	r2, [r7, #28]
 80192da:	4413      	add	r3, r2
 80192dc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80192de:	69fb      	ldr	r3, [r7, #28]
 80192e0:	0c1a      	lsrs	r2, r3, #16
 80192e2:	69fb      	ldr	r3, [r7, #28]
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	4413      	add	r3, r2
 80192e8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80192ea:	69fb      	ldr	r3, [r7, #28]
 80192ec:	0c1b      	lsrs	r3, r3, #16
 80192ee:	69fa      	ldr	r2, [r7, #28]
 80192f0:	4413      	add	r3, r2
 80192f2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80192f4:	69fb      	ldr	r3, [r7, #28]
 80192f6:	43db      	mvns	r3, r3
 80192f8:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80192fa:	69fb      	ldr	r3, [r7, #28]
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	69bb      	ldr	r3, [r7, #24]
 8019300:	815a      	strh	r2, [r3, #10]
 8019302:	e00f      	b.n	8019324 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	895b      	ldrh	r3, [r3, #10]
 8019308:	2b13      	cmp	r3, #19
 801930a:	d802      	bhi.n	8019312 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801930c:	f06f 0301 	mvn.w	r3, #1
 8019310:	e020      	b.n	8019354 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	685b      	ldr	r3, [r3, #4]
 8019316:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019318:	69bb      	ldr	r3, [r7, #24]
 801931a:	691b      	ldr	r3, [r3, #16]
 801931c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801931e:	f107 0310 	add.w	r3, r7, #16
 8019322:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019328:	2b00      	cmp	r3, #0
 801932a:	d00c      	beq.n	8019346 <ip4_output_if_src+0x1fa>
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	891a      	ldrh	r2, [r3, #8]
 8019330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019334:	429a      	cmp	r2, r3
 8019336:	d906      	bls.n	8019346 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8019338:	687a      	ldr	r2, [r7, #4]
 801933a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801933c:	68f8      	ldr	r0, [r7, #12]
 801933e:	f000 fd5b 	bl	8019df8 <ip4_frag>
 8019342:	4603      	mov	r3, r0
 8019344:	e006      	b.n	8019354 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019348:	695b      	ldr	r3, [r3, #20]
 801934a:	687a      	ldr	r2, [r7, #4]
 801934c:	68f9      	ldr	r1, [r7, #12]
 801934e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019350:	4798      	blx	r3
 8019352:	4603      	mov	r3, r0
}
 8019354:	4618      	mov	r0, r3
 8019356:	3720      	adds	r7, #32
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}
 801935c:	080208a4 	.word	0x080208a4
 8019360:	080208d8 	.word	0x080208d8
 8019364:	080208e4 	.word	0x080208e4
 8019368:	0802090c 	.word	0x0802090c
 801936c:	20013ee6 	.word	0x20013ee6
 8019370:	0806c9ec 	.word	0x0806c9ec

08019374 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019374:	b480      	push	{r7}
 8019376:	b085      	sub	sp, #20
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019388:	d002      	beq.n	8019390 <ip4_addr_isbroadcast_u32+0x1c>
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d101      	bne.n	8019394 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019390:	2301      	movs	r3, #1
 8019392:	e02a      	b.n	80193ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801939a:	f003 0302 	and.w	r3, r3, #2
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d101      	bne.n	80193a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80193a2:	2300      	movs	r3, #0
 80193a4:	e021      	b.n	80193ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	3304      	adds	r3, #4
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	687a      	ldr	r2, [r7, #4]
 80193ae:	429a      	cmp	r2, r3
 80193b0:	d101      	bne.n	80193b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80193b2:	2300      	movs	r3, #0
 80193b4:	e019      	b.n	80193ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80193b6:	68fa      	ldr	r2, [r7, #12]
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	3304      	adds	r3, #4
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	405a      	eors	r2, r3
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	3308      	adds	r3, #8
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	4013      	ands	r3, r2
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d10d      	bne.n	80193e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	3308      	adds	r3, #8
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	43da      	mvns	r2, r3
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	3308      	adds	r3, #8
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d101      	bne.n	80193e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80193e4:	2301      	movs	r3, #1
 80193e6:	e000      	b.n	80193ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80193e8:	2300      	movs	r3, #0
  }
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	3714      	adds	r7, #20
 80193ee:	46bd      	mov	sp, r7
 80193f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f4:	4770      	bx	lr
	...

080193f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b084      	sub	sp, #16
 80193fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80193fe:	2300      	movs	r3, #0
 8019400:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019402:	4b12      	ldr	r3, [pc, #72]	@ (801944c <ip_reass_tmr+0x54>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019408:	e018      	b.n	801943c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	7fdb      	ldrb	r3, [r3, #31]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d00b      	beq.n	801942a <ip_reass_tmr+0x32>
      r->timer--;
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	7fdb      	ldrb	r3, [r3, #31]
 8019416:	3b01      	subs	r3, #1
 8019418:	b2da      	uxtb	r2, r3
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	60fb      	str	r3, [r7, #12]
 8019428:	e008      	b.n	801943c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019434:	68b9      	ldr	r1, [r7, #8]
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f000 f80a 	bl	8019450 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d1e3      	bne.n	801940a <ip_reass_tmr+0x12>
    }
  }
}
 8019442:	bf00      	nop
 8019444:	bf00      	nop
 8019446:	3710      	adds	r7, #16
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	20013ee8 	.word	0x20013ee8

08019450 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b088      	sub	sp, #32
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
 8019458:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801945a:	2300      	movs	r3, #0
 801945c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801945e:	683a      	ldr	r2, [r7, #0]
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	429a      	cmp	r2, r3
 8019464:	d105      	bne.n	8019472 <ip_reass_free_complete_datagram+0x22>
 8019466:	4b45      	ldr	r3, [pc, #276]	@ (801957c <ip_reass_free_complete_datagram+0x12c>)
 8019468:	22ab      	movs	r2, #171	@ 0xab
 801946a:	4945      	ldr	r1, [pc, #276]	@ (8019580 <ip_reass_free_complete_datagram+0x130>)
 801946c:	4845      	ldr	r0, [pc, #276]	@ (8019584 <ip_reass_free_complete_datagram+0x134>)
 801946e:	f001 fe9f 	bl	801b1b0 <iprintf>
  if (prev != NULL) {
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d00a      	beq.n	801948e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	687a      	ldr	r2, [r7, #4]
 801947e:	429a      	cmp	r2, r3
 8019480:	d005      	beq.n	801948e <ip_reass_free_complete_datagram+0x3e>
 8019482:	4b3e      	ldr	r3, [pc, #248]	@ (801957c <ip_reass_free_complete_datagram+0x12c>)
 8019484:	22ad      	movs	r2, #173	@ 0xad
 8019486:	4940      	ldr	r1, [pc, #256]	@ (8019588 <ip_reass_free_complete_datagram+0x138>)
 8019488:	483e      	ldr	r0, [pc, #248]	@ (8019584 <ip_reass_free_complete_datagram+0x134>)
 801948a:	f001 fe91 	bl	801b1b0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	685b      	ldr	r3, [r3, #4]
 8019492:	685b      	ldr	r3, [r3, #4]
 8019494:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	889b      	ldrh	r3, [r3, #4]
 801949a:	b29b      	uxth	r3, r3
 801949c:	2b00      	cmp	r3, #0
 801949e:	d12a      	bne.n	80194f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	685b      	ldr	r3, [r3, #4]
 80194a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80194a6:	697b      	ldr	r3, [r7, #20]
 80194a8:	681a      	ldr	r2, [r3, #0]
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	6858      	ldr	r0, [r3, #4]
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	3308      	adds	r3, #8
 80194b6:	2214      	movs	r2, #20
 80194b8:	4619      	mov	r1, r3
 80194ba:	f002 f898 	bl	801b5ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80194be:	2101      	movs	r1, #1
 80194c0:	69b8      	ldr	r0, [r7, #24]
 80194c2:	f7ff fbad 	bl	8018c20 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80194c6:	69b8      	ldr	r0, [r7, #24]
 80194c8:	f7f6 f8c2 	bl	800f650 <pbuf_clen>
 80194cc:	4603      	mov	r3, r0
 80194ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80194d0:	8bfa      	ldrh	r2, [r7, #30]
 80194d2:	8a7b      	ldrh	r3, [r7, #18]
 80194d4:	4413      	add	r3, r2
 80194d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80194da:	db05      	blt.n	80194e8 <ip_reass_free_complete_datagram+0x98>
 80194dc:	4b27      	ldr	r3, [pc, #156]	@ (801957c <ip_reass_free_complete_datagram+0x12c>)
 80194de:	22bc      	movs	r2, #188	@ 0xbc
 80194e0:	492a      	ldr	r1, [pc, #168]	@ (801958c <ip_reass_free_complete_datagram+0x13c>)
 80194e2:	4828      	ldr	r0, [pc, #160]	@ (8019584 <ip_reass_free_complete_datagram+0x134>)
 80194e4:	f001 fe64 	bl	801b1b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80194e8:	8bfa      	ldrh	r2, [r7, #30]
 80194ea:	8a7b      	ldrh	r3, [r7, #18]
 80194ec:	4413      	add	r3, r2
 80194ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80194f0:	69b8      	ldr	r0, [r7, #24]
 80194f2:	f7f6 f81f 	bl	800f534 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	685b      	ldr	r3, [r3, #4]
 80194fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80194fc:	e01f      	b.n	801953e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80194fe:	69bb      	ldr	r3, [r7, #24]
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019504:	69bb      	ldr	r3, [r7, #24]
 8019506:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801950e:	68f8      	ldr	r0, [r7, #12]
 8019510:	f7f6 f89e 	bl	800f650 <pbuf_clen>
 8019514:	4603      	mov	r3, r0
 8019516:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019518:	8bfa      	ldrh	r2, [r7, #30]
 801951a:	8a7b      	ldrh	r3, [r7, #18]
 801951c:	4413      	add	r3, r2
 801951e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019522:	db05      	blt.n	8019530 <ip_reass_free_complete_datagram+0xe0>
 8019524:	4b15      	ldr	r3, [pc, #84]	@ (801957c <ip_reass_free_complete_datagram+0x12c>)
 8019526:	22cc      	movs	r2, #204	@ 0xcc
 8019528:	4918      	ldr	r1, [pc, #96]	@ (801958c <ip_reass_free_complete_datagram+0x13c>)
 801952a:	4816      	ldr	r0, [pc, #88]	@ (8019584 <ip_reass_free_complete_datagram+0x134>)
 801952c:	f001 fe40 	bl	801b1b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019530:	8bfa      	ldrh	r2, [r7, #30]
 8019532:	8a7b      	ldrh	r3, [r7, #18]
 8019534:	4413      	add	r3, r2
 8019536:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019538:	68f8      	ldr	r0, [r7, #12]
 801953a:	f7f5 fffb 	bl	800f534 <pbuf_free>
  while (p != NULL) {
 801953e:	69bb      	ldr	r3, [r7, #24]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d1dc      	bne.n	80194fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019544:	6839      	ldr	r1, [r7, #0]
 8019546:	6878      	ldr	r0, [r7, #4]
 8019548:	f000 f8c2 	bl	80196d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801954c:	4b10      	ldr	r3, [pc, #64]	@ (8019590 <ip_reass_free_complete_datagram+0x140>)
 801954e:	881b      	ldrh	r3, [r3, #0]
 8019550:	8bfa      	ldrh	r2, [r7, #30]
 8019552:	429a      	cmp	r2, r3
 8019554:	d905      	bls.n	8019562 <ip_reass_free_complete_datagram+0x112>
 8019556:	4b09      	ldr	r3, [pc, #36]	@ (801957c <ip_reass_free_complete_datagram+0x12c>)
 8019558:	22d2      	movs	r2, #210	@ 0xd2
 801955a:	490e      	ldr	r1, [pc, #56]	@ (8019594 <ip_reass_free_complete_datagram+0x144>)
 801955c:	4809      	ldr	r0, [pc, #36]	@ (8019584 <ip_reass_free_complete_datagram+0x134>)
 801955e:	f001 fe27 	bl	801b1b0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019562:	4b0b      	ldr	r3, [pc, #44]	@ (8019590 <ip_reass_free_complete_datagram+0x140>)
 8019564:	881a      	ldrh	r2, [r3, #0]
 8019566:	8bfb      	ldrh	r3, [r7, #30]
 8019568:	1ad3      	subs	r3, r2, r3
 801956a:	b29a      	uxth	r2, r3
 801956c:	4b08      	ldr	r3, [pc, #32]	@ (8019590 <ip_reass_free_complete_datagram+0x140>)
 801956e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019570:	8bfb      	ldrh	r3, [r7, #30]
}
 8019572:	4618      	mov	r0, r3
 8019574:	3720      	adds	r7, #32
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	0802093c 	.word	0x0802093c
 8019580:	08020978 	.word	0x08020978
 8019584:	08020984 	.word	0x08020984
 8019588:	080209ac 	.word	0x080209ac
 801958c:	080209c0 	.word	0x080209c0
 8019590:	20013eec 	.word	0x20013eec
 8019594:	080209e0 	.word	0x080209e0

08019598 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b08a      	sub	sp, #40	@ 0x28
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80195a2:	2300      	movs	r3, #0
 80195a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80195a6:	2300      	movs	r3, #0
 80195a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80195aa:	2300      	movs	r3, #0
 80195ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80195ae:	2300      	movs	r3, #0
 80195b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80195b2:	2300      	movs	r3, #0
 80195b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80195b6:	4b28      	ldr	r3, [pc, #160]	@ (8019658 <ip_reass_remove_oldest_datagram+0xc0>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80195bc:	e030      	b.n	8019620 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80195be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195c0:	695a      	ldr	r2, [r3, #20]
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	68db      	ldr	r3, [r3, #12]
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d10c      	bne.n	80195e4 <ip_reass_remove_oldest_datagram+0x4c>
 80195ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195cc:	699a      	ldr	r2, [r3, #24]
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	691b      	ldr	r3, [r3, #16]
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d106      	bne.n	80195e4 <ip_reass_remove_oldest_datagram+0x4c>
 80195d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195d8:	899a      	ldrh	r2, [r3, #12]
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	889b      	ldrh	r3, [r3, #4]
 80195de:	b29b      	uxth	r3, r3
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d014      	beq.n	801960e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80195e4:	693b      	ldr	r3, [r7, #16]
 80195e6:	3301      	adds	r3, #1
 80195e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80195ea:	6a3b      	ldr	r3, [r7, #32]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d104      	bne.n	80195fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80195f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80195f4:	69fb      	ldr	r3, [r7, #28]
 80195f6:	61bb      	str	r3, [r7, #24]
 80195f8:	e009      	b.n	801960e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80195fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195fc:	7fda      	ldrb	r2, [r3, #31]
 80195fe:	6a3b      	ldr	r3, [r7, #32]
 8019600:	7fdb      	ldrb	r3, [r3, #31]
 8019602:	429a      	cmp	r2, r3
 8019604:	d803      	bhi.n	801960e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019608:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801960a:	69fb      	ldr	r3, [r7, #28]
 801960c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d001      	beq.n	801961a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019618:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019622:	2b00      	cmp	r3, #0
 8019624:	d1cb      	bne.n	80195be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019626:	6a3b      	ldr	r3, [r7, #32]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d008      	beq.n	801963e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801962c:	69b9      	ldr	r1, [r7, #24]
 801962e:	6a38      	ldr	r0, [r7, #32]
 8019630:	f7ff ff0e 	bl	8019450 <ip_reass_free_complete_datagram>
 8019634:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019636:	697a      	ldr	r2, [r7, #20]
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	4413      	add	r3, r2
 801963c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801963e:	697a      	ldr	r2, [r7, #20]
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	429a      	cmp	r2, r3
 8019644:	da02      	bge.n	801964c <ip_reass_remove_oldest_datagram+0xb4>
 8019646:	693b      	ldr	r3, [r7, #16]
 8019648:	2b01      	cmp	r3, #1
 801964a:	dcac      	bgt.n	80195a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801964c:	697b      	ldr	r3, [r7, #20]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3728      	adds	r7, #40	@ 0x28
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
 8019656:	bf00      	nop
 8019658:	20013ee8 	.word	0x20013ee8

0801965c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b084      	sub	sp, #16
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
 8019664:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019666:	2004      	movs	r0, #4
 8019668:	f7f5 f870 	bl	800e74c <memp_malloc>
 801966c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d110      	bne.n	8019696 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019674:	6839      	ldr	r1, [r7, #0]
 8019676:	6878      	ldr	r0, [r7, #4]
 8019678:	f7ff ff8e 	bl	8019598 <ip_reass_remove_oldest_datagram>
 801967c:	4602      	mov	r2, r0
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	4293      	cmp	r3, r2
 8019682:	dc03      	bgt.n	801968c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019684:	2004      	movs	r0, #4
 8019686:	f7f5 f861 	bl	800e74c <memp_malloc>
 801968a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d101      	bne.n	8019696 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019692:	2300      	movs	r3, #0
 8019694:	e016      	b.n	80196c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019696:	2220      	movs	r2, #32
 8019698:	2100      	movs	r1, #0
 801969a:	68f8      	ldr	r0, [r7, #12]
 801969c:	f001 feea 	bl	801b474 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	220f      	movs	r2, #15
 80196a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80196a6:	4b09      	ldr	r3, [pc, #36]	@ (80196cc <ip_reass_enqueue_new_datagram+0x70>)
 80196a8:	681a      	ldr	r2, [r3, #0]
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80196ae:	4a07      	ldr	r2, [pc, #28]	@ (80196cc <ip_reass_enqueue_new_datagram+0x70>)
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	3308      	adds	r3, #8
 80196b8:	2214      	movs	r2, #20
 80196ba:	6879      	ldr	r1, [r7, #4]
 80196bc:	4618      	mov	r0, r3
 80196be:	f001 ff96 	bl	801b5ee <memcpy>
  return ipr;
 80196c2:	68fb      	ldr	r3, [r7, #12]
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	3710      	adds	r7, #16
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	20013ee8 	.word	0x20013ee8

080196d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b082      	sub	sp, #8
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80196da:	4b10      	ldr	r3, [pc, #64]	@ (801971c <ip_reass_dequeue_datagram+0x4c>)
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d104      	bne.n	80196ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4a0c      	ldr	r2, [pc, #48]	@ (801971c <ip_reass_dequeue_datagram+0x4c>)
 80196ea:	6013      	str	r3, [r2, #0]
 80196ec:	e00d      	b.n	801970a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d106      	bne.n	8019702 <ip_reass_dequeue_datagram+0x32>
 80196f4:	4b0a      	ldr	r3, [pc, #40]	@ (8019720 <ip_reass_dequeue_datagram+0x50>)
 80196f6:	f240 1245 	movw	r2, #325	@ 0x145
 80196fa:	490a      	ldr	r1, [pc, #40]	@ (8019724 <ip_reass_dequeue_datagram+0x54>)
 80196fc:	480a      	ldr	r0, [pc, #40]	@ (8019728 <ip_reass_dequeue_datagram+0x58>)
 80196fe:	f001 fd57 	bl	801b1b0 <iprintf>
    prev->next = ipr->next;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	681a      	ldr	r2, [r3, #0]
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801970a:	6879      	ldr	r1, [r7, #4]
 801970c:	2004      	movs	r0, #4
 801970e:	f7f5 f86f 	bl	800e7f0 <memp_free>
}
 8019712:	bf00      	nop
 8019714:	3708      	adds	r7, #8
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
 801971a:	bf00      	nop
 801971c:	20013ee8 	.word	0x20013ee8
 8019720:	0802093c 	.word	0x0802093c
 8019724:	08020a04 	.word	0x08020a04
 8019728:	08020984 	.word	0x08020984

0801972c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b08c      	sub	sp, #48	@ 0x30
 8019730:	af00      	add	r7, sp, #0
 8019732:	60f8      	str	r0, [r7, #12]
 8019734:	60b9      	str	r1, [r7, #8]
 8019736:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019738:	2300      	movs	r3, #0
 801973a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801973c:	2301      	movs	r3, #1
 801973e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	685b      	ldr	r3, [r3, #4]
 8019744:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019746:	69fb      	ldr	r3, [r7, #28]
 8019748:	885b      	ldrh	r3, [r3, #2]
 801974a:	b29b      	uxth	r3, r3
 801974c:	4618      	mov	r0, r3
 801974e:	f7f4 f9cf 	bl	800daf0 <lwip_htons>
 8019752:	4603      	mov	r3, r0
 8019754:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019756:	69fb      	ldr	r3, [r7, #28]
 8019758:	781b      	ldrb	r3, [r3, #0]
 801975a:	f003 030f 	and.w	r3, r3, #15
 801975e:	b2db      	uxtb	r3, r3
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019764:	7e7b      	ldrb	r3, [r7, #25]
 8019766:	b29b      	uxth	r3, r3
 8019768:	8b7a      	ldrh	r2, [r7, #26]
 801976a:	429a      	cmp	r2, r3
 801976c:	d202      	bcs.n	8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801976e:	f04f 33ff 	mov.w	r3, #4294967295
 8019772:	e135      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019774:	7e7b      	ldrb	r3, [r7, #25]
 8019776:	b29b      	uxth	r3, r3
 8019778:	8b7a      	ldrh	r2, [r7, #26]
 801977a:	1ad3      	subs	r3, r2, r3
 801977c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801977e:	69fb      	ldr	r3, [r7, #28]
 8019780:	88db      	ldrh	r3, [r3, #6]
 8019782:	b29b      	uxth	r3, r3
 8019784:	4618      	mov	r0, r3
 8019786:	f7f4 f9b3 	bl	800daf0 <lwip_htons>
 801978a:	4603      	mov	r3, r0
 801978c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019790:	b29b      	uxth	r3, r3
 8019792:	00db      	lsls	r3, r3, #3
 8019794:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019796:	68bb      	ldr	r3, [r7, #8]
 8019798:	685b      	ldr	r3, [r3, #4]
 801979a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801979e:	2200      	movs	r2, #0
 80197a0:	701a      	strb	r2, [r3, #0]
 80197a2:	2200      	movs	r2, #0
 80197a4:	705a      	strb	r2, [r3, #1]
 80197a6:	2200      	movs	r2, #0
 80197a8:	709a      	strb	r2, [r3, #2]
 80197aa:	2200      	movs	r2, #0
 80197ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80197ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197b0:	8afa      	ldrh	r2, [r7, #22]
 80197b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80197b4:	8afa      	ldrh	r2, [r7, #22]
 80197b6:	8b7b      	ldrh	r3, [r7, #26]
 80197b8:	4413      	add	r3, r2
 80197ba:	b29a      	uxth	r2, r3
 80197bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80197c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197c2:	88db      	ldrh	r3, [r3, #6]
 80197c4:	b29b      	uxth	r3, r3
 80197c6:	8afa      	ldrh	r2, [r7, #22]
 80197c8:	429a      	cmp	r2, r3
 80197ca:	d902      	bls.n	80197d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80197cc:	f04f 33ff 	mov.w	r3, #4294967295
 80197d0:	e106      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	685b      	ldr	r3, [r3, #4]
 80197d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80197d8:	e068      	b.n	80198ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80197da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197dc:	685b      	ldr	r3, [r3, #4]
 80197de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80197e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197e2:	889b      	ldrh	r3, [r3, #4]
 80197e4:	b29a      	uxth	r2, r3
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	889b      	ldrh	r3, [r3, #4]
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d235      	bcs.n	801985c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80197f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80197f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80197f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d020      	beq.n	801983e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80197fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197fe:	889b      	ldrh	r3, [r3, #4]
 8019800:	b29a      	uxth	r2, r3
 8019802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019804:	88db      	ldrh	r3, [r3, #6]
 8019806:	b29b      	uxth	r3, r3
 8019808:	429a      	cmp	r2, r3
 801980a:	d307      	bcc.n	801981c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801980c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801980e:	88db      	ldrh	r3, [r3, #6]
 8019810:	b29a      	uxth	r2, r3
 8019812:	693b      	ldr	r3, [r7, #16]
 8019814:	889b      	ldrh	r3, [r3, #4]
 8019816:	b29b      	uxth	r3, r3
 8019818:	429a      	cmp	r2, r3
 801981a:	d902      	bls.n	8019822 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801981c:	f04f 33ff 	mov.w	r3, #4294967295
 8019820:	e0de      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019824:	68ba      	ldr	r2, [r7, #8]
 8019826:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801982a:	88db      	ldrh	r3, [r3, #6]
 801982c:	b29a      	uxth	r2, r3
 801982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019830:	889b      	ldrh	r3, [r3, #4]
 8019832:	b29b      	uxth	r3, r3
 8019834:	429a      	cmp	r2, r3
 8019836:	d03d      	beq.n	80198b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019838:	2300      	movs	r3, #0
 801983a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801983c:	e03a      	b.n	80198b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019840:	88db      	ldrh	r3, [r3, #6]
 8019842:	b29a      	uxth	r2, r3
 8019844:	693b      	ldr	r3, [r7, #16]
 8019846:	889b      	ldrh	r3, [r3, #4]
 8019848:	b29b      	uxth	r3, r3
 801984a:	429a      	cmp	r2, r3
 801984c:	d902      	bls.n	8019854 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801984e:	f04f 33ff 	mov.w	r3, #4294967295
 8019852:	e0c5      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	68ba      	ldr	r2, [r7, #8]
 8019858:	605a      	str	r2, [r3, #4]
      break;
 801985a:	e02b      	b.n	80198b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801985e:	889b      	ldrh	r3, [r3, #4]
 8019860:	b29a      	uxth	r2, r3
 8019862:	693b      	ldr	r3, [r7, #16]
 8019864:	889b      	ldrh	r3, [r3, #4]
 8019866:	b29b      	uxth	r3, r3
 8019868:	429a      	cmp	r2, r3
 801986a:	d102      	bne.n	8019872 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801986c:	f04f 33ff 	mov.w	r3, #4294967295
 8019870:	e0b6      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019874:	889b      	ldrh	r3, [r3, #4]
 8019876:	b29a      	uxth	r2, r3
 8019878:	693b      	ldr	r3, [r7, #16]
 801987a:	88db      	ldrh	r3, [r3, #6]
 801987c:	b29b      	uxth	r3, r3
 801987e:	429a      	cmp	r2, r3
 8019880:	d202      	bcs.n	8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019882:	f04f 33ff 	mov.w	r3, #4294967295
 8019886:	e0ab      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801988a:	2b00      	cmp	r3, #0
 801988c:	d009      	beq.n	80198a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019890:	88db      	ldrh	r3, [r3, #6]
 8019892:	b29a      	uxth	r2, r3
 8019894:	693b      	ldr	r3, [r7, #16]
 8019896:	889b      	ldrh	r3, [r3, #4]
 8019898:	b29b      	uxth	r3, r3
 801989a:	429a      	cmp	r2, r3
 801989c:	d001      	beq.n	80198a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801989e:	2300      	movs	r3, #0
 80198a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80198a2:	693b      	ldr	r3, [r7, #16]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80198a8:	693b      	ldr	r3, [r7, #16]
 80198aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80198ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d193      	bne.n	80197da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80198b2:	e000      	b.n	80198b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80198b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80198b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d12d      	bne.n	8019918 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80198bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d01c      	beq.n	80198fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80198c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198c4:	88db      	ldrh	r3, [r3, #6]
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ca:	889b      	ldrh	r3, [r3, #4]
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d906      	bls.n	80198e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80198d2:	4b45      	ldr	r3, [pc, #276]	@ (80199e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80198d4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80198d8:	4944      	ldr	r1, [pc, #272]	@ (80199ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80198da:	4845      	ldr	r0, [pc, #276]	@ (80199f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80198dc:	f001 fc68 	bl	801b1b0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80198e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198e2:	68ba      	ldr	r2, [r7, #8]
 80198e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80198e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198e8:	88db      	ldrh	r3, [r3, #6]
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ee:	889b      	ldrh	r3, [r3, #4]
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d010      	beq.n	8019918 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80198f6:	2300      	movs	r3, #0
 80198f8:	623b      	str	r3, [r7, #32]
 80198fa:	e00d      	b.n	8019918 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	685b      	ldr	r3, [r3, #4]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d006      	beq.n	8019912 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019904:	4b38      	ldr	r3, [pc, #224]	@ (80199e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019906:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801990a:	493a      	ldr	r1, [pc, #232]	@ (80199f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801990c:	4838      	ldr	r0, [pc, #224]	@ (80199f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801990e:	f001 fc4f 	bl	801b1b0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	68ba      	ldr	r2, [r7, #8]
 8019916:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d105      	bne.n	801992a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	7f9b      	ldrb	r3, [r3, #30]
 8019922:	f003 0301 	and.w	r3, r3, #1
 8019926:	2b00      	cmp	r3, #0
 8019928:	d059      	beq.n	80199de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801992a:	6a3b      	ldr	r3, [r7, #32]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d04f      	beq.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	685b      	ldr	r3, [r3, #4]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d006      	beq.n	8019946 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	685b      	ldr	r3, [r3, #4]
 801993c:	685b      	ldr	r3, [r3, #4]
 801993e:	889b      	ldrh	r3, [r3, #4]
 8019940:	b29b      	uxth	r3, r3
 8019942:	2b00      	cmp	r3, #0
 8019944:	d002      	beq.n	801994c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019946:	2300      	movs	r3, #0
 8019948:	623b      	str	r3, [r7, #32]
 801994a:	e041      	b.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801994c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801994e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8019950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019956:	e012      	b.n	801997e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801995a:	685b      	ldr	r3, [r3, #4]
 801995c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019960:	88db      	ldrh	r3, [r3, #6]
 8019962:	b29a      	uxth	r2, r3
 8019964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019966:	889b      	ldrh	r3, [r3, #4]
 8019968:	b29b      	uxth	r3, r3
 801996a:	429a      	cmp	r2, r3
 801996c:	d002      	beq.n	8019974 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801996e:	2300      	movs	r3, #0
 8019970:	623b      	str	r3, [r7, #32]
            break;
 8019972:	e007      	b.n	8019984 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019976:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8019978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019980:	2b00      	cmp	r3, #0
 8019982:	d1e9      	bne.n	8019958 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019984:	6a3b      	ldr	r3, [r7, #32]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d022      	beq.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	685b      	ldr	r3, [r3, #4]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d106      	bne.n	80199a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019992:	4b15      	ldr	r3, [pc, #84]	@ (80199e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019994:	f240 12df 	movw	r2, #479	@ 0x1df
 8019998:	4917      	ldr	r1, [pc, #92]	@ (80199f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801999a:	4815      	ldr	r0, [pc, #84]	@ (80199f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801999c:	f001 fc08 	bl	801b1b0 <iprintf>
          LWIP_ASSERT("sanity check",
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	685b      	ldr	r3, [r3, #4]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d106      	bne.n	80199ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80199ac:	4b0e      	ldr	r3, [pc, #56]	@ (80199e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80199ae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80199b2:	4911      	ldr	r1, [pc, #68]	@ (80199f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80199b4:	480e      	ldr	r0, [pc, #56]	@ (80199f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80199b6:	f001 fbfb 	bl	801b1b0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80199ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d006      	beq.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80199c2:	4b09      	ldr	r3, [pc, #36]	@ (80199e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80199c4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80199c8:	490c      	ldr	r1, [pc, #48]	@ (80199fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80199ca:	4809      	ldr	r0, [pc, #36]	@ (80199f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80199cc:	f001 fbf0 	bl	801b1b0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80199d0:	6a3b      	ldr	r3, [r7, #32]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	bf14      	ite	ne
 80199d6:	2301      	movne	r3, #1
 80199d8:	2300      	moveq	r3, #0
 80199da:	b2db      	uxtb	r3, r3
 80199dc:	e000      	b.n	80199e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80199de:	2300      	movs	r3, #0
}
 80199e0:	4618      	mov	r0, r3
 80199e2:	3730      	adds	r7, #48	@ 0x30
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	0802093c 	.word	0x0802093c
 80199ec:	08020a20 	.word	0x08020a20
 80199f0:	08020984 	.word	0x08020984
 80199f4:	08020a40 	.word	0x08020a40
 80199f8:	08020a78 	.word	0x08020a78
 80199fc:	08020a88 	.word	0x08020a88

08019a00 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b08e      	sub	sp, #56	@ 0x38
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	685b      	ldr	r3, [r3, #4]
 8019a0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a10:	781b      	ldrb	r3, [r3, #0]
 8019a12:	f003 030f 	and.w	r3, r3, #15
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	009b      	lsls	r3, r3, #2
 8019a1a:	b2db      	uxtb	r3, r3
 8019a1c:	2b14      	cmp	r3, #20
 8019a1e:	f040 8179 	bne.w	8019d14 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a24:	88db      	ldrh	r3, [r3, #6]
 8019a26:	b29b      	uxth	r3, r3
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7f4 f861 	bl	800daf0 <lwip_htons>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a34:	b29b      	uxth	r3, r3
 8019a36:	00db      	lsls	r3, r3, #3
 8019a38:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a3c:	885b      	ldrh	r3, [r3, #2]
 8019a3e:	b29b      	uxth	r3, r3
 8019a40:	4618      	mov	r0, r3
 8019a42:	f7f4 f855 	bl	800daf0 <lwip_htons>
 8019a46:	4603      	mov	r3, r0
 8019a48:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a4c:	781b      	ldrb	r3, [r3, #0]
 8019a4e:	f003 030f 	and.w	r3, r3, #15
 8019a52:	b2db      	uxtb	r3, r3
 8019a54:	009b      	lsls	r3, r3, #2
 8019a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8019a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019a5e:	b29b      	uxth	r3, r3
 8019a60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019a62:	429a      	cmp	r2, r3
 8019a64:	f0c0 8158 	bcc.w	8019d18 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019a68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019a74:	6878      	ldr	r0, [r7, #4]
 8019a76:	f7f5 fdeb 	bl	800f650 <pbuf_clen>
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019a7e:	4b90      	ldr	r3, [pc, #576]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	461a      	mov	r2, r3
 8019a84:	8c3b      	ldrh	r3, [r7, #32]
 8019a86:	4413      	add	r3, r2
 8019a88:	2b0a      	cmp	r3, #10
 8019a8a:	dd10      	ble.n	8019aae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019a8c:	8c3b      	ldrh	r3, [r7, #32]
 8019a8e:	4619      	mov	r1, r3
 8019a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a92:	f7ff fd81 	bl	8019598 <ip_reass_remove_oldest_datagram>
 8019a96:	4603      	mov	r3, r0
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	f000 813f 	beq.w	8019d1c <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019a9e:	4b88      	ldr	r3, [pc, #544]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019aa0:	881b      	ldrh	r3, [r3, #0]
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	8c3b      	ldrh	r3, [r7, #32]
 8019aa6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019aa8:	2b0a      	cmp	r3, #10
 8019aaa:	f300 8137 	bgt.w	8019d1c <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019aae:	4b85      	ldr	r3, [pc, #532]	@ (8019cc4 <ip4_reass+0x2c4>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ab4:	e015      	b.n	8019ae2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ab8:	695a      	ldr	r2, [r3, #20]
 8019aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019abc:	68db      	ldr	r3, [r3, #12]
 8019abe:	429a      	cmp	r2, r3
 8019ac0:	d10c      	bne.n	8019adc <ip4_reass+0xdc>
 8019ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ac4:	699a      	ldr	r2, [r3, #24]
 8019ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ac8:	691b      	ldr	r3, [r3, #16]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d106      	bne.n	8019adc <ip4_reass+0xdc>
 8019ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ad0:	899a      	ldrh	r2, [r3, #12]
 8019ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ad4:	889b      	ldrh	r3, [r3, #4]
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d006      	beq.n	8019aea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d1e6      	bne.n	8019ab6 <ip4_reass+0xb6>
 8019ae8:	e000      	b.n	8019aec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019aea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d109      	bne.n	8019b06 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019af2:	8c3b      	ldrh	r3, [r7, #32]
 8019af4:	4619      	mov	r1, r3
 8019af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019af8:	f7ff fdb0 	bl	801965c <ip_reass_enqueue_new_datagram>
 8019afc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d11c      	bne.n	8019b3e <ip4_reass+0x13e>
      goto nullreturn;
 8019b04:	e10d      	b.n	8019d22 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b08:	88db      	ldrh	r3, [r3, #6]
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	f7f3 ffef 	bl	800daf0 <lwip_htons>
 8019b12:	4603      	mov	r3, r0
 8019b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d110      	bne.n	8019b3e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b1e:	89db      	ldrh	r3, [r3, #14]
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7f3 ffe5 	bl	800daf0 <lwip_htons>
 8019b26:	4603      	mov	r3, r0
 8019b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d006      	beq.n	8019b3e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b32:	3308      	adds	r3, #8
 8019b34:	2214      	movs	r2, #20
 8019b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019b38:	4618      	mov	r0, r3
 8019b3a:	f001 fd58 	bl	801b5ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b40:	88db      	ldrh	r3, [r3, #6]
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	f003 0320 	and.w	r3, r3, #32
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	bf0c      	ite	eq
 8019b4c:	2301      	moveq	r3, #1
 8019b4e:	2300      	movne	r3, #0
 8019b50:	b2db      	uxtb	r3, r3
 8019b52:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019b54:	69fb      	ldr	r3, [r7, #28]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d00e      	beq.n	8019b78 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019b5a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019b5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019b5e:	4413      	add	r3, r2
 8019b60:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019b62:	8b7a      	ldrh	r2, [r7, #26]
 8019b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019b66:	429a      	cmp	r2, r3
 8019b68:	f0c0 80a8 	bcc.w	8019cbc <ip4_reass+0x2bc>
 8019b6c:	8b7b      	ldrh	r3, [r7, #26]
 8019b6e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8019b72:	4293      	cmp	r3, r2
 8019b74:	f200 80a2 	bhi.w	8019cbc <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019b78:	69fa      	ldr	r2, [r7, #28]
 8019b7a:	6879      	ldr	r1, [r7, #4]
 8019b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b7e:	f7ff fdd5 	bl	801972c <ip_reass_chain_frag_into_datagram_and_validate>
 8019b82:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019b84:	697b      	ldr	r3, [r7, #20]
 8019b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b8a:	f000 80a3 	beq.w	8019cd4 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019b90:	881a      	ldrh	r2, [r3, #0]
 8019b92:	8c3b      	ldrh	r3, [r7, #32]
 8019b94:	4413      	add	r3, r2
 8019b96:	b29a      	uxth	r2, r3
 8019b98:	4b49      	ldr	r3, [pc, #292]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019b9a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019b9c:	69fb      	ldr	r3, [r7, #28]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d00d      	beq.n	8019bbe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019ba2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019ba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019ba6:	4413      	add	r3, r2
 8019ba8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bac:	8a7a      	ldrh	r2, [r7, #18]
 8019bae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bb2:	7f9b      	ldrb	r3, [r3, #30]
 8019bb4:	f043 0301 	orr.w	r3, r3, #1
 8019bb8:	b2da      	uxtb	r2, r3
 8019bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bbc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019bbe:	697b      	ldr	r3, [r7, #20]
 8019bc0:	2b01      	cmp	r3, #1
 8019bc2:	d179      	bne.n	8019cb8 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bc6:	8b9b      	ldrh	r3, [r3, #28]
 8019bc8:	3314      	adds	r3, #20
 8019bca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bce:	685b      	ldr	r3, [r3, #4]
 8019bd0:	685b      	ldr	r3, [r3, #4]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bd8:	685b      	ldr	r3, [r3, #4]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019be0:	3308      	adds	r3, #8
 8019be2:	2214      	movs	r2, #20
 8019be4:	4619      	mov	r1, r3
 8019be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019be8:	f001 fd01 	bl	801b5ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019bec:	8a3b      	ldrh	r3, [r7, #16]
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7f3 ff7e 	bl	800daf0 <lwip_htons>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	461a      	mov	r2, r3
 8019bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bfa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bfe:	2200      	movs	r2, #0
 8019c00:	719a      	strb	r2, [r3, #6]
 8019c02:	2200      	movs	r2, #0
 8019c04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c08:	2200      	movs	r2, #0
 8019c0a:	729a      	strb	r2, [r3, #10]
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8019c10:	2114      	movs	r1, #20
 8019c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019c14:	f7f4 f8b4 	bl	800dd80 <inet_chksum>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	461a      	mov	r2, r3
 8019c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c1e:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c22:	685b      	ldr	r3, [r3, #4]
 8019c24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019c26:	e00d      	b.n	8019c44 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8019c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c2a:	685b      	ldr	r3, [r3, #4]
 8019c2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019c2e:	2114      	movs	r1, #20
 8019c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019c32:	f7f5 fbf9 	bl	800f428 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019c38:	6878      	ldr	r0, [r7, #4]
 8019c3a:	f7f5 fd49 	bl	800f6d0 <pbuf_cat>
      r = iprh->next_pbuf;
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8019c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d1ee      	bne.n	8019c28 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8019cc4 <ip4_reass+0x2c4>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d102      	bne.n	8019c5a <ip4_reass+0x25a>
      ipr_prev = NULL;
 8019c54:	2300      	movs	r3, #0
 8019c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c58:	e010      	b.n	8019c7c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8019cc4 <ip4_reass+0x2c4>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c60:	e007      	b.n	8019c72 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8019c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c68:	429a      	cmp	r2, r3
 8019c6a:	d006      	beq.n	8019c7a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d1f4      	bne.n	8019c62 <ip4_reass+0x262>
 8019c78:	e000      	b.n	8019c7c <ip4_reass+0x27c>
          break;
 8019c7a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019c7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019c7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c80:	f7ff fd26 	bl	80196d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	f7f5 fce3 	bl	800f650 <pbuf_clen>
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019c90:	881b      	ldrh	r3, [r3, #0]
 8019c92:	8c3a      	ldrh	r2, [r7, #32]
 8019c94:	429a      	cmp	r2, r3
 8019c96:	d906      	bls.n	8019ca6 <ip4_reass+0x2a6>
 8019c98:	4b0b      	ldr	r3, [pc, #44]	@ (8019cc8 <ip4_reass+0x2c8>)
 8019c9a:	f240 229b 	movw	r2, #667	@ 0x29b
 8019c9e:	490b      	ldr	r1, [pc, #44]	@ (8019ccc <ip4_reass+0x2cc>)
 8019ca0:	480b      	ldr	r0, [pc, #44]	@ (8019cd0 <ip4_reass+0x2d0>)
 8019ca2:	f001 fa85 	bl	801b1b0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019ca6:	4b06      	ldr	r3, [pc, #24]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019ca8:	881a      	ldrh	r2, [r3, #0]
 8019caa:	8c3b      	ldrh	r3, [r7, #32]
 8019cac:	1ad3      	subs	r3, r2, r3
 8019cae:	b29a      	uxth	r2, r3
 8019cb0:	4b03      	ldr	r3, [pc, #12]	@ (8019cc0 <ip4_reass+0x2c0>)
 8019cb2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	e038      	b.n	8019d2a <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	e036      	b.n	8019d2a <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8019cbc:	bf00      	nop
 8019cbe:	e00a      	b.n	8019cd6 <ip4_reass+0x2d6>
 8019cc0:	20013eec 	.word	0x20013eec
 8019cc4:	20013ee8 	.word	0x20013ee8
 8019cc8:	0802093c 	.word	0x0802093c
 8019ccc:	08020aac 	.word	0x08020aac
 8019cd0:	08020984 	.word	0x08020984
    goto nullreturn_ipr;
 8019cd4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d106      	bne.n	8019cea <ip4_reass+0x2ea>
 8019cdc:	4b15      	ldr	r3, [pc, #84]	@ (8019d34 <ip4_reass+0x334>)
 8019cde:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8019ce2:	4915      	ldr	r1, [pc, #84]	@ (8019d38 <ip4_reass+0x338>)
 8019ce4:	4815      	ldr	r0, [pc, #84]	@ (8019d3c <ip4_reass+0x33c>)
 8019ce6:	f001 fa63 	bl	801b1b0 <iprintf>
  if (ipr->p == NULL) {
 8019cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d116      	bne.n	8019d20 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019cf2:	4b13      	ldr	r3, [pc, #76]	@ (8019d40 <ip4_reass+0x340>)
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d006      	beq.n	8019d0a <ip4_reass+0x30a>
 8019cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8019d34 <ip4_reass+0x334>)
 8019cfe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019d02:	4910      	ldr	r1, [pc, #64]	@ (8019d44 <ip4_reass+0x344>)
 8019d04:	480d      	ldr	r0, [pc, #52]	@ (8019d3c <ip4_reass+0x33c>)
 8019d06:	f001 fa53 	bl	801b1b0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019d0a:	2100      	movs	r1, #0
 8019d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019d0e:	f7ff fcdf 	bl	80196d0 <ip_reass_dequeue_datagram>
 8019d12:	e006      	b.n	8019d22 <ip4_reass+0x322>
    goto nullreturn;
 8019d14:	bf00      	nop
 8019d16:	e004      	b.n	8019d22 <ip4_reass+0x322>
    goto nullreturn;
 8019d18:	bf00      	nop
 8019d1a:	e002      	b.n	8019d22 <ip4_reass+0x322>
      goto nullreturn;
 8019d1c:	bf00      	nop
 8019d1e:	e000      	b.n	8019d22 <ip4_reass+0x322>
  }

nullreturn:
 8019d20:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f7f5 fc06 	bl	800f534 <pbuf_free>
  return NULL;
 8019d28:	2300      	movs	r3, #0
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3738      	adds	r7, #56	@ 0x38
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bd80      	pop	{r7, pc}
 8019d32:	bf00      	nop
 8019d34:	0802093c 	.word	0x0802093c
 8019d38:	08020ac8 	.word	0x08020ac8
 8019d3c:	08020984 	.word	0x08020984
 8019d40:	20013ee8 	.word	0x20013ee8
 8019d44:	08020ad4 	.word	0x08020ad4

08019d48 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019d4c:	2005      	movs	r0, #5
 8019d4e:	f7f4 fcfd 	bl	800e74c <memp_malloc>
 8019d52:	4603      	mov	r3, r0
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	bd80      	pop	{r7, pc}

08019d58 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d106      	bne.n	8019d74 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019d66:	4b07      	ldr	r3, [pc, #28]	@ (8019d84 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019d68:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8019d6c:	4906      	ldr	r1, [pc, #24]	@ (8019d88 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019d6e:	4807      	ldr	r0, [pc, #28]	@ (8019d8c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019d70:	f001 fa1e 	bl	801b1b0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019d74:	6879      	ldr	r1, [r7, #4]
 8019d76:	2005      	movs	r0, #5
 8019d78:	f7f4 fd3a 	bl	800e7f0 <memp_free>
}
 8019d7c:	bf00      	nop
 8019d7e:	3708      	adds	r7, #8
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	0802093c 	.word	0x0802093c
 8019d88:	08020af4 	.word	0x08020af4
 8019d8c:	08020984 	.word	0x08020984

08019d90 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d106      	bne.n	8019db0 <ipfrag_free_pbuf_custom+0x20>
 8019da2:	4b11      	ldr	r3, [pc, #68]	@ (8019de8 <ipfrag_free_pbuf_custom+0x58>)
 8019da4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8019da8:	4910      	ldr	r1, [pc, #64]	@ (8019dec <ipfrag_free_pbuf_custom+0x5c>)
 8019daa:	4811      	ldr	r0, [pc, #68]	@ (8019df0 <ipfrag_free_pbuf_custom+0x60>)
 8019dac:	f001 fa00 	bl	801b1b0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019db0:	68fa      	ldr	r2, [r7, #12]
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d006      	beq.n	8019dc6 <ipfrag_free_pbuf_custom+0x36>
 8019db8:	4b0b      	ldr	r3, [pc, #44]	@ (8019de8 <ipfrag_free_pbuf_custom+0x58>)
 8019dba:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8019dbe:	490d      	ldr	r1, [pc, #52]	@ (8019df4 <ipfrag_free_pbuf_custom+0x64>)
 8019dc0:	480b      	ldr	r0, [pc, #44]	@ (8019df0 <ipfrag_free_pbuf_custom+0x60>)
 8019dc2:	f001 f9f5 	bl	801b1b0 <iprintf>
  if (pcr->original != NULL) {
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	695b      	ldr	r3, [r3, #20]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d004      	beq.n	8019dd8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	695b      	ldr	r3, [r3, #20]
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	f7f5 fbae 	bl	800f534 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019dd8:	68f8      	ldr	r0, [r7, #12]
 8019dda:	f7ff ffbd 	bl	8019d58 <ip_frag_free_pbuf_custom_ref>
}
 8019dde:	bf00      	nop
 8019de0:	3710      	adds	r7, #16
 8019de2:	46bd      	mov	sp, r7
 8019de4:	bd80      	pop	{r7, pc}
 8019de6:	bf00      	nop
 8019de8:	0802093c 	.word	0x0802093c
 8019dec:	08020b00 	.word	0x08020b00
 8019df0:	08020984 	.word	0x08020984
 8019df4:	08020b0c 	.word	0x08020b0c

08019df8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b094      	sub	sp, #80	@ 0x50
 8019dfc:	af02      	add	r7, sp, #8
 8019dfe:	60f8      	str	r0, [r7, #12]
 8019e00:	60b9      	str	r1, [r7, #8]
 8019e02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019e04:	2300      	movs	r3, #0
 8019e06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019e0e:	3b14      	subs	r3, #20
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	da00      	bge.n	8019e16 <ip4_frag+0x1e>
 8019e14:	3307      	adds	r3, #7
 8019e16:	10db      	asrs	r3, r3, #3
 8019e18:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019e1a:	2314      	movs	r3, #20
 8019e1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8019e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e2a:	781b      	ldrb	r3, [r3, #0]
 8019e2c:	f003 030f 	and.w	r3, r3, #15
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	009b      	lsls	r3, r3, #2
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	2b14      	cmp	r3, #20
 8019e38:	d002      	beq.n	8019e40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019e3a:	f06f 0305 	mvn.w	r3, #5
 8019e3e:	e118      	b.n	801a072 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	895b      	ldrh	r3, [r3, #10]
 8019e44:	2b13      	cmp	r3, #19
 8019e46:	d809      	bhi.n	8019e5c <ip4_frag+0x64>
 8019e48:	4b8c      	ldr	r3, [pc, #560]	@ (801a07c <ip4_frag+0x284>)
 8019e4a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8019e4e:	498c      	ldr	r1, [pc, #560]	@ (801a080 <ip4_frag+0x288>)
 8019e50:	488c      	ldr	r0, [pc, #560]	@ (801a084 <ip4_frag+0x28c>)
 8019e52:	f001 f9ad 	bl	801b1b0 <iprintf>
 8019e56:	f06f 0305 	mvn.w	r3, #5
 8019e5a:	e10a      	b.n	801a072 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e5e:	88db      	ldrh	r3, [r3, #6]
 8019e60:	b29b      	uxth	r3, r3
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7f3 fe44 	bl	800daf0 <lwip_htons>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8019e6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e72:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019e76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	891b      	ldrh	r3, [r3, #8]
 8019e82:	3b14      	subs	r3, #20
 8019e84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019e88:	e0e9      	b.n	801a05e <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019e8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019e8c:	00db      	lsls	r3, r3, #3
 8019e8e:	b29b      	uxth	r3, r3
 8019e90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019e94:	4293      	cmp	r3, r2
 8019e96:	bf28      	it	cs
 8019e98:	4613      	movcs	r3, r2
 8019e9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019e9c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019ea0:	2114      	movs	r1, #20
 8019ea2:	200e      	movs	r0, #14
 8019ea4:	f7f5 f85e 	bl	800ef64 <pbuf_alloc>
 8019ea8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8019eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	f000 80dd 	beq.w	801a06c <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eb4:	895b      	ldrh	r3, [r3, #10]
 8019eb6:	2b13      	cmp	r3, #19
 8019eb8:	d806      	bhi.n	8019ec8 <ip4_frag+0xd0>
 8019eba:	4b70      	ldr	r3, [pc, #448]	@ (801a07c <ip4_frag+0x284>)
 8019ebc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8019ec0:	4971      	ldr	r1, [pc, #452]	@ (801a088 <ip4_frag+0x290>)
 8019ec2:	4870      	ldr	r0, [pc, #448]	@ (801a084 <ip4_frag+0x28c>)
 8019ec4:	f001 f974 	bl	801b1b0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	2214      	movs	r2, #20
 8019ece:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f001 fb8c 	bl	801b5ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ed8:	685b      	ldr	r3, [r3, #4]
 8019eda:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8019edc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019ede:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8019ee2:	e064      	b.n	8019fae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	895a      	ldrh	r2, [r3, #10]
 8019ee8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019eea:	1ad3      	subs	r3, r2, r3
 8019eec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	895b      	ldrh	r3, [r3, #10]
 8019ef2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d906      	bls.n	8019f06 <ip4_frag+0x10e>
 8019ef8:	4b60      	ldr	r3, [pc, #384]	@ (801a07c <ip4_frag+0x284>)
 8019efa:	f240 322d 	movw	r2, #813	@ 0x32d
 8019efe:	4963      	ldr	r1, [pc, #396]	@ (801a08c <ip4_frag+0x294>)
 8019f00:	4860      	ldr	r0, [pc, #384]	@ (801a084 <ip4_frag+0x28c>)
 8019f02:	f001 f955 	bl	801b1b0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019f06:	8bfa      	ldrh	r2, [r7, #30]
 8019f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019f0c:	4293      	cmp	r3, r2
 8019f0e:	bf28      	it	cs
 8019f10:	4613      	movcs	r3, r2
 8019f12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019f16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d105      	bne.n	8019f2a <ip4_frag+0x132>
        poff = 0;
 8019f1e:	2300      	movs	r3, #0
 8019f20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	60fb      	str	r3, [r7, #12]
        continue;
 8019f28:	e041      	b.n	8019fae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019f2a:	f7ff ff0d 	bl	8019d48 <ip_frag_alloc_pbuf_custom_ref>
 8019f2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019f30:	69bb      	ldr	r3, [r7, #24]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d103      	bne.n	8019f3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019f36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019f38:	f7f5 fafc 	bl	800f534 <pbuf_free>
        goto memerr;
 8019f3c:	e097      	b.n	801a06e <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019f3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019f44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f46:	4413      	add	r3, r2
 8019f48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8019f4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019f50:	9201      	str	r2, [sp, #4]
 8019f52:	9300      	str	r3, [sp, #0]
 8019f54:	4603      	mov	r3, r0
 8019f56:	2241      	movs	r2, #65	@ 0x41
 8019f58:	2000      	movs	r0, #0
 8019f5a:	f7f5 f931 	bl	800f1c0 <pbuf_alloced_custom>
 8019f5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019f60:	697b      	ldr	r3, [r7, #20]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d106      	bne.n	8019f74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019f66:	69b8      	ldr	r0, [r7, #24]
 8019f68:	f7ff fef6 	bl	8019d58 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019f6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019f6e:	f7f5 fae1 	bl	800f534 <pbuf_free>
        goto memerr;
 8019f72:	e07c      	b.n	801a06e <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8019f74:	68f8      	ldr	r0, [r7, #12]
 8019f76:	f7f5 fb83 	bl	800f680 <pbuf_ref>
      pcr->original = p;
 8019f7a:	69bb      	ldr	r3, [r7, #24]
 8019f7c:	68fa      	ldr	r2, [r7, #12]
 8019f7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019f80:	69bb      	ldr	r3, [r7, #24]
 8019f82:	4a43      	ldr	r2, [pc, #268]	@ (801a090 <ip4_frag+0x298>)
 8019f84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019f86:	6979      	ldr	r1, [r7, #20]
 8019f88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019f8a:	f7f5 fba1 	bl	800f6d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019f8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8019f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019f96:	1ad3      	subs	r3, r2, r3
 8019f98:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019f9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d004      	beq.n	8019fae <ip4_frag+0x1b6>
        poff = 0;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019fae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d196      	bne.n	8019ee4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019fb6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019fb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019fbc:	4413      	add	r3, r2
 8019fbe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019fc0:	68bb      	ldr	r3, [r7, #8]
 8019fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019fc4:	f1a3 0213 	sub.w	r2, r3, #19
 8019fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019fcc:	429a      	cmp	r2, r3
 8019fce:	bfcc      	ite	gt
 8019fd0:	2301      	movgt	r3, #1
 8019fd2:	2300      	movle	r3, #0
 8019fd4:	b2db      	uxtb	r3, r3
 8019fd6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8019fe2:	6a3b      	ldr	r3, [r7, #32]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d002      	beq.n	8019fee <ip4_frag+0x1f6>
 8019fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d003      	beq.n	8019ff6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019fee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019ff0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019ff4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019ff6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7f3 fd79 	bl	800daf0 <lwip_htons>
 8019ffe:	4603      	mov	r3, r0
 801a000:	461a      	mov	r2, r3
 801a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a004:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a006:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a008:	3314      	adds	r3, #20
 801a00a:	b29b      	uxth	r3, r3
 801a00c:	4618      	mov	r0, r3
 801a00e:	f7f3 fd6f 	bl	800daf0 <lwip_htons>
 801a012:	4603      	mov	r3, r0
 801a014:	461a      	mov	r2, r3
 801a016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a018:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a01c:	2200      	movs	r2, #0
 801a01e:	729a      	strb	r2, [r3, #10]
 801a020:	2200      	movs	r2, #0
 801a022:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801a024:	2114      	movs	r1, #20
 801a026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a028:	f7f3 feaa 	bl	800dd80 <inet_chksum>
 801a02c:	4603      	mov	r3, r0
 801a02e:	461a      	mov	r2, r3
 801a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a032:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	695b      	ldr	r3, [r3, #20]
 801a038:	687a      	ldr	r2, [r7, #4]
 801a03a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a03c:	68b8      	ldr	r0, [r7, #8]
 801a03e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a040:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a042:	f7f5 fa77 	bl	800f534 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a046:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a04a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a04c:	1ad3      	subs	r3, r2, r3
 801a04e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801a052:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801a056:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a058:	4413      	add	r3, r2
 801a05a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801a05e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a062:	2b00      	cmp	r3, #0
 801a064:	f47f af11 	bne.w	8019e8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a068:	2300      	movs	r3, #0
 801a06a:	e002      	b.n	801a072 <ip4_frag+0x27a>
      goto memerr;
 801a06c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a06e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a072:	4618      	mov	r0, r3
 801a074:	3748      	adds	r7, #72	@ 0x48
 801a076:	46bd      	mov	sp, r7
 801a078:	bd80      	pop	{r7, pc}
 801a07a:	bf00      	nop
 801a07c:	0802093c 	.word	0x0802093c
 801a080:	08020b18 	.word	0x08020b18
 801a084:	08020984 	.word	0x08020984
 801a088:	08020b34 	.word	0x08020b34
 801a08c:	08020b54 	.word	0x08020b54
 801a090:	08019d91 	.word	0x08019d91

0801a094 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b086      	sub	sp, #24
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
 801a09c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a09e:	230e      	movs	r3, #14
 801a0a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	895b      	ldrh	r3, [r3, #10]
 801a0a6:	2b0e      	cmp	r3, #14
 801a0a8:	d96e      	bls.n	801a188 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	7bdb      	ldrb	r3, [r3, #15]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d106      	bne.n	801a0c0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801a0b8:	3301      	adds	r3, #1
 801a0ba:	b2da      	uxtb	r2, r3
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	7b1a      	ldrb	r2, [r3, #12]
 801a0ca:	7b5b      	ldrb	r3, [r3, #13]
 801a0cc:	021b      	lsls	r3, r3, #8
 801a0ce:	4313      	orrs	r3, r2
 801a0d0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a0d2:	693b      	ldr	r3, [r7, #16]
 801a0d4:	781b      	ldrb	r3, [r3, #0]
 801a0d6:	f003 0301 	and.w	r3, r3, #1
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d023      	beq.n	801a126 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a0de:	693b      	ldr	r3, [r7, #16]
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	2b01      	cmp	r3, #1
 801a0e4:	d10f      	bne.n	801a106 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	785b      	ldrb	r3, [r3, #1]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d11b      	bne.n	801a126 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a0ee:	693b      	ldr	r3, [r7, #16]
 801a0f0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a0f2:	2b5e      	cmp	r3, #94	@ 0x5e
 801a0f4:	d117      	bne.n	801a126 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	7b5b      	ldrb	r3, [r3, #13]
 801a0fa:	f043 0310 	orr.w	r3, r3, #16
 801a0fe:	b2da      	uxtb	r2, r3
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	735a      	strb	r2, [r3, #13]
 801a104:	e00f      	b.n	801a126 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a106:	693b      	ldr	r3, [r7, #16]
 801a108:	2206      	movs	r2, #6
 801a10a:	4928      	ldr	r1, [pc, #160]	@ (801a1ac <ethernet_input+0x118>)
 801a10c:	4618      	mov	r0, r3
 801a10e:	f001 f9a1 	bl	801b454 <memcmp>
 801a112:	4603      	mov	r3, r0
 801a114:	2b00      	cmp	r3, #0
 801a116:	d106      	bne.n	801a126 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	7b5b      	ldrb	r3, [r3, #13]
 801a11c:	f043 0308 	orr.w	r3, r3, #8
 801a120:	b2da      	uxtb	r2, r3
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a126:	89fb      	ldrh	r3, [r7, #14]
 801a128:	2b08      	cmp	r3, #8
 801a12a:	d003      	beq.n	801a134 <ethernet_input+0xa0>
 801a12c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801a130:	d014      	beq.n	801a15c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a132:	e032      	b.n	801a19a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a13a:	f003 0308 	and.w	r3, r3, #8
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d024      	beq.n	801a18c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a142:	8afb      	ldrh	r3, [r7, #22]
 801a144:	4619      	mov	r1, r3
 801a146:	6878      	ldr	r0, [r7, #4]
 801a148:	f7f5 f96e 	bl	800f428 <pbuf_remove_header>
 801a14c:	4603      	mov	r3, r0
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d11e      	bne.n	801a190 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a152:	6839      	ldr	r1, [r7, #0]
 801a154:	6878      	ldr	r0, [r7, #4]
 801a156:	f7fe fe81 	bl	8018e5c <ip4_input>
      break;
 801a15a:	e013      	b.n	801a184 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a162:	f003 0308 	and.w	r3, r3, #8
 801a166:	2b00      	cmp	r3, #0
 801a168:	d014      	beq.n	801a194 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a16a:	8afb      	ldrh	r3, [r7, #22]
 801a16c:	4619      	mov	r1, r3
 801a16e:	6878      	ldr	r0, [r7, #4]
 801a170:	f7f5 f95a 	bl	800f428 <pbuf_remove_header>
 801a174:	4603      	mov	r3, r0
 801a176:	2b00      	cmp	r3, #0
 801a178:	d10e      	bne.n	801a198 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a17a:	6839      	ldr	r1, [r7, #0]
 801a17c:	6878      	ldr	r0, [r7, #4]
 801a17e:	f7fd ffe9 	bl	8018154 <etharp_input>
      break;
 801a182:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a184:	2300      	movs	r3, #0
 801a186:	e00c      	b.n	801a1a2 <ethernet_input+0x10e>
    goto free_and_return;
 801a188:	bf00      	nop
 801a18a:	e006      	b.n	801a19a <ethernet_input+0x106>
        goto free_and_return;
 801a18c:	bf00      	nop
 801a18e:	e004      	b.n	801a19a <ethernet_input+0x106>
        goto free_and_return;
 801a190:	bf00      	nop
 801a192:	e002      	b.n	801a19a <ethernet_input+0x106>
        goto free_and_return;
 801a194:	bf00      	nop
 801a196:	e000      	b.n	801a19a <ethernet_input+0x106>
        goto free_and_return;
 801a198:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a19a:	6878      	ldr	r0, [r7, #4]
 801a19c:	f7f5 f9ca 	bl	800f534 <pbuf_free>
  return ERR_OK;
 801a1a0:	2300      	movs	r3, #0
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3718      	adds	r7, #24
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bd80      	pop	{r7, pc}
 801a1aa:	bf00      	nop
 801a1ac:	0806c9f4 	.word	0x0806c9f4

0801a1b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b086      	sub	sp, #24
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60f8      	str	r0, [r7, #12]
 801a1b8:	60b9      	str	r1, [r7, #8]
 801a1ba:	607a      	str	r2, [r7, #4]
 801a1bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a1be:	8c3b      	ldrh	r3, [r7, #32]
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f7f3 fc95 	bl	800daf0 <lwip_htons>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a1ca:	210e      	movs	r1, #14
 801a1cc:	68b8      	ldr	r0, [r7, #8]
 801a1ce:	f7f5 f91b 	bl	800f408 <pbuf_add_header>
 801a1d2:	4603      	mov	r3, r0
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d125      	bne.n	801a224 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a1d8:	68bb      	ldr	r3, [r7, #8]
 801a1da:	685b      	ldr	r3, [r3, #4]
 801a1dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a1de:	693b      	ldr	r3, [r7, #16]
 801a1e0:	8afa      	ldrh	r2, [r7, #22]
 801a1e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a1e4:	693b      	ldr	r3, [r7, #16]
 801a1e6:	2206      	movs	r2, #6
 801a1e8:	6839      	ldr	r1, [r7, #0]
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f001 f9ff 	bl	801b5ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	3306      	adds	r3, #6
 801a1f4:	2206      	movs	r2, #6
 801a1f6:	6879      	ldr	r1, [r7, #4]
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f001 f9f8 	bl	801b5ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a204:	2b06      	cmp	r3, #6
 801a206:	d006      	beq.n	801a216 <ethernet_output+0x66>
 801a208:	4b0a      	ldr	r3, [pc, #40]	@ (801a234 <ethernet_output+0x84>)
 801a20a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801a20e:	490a      	ldr	r1, [pc, #40]	@ (801a238 <ethernet_output+0x88>)
 801a210:	480a      	ldr	r0, [pc, #40]	@ (801a23c <ethernet_output+0x8c>)
 801a212:	f000 ffcd 	bl	801b1b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	699b      	ldr	r3, [r3, #24]
 801a21a:	68b9      	ldr	r1, [r7, #8]
 801a21c:	68f8      	ldr	r0, [r7, #12]
 801a21e:	4798      	blx	r3
 801a220:	4603      	mov	r3, r0
 801a222:	e002      	b.n	801a22a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a224:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a226:	f06f 0301 	mvn.w	r3, #1
}
 801a22a:	4618      	mov	r0, r3
 801a22c:	3718      	adds	r7, #24
 801a22e:	46bd      	mov	sp, r7
 801a230:	bd80      	pop	{r7, pc}
 801a232:	bf00      	nop
 801a234:	08020b64 	.word	0x08020b64
 801a238:	08020b9c 	.word	0x08020b9c
 801a23c:	08020bd0 	.word	0x08020bd0

0801a240 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b084      	sub	sp, #16
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
 801a248:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	60bb      	str	r3, [r7, #8]
 801a24e:	2304      	movs	r3, #4
 801a250:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a252:	f107 0308 	add.w	r3, r7, #8
 801a256:	2100      	movs	r1, #0
 801a258:	4618      	mov	r0, r3
 801a25a:	f7ef fef4 	bl	800a046 <osMessageCreate>
 801a25e:	4602      	mov	r2, r0
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d102      	bne.n	801a272 <sys_mbox_new+0x32>
  return ERR_MEM;
 801a26c:	f04f 33ff 	mov.w	r3, #4294967295
 801a270:	e000      	b.n	801a274 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801a272:	2300      	movs	r3, #0
}
 801a274:	4618      	mov	r0, r3
 801a276:	3710      	adds	r7, #16
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}

0801a27c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
 801a284:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a286:	bf00      	nop
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	6839      	ldr	r1, [r7, #0]
 801a28e:	f04f 32ff 	mov.w	r2, #4294967295
 801a292:	4618      	mov	r0, r3
 801a294:	f7ef feea 	bl	800a06c <osMessagePut>
 801a298:	4603      	mov	r3, r0
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d1f4      	bne.n	801a288 <sys_mbox_post+0xc>
}
 801a29e:	bf00      	nop
 801a2a0:	bf00      	nop
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}

0801a2a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b084      	sub	sp, #16
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
 801a2b0:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	6839      	ldr	r1, [r7, #0]
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f7ef fed6 	bl	800a06c <osMessagePut>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d102      	bne.n	801a2cc <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	73fb      	strb	r3, [r7, #15]
 801a2ca:	e001      	b.n	801a2d0 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801a2cc:	23ff      	movs	r3, #255	@ 0xff
 801a2ce:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801a2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	3710      	adds	r7, #16
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}

0801a2dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b08c      	sub	sp, #48	@ 0x30
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	61f8      	str	r0, [r7, #28]
 801a2e4:	61b9      	str	r1, [r7, #24]
 801a2e6:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801a2e8:	f7ef fdb1 	bl	8009e4e <osKernelSysTick>
 801a2ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  
  if(timeout != 0)
 801a2ee:	697b      	ldr	r3, [r7, #20]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d017      	beq.n	801a324 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801a2f4:	69fb      	ldr	r3, [r7, #28]
 801a2f6:	6819      	ldr	r1, [r3, #0]
 801a2f8:	f107 0320 	add.w	r3, r7, #32
 801a2fc:	697a      	ldr	r2, [r7, #20]
 801a2fe:	4618      	mov	r0, r3
 801a300:	f7ef fef6 	bl	800a0f0 <osMessageGet>
    
    if(event.status == osEventMessage)
 801a304:	6a3b      	ldr	r3, [r7, #32]
 801a306:	2b10      	cmp	r3, #16
 801a308:	d109      	bne.n	801a31e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a30c:	461a      	mov	r2, r3
 801a30e:	69bb      	ldr	r3, [r7, #24]
 801a310:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a312:	f7ef fd9c 	bl	8009e4e <osKernelSysTick>
 801a316:	4602      	mov	r2, r0
 801a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a31a:	1ad3      	subs	r3, r2, r3
 801a31c:	e019      	b.n	801a352 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a31e:	f04f 33ff 	mov.w	r3, #4294967295
 801a322:	e016      	b.n	801a352 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801a324:	69fb      	ldr	r3, [r7, #28]
 801a326:	6819      	ldr	r1, [r3, #0]
 801a328:	463b      	mov	r3, r7
 801a32a:	f04f 32ff 	mov.w	r2, #4294967295
 801a32e:	4618      	mov	r0, r3
 801a330:	f7ef fede 	bl	800a0f0 <osMessageGet>
 801a334:	f107 0320 	add.w	r3, r7, #32
 801a338:	463a      	mov	r2, r7
 801a33a:	ca07      	ldmia	r2, {r0, r1, r2}
 801a33c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a342:	461a      	mov	r2, r3
 801a344:	69bb      	ldr	r3, [r7, #24]
 801a346:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a348:	f7ef fd81 	bl	8009e4e <osKernelSysTick>
 801a34c:	4602      	mov	r2, r0
 801a34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a350:	1ad3      	subs	r3, r2, r3
  }
}
 801a352:	4618      	mov	r0, r3
 801a354:	3730      	adds	r7, #48	@ 0x30
 801a356:	46bd      	mov	sp, r7
 801a358:	bd80      	pop	{r7, pc}

0801a35a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801a35a:	b480      	push	{r7}
 801a35c:	b083      	sub	sp, #12
 801a35e:	af00      	add	r7, sp, #0
 801a360:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d101      	bne.n	801a36e <sys_mbox_valid+0x14>
    return 0;
 801a36a:	2300      	movs	r3, #0
 801a36c:	e000      	b.n	801a370 <sys_mbox_valid+0x16>
  else
    return 1;
 801a36e:	2301      	movs	r3, #1
}                                             
 801a370:	4618      	mov	r0, r3
 801a372:	370c      	adds	r7, #12
 801a374:	46bd      	mov	sp, r7
 801a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37a:	4770      	bx	lr

0801a37c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a380:	4803      	ldr	r0, [pc, #12]	@ (801a390 <sys_init+0x14>)
 801a382:	f7ef fdbc 	bl	8009efe <osMutexCreate>
 801a386:	4603      	mov	r3, r0
 801a388:	4a02      	ldr	r2, [pc, #8]	@ (801a394 <sys_init+0x18>)
 801a38a:	6013      	str	r3, [r2, #0]
}
 801a38c:	bf00      	nop
 801a38e:	bd80      	pop	{r7, pc}
 801a390:	0806ca04 	.word	0x0806ca04
 801a394:	20013ef0 	.word	0x20013ef0

0801a398 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a398:	b580      	push	{r7, lr}
 801a39a:	b084      	sub	sp, #16
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a3a4:	f107 030c 	add.w	r3, r7, #12
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	f7ef fda8 	bl	8009efe <osMutexCreate>
 801a3ae:	4602      	mov	r2, r0
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d102      	bne.n	801a3c2 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a3c0:	e000      	b.n	801a3c4 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a3c2:	2300      	movs	r3, #0
}
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	3710      	adds	r7, #16
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}

0801a3cc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b082      	sub	sp, #8
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f04f 31ff 	mov.w	r1, #4294967295
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f7ef fd9b 	bl	8009f18 <osMutexWait>
}
 801a3e2:	bf00      	nop
 801a3e4:	3708      	adds	r7, #8
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	bd80      	pop	{r7, pc}

0801a3ea <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a3ea:	b580      	push	{r7, lr}
 801a3ec:	b082      	sub	sp, #8
 801a3ee:	af00      	add	r7, sp, #0
 801a3f0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f7ef fddc 	bl	8009fb4 <osMutexRelease>
}
 801a3fc:	bf00      	nop
 801a3fe:	3708      	adds	r7, #8
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}

0801a404 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b08a      	sub	sp, #40	@ 0x28
 801a408:	af00      	add	r7, sp, #0
 801a40a:	60f8      	str	r0, [r7, #12]
 801a40c:	60b9      	str	r1, [r7, #8]
 801a40e:	607a      	str	r2, [r7, #4]
 801a410:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	617b      	str	r3, [r7, #20]
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	61bb      	str	r3, [r7, #24]
 801a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a41c:	b21b      	sxth	r3, r3
 801a41e:	83bb      	strh	r3, [r7, #28]
 801a420:	2300      	movs	r3, #0
 801a422:	623b      	str	r3, [r7, #32]
 801a424:	683b      	ldr	r3, [r7, #0]
 801a426:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a428:	f107 0314 	add.w	r3, r7, #20
 801a42c:	6879      	ldr	r1, [r7, #4]
 801a42e:	4618      	mov	r0, r3
 801a430:	f7ef fd1d 	bl	8009e6e <osThreadCreate>
 801a434:	4603      	mov	r3, r0
}
 801a436:	4618      	mov	r0, r3
 801a438:	3728      	adds	r7, #40	@ 0x28
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}
	...

0801a440 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a444:	4b04      	ldr	r3, [pc, #16]	@ (801a458 <sys_arch_protect+0x18>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	f04f 31ff 	mov.w	r1, #4294967295
 801a44c:	4618      	mov	r0, r3
 801a44e:	f7ef fd63 	bl	8009f18 <osMutexWait>
  return (sys_prot_t)1;
 801a452:	2301      	movs	r3, #1
}
 801a454:	4618      	mov	r0, r3
 801a456:	bd80      	pop	{r7, pc}
 801a458:	20013ef0 	.word	0x20013ef0

0801a45c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a464:	4b04      	ldr	r3, [pc, #16]	@ (801a478 <sys_arch_unprotect+0x1c>)
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	4618      	mov	r0, r3
 801a46a:	f7ef fda3 	bl	8009fb4 <osMutexRelease>
}
 801a46e:	bf00      	nop
 801a470:	3708      	adds	r7, #8
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
 801a476:	bf00      	nop
 801a478:	20013ef0 	.word	0x20013ef0

0801a47c <_calloc_r>:
 801a47c:	b570      	push	{r4, r5, r6, lr}
 801a47e:	fba1 5402 	umull	r5, r4, r1, r2
 801a482:	b93c      	cbnz	r4, 801a494 <_calloc_r+0x18>
 801a484:	4629      	mov	r1, r5
 801a486:	f000 f837 	bl	801a4f8 <_malloc_r>
 801a48a:	4606      	mov	r6, r0
 801a48c:	b928      	cbnz	r0, 801a49a <_calloc_r+0x1e>
 801a48e:	2600      	movs	r6, #0
 801a490:	4630      	mov	r0, r6
 801a492:	bd70      	pop	{r4, r5, r6, pc}
 801a494:	220c      	movs	r2, #12
 801a496:	6002      	str	r2, [r0, #0]
 801a498:	e7f9      	b.n	801a48e <_calloc_r+0x12>
 801a49a:	462a      	mov	r2, r5
 801a49c:	4621      	mov	r1, r4
 801a49e:	f000 ffe9 	bl	801b474 <memset>
 801a4a2:	e7f5      	b.n	801a490 <_calloc_r+0x14>

0801a4a4 <malloc>:
 801a4a4:	4b02      	ldr	r3, [pc, #8]	@ (801a4b0 <malloc+0xc>)
 801a4a6:	4601      	mov	r1, r0
 801a4a8:	6818      	ldr	r0, [r3, #0]
 801a4aa:	f000 b825 	b.w	801a4f8 <_malloc_r>
 801a4ae:	bf00      	nop
 801a4b0:	200000cc 	.word	0x200000cc

0801a4b4 <sbrk_aligned>:
 801a4b4:	b570      	push	{r4, r5, r6, lr}
 801a4b6:	4e0f      	ldr	r6, [pc, #60]	@ (801a4f4 <sbrk_aligned+0x40>)
 801a4b8:	460c      	mov	r4, r1
 801a4ba:	6831      	ldr	r1, [r6, #0]
 801a4bc:	4605      	mov	r5, r0
 801a4be:	b911      	cbnz	r1, 801a4c6 <sbrk_aligned+0x12>
 801a4c0:	f001 f83e 	bl	801b540 <_sbrk_r>
 801a4c4:	6030      	str	r0, [r6, #0]
 801a4c6:	4621      	mov	r1, r4
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	f001 f839 	bl	801b540 <_sbrk_r>
 801a4ce:	1c43      	adds	r3, r0, #1
 801a4d0:	d103      	bne.n	801a4da <sbrk_aligned+0x26>
 801a4d2:	f04f 34ff 	mov.w	r4, #4294967295
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	bd70      	pop	{r4, r5, r6, pc}
 801a4da:	1cc4      	adds	r4, r0, #3
 801a4dc:	f024 0403 	bic.w	r4, r4, #3
 801a4e0:	42a0      	cmp	r0, r4
 801a4e2:	d0f8      	beq.n	801a4d6 <sbrk_aligned+0x22>
 801a4e4:	1a21      	subs	r1, r4, r0
 801a4e6:	4628      	mov	r0, r5
 801a4e8:	f001 f82a 	bl	801b540 <_sbrk_r>
 801a4ec:	3001      	adds	r0, #1
 801a4ee:	d1f2      	bne.n	801a4d6 <sbrk_aligned+0x22>
 801a4f0:	e7ef      	b.n	801a4d2 <sbrk_aligned+0x1e>
 801a4f2:	bf00      	nop
 801a4f4:	20013ef4 	.word	0x20013ef4

0801a4f8 <_malloc_r>:
 801a4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4fc:	1ccd      	adds	r5, r1, #3
 801a4fe:	f025 0503 	bic.w	r5, r5, #3
 801a502:	3508      	adds	r5, #8
 801a504:	2d0c      	cmp	r5, #12
 801a506:	bf38      	it	cc
 801a508:	250c      	movcc	r5, #12
 801a50a:	2d00      	cmp	r5, #0
 801a50c:	4606      	mov	r6, r0
 801a50e:	db01      	blt.n	801a514 <_malloc_r+0x1c>
 801a510:	42a9      	cmp	r1, r5
 801a512:	d904      	bls.n	801a51e <_malloc_r+0x26>
 801a514:	230c      	movs	r3, #12
 801a516:	6033      	str	r3, [r6, #0]
 801a518:	2000      	movs	r0, #0
 801a51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a51e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a5f4 <_malloc_r+0xfc>
 801a522:	f000 f869 	bl	801a5f8 <__malloc_lock>
 801a526:	f8d8 3000 	ldr.w	r3, [r8]
 801a52a:	461c      	mov	r4, r3
 801a52c:	bb44      	cbnz	r4, 801a580 <_malloc_r+0x88>
 801a52e:	4629      	mov	r1, r5
 801a530:	4630      	mov	r0, r6
 801a532:	f7ff ffbf 	bl	801a4b4 <sbrk_aligned>
 801a536:	1c43      	adds	r3, r0, #1
 801a538:	4604      	mov	r4, r0
 801a53a:	d158      	bne.n	801a5ee <_malloc_r+0xf6>
 801a53c:	f8d8 4000 	ldr.w	r4, [r8]
 801a540:	4627      	mov	r7, r4
 801a542:	2f00      	cmp	r7, #0
 801a544:	d143      	bne.n	801a5ce <_malloc_r+0xd6>
 801a546:	2c00      	cmp	r4, #0
 801a548:	d04b      	beq.n	801a5e2 <_malloc_r+0xea>
 801a54a:	6823      	ldr	r3, [r4, #0]
 801a54c:	4639      	mov	r1, r7
 801a54e:	4630      	mov	r0, r6
 801a550:	eb04 0903 	add.w	r9, r4, r3
 801a554:	f000 fff4 	bl	801b540 <_sbrk_r>
 801a558:	4581      	cmp	r9, r0
 801a55a:	d142      	bne.n	801a5e2 <_malloc_r+0xea>
 801a55c:	6821      	ldr	r1, [r4, #0]
 801a55e:	1a6d      	subs	r5, r5, r1
 801a560:	4629      	mov	r1, r5
 801a562:	4630      	mov	r0, r6
 801a564:	f7ff ffa6 	bl	801a4b4 <sbrk_aligned>
 801a568:	3001      	adds	r0, #1
 801a56a:	d03a      	beq.n	801a5e2 <_malloc_r+0xea>
 801a56c:	6823      	ldr	r3, [r4, #0]
 801a56e:	442b      	add	r3, r5
 801a570:	6023      	str	r3, [r4, #0]
 801a572:	f8d8 3000 	ldr.w	r3, [r8]
 801a576:	685a      	ldr	r2, [r3, #4]
 801a578:	bb62      	cbnz	r2, 801a5d4 <_malloc_r+0xdc>
 801a57a:	f8c8 7000 	str.w	r7, [r8]
 801a57e:	e00f      	b.n	801a5a0 <_malloc_r+0xa8>
 801a580:	6822      	ldr	r2, [r4, #0]
 801a582:	1b52      	subs	r2, r2, r5
 801a584:	d420      	bmi.n	801a5c8 <_malloc_r+0xd0>
 801a586:	2a0b      	cmp	r2, #11
 801a588:	d917      	bls.n	801a5ba <_malloc_r+0xc2>
 801a58a:	1961      	adds	r1, r4, r5
 801a58c:	42a3      	cmp	r3, r4
 801a58e:	6025      	str	r5, [r4, #0]
 801a590:	bf18      	it	ne
 801a592:	6059      	strne	r1, [r3, #4]
 801a594:	6863      	ldr	r3, [r4, #4]
 801a596:	bf08      	it	eq
 801a598:	f8c8 1000 	streq.w	r1, [r8]
 801a59c:	5162      	str	r2, [r4, r5]
 801a59e:	604b      	str	r3, [r1, #4]
 801a5a0:	4630      	mov	r0, r6
 801a5a2:	f000 f82f 	bl	801a604 <__malloc_unlock>
 801a5a6:	f104 000b 	add.w	r0, r4, #11
 801a5aa:	1d23      	adds	r3, r4, #4
 801a5ac:	f020 0007 	bic.w	r0, r0, #7
 801a5b0:	1ac2      	subs	r2, r0, r3
 801a5b2:	bf1c      	itt	ne
 801a5b4:	1a1b      	subne	r3, r3, r0
 801a5b6:	50a3      	strne	r3, [r4, r2]
 801a5b8:	e7af      	b.n	801a51a <_malloc_r+0x22>
 801a5ba:	6862      	ldr	r2, [r4, #4]
 801a5bc:	42a3      	cmp	r3, r4
 801a5be:	bf0c      	ite	eq
 801a5c0:	f8c8 2000 	streq.w	r2, [r8]
 801a5c4:	605a      	strne	r2, [r3, #4]
 801a5c6:	e7eb      	b.n	801a5a0 <_malloc_r+0xa8>
 801a5c8:	4623      	mov	r3, r4
 801a5ca:	6864      	ldr	r4, [r4, #4]
 801a5cc:	e7ae      	b.n	801a52c <_malloc_r+0x34>
 801a5ce:	463c      	mov	r4, r7
 801a5d0:	687f      	ldr	r7, [r7, #4]
 801a5d2:	e7b6      	b.n	801a542 <_malloc_r+0x4a>
 801a5d4:	461a      	mov	r2, r3
 801a5d6:	685b      	ldr	r3, [r3, #4]
 801a5d8:	42a3      	cmp	r3, r4
 801a5da:	d1fb      	bne.n	801a5d4 <_malloc_r+0xdc>
 801a5dc:	2300      	movs	r3, #0
 801a5de:	6053      	str	r3, [r2, #4]
 801a5e0:	e7de      	b.n	801a5a0 <_malloc_r+0xa8>
 801a5e2:	230c      	movs	r3, #12
 801a5e4:	6033      	str	r3, [r6, #0]
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f000 f80c 	bl	801a604 <__malloc_unlock>
 801a5ec:	e794      	b.n	801a518 <_malloc_r+0x20>
 801a5ee:	6005      	str	r5, [r0, #0]
 801a5f0:	e7d6      	b.n	801a5a0 <_malloc_r+0xa8>
 801a5f2:	bf00      	nop
 801a5f4:	20013ef8 	.word	0x20013ef8

0801a5f8 <__malloc_lock>:
 801a5f8:	4801      	ldr	r0, [pc, #4]	@ (801a600 <__malloc_lock+0x8>)
 801a5fa:	f000 bfee 	b.w	801b5da <__retarget_lock_acquire_recursive>
 801a5fe:	bf00      	nop
 801a600:	2001403c 	.word	0x2001403c

0801a604 <__malloc_unlock>:
 801a604:	4801      	ldr	r0, [pc, #4]	@ (801a60c <__malloc_unlock+0x8>)
 801a606:	f000 bfe9 	b.w	801b5dc <__retarget_lock_release_recursive>
 801a60a:	bf00      	nop
 801a60c:	2001403c 	.word	0x2001403c

0801a610 <rand>:
 801a610:	4b16      	ldr	r3, [pc, #88]	@ (801a66c <rand+0x5c>)
 801a612:	b510      	push	{r4, lr}
 801a614:	681c      	ldr	r4, [r3, #0]
 801a616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a618:	b9b3      	cbnz	r3, 801a648 <rand+0x38>
 801a61a:	2018      	movs	r0, #24
 801a61c:	f7ff ff42 	bl	801a4a4 <malloc>
 801a620:	4602      	mov	r2, r0
 801a622:	6320      	str	r0, [r4, #48]	@ 0x30
 801a624:	b920      	cbnz	r0, 801a630 <rand+0x20>
 801a626:	4b12      	ldr	r3, [pc, #72]	@ (801a670 <rand+0x60>)
 801a628:	4812      	ldr	r0, [pc, #72]	@ (801a674 <rand+0x64>)
 801a62a:	2152      	movs	r1, #82	@ 0x52
 801a62c:	f000 ffee 	bl	801b60c <__assert_func>
 801a630:	4911      	ldr	r1, [pc, #68]	@ (801a678 <rand+0x68>)
 801a632:	4b12      	ldr	r3, [pc, #72]	@ (801a67c <rand+0x6c>)
 801a634:	e9c0 1300 	strd	r1, r3, [r0]
 801a638:	4b11      	ldr	r3, [pc, #68]	@ (801a680 <rand+0x70>)
 801a63a:	6083      	str	r3, [r0, #8]
 801a63c:	230b      	movs	r3, #11
 801a63e:	8183      	strh	r3, [r0, #12]
 801a640:	2100      	movs	r1, #0
 801a642:	2001      	movs	r0, #1
 801a644:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a648:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a64a:	480e      	ldr	r0, [pc, #56]	@ (801a684 <rand+0x74>)
 801a64c:	690b      	ldr	r3, [r1, #16]
 801a64e:	694c      	ldr	r4, [r1, #20]
 801a650:	4a0d      	ldr	r2, [pc, #52]	@ (801a688 <rand+0x78>)
 801a652:	4358      	muls	r0, r3
 801a654:	fb02 0004 	mla	r0, r2, r4, r0
 801a658:	fba3 3202 	umull	r3, r2, r3, r2
 801a65c:	3301      	adds	r3, #1
 801a65e:	eb40 0002 	adc.w	r0, r0, r2
 801a662:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a666:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a66a:	bd10      	pop	{r4, pc}
 801a66c:	200000cc 	.word	0x200000cc
 801a670:	0806ca08 	.word	0x0806ca08
 801a674:	0806ca1f 	.word	0x0806ca1f
 801a678:	abcd330e 	.word	0xabcd330e
 801a67c:	e66d1234 	.word	0xe66d1234
 801a680:	0005deec 	.word	0x0005deec
 801a684:	5851f42d 	.word	0x5851f42d
 801a688:	4c957f2d 	.word	0x4c957f2d

0801a68c <_strtoul_l.constprop.0>:
 801a68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a690:	4e34      	ldr	r6, [pc, #208]	@ (801a764 <_strtoul_l.constprop.0+0xd8>)
 801a692:	4686      	mov	lr, r0
 801a694:	460d      	mov	r5, r1
 801a696:	4628      	mov	r0, r5
 801a698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a69c:	5d37      	ldrb	r7, [r6, r4]
 801a69e:	f017 0708 	ands.w	r7, r7, #8
 801a6a2:	d1f8      	bne.n	801a696 <_strtoul_l.constprop.0+0xa>
 801a6a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a6a6:	d12f      	bne.n	801a708 <_strtoul_l.constprop.0+0x7c>
 801a6a8:	782c      	ldrb	r4, [r5, #0]
 801a6aa:	2701      	movs	r7, #1
 801a6ac:	1c85      	adds	r5, r0, #2
 801a6ae:	f033 0010 	bics.w	r0, r3, #16
 801a6b2:	d109      	bne.n	801a6c8 <_strtoul_l.constprop.0+0x3c>
 801a6b4:	2c30      	cmp	r4, #48	@ 0x30
 801a6b6:	d12c      	bne.n	801a712 <_strtoul_l.constprop.0+0x86>
 801a6b8:	7828      	ldrb	r0, [r5, #0]
 801a6ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a6be:	2858      	cmp	r0, #88	@ 0x58
 801a6c0:	d127      	bne.n	801a712 <_strtoul_l.constprop.0+0x86>
 801a6c2:	786c      	ldrb	r4, [r5, #1]
 801a6c4:	2310      	movs	r3, #16
 801a6c6:	3502      	adds	r5, #2
 801a6c8:	f04f 38ff 	mov.w	r8, #4294967295
 801a6cc:	2600      	movs	r6, #0
 801a6ce:	fbb8 f8f3 	udiv	r8, r8, r3
 801a6d2:	fb03 f908 	mul.w	r9, r3, r8
 801a6d6:	ea6f 0909 	mvn.w	r9, r9
 801a6da:	4630      	mov	r0, r6
 801a6dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a6e0:	f1bc 0f09 	cmp.w	ip, #9
 801a6e4:	d81c      	bhi.n	801a720 <_strtoul_l.constprop.0+0x94>
 801a6e6:	4664      	mov	r4, ip
 801a6e8:	42a3      	cmp	r3, r4
 801a6ea:	dd2a      	ble.n	801a742 <_strtoul_l.constprop.0+0xb6>
 801a6ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 801a6f0:	d007      	beq.n	801a702 <_strtoul_l.constprop.0+0x76>
 801a6f2:	4580      	cmp	r8, r0
 801a6f4:	d322      	bcc.n	801a73c <_strtoul_l.constprop.0+0xb0>
 801a6f6:	d101      	bne.n	801a6fc <_strtoul_l.constprop.0+0x70>
 801a6f8:	45a1      	cmp	r9, r4
 801a6fa:	db1f      	blt.n	801a73c <_strtoul_l.constprop.0+0xb0>
 801a6fc:	fb00 4003 	mla	r0, r0, r3, r4
 801a700:	2601      	movs	r6, #1
 801a702:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a706:	e7e9      	b.n	801a6dc <_strtoul_l.constprop.0+0x50>
 801a708:	2c2b      	cmp	r4, #43	@ 0x2b
 801a70a:	bf04      	itt	eq
 801a70c:	782c      	ldrbeq	r4, [r5, #0]
 801a70e:	1c85      	addeq	r5, r0, #2
 801a710:	e7cd      	b.n	801a6ae <_strtoul_l.constprop.0+0x22>
 801a712:	2b00      	cmp	r3, #0
 801a714:	d1d8      	bne.n	801a6c8 <_strtoul_l.constprop.0+0x3c>
 801a716:	2c30      	cmp	r4, #48	@ 0x30
 801a718:	bf0c      	ite	eq
 801a71a:	2308      	moveq	r3, #8
 801a71c:	230a      	movne	r3, #10
 801a71e:	e7d3      	b.n	801a6c8 <_strtoul_l.constprop.0+0x3c>
 801a720:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a724:	f1bc 0f19 	cmp.w	ip, #25
 801a728:	d801      	bhi.n	801a72e <_strtoul_l.constprop.0+0xa2>
 801a72a:	3c37      	subs	r4, #55	@ 0x37
 801a72c:	e7dc      	b.n	801a6e8 <_strtoul_l.constprop.0+0x5c>
 801a72e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a732:	f1bc 0f19 	cmp.w	ip, #25
 801a736:	d804      	bhi.n	801a742 <_strtoul_l.constprop.0+0xb6>
 801a738:	3c57      	subs	r4, #87	@ 0x57
 801a73a:	e7d5      	b.n	801a6e8 <_strtoul_l.constprop.0+0x5c>
 801a73c:	f04f 36ff 	mov.w	r6, #4294967295
 801a740:	e7df      	b.n	801a702 <_strtoul_l.constprop.0+0x76>
 801a742:	1c73      	adds	r3, r6, #1
 801a744:	d106      	bne.n	801a754 <_strtoul_l.constprop.0+0xc8>
 801a746:	2322      	movs	r3, #34	@ 0x22
 801a748:	f8ce 3000 	str.w	r3, [lr]
 801a74c:	4630      	mov	r0, r6
 801a74e:	b932      	cbnz	r2, 801a75e <_strtoul_l.constprop.0+0xd2>
 801a750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a754:	b107      	cbz	r7, 801a758 <_strtoul_l.constprop.0+0xcc>
 801a756:	4240      	negs	r0, r0
 801a758:	2a00      	cmp	r2, #0
 801a75a:	d0f9      	beq.n	801a750 <_strtoul_l.constprop.0+0xc4>
 801a75c:	b106      	cbz	r6, 801a760 <_strtoul_l.constprop.0+0xd4>
 801a75e:	1e69      	subs	r1, r5, #1
 801a760:	6011      	str	r1, [r2, #0]
 801a762:	e7f5      	b.n	801a750 <_strtoul_l.constprop.0+0xc4>
 801a764:	0806ca78 	.word	0x0806ca78

0801a768 <strtoul>:
 801a768:	4613      	mov	r3, r2
 801a76a:	460a      	mov	r2, r1
 801a76c:	4601      	mov	r1, r0
 801a76e:	4802      	ldr	r0, [pc, #8]	@ (801a778 <strtoul+0x10>)
 801a770:	6800      	ldr	r0, [r0, #0]
 801a772:	f7ff bf8b 	b.w	801a68c <_strtoul_l.constprop.0>
 801a776:	bf00      	nop
 801a778:	200000cc 	.word	0x200000cc

0801a77c <__cvt>:
 801a77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a780:	ec57 6b10 	vmov	r6, r7, d0
 801a784:	2f00      	cmp	r7, #0
 801a786:	460c      	mov	r4, r1
 801a788:	4619      	mov	r1, r3
 801a78a:	463b      	mov	r3, r7
 801a78c:	bfbb      	ittet	lt
 801a78e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a792:	461f      	movlt	r7, r3
 801a794:	2300      	movge	r3, #0
 801a796:	232d      	movlt	r3, #45	@ 0x2d
 801a798:	700b      	strb	r3, [r1, #0]
 801a79a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a79c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a7a0:	4691      	mov	r9, r2
 801a7a2:	f023 0820 	bic.w	r8, r3, #32
 801a7a6:	bfbc      	itt	lt
 801a7a8:	4632      	movlt	r2, r6
 801a7aa:	4616      	movlt	r6, r2
 801a7ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a7b0:	d005      	beq.n	801a7be <__cvt+0x42>
 801a7b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a7b6:	d100      	bne.n	801a7ba <__cvt+0x3e>
 801a7b8:	3401      	adds	r4, #1
 801a7ba:	2102      	movs	r1, #2
 801a7bc:	e000      	b.n	801a7c0 <__cvt+0x44>
 801a7be:	2103      	movs	r1, #3
 801a7c0:	ab03      	add	r3, sp, #12
 801a7c2:	9301      	str	r3, [sp, #4]
 801a7c4:	ab02      	add	r3, sp, #8
 801a7c6:	9300      	str	r3, [sp, #0]
 801a7c8:	ec47 6b10 	vmov	d0, r6, r7
 801a7cc:	4653      	mov	r3, sl
 801a7ce:	4622      	mov	r2, r4
 801a7d0:	f000 ffc2 	bl	801b758 <_dtoa_r>
 801a7d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a7d8:	4605      	mov	r5, r0
 801a7da:	d119      	bne.n	801a810 <__cvt+0x94>
 801a7dc:	f019 0f01 	tst.w	r9, #1
 801a7e0:	d00e      	beq.n	801a800 <__cvt+0x84>
 801a7e2:	eb00 0904 	add.w	r9, r0, r4
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	4630      	mov	r0, r6
 801a7ec:	4639      	mov	r1, r7
 801a7ee:	f7e6 f983 	bl	8000af8 <__aeabi_dcmpeq>
 801a7f2:	b108      	cbz	r0, 801a7f8 <__cvt+0x7c>
 801a7f4:	f8cd 900c 	str.w	r9, [sp, #12]
 801a7f8:	2230      	movs	r2, #48	@ 0x30
 801a7fa:	9b03      	ldr	r3, [sp, #12]
 801a7fc:	454b      	cmp	r3, r9
 801a7fe:	d31e      	bcc.n	801a83e <__cvt+0xc2>
 801a800:	9b03      	ldr	r3, [sp, #12]
 801a802:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a804:	1b5b      	subs	r3, r3, r5
 801a806:	4628      	mov	r0, r5
 801a808:	6013      	str	r3, [r2, #0]
 801a80a:	b004      	add	sp, #16
 801a80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a810:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a814:	eb00 0904 	add.w	r9, r0, r4
 801a818:	d1e5      	bne.n	801a7e6 <__cvt+0x6a>
 801a81a:	7803      	ldrb	r3, [r0, #0]
 801a81c:	2b30      	cmp	r3, #48	@ 0x30
 801a81e:	d10a      	bne.n	801a836 <__cvt+0xba>
 801a820:	2200      	movs	r2, #0
 801a822:	2300      	movs	r3, #0
 801a824:	4630      	mov	r0, r6
 801a826:	4639      	mov	r1, r7
 801a828:	f7e6 f966 	bl	8000af8 <__aeabi_dcmpeq>
 801a82c:	b918      	cbnz	r0, 801a836 <__cvt+0xba>
 801a82e:	f1c4 0401 	rsb	r4, r4, #1
 801a832:	f8ca 4000 	str.w	r4, [sl]
 801a836:	f8da 3000 	ldr.w	r3, [sl]
 801a83a:	4499      	add	r9, r3
 801a83c:	e7d3      	b.n	801a7e6 <__cvt+0x6a>
 801a83e:	1c59      	adds	r1, r3, #1
 801a840:	9103      	str	r1, [sp, #12]
 801a842:	701a      	strb	r2, [r3, #0]
 801a844:	e7d9      	b.n	801a7fa <__cvt+0x7e>

0801a846 <__exponent>:
 801a846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a848:	2900      	cmp	r1, #0
 801a84a:	bfba      	itte	lt
 801a84c:	4249      	neglt	r1, r1
 801a84e:	232d      	movlt	r3, #45	@ 0x2d
 801a850:	232b      	movge	r3, #43	@ 0x2b
 801a852:	2909      	cmp	r1, #9
 801a854:	7002      	strb	r2, [r0, #0]
 801a856:	7043      	strb	r3, [r0, #1]
 801a858:	dd29      	ble.n	801a8ae <__exponent+0x68>
 801a85a:	f10d 0307 	add.w	r3, sp, #7
 801a85e:	461d      	mov	r5, r3
 801a860:	270a      	movs	r7, #10
 801a862:	461a      	mov	r2, r3
 801a864:	fbb1 f6f7 	udiv	r6, r1, r7
 801a868:	fb07 1416 	mls	r4, r7, r6, r1
 801a86c:	3430      	adds	r4, #48	@ 0x30
 801a86e:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a872:	460c      	mov	r4, r1
 801a874:	2c63      	cmp	r4, #99	@ 0x63
 801a876:	f103 33ff 	add.w	r3, r3, #4294967295
 801a87a:	4631      	mov	r1, r6
 801a87c:	dcf1      	bgt.n	801a862 <__exponent+0x1c>
 801a87e:	3130      	adds	r1, #48	@ 0x30
 801a880:	1e94      	subs	r4, r2, #2
 801a882:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a886:	1c41      	adds	r1, r0, #1
 801a888:	4623      	mov	r3, r4
 801a88a:	42ab      	cmp	r3, r5
 801a88c:	d30a      	bcc.n	801a8a4 <__exponent+0x5e>
 801a88e:	f10d 0309 	add.w	r3, sp, #9
 801a892:	1a9b      	subs	r3, r3, r2
 801a894:	42ac      	cmp	r4, r5
 801a896:	bf88      	it	hi
 801a898:	2300      	movhi	r3, #0
 801a89a:	3302      	adds	r3, #2
 801a89c:	4403      	add	r3, r0
 801a89e:	1a18      	subs	r0, r3, r0
 801a8a0:	b003      	add	sp, #12
 801a8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a8a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a8ac:	e7ed      	b.n	801a88a <__exponent+0x44>
 801a8ae:	2330      	movs	r3, #48	@ 0x30
 801a8b0:	3130      	adds	r1, #48	@ 0x30
 801a8b2:	7083      	strb	r3, [r0, #2]
 801a8b4:	70c1      	strb	r1, [r0, #3]
 801a8b6:	1d03      	adds	r3, r0, #4
 801a8b8:	e7f1      	b.n	801a89e <__exponent+0x58>
	...

0801a8bc <_printf_float>:
 801a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8c0:	b08d      	sub	sp, #52	@ 0x34
 801a8c2:	460c      	mov	r4, r1
 801a8c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a8c8:	4616      	mov	r6, r2
 801a8ca:	461f      	mov	r7, r3
 801a8cc:	4605      	mov	r5, r0
 801a8ce:	f000 fdff 	bl	801b4d0 <_localeconv_r>
 801a8d2:	6803      	ldr	r3, [r0, #0]
 801a8d4:	9304      	str	r3, [sp, #16]
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	f7e5 fce2 	bl	80002a0 <strlen>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	930a      	str	r3, [sp, #40]	@ 0x28
 801a8e0:	f8d8 3000 	ldr.w	r3, [r8]
 801a8e4:	9005      	str	r0, [sp, #20]
 801a8e6:	3307      	adds	r3, #7
 801a8e8:	f023 0307 	bic.w	r3, r3, #7
 801a8ec:	f103 0208 	add.w	r2, r3, #8
 801a8f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a8f4:	f8d4 b000 	ldr.w	fp, [r4]
 801a8f8:	f8c8 2000 	str.w	r2, [r8]
 801a8fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a900:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a904:	9307      	str	r3, [sp, #28]
 801a906:	f8cd 8018 	str.w	r8, [sp, #24]
 801a90a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a912:	4b9c      	ldr	r3, [pc, #624]	@ (801ab84 <_printf_float+0x2c8>)
 801a914:	f04f 32ff 	mov.w	r2, #4294967295
 801a918:	f7e6 f920 	bl	8000b5c <__aeabi_dcmpun>
 801a91c:	bb70      	cbnz	r0, 801a97c <_printf_float+0xc0>
 801a91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a922:	4b98      	ldr	r3, [pc, #608]	@ (801ab84 <_printf_float+0x2c8>)
 801a924:	f04f 32ff 	mov.w	r2, #4294967295
 801a928:	f7e6 f8fa 	bl	8000b20 <__aeabi_dcmple>
 801a92c:	bb30      	cbnz	r0, 801a97c <_printf_float+0xc0>
 801a92e:	2200      	movs	r2, #0
 801a930:	2300      	movs	r3, #0
 801a932:	4640      	mov	r0, r8
 801a934:	4649      	mov	r1, r9
 801a936:	f7e6 f8e9 	bl	8000b0c <__aeabi_dcmplt>
 801a93a:	b110      	cbz	r0, 801a942 <_printf_float+0x86>
 801a93c:	232d      	movs	r3, #45	@ 0x2d
 801a93e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a942:	4a91      	ldr	r2, [pc, #580]	@ (801ab88 <_printf_float+0x2cc>)
 801a944:	4b91      	ldr	r3, [pc, #580]	@ (801ab8c <_printf_float+0x2d0>)
 801a946:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a94a:	bf94      	ite	ls
 801a94c:	4690      	movls	r8, r2
 801a94e:	4698      	movhi	r8, r3
 801a950:	2303      	movs	r3, #3
 801a952:	6123      	str	r3, [r4, #16]
 801a954:	f02b 0304 	bic.w	r3, fp, #4
 801a958:	6023      	str	r3, [r4, #0]
 801a95a:	f04f 0900 	mov.w	r9, #0
 801a95e:	9700      	str	r7, [sp, #0]
 801a960:	4633      	mov	r3, r6
 801a962:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a964:	4621      	mov	r1, r4
 801a966:	4628      	mov	r0, r5
 801a968:	f000 f9d2 	bl	801ad10 <_printf_common>
 801a96c:	3001      	adds	r0, #1
 801a96e:	f040 808d 	bne.w	801aa8c <_printf_float+0x1d0>
 801a972:	f04f 30ff 	mov.w	r0, #4294967295
 801a976:	b00d      	add	sp, #52	@ 0x34
 801a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a97c:	4642      	mov	r2, r8
 801a97e:	464b      	mov	r3, r9
 801a980:	4640      	mov	r0, r8
 801a982:	4649      	mov	r1, r9
 801a984:	f7e6 f8ea 	bl	8000b5c <__aeabi_dcmpun>
 801a988:	b140      	cbz	r0, 801a99c <_printf_float+0xe0>
 801a98a:	464b      	mov	r3, r9
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	bfbc      	itt	lt
 801a990:	232d      	movlt	r3, #45	@ 0x2d
 801a992:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a996:	4a7e      	ldr	r2, [pc, #504]	@ (801ab90 <_printf_float+0x2d4>)
 801a998:	4b7e      	ldr	r3, [pc, #504]	@ (801ab94 <_printf_float+0x2d8>)
 801a99a:	e7d4      	b.n	801a946 <_printf_float+0x8a>
 801a99c:	6863      	ldr	r3, [r4, #4]
 801a99e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a9a2:	9206      	str	r2, [sp, #24]
 801a9a4:	1c5a      	adds	r2, r3, #1
 801a9a6:	d13b      	bne.n	801aa20 <_printf_float+0x164>
 801a9a8:	2306      	movs	r3, #6
 801a9aa:	6063      	str	r3, [r4, #4]
 801a9ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	6022      	str	r2, [r4, #0]
 801a9b4:	9303      	str	r3, [sp, #12]
 801a9b6:	ab0a      	add	r3, sp, #40	@ 0x28
 801a9b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a9bc:	ab09      	add	r3, sp, #36	@ 0x24
 801a9be:	9300      	str	r3, [sp, #0]
 801a9c0:	6861      	ldr	r1, [r4, #4]
 801a9c2:	ec49 8b10 	vmov	d0, r8, r9
 801a9c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a9ca:	4628      	mov	r0, r5
 801a9cc:	f7ff fed6 	bl	801a77c <__cvt>
 801a9d0:	9b06      	ldr	r3, [sp, #24]
 801a9d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a9d4:	2b47      	cmp	r3, #71	@ 0x47
 801a9d6:	4680      	mov	r8, r0
 801a9d8:	d129      	bne.n	801aa2e <_printf_float+0x172>
 801a9da:	1cc8      	adds	r0, r1, #3
 801a9dc:	db02      	blt.n	801a9e4 <_printf_float+0x128>
 801a9de:	6863      	ldr	r3, [r4, #4]
 801a9e0:	4299      	cmp	r1, r3
 801a9e2:	dd41      	ble.n	801aa68 <_printf_float+0x1ac>
 801a9e4:	f1aa 0a02 	sub.w	sl, sl, #2
 801a9e8:	fa5f fa8a 	uxtb.w	sl, sl
 801a9ec:	3901      	subs	r1, #1
 801a9ee:	4652      	mov	r2, sl
 801a9f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a9f4:	9109      	str	r1, [sp, #36]	@ 0x24
 801a9f6:	f7ff ff26 	bl	801a846 <__exponent>
 801a9fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a9fc:	1813      	adds	r3, r2, r0
 801a9fe:	2a01      	cmp	r2, #1
 801aa00:	4681      	mov	r9, r0
 801aa02:	6123      	str	r3, [r4, #16]
 801aa04:	dc02      	bgt.n	801aa0c <_printf_float+0x150>
 801aa06:	6822      	ldr	r2, [r4, #0]
 801aa08:	07d2      	lsls	r2, r2, #31
 801aa0a:	d501      	bpl.n	801aa10 <_printf_float+0x154>
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	6123      	str	r3, [r4, #16]
 801aa10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d0a2      	beq.n	801a95e <_printf_float+0xa2>
 801aa18:	232d      	movs	r3, #45	@ 0x2d
 801aa1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa1e:	e79e      	b.n	801a95e <_printf_float+0xa2>
 801aa20:	9a06      	ldr	r2, [sp, #24]
 801aa22:	2a47      	cmp	r2, #71	@ 0x47
 801aa24:	d1c2      	bne.n	801a9ac <_printf_float+0xf0>
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d1c0      	bne.n	801a9ac <_printf_float+0xf0>
 801aa2a:	2301      	movs	r3, #1
 801aa2c:	e7bd      	b.n	801a9aa <_printf_float+0xee>
 801aa2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aa32:	d9db      	bls.n	801a9ec <_printf_float+0x130>
 801aa34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801aa38:	d118      	bne.n	801aa6c <_printf_float+0x1b0>
 801aa3a:	2900      	cmp	r1, #0
 801aa3c:	6863      	ldr	r3, [r4, #4]
 801aa3e:	dd0b      	ble.n	801aa58 <_printf_float+0x19c>
 801aa40:	6121      	str	r1, [r4, #16]
 801aa42:	b913      	cbnz	r3, 801aa4a <_printf_float+0x18e>
 801aa44:	6822      	ldr	r2, [r4, #0]
 801aa46:	07d0      	lsls	r0, r2, #31
 801aa48:	d502      	bpl.n	801aa50 <_printf_float+0x194>
 801aa4a:	3301      	adds	r3, #1
 801aa4c:	440b      	add	r3, r1
 801aa4e:	6123      	str	r3, [r4, #16]
 801aa50:	65a1      	str	r1, [r4, #88]	@ 0x58
 801aa52:	f04f 0900 	mov.w	r9, #0
 801aa56:	e7db      	b.n	801aa10 <_printf_float+0x154>
 801aa58:	b913      	cbnz	r3, 801aa60 <_printf_float+0x1a4>
 801aa5a:	6822      	ldr	r2, [r4, #0]
 801aa5c:	07d2      	lsls	r2, r2, #31
 801aa5e:	d501      	bpl.n	801aa64 <_printf_float+0x1a8>
 801aa60:	3302      	adds	r3, #2
 801aa62:	e7f4      	b.n	801aa4e <_printf_float+0x192>
 801aa64:	2301      	movs	r3, #1
 801aa66:	e7f2      	b.n	801aa4e <_printf_float+0x192>
 801aa68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801aa6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa6e:	4299      	cmp	r1, r3
 801aa70:	db05      	blt.n	801aa7e <_printf_float+0x1c2>
 801aa72:	6823      	ldr	r3, [r4, #0]
 801aa74:	6121      	str	r1, [r4, #16]
 801aa76:	07d8      	lsls	r0, r3, #31
 801aa78:	d5ea      	bpl.n	801aa50 <_printf_float+0x194>
 801aa7a:	1c4b      	adds	r3, r1, #1
 801aa7c:	e7e7      	b.n	801aa4e <_printf_float+0x192>
 801aa7e:	2900      	cmp	r1, #0
 801aa80:	bfd4      	ite	le
 801aa82:	f1c1 0202 	rsble	r2, r1, #2
 801aa86:	2201      	movgt	r2, #1
 801aa88:	4413      	add	r3, r2
 801aa8a:	e7e0      	b.n	801aa4e <_printf_float+0x192>
 801aa8c:	6823      	ldr	r3, [r4, #0]
 801aa8e:	055a      	lsls	r2, r3, #21
 801aa90:	d407      	bmi.n	801aaa2 <_printf_float+0x1e6>
 801aa92:	6923      	ldr	r3, [r4, #16]
 801aa94:	4642      	mov	r2, r8
 801aa96:	4631      	mov	r1, r6
 801aa98:	4628      	mov	r0, r5
 801aa9a:	47b8      	blx	r7
 801aa9c:	3001      	adds	r0, #1
 801aa9e:	d12b      	bne.n	801aaf8 <_printf_float+0x23c>
 801aaa0:	e767      	b.n	801a972 <_printf_float+0xb6>
 801aaa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aaa6:	f240 80dd 	bls.w	801ac64 <_printf_float+0x3a8>
 801aaaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aaae:	2200      	movs	r2, #0
 801aab0:	2300      	movs	r3, #0
 801aab2:	f7e6 f821 	bl	8000af8 <__aeabi_dcmpeq>
 801aab6:	2800      	cmp	r0, #0
 801aab8:	d033      	beq.n	801ab22 <_printf_float+0x266>
 801aaba:	4a37      	ldr	r2, [pc, #220]	@ (801ab98 <_printf_float+0x2dc>)
 801aabc:	2301      	movs	r3, #1
 801aabe:	4631      	mov	r1, r6
 801aac0:	4628      	mov	r0, r5
 801aac2:	47b8      	blx	r7
 801aac4:	3001      	adds	r0, #1
 801aac6:	f43f af54 	beq.w	801a972 <_printf_float+0xb6>
 801aaca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801aace:	4543      	cmp	r3, r8
 801aad0:	db02      	blt.n	801aad8 <_printf_float+0x21c>
 801aad2:	6823      	ldr	r3, [r4, #0]
 801aad4:	07d8      	lsls	r0, r3, #31
 801aad6:	d50f      	bpl.n	801aaf8 <_printf_float+0x23c>
 801aad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aadc:	4631      	mov	r1, r6
 801aade:	4628      	mov	r0, r5
 801aae0:	47b8      	blx	r7
 801aae2:	3001      	adds	r0, #1
 801aae4:	f43f af45 	beq.w	801a972 <_printf_float+0xb6>
 801aae8:	f04f 0900 	mov.w	r9, #0
 801aaec:	f108 38ff 	add.w	r8, r8, #4294967295
 801aaf0:	f104 0a1a 	add.w	sl, r4, #26
 801aaf4:	45c8      	cmp	r8, r9
 801aaf6:	dc09      	bgt.n	801ab0c <_printf_float+0x250>
 801aaf8:	6823      	ldr	r3, [r4, #0]
 801aafa:	079b      	lsls	r3, r3, #30
 801aafc:	f100 8103 	bmi.w	801ad06 <_printf_float+0x44a>
 801ab00:	68e0      	ldr	r0, [r4, #12]
 801ab02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab04:	4298      	cmp	r0, r3
 801ab06:	bfb8      	it	lt
 801ab08:	4618      	movlt	r0, r3
 801ab0a:	e734      	b.n	801a976 <_printf_float+0xba>
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	4652      	mov	r2, sl
 801ab10:	4631      	mov	r1, r6
 801ab12:	4628      	mov	r0, r5
 801ab14:	47b8      	blx	r7
 801ab16:	3001      	adds	r0, #1
 801ab18:	f43f af2b 	beq.w	801a972 <_printf_float+0xb6>
 801ab1c:	f109 0901 	add.w	r9, r9, #1
 801ab20:	e7e8      	b.n	801aaf4 <_printf_float+0x238>
 801ab22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	dc39      	bgt.n	801ab9c <_printf_float+0x2e0>
 801ab28:	4a1b      	ldr	r2, [pc, #108]	@ (801ab98 <_printf_float+0x2dc>)
 801ab2a:	2301      	movs	r3, #1
 801ab2c:	4631      	mov	r1, r6
 801ab2e:	4628      	mov	r0, r5
 801ab30:	47b8      	blx	r7
 801ab32:	3001      	adds	r0, #1
 801ab34:	f43f af1d 	beq.w	801a972 <_printf_float+0xb6>
 801ab38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ab3c:	ea59 0303 	orrs.w	r3, r9, r3
 801ab40:	d102      	bne.n	801ab48 <_printf_float+0x28c>
 801ab42:	6823      	ldr	r3, [r4, #0]
 801ab44:	07d9      	lsls	r1, r3, #31
 801ab46:	d5d7      	bpl.n	801aaf8 <_printf_float+0x23c>
 801ab48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab4c:	4631      	mov	r1, r6
 801ab4e:	4628      	mov	r0, r5
 801ab50:	47b8      	blx	r7
 801ab52:	3001      	adds	r0, #1
 801ab54:	f43f af0d 	beq.w	801a972 <_printf_float+0xb6>
 801ab58:	f04f 0a00 	mov.w	sl, #0
 801ab5c:	f104 0b1a 	add.w	fp, r4, #26
 801ab60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab62:	425b      	negs	r3, r3
 801ab64:	4553      	cmp	r3, sl
 801ab66:	dc01      	bgt.n	801ab6c <_printf_float+0x2b0>
 801ab68:	464b      	mov	r3, r9
 801ab6a:	e793      	b.n	801aa94 <_printf_float+0x1d8>
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	465a      	mov	r2, fp
 801ab70:	4631      	mov	r1, r6
 801ab72:	4628      	mov	r0, r5
 801ab74:	47b8      	blx	r7
 801ab76:	3001      	adds	r0, #1
 801ab78:	f43f aefb 	beq.w	801a972 <_printf_float+0xb6>
 801ab7c:	f10a 0a01 	add.w	sl, sl, #1
 801ab80:	e7ee      	b.n	801ab60 <_printf_float+0x2a4>
 801ab82:	bf00      	nop
 801ab84:	7fefffff 	.word	0x7fefffff
 801ab88:	0806cb78 	.word	0x0806cb78
 801ab8c:	0806cb7c 	.word	0x0806cb7c
 801ab90:	0806cb80 	.word	0x0806cb80
 801ab94:	0806cb84 	.word	0x0806cb84
 801ab98:	0806cb88 	.word	0x0806cb88
 801ab9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ab9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aba2:	4553      	cmp	r3, sl
 801aba4:	bfa8      	it	ge
 801aba6:	4653      	movge	r3, sl
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	4699      	mov	r9, r3
 801abac:	dc36      	bgt.n	801ac1c <_printf_float+0x360>
 801abae:	f04f 0b00 	mov.w	fp, #0
 801abb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801abb6:	f104 021a 	add.w	r2, r4, #26
 801abba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801abbc:	9306      	str	r3, [sp, #24]
 801abbe:	eba3 0309 	sub.w	r3, r3, r9
 801abc2:	455b      	cmp	r3, fp
 801abc4:	dc31      	bgt.n	801ac2a <_printf_float+0x36e>
 801abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abc8:	459a      	cmp	sl, r3
 801abca:	dc3a      	bgt.n	801ac42 <_printf_float+0x386>
 801abcc:	6823      	ldr	r3, [r4, #0]
 801abce:	07da      	lsls	r2, r3, #31
 801abd0:	d437      	bmi.n	801ac42 <_printf_float+0x386>
 801abd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abd4:	ebaa 0903 	sub.w	r9, sl, r3
 801abd8:	9b06      	ldr	r3, [sp, #24]
 801abda:	ebaa 0303 	sub.w	r3, sl, r3
 801abde:	4599      	cmp	r9, r3
 801abe0:	bfa8      	it	ge
 801abe2:	4699      	movge	r9, r3
 801abe4:	f1b9 0f00 	cmp.w	r9, #0
 801abe8:	dc33      	bgt.n	801ac52 <_printf_float+0x396>
 801abea:	f04f 0800 	mov.w	r8, #0
 801abee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801abf2:	f104 0b1a 	add.w	fp, r4, #26
 801abf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abf8:	ebaa 0303 	sub.w	r3, sl, r3
 801abfc:	eba3 0309 	sub.w	r3, r3, r9
 801ac00:	4543      	cmp	r3, r8
 801ac02:	f77f af79 	ble.w	801aaf8 <_printf_float+0x23c>
 801ac06:	2301      	movs	r3, #1
 801ac08:	465a      	mov	r2, fp
 801ac0a:	4631      	mov	r1, r6
 801ac0c:	4628      	mov	r0, r5
 801ac0e:	47b8      	blx	r7
 801ac10:	3001      	adds	r0, #1
 801ac12:	f43f aeae 	beq.w	801a972 <_printf_float+0xb6>
 801ac16:	f108 0801 	add.w	r8, r8, #1
 801ac1a:	e7ec      	b.n	801abf6 <_printf_float+0x33a>
 801ac1c:	4642      	mov	r2, r8
 801ac1e:	4631      	mov	r1, r6
 801ac20:	4628      	mov	r0, r5
 801ac22:	47b8      	blx	r7
 801ac24:	3001      	adds	r0, #1
 801ac26:	d1c2      	bne.n	801abae <_printf_float+0x2f2>
 801ac28:	e6a3      	b.n	801a972 <_printf_float+0xb6>
 801ac2a:	2301      	movs	r3, #1
 801ac2c:	4631      	mov	r1, r6
 801ac2e:	4628      	mov	r0, r5
 801ac30:	9206      	str	r2, [sp, #24]
 801ac32:	47b8      	blx	r7
 801ac34:	3001      	adds	r0, #1
 801ac36:	f43f ae9c 	beq.w	801a972 <_printf_float+0xb6>
 801ac3a:	9a06      	ldr	r2, [sp, #24]
 801ac3c:	f10b 0b01 	add.w	fp, fp, #1
 801ac40:	e7bb      	b.n	801abba <_printf_float+0x2fe>
 801ac42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac46:	4631      	mov	r1, r6
 801ac48:	4628      	mov	r0, r5
 801ac4a:	47b8      	blx	r7
 801ac4c:	3001      	adds	r0, #1
 801ac4e:	d1c0      	bne.n	801abd2 <_printf_float+0x316>
 801ac50:	e68f      	b.n	801a972 <_printf_float+0xb6>
 801ac52:	9a06      	ldr	r2, [sp, #24]
 801ac54:	464b      	mov	r3, r9
 801ac56:	4442      	add	r2, r8
 801ac58:	4631      	mov	r1, r6
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	47b8      	blx	r7
 801ac5e:	3001      	adds	r0, #1
 801ac60:	d1c3      	bne.n	801abea <_printf_float+0x32e>
 801ac62:	e686      	b.n	801a972 <_printf_float+0xb6>
 801ac64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ac68:	f1ba 0f01 	cmp.w	sl, #1
 801ac6c:	dc01      	bgt.n	801ac72 <_printf_float+0x3b6>
 801ac6e:	07db      	lsls	r3, r3, #31
 801ac70:	d536      	bpl.n	801ace0 <_printf_float+0x424>
 801ac72:	2301      	movs	r3, #1
 801ac74:	4642      	mov	r2, r8
 801ac76:	4631      	mov	r1, r6
 801ac78:	4628      	mov	r0, r5
 801ac7a:	47b8      	blx	r7
 801ac7c:	3001      	adds	r0, #1
 801ac7e:	f43f ae78 	beq.w	801a972 <_printf_float+0xb6>
 801ac82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac86:	4631      	mov	r1, r6
 801ac88:	4628      	mov	r0, r5
 801ac8a:	47b8      	blx	r7
 801ac8c:	3001      	adds	r0, #1
 801ac8e:	f43f ae70 	beq.w	801a972 <_printf_float+0xb6>
 801ac92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ac96:	2200      	movs	r2, #0
 801ac98:	2300      	movs	r3, #0
 801ac9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ac9e:	f7e5 ff2b 	bl	8000af8 <__aeabi_dcmpeq>
 801aca2:	b9c0      	cbnz	r0, 801acd6 <_printf_float+0x41a>
 801aca4:	4653      	mov	r3, sl
 801aca6:	f108 0201 	add.w	r2, r8, #1
 801acaa:	4631      	mov	r1, r6
 801acac:	4628      	mov	r0, r5
 801acae:	47b8      	blx	r7
 801acb0:	3001      	adds	r0, #1
 801acb2:	d10c      	bne.n	801acce <_printf_float+0x412>
 801acb4:	e65d      	b.n	801a972 <_printf_float+0xb6>
 801acb6:	2301      	movs	r3, #1
 801acb8:	465a      	mov	r2, fp
 801acba:	4631      	mov	r1, r6
 801acbc:	4628      	mov	r0, r5
 801acbe:	47b8      	blx	r7
 801acc0:	3001      	adds	r0, #1
 801acc2:	f43f ae56 	beq.w	801a972 <_printf_float+0xb6>
 801acc6:	f108 0801 	add.w	r8, r8, #1
 801acca:	45d0      	cmp	r8, sl
 801accc:	dbf3      	blt.n	801acb6 <_printf_float+0x3fa>
 801acce:	464b      	mov	r3, r9
 801acd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801acd4:	e6df      	b.n	801aa96 <_printf_float+0x1da>
 801acd6:	f04f 0800 	mov.w	r8, #0
 801acda:	f104 0b1a 	add.w	fp, r4, #26
 801acde:	e7f4      	b.n	801acca <_printf_float+0x40e>
 801ace0:	2301      	movs	r3, #1
 801ace2:	4642      	mov	r2, r8
 801ace4:	e7e1      	b.n	801acaa <_printf_float+0x3ee>
 801ace6:	2301      	movs	r3, #1
 801ace8:	464a      	mov	r2, r9
 801acea:	4631      	mov	r1, r6
 801acec:	4628      	mov	r0, r5
 801acee:	47b8      	blx	r7
 801acf0:	3001      	adds	r0, #1
 801acf2:	f43f ae3e 	beq.w	801a972 <_printf_float+0xb6>
 801acf6:	f108 0801 	add.w	r8, r8, #1
 801acfa:	68e3      	ldr	r3, [r4, #12]
 801acfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801acfe:	1a5b      	subs	r3, r3, r1
 801ad00:	4543      	cmp	r3, r8
 801ad02:	dcf0      	bgt.n	801ace6 <_printf_float+0x42a>
 801ad04:	e6fc      	b.n	801ab00 <_printf_float+0x244>
 801ad06:	f04f 0800 	mov.w	r8, #0
 801ad0a:	f104 0919 	add.w	r9, r4, #25
 801ad0e:	e7f4      	b.n	801acfa <_printf_float+0x43e>

0801ad10 <_printf_common>:
 801ad10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad14:	4616      	mov	r6, r2
 801ad16:	4698      	mov	r8, r3
 801ad18:	688a      	ldr	r2, [r1, #8]
 801ad1a:	690b      	ldr	r3, [r1, #16]
 801ad1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ad20:	4293      	cmp	r3, r2
 801ad22:	bfb8      	it	lt
 801ad24:	4613      	movlt	r3, r2
 801ad26:	6033      	str	r3, [r6, #0]
 801ad28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ad2c:	4607      	mov	r7, r0
 801ad2e:	460c      	mov	r4, r1
 801ad30:	b10a      	cbz	r2, 801ad36 <_printf_common+0x26>
 801ad32:	3301      	adds	r3, #1
 801ad34:	6033      	str	r3, [r6, #0]
 801ad36:	6823      	ldr	r3, [r4, #0]
 801ad38:	0699      	lsls	r1, r3, #26
 801ad3a:	bf42      	ittt	mi
 801ad3c:	6833      	ldrmi	r3, [r6, #0]
 801ad3e:	3302      	addmi	r3, #2
 801ad40:	6033      	strmi	r3, [r6, #0]
 801ad42:	6825      	ldr	r5, [r4, #0]
 801ad44:	f015 0506 	ands.w	r5, r5, #6
 801ad48:	d106      	bne.n	801ad58 <_printf_common+0x48>
 801ad4a:	f104 0a19 	add.w	sl, r4, #25
 801ad4e:	68e3      	ldr	r3, [r4, #12]
 801ad50:	6832      	ldr	r2, [r6, #0]
 801ad52:	1a9b      	subs	r3, r3, r2
 801ad54:	42ab      	cmp	r3, r5
 801ad56:	dc26      	bgt.n	801ada6 <_printf_common+0x96>
 801ad58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ad5c:	6822      	ldr	r2, [r4, #0]
 801ad5e:	3b00      	subs	r3, #0
 801ad60:	bf18      	it	ne
 801ad62:	2301      	movne	r3, #1
 801ad64:	0692      	lsls	r2, r2, #26
 801ad66:	d42b      	bmi.n	801adc0 <_printf_common+0xb0>
 801ad68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ad6c:	4641      	mov	r1, r8
 801ad6e:	4638      	mov	r0, r7
 801ad70:	47c8      	blx	r9
 801ad72:	3001      	adds	r0, #1
 801ad74:	d01e      	beq.n	801adb4 <_printf_common+0xa4>
 801ad76:	6823      	ldr	r3, [r4, #0]
 801ad78:	6922      	ldr	r2, [r4, #16]
 801ad7a:	f003 0306 	and.w	r3, r3, #6
 801ad7e:	2b04      	cmp	r3, #4
 801ad80:	bf02      	ittt	eq
 801ad82:	68e5      	ldreq	r5, [r4, #12]
 801ad84:	6833      	ldreq	r3, [r6, #0]
 801ad86:	1aed      	subeq	r5, r5, r3
 801ad88:	68a3      	ldr	r3, [r4, #8]
 801ad8a:	bf0c      	ite	eq
 801ad8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ad90:	2500      	movne	r5, #0
 801ad92:	4293      	cmp	r3, r2
 801ad94:	bfc4      	itt	gt
 801ad96:	1a9b      	subgt	r3, r3, r2
 801ad98:	18ed      	addgt	r5, r5, r3
 801ad9a:	2600      	movs	r6, #0
 801ad9c:	341a      	adds	r4, #26
 801ad9e:	42b5      	cmp	r5, r6
 801ada0:	d11a      	bne.n	801add8 <_printf_common+0xc8>
 801ada2:	2000      	movs	r0, #0
 801ada4:	e008      	b.n	801adb8 <_printf_common+0xa8>
 801ada6:	2301      	movs	r3, #1
 801ada8:	4652      	mov	r2, sl
 801adaa:	4641      	mov	r1, r8
 801adac:	4638      	mov	r0, r7
 801adae:	47c8      	blx	r9
 801adb0:	3001      	adds	r0, #1
 801adb2:	d103      	bne.n	801adbc <_printf_common+0xac>
 801adb4:	f04f 30ff 	mov.w	r0, #4294967295
 801adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adbc:	3501      	adds	r5, #1
 801adbe:	e7c6      	b.n	801ad4e <_printf_common+0x3e>
 801adc0:	18e1      	adds	r1, r4, r3
 801adc2:	1c5a      	adds	r2, r3, #1
 801adc4:	2030      	movs	r0, #48	@ 0x30
 801adc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801adca:	4422      	add	r2, r4
 801adcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801add0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801add4:	3302      	adds	r3, #2
 801add6:	e7c7      	b.n	801ad68 <_printf_common+0x58>
 801add8:	2301      	movs	r3, #1
 801adda:	4622      	mov	r2, r4
 801addc:	4641      	mov	r1, r8
 801adde:	4638      	mov	r0, r7
 801ade0:	47c8      	blx	r9
 801ade2:	3001      	adds	r0, #1
 801ade4:	d0e6      	beq.n	801adb4 <_printf_common+0xa4>
 801ade6:	3601      	adds	r6, #1
 801ade8:	e7d9      	b.n	801ad9e <_printf_common+0x8e>
	...

0801adec <_printf_i>:
 801adec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801adf0:	7e0f      	ldrb	r7, [r1, #24]
 801adf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801adf4:	2f78      	cmp	r7, #120	@ 0x78
 801adf6:	4691      	mov	r9, r2
 801adf8:	4680      	mov	r8, r0
 801adfa:	460c      	mov	r4, r1
 801adfc:	469a      	mov	sl, r3
 801adfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ae02:	d807      	bhi.n	801ae14 <_printf_i+0x28>
 801ae04:	2f62      	cmp	r7, #98	@ 0x62
 801ae06:	d80a      	bhi.n	801ae1e <_printf_i+0x32>
 801ae08:	2f00      	cmp	r7, #0
 801ae0a:	f000 80d2 	beq.w	801afb2 <_printf_i+0x1c6>
 801ae0e:	2f58      	cmp	r7, #88	@ 0x58
 801ae10:	f000 80b9 	beq.w	801af86 <_printf_i+0x19a>
 801ae14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ae1c:	e03a      	b.n	801ae94 <_printf_i+0xa8>
 801ae1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ae22:	2b15      	cmp	r3, #21
 801ae24:	d8f6      	bhi.n	801ae14 <_printf_i+0x28>
 801ae26:	a101      	add	r1, pc, #4	@ (adr r1, 801ae2c <_printf_i+0x40>)
 801ae28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae2c:	0801ae85 	.word	0x0801ae85
 801ae30:	0801ae99 	.word	0x0801ae99
 801ae34:	0801ae15 	.word	0x0801ae15
 801ae38:	0801ae15 	.word	0x0801ae15
 801ae3c:	0801ae15 	.word	0x0801ae15
 801ae40:	0801ae15 	.word	0x0801ae15
 801ae44:	0801ae99 	.word	0x0801ae99
 801ae48:	0801ae15 	.word	0x0801ae15
 801ae4c:	0801ae15 	.word	0x0801ae15
 801ae50:	0801ae15 	.word	0x0801ae15
 801ae54:	0801ae15 	.word	0x0801ae15
 801ae58:	0801af99 	.word	0x0801af99
 801ae5c:	0801aec3 	.word	0x0801aec3
 801ae60:	0801af53 	.word	0x0801af53
 801ae64:	0801ae15 	.word	0x0801ae15
 801ae68:	0801ae15 	.word	0x0801ae15
 801ae6c:	0801afbb 	.word	0x0801afbb
 801ae70:	0801ae15 	.word	0x0801ae15
 801ae74:	0801aec3 	.word	0x0801aec3
 801ae78:	0801ae15 	.word	0x0801ae15
 801ae7c:	0801ae15 	.word	0x0801ae15
 801ae80:	0801af5b 	.word	0x0801af5b
 801ae84:	6833      	ldr	r3, [r6, #0]
 801ae86:	1d1a      	adds	r2, r3, #4
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	6032      	str	r2, [r6, #0]
 801ae8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ae94:	2301      	movs	r3, #1
 801ae96:	e09d      	b.n	801afd4 <_printf_i+0x1e8>
 801ae98:	6833      	ldr	r3, [r6, #0]
 801ae9a:	6820      	ldr	r0, [r4, #0]
 801ae9c:	1d19      	adds	r1, r3, #4
 801ae9e:	6031      	str	r1, [r6, #0]
 801aea0:	0606      	lsls	r6, r0, #24
 801aea2:	d501      	bpl.n	801aea8 <_printf_i+0xbc>
 801aea4:	681d      	ldr	r5, [r3, #0]
 801aea6:	e003      	b.n	801aeb0 <_printf_i+0xc4>
 801aea8:	0645      	lsls	r5, r0, #25
 801aeaa:	d5fb      	bpl.n	801aea4 <_printf_i+0xb8>
 801aeac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aeb0:	2d00      	cmp	r5, #0
 801aeb2:	da03      	bge.n	801aebc <_printf_i+0xd0>
 801aeb4:	232d      	movs	r3, #45	@ 0x2d
 801aeb6:	426d      	negs	r5, r5
 801aeb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aebc:	4859      	ldr	r0, [pc, #356]	@ (801b024 <_printf_i+0x238>)
 801aebe:	230a      	movs	r3, #10
 801aec0:	e011      	b.n	801aee6 <_printf_i+0xfa>
 801aec2:	6821      	ldr	r1, [r4, #0]
 801aec4:	6833      	ldr	r3, [r6, #0]
 801aec6:	0608      	lsls	r0, r1, #24
 801aec8:	f853 5b04 	ldr.w	r5, [r3], #4
 801aecc:	d402      	bmi.n	801aed4 <_printf_i+0xe8>
 801aece:	0649      	lsls	r1, r1, #25
 801aed0:	bf48      	it	mi
 801aed2:	b2ad      	uxthmi	r5, r5
 801aed4:	2f6f      	cmp	r7, #111	@ 0x6f
 801aed6:	4853      	ldr	r0, [pc, #332]	@ (801b024 <_printf_i+0x238>)
 801aed8:	6033      	str	r3, [r6, #0]
 801aeda:	bf14      	ite	ne
 801aedc:	230a      	movne	r3, #10
 801aede:	2308      	moveq	r3, #8
 801aee0:	2100      	movs	r1, #0
 801aee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801aee6:	6866      	ldr	r6, [r4, #4]
 801aee8:	60a6      	str	r6, [r4, #8]
 801aeea:	2e00      	cmp	r6, #0
 801aeec:	bfa2      	ittt	ge
 801aeee:	6821      	ldrge	r1, [r4, #0]
 801aef0:	f021 0104 	bicge.w	r1, r1, #4
 801aef4:	6021      	strge	r1, [r4, #0]
 801aef6:	b90d      	cbnz	r5, 801aefc <_printf_i+0x110>
 801aef8:	2e00      	cmp	r6, #0
 801aefa:	d04b      	beq.n	801af94 <_printf_i+0x1a8>
 801aefc:	4616      	mov	r6, r2
 801aefe:	fbb5 f1f3 	udiv	r1, r5, r3
 801af02:	fb03 5711 	mls	r7, r3, r1, r5
 801af06:	5dc7      	ldrb	r7, [r0, r7]
 801af08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af0c:	462f      	mov	r7, r5
 801af0e:	42bb      	cmp	r3, r7
 801af10:	460d      	mov	r5, r1
 801af12:	d9f4      	bls.n	801aefe <_printf_i+0x112>
 801af14:	2b08      	cmp	r3, #8
 801af16:	d10b      	bne.n	801af30 <_printf_i+0x144>
 801af18:	6823      	ldr	r3, [r4, #0]
 801af1a:	07df      	lsls	r7, r3, #31
 801af1c:	d508      	bpl.n	801af30 <_printf_i+0x144>
 801af1e:	6923      	ldr	r3, [r4, #16]
 801af20:	6861      	ldr	r1, [r4, #4]
 801af22:	4299      	cmp	r1, r3
 801af24:	bfde      	ittt	le
 801af26:	2330      	movle	r3, #48	@ 0x30
 801af28:	f806 3c01 	strble.w	r3, [r6, #-1]
 801af2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801af30:	1b92      	subs	r2, r2, r6
 801af32:	6122      	str	r2, [r4, #16]
 801af34:	f8cd a000 	str.w	sl, [sp]
 801af38:	464b      	mov	r3, r9
 801af3a:	aa03      	add	r2, sp, #12
 801af3c:	4621      	mov	r1, r4
 801af3e:	4640      	mov	r0, r8
 801af40:	f7ff fee6 	bl	801ad10 <_printf_common>
 801af44:	3001      	adds	r0, #1
 801af46:	d14a      	bne.n	801afde <_printf_i+0x1f2>
 801af48:	f04f 30ff 	mov.w	r0, #4294967295
 801af4c:	b004      	add	sp, #16
 801af4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af52:	6823      	ldr	r3, [r4, #0]
 801af54:	f043 0320 	orr.w	r3, r3, #32
 801af58:	6023      	str	r3, [r4, #0]
 801af5a:	4833      	ldr	r0, [pc, #204]	@ (801b028 <_printf_i+0x23c>)
 801af5c:	2778      	movs	r7, #120	@ 0x78
 801af5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	6831      	ldr	r1, [r6, #0]
 801af66:	061f      	lsls	r7, r3, #24
 801af68:	f851 5b04 	ldr.w	r5, [r1], #4
 801af6c:	d402      	bmi.n	801af74 <_printf_i+0x188>
 801af6e:	065f      	lsls	r7, r3, #25
 801af70:	bf48      	it	mi
 801af72:	b2ad      	uxthmi	r5, r5
 801af74:	6031      	str	r1, [r6, #0]
 801af76:	07d9      	lsls	r1, r3, #31
 801af78:	bf44      	itt	mi
 801af7a:	f043 0320 	orrmi.w	r3, r3, #32
 801af7e:	6023      	strmi	r3, [r4, #0]
 801af80:	b11d      	cbz	r5, 801af8a <_printf_i+0x19e>
 801af82:	2310      	movs	r3, #16
 801af84:	e7ac      	b.n	801aee0 <_printf_i+0xf4>
 801af86:	4827      	ldr	r0, [pc, #156]	@ (801b024 <_printf_i+0x238>)
 801af88:	e7e9      	b.n	801af5e <_printf_i+0x172>
 801af8a:	6823      	ldr	r3, [r4, #0]
 801af8c:	f023 0320 	bic.w	r3, r3, #32
 801af90:	6023      	str	r3, [r4, #0]
 801af92:	e7f6      	b.n	801af82 <_printf_i+0x196>
 801af94:	4616      	mov	r6, r2
 801af96:	e7bd      	b.n	801af14 <_printf_i+0x128>
 801af98:	6833      	ldr	r3, [r6, #0]
 801af9a:	6825      	ldr	r5, [r4, #0]
 801af9c:	6961      	ldr	r1, [r4, #20]
 801af9e:	1d18      	adds	r0, r3, #4
 801afa0:	6030      	str	r0, [r6, #0]
 801afa2:	062e      	lsls	r6, r5, #24
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	d501      	bpl.n	801afac <_printf_i+0x1c0>
 801afa8:	6019      	str	r1, [r3, #0]
 801afaa:	e002      	b.n	801afb2 <_printf_i+0x1c6>
 801afac:	0668      	lsls	r0, r5, #25
 801afae:	d5fb      	bpl.n	801afa8 <_printf_i+0x1bc>
 801afb0:	8019      	strh	r1, [r3, #0]
 801afb2:	2300      	movs	r3, #0
 801afb4:	6123      	str	r3, [r4, #16]
 801afb6:	4616      	mov	r6, r2
 801afb8:	e7bc      	b.n	801af34 <_printf_i+0x148>
 801afba:	6833      	ldr	r3, [r6, #0]
 801afbc:	1d1a      	adds	r2, r3, #4
 801afbe:	6032      	str	r2, [r6, #0]
 801afc0:	681e      	ldr	r6, [r3, #0]
 801afc2:	6862      	ldr	r2, [r4, #4]
 801afc4:	2100      	movs	r1, #0
 801afc6:	4630      	mov	r0, r6
 801afc8:	f7e5 f91a 	bl	8000200 <memchr>
 801afcc:	b108      	cbz	r0, 801afd2 <_printf_i+0x1e6>
 801afce:	1b80      	subs	r0, r0, r6
 801afd0:	6060      	str	r0, [r4, #4]
 801afd2:	6863      	ldr	r3, [r4, #4]
 801afd4:	6123      	str	r3, [r4, #16]
 801afd6:	2300      	movs	r3, #0
 801afd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801afdc:	e7aa      	b.n	801af34 <_printf_i+0x148>
 801afde:	6923      	ldr	r3, [r4, #16]
 801afe0:	4632      	mov	r2, r6
 801afe2:	4649      	mov	r1, r9
 801afe4:	4640      	mov	r0, r8
 801afe6:	47d0      	blx	sl
 801afe8:	3001      	adds	r0, #1
 801afea:	d0ad      	beq.n	801af48 <_printf_i+0x15c>
 801afec:	6823      	ldr	r3, [r4, #0]
 801afee:	079b      	lsls	r3, r3, #30
 801aff0:	d413      	bmi.n	801b01a <_printf_i+0x22e>
 801aff2:	68e0      	ldr	r0, [r4, #12]
 801aff4:	9b03      	ldr	r3, [sp, #12]
 801aff6:	4298      	cmp	r0, r3
 801aff8:	bfb8      	it	lt
 801affa:	4618      	movlt	r0, r3
 801affc:	e7a6      	b.n	801af4c <_printf_i+0x160>
 801affe:	2301      	movs	r3, #1
 801b000:	4632      	mov	r2, r6
 801b002:	4649      	mov	r1, r9
 801b004:	4640      	mov	r0, r8
 801b006:	47d0      	blx	sl
 801b008:	3001      	adds	r0, #1
 801b00a:	d09d      	beq.n	801af48 <_printf_i+0x15c>
 801b00c:	3501      	adds	r5, #1
 801b00e:	68e3      	ldr	r3, [r4, #12]
 801b010:	9903      	ldr	r1, [sp, #12]
 801b012:	1a5b      	subs	r3, r3, r1
 801b014:	42ab      	cmp	r3, r5
 801b016:	dcf2      	bgt.n	801affe <_printf_i+0x212>
 801b018:	e7eb      	b.n	801aff2 <_printf_i+0x206>
 801b01a:	2500      	movs	r5, #0
 801b01c:	f104 0619 	add.w	r6, r4, #25
 801b020:	e7f5      	b.n	801b00e <_printf_i+0x222>
 801b022:	bf00      	nop
 801b024:	0806cb8a 	.word	0x0806cb8a
 801b028:	0806cb9b 	.word	0x0806cb9b

0801b02c <std>:
 801b02c:	2300      	movs	r3, #0
 801b02e:	b510      	push	{r4, lr}
 801b030:	4604      	mov	r4, r0
 801b032:	e9c0 3300 	strd	r3, r3, [r0]
 801b036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b03a:	6083      	str	r3, [r0, #8]
 801b03c:	8181      	strh	r1, [r0, #12]
 801b03e:	6643      	str	r3, [r0, #100]	@ 0x64
 801b040:	81c2      	strh	r2, [r0, #14]
 801b042:	6183      	str	r3, [r0, #24]
 801b044:	4619      	mov	r1, r3
 801b046:	2208      	movs	r2, #8
 801b048:	305c      	adds	r0, #92	@ 0x5c
 801b04a:	f000 fa13 	bl	801b474 <memset>
 801b04e:	4b0d      	ldr	r3, [pc, #52]	@ (801b084 <std+0x58>)
 801b050:	6263      	str	r3, [r4, #36]	@ 0x24
 801b052:	4b0d      	ldr	r3, [pc, #52]	@ (801b088 <std+0x5c>)
 801b054:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b056:	4b0d      	ldr	r3, [pc, #52]	@ (801b08c <std+0x60>)
 801b058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b05a:	4b0d      	ldr	r3, [pc, #52]	@ (801b090 <std+0x64>)
 801b05c:	6323      	str	r3, [r4, #48]	@ 0x30
 801b05e:	4b0d      	ldr	r3, [pc, #52]	@ (801b094 <std+0x68>)
 801b060:	6224      	str	r4, [r4, #32]
 801b062:	429c      	cmp	r4, r3
 801b064:	d006      	beq.n	801b074 <std+0x48>
 801b066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b06a:	4294      	cmp	r4, r2
 801b06c:	d002      	beq.n	801b074 <std+0x48>
 801b06e:	33d0      	adds	r3, #208	@ 0xd0
 801b070:	429c      	cmp	r4, r3
 801b072:	d105      	bne.n	801b080 <std+0x54>
 801b074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b07c:	f000 baac 	b.w	801b5d8 <__retarget_lock_init_recursive>
 801b080:	bd10      	pop	{r4, pc}
 801b082:	bf00      	nop
 801b084:	0801b291 	.word	0x0801b291
 801b088:	0801b2b3 	.word	0x0801b2b3
 801b08c:	0801b2eb 	.word	0x0801b2eb
 801b090:	0801b30f 	.word	0x0801b30f
 801b094:	20013efc 	.word	0x20013efc

0801b098 <stdio_exit_handler>:
 801b098:	4a02      	ldr	r2, [pc, #8]	@ (801b0a4 <stdio_exit_handler+0xc>)
 801b09a:	4903      	ldr	r1, [pc, #12]	@ (801b0a8 <stdio_exit_handler+0x10>)
 801b09c:	4803      	ldr	r0, [pc, #12]	@ (801b0ac <stdio_exit_handler+0x14>)
 801b09e:	f000 b869 	b.w	801b174 <_fwalk_sglue>
 801b0a2:	bf00      	nop
 801b0a4:	200000c0 	.word	0x200000c0
 801b0a8:	0801ce05 	.word	0x0801ce05
 801b0ac:	200000d0 	.word	0x200000d0

0801b0b0 <cleanup_stdio>:
 801b0b0:	6841      	ldr	r1, [r0, #4]
 801b0b2:	4b0c      	ldr	r3, [pc, #48]	@ (801b0e4 <cleanup_stdio+0x34>)
 801b0b4:	4299      	cmp	r1, r3
 801b0b6:	b510      	push	{r4, lr}
 801b0b8:	4604      	mov	r4, r0
 801b0ba:	d001      	beq.n	801b0c0 <cleanup_stdio+0x10>
 801b0bc:	f001 fea2 	bl	801ce04 <_fflush_r>
 801b0c0:	68a1      	ldr	r1, [r4, #8]
 801b0c2:	4b09      	ldr	r3, [pc, #36]	@ (801b0e8 <cleanup_stdio+0x38>)
 801b0c4:	4299      	cmp	r1, r3
 801b0c6:	d002      	beq.n	801b0ce <cleanup_stdio+0x1e>
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f001 fe9b 	bl	801ce04 <_fflush_r>
 801b0ce:	68e1      	ldr	r1, [r4, #12]
 801b0d0:	4b06      	ldr	r3, [pc, #24]	@ (801b0ec <cleanup_stdio+0x3c>)
 801b0d2:	4299      	cmp	r1, r3
 801b0d4:	d004      	beq.n	801b0e0 <cleanup_stdio+0x30>
 801b0d6:	4620      	mov	r0, r4
 801b0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0dc:	f001 be92 	b.w	801ce04 <_fflush_r>
 801b0e0:	bd10      	pop	{r4, pc}
 801b0e2:	bf00      	nop
 801b0e4:	20013efc 	.word	0x20013efc
 801b0e8:	20013f64 	.word	0x20013f64
 801b0ec:	20013fcc 	.word	0x20013fcc

0801b0f0 <global_stdio_init.part.0>:
 801b0f0:	b510      	push	{r4, lr}
 801b0f2:	4b0b      	ldr	r3, [pc, #44]	@ (801b120 <global_stdio_init.part.0+0x30>)
 801b0f4:	4c0b      	ldr	r4, [pc, #44]	@ (801b124 <global_stdio_init.part.0+0x34>)
 801b0f6:	4a0c      	ldr	r2, [pc, #48]	@ (801b128 <global_stdio_init.part.0+0x38>)
 801b0f8:	601a      	str	r2, [r3, #0]
 801b0fa:	4620      	mov	r0, r4
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	2104      	movs	r1, #4
 801b100:	f7ff ff94 	bl	801b02c <std>
 801b104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b108:	2201      	movs	r2, #1
 801b10a:	2109      	movs	r1, #9
 801b10c:	f7ff ff8e 	bl	801b02c <std>
 801b110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b114:	2202      	movs	r2, #2
 801b116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b11a:	2112      	movs	r1, #18
 801b11c:	f7ff bf86 	b.w	801b02c <std>
 801b120:	20014034 	.word	0x20014034
 801b124:	20013efc 	.word	0x20013efc
 801b128:	0801b099 	.word	0x0801b099

0801b12c <__sfp_lock_acquire>:
 801b12c:	4801      	ldr	r0, [pc, #4]	@ (801b134 <__sfp_lock_acquire+0x8>)
 801b12e:	f000 ba54 	b.w	801b5da <__retarget_lock_acquire_recursive>
 801b132:	bf00      	nop
 801b134:	2001403d 	.word	0x2001403d

0801b138 <__sfp_lock_release>:
 801b138:	4801      	ldr	r0, [pc, #4]	@ (801b140 <__sfp_lock_release+0x8>)
 801b13a:	f000 ba4f 	b.w	801b5dc <__retarget_lock_release_recursive>
 801b13e:	bf00      	nop
 801b140:	2001403d 	.word	0x2001403d

0801b144 <__sinit>:
 801b144:	b510      	push	{r4, lr}
 801b146:	4604      	mov	r4, r0
 801b148:	f7ff fff0 	bl	801b12c <__sfp_lock_acquire>
 801b14c:	6a23      	ldr	r3, [r4, #32]
 801b14e:	b11b      	cbz	r3, 801b158 <__sinit+0x14>
 801b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b154:	f7ff bff0 	b.w	801b138 <__sfp_lock_release>
 801b158:	4b04      	ldr	r3, [pc, #16]	@ (801b16c <__sinit+0x28>)
 801b15a:	6223      	str	r3, [r4, #32]
 801b15c:	4b04      	ldr	r3, [pc, #16]	@ (801b170 <__sinit+0x2c>)
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	2b00      	cmp	r3, #0
 801b162:	d1f5      	bne.n	801b150 <__sinit+0xc>
 801b164:	f7ff ffc4 	bl	801b0f0 <global_stdio_init.part.0>
 801b168:	e7f2      	b.n	801b150 <__sinit+0xc>
 801b16a:	bf00      	nop
 801b16c:	0801b0b1 	.word	0x0801b0b1
 801b170:	20014034 	.word	0x20014034

0801b174 <_fwalk_sglue>:
 801b174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b178:	4607      	mov	r7, r0
 801b17a:	4688      	mov	r8, r1
 801b17c:	4614      	mov	r4, r2
 801b17e:	2600      	movs	r6, #0
 801b180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b184:	f1b9 0901 	subs.w	r9, r9, #1
 801b188:	d505      	bpl.n	801b196 <_fwalk_sglue+0x22>
 801b18a:	6824      	ldr	r4, [r4, #0]
 801b18c:	2c00      	cmp	r4, #0
 801b18e:	d1f7      	bne.n	801b180 <_fwalk_sglue+0xc>
 801b190:	4630      	mov	r0, r6
 801b192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b196:	89ab      	ldrh	r3, [r5, #12]
 801b198:	2b01      	cmp	r3, #1
 801b19a:	d907      	bls.n	801b1ac <_fwalk_sglue+0x38>
 801b19c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1a0:	3301      	adds	r3, #1
 801b1a2:	d003      	beq.n	801b1ac <_fwalk_sglue+0x38>
 801b1a4:	4629      	mov	r1, r5
 801b1a6:	4638      	mov	r0, r7
 801b1a8:	47c0      	blx	r8
 801b1aa:	4306      	orrs	r6, r0
 801b1ac:	3568      	adds	r5, #104	@ 0x68
 801b1ae:	e7e9      	b.n	801b184 <_fwalk_sglue+0x10>

0801b1b0 <iprintf>:
 801b1b0:	b40f      	push	{r0, r1, r2, r3}
 801b1b2:	b507      	push	{r0, r1, r2, lr}
 801b1b4:	4906      	ldr	r1, [pc, #24]	@ (801b1d0 <iprintf+0x20>)
 801b1b6:	ab04      	add	r3, sp, #16
 801b1b8:	6808      	ldr	r0, [r1, #0]
 801b1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1be:	6881      	ldr	r1, [r0, #8]
 801b1c0:	9301      	str	r3, [sp, #4]
 801b1c2:	f001 fc83 	bl	801cacc <_vfiprintf_r>
 801b1c6:	b003      	add	sp, #12
 801b1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1cc:	b004      	add	sp, #16
 801b1ce:	4770      	bx	lr
 801b1d0:	200000cc 	.word	0x200000cc

0801b1d4 <_puts_r>:
 801b1d4:	6a03      	ldr	r3, [r0, #32]
 801b1d6:	b570      	push	{r4, r5, r6, lr}
 801b1d8:	6884      	ldr	r4, [r0, #8]
 801b1da:	4605      	mov	r5, r0
 801b1dc:	460e      	mov	r6, r1
 801b1de:	b90b      	cbnz	r3, 801b1e4 <_puts_r+0x10>
 801b1e0:	f7ff ffb0 	bl	801b144 <__sinit>
 801b1e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1e6:	07db      	lsls	r3, r3, #31
 801b1e8:	d405      	bmi.n	801b1f6 <_puts_r+0x22>
 801b1ea:	89a3      	ldrh	r3, [r4, #12]
 801b1ec:	0598      	lsls	r0, r3, #22
 801b1ee:	d402      	bmi.n	801b1f6 <_puts_r+0x22>
 801b1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1f2:	f000 f9f2 	bl	801b5da <__retarget_lock_acquire_recursive>
 801b1f6:	89a3      	ldrh	r3, [r4, #12]
 801b1f8:	0719      	lsls	r1, r3, #28
 801b1fa:	d502      	bpl.n	801b202 <_puts_r+0x2e>
 801b1fc:	6923      	ldr	r3, [r4, #16]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d135      	bne.n	801b26e <_puts_r+0x9a>
 801b202:	4621      	mov	r1, r4
 801b204:	4628      	mov	r0, r5
 801b206:	f000 f8cf 	bl	801b3a8 <__swsetup_r>
 801b20a:	b380      	cbz	r0, 801b26e <_puts_r+0x9a>
 801b20c:	f04f 35ff 	mov.w	r5, #4294967295
 801b210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b212:	07da      	lsls	r2, r3, #31
 801b214:	d405      	bmi.n	801b222 <_puts_r+0x4e>
 801b216:	89a3      	ldrh	r3, [r4, #12]
 801b218:	059b      	lsls	r3, r3, #22
 801b21a:	d402      	bmi.n	801b222 <_puts_r+0x4e>
 801b21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b21e:	f000 f9dd 	bl	801b5dc <__retarget_lock_release_recursive>
 801b222:	4628      	mov	r0, r5
 801b224:	bd70      	pop	{r4, r5, r6, pc}
 801b226:	2b00      	cmp	r3, #0
 801b228:	da04      	bge.n	801b234 <_puts_r+0x60>
 801b22a:	69a2      	ldr	r2, [r4, #24]
 801b22c:	429a      	cmp	r2, r3
 801b22e:	dc17      	bgt.n	801b260 <_puts_r+0x8c>
 801b230:	290a      	cmp	r1, #10
 801b232:	d015      	beq.n	801b260 <_puts_r+0x8c>
 801b234:	6823      	ldr	r3, [r4, #0]
 801b236:	1c5a      	adds	r2, r3, #1
 801b238:	6022      	str	r2, [r4, #0]
 801b23a:	7019      	strb	r1, [r3, #0]
 801b23c:	68a3      	ldr	r3, [r4, #8]
 801b23e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b242:	3b01      	subs	r3, #1
 801b244:	60a3      	str	r3, [r4, #8]
 801b246:	2900      	cmp	r1, #0
 801b248:	d1ed      	bne.n	801b226 <_puts_r+0x52>
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	da11      	bge.n	801b272 <_puts_r+0x9e>
 801b24e:	4622      	mov	r2, r4
 801b250:	210a      	movs	r1, #10
 801b252:	4628      	mov	r0, r5
 801b254:	f000 f86a 	bl	801b32c <__swbuf_r>
 801b258:	3001      	adds	r0, #1
 801b25a:	d0d7      	beq.n	801b20c <_puts_r+0x38>
 801b25c:	250a      	movs	r5, #10
 801b25e:	e7d7      	b.n	801b210 <_puts_r+0x3c>
 801b260:	4622      	mov	r2, r4
 801b262:	4628      	mov	r0, r5
 801b264:	f000 f862 	bl	801b32c <__swbuf_r>
 801b268:	3001      	adds	r0, #1
 801b26a:	d1e7      	bne.n	801b23c <_puts_r+0x68>
 801b26c:	e7ce      	b.n	801b20c <_puts_r+0x38>
 801b26e:	3e01      	subs	r6, #1
 801b270:	e7e4      	b.n	801b23c <_puts_r+0x68>
 801b272:	6823      	ldr	r3, [r4, #0]
 801b274:	1c5a      	adds	r2, r3, #1
 801b276:	6022      	str	r2, [r4, #0]
 801b278:	220a      	movs	r2, #10
 801b27a:	701a      	strb	r2, [r3, #0]
 801b27c:	e7ee      	b.n	801b25c <_puts_r+0x88>
	...

0801b280 <puts>:
 801b280:	4b02      	ldr	r3, [pc, #8]	@ (801b28c <puts+0xc>)
 801b282:	4601      	mov	r1, r0
 801b284:	6818      	ldr	r0, [r3, #0]
 801b286:	f7ff bfa5 	b.w	801b1d4 <_puts_r>
 801b28a:	bf00      	nop
 801b28c:	200000cc 	.word	0x200000cc

0801b290 <__sread>:
 801b290:	b510      	push	{r4, lr}
 801b292:	460c      	mov	r4, r1
 801b294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b298:	f000 f940 	bl	801b51c <_read_r>
 801b29c:	2800      	cmp	r0, #0
 801b29e:	bfab      	itete	ge
 801b2a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b2a2:	89a3      	ldrhlt	r3, [r4, #12]
 801b2a4:	181b      	addge	r3, r3, r0
 801b2a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b2aa:	bfac      	ite	ge
 801b2ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b2ae:	81a3      	strhlt	r3, [r4, #12]
 801b2b0:	bd10      	pop	{r4, pc}

0801b2b2 <__swrite>:
 801b2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2b6:	461f      	mov	r7, r3
 801b2b8:	898b      	ldrh	r3, [r1, #12]
 801b2ba:	05db      	lsls	r3, r3, #23
 801b2bc:	4605      	mov	r5, r0
 801b2be:	460c      	mov	r4, r1
 801b2c0:	4616      	mov	r6, r2
 801b2c2:	d505      	bpl.n	801b2d0 <__swrite+0x1e>
 801b2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2c8:	2302      	movs	r3, #2
 801b2ca:	2200      	movs	r2, #0
 801b2cc:	f000 f914 	bl	801b4f8 <_lseek_r>
 801b2d0:	89a3      	ldrh	r3, [r4, #12]
 801b2d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b2da:	81a3      	strh	r3, [r4, #12]
 801b2dc:	4632      	mov	r2, r6
 801b2de:	463b      	mov	r3, r7
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2e6:	f000 b93b 	b.w	801b560 <_write_r>

0801b2ea <__sseek>:
 801b2ea:	b510      	push	{r4, lr}
 801b2ec:	460c      	mov	r4, r1
 801b2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2f2:	f000 f901 	bl	801b4f8 <_lseek_r>
 801b2f6:	1c43      	adds	r3, r0, #1
 801b2f8:	89a3      	ldrh	r3, [r4, #12]
 801b2fa:	bf15      	itete	ne
 801b2fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b2fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b306:	81a3      	strheq	r3, [r4, #12]
 801b308:	bf18      	it	ne
 801b30a:	81a3      	strhne	r3, [r4, #12]
 801b30c:	bd10      	pop	{r4, pc}

0801b30e <__sclose>:
 801b30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b312:	f000 b8e1 	b.w	801b4d8 <_close_r>
	...

0801b318 <viprintf>:
 801b318:	460b      	mov	r3, r1
 801b31a:	4903      	ldr	r1, [pc, #12]	@ (801b328 <viprintf+0x10>)
 801b31c:	4602      	mov	r2, r0
 801b31e:	6808      	ldr	r0, [r1, #0]
 801b320:	6881      	ldr	r1, [r0, #8]
 801b322:	f001 bbd3 	b.w	801cacc <_vfiprintf_r>
 801b326:	bf00      	nop
 801b328:	200000cc 	.word	0x200000cc

0801b32c <__swbuf_r>:
 801b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b32e:	460e      	mov	r6, r1
 801b330:	4614      	mov	r4, r2
 801b332:	4605      	mov	r5, r0
 801b334:	b118      	cbz	r0, 801b33e <__swbuf_r+0x12>
 801b336:	6a03      	ldr	r3, [r0, #32]
 801b338:	b90b      	cbnz	r3, 801b33e <__swbuf_r+0x12>
 801b33a:	f7ff ff03 	bl	801b144 <__sinit>
 801b33e:	69a3      	ldr	r3, [r4, #24]
 801b340:	60a3      	str	r3, [r4, #8]
 801b342:	89a3      	ldrh	r3, [r4, #12]
 801b344:	071a      	lsls	r2, r3, #28
 801b346:	d501      	bpl.n	801b34c <__swbuf_r+0x20>
 801b348:	6923      	ldr	r3, [r4, #16]
 801b34a:	b943      	cbnz	r3, 801b35e <__swbuf_r+0x32>
 801b34c:	4621      	mov	r1, r4
 801b34e:	4628      	mov	r0, r5
 801b350:	f000 f82a 	bl	801b3a8 <__swsetup_r>
 801b354:	b118      	cbz	r0, 801b35e <__swbuf_r+0x32>
 801b356:	f04f 37ff 	mov.w	r7, #4294967295
 801b35a:	4638      	mov	r0, r7
 801b35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b35e:	6823      	ldr	r3, [r4, #0]
 801b360:	6922      	ldr	r2, [r4, #16]
 801b362:	1a98      	subs	r0, r3, r2
 801b364:	6963      	ldr	r3, [r4, #20]
 801b366:	b2f6      	uxtb	r6, r6
 801b368:	4283      	cmp	r3, r0
 801b36a:	4637      	mov	r7, r6
 801b36c:	dc05      	bgt.n	801b37a <__swbuf_r+0x4e>
 801b36e:	4621      	mov	r1, r4
 801b370:	4628      	mov	r0, r5
 801b372:	f001 fd47 	bl	801ce04 <_fflush_r>
 801b376:	2800      	cmp	r0, #0
 801b378:	d1ed      	bne.n	801b356 <__swbuf_r+0x2a>
 801b37a:	68a3      	ldr	r3, [r4, #8]
 801b37c:	3b01      	subs	r3, #1
 801b37e:	60a3      	str	r3, [r4, #8]
 801b380:	6823      	ldr	r3, [r4, #0]
 801b382:	1c5a      	adds	r2, r3, #1
 801b384:	6022      	str	r2, [r4, #0]
 801b386:	701e      	strb	r6, [r3, #0]
 801b388:	6962      	ldr	r2, [r4, #20]
 801b38a:	1c43      	adds	r3, r0, #1
 801b38c:	429a      	cmp	r2, r3
 801b38e:	d004      	beq.n	801b39a <__swbuf_r+0x6e>
 801b390:	89a3      	ldrh	r3, [r4, #12]
 801b392:	07db      	lsls	r3, r3, #31
 801b394:	d5e1      	bpl.n	801b35a <__swbuf_r+0x2e>
 801b396:	2e0a      	cmp	r6, #10
 801b398:	d1df      	bne.n	801b35a <__swbuf_r+0x2e>
 801b39a:	4621      	mov	r1, r4
 801b39c:	4628      	mov	r0, r5
 801b39e:	f001 fd31 	bl	801ce04 <_fflush_r>
 801b3a2:	2800      	cmp	r0, #0
 801b3a4:	d0d9      	beq.n	801b35a <__swbuf_r+0x2e>
 801b3a6:	e7d6      	b.n	801b356 <__swbuf_r+0x2a>

0801b3a8 <__swsetup_r>:
 801b3a8:	b538      	push	{r3, r4, r5, lr}
 801b3aa:	4b29      	ldr	r3, [pc, #164]	@ (801b450 <__swsetup_r+0xa8>)
 801b3ac:	4605      	mov	r5, r0
 801b3ae:	6818      	ldr	r0, [r3, #0]
 801b3b0:	460c      	mov	r4, r1
 801b3b2:	b118      	cbz	r0, 801b3bc <__swsetup_r+0x14>
 801b3b4:	6a03      	ldr	r3, [r0, #32]
 801b3b6:	b90b      	cbnz	r3, 801b3bc <__swsetup_r+0x14>
 801b3b8:	f7ff fec4 	bl	801b144 <__sinit>
 801b3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b3c0:	0719      	lsls	r1, r3, #28
 801b3c2:	d422      	bmi.n	801b40a <__swsetup_r+0x62>
 801b3c4:	06da      	lsls	r2, r3, #27
 801b3c6:	d407      	bmi.n	801b3d8 <__swsetup_r+0x30>
 801b3c8:	2209      	movs	r2, #9
 801b3ca:	602a      	str	r2, [r5, #0]
 801b3cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b3d0:	81a3      	strh	r3, [r4, #12]
 801b3d2:	f04f 30ff 	mov.w	r0, #4294967295
 801b3d6:	e033      	b.n	801b440 <__swsetup_r+0x98>
 801b3d8:	0758      	lsls	r0, r3, #29
 801b3da:	d512      	bpl.n	801b402 <__swsetup_r+0x5a>
 801b3dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b3de:	b141      	cbz	r1, 801b3f2 <__swsetup_r+0x4a>
 801b3e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b3e4:	4299      	cmp	r1, r3
 801b3e6:	d002      	beq.n	801b3ee <__swsetup_r+0x46>
 801b3e8:	4628      	mov	r0, r5
 801b3ea:	f000 ff79 	bl	801c2e0 <_free_r>
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	6363      	str	r3, [r4, #52]	@ 0x34
 801b3f2:	89a3      	ldrh	r3, [r4, #12]
 801b3f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b3f8:	81a3      	strh	r3, [r4, #12]
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	6063      	str	r3, [r4, #4]
 801b3fe:	6923      	ldr	r3, [r4, #16]
 801b400:	6023      	str	r3, [r4, #0]
 801b402:	89a3      	ldrh	r3, [r4, #12]
 801b404:	f043 0308 	orr.w	r3, r3, #8
 801b408:	81a3      	strh	r3, [r4, #12]
 801b40a:	6923      	ldr	r3, [r4, #16]
 801b40c:	b94b      	cbnz	r3, 801b422 <__swsetup_r+0x7a>
 801b40e:	89a3      	ldrh	r3, [r4, #12]
 801b410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b418:	d003      	beq.n	801b422 <__swsetup_r+0x7a>
 801b41a:	4621      	mov	r1, r4
 801b41c:	4628      	mov	r0, r5
 801b41e:	f001 fd51 	bl	801cec4 <__smakebuf_r>
 801b422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b426:	f013 0201 	ands.w	r2, r3, #1
 801b42a:	d00a      	beq.n	801b442 <__swsetup_r+0x9a>
 801b42c:	2200      	movs	r2, #0
 801b42e:	60a2      	str	r2, [r4, #8]
 801b430:	6962      	ldr	r2, [r4, #20]
 801b432:	4252      	negs	r2, r2
 801b434:	61a2      	str	r2, [r4, #24]
 801b436:	6922      	ldr	r2, [r4, #16]
 801b438:	b942      	cbnz	r2, 801b44c <__swsetup_r+0xa4>
 801b43a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b43e:	d1c5      	bne.n	801b3cc <__swsetup_r+0x24>
 801b440:	bd38      	pop	{r3, r4, r5, pc}
 801b442:	0799      	lsls	r1, r3, #30
 801b444:	bf58      	it	pl
 801b446:	6962      	ldrpl	r2, [r4, #20]
 801b448:	60a2      	str	r2, [r4, #8]
 801b44a:	e7f4      	b.n	801b436 <__swsetup_r+0x8e>
 801b44c:	2000      	movs	r0, #0
 801b44e:	e7f7      	b.n	801b440 <__swsetup_r+0x98>
 801b450:	200000cc 	.word	0x200000cc

0801b454 <memcmp>:
 801b454:	b510      	push	{r4, lr}
 801b456:	3901      	subs	r1, #1
 801b458:	4402      	add	r2, r0
 801b45a:	4290      	cmp	r0, r2
 801b45c:	d101      	bne.n	801b462 <memcmp+0xe>
 801b45e:	2000      	movs	r0, #0
 801b460:	e005      	b.n	801b46e <memcmp+0x1a>
 801b462:	7803      	ldrb	r3, [r0, #0]
 801b464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b468:	42a3      	cmp	r3, r4
 801b46a:	d001      	beq.n	801b470 <memcmp+0x1c>
 801b46c:	1b18      	subs	r0, r3, r4
 801b46e:	bd10      	pop	{r4, pc}
 801b470:	3001      	adds	r0, #1
 801b472:	e7f2      	b.n	801b45a <memcmp+0x6>

0801b474 <memset>:
 801b474:	4402      	add	r2, r0
 801b476:	4603      	mov	r3, r0
 801b478:	4293      	cmp	r3, r2
 801b47a:	d100      	bne.n	801b47e <memset+0xa>
 801b47c:	4770      	bx	lr
 801b47e:	f803 1b01 	strb.w	r1, [r3], #1
 801b482:	e7f9      	b.n	801b478 <memset+0x4>

0801b484 <strncmp>:
 801b484:	b510      	push	{r4, lr}
 801b486:	b16a      	cbz	r2, 801b4a4 <strncmp+0x20>
 801b488:	3901      	subs	r1, #1
 801b48a:	1884      	adds	r4, r0, r2
 801b48c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b490:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b494:	429a      	cmp	r2, r3
 801b496:	d103      	bne.n	801b4a0 <strncmp+0x1c>
 801b498:	42a0      	cmp	r0, r4
 801b49a:	d001      	beq.n	801b4a0 <strncmp+0x1c>
 801b49c:	2a00      	cmp	r2, #0
 801b49e:	d1f5      	bne.n	801b48c <strncmp+0x8>
 801b4a0:	1ad0      	subs	r0, r2, r3
 801b4a2:	bd10      	pop	{r4, pc}
 801b4a4:	4610      	mov	r0, r2
 801b4a6:	e7fc      	b.n	801b4a2 <strncmp+0x1e>

0801b4a8 <strncpy>:
 801b4a8:	b510      	push	{r4, lr}
 801b4aa:	3901      	subs	r1, #1
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	b132      	cbz	r2, 801b4be <strncpy+0x16>
 801b4b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b4b4:	f803 4b01 	strb.w	r4, [r3], #1
 801b4b8:	3a01      	subs	r2, #1
 801b4ba:	2c00      	cmp	r4, #0
 801b4bc:	d1f7      	bne.n	801b4ae <strncpy+0x6>
 801b4be:	441a      	add	r2, r3
 801b4c0:	2100      	movs	r1, #0
 801b4c2:	4293      	cmp	r3, r2
 801b4c4:	d100      	bne.n	801b4c8 <strncpy+0x20>
 801b4c6:	bd10      	pop	{r4, pc}
 801b4c8:	f803 1b01 	strb.w	r1, [r3], #1
 801b4cc:	e7f9      	b.n	801b4c2 <strncpy+0x1a>
	...

0801b4d0 <_localeconv_r>:
 801b4d0:	4800      	ldr	r0, [pc, #0]	@ (801b4d4 <_localeconv_r+0x4>)
 801b4d2:	4770      	bx	lr
 801b4d4:	2000020c 	.word	0x2000020c

0801b4d8 <_close_r>:
 801b4d8:	b538      	push	{r3, r4, r5, lr}
 801b4da:	4d06      	ldr	r5, [pc, #24]	@ (801b4f4 <_close_r+0x1c>)
 801b4dc:	2300      	movs	r3, #0
 801b4de:	4604      	mov	r4, r0
 801b4e0:	4608      	mov	r0, r1
 801b4e2:	602b      	str	r3, [r5, #0]
 801b4e4:	f7e8 ff72 	bl	80043cc <_close>
 801b4e8:	1c43      	adds	r3, r0, #1
 801b4ea:	d102      	bne.n	801b4f2 <_close_r+0x1a>
 801b4ec:	682b      	ldr	r3, [r5, #0]
 801b4ee:	b103      	cbz	r3, 801b4f2 <_close_r+0x1a>
 801b4f0:	6023      	str	r3, [r4, #0]
 801b4f2:	bd38      	pop	{r3, r4, r5, pc}
 801b4f4:	20014038 	.word	0x20014038

0801b4f8 <_lseek_r>:
 801b4f8:	b538      	push	{r3, r4, r5, lr}
 801b4fa:	4d07      	ldr	r5, [pc, #28]	@ (801b518 <_lseek_r+0x20>)
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	4608      	mov	r0, r1
 801b500:	4611      	mov	r1, r2
 801b502:	2200      	movs	r2, #0
 801b504:	602a      	str	r2, [r5, #0]
 801b506:	461a      	mov	r2, r3
 801b508:	f7e8 ff87 	bl	800441a <_lseek>
 801b50c:	1c43      	adds	r3, r0, #1
 801b50e:	d102      	bne.n	801b516 <_lseek_r+0x1e>
 801b510:	682b      	ldr	r3, [r5, #0]
 801b512:	b103      	cbz	r3, 801b516 <_lseek_r+0x1e>
 801b514:	6023      	str	r3, [r4, #0]
 801b516:	bd38      	pop	{r3, r4, r5, pc}
 801b518:	20014038 	.word	0x20014038

0801b51c <_read_r>:
 801b51c:	b538      	push	{r3, r4, r5, lr}
 801b51e:	4d07      	ldr	r5, [pc, #28]	@ (801b53c <_read_r+0x20>)
 801b520:	4604      	mov	r4, r0
 801b522:	4608      	mov	r0, r1
 801b524:	4611      	mov	r1, r2
 801b526:	2200      	movs	r2, #0
 801b528:	602a      	str	r2, [r5, #0]
 801b52a:	461a      	mov	r2, r3
 801b52c:	f7e8 ff15 	bl	800435a <_read>
 801b530:	1c43      	adds	r3, r0, #1
 801b532:	d102      	bne.n	801b53a <_read_r+0x1e>
 801b534:	682b      	ldr	r3, [r5, #0]
 801b536:	b103      	cbz	r3, 801b53a <_read_r+0x1e>
 801b538:	6023      	str	r3, [r4, #0]
 801b53a:	bd38      	pop	{r3, r4, r5, pc}
 801b53c:	20014038 	.word	0x20014038

0801b540 <_sbrk_r>:
 801b540:	b538      	push	{r3, r4, r5, lr}
 801b542:	4d06      	ldr	r5, [pc, #24]	@ (801b55c <_sbrk_r+0x1c>)
 801b544:	2300      	movs	r3, #0
 801b546:	4604      	mov	r4, r0
 801b548:	4608      	mov	r0, r1
 801b54a:	602b      	str	r3, [r5, #0]
 801b54c:	f7e8 ff72 	bl	8004434 <_sbrk>
 801b550:	1c43      	adds	r3, r0, #1
 801b552:	d102      	bne.n	801b55a <_sbrk_r+0x1a>
 801b554:	682b      	ldr	r3, [r5, #0]
 801b556:	b103      	cbz	r3, 801b55a <_sbrk_r+0x1a>
 801b558:	6023      	str	r3, [r4, #0]
 801b55a:	bd38      	pop	{r3, r4, r5, pc}
 801b55c:	20014038 	.word	0x20014038

0801b560 <_write_r>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	4d07      	ldr	r5, [pc, #28]	@ (801b580 <_write_r+0x20>)
 801b564:	4604      	mov	r4, r0
 801b566:	4608      	mov	r0, r1
 801b568:	4611      	mov	r1, r2
 801b56a:	2200      	movs	r2, #0
 801b56c:	602a      	str	r2, [r5, #0]
 801b56e:	461a      	mov	r2, r3
 801b570:	f7e8 ff10 	bl	8004394 <_write>
 801b574:	1c43      	adds	r3, r0, #1
 801b576:	d102      	bne.n	801b57e <_write_r+0x1e>
 801b578:	682b      	ldr	r3, [r5, #0]
 801b57a:	b103      	cbz	r3, 801b57e <_write_r+0x1e>
 801b57c:	6023      	str	r3, [r4, #0]
 801b57e:	bd38      	pop	{r3, r4, r5, pc}
 801b580:	20014038 	.word	0x20014038

0801b584 <__errno>:
 801b584:	4b01      	ldr	r3, [pc, #4]	@ (801b58c <__errno+0x8>)
 801b586:	6818      	ldr	r0, [r3, #0]
 801b588:	4770      	bx	lr
 801b58a:	bf00      	nop
 801b58c:	200000cc 	.word	0x200000cc

0801b590 <__libc_init_array>:
 801b590:	b570      	push	{r4, r5, r6, lr}
 801b592:	4d0d      	ldr	r5, [pc, #52]	@ (801b5c8 <__libc_init_array+0x38>)
 801b594:	4c0d      	ldr	r4, [pc, #52]	@ (801b5cc <__libc_init_array+0x3c>)
 801b596:	1b64      	subs	r4, r4, r5
 801b598:	10a4      	asrs	r4, r4, #2
 801b59a:	2600      	movs	r6, #0
 801b59c:	42a6      	cmp	r6, r4
 801b59e:	d109      	bne.n	801b5b4 <__libc_init_array+0x24>
 801b5a0:	4d0b      	ldr	r5, [pc, #44]	@ (801b5d0 <__libc_init_array+0x40>)
 801b5a2:	4c0c      	ldr	r4, [pc, #48]	@ (801b5d4 <__libc_init_array+0x44>)
 801b5a4:	f001 fd56 	bl	801d054 <_init>
 801b5a8:	1b64      	subs	r4, r4, r5
 801b5aa:	10a4      	asrs	r4, r4, #2
 801b5ac:	2600      	movs	r6, #0
 801b5ae:	42a6      	cmp	r6, r4
 801b5b0:	d105      	bne.n	801b5be <__libc_init_array+0x2e>
 801b5b2:	bd70      	pop	{r4, r5, r6, pc}
 801b5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5b8:	4798      	blx	r3
 801b5ba:	3601      	adds	r6, #1
 801b5bc:	e7ee      	b.n	801b59c <__libc_init_array+0xc>
 801b5be:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5c2:	4798      	blx	r3
 801b5c4:	3601      	adds	r6, #1
 801b5c6:	e7f2      	b.n	801b5ae <__libc_init_array+0x1e>
 801b5c8:	0806cddc 	.word	0x0806cddc
 801b5cc:	0806cddc 	.word	0x0806cddc
 801b5d0:	0806cddc 	.word	0x0806cddc
 801b5d4:	0806cde0 	.word	0x0806cde0

0801b5d8 <__retarget_lock_init_recursive>:
 801b5d8:	4770      	bx	lr

0801b5da <__retarget_lock_acquire_recursive>:
 801b5da:	4770      	bx	lr

0801b5dc <__retarget_lock_release_recursive>:
 801b5dc:	4770      	bx	lr

0801b5de <strcpy>:
 801b5de:	4603      	mov	r3, r0
 801b5e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5e4:	f803 2b01 	strb.w	r2, [r3], #1
 801b5e8:	2a00      	cmp	r2, #0
 801b5ea:	d1f9      	bne.n	801b5e0 <strcpy+0x2>
 801b5ec:	4770      	bx	lr

0801b5ee <memcpy>:
 801b5ee:	440a      	add	r2, r1
 801b5f0:	4291      	cmp	r1, r2
 801b5f2:	f100 33ff 	add.w	r3, r0, #4294967295
 801b5f6:	d100      	bne.n	801b5fa <memcpy+0xc>
 801b5f8:	4770      	bx	lr
 801b5fa:	b510      	push	{r4, lr}
 801b5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b600:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b604:	4291      	cmp	r1, r2
 801b606:	d1f9      	bne.n	801b5fc <memcpy+0xe>
 801b608:	bd10      	pop	{r4, pc}
	...

0801b60c <__assert_func>:
 801b60c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b60e:	4614      	mov	r4, r2
 801b610:	461a      	mov	r2, r3
 801b612:	4b09      	ldr	r3, [pc, #36]	@ (801b638 <__assert_func+0x2c>)
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	4605      	mov	r5, r0
 801b618:	68d8      	ldr	r0, [r3, #12]
 801b61a:	b954      	cbnz	r4, 801b632 <__assert_func+0x26>
 801b61c:	4b07      	ldr	r3, [pc, #28]	@ (801b63c <__assert_func+0x30>)
 801b61e:	461c      	mov	r4, r3
 801b620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b624:	9100      	str	r1, [sp, #0]
 801b626:	462b      	mov	r3, r5
 801b628:	4905      	ldr	r1, [pc, #20]	@ (801b640 <__assert_func+0x34>)
 801b62a:	f001 fc13 	bl	801ce54 <fiprintf>
 801b62e:	f001 fca7 	bl	801cf80 <abort>
 801b632:	4b04      	ldr	r3, [pc, #16]	@ (801b644 <__assert_func+0x38>)
 801b634:	e7f4      	b.n	801b620 <__assert_func+0x14>
 801b636:	bf00      	nop
 801b638:	200000cc 	.word	0x200000cc
 801b63c:	0806cbe7 	.word	0x0806cbe7
 801b640:	0806cbb9 	.word	0x0806cbb9
 801b644:	0806cbac 	.word	0x0806cbac

0801b648 <quorem>:
 801b648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b64c:	6903      	ldr	r3, [r0, #16]
 801b64e:	690c      	ldr	r4, [r1, #16]
 801b650:	42a3      	cmp	r3, r4
 801b652:	4607      	mov	r7, r0
 801b654:	db7e      	blt.n	801b754 <quorem+0x10c>
 801b656:	3c01      	subs	r4, #1
 801b658:	f101 0814 	add.w	r8, r1, #20
 801b65c:	00a3      	lsls	r3, r4, #2
 801b65e:	f100 0514 	add.w	r5, r0, #20
 801b662:	9300      	str	r3, [sp, #0]
 801b664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b668:	9301      	str	r3, [sp, #4]
 801b66a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b66e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b672:	3301      	adds	r3, #1
 801b674:	429a      	cmp	r2, r3
 801b676:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b67a:	fbb2 f6f3 	udiv	r6, r2, r3
 801b67e:	d32e      	bcc.n	801b6de <quorem+0x96>
 801b680:	f04f 0a00 	mov.w	sl, #0
 801b684:	46c4      	mov	ip, r8
 801b686:	46ae      	mov	lr, r5
 801b688:	46d3      	mov	fp, sl
 801b68a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b68e:	b298      	uxth	r0, r3
 801b690:	fb06 a000 	mla	r0, r6, r0, sl
 801b694:	0c02      	lsrs	r2, r0, #16
 801b696:	0c1b      	lsrs	r3, r3, #16
 801b698:	fb06 2303 	mla	r3, r6, r3, r2
 801b69c:	f8de 2000 	ldr.w	r2, [lr]
 801b6a0:	b280      	uxth	r0, r0
 801b6a2:	b292      	uxth	r2, r2
 801b6a4:	1a12      	subs	r2, r2, r0
 801b6a6:	445a      	add	r2, fp
 801b6a8:	f8de 0000 	ldr.w	r0, [lr]
 801b6ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b6b0:	b29b      	uxth	r3, r3
 801b6b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b6b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b6ba:	b292      	uxth	r2, r2
 801b6bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b6c0:	45e1      	cmp	r9, ip
 801b6c2:	f84e 2b04 	str.w	r2, [lr], #4
 801b6c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b6ca:	d2de      	bcs.n	801b68a <quorem+0x42>
 801b6cc:	9b00      	ldr	r3, [sp, #0]
 801b6ce:	58eb      	ldr	r3, [r5, r3]
 801b6d0:	b92b      	cbnz	r3, 801b6de <quorem+0x96>
 801b6d2:	9b01      	ldr	r3, [sp, #4]
 801b6d4:	3b04      	subs	r3, #4
 801b6d6:	429d      	cmp	r5, r3
 801b6d8:	461a      	mov	r2, r3
 801b6da:	d32f      	bcc.n	801b73c <quorem+0xf4>
 801b6dc:	613c      	str	r4, [r7, #16]
 801b6de:	4638      	mov	r0, r7
 801b6e0:	f001 f8c2 	bl	801c868 <__mcmp>
 801b6e4:	2800      	cmp	r0, #0
 801b6e6:	db25      	blt.n	801b734 <quorem+0xec>
 801b6e8:	4629      	mov	r1, r5
 801b6ea:	2000      	movs	r0, #0
 801b6ec:	f858 2b04 	ldr.w	r2, [r8], #4
 801b6f0:	f8d1 c000 	ldr.w	ip, [r1]
 801b6f4:	fa1f fe82 	uxth.w	lr, r2
 801b6f8:	fa1f f38c 	uxth.w	r3, ip
 801b6fc:	eba3 030e 	sub.w	r3, r3, lr
 801b700:	4403      	add	r3, r0
 801b702:	0c12      	lsrs	r2, r2, #16
 801b704:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b708:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b70c:	b29b      	uxth	r3, r3
 801b70e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b712:	45c1      	cmp	r9, r8
 801b714:	f841 3b04 	str.w	r3, [r1], #4
 801b718:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b71c:	d2e6      	bcs.n	801b6ec <quorem+0xa4>
 801b71e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b726:	b922      	cbnz	r2, 801b732 <quorem+0xea>
 801b728:	3b04      	subs	r3, #4
 801b72a:	429d      	cmp	r5, r3
 801b72c:	461a      	mov	r2, r3
 801b72e:	d30b      	bcc.n	801b748 <quorem+0x100>
 801b730:	613c      	str	r4, [r7, #16]
 801b732:	3601      	adds	r6, #1
 801b734:	4630      	mov	r0, r6
 801b736:	b003      	add	sp, #12
 801b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b73c:	6812      	ldr	r2, [r2, #0]
 801b73e:	3b04      	subs	r3, #4
 801b740:	2a00      	cmp	r2, #0
 801b742:	d1cb      	bne.n	801b6dc <quorem+0x94>
 801b744:	3c01      	subs	r4, #1
 801b746:	e7c6      	b.n	801b6d6 <quorem+0x8e>
 801b748:	6812      	ldr	r2, [r2, #0]
 801b74a:	3b04      	subs	r3, #4
 801b74c:	2a00      	cmp	r2, #0
 801b74e:	d1ef      	bne.n	801b730 <quorem+0xe8>
 801b750:	3c01      	subs	r4, #1
 801b752:	e7ea      	b.n	801b72a <quorem+0xe2>
 801b754:	2000      	movs	r0, #0
 801b756:	e7ee      	b.n	801b736 <quorem+0xee>

0801b758 <_dtoa_r>:
 801b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b75c:	69c7      	ldr	r7, [r0, #28]
 801b75e:	b099      	sub	sp, #100	@ 0x64
 801b760:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b764:	ec55 4b10 	vmov	r4, r5, d0
 801b768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b76a:	9109      	str	r1, [sp, #36]	@ 0x24
 801b76c:	4683      	mov	fp, r0
 801b76e:	920e      	str	r2, [sp, #56]	@ 0x38
 801b770:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b772:	b97f      	cbnz	r7, 801b794 <_dtoa_r+0x3c>
 801b774:	2010      	movs	r0, #16
 801b776:	f7fe fe95 	bl	801a4a4 <malloc>
 801b77a:	4602      	mov	r2, r0
 801b77c:	f8cb 001c 	str.w	r0, [fp, #28]
 801b780:	b920      	cbnz	r0, 801b78c <_dtoa_r+0x34>
 801b782:	4ba7      	ldr	r3, [pc, #668]	@ (801ba20 <_dtoa_r+0x2c8>)
 801b784:	21ef      	movs	r1, #239	@ 0xef
 801b786:	48a7      	ldr	r0, [pc, #668]	@ (801ba24 <_dtoa_r+0x2cc>)
 801b788:	f7ff ff40 	bl	801b60c <__assert_func>
 801b78c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b790:	6007      	str	r7, [r0, #0]
 801b792:	60c7      	str	r7, [r0, #12]
 801b794:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b798:	6819      	ldr	r1, [r3, #0]
 801b79a:	b159      	cbz	r1, 801b7b4 <_dtoa_r+0x5c>
 801b79c:	685a      	ldr	r2, [r3, #4]
 801b79e:	604a      	str	r2, [r1, #4]
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	4093      	lsls	r3, r2
 801b7a4:	608b      	str	r3, [r1, #8]
 801b7a6:	4658      	mov	r0, fp
 801b7a8:	f000 fe24 	bl	801c3f4 <_Bfree>
 801b7ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b7b0:	2200      	movs	r2, #0
 801b7b2:	601a      	str	r2, [r3, #0]
 801b7b4:	1e2b      	subs	r3, r5, #0
 801b7b6:	bfb9      	ittee	lt
 801b7b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b7bc:	9303      	strlt	r3, [sp, #12]
 801b7be:	2300      	movge	r3, #0
 801b7c0:	6033      	strge	r3, [r6, #0]
 801b7c2:	9f03      	ldr	r7, [sp, #12]
 801b7c4:	4b98      	ldr	r3, [pc, #608]	@ (801ba28 <_dtoa_r+0x2d0>)
 801b7c6:	bfbc      	itt	lt
 801b7c8:	2201      	movlt	r2, #1
 801b7ca:	6032      	strlt	r2, [r6, #0]
 801b7cc:	43bb      	bics	r3, r7
 801b7ce:	d112      	bne.n	801b7f6 <_dtoa_r+0x9e>
 801b7d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b7d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b7d6:	6013      	str	r3, [r2, #0]
 801b7d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b7dc:	4323      	orrs	r3, r4
 801b7de:	f000 854d 	beq.w	801c27c <_dtoa_r+0xb24>
 801b7e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b7e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ba3c <_dtoa_r+0x2e4>
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	f000 854f 	beq.w	801c28c <_dtoa_r+0xb34>
 801b7ee:	f10a 0303 	add.w	r3, sl, #3
 801b7f2:	f000 bd49 	b.w	801c288 <_dtoa_r+0xb30>
 801b7f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b7fa:	2200      	movs	r2, #0
 801b7fc:	ec51 0b17 	vmov	r0, r1, d7
 801b800:	2300      	movs	r3, #0
 801b802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b806:	f7e5 f977 	bl	8000af8 <__aeabi_dcmpeq>
 801b80a:	4680      	mov	r8, r0
 801b80c:	b158      	cbz	r0, 801b826 <_dtoa_r+0xce>
 801b80e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b810:	2301      	movs	r3, #1
 801b812:	6013      	str	r3, [r2, #0]
 801b814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b816:	b113      	cbz	r3, 801b81e <_dtoa_r+0xc6>
 801b818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b81a:	4b84      	ldr	r3, [pc, #528]	@ (801ba2c <_dtoa_r+0x2d4>)
 801b81c:	6013      	str	r3, [r2, #0]
 801b81e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801ba40 <_dtoa_r+0x2e8>
 801b822:	f000 bd33 	b.w	801c28c <_dtoa_r+0xb34>
 801b826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b82a:	aa16      	add	r2, sp, #88	@ 0x58
 801b82c:	a917      	add	r1, sp, #92	@ 0x5c
 801b82e:	4658      	mov	r0, fp
 801b830:	f001 f8ca 	bl	801c9c8 <__d2b>
 801b834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b838:	4681      	mov	r9, r0
 801b83a:	2e00      	cmp	r6, #0
 801b83c:	d077      	beq.n	801b92e <_dtoa_r+0x1d6>
 801b83e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b84c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b858:	4619      	mov	r1, r3
 801b85a:	2200      	movs	r2, #0
 801b85c:	4b74      	ldr	r3, [pc, #464]	@ (801ba30 <_dtoa_r+0x2d8>)
 801b85e:	f7e4 fd2b 	bl	80002b8 <__aeabi_dsub>
 801b862:	a369      	add	r3, pc, #420	@ (adr r3, 801ba08 <_dtoa_r+0x2b0>)
 801b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b868:	f7e4 fede 	bl	8000628 <__aeabi_dmul>
 801b86c:	a368      	add	r3, pc, #416	@ (adr r3, 801ba10 <_dtoa_r+0x2b8>)
 801b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b872:	f7e4 fd23 	bl	80002bc <__adddf3>
 801b876:	4604      	mov	r4, r0
 801b878:	4630      	mov	r0, r6
 801b87a:	460d      	mov	r5, r1
 801b87c:	f7e4 fe6a 	bl	8000554 <__aeabi_i2d>
 801b880:	a365      	add	r3, pc, #404	@ (adr r3, 801ba18 <_dtoa_r+0x2c0>)
 801b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b886:	f7e4 fecf 	bl	8000628 <__aeabi_dmul>
 801b88a:	4602      	mov	r2, r0
 801b88c:	460b      	mov	r3, r1
 801b88e:	4620      	mov	r0, r4
 801b890:	4629      	mov	r1, r5
 801b892:	f7e4 fd13 	bl	80002bc <__adddf3>
 801b896:	4604      	mov	r4, r0
 801b898:	460d      	mov	r5, r1
 801b89a:	f7e5 f975 	bl	8000b88 <__aeabi_d2iz>
 801b89e:	2200      	movs	r2, #0
 801b8a0:	4607      	mov	r7, r0
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	4629      	mov	r1, r5
 801b8a8:	f7e5 f930 	bl	8000b0c <__aeabi_dcmplt>
 801b8ac:	b140      	cbz	r0, 801b8c0 <_dtoa_r+0x168>
 801b8ae:	4638      	mov	r0, r7
 801b8b0:	f7e4 fe50 	bl	8000554 <__aeabi_i2d>
 801b8b4:	4622      	mov	r2, r4
 801b8b6:	462b      	mov	r3, r5
 801b8b8:	f7e5 f91e 	bl	8000af8 <__aeabi_dcmpeq>
 801b8bc:	b900      	cbnz	r0, 801b8c0 <_dtoa_r+0x168>
 801b8be:	3f01      	subs	r7, #1
 801b8c0:	2f16      	cmp	r7, #22
 801b8c2:	d851      	bhi.n	801b968 <_dtoa_r+0x210>
 801b8c4:	4b5b      	ldr	r3, [pc, #364]	@ (801ba34 <_dtoa_r+0x2dc>)
 801b8c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b8d2:	f7e5 f91b 	bl	8000b0c <__aeabi_dcmplt>
 801b8d6:	2800      	cmp	r0, #0
 801b8d8:	d048      	beq.n	801b96c <_dtoa_r+0x214>
 801b8da:	3f01      	subs	r7, #1
 801b8dc:	2300      	movs	r3, #0
 801b8de:	9312      	str	r3, [sp, #72]	@ 0x48
 801b8e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b8e2:	1b9b      	subs	r3, r3, r6
 801b8e4:	1e5a      	subs	r2, r3, #1
 801b8e6:	bf44      	itt	mi
 801b8e8:	f1c3 0801 	rsbmi	r8, r3, #1
 801b8ec:	2300      	movmi	r3, #0
 801b8ee:	9208      	str	r2, [sp, #32]
 801b8f0:	bf54      	ite	pl
 801b8f2:	f04f 0800 	movpl.w	r8, #0
 801b8f6:	9308      	strmi	r3, [sp, #32]
 801b8f8:	2f00      	cmp	r7, #0
 801b8fa:	db39      	blt.n	801b970 <_dtoa_r+0x218>
 801b8fc:	9b08      	ldr	r3, [sp, #32]
 801b8fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b900:	443b      	add	r3, r7
 801b902:	9308      	str	r3, [sp, #32]
 801b904:	2300      	movs	r3, #0
 801b906:	930a      	str	r3, [sp, #40]	@ 0x28
 801b908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b90a:	2b09      	cmp	r3, #9
 801b90c:	d864      	bhi.n	801b9d8 <_dtoa_r+0x280>
 801b90e:	2b05      	cmp	r3, #5
 801b910:	bfc4      	itt	gt
 801b912:	3b04      	subgt	r3, #4
 801b914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b918:	f1a3 0302 	sub.w	r3, r3, #2
 801b91c:	bfcc      	ite	gt
 801b91e:	2400      	movgt	r4, #0
 801b920:	2401      	movle	r4, #1
 801b922:	2b03      	cmp	r3, #3
 801b924:	d863      	bhi.n	801b9ee <_dtoa_r+0x296>
 801b926:	e8df f003 	tbb	[pc, r3]
 801b92a:	372a      	.short	0x372a
 801b92c:	5535      	.short	0x5535
 801b92e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b932:	441e      	add	r6, r3
 801b934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b938:	2b20      	cmp	r3, #32
 801b93a:	bfc1      	itttt	gt
 801b93c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b940:	409f      	lslgt	r7, r3
 801b942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b946:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b94a:	bfd6      	itet	le
 801b94c:	f1c3 0320 	rsble	r3, r3, #32
 801b950:	ea47 0003 	orrgt.w	r0, r7, r3
 801b954:	fa04 f003 	lslle.w	r0, r4, r3
 801b958:	f7e4 fdec 	bl	8000534 <__aeabi_ui2d>
 801b95c:	2201      	movs	r2, #1
 801b95e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b962:	3e01      	subs	r6, #1
 801b964:	9214      	str	r2, [sp, #80]	@ 0x50
 801b966:	e777      	b.n	801b858 <_dtoa_r+0x100>
 801b968:	2301      	movs	r3, #1
 801b96a:	e7b8      	b.n	801b8de <_dtoa_r+0x186>
 801b96c:	9012      	str	r0, [sp, #72]	@ 0x48
 801b96e:	e7b7      	b.n	801b8e0 <_dtoa_r+0x188>
 801b970:	427b      	negs	r3, r7
 801b972:	930a      	str	r3, [sp, #40]	@ 0x28
 801b974:	2300      	movs	r3, #0
 801b976:	eba8 0807 	sub.w	r8, r8, r7
 801b97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b97c:	e7c4      	b.n	801b908 <_dtoa_r+0x1b0>
 801b97e:	2300      	movs	r3, #0
 801b980:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b984:	2b00      	cmp	r3, #0
 801b986:	dc35      	bgt.n	801b9f4 <_dtoa_r+0x29c>
 801b988:	2301      	movs	r3, #1
 801b98a:	9300      	str	r3, [sp, #0]
 801b98c:	9307      	str	r3, [sp, #28]
 801b98e:	461a      	mov	r2, r3
 801b990:	920e      	str	r2, [sp, #56]	@ 0x38
 801b992:	e00b      	b.n	801b9ac <_dtoa_r+0x254>
 801b994:	2301      	movs	r3, #1
 801b996:	e7f3      	b.n	801b980 <_dtoa_r+0x228>
 801b998:	2300      	movs	r3, #0
 801b99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b99c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b99e:	18fb      	adds	r3, r7, r3
 801b9a0:	9300      	str	r3, [sp, #0]
 801b9a2:	3301      	adds	r3, #1
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	9307      	str	r3, [sp, #28]
 801b9a8:	bfb8      	it	lt
 801b9aa:	2301      	movlt	r3, #1
 801b9ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b9b0:	2100      	movs	r1, #0
 801b9b2:	2204      	movs	r2, #4
 801b9b4:	f102 0514 	add.w	r5, r2, #20
 801b9b8:	429d      	cmp	r5, r3
 801b9ba:	d91f      	bls.n	801b9fc <_dtoa_r+0x2a4>
 801b9bc:	6041      	str	r1, [r0, #4]
 801b9be:	4658      	mov	r0, fp
 801b9c0:	f000 fcd8 	bl	801c374 <_Balloc>
 801b9c4:	4682      	mov	sl, r0
 801b9c6:	2800      	cmp	r0, #0
 801b9c8:	d13c      	bne.n	801ba44 <_dtoa_r+0x2ec>
 801b9ca:	4b1b      	ldr	r3, [pc, #108]	@ (801ba38 <_dtoa_r+0x2e0>)
 801b9cc:	4602      	mov	r2, r0
 801b9ce:	f240 11af 	movw	r1, #431	@ 0x1af
 801b9d2:	e6d8      	b.n	801b786 <_dtoa_r+0x2e>
 801b9d4:	2301      	movs	r3, #1
 801b9d6:	e7e0      	b.n	801b99a <_dtoa_r+0x242>
 801b9d8:	2401      	movs	r4, #1
 801b9da:	2300      	movs	r3, #0
 801b9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9de:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b9e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b9e4:	9300      	str	r3, [sp, #0]
 801b9e6:	9307      	str	r3, [sp, #28]
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	2312      	movs	r3, #18
 801b9ec:	e7d0      	b.n	801b990 <_dtoa_r+0x238>
 801b9ee:	2301      	movs	r3, #1
 801b9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b9f2:	e7f5      	b.n	801b9e0 <_dtoa_r+0x288>
 801b9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b9f6:	9300      	str	r3, [sp, #0]
 801b9f8:	9307      	str	r3, [sp, #28]
 801b9fa:	e7d7      	b.n	801b9ac <_dtoa_r+0x254>
 801b9fc:	3101      	adds	r1, #1
 801b9fe:	0052      	lsls	r2, r2, #1
 801ba00:	e7d8      	b.n	801b9b4 <_dtoa_r+0x25c>
 801ba02:	bf00      	nop
 801ba04:	f3af 8000 	nop.w
 801ba08:	636f4361 	.word	0x636f4361
 801ba0c:	3fd287a7 	.word	0x3fd287a7
 801ba10:	8b60c8b3 	.word	0x8b60c8b3
 801ba14:	3fc68a28 	.word	0x3fc68a28
 801ba18:	509f79fb 	.word	0x509f79fb
 801ba1c:	3fd34413 	.word	0x3fd34413
 801ba20:	0806ca08 	.word	0x0806ca08
 801ba24:	0806cbf5 	.word	0x0806cbf5
 801ba28:	7ff00000 	.word	0x7ff00000
 801ba2c:	0806cb89 	.word	0x0806cb89
 801ba30:	3ff80000 	.word	0x3ff80000
 801ba34:	0806ccf0 	.word	0x0806ccf0
 801ba38:	0806cc4d 	.word	0x0806cc4d
 801ba3c:	0806cbf1 	.word	0x0806cbf1
 801ba40:	0806cb88 	.word	0x0806cb88
 801ba44:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ba48:	6018      	str	r0, [r3, #0]
 801ba4a:	9b07      	ldr	r3, [sp, #28]
 801ba4c:	2b0e      	cmp	r3, #14
 801ba4e:	f200 80a4 	bhi.w	801bb9a <_dtoa_r+0x442>
 801ba52:	2c00      	cmp	r4, #0
 801ba54:	f000 80a1 	beq.w	801bb9a <_dtoa_r+0x442>
 801ba58:	2f00      	cmp	r7, #0
 801ba5a:	dd33      	ble.n	801bac4 <_dtoa_r+0x36c>
 801ba5c:	4bad      	ldr	r3, [pc, #692]	@ (801bd14 <_dtoa_r+0x5bc>)
 801ba5e:	f007 020f 	and.w	r2, r7, #15
 801ba62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba66:	ed93 7b00 	vldr	d7, [r3]
 801ba6a:	05f8      	lsls	r0, r7, #23
 801ba6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ba70:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ba74:	d516      	bpl.n	801baa4 <_dtoa_r+0x34c>
 801ba76:	4ba8      	ldr	r3, [pc, #672]	@ (801bd18 <_dtoa_r+0x5c0>)
 801ba78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ba7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ba80:	f7e4 fefc 	bl	800087c <__aeabi_ddiv>
 801ba84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba88:	f004 040f 	and.w	r4, r4, #15
 801ba8c:	2603      	movs	r6, #3
 801ba8e:	4da2      	ldr	r5, [pc, #648]	@ (801bd18 <_dtoa_r+0x5c0>)
 801ba90:	b954      	cbnz	r4, 801baa8 <_dtoa_r+0x350>
 801ba92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba9a:	f7e4 feef 	bl	800087c <__aeabi_ddiv>
 801ba9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801baa2:	e028      	b.n	801baf6 <_dtoa_r+0x39e>
 801baa4:	2602      	movs	r6, #2
 801baa6:	e7f2      	b.n	801ba8e <_dtoa_r+0x336>
 801baa8:	07e1      	lsls	r1, r4, #31
 801baaa:	d508      	bpl.n	801babe <_dtoa_r+0x366>
 801baac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bab4:	f7e4 fdb8 	bl	8000628 <__aeabi_dmul>
 801bab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801babc:	3601      	adds	r6, #1
 801babe:	1064      	asrs	r4, r4, #1
 801bac0:	3508      	adds	r5, #8
 801bac2:	e7e5      	b.n	801ba90 <_dtoa_r+0x338>
 801bac4:	f000 80d2 	beq.w	801bc6c <_dtoa_r+0x514>
 801bac8:	427c      	negs	r4, r7
 801baca:	4b92      	ldr	r3, [pc, #584]	@ (801bd14 <_dtoa_r+0x5bc>)
 801bacc:	4d92      	ldr	r5, [pc, #584]	@ (801bd18 <_dtoa_r+0x5c0>)
 801bace:	f004 020f 	and.w	r2, r4, #15
 801bad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bade:	f7e4 fda3 	bl	8000628 <__aeabi_dmul>
 801bae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bae6:	1124      	asrs	r4, r4, #4
 801bae8:	2300      	movs	r3, #0
 801baea:	2602      	movs	r6, #2
 801baec:	2c00      	cmp	r4, #0
 801baee:	f040 80b2 	bne.w	801bc56 <_dtoa_r+0x4fe>
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d1d3      	bne.n	801ba9e <_dtoa_r+0x346>
 801baf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801baf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	f000 80b7 	beq.w	801bc70 <_dtoa_r+0x518>
 801bb02:	4b86      	ldr	r3, [pc, #536]	@ (801bd1c <_dtoa_r+0x5c4>)
 801bb04:	2200      	movs	r2, #0
 801bb06:	4620      	mov	r0, r4
 801bb08:	4629      	mov	r1, r5
 801bb0a:	f7e4 ffff 	bl	8000b0c <__aeabi_dcmplt>
 801bb0e:	2800      	cmp	r0, #0
 801bb10:	f000 80ae 	beq.w	801bc70 <_dtoa_r+0x518>
 801bb14:	9b07      	ldr	r3, [sp, #28]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	f000 80aa 	beq.w	801bc70 <_dtoa_r+0x518>
 801bb1c:	9b00      	ldr	r3, [sp, #0]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	dd37      	ble.n	801bb92 <_dtoa_r+0x43a>
 801bb22:	1e7b      	subs	r3, r7, #1
 801bb24:	9304      	str	r3, [sp, #16]
 801bb26:	4620      	mov	r0, r4
 801bb28:	4b7d      	ldr	r3, [pc, #500]	@ (801bd20 <_dtoa_r+0x5c8>)
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	4629      	mov	r1, r5
 801bb2e:	f7e4 fd7b 	bl	8000628 <__aeabi_dmul>
 801bb32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb36:	9c00      	ldr	r4, [sp, #0]
 801bb38:	3601      	adds	r6, #1
 801bb3a:	4630      	mov	r0, r6
 801bb3c:	f7e4 fd0a 	bl	8000554 <__aeabi_i2d>
 801bb40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb44:	f7e4 fd70 	bl	8000628 <__aeabi_dmul>
 801bb48:	4b76      	ldr	r3, [pc, #472]	@ (801bd24 <_dtoa_r+0x5cc>)
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	f7e4 fbb6 	bl	80002bc <__adddf3>
 801bb50:	4605      	mov	r5, r0
 801bb52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bb56:	2c00      	cmp	r4, #0
 801bb58:	f040 808d 	bne.w	801bc76 <_dtoa_r+0x51e>
 801bb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb60:	4b71      	ldr	r3, [pc, #452]	@ (801bd28 <_dtoa_r+0x5d0>)
 801bb62:	2200      	movs	r2, #0
 801bb64:	f7e4 fba8 	bl	80002b8 <__aeabi_dsub>
 801bb68:	4602      	mov	r2, r0
 801bb6a:	460b      	mov	r3, r1
 801bb6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bb70:	462a      	mov	r2, r5
 801bb72:	4633      	mov	r3, r6
 801bb74:	f7e4 ffe8 	bl	8000b48 <__aeabi_dcmpgt>
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	f040 828b 	bne.w	801c094 <_dtoa_r+0x93c>
 801bb7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb82:	462a      	mov	r2, r5
 801bb84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bb88:	f7e4 ffc0 	bl	8000b0c <__aeabi_dcmplt>
 801bb8c:	2800      	cmp	r0, #0
 801bb8e:	f040 8128 	bne.w	801bde2 <_dtoa_r+0x68a>
 801bb92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bb96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bb9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	f2c0 815a 	blt.w	801be56 <_dtoa_r+0x6fe>
 801bba2:	2f0e      	cmp	r7, #14
 801bba4:	f300 8157 	bgt.w	801be56 <_dtoa_r+0x6fe>
 801bba8:	4b5a      	ldr	r3, [pc, #360]	@ (801bd14 <_dtoa_r+0x5bc>)
 801bbaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bbae:	ed93 7b00 	vldr	d7, [r3]
 801bbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	ed8d 7b00 	vstr	d7, [sp]
 801bbba:	da03      	bge.n	801bbc4 <_dtoa_r+0x46c>
 801bbbc:	9b07      	ldr	r3, [sp, #28]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	f340 8101 	ble.w	801bdc6 <_dtoa_r+0x66e>
 801bbc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bbc8:	4656      	mov	r6, sl
 801bbca:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbce:	4620      	mov	r0, r4
 801bbd0:	4629      	mov	r1, r5
 801bbd2:	f7e4 fe53 	bl	800087c <__aeabi_ddiv>
 801bbd6:	f7e4 ffd7 	bl	8000b88 <__aeabi_d2iz>
 801bbda:	4680      	mov	r8, r0
 801bbdc:	f7e4 fcba 	bl	8000554 <__aeabi_i2d>
 801bbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbe4:	f7e4 fd20 	bl	8000628 <__aeabi_dmul>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	460b      	mov	r3, r1
 801bbec:	4620      	mov	r0, r4
 801bbee:	4629      	mov	r1, r5
 801bbf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bbf4:	f7e4 fb60 	bl	80002b8 <__aeabi_dsub>
 801bbf8:	f806 4b01 	strb.w	r4, [r6], #1
 801bbfc:	9d07      	ldr	r5, [sp, #28]
 801bbfe:	eba6 040a 	sub.w	r4, r6, sl
 801bc02:	42a5      	cmp	r5, r4
 801bc04:	4602      	mov	r2, r0
 801bc06:	460b      	mov	r3, r1
 801bc08:	f040 8117 	bne.w	801be3a <_dtoa_r+0x6e2>
 801bc0c:	f7e4 fb56 	bl	80002bc <__adddf3>
 801bc10:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc14:	4604      	mov	r4, r0
 801bc16:	460d      	mov	r5, r1
 801bc18:	f7e4 ff96 	bl	8000b48 <__aeabi_dcmpgt>
 801bc1c:	2800      	cmp	r0, #0
 801bc1e:	f040 80f9 	bne.w	801be14 <_dtoa_r+0x6bc>
 801bc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc26:	4620      	mov	r0, r4
 801bc28:	4629      	mov	r1, r5
 801bc2a:	f7e4 ff65 	bl	8000af8 <__aeabi_dcmpeq>
 801bc2e:	b118      	cbz	r0, 801bc38 <_dtoa_r+0x4e0>
 801bc30:	f018 0f01 	tst.w	r8, #1
 801bc34:	f040 80ee 	bne.w	801be14 <_dtoa_r+0x6bc>
 801bc38:	4649      	mov	r1, r9
 801bc3a:	4658      	mov	r0, fp
 801bc3c:	f000 fbda 	bl	801c3f4 <_Bfree>
 801bc40:	2300      	movs	r3, #0
 801bc42:	7033      	strb	r3, [r6, #0]
 801bc44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc46:	3701      	adds	r7, #1
 801bc48:	601f      	str	r7, [r3, #0]
 801bc4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	f000 831d 	beq.w	801c28c <_dtoa_r+0xb34>
 801bc52:	601e      	str	r6, [r3, #0]
 801bc54:	e31a      	b.n	801c28c <_dtoa_r+0xb34>
 801bc56:	07e2      	lsls	r2, r4, #31
 801bc58:	d505      	bpl.n	801bc66 <_dtoa_r+0x50e>
 801bc5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bc5e:	f7e4 fce3 	bl	8000628 <__aeabi_dmul>
 801bc62:	3601      	adds	r6, #1
 801bc64:	2301      	movs	r3, #1
 801bc66:	1064      	asrs	r4, r4, #1
 801bc68:	3508      	adds	r5, #8
 801bc6a:	e73f      	b.n	801baec <_dtoa_r+0x394>
 801bc6c:	2602      	movs	r6, #2
 801bc6e:	e742      	b.n	801baf6 <_dtoa_r+0x39e>
 801bc70:	9c07      	ldr	r4, [sp, #28]
 801bc72:	9704      	str	r7, [sp, #16]
 801bc74:	e761      	b.n	801bb3a <_dtoa_r+0x3e2>
 801bc76:	4b27      	ldr	r3, [pc, #156]	@ (801bd14 <_dtoa_r+0x5bc>)
 801bc78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bc7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bc7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bc82:	4454      	add	r4, sl
 801bc84:	2900      	cmp	r1, #0
 801bc86:	d053      	beq.n	801bd30 <_dtoa_r+0x5d8>
 801bc88:	4928      	ldr	r1, [pc, #160]	@ (801bd2c <_dtoa_r+0x5d4>)
 801bc8a:	2000      	movs	r0, #0
 801bc8c:	f7e4 fdf6 	bl	800087c <__aeabi_ddiv>
 801bc90:	4633      	mov	r3, r6
 801bc92:	462a      	mov	r2, r5
 801bc94:	f7e4 fb10 	bl	80002b8 <__aeabi_dsub>
 801bc98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bc9c:	4656      	mov	r6, sl
 801bc9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bca2:	f7e4 ff71 	bl	8000b88 <__aeabi_d2iz>
 801bca6:	4605      	mov	r5, r0
 801bca8:	f7e4 fc54 	bl	8000554 <__aeabi_i2d>
 801bcac:	4602      	mov	r2, r0
 801bcae:	460b      	mov	r3, r1
 801bcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bcb4:	f7e4 fb00 	bl	80002b8 <__aeabi_dsub>
 801bcb8:	3530      	adds	r5, #48	@ 0x30
 801bcba:	4602      	mov	r2, r0
 801bcbc:	460b      	mov	r3, r1
 801bcbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bcc2:	f806 5b01 	strb.w	r5, [r6], #1
 801bcc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bcca:	f7e4 ff1f 	bl	8000b0c <__aeabi_dcmplt>
 801bcce:	2800      	cmp	r0, #0
 801bcd0:	d171      	bne.n	801bdb6 <_dtoa_r+0x65e>
 801bcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bcd6:	4911      	ldr	r1, [pc, #68]	@ (801bd1c <_dtoa_r+0x5c4>)
 801bcd8:	2000      	movs	r0, #0
 801bcda:	f7e4 faed 	bl	80002b8 <__aeabi_dsub>
 801bcde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bce2:	f7e4 ff13 	bl	8000b0c <__aeabi_dcmplt>
 801bce6:	2800      	cmp	r0, #0
 801bce8:	f040 8095 	bne.w	801be16 <_dtoa_r+0x6be>
 801bcec:	42a6      	cmp	r6, r4
 801bcee:	f43f af50 	beq.w	801bb92 <_dtoa_r+0x43a>
 801bcf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bcf6:	4b0a      	ldr	r3, [pc, #40]	@ (801bd20 <_dtoa_r+0x5c8>)
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	f7e4 fc95 	bl	8000628 <__aeabi_dmul>
 801bcfe:	4b08      	ldr	r3, [pc, #32]	@ (801bd20 <_dtoa_r+0x5c8>)
 801bd00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bd04:	2200      	movs	r2, #0
 801bd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd0a:	f7e4 fc8d 	bl	8000628 <__aeabi_dmul>
 801bd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd12:	e7c4      	b.n	801bc9e <_dtoa_r+0x546>
 801bd14:	0806ccf0 	.word	0x0806ccf0
 801bd18:	0806ccc8 	.word	0x0806ccc8
 801bd1c:	3ff00000 	.word	0x3ff00000
 801bd20:	40240000 	.word	0x40240000
 801bd24:	401c0000 	.word	0x401c0000
 801bd28:	40140000 	.word	0x40140000
 801bd2c:	3fe00000 	.word	0x3fe00000
 801bd30:	4631      	mov	r1, r6
 801bd32:	4628      	mov	r0, r5
 801bd34:	f7e4 fc78 	bl	8000628 <__aeabi_dmul>
 801bd38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bd3c:	9415      	str	r4, [sp, #84]	@ 0x54
 801bd3e:	4656      	mov	r6, sl
 801bd40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd44:	f7e4 ff20 	bl	8000b88 <__aeabi_d2iz>
 801bd48:	4605      	mov	r5, r0
 801bd4a:	f7e4 fc03 	bl	8000554 <__aeabi_i2d>
 801bd4e:	4602      	mov	r2, r0
 801bd50:	460b      	mov	r3, r1
 801bd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd56:	f7e4 faaf 	bl	80002b8 <__aeabi_dsub>
 801bd5a:	3530      	adds	r5, #48	@ 0x30
 801bd5c:	f806 5b01 	strb.w	r5, [r6], #1
 801bd60:	4602      	mov	r2, r0
 801bd62:	460b      	mov	r3, r1
 801bd64:	42a6      	cmp	r6, r4
 801bd66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bd6a:	f04f 0200 	mov.w	r2, #0
 801bd6e:	d124      	bne.n	801bdba <_dtoa_r+0x662>
 801bd70:	4bac      	ldr	r3, [pc, #688]	@ (801c024 <_dtoa_r+0x8cc>)
 801bd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bd76:	f7e4 faa1 	bl	80002bc <__adddf3>
 801bd7a:	4602      	mov	r2, r0
 801bd7c:	460b      	mov	r3, r1
 801bd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd82:	f7e4 fee1 	bl	8000b48 <__aeabi_dcmpgt>
 801bd86:	2800      	cmp	r0, #0
 801bd88:	d145      	bne.n	801be16 <_dtoa_r+0x6be>
 801bd8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bd8e:	49a5      	ldr	r1, [pc, #660]	@ (801c024 <_dtoa_r+0x8cc>)
 801bd90:	2000      	movs	r0, #0
 801bd92:	f7e4 fa91 	bl	80002b8 <__aeabi_dsub>
 801bd96:	4602      	mov	r2, r0
 801bd98:	460b      	mov	r3, r1
 801bd9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd9e:	f7e4 feb5 	bl	8000b0c <__aeabi_dcmplt>
 801bda2:	2800      	cmp	r0, #0
 801bda4:	f43f aef5 	beq.w	801bb92 <_dtoa_r+0x43a>
 801bda8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801bdaa:	1e73      	subs	r3, r6, #1
 801bdac:	9315      	str	r3, [sp, #84]	@ 0x54
 801bdae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bdb2:	2b30      	cmp	r3, #48	@ 0x30
 801bdb4:	d0f8      	beq.n	801bda8 <_dtoa_r+0x650>
 801bdb6:	9f04      	ldr	r7, [sp, #16]
 801bdb8:	e73e      	b.n	801bc38 <_dtoa_r+0x4e0>
 801bdba:	4b9b      	ldr	r3, [pc, #620]	@ (801c028 <_dtoa_r+0x8d0>)
 801bdbc:	f7e4 fc34 	bl	8000628 <__aeabi_dmul>
 801bdc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdc4:	e7bc      	b.n	801bd40 <_dtoa_r+0x5e8>
 801bdc6:	d10c      	bne.n	801bde2 <_dtoa_r+0x68a>
 801bdc8:	4b98      	ldr	r3, [pc, #608]	@ (801c02c <_dtoa_r+0x8d4>)
 801bdca:	2200      	movs	r2, #0
 801bdcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bdd0:	f7e4 fc2a 	bl	8000628 <__aeabi_dmul>
 801bdd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bdd8:	f7e4 feac 	bl	8000b34 <__aeabi_dcmpge>
 801bddc:	2800      	cmp	r0, #0
 801bdde:	f000 8157 	beq.w	801c090 <_dtoa_r+0x938>
 801bde2:	2400      	movs	r4, #0
 801bde4:	4625      	mov	r5, r4
 801bde6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bde8:	43db      	mvns	r3, r3
 801bdea:	9304      	str	r3, [sp, #16]
 801bdec:	4656      	mov	r6, sl
 801bdee:	2700      	movs	r7, #0
 801bdf0:	4621      	mov	r1, r4
 801bdf2:	4658      	mov	r0, fp
 801bdf4:	f000 fafe 	bl	801c3f4 <_Bfree>
 801bdf8:	2d00      	cmp	r5, #0
 801bdfa:	d0dc      	beq.n	801bdb6 <_dtoa_r+0x65e>
 801bdfc:	b12f      	cbz	r7, 801be0a <_dtoa_r+0x6b2>
 801bdfe:	42af      	cmp	r7, r5
 801be00:	d003      	beq.n	801be0a <_dtoa_r+0x6b2>
 801be02:	4639      	mov	r1, r7
 801be04:	4658      	mov	r0, fp
 801be06:	f000 faf5 	bl	801c3f4 <_Bfree>
 801be0a:	4629      	mov	r1, r5
 801be0c:	4658      	mov	r0, fp
 801be0e:	f000 faf1 	bl	801c3f4 <_Bfree>
 801be12:	e7d0      	b.n	801bdb6 <_dtoa_r+0x65e>
 801be14:	9704      	str	r7, [sp, #16]
 801be16:	4633      	mov	r3, r6
 801be18:	461e      	mov	r6, r3
 801be1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801be1e:	2a39      	cmp	r2, #57	@ 0x39
 801be20:	d107      	bne.n	801be32 <_dtoa_r+0x6da>
 801be22:	459a      	cmp	sl, r3
 801be24:	d1f8      	bne.n	801be18 <_dtoa_r+0x6c0>
 801be26:	9a04      	ldr	r2, [sp, #16]
 801be28:	3201      	adds	r2, #1
 801be2a:	9204      	str	r2, [sp, #16]
 801be2c:	2230      	movs	r2, #48	@ 0x30
 801be2e:	f88a 2000 	strb.w	r2, [sl]
 801be32:	781a      	ldrb	r2, [r3, #0]
 801be34:	3201      	adds	r2, #1
 801be36:	701a      	strb	r2, [r3, #0]
 801be38:	e7bd      	b.n	801bdb6 <_dtoa_r+0x65e>
 801be3a:	4b7b      	ldr	r3, [pc, #492]	@ (801c028 <_dtoa_r+0x8d0>)
 801be3c:	2200      	movs	r2, #0
 801be3e:	f7e4 fbf3 	bl	8000628 <__aeabi_dmul>
 801be42:	2200      	movs	r2, #0
 801be44:	2300      	movs	r3, #0
 801be46:	4604      	mov	r4, r0
 801be48:	460d      	mov	r5, r1
 801be4a:	f7e4 fe55 	bl	8000af8 <__aeabi_dcmpeq>
 801be4e:	2800      	cmp	r0, #0
 801be50:	f43f aebb 	beq.w	801bbca <_dtoa_r+0x472>
 801be54:	e6f0      	b.n	801bc38 <_dtoa_r+0x4e0>
 801be56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801be58:	2a00      	cmp	r2, #0
 801be5a:	f000 80db 	beq.w	801c014 <_dtoa_r+0x8bc>
 801be5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be60:	2a01      	cmp	r2, #1
 801be62:	f300 80bf 	bgt.w	801bfe4 <_dtoa_r+0x88c>
 801be66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801be68:	2a00      	cmp	r2, #0
 801be6a:	f000 80b7 	beq.w	801bfdc <_dtoa_r+0x884>
 801be6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801be72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801be74:	4646      	mov	r6, r8
 801be76:	9a08      	ldr	r2, [sp, #32]
 801be78:	2101      	movs	r1, #1
 801be7a:	441a      	add	r2, r3
 801be7c:	4658      	mov	r0, fp
 801be7e:	4498      	add	r8, r3
 801be80:	9208      	str	r2, [sp, #32]
 801be82:	f000 fb6b 	bl	801c55c <__i2b>
 801be86:	4605      	mov	r5, r0
 801be88:	b15e      	cbz	r6, 801bea2 <_dtoa_r+0x74a>
 801be8a:	9b08      	ldr	r3, [sp, #32]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	dd08      	ble.n	801bea2 <_dtoa_r+0x74a>
 801be90:	42b3      	cmp	r3, r6
 801be92:	9a08      	ldr	r2, [sp, #32]
 801be94:	bfa8      	it	ge
 801be96:	4633      	movge	r3, r6
 801be98:	eba8 0803 	sub.w	r8, r8, r3
 801be9c:	1af6      	subs	r6, r6, r3
 801be9e:	1ad3      	subs	r3, r2, r3
 801bea0:	9308      	str	r3, [sp, #32]
 801bea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bea4:	b1f3      	cbz	r3, 801bee4 <_dtoa_r+0x78c>
 801bea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	f000 80b7 	beq.w	801c01c <_dtoa_r+0x8c4>
 801beae:	b18c      	cbz	r4, 801bed4 <_dtoa_r+0x77c>
 801beb0:	4629      	mov	r1, r5
 801beb2:	4622      	mov	r2, r4
 801beb4:	4658      	mov	r0, fp
 801beb6:	f000 fc11 	bl	801c6dc <__pow5mult>
 801beba:	464a      	mov	r2, r9
 801bebc:	4601      	mov	r1, r0
 801bebe:	4605      	mov	r5, r0
 801bec0:	4658      	mov	r0, fp
 801bec2:	f000 fb61 	bl	801c588 <__multiply>
 801bec6:	4649      	mov	r1, r9
 801bec8:	9004      	str	r0, [sp, #16]
 801beca:	4658      	mov	r0, fp
 801becc:	f000 fa92 	bl	801c3f4 <_Bfree>
 801bed0:	9b04      	ldr	r3, [sp, #16]
 801bed2:	4699      	mov	r9, r3
 801bed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bed6:	1b1a      	subs	r2, r3, r4
 801bed8:	d004      	beq.n	801bee4 <_dtoa_r+0x78c>
 801beda:	4649      	mov	r1, r9
 801bedc:	4658      	mov	r0, fp
 801bede:	f000 fbfd 	bl	801c6dc <__pow5mult>
 801bee2:	4681      	mov	r9, r0
 801bee4:	2101      	movs	r1, #1
 801bee6:	4658      	mov	r0, fp
 801bee8:	f000 fb38 	bl	801c55c <__i2b>
 801beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801beee:	4604      	mov	r4, r0
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	f000 81cf 	beq.w	801c294 <_dtoa_r+0xb3c>
 801bef6:	461a      	mov	r2, r3
 801bef8:	4601      	mov	r1, r0
 801befa:	4658      	mov	r0, fp
 801befc:	f000 fbee 	bl	801c6dc <__pow5mult>
 801bf00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf02:	2b01      	cmp	r3, #1
 801bf04:	4604      	mov	r4, r0
 801bf06:	f300 8095 	bgt.w	801c034 <_dtoa_r+0x8dc>
 801bf0a:	9b02      	ldr	r3, [sp, #8]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	f040 8087 	bne.w	801c020 <_dtoa_r+0x8c8>
 801bf12:	9b03      	ldr	r3, [sp, #12]
 801bf14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	f040 8089 	bne.w	801c030 <_dtoa_r+0x8d8>
 801bf1e:	9b03      	ldr	r3, [sp, #12]
 801bf20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bf24:	0d1b      	lsrs	r3, r3, #20
 801bf26:	051b      	lsls	r3, r3, #20
 801bf28:	b12b      	cbz	r3, 801bf36 <_dtoa_r+0x7de>
 801bf2a:	9b08      	ldr	r3, [sp, #32]
 801bf2c:	3301      	adds	r3, #1
 801bf2e:	9308      	str	r3, [sp, #32]
 801bf30:	f108 0801 	add.w	r8, r8, #1
 801bf34:	2301      	movs	r3, #1
 801bf36:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	f000 81b0 	beq.w	801c2a0 <_dtoa_r+0xb48>
 801bf40:	6923      	ldr	r3, [r4, #16]
 801bf42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bf46:	6918      	ldr	r0, [r3, #16]
 801bf48:	f000 fabc 	bl	801c4c4 <__hi0bits>
 801bf4c:	f1c0 0020 	rsb	r0, r0, #32
 801bf50:	9b08      	ldr	r3, [sp, #32]
 801bf52:	4418      	add	r0, r3
 801bf54:	f010 001f 	ands.w	r0, r0, #31
 801bf58:	d077      	beq.n	801c04a <_dtoa_r+0x8f2>
 801bf5a:	f1c0 0320 	rsb	r3, r0, #32
 801bf5e:	2b04      	cmp	r3, #4
 801bf60:	dd6b      	ble.n	801c03a <_dtoa_r+0x8e2>
 801bf62:	9b08      	ldr	r3, [sp, #32]
 801bf64:	f1c0 001c 	rsb	r0, r0, #28
 801bf68:	4403      	add	r3, r0
 801bf6a:	4480      	add	r8, r0
 801bf6c:	4406      	add	r6, r0
 801bf6e:	9308      	str	r3, [sp, #32]
 801bf70:	f1b8 0f00 	cmp.w	r8, #0
 801bf74:	dd05      	ble.n	801bf82 <_dtoa_r+0x82a>
 801bf76:	4649      	mov	r1, r9
 801bf78:	4642      	mov	r2, r8
 801bf7a:	4658      	mov	r0, fp
 801bf7c:	f000 fc08 	bl	801c790 <__lshift>
 801bf80:	4681      	mov	r9, r0
 801bf82:	9b08      	ldr	r3, [sp, #32]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	dd05      	ble.n	801bf94 <_dtoa_r+0x83c>
 801bf88:	4621      	mov	r1, r4
 801bf8a:	461a      	mov	r2, r3
 801bf8c:	4658      	mov	r0, fp
 801bf8e:	f000 fbff 	bl	801c790 <__lshift>
 801bf92:	4604      	mov	r4, r0
 801bf94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d059      	beq.n	801c04e <_dtoa_r+0x8f6>
 801bf9a:	4621      	mov	r1, r4
 801bf9c:	4648      	mov	r0, r9
 801bf9e:	f000 fc63 	bl	801c868 <__mcmp>
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	da53      	bge.n	801c04e <_dtoa_r+0x8f6>
 801bfa6:	1e7b      	subs	r3, r7, #1
 801bfa8:	9304      	str	r3, [sp, #16]
 801bfaa:	4649      	mov	r1, r9
 801bfac:	2300      	movs	r3, #0
 801bfae:	220a      	movs	r2, #10
 801bfb0:	4658      	mov	r0, fp
 801bfb2:	f000 fa41 	bl	801c438 <__multadd>
 801bfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bfb8:	4681      	mov	r9, r0
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	f000 8172 	beq.w	801c2a4 <_dtoa_r+0xb4c>
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	4629      	mov	r1, r5
 801bfc4:	220a      	movs	r2, #10
 801bfc6:	4658      	mov	r0, fp
 801bfc8:	f000 fa36 	bl	801c438 <__multadd>
 801bfcc:	9b00      	ldr	r3, [sp, #0]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	4605      	mov	r5, r0
 801bfd2:	dc67      	bgt.n	801c0a4 <_dtoa_r+0x94c>
 801bfd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfd6:	2b02      	cmp	r3, #2
 801bfd8:	dc41      	bgt.n	801c05e <_dtoa_r+0x906>
 801bfda:	e063      	b.n	801c0a4 <_dtoa_r+0x94c>
 801bfdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bfde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801bfe2:	e746      	b.n	801be72 <_dtoa_r+0x71a>
 801bfe4:	9b07      	ldr	r3, [sp, #28]
 801bfe6:	1e5c      	subs	r4, r3, #1
 801bfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bfea:	42a3      	cmp	r3, r4
 801bfec:	bfbf      	itttt	lt
 801bfee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801bff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801bff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801bff4:	1ae3      	sublt	r3, r4, r3
 801bff6:	bfb4      	ite	lt
 801bff8:	18d2      	addlt	r2, r2, r3
 801bffa:	1b1c      	subge	r4, r3, r4
 801bffc:	9b07      	ldr	r3, [sp, #28]
 801bffe:	bfbc      	itt	lt
 801c000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c002:	2400      	movlt	r4, #0
 801c004:	2b00      	cmp	r3, #0
 801c006:	bfb5      	itete	lt
 801c008:	eba8 0603 	sublt.w	r6, r8, r3
 801c00c:	9b07      	ldrge	r3, [sp, #28]
 801c00e:	2300      	movlt	r3, #0
 801c010:	4646      	movge	r6, r8
 801c012:	e730      	b.n	801be76 <_dtoa_r+0x71e>
 801c014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c018:	4646      	mov	r6, r8
 801c01a:	e735      	b.n	801be88 <_dtoa_r+0x730>
 801c01c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c01e:	e75c      	b.n	801beda <_dtoa_r+0x782>
 801c020:	2300      	movs	r3, #0
 801c022:	e788      	b.n	801bf36 <_dtoa_r+0x7de>
 801c024:	3fe00000 	.word	0x3fe00000
 801c028:	40240000 	.word	0x40240000
 801c02c:	40140000 	.word	0x40140000
 801c030:	9b02      	ldr	r3, [sp, #8]
 801c032:	e780      	b.n	801bf36 <_dtoa_r+0x7de>
 801c034:	2300      	movs	r3, #0
 801c036:	930a      	str	r3, [sp, #40]	@ 0x28
 801c038:	e782      	b.n	801bf40 <_dtoa_r+0x7e8>
 801c03a:	d099      	beq.n	801bf70 <_dtoa_r+0x818>
 801c03c:	9a08      	ldr	r2, [sp, #32]
 801c03e:	331c      	adds	r3, #28
 801c040:	441a      	add	r2, r3
 801c042:	4498      	add	r8, r3
 801c044:	441e      	add	r6, r3
 801c046:	9208      	str	r2, [sp, #32]
 801c048:	e792      	b.n	801bf70 <_dtoa_r+0x818>
 801c04a:	4603      	mov	r3, r0
 801c04c:	e7f6      	b.n	801c03c <_dtoa_r+0x8e4>
 801c04e:	9b07      	ldr	r3, [sp, #28]
 801c050:	9704      	str	r7, [sp, #16]
 801c052:	2b00      	cmp	r3, #0
 801c054:	dc20      	bgt.n	801c098 <_dtoa_r+0x940>
 801c056:	9300      	str	r3, [sp, #0]
 801c058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c05a:	2b02      	cmp	r3, #2
 801c05c:	dd1e      	ble.n	801c09c <_dtoa_r+0x944>
 801c05e:	9b00      	ldr	r3, [sp, #0]
 801c060:	2b00      	cmp	r3, #0
 801c062:	f47f aec0 	bne.w	801bde6 <_dtoa_r+0x68e>
 801c066:	4621      	mov	r1, r4
 801c068:	2205      	movs	r2, #5
 801c06a:	4658      	mov	r0, fp
 801c06c:	f000 f9e4 	bl	801c438 <__multadd>
 801c070:	4601      	mov	r1, r0
 801c072:	4604      	mov	r4, r0
 801c074:	4648      	mov	r0, r9
 801c076:	f000 fbf7 	bl	801c868 <__mcmp>
 801c07a:	2800      	cmp	r0, #0
 801c07c:	f77f aeb3 	ble.w	801bde6 <_dtoa_r+0x68e>
 801c080:	4656      	mov	r6, sl
 801c082:	2331      	movs	r3, #49	@ 0x31
 801c084:	f806 3b01 	strb.w	r3, [r6], #1
 801c088:	9b04      	ldr	r3, [sp, #16]
 801c08a:	3301      	adds	r3, #1
 801c08c:	9304      	str	r3, [sp, #16]
 801c08e:	e6ae      	b.n	801bdee <_dtoa_r+0x696>
 801c090:	9c07      	ldr	r4, [sp, #28]
 801c092:	9704      	str	r7, [sp, #16]
 801c094:	4625      	mov	r5, r4
 801c096:	e7f3      	b.n	801c080 <_dtoa_r+0x928>
 801c098:	9b07      	ldr	r3, [sp, #28]
 801c09a:	9300      	str	r3, [sp, #0]
 801c09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	f000 8104 	beq.w	801c2ac <_dtoa_r+0xb54>
 801c0a4:	2e00      	cmp	r6, #0
 801c0a6:	dd05      	ble.n	801c0b4 <_dtoa_r+0x95c>
 801c0a8:	4629      	mov	r1, r5
 801c0aa:	4632      	mov	r2, r6
 801c0ac:	4658      	mov	r0, fp
 801c0ae:	f000 fb6f 	bl	801c790 <__lshift>
 801c0b2:	4605      	mov	r5, r0
 801c0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d05a      	beq.n	801c170 <_dtoa_r+0xa18>
 801c0ba:	6869      	ldr	r1, [r5, #4]
 801c0bc:	4658      	mov	r0, fp
 801c0be:	f000 f959 	bl	801c374 <_Balloc>
 801c0c2:	4606      	mov	r6, r0
 801c0c4:	b928      	cbnz	r0, 801c0d2 <_dtoa_r+0x97a>
 801c0c6:	4b84      	ldr	r3, [pc, #528]	@ (801c2d8 <_dtoa_r+0xb80>)
 801c0c8:	4602      	mov	r2, r0
 801c0ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c0ce:	f7ff bb5a 	b.w	801b786 <_dtoa_r+0x2e>
 801c0d2:	692a      	ldr	r2, [r5, #16]
 801c0d4:	3202      	adds	r2, #2
 801c0d6:	0092      	lsls	r2, r2, #2
 801c0d8:	f105 010c 	add.w	r1, r5, #12
 801c0dc:	300c      	adds	r0, #12
 801c0de:	f7ff fa86 	bl	801b5ee <memcpy>
 801c0e2:	2201      	movs	r2, #1
 801c0e4:	4631      	mov	r1, r6
 801c0e6:	4658      	mov	r0, fp
 801c0e8:	f000 fb52 	bl	801c790 <__lshift>
 801c0ec:	f10a 0301 	add.w	r3, sl, #1
 801c0f0:	9307      	str	r3, [sp, #28]
 801c0f2:	9b00      	ldr	r3, [sp, #0]
 801c0f4:	4453      	add	r3, sl
 801c0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c0f8:	9b02      	ldr	r3, [sp, #8]
 801c0fa:	f003 0301 	and.w	r3, r3, #1
 801c0fe:	462f      	mov	r7, r5
 801c100:	930a      	str	r3, [sp, #40]	@ 0x28
 801c102:	4605      	mov	r5, r0
 801c104:	9b07      	ldr	r3, [sp, #28]
 801c106:	4621      	mov	r1, r4
 801c108:	3b01      	subs	r3, #1
 801c10a:	4648      	mov	r0, r9
 801c10c:	9300      	str	r3, [sp, #0]
 801c10e:	f7ff fa9b 	bl	801b648 <quorem>
 801c112:	4639      	mov	r1, r7
 801c114:	9002      	str	r0, [sp, #8]
 801c116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c11a:	4648      	mov	r0, r9
 801c11c:	f000 fba4 	bl	801c868 <__mcmp>
 801c120:	462a      	mov	r2, r5
 801c122:	9008      	str	r0, [sp, #32]
 801c124:	4621      	mov	r1, r4
 801c126:	4658      	mov	r0, fp
 801c128:	f000 fbba 	bl	801c8a0 <__mdiff>
 801c12c:	68c2      	ldr	r2, [r0, #12]
 801c12e:	4606      	mov	r6, r0
 801c130:	bb02      	cbnz	r2, 801c174 <_dtoa_r+0xa1c>
 801c132:	4601      	mov	r1, r0
 801c134:	4648      	mov	r0, r9
 801c136:	f000 fb97 	bl	801c868 <__mcmp>
 801c13a:	4602      	mov	r2, r0
 801c13c:	4631      	mov	r1, r6
 801c13e:	4658      	mov	r0, fp
 801c140:	920e      	str	r2, [sp, #56]	@ 0x38
 801c142:	f000 f957 	bl	801c3f4 <_Bfree>
 801c146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c14a:	9e07      	ldr	r6, [sp, #28]
 801c14c:	ea43 0102 	orr.w	r1, r3, r2
 801c150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c152:	4319      	orrs	r1, r3
 801c154:	d110      	bne.n	801c178 <_dtoa_r+0xa20>
 801c156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c15a:	d029      	beq.n	801c1b0 <_dtoa_r+0xa58>
 801c15c:	9b08      	ldr	r3, [sp, #32]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	dd02      	ble.n	801c168 <_dtoa_r+0xa10>
 801c162:	9b02      	ldr	r3, [sp, #8]
 801c164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c168:	9b00      	ldr	r3, [sp, #0]
 801c16a:	f883 8000 	strb.w	r8, [r3]
 801c16e:	e63f      	b.n	801bdf0 <_dtoa_r+0x698>
 801c170:	4628      	mov	r0, r5
 801c172:	e7bb      	b.n	801c0ec <_dtoa_r+0x994>
 801c174:	2201      	movs	r2, #1
 801c176:	e7e1      	b.n	801c13c <_dtoa_r+0x9e4>
 801c178:	9b08      	ldr	r3, [sp, #32]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	db04      	blt.n	801c188 <_dtoa_r+0xa30>
 801c17e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c180:	430b      	orrs	r3, r1
 801c182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c184:	430b      	orrs	r3, r1
 801c186:	d120      	bne.n	801c1ca <_dtoa_r+0xa72>
 801c188:	2a00      	cmp	r2, #0
 801c18a:	dded      	ble.n	801c168 <_dtoa_r+0xa10>
 801c18c:	4649      	mov	r1, r9
 801c18e:	2201      	movs	r2, #1
 801c190:	4658      	mov	r0, fp
 801c192:	f000 fafd 	bl	801c790 <__lshift>
 801c196:	4621      	mov	r1, r4
 801c198:	4681      	mov	r9, r0
 801c19a:	f000 fb65 	bl	801c868 <__mcmp>
 801c19e:	2800      	cmp	r0, #0
 801c1a0:	dc03      	bgt.n	801c1aa <_dtoa_r+0xa52>
 801c1a2:	d1e1      	bne.n	801c168 <_dtoa_r+0xa10>
 801c1a4:	f018 0f01 	tst.w	r8, #1
 801c1a8:	d0de      	beq.n	801c168 <_dtoa_r+0xa10>
 801c1aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c1ae:	d1d8      	bne.n	801c162 <_dtoa_r+0xa0a>
 801c1b0:	9a00      	ldr	r2, [sp, #0]
 801c1b2:	2339      	movs	r3, #57	@ 0x39
 801c1b4:	7013      	strb	r3, [r2, #0]
 801c1b6:	4633      	mov	r3, r6
 801c1b8:	461e      	mov	r6, r3
 801c1ba:	3b01      	subs	r3, #1
 801c1bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c1c0:	2a39      	cmp	r2, #57	@ 0x39
 801c1c2:	d052      	beq.n	801c26a <_dtoa_r+0xb12>
 801c1c4:	3201      	adds	r2, #1
 801c1c6:	701a      	strb	r2, [r3, #0]
 801c1c8:	e612      	b.n	801bdf0 <_dtoa_r+0x698>
 801c1ca:	2a00      	cmp	r2, #0
 801c1cc:	dd07      	ble.n	801c1de <_dtoa_r+0xa86>
 801c1ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c1d2:	d0ed      	beq.n	801c1b0 <_dtoa_r+0xa58>
 801c1d4:	9a00      	ldr	r2, [sp, #0]
 801c1d6:	f108 0301 	add.w	r3, r8, #1
 801c1da:	7013      	strb	r3, [r2, #0]
 801c1dc:	e608      	b.n	801bdf0 <_dtoa_r+0x698>
 801c1de:	9b07      	ldr	r3, [sp, #28]
 801c1e0:	9a07      	ldr	r2, [sp, #28]
 801c1e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c1e8:	4293      	cmp	r3, r2
 801c1ea:	d028      	beq.n	801c23e <_dtoa_r+0xae6>
 801c1ec:	4649      	mov	r1, r9
 801c1ee:	2300      	movs	r3, #0
 801c1f0:	220a      	movs	r2, #10
 801c1f2:	4658      	mov	r0, fp
 801c1f4:	f000 f920 	bl	801c438 <__multadd>
 801c1f8:	42af      	cmp	r7, r5
 801c1fa:	4681      	mov	r9, r0
 801c1fc:	f04f 0300 	mov.w	r3, #0
 801c200:	f04f 020a 	mov.w	r2, #10
 801c204:	4639      	mov	r1, r7
 801c206:	4658      	mov	r0, fp
 801c208:	d107      	bne.n	801c21a <_dtoa_r+0xac2>
 801c20a:	f000 f915 	bl	801c438 <__multadd>
 801c20e:	4607      	mov	r7, r0
 801c210:	4605      	mov	r5, r0
 801c212:	9b07      	ldr	r3, [sp, #28]
 801c214:	3301      	adds	r3, #1
 801c216:	9307      	str	r3, [sp, #28]
 801c218:	e774      	b.n	801c104 <_dtoa_r+0x9ac>
 801c21a:	f000 f90d 	bl	801c438 <__multadd>
 801c21e:	4629      	mov	r1, r5
 801c220:	4607      	mov	r7, r0
 801c222:	2300      	movs	r3, #0
 801c224:	220a      	movs	r2, #10
 801c226:	4658      	mov	r0, fp
 801c228:	f000 f906 	bl	801c438 <__multadd>
 801c22c:	4605      	mov	r5, r0
 801c22e:	e7f0      	b.n	801c212 <_dtoa_r+0xaba>
 801c230:	9b00      	ldr	r3, [sp, #0]
 801c232:	2b00      	cmp	r3, #0
 801c234:	bfcc      	ite	gt
 801c236:	461e      	movgt	r6, r3
 801c238:	2601      	movle	r6, #1
 801c23a:	4456      	add	r6, sl
 801c23c:	2700      	movs	r7, #0
 801c23e:	4649      	mov	r1, r9
 801c240:	2201      	movs	r2, #1
 801c242:	4658      	mov	r0, fp
 801c244:	f000 faa4 	bl	801c790 <__lshift>
 801c248:	4621      	mov	r1, r4
 801c24a:	4681      	mov	r9, r0
 801c24c:	f000 fb0c 	bl	801c868 <__mcmp>
 801c250:	2800      	cmp	r0, #0
 801c252:	dcb0      	bgt.n	801c1b6 <_dtoa_r+0xa5e>
 801c254:	d102      	bne.n	801c25c <_dtoa_r+0xb04>
 801c256:	f018 0f01 	tst.w	r8, #1
 801c25a:	d1ac      	bne.n	801c1b6 <_dtoa_r+0xa5e>
 801c25c:	4633      	mov	r3, r6
 801c25e:	461e      	mov	r6, r3
 801c260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c264:	2a30      	cmp	r2, #48	@ 0x30
 801c266:	d0fa      	beq.n	801c25e <_dtoa_r+0xb06>
 801c268:	e5c2      	b.n	801bdf0 <_dtoa_r+0x698>
 801c26a:	459a      	cmp	sl, r3
 801c26c:	d1a4      	bne.n	801c1b8 <_dtoa_r+0xa60>
 801c26e:	9b04      	ldr	r3, [sp, #16]
 801c270:	3301      	adds	r3, #1
 801c272:	9304      	str	r3, [sp, #16]
 801c274:	2331      	movs	r3, #49	@ 0x31
 801c276:	f88a 3000 	strb.w	r3, [sl]
 801c27a:	e5b9      	b.n	801bdf0 <_dtoa_r+0x698>
 801c27c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c27e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c2dc <_dtoa_r+0xb84>
 801c282:	b11b      	cbz	r3, 801c28c <_dtoa_r+0xb34>
 801c284:	f10a 0308 	add.w	r3, sl, #8
 801c288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c28a:	6013      	str	r3, [r2, #0]
 801c28c:	4650      	mov	r0, sl
 801c28e:	b019      	add	sp, #100	@ 0x64
 801c290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c296:	2b01      	cmp	r3, #1
 801c298:	f77f ae37 	ble.w	801bf0a <_dtoa_r+0x7b2>
 801c29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c29e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2a0:	2001      	movs	r0, #1
 801c2a2:	e655      	b.n	801bf50 <_dtoa_r+0x7f8>
 801c2a4:	9b00      	ldr	r3, [sp, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	f77f aed6 	ble.w	801c058 <_dtoa_r+0x900>
 801c2ac:	4656      	mov	r6, sl
 801c2ae:	4621      	mov	r1, r4
 801c2b0:	4648      	mov	r0, r9
 801c2b2:	f7ff f9c9 	bl	801b648 <quorem>
 801c2b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c2ba:	f806 8b01 	strb.w	r8, [r6], #1
 801c2be:	9b00      	ldr	r3, [sp, #0]
 801c2c0:	eba6 020a 	sub.w	r2, r6, sl
 801c2c4:	4293      	cmp	r3, r2
 801c2c6:	ddb3      	ble.n	801c230 <_dtoa_r+0xad8>
 801c2c8:	4649      	mov	r1, r9
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	220a      	movs	r2, #10
 801c2ce:	4658      	mov	r0, fp
 801c2d0:	f000 f8b2 	bl	801c438 <__multadd>
 801c2d4:	4681      	mov	r9, r0
 801c2d6:	e7ea      	b.n	801c2ae <_dtoa_r+0xb56>
 801c2d8:	0806cc4d 	.word	0x0806cc4d
 801c2dc:	0806cbe8 	.word	0x0806cbe8

0801c2e0 <_free_r>:
 801c2e0:	b538      	push	{r3, r4, r5, lr}
 801c2e2:	4605      	mov	r5, r0
 801c2e4:	2900      	cmp	r1, #0
 801c2e6:	d041      	beq.n	801c36c <_free_r+0x8c>
 801c2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c2ec:	1f0c      	subs	r4, r1, #4
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	bfb8      	it	lt
 801c2f2:	18e4      	addlt	r4, r4, r3
 801c2f4:	f7fe f980 	bl	801a5f8 <__malloc_lock>
 801c2f8:	4a1d      	ldr	r2, [pc, #116]	@ (801c370 <_free_r+0x90>)
 801c2fa:	6813      	ldr	r3, [r2, #0]
 801c2fc:	b933      	cbnz	r3, 801c30c <_free_r+0x2c>
 801c2fe:	6063      	str	r3, [r4, #4]
 801c300:	6014      	str	r4, [r2, #0]
 801c302:	4628      	mov	r0, r5
 801c304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c308:	f7fe b97c 	b.w	801a604 <__malloc_unlock>
 801c30c:	42a3      	cmp	r3, r4
 801c30e:	d908      	bls.n	801c322 <_free_r+0x42>
 801c310:	6820      	ldr	r0, [r4, #0]
 801c312:	1821      	adds	r1, r4, r0
 801c314:	428b      	cmp	r3, r1
 801c316:	bf01      	itttt	eq
 801c318:	6819      	ldreq	r1, [r3, #0]
 801c31a:	685b      	ldreq	r3, [r3, #4]
 801c31c:	1809      	addeq	r1, r1, r0
 801c31e:	6021      	streq	r1, [r4, #0]
 801c320:	e7ed      	b.n	801c2fe <_free_r+0x1e>
 801c322:	461a      	mov	r2, r3
 801c324:	685b      	ldr	r3, [r3, #4]
 801c326:	b10b      	cbz	r3, 801c32c <_free_r+0x4c>
 801c328:	42a3      	cmp	r3, r4
 801c32a:	d9fa      	bls.n	801c322 <_free_r+0x42>
 801c32c:	6811      	ldr	r1, [r2, #0]
 801c32e:	1850      	adds	r0, r2, r1
 801c330:	42a0      	cmp	r0, r4
 801c332:	d10b      	bne.n	801c34c <_free_r+0x6c>
 801c334:	6820      	ldr	r0, [r4, #0]
 801c336:	4401      	add	r1, r0
 801c338:	1850      	adds	r0, r2, r1
 801c33a:	4283      	cmp	r3, r0
 801c33c:	6011      	str	r1, [r2, #0]
 801c33e:	d1e0      	bne.n	801c302 <_free_r+0x22>
 801c340:	6818      	ldr	r0, [r3, #0]
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	6053      	str	r3, [r2, #4]
 801c346:	4408      	add	r0, r1
 801c348:	6010      	str	r0, [r2, #0]
 801c34a:	e7da      	b.n	801c302 <_free_r+0x22>
 801c34c:	d902      	bls.n	801c354 <_free_r+0x74>
 801c34e:	230c      	movs	r3, #12
 801c350:	602b      	str	r3, [r5, #0]
 801c352:	e7d6      	b.n	801c302 <_free_r+0x22>
 801c354:	6820      	ldr	r0, [r4, #0]
 801c356:	1821      	adds	r1, r4, r0
 801c358:	428b      	cmp	r3, r1
 801c35a:	bf04      	itt	eq
 801c35c:	6819      	ldreq	r1, [r3, #0]
 801c35e:	685b      	ldreq	r3, [r3, #4]
 801c360:	6063      	str	r3, [r4, #4]
 801c362:	bf04      	itt	eq
 801c364:	1809      	addeq	r1, r1, r0
 801c366:	6021      	streq	r1, [r4, #0]
 801c368:	6054      	str	r4, [r2, #4]
 801c36a:	e7ca      	b.n	801c302 <_free_r+0x22>
 801c36c:	bd38      	pop	{r3, r4, r5, pc}
 801c36e:	bf00      	nop
 801c370:	20013ef8 	.word	0x20013ef8

0801c374 <_Balloc>:
 801c374:	b570      	push	{r4, r5, r6, lr}
 801c376:	69c6      	ldr	r6, [r0, #28]
 801c378:	4604      	mov	r4, r0
 801c37a:	460d      	mov	r5, r1
 801c37c:	b976      	cbnz	r6, 801c39c <_Balloc+0x28>
 801c37e:	2010      	movs	r0, #16
 801c380:	f7fe f890 	bl	801a4a4 <malloc>
 801c384:	4602      	mov	r2, r0
 801c386:	61e0      	str	r0, [r4, #28]
 801c388:	b920      	cbnz	r0, 801c394 <_Balloc+0x20>
 801c38a:	4b18      	ldr	r3, [pc, #96]	@ (801c3ec <_Balloc+0x78>)
 801c38c:	4818      	ldr	r0, [pc, #96]	@ (801c3f0 <_Balloc+0x7c>)
 801c38e:	216b      	movs	r1, #107	@ 0x6b
 801c390:	f7ff f93c 	bl	801b60c <__assert_func>
 801c394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c398:	6006      	str	r6, [r0, #0]
 801c39a:	60c6      	str	r6, [r0, #12]
 801c39c:	69e6      	ldr	r6, [r4, #28]
 801c39e:	68f3      	ldr	r3, [r6, #12]
 801c3a0:	b183      	cbz	r3, 801c3c4 <_Balloc+0x50>
 801c3a2:	69e3      	ldr	r3, [r4, #28]
 801c3a4:	68db      	ldr	r3, [r3, #12]
 801c3a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c3aa:	b9b8      	cbnz	r0, 801c3dc <_Balloc+0x68>
 801c3ac:	2101      	movs	r1, #1
 801c3ae:	fa01 f605 	lsl.w	r6, r1, r5
 801c3b2:	1d72      	adds	r2, r6, #5
 801c3b4:	0092      	lsls	r2, r2, #2
 801c3b6:	4620      	mov	r0, r4
 801c3b8:	f7fe f860 	bl	801a47c <_calloc_r>
 801c3bc:	b160      	cbz	r0, 801c3d8 <_Balloc+0x64>
 801c3be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c3c2:	e00e      	b.n	801c3e2 <_Balloc+0x6e>
 801c3c4:	2221      	movs	r2, #33	@ 0x21
 801c3c6:	2104      	movs	r1, #4
 801c3c8:	4620      	mov	r0, r4
 801c3ca:	f7fe f857 	bl	801a47c <_calloc_r>
 801c3ce:	69e3      	ldr	r3, [r4, #28]
 801c3d0:	60f0      	str	r0, [r6, #12]
 801c3d2:	68db      	ldr	r3, [r3, #12]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d1e4      	bne.n	801c3a2 <_Balloc+0x2e>
 801c3d8:	2000      	movs	r0, #0
 801c3da:	bd70      	pop	{r4, r5, r6, pc}
 801c3dc:	6802      	ldr	r2, [r0, #0]
 801c3de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c3e8:	e7f7      	b.n	801c3da <_Balloc+0x66>
 801c3ea:	bf00      	nop
 801c3ec:	0806ca08 	.word	0x0806ca08
 801c3f0:	0806cc5e 	.word	0x0806cc5e

0801c3f4 <_Bfree>:
 801c3f4:	b570      	push	{r4, r5, r6, lr}
 801c3f6:	69c6      	ldr	r6, [r0, #28]
 801c3f8:	4605      	mov	r5, r0
 801c3fa:	460c      	mov	r4, r1
 801c3fc:	b976      	cbnz	r6, 801c41c <_Bfree+0x28>
 801c3fe:	2010      	movs	r0, #16
 801c400:	f7fe f850 	bl	801a4a4 <malloc>
 801c404:	4602      	mov	r2, r0
 801c406:	61e8      	str	r0, [r5, #28]
 801c408:	b920      	cbnz	r0, 801c414 <_Bfree+0x20>
 801c40a:	4b09      	ldr	r3, [pc, #36]	@ (801c430 <_Bfree+0x3c>)
 801c40c:	4809      	ldr	r0, [pc, #36]	@ (801c434 <_Bfree+0x40>)
 801c40e:	218f      	movs	r1, #143	@ 0x8f
 801c410:	f7ff f8fc 	bl	801b60c <__assert_func>
 801c414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c418:	6006      	str	r6, [r0, #0]
 801c41a:	60c6      	str	r6, [r0, #12]
 801c41c:	b13c      	cbz	r4, 801c42e <_Bfree+0x3a>
 801c41e:	69eb      	ldr	r3, [r5, #28]
 801c420:	6862      	ldr	r2, [r4, #4]
 801c422:	68db      	ldr	r3, [r3, #12]
 801c424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c428:	6021      	str	r1, [r4, #0]
 801c42a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c42e:	bd70      	pop	{r4, r5, r6, pc}
 801c430:	0806ca08 	.word	0x0806ca08
 801c434:	0806cc5e 	.word	0x0806cc5e

0801c438 <__multadd>:
 801c438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c43c:	690d      	ldr	r5, [r1, #16]
 801c43e:	4607      	mov	r7, r0
 801c440:	460c      	mov	r4, r1
 801c442:	461e      	mov	r6, r3
 801c444:	f101 0c14 	add.w	ip, r1, #20
 801c448:	2000      	movs	r0, #0
 801c44a:	f8dc 3000 	ldr.w	r3, [ip]
 801c44e:	b299      	uxth	r1, r3
 801c450:	fb02 6101 	mla	r1, r2, r1, r6
 801c454:	0c1e      	lsrs	r6, r3, #16
 801c456:	0c0b      	lsrs	r3, r1, #16
 801c458:	fb02 3306 	mla	r3, r2, r6, r3
 801c45c:	b289      	uxth	r1, r1
 801c45e:	3001      	adds	r0, #1
 801c460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c464:	4285      	cmp	r5, r0
 801c466:	f84c 1b04 	str.w	r1, [ip], #4
 801c46a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c46e:	dcec      	bgt.n	801c44a <__multadd+0x12>
 801c470:	b30e      	cbz	r6, 801c4b6 <__multadd+0x7e>
 801c472:	68a3      	ldr	r3, [r4, #8]
 801c474:	42ab      	cmp	r3, r5
 801c476:	dc19      	bgt.n	801c4ac <__multadd+0x74>
 801c478:	6861      	ldr	r1, [r4, #4]
 801c47a:	4638      	mov	r0, r7
 801c47c:	3101      	adds	r1, #1
 801c47e:	f7ff ff79 	bl	801c374 <_Balloc>
 801c482:	4680      	mov	r8, r0
 801c484:	b928      	cbnz	r0, 801c492 <__multadd+0x5a>
 801c486:	4602      	mov	r2, r0
 801c488:	4b0c      	ldr	r3, [pc, #48]	@ (801c4bc <__multadd+0x84>)
 801c48a:	480d      	ldr	r0, [pc, #52]	@ (801c4c0 <__multadd+0x88>)
 801c48c:	21ba      	movs	r1, #186	@ 0xba
 801c48e:	f7ff f8bd 	bl	801b60c <__assert_func>
 801c492:	6922      	ldr	r2, [r4, #16]
 801c494:	3202      	adds	r2, #2
 801c496:	f104 010c 	add.w	r1, r4, #12
 801c49a:	0092      	lsls	r2, r2, #2
 801c49c:	300c      	adds	r0, #12
 801c49e:	f7ff f8a6 	bl	801b5ee <memcpy>
 801c4a2:	4621      	mov	r1, r4
 801c4a4:	4638      	mov	r0, r7
 801c4a6:	f7ff ffa5 	bl	801c3f4 <_Bfree>
 801c4aa:	4644      	mov	r4, r8
 801c4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c4b0:	3501      	adds	r5, #1
 801c4b2:	615e      	str	r6, [r3, #20]
 801c4b4:	6125      	str	r5, [r4, #16]
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4bc:	0806cc4d 	.word	0x0806cc4d
 801c4c0:	0806cc5e 	.word	0x0806cc5e

0801c4c4 <__hi0bits>:
 801c4c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	bf36      	itet	cc
 801c4cc:	0403      	lslcc	r3, r0, #16
 801c4ce:	2000      	movcs	r0, #0
 801c4d0:	2010      	movcc	r0, #16
 801c4d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c4d6:	bf3c      	itt	cc
 801c4d8:	021b      	lslcc	r3, r3, #8
 801c4da:	3008      	addcc	r0, #8
 801c4dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c4e0:	bf3c      	itt	cc
 801c4e2:	011b      	lslcc	r3, r3, #4
 801c4e4:	3004      	addcc	r0, #4
 801c4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c4ea:	bf3c      	itt	cc
 801c4ec:	009b      	lslcc	r3, r3, #2
 801c4ee:	3002      	addcc	r0, #2
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	db05      	blt.n	801c500 <__hi0bits+0x3c>
 801c4f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c4f8:	f100 0001 	add.w	r0, r0, #1
 801c4fc:	bf08      	it	eq
 801c4fe:	2020      	moveq	r0, #32
 801c500:	4770      	bx	lr

0801c502 <__lo0bits>:
 801c502:	6803      	ldr	r3, [r0, #0]
 801c504:	4602      	mov	r2, r0
 801c506:	f013 0007 	ands.w	r0, r3, #7
 801c50a:	d00b      	beq.n	801c524 <__lo0bits+0x22>
 801c50c:	07d9      	lsls	r1, r3, #31
 801c50e:	d421      	bmi.n	801c554 <__lo0bits+0x52>
 801c510:	0798      	lsls	r0, r3, #30
 801c512:	bf49      	itett	mi
 801c514:	085b      	lsrmi	r3, r3, #1
 801c516:	089b      	lsrpl	r3, r3, #2
 801c518:	2001      	movmi	r0, #1
 801c51a:	6013      	strmi	r3, [r2, #0]
 801c51c:	bf5c      	itt	pl
 801c51e:	6013      	strpl	r3, [r2, #0]
 801c520:	2002      	movpl	r0, #2
 801c522:	4770      	bx	lr
 801c524:	b299      	uxth	r1, r3
 801c526:	b909      	cbnz	r1, 801c52c <__lo0bits+0x2a>
 801c528:	0c1b      	lsrs	r3, r3, #16
 801c52a:	2010      	movs	r0, #16
 801c52c:	b2d9      	uxtb	r1, r3
 801c52e:	b909      	cbnz	r1, 801c534 <__lo0bits+0x32>
 801c530:	3008      	adds	r0, #8
 801c532:	0a1b      	lsrs	r3, r3, #8
 801c534:	0719      	lsls	r1, r3, #28
 801c536:	bf04      	itt	eq
 801c538:	091b      	lsreq	r3, r3, #4
 801c53a:	3004      	addeq	r0, #4
 801c53c:	0799      	lsls	r1, r3, #30
 801c53e:	bf04      	itt	eq
 801c540:	089b      	lsreq	r3, r3, #2
 801c542:	3002      	addeq	r0, #2
 801c544:	07d9      	lsls	r1, r3, #31
 801c546:	d403      	bmi.n	801c550 <__lo0bits+0x4e>
 801c548:	085b      	lsrs	r3, r3, #1
 801c54a:	f100 0001 	add.w	r0, r0, #1
 801c54e:	d003      	beq.n	801c558 <__lo0bits+0x56>
 801c550:	6013      	str	r3, [r2, #0]
 801c552:	4770      	bx	lr
 801c554:	2000      	movs	r0, #0
 801c556:	4770      	bx	lr
 801c558:	2020      	movs	r0, #32
 801c55a:	4770      	bx	lr

0801c55c <__i2b>:
 801c55c:	b510      	push	{r4, lr}
 801c55e:	460c      	mov	r4, r1
 801c560:	2101      	movs	r1, #1
 801c562:	f7ff ff07 	bl	801c374 <_Balloc>
 801c566:	4602      	mov	r2, r0
 801c568:	b928      	cbnz	r0, 801c576 <__i2b+0x1a>
 801c56a:	4b05      	ldr	r3, [pc, #20]	@ (801c580 <__i2b+0x24>)
 801c56c:	4805      	ldr	r0, [pc, #20]	@ (801c584 <__i2b+0x28>)
 801c56e:	f240 1145 	movw	r1, #325	@ 0x145
 801c572:	f7ff f84b 	bl	801b60c <__assert_func>
 801c576:	2301      	movs	r3, #1
 801c578:	6144      	str	r4, [r0, #20]
 801c57a:	6103      	str	r3, [r0, #16]
 801c57c:	bd10      	pop	{r4, pc}
 801c57e:	bf00      	nop
 801c580:	0806cc4d 	.word	0x0806cc4d
 801c584:	0806cc5e 	.word	0x0806cc5e

0801c588 <__multiply>:
 801c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c58c:	4614      	mov	r4, r2
 801c58e:	690a      	ldr	r2, [r1, #16]
 801c590:	6923      	ldr	r3, [r4, #16]
 801c592:	429a      	cmp	r2, r3
 801c594:	bfa8      	it	ge
 801c596:	4623      	movge	r3, r4
 801c598:	460f      	mov	r7, r1
 801c59a:	bfa4      	itt	ge
 801c59c:	460c      	movge	r4, r1
 801c59e:	461f      	movge	r7, r3
 801c5a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c5a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c5a8:	68a3      	ldr	r3, [r4, #8]
 801c5aa:	6861      	ldr	r1, [r4, #4]
 801c5ac:	eb0a 0609 	add.w	r6, sl, r9
 801c5b0:	42b3      	cmp	r3, r6
 801c5b2:	b085      	sub	sp, #20
 801c5b4:	bfb8      	it	lt
 801c5b6:	3101      	addlt	r1, #1
 801c5b8:	f7ff fedc 	bl	801c374 <_Balloc>
 801c5bc:	b930      	cbnz	r0, 801c5cc <__multiply+0x44>
 801c5be:	4602      	mov	r2, r0
 801c5c0:	4b44      	ldr	r3, [pc, #272]	@ (801c6d4 <__multiply+0x14c>)
 801c5c2:	4845      	ldr	r0, [pc, #276]	@ (801c6d8 <__multiply+0x150>)
 801c5c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c5c8:	f7ff f820 	bl	801b60c <__assert_func>
 801c5cc:	f100 0514 	add.w	r5, r0, #20
 801c5d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c5d4:	462b      	mov	r3, r5
 801c5d6:	2200      	movs	r2, #0
 801c5d8:	4543      	cmp	r3, r8
 801c5da:	d321      	bcc.n	801c620 <__multiply+0x98>
 801c5dc:	f107 0114 	add.w	r1, r7, #20
 801c5e0:	f104 0214 	add.w	r2, r4, #20
 801c5e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c5e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c5ec:	9302      	str	r3, [sp, #8]
 801c5ee:	1b13      	subs	r3, r2, r4
 801c5f0:	3b15      	subs	r3, #21
 801c5f2:	f023 0303 	bic.w	r3, r3, #3
 801c5f6:	3304      	adds	r3, #4
 801c5f8:	f104 0715 	add.w	r7, r4, #21
 801c5fc:	42ba      	cmp	r2, r7
 801c5fe:	bf38      	it	cc
 801c600:	2304      	movcc	r3, #4
 801c602:	9301      	str	r3, [sp, #4]
 801c604:	9b02      	ldr	r3, [sp, #8]
 801c606:	9103      	str	r1, [sp, #12]
 801c608:	428b      	cmp	r3, r1
 801c60a:	d80c      	bhi.n	801c626 <__multiply+0x9e>
 801c60c:	2e00      	cmp	r6, #0
 801c60e:	dd03      	ble.n	801c618 <__multiply+0x90>
 801c610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c614:	2b00      	cmp	r3, #0
 801c616:	d05b      	beq.n	801c6d0 <__multiply+0x148>
 801c618:	6106      	str	r6, [r0, #16]
 801c61a:	b005      	add	sp, #20
 801c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c620:	f843 2b04 	str.w	r2, [r3], #4
 801c624:	e7d8      	b.n	801c5d8 <__multiply+0x50>
 801c626:	f8b1 a000 	ldrh.w	sl, [r1]
 801c62a:	f1ba 0f00 	cmp.w	sl, #0
 801c62e:	d024      	beq.n	801c67a <__multiply+0xf2>
 801c630:	f104 0e14 	add.w	lr, r4, #20
 801c634:	46a9      	mov	r9, r5
 801c636:	f04f 0c00 	mov.w	ip, #0
 801c63a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c63e:	f8d9 3000 	ldr.w	r3, [r9]
 801c642:	fa1f fb87 	uxth.w	fp, r7
 801c646:	b29b      	uxth	r3, r3
 801c648:	fb0a 330b 	mla	r3, sl, fp, r3
 801c64c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c650:	f8d9 7000 	ldr.w	r7, [r9]
 801c654:	4463      	add	r3, ip
 801c656:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c65a:	fb0a c70b 	mla	r7, sl, fp, ip
 801c65e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c662:	b29b      	uxth	r3, r3
 801c664:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c668:	4572      	cmp	r2, lr
 801c66a:	f849 3b04 	str.w	r3, [r9], #4
 801c66e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c672:	d8e2      	bhi.n	801c63a <__multiply+0xb2>
 801c674:	9b01      	ldr	r3, [sp, #4]
 801c676:	f845 c003 	str.w	ip, [r5, r3]
 801c67a:	9b03      	ldr	r3, [sp, #12]
 801c67c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c680:	3104      	adds	r1, #4
 801c682:	f1b9 0f00 	cmp.w	r9, #0
 801c686:	d021      	beq.n	801c6cc <__multiply+0x144>
 801c688:	682b      	ldr	r3, [r5, #0]
 801c68a:	f104 0c14 	add.w	ip, r4, #20
 801c68e:	46ae      	mov	lr, r5
 801c690:	f04f 0a00 	mov.w	sl, #0
 801c694:	f8bc b000 	ldrh.w	fp, [ip]
 801c698:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c69c:	fb09 770b 	mla	r7, r9, fp, r7
 801c6a0:	4457      	add	r7, sl
 801c6a2:	b29b      	uxth	r3, r3
 801c6a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c6a8:	f84e 3b04 	str.w	r3, [lr], #4
 801c6ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c6b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c6b4:	f8be 3000 	ldrh.w	r3, [lr]
 801c6b8:	fb09 330a 	mla	r3, r9, sl, r3
 801c6bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c6c0:	4562      	cmp	r2, ip
 801c6c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c6c6:	d8e5      	bhi.n	801c694 <__multiply+0x10c>
 801c6c8:	9f01      	ldr	r7, [sp, #4]
 801c6ca:	51eb      	str	r3, [r5, r7]
 801c6cc:	3504      	adds	r5, #4
 801c6ce:	e799      	b.n	801c604 <__multiply+0x7c>
 801c6d0:	3e01      	subs	r6, #1
 801c6d2:	e79b      	b.n	801c60c <__multiply+0x84>
 801c6d4:	0806cc4d 	.word	0x0806cc4d
 801c6d8:	0806cc5e 	.word	0x0806cc5e

0801c6dc <__pow5mult>:
 801c6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6e0:	4615      	mov	r5, r2
 801c6e2:	f012 0203 	ands.w	r2, r2, #3
 801c6e6:	4607      	mov	r7, r0
 801c6e8:	460e      	mov	r6, r1
 801c6ea:	d007      	beq.n	801c6fc <__pow5mult+0x20>
 801c6ec:	4c25      	ldr	r4, [pc, #148]	@ (801c784 <__pow5mult+0xa8>)
 801c6ee:	3a01      	subs	r2, #1
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c6f6:	f7ff fe9f 	bl	801c438 <__multadd>
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	10ad      	asrs	r5, r5, #2
 801c6fe:	d03d      	beq.n	801c77c <__pow5mult+0xa0>
 801c700:	69fc      	ldr	r4, [r7, #28]
 801c702:	b97c      	cbnz	r4, 801c724 <__pow5mult+0x48>
 801c704:	2010      	movs	r0, #16
 801c706:	f7fd fecd 	bl	801a4a4 <malloc>
 801c70a:	4602      	mov	r2, r0
 801c70c:	61f8      	str	r0, [r7, #28]
 801c70e:	b928      	cbnz	r0, 801c71c <__pow5mult+0x40>
 801c710:	4b1d      	ldr	r3, [pc, #116]	@ (801c788 <__pow5mult+0xac>)
 801c712:	481e      	ldr	r0, [pc, #120]	@ (801c78c <__pow5mult+0xb0>)
 801c714:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c718:	f7fe ff78 	bl	801b60c <__assert_func>
 801c71c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c720:	6004      	str	r4, [r0, #0]
 801c722:	60c4      	str	r4, [r0, #12]
 801c724:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c72c:	b94c      	cbnz	r4, 801c742 <__pow5mult+0x66>
 801c72e:	f240 2171 	movw	r1, #625	@ 0x271
 801c732:	4638      	mov	r0, r7
 801c734:	f7ff ff12 	bl	801c55c <__i2b>
 801c738:	2300      	movs	r3, #0
 801c73a:	f8c8 0008 	str.w	r0, [r8, #8]
 801c73e:	4604      	mov	r4, r0
 801c740:	6003      	str	r3, [r0, #0]
 801c742:	f04f 0900 	mov.w	r9, #0
 801c746:	07eb      	lsls	r3, r5, #31
 801c748:	d50a      	bpl.n	801c760 <__pow5mult+0x84>
 801c74a:	4631      	mov	r1, r6
 801c74c:	4622      	mov	r2, r4
 801c74e:	4638      	mov	r0, r7
 801c750:	f7ff ff1a 	bl	801c588 <__multiply>
 801c754:	4631      	mov	r1, r6
 801c756:	4680      	mov	r8, r0
 801c758:	4638      	mov	r0, r7
 801c75a:	f7ff fe4b 	bl	801c3f4 <_Bfree>
 801c75e:	4646      	mov	r6, r8
 801c760:	106d      	asrs	r5, r5, #1
 801c762:	d00b      	beq.n	801c77c <__pow5mult+0xa0>
 801c764:	6820      	ldr	r0, [r4, #0]
 801c766:	b938      	cbnz	r0, 801c778 <__pow5mult+0x9c>
 801c768:	4622      	mov	r2, r4
 801c76a:	4621      	mov	r1, r4
 801c76c:	4638      	mov	r0, r7
 801c76e:	f7ff ff0b 	bl	801c588 <__multiply>
 801c772:	6020      	str	r0, [r4, #0]
 801c774:	f8c0 9000 	str.w	r9, [r0]
 801c778:	4604      	mov	r4, r0
 801c77a:	e7e4      	b.n	801c746 <__pow5mult+0x6a>
 801c77c:	4630      	mov	r0, r6
 801c77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c782:	bf00      	nop
 801c784:	0806ccb8 	.word	0x0806ccb8
 801c788:	0806ca08 	.word	0x0806ca08
 801c78c:	0806cc5e 	.word	0x0806cc5e

0801c790 <__lshift>:
 801c790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c794:	460c      	mov	r4, r1
 801c796:	6849      	ldr	r1, [r1, #4]
 801c798:	6923      	ldr	r3, [r4, #16]
 801c79a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c79e:	68a3      	ldr	r3, [r4, #8]
 801c7a0:	4607      	mov	r7, r0
 801c7a2:	4691      	mov	r9, r2
 801c7a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c7a8:	f108 0601 	add.w	r6, r8, #1
 801c7ac:	42b3      	cmp	r3, r6
 801c7ae:	db0b      	blt.n	801c7c8 <__lshift+0x38>
 801c7b0:	4638      	mov	r0, r7
 801c7b2:	f7ff fddf 	bl	801c374 <_Balloc>
 801c7b6:	4605      	mov	r5, r0
 801c7b8:	b948      	cbnz	r0, 801c7ce <__lshift+0x3e>
 801c7ba:	4602      	mov	r2, r0
 801c7bc:	4b28      	ldr	r3, [pc, #160]	@ (801c860 <__lshift+0xd0>)
 801c7be:	4829      	ldr	r0, [pc, #164]	@ (801c864 <__lshift+0xd4>)
 801c7c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c7c4:	f7fe ff22 	bl	801b60c <__assert_func>
 801c7c8:	3101      	adds	r1, #1
 801c7ca:	005b      	lsls	r3, r3, #1
 801c7cc:	e7ee      	b.n	801c7ac <__lshift+0x1c>
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	f100 0114 	add.w	r1, r0, #20
 801c7d4:	f100 0210 	add.w	r2, r0, #16
 801c7d8:	4618      	mov	r0, r3
 801c7da:	4553      	cmp	r3, sl
 801c7dc:	db33      	blt.n	801c846 <__lshift+0xb6>
 801c7de:	6920      	ldr	r0, [r4, #16]
 801c7e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c7e4:	f104 0314 	add.w	r3, r4, #20
 801c7e8:	f019 091f 	ands.w	r9, r9, #31
 801c7ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c7f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c7f4:	d02b      	beq.n	801c84e <__lshift+0xbe>
 801c7f6:	f1c9 0e20 	rsb	lr, r9, #32
 801c7fa:	468a      	mov	sl, r1
 801c7fc:	2200      	movs	r2, #0
 801c7fe:	6818      	ldr	r0, [r3, #0]
 801c800:	fa00 f009 	lsl.w	r0, r0, r9
 801c804:	4310      	orrs	r0, r2
 801c806:	f84a 0b04 	str.w	r0, [sl], #4
 801c80a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c80e:	459c      	cmp	ip, r3
 801c810:	fa22 f20e 	lsr.w	r2, r2, lr
 801c814:	d8f3      	bhi.n	801c7fe <__lshift+0x6e>
 801c816:	ebac 0304 	sub.w	r3, ip, r4
 801c81a:	3b15      	subs	r3, #21
 801c81c:	f023 0303 	bic.w	r3, r3, #3
 801c820:	3304      	adds	r3, #4
 801c822:	f104 0015 	add.w	r0, r4, #21
 801c826:	4584      	cmp	ip, r0
 801c828:	bf38      	it	cc
 801c82a:	2304      	movcc	r3, #4
 801c82c:	50ca      	str	r2, [r1, r3]
 801c82e:	b10a      	cbz	r2, 801c834 <__lshift+0xa4>
 801c830:	f108 0602 	add.w	r6, r8, #2
 801c834:	3e01      	subs	r6, #1
 801c836:	4638      	mov	r0, r7
 801c838:	612e      	str	r6, [r5, #16]
 801c83a:	4621      	mov	r1, r4
 801c83c:	f7ff fdda 	bl	801c3f4 <_Bfree>
 801c840:	4628      	mov	r0, r5
 801c842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c846:	f842 0f04 	str.w	r0, [r2, #4]!
 801c84a:	3301      	adds	r3, #1
 801c84c:	e7c5      	b.n	801c7da <__lshift+0x4a>
 801c84e:	3904      	subs	r1, #4
 801c850:	f853 2b04 	ldr.w	r2, [r3], #4
 801c854:	f841 2f04 	str.w	r2, [r1, #4]!
 801c858:	459c      	cmp	ip, r3
 801c85a:	d8f9      	bhi.n	801c850 <__lshift+0xc0>
 801c85c:	e7ea      	b.n	801c834 <__lshift+0xa4>
 801c85e:	bf00      	nop
 801c860:	0806cc4d 	.word	0x0806cc4d
 801c864:	0806cc5e 	.word	0x0806cc5e

0801c868 <__mcmp>:
 801c868:	690a      	ldr	r2, [r1, #16]
 801c86a:	4603      	mov	r3, r0
 801c86c:	6900      	ldr	r0, [r0, #16]
 801c86e:	1a80      	subs	r0, r0, r2
 801c870:	b530      	push	{r4, r5, lr}
 801c872:	d10e      	bne.n	801c892 <__mcmp+0x2a>
 801c874:	3314      	adds	r3, #20
 801c876:	3114      	adds	r1, #20
 801c878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c87c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c888:	4295      	cmp	r5, r2
 801c88a:	d003      	beq.n	801c894 <__mcmp+0x2c>
 801c88c:	d205      	bcs.n	801c89a <__mcmp+0x32>
 801c88e:	f04f 30ff 	mov.w	r0, #4294967295
 801c892:	bd30      	pop	{r4, r5, pc}
 801c894:	42a3      	cmp	r3, r4
 801c896:	d3f3      	bcc.n	801c880 <__mcmp+0x18>
 801c898:	e7fb      	b.n	801c892 <__mcmp+0x2a>
 801c89a:	2001      	movs	r0, #1
 801c89c:	e7f9      	b.n	801c892 <__mcmp+0x2a>
	...

0801c8a0 <__mdiff>:
 801c8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a4:	4689      	mov	r9, r1
 801c8a6:	4606      	mov	r6, r0
 801c8a8:	4611      	mov	r1, r2
 801c8aa:	4648      	mov	r0, r9
 801c8ac:	4614      	mov	r4, r2
 801c8ae:	f7ff ffdb 	bl	801c868 <__mcmp>
 801c8b2:	1e05      	subs	r5, r0, #0
 801c8b4:	d112      	bne.n	801c8dc <__mdiff+0x3c>
 801c8b6:	4629      	mov	r1, r5
 801c8b8:	4630      	mov	r0, r6
 801c8ba:	f7ff fd5b 	bl	801c374 <_Balloc>
 801c8be:	4602      	mov	r2, r0
 801c8c0:	b928      	cbnz	r0, 801c8ce <__mdiff+0x2e>
 801c8c2:	4b3f      	ldr	r3, [pc, #252]	@ (801c9c0 <__mdiff+0x120>)
 801c8c4:	f240 2137 	movw	r1, #567	@ 0x237
 801c8c8:	483e      	ldr	r0, [pc, #248]	@ (801c9c4 <__mdiff+0x124>)
 801c8ca:	f7fe fe9f 	bl	801b60c <__assert_func>
 801c8ce:	2301      	movs	r3, #1
 801c8d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c8d4:	4610      	mov	r0, r2
 801c8d6:	b003      	add	sp, #12
 801c8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8dc:	bfbc      	itt	lt
 801c8de:	464b      	movlt	r3, r9
 801c8e0:	46a1      	movlt	r9, r4
 801c8e2:	4630      	mov	r0, r6
 801c8e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c8e8:	bfba      	itte	lt
 801c8ea:	461c      	movlt	r4, r3
 801c8ec:	2501      	movlt	r5, #1
 801c8ee:	2500      	movge	r5, #0
 801c8f0:	f7ff fd40 	bl	801c374 <_Balloc>
 801c8f4:	4602      	mov	r2, r0
 801c8f6:	b918      	cbnz	r0, 801c900 <__mdiff+0x60>
 801c8f8:	4b31      	ldr	r3, [pc, #196]	@ (801c9c0 <__mdiff+0x120>)
 801c8fa:	f240 2145 	movw	r1, #581	@ 0x245
 801c8fe:	e7e3      	b.n	801c8c8 <__mdiff+0x28>
 801c900:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c904:	6926      	ldr	r6, [r4, #16]
 801c906:	60c5      	str	r5, [r0, #12]
 801c908:	f109 0310 	add.w	r3, r9, #16
 801c90c:	f109 0514 	add.w	r5, r9, #20
 801c910:	f104 0e14 	add.w	lr, r4, #20
 801c914:	f100 0b14 	add.w	fp, r0, #20
 801c918:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c91c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c920:	9301      	str	r3, [sp, #4]
 801c922:	46d9      	mov	r9, fp
 801c924:	f04f 0c00 	mov.w	ip, #0
 801c928:	9b01      	ldr	r3, [sp, #4]
 801c92a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c92e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c932:	9301      	str	r3, [sp, #4]
 801c934:	fa1f f38a 	uxth.w	r3, sl
 801c938:	4619      	mov	r1, r3
 801c93a:	b283      	uxth	r3, r0
 801c93c:	1acb      	subs	r3, r1, r3
 801c93e:	0c00      	lsrs	r0, r0, #16
 801c940:	4463      	add	r3, ip
 801c942:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c946:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c950:	4576      	cmp	r6, lr
 801c952:	f849 3b04 	str.w	r3, [r9], #4
 801c956:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c95a:	d8e5      	bhi.n	801c928 <__mdiff+0x88>
 801c95c:	1b33      	subs	r3, r6, r4
 801c95e:	3b15      	subs	r3, #21
 801c960:	f023 0303 	bic.w	r3, r3, #3
 801c964:	3415      	adds	r4, #21
 801c966:	3304      	adds	r3, #4
 801c968:	42a6      	cmp	r6, r4
 801c96a:	bf38      	it	cc
 801c96c:	2304      	movcc	r3, #4
 801c96e:	441d      	add	r5, r3
 801c970:	445b      	add	r3, fp
 801c972:	461e      	mov	r6, r3
 801c974:	462c      	mov	r4, r5
 801c976:	4544      	cmp	r4, r8
 801c978:	d30e      	bcc.n	801c998 <__mdiff+0xf8>
 801c97a:	f108 0103 	add.w	r1, r8, #3
 801c97e:	1b49      	subs	r1, r1, r5
 801c980:	f021 0103 	bic.w	r1, r1, #3
 801c984:	3d03      	subs	r5, #3
 801c986:	45a8      	cmp	r8, r5
 801c988:	bf38      	it	cc
 801c98a:	2100      	movcc	r1, #0
 801c98c:	440b      	add	r3, r1
 801c98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c992:	b191      	cbz	r1, 801c9ba <__mdiff+0x11a>
 801c994:	6117      	str	r7, [r2, #16]
 801c996:	e79d      	b.n	801c8d4 <__mdiff+0x34>
 801c998:	f854 1b04 	ldr.w	r1, [r4], #4
 801c99c:	46e6      	mov	lr, ip
 801c99e:	0c08      	lsrs	r0, r1, #16
 801c9a0:	fa1c fc81 	uxtah	ip, ip, r1
 801c9a4:	4471      	add	r1, lr
 801c9a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c9aa:	b289      	uxth	r1, r1
 801c9ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c9b0:	f846 1b04 	str.w	r1, [r6], #4
 801c9b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c9b8:	e7dd      	b.n	801c976 <__mdiff+0xd6>
 801c9ba:	3f01      	subs	r7, #1
 801c9bc:	e7e7      	b.n	801c98e <__mdiff+0xee>
 801c9be:	bf00      	nop
 801c9c0:	0806cc4d 	.word	0x0806cc4d
 801c9c4:	0806cc5e 	.word	0x0806cc5e

0801c9c8 <__d2b>:
 801c9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c9cc:	460f      	mov	r7, r1
 801c9ce:	2101      	movs	r1, #1
 801c9d0:	ec59 8b10 	vmov	r8, r9, d0
 801c9d4:	4616      	mov	r6, r2
 801c9d6:	f7ff fccd 	bl	801c374 <_Balloc>
 801c9da:	4604      	mov	r4, r0
 801c9dc:	b930      	cbnz	r0, 801c9ec <__d2b+0x24>
 801c9de:	4602      	mov	r2, r0
 801c9e0:	4b23      	ldr	r3, [pc, #140]	@ (801ca70 <__d2b+0xa8>)
 801c9e2:	4824      	ldr	r0, [pc, #144]	@ (801ca74 <__d2b+0xac>)
 801c9e4:	f240 310f 	movw	r1, #783	@ 0x30f
 801c9e8:	f7fe fe10 	bl	801b60c <__assert_func>
 801c9ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9f4:	b10d      	cbz	r5, 801c9fa <__d2b+0x32>
 801c9f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c9fa:	9301      	str	r3, [sp, #4]
 801c9fc:	f1b8 0300 	subs.w	r3, r8, #0
 801ca00:	d023      	beq.n	801ca4a <__d2b+0x82>
 801ca02:	4668      	mov	r0, sp
 801ca04:	9300      	str	r3, [sp, #0]
 801ca06:	f7ff fd7c 	bl	801c502 <__lo0bits>
 801ca0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ca0e:	b1d0      	cbz	r0, 801ca46 <__d2b+0x7e>
 801ca10:	f1c0 0320 	rsb	r3, r0, #32
 801ca14:	fa02 f303 	lsl.w	r3, r2, r3
 801ca18:	430b      	orrs	r3, r1
 801ca1a:	40c2      	lsrs	r2, r0
 801ca1c:	6163      	str	r3, [r4, #20]
 801ca1e:	9201      	str	r2, [sp, #4]
 801ca20:	9b01      	ldr	r3, [sp, #4]
 801ca22:	61a3      	str	r3, [r4, #24]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	bf0c      	ite	eq
 801ca28:	2201      	moveq	r2, #1
 801ca2a:	2202      	movne	r2, #2
 801ca2c:	6122      	str	r2, [r4, #16]
 801ca2e:	b1a5      	cbz	r5, 801ca5a <__d2b+0x92>
 801ca30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ca34:	4405      	add	r5, r0
 801ca36:	603d      	str	r5, [r7, #0]
 801ca38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ca3c:	6030      	str	r0, [r6, #0]
 801ca3e:	4620      	mov	r0, r4
 801ca40:	b003      	add	sp, #12
 801ca42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca46:	6161      	str	r1, [r4, #20]
 801ca48:	e7ea      	b.n	801ca20 <__d2b+0x58>
 801ca4a:	a801      	add	r0, sp, #4
 801ca4c:	f7ff fd59 	bl	801c502 <__lo0bits>
 801ca50:	9b01      	ldr	r3, [sp, #4]
 801ca52:	6163      	str	r3, [r4, #20]
 801ca54:	3020      	adds	r0, #32
 801ca56:	2201      	movs	r2, #1
 801ca58:	e7e8      	b.n	801ca2c <__d2b+0x64>
 801ca5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ca5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ca62:	6038      	str	r0, [r7, #0]
 801ca64:	6918      	ldr	r0, [r3, #16]
 801ca66:	f7ff fd2d 	bl	801c4c4 <__hi0bits>
 801ca6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ca6e:	e7e5      	b.n	801ca3c <__d2b+0x74>
 801ca70:	0806cc4d 	.word	0x0806cc4d
 801ca74:	0806cc5e 	.word	0x0806cc5e

0801ca78 <__sfputc_r>:
 801ca78:	6893      	ldr	r3, [r2, #8]
 801ca7a:	3b01      	subs	r3, #1
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	b410      	push	{r4}
 801ca80:	6093      	str	r3, [r2, #8]
 801ca82:	da08      	bge.n	801ca96 <__sfputc_r+0x1e>
 801ca84:	6994      	ldr	r4, [r2, #24]
 801ca86:	42a3      	cmp	r3, r4
 801ca88:	db01      	blt.n	801ca8e <__sfputc_r+0x16>
 801ca8a:	290a      	cmp	r1, #10
 801ca8c:	d103      	bne.n	801ca96 <__sfputc_r+0x1e>
 801ca8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca92:	f7fe bc4b 	b.w	801b32c <__swbuf_r>
 801ca96:	6813      	ldr	r3, [r2, #0]
 801ca98:	1c58      	adds	r0, r3, #1
 801ca9a:	6010      	str	r0, [r2, #0]
 801ca9c:	7019      	strb	r1, [r3, #0]
 801ca9e:	4608      	mov	r0, r1
 801caa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801caa4:	4770      	bx	lr

0801caa6 <__sfputs_r>:
 801caa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caa8:	4606      	mov	r6, r0
 801caaa:	460f      	mov	r7, r1
 801caac:	4614      	mov	r4, r2
 801caae:	18d5      	adds	r5, r2, r3
 801cab0:	42ac      	cmp	r4, r5
 801cab2:	d101      	bne.n	801cab8 <__sfputs_r+0x12>
 801cab4:	2000      	movs	r0, #0
 801cab6:	e007      	b.n	801cac8 <__sfputs_r+0x22>
 801cab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cabc:	463a      	mov	r2, r7
 801cabe:	4630      	mov	r0, r6
 801cac0:	f7ff ffda 	bl	801ca78 <__sfputc_r>
 801cac4:	1c43      	adds	r3, r0, #1
 801cac6:	d1f3      	bne.n	801cab0 <__sfputs_r+0xa>
 801cac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cacc <_vfiprintf_r>:
 801cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cad0:	460d      	mov	r5, r1
 801cad2:	b09d      	sub	sp, #116	@ 0x74
 801cad4:	4614      	mov	r4, r2
 801cad6:	4698      	mov	r8, r3
 801cad8:	4606      	mov	r6, r0
 801cada:	b118      	cbz	r0, 801cae4 <_vfiprintf_r+0x18>
 801cadc:	6a03      	ldr	r3, [r0, #32]
 801cade:	b90b      	cbnz	r3, 801cae4 <_vfiprintf_r+0x18>
 801cae0:	f7fe fb30 	bl	801b144 <__sinit>
 801cae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cae6:	07d9      	lsls	r1, r3, #31
 801cae8:	d405      	bmi.n	801caf6 <_vfiprintf_r+0x2a>
 801caea:	89ab      	ldrh	r3, [r5, #12]
 801caec:	059a      	lsls	r2, r3, #22
 801caee:	d402      	bmi.n	801caf6 <_vfiprintf_r+0x2a>
 801caf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801caf2:	f7fe fd72 	bl	801b5da <__retarget_lock_acquire_recursive>
 801caf6:	89ab      	ldrh	r3, [r5, #12]
 801caf8:	071b      	lsls	r3, r3, #28
 801cafa:	d501      	bpl.n	801cb00 <_vfiprintf_r+0x34>
 801cafc:	692b      	ldr	r3, [r5, #16]
 801cafe:	b99b      	cbnz	r3, 801cb28 <_vfiprintf_r+0x5c>
 801cb00:	4629      	mov	r1, r5
 801cb02:	4630      	mov	r0, r6
 801cb04:	f7fe fc50 	bl	801b3a8 <__swsetup_r>
 801cb08:	b170      	cbz	r0, 801cb28 <_vfiprintf_r+0x5c>
 801cb0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb0c:	07dc      	lsls	r4, r3, #31
 801cb0e:	d504      	bpl.n	801cb1a <_vfiprintf_r+0x4e>
 801cb10:	f04f 30ff 	mov.w	r0, #4294967295
 801cb14:	b01d      	add	sp, #116	@ 0x74
 801cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb1a:	89ab      	ldrh	r3, [r5, #12]
 801cb1c:	0598      	lsls	r0, r3, #22
 801cb1e:	d4f7      	bmi.n	801cb10 <_vfiprintf_r+0x44>
 801cb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb22:	f7fe fd5b 	bl	801b5dc <__retarget_lock_release_recursive>
 801cb26:	e7f3      	b.n	801cb10 <_vfiprintf_r+0x44>
 801cb28:	2300      	movs	r3, #0
 801cb2a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb2c:	2320      	movs	r3, #32
 801cb2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cb32:	f8cd 800c 	str.w	r8, [sp, #12]
 801cb36:	2330      	movs	r3, #48	@ 0x30
 801cb38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cce8 <_vfiprintf_r+0x21c>
 801cb3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cb40:	f04f 0901 	mov.w	r9, #1
 801cb44:	4623      	mov	r3, r4
 801cb46:	469a      	mov	sl, r3
 801cb48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb4c:	b10a      	cbz	r2, 801cb52 <_vfiprintf_r+0x86>
 801cb4e:	2a25      	cmp	r2, #37	@ 0x25
 801cb50:	d1f9      	bne.n	801cb46 <_vfiprintf_r+0x7a>
 801cb52:	ebba 0b04 	subs.w	fp, sl, r4
 801cb56:	d00b      	beq.n	801cb70 <_vfiprintf_r+0xa4>
 801cb58:	465b      	mov	r3, fp
 801cb5a:	4622      	mov	r2, r4
 801cb5c:	4629      	mov	r1, r5
 801cb5e:	4630      	mov	r0, r6
 801cb60:	f7ff ffa1 	bl	801caa6 <__sfputs_r>
 801cb64:	3001      	adds	r0, #1
 801cb66:	f000 80a7 	beq.w	801ccb8 <_vfiprintf_r+0x1ec>
 801cb6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb6c:	445a      	add	r2, fp
 801cb6e:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb70:	f89a 3000 	ldrb.w	r3, [sl]
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	f000 809f 	beq.w	801ccb8 <_vfiprintf_r+0x1ec>
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 801cb80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cb84:	f10a 0a01 	add.w	sl, sl, #1
 801cb88:	9304      	str	r3, [sp, #16]
 801cb8a:	9307      	str	r3, [sp, #28]
 801cb8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cb90:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb92:	4654      	mov	r4, sl
 801cb94:	2205      	movs	r2, #5
 801cb96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb9a:	4853      	ldr	r0, [pc, #332]	@ (801cce8 <_vfiprintf_r+0x21c>)
 801cb9c:	f7e3 fb30 	bl	8000200 <memchr>
 801cba0:	9a04      	ldr	r2, [sp, #16]
 801cba2:	b9d8      	cbnz	r0, 801cbdc <_vfiprintf_r+0x110>
 801cba4:	06d1      	lsls	r1, r2, #27
 801cba6:	bf44      	itt	mi
 801cba8:	2320      	movmi	r3, #32
 801cbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cbae:	0713      	lsls	r3, r2, #28
 801cbb0:	bf44      	itt	mi
 801cbb2:	232b      	movmi	r3, #43	@ 0x2b
 801cbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cbb8:	f89a 3000 	ldrb.w	r3, [sl]
 801cbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 801cbbe:	d015      	beq.n	801cbec <_vfiprintf_r+0x120>
 801cbc0:	9a07      	ldr	r2, [sp, #28]
 801cbc2:	4654      	mov	r4, sl
 801cbc4:	2000      	movs	r0, #0
 801cbc6:	f04f 0c0a 	mov.w	ip, #10
 801cbca:	4621      	mov	r1, r4
 801cbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cbd0:	3b30      	subs	r3, #48	@ 0x30
 801cbd2:	2b09      	cmp	r3, #9
 801cbd4:	d94b      	bls.n	801cc6e <_vfiprintf_r+0x1a2>
 801cbd6:	b1b0      	cbz	r0, 801cc06 <_vfiprintf_r+0x13a>
 801cbd8:	9207      	str	r2, [sp, #28]
 801cbda:	e014      	b.n	801cc06 <_vfiprintf_r+0x13a>
 801cbdc:	eba0 0308 	sub.w	r3, r0, r8
 801cbe0:	fa09 f303 	lsl.w	r3, r9, r3
 801cbe4:	4313      	orrs	r3, r2
 801cbe6:	9304      	str	r3, [sp, #16]
 801cbe8:	46a2      	mov	sl, r4
 801cbea:	e7d2      	b.n	801cb92 <_vfiprintf_r+0xc6>
 801cbec:	9b03      	ldr	r3, [sp, #12]
 801cbee:	1d19      	adds	r1, r3, #4
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	9103      	str	r1, [sp, #12]
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	bfbb      	ittet	lt
 801cbf8:	425b      	neglt	r3, r3
 801cbfa:	f042 0202 	orrlt.w	r2, r2, #2
 801cbfe:	9307      	strge	r3, [sp, #28]
 801cc00:	9307      	strlt	r3, [sp, #28]
 801cc02:	bfb8      	it	lt
 801cc04:	9204      	strlt	r2, [sp, #16]
 801cc06:	7823      	ldrb	r3, [r4, #0]
 801cc08:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc0a:	d10a      	bne.n	801cc22 <_vfiprintf_r+0x156>
 801cc0c:	7863      	ldrb	r3, [r4, #1]
 801cc0e:	2b2a      	cmp	r3, #42	@ 0x2a
 801cc10:	d132      	bne.n	801cc78 <_vfiprintf_r+0x1ac>
 801cc12:	9b03      	ldr	r3, [sp, #12]
 801cc14:	1d1a      	adds	r2, r3, #4
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	9203      	str	r2, [sp, #12]
 801cc1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cc1e:	3402      	adds	r4, #2
 801cc20:	9305      	str	r3, [sp, #20]
 801cc22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ccf8 <_vfiprintf_r+0x22c>
 801cc26:	7821      	ldrb	r1, [r4, #0]
 801cc28:	2203      	movs	r2, #3
 801cc2a:	4650      	mov	r0, sl
 801cc2c:	f7e3 fae8 	bl	8000200 <memchr>
 801cc30:	b138      	cbz	r0, 801cc42 <_vfiprintf_r+0x176>
 801cc32:	9b04      	ldr	r3, [sp, #16]
 801cc34:	eba0 000a 	sub.w	r0, r0, sl
 801cc38:	2240      	movs	r2, #64	@ 0x40
 801cc3a:	4082      	lsls	r2, r0
 801cc3c:	4313      	orrs	r3, r2
 801cc3e:	3401      	adds	r4, #1
 801cc40:	9304      	str	r3, [sp, #16]
 801cc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc46:	4829      	ldr	r0, [pc, #164]	@ (801ccec <_vfiprintf_r+0x220>)
 801cc48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cc4c:	2206      	movs	r2, #6
 801cc4e:	f7e3 fad7 	bl	8000200 <memchr>
 801cc52:	2800      	cmp	r0, #0
 801cc54:	d03f      	beq.n	801ccd6 <_vfiprintf_r+0x20a>
 801cc56:	4b26      	ldr	r3, [pc, #152]	@ (801ccf0 <_vfiprintf_r+0x224>)
 801cc58:	bb1b      	cbnz	r3, 801cca2 <_vfiprintf_r+0x1d6>
 801cc5a:	9b03      	ldr	r3, [sp, #12]
 801cc5c:	3307      	adds	r3, #7
 801cc5e:	f023 0307 	bic.w	r3, r3, #7
 801cc62:	3308      	adds	r3, #8
 801cc64:	9303      	str	r3, [sp, #12]
 801cc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc68:	443b      	add	r3, r7
 801cc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc6c:	e76a      	b.n	801cb44 <_vfiprintf_r+0x78>
 801cc6e:	fb0c 3202 	mla	r2, ip, r2, r3
 801cc72:	460c      	mov	r4, r1
 801cc74:	2001      	movs	r0, #1
 801cc76:	e7a8      	b.n	801cbca <_vfiprintf_r+0xfe>
 801cc78:	2300      	movs	r3, #0
 801cc7a:	3401      	adds	r4, #1
 801cc7c:	9305      	str	r3, [sp, #20]
 801cc7e:	4619      	mov	r1, r3
 801cc80:	f04f 0c0a 	mov.w	ip, #10
 801cc84:	4620      	mov	r0, r4
 801cc86:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc8a:	3a30      	subs	r2, #48	@ 0x30
 801cc8c:	2a09      	cmp	r2, #9
 801cc8e:	d903      	bls.n	801cc98 <_vfiprintf_r+0x1cc>
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d0c6      	beq.n	801cc22 <_vfiprintf_r+0x156>
 801cc94:	9105      	str	r1, [sp, #20]
 801cc96:	e7c4      	b.n	801cc22 <_vfiprintf_r+0x156>
 801cc98:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc9c:	4604      	mov	r4, r0
 801cc9e:	2301      	movs	r3, #1
 801cca0:	e7f0      	b.n	801cc84 <_vfiprintf_r+0x1b8>
 801cca2:	ab03      	add	r3, sp, #12
 801cca4:	9300      	str	r3, [sp, #0]
 801cca6:	462a      	mov	r2, r5
 801cca8:	4b12      	ldr	r3, [pc, #72]	@ (801ccf4 <_vfiprintf_r+0x228>)
 801ccaa:	a904      	add	r1, sp, #16
 801ccac:	4630      	mov	r0, r6
 801ccae:	f7fd fe05 	bl	801a8bc <_printf_float>
 801ccb2:	4607      	mov	r7, r0
 801ccb4:	1c78      	adds	r0, r7, #1
 801ccb6:	d1d6      	bne.n	801cc66 <_vfiprintf_r+0x19a>
 801ccb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ccba:	07d9      	lsls	r1, r3, #31
 801ccbc:	d405      	bmi.n	801ccca <_vfiprintf_r+0x1fe>
 801ccbe:	89ab      	ldrh	r3, [r5, #12]
 801ccc0:	059a      	lsls	r2, r3, #22
 801ccc2:	d402      	bmi.n	801ccca <_vfiprintf_r+0x1fe>
 801ccc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ccc6:	f7fe fc89 	bl	801b5dc <__retarget_lock_release_recursive>
 801ccca:	89ab      	ldrh	r3, [r5, #12]
 801cccc:	065b      	lsls	r3, r3, #25
 801ccce:	f53f af1f 	bmi.w	801cb10 <_vfiprintf_r+0x44>
 801ccd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ccd4:	e71e      	b.n	801cb14 <_vfiprintf_r+0x48>
 801ccd6:	ab03      	add	r3, sp, #12
 801ccd8:	9300      	str	r3, [sp, #0]
 801ccda:	462a      	mov	r2, r5
 801ccdc:	4b05      	ldr	r3, [pc, #20]	@ (801ccf4 <_vfiprintf_r+0x228>)
 801ccde:	a904      	add	r1, sp, #16
 801cce0:	4630      	mov	r0, r6
 801cce2:	f7fe f883 	bl	801adec <_printf_i>
 801cce6:	e7e4      	b.n	801ccb2 <_vfiprintf_r+0x1e6>
 801cce8:	0806cdb8 	.word	0x0806cdb8
 801ccec:	0806cdc2 	.word	0x0806cdc2
 801ccf0:	0801a8bd 	.word	0x0801a8bd
 801ccf4:	0801caa7 	.word	0x0801caa7
 801ccf8:	0806cdbe 	.word	0x0806cdbe

0801ccfc <__sflush_r>:
 801ccfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd04:	0716      	lsls	r6, r2, #28
 801cd06:	4605      	mov	r5, r0
 801cd08:	460c      	mov	r4, r1
 801cd0a:	d454      	bmi.n	801cdb6 <__sflush_r+0xba>
 801cd0c:	684b      	ldr	r3, [r1, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	dc02      	bgt.n	801cd18 <__sflush_r+0x1c>
 801cd12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	dd48      	ble.n	801cdaa <__sflush_r+0xae>
 801cd18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd1a:	2e00      	cmp	r6, #0
 801cd1c:	d045      	beq.n	801cdaa <__sflush_r+0xae>
 801cd1e:	2300      	movs	r3, #0
 801cd20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cd24:	682f      	ldr	r7, [r5, #0]
 801cd26:	6a21      	ldr	r1, [r4, #32]
 801cd28:	602b      	str	r3, [r5, #0]
 801cd2a:	d030      	beq.n	801cd8e <__sflush_r+0x92>
 801cd2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cd2e:	89a3      	ldrh	r3, [r4, #12]
 801cd30:	0759      	lsls	r1, r3, #29
 801cd32:	d505      	bpl.n	801cd40 <__sflush_r+0x44>
 801cd34:	6863      	ldr	r3, [r4, #4]
 801cd36:	1ad2      	subs	r2, r2, r3
 801cd38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cd3a:	b10b      	cbz	r3, 801cd40 <__sflush_r+0x44>
 801cd3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cd3e:	1ad2      	subs	r2, r2, r3
 801cd40:	2300      	movs	r3, #0
 801cd42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd44:	6a21      	ldr	r1, [r4, #32]
 801cd46:	4628      	mov	r0, r5
 801cd48:	47b0      	blx	r6
 801cd4a:	1c43      	adds	r3, r0, #1
 801cd4c:	89a3      	ldrh	r3, [r4, #12]
 801cd4e:	d106      	bne.n	801cd5e <__sflush_r+0x62>
 801cd50:	6829      	ldr	r1, [r5, #0]
 801cd52:	291d      	cmp	r1, #29
 801cd54:	d82b      	bhi.n	801cdae <__sflush_r+0xb2>
 801cd56:	4a2a      	ldr	r2, [pc, #168]	@ (801ce00 <__sflush_r+0x104>)
 801cd58:	410a      	asrs	r2, r1
 801cd5a:	07d6      	lsls	r6, r2, #31
 801cd5c:	d427      	bmi.n	801cdae <__sflush_r+0xb2>
 801cd5e:	2200      	movs	r2, #0
 801cd60:	6062      	str	r2, [r4, #4]
 801cd62:	04d9      	lsls	r1, r3, #19
 801cd64:	6922      	ldr	r2, [r4, #16]
 801cd66:	6022      	str	r2, [r4, #0]
 801cd68:	d504      	bpl.n	801cd74 <__sflush_r+0x78>
 801cd6a:	1c42      	adds	r2, r0, #1
 801cd6c:	d101      	bne.n	801cd72 <__sflush_r+0x76>
 801cd6e:	682b      	ldr	r3, [r5, #0]
 801cd70:	b903      	cbnz	r3, 801cd74 <__sflush_r+0x78>
 801cd72:	6560      	str	r0, [r4, #84]	@ 0x54
 801cd74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cd76:	602f      	str	r7, [r5, #0]
 801cd78:	b1b9      	cbz	r1, 801cdaa <__sflush_r+0xae>
 801cd7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cd7e:	4299      	cmp	r1, r3
 801cd80:	d002      	beq.n	801cd88 <__sflush_r+0x8c>
 801cd82:	4628      	mov	r0, r5
 801cd84:	f7ff faac 	bl	801c2e0 <_free_r>
 801cd88:	2300      	movs	r3, #0
 801cd8a:	6363      	str	r3, [r4, #52]	@ 0x34
 801cd8c:	e00d      	b.n	801cdaa <__sflush_r+0xae>
 801cd8e:	2301      	movs	r3, #1
 801cd90:	4628      	mov	r0, r5
 801cd92:	47b0      	blx	r6
 801cd94:	4602      	mov	r2, r0
 801cd96:	1c50      	adds	r0, r2, #1
 801cd98:	d1c9      	bne.n	801cd2e <__sflush_r+0x32>
 801cd9a:	682b      	ldr	r3, [r5, #0]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d0c6      	beq.n	801cd2e <__sflush_r+0x32>
 801cda0:	2b1d      	cmp	r3, #29
 801cda2:	d001      	beq.n	801cda8 <__sflush_r+0xac>
 801cda4:	2b16      	cmp	r3, #22
 801cda6:	d11e      	bne.n	801cde6 <__sflush_r+0xea>
 801cda8:	602f      	str	r7, [r5, #0]
 801cdaa:	2000      	movs	r0, #0
 801cdac:	e022      	b.n	801cdf4 <__sflush_r+0xf8>
 801cdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cdb2:	b21b      	sxth	r3, r3
 801cdb4:	e01b      	b.n	801cdee <__sflush_r+0xf2>
 801cdb6:	690f      	ldr	r7, [r1, #16]
 801cdb8:	2f00      	cmp	r7, #0
 801cdba:	d0f6      	beq.n	801cdaa <__sflush_r+0xae>
 801cdbc:	0793      	lsls	r3, r2, #30
 801cdbe:	680e      	ldr	r6, [r1, #0]
 801cdc0:	bf08      	it	eq
 801cdc2:	694b      	ldreq	r3, [r1, #20]
 801cdc4:	600f      	str	r7, [r1, #0]
 801cdc6:	bf18      	it	ne
 801cdc8:	2300      	movne	r3, #0
 801cdca:	eba6 0807 	sub.w	r8, r6, r7
 801cdce:	608b      	str	r3, [r1, #8]
 801cdd0:	f1b8 0f00 	cmp.w	r8, #0
 801cdd4:	dde9      	ble.n	801cdaa <__sflush_r+0xae>
 801cdd6:	6a21      	ldr	r1, [r4, #32]
 801cdd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cdda:	4643      	mov	r3, r8
 801cddc:	463a      	mov	r2, r7
 801cdde:	4628      	mov	r0, r5
 801cde0:	47b0      	blx	r6
 801cde2:	2800      	cmp	r0, #0
 801cde4:	dc08      	bgt.n	801cdf8 <__sflush_r+0xfc>
 801cde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cdea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cdee:	81a3      	strh	r3, [r4, #12]
 801cdf0:	f04f 30ff 	mov.w	r0, #4294967295
 801cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdf8:	4407      	add	r7, r0
 801cdfa:	eba8 0800 	sub.w	r8, r8, r0
 801cdfe:	e7e7      	b.n	801cdd0 <__sflush_r+0xd4>
 801ce00:	dfbffffe 	.word	0xdfbffffe

0801ce04 <_fflush_r>:
 801ce04:	b538      	push	{r3, r4, r5, lr}
 801ce06:	690b      	ldr	r3, [r1, #16]
 801ce08:	4605      	mov	r5, r0
 801ce0a:	460c      	mov	r4, r1
 801ce0c:	b913      	cbnz	r3, 801ce14 <_fflush_r+0x10>
 801ce0e:	2500      	movs	r5, #0
 801ce10:	4628      	mov	r0, r5
 801ce12:	bd38      	pop	{r3, r4, r5, pc}
 801ce14:	b118      	cbz	r0, 801ce1e <_fflush_r+0x1a>
 801ce16:	6a03      	ldr	r3, [r0, #32]
 801ce18:	b90b      	cbnz	r3, 801ce1e <_fflush_r+0x1a>
 801ce1a:	f7fe f993 	bl	801b144 <__sinit>
 801ce1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d0f3      	beq.n	801ce0e <_fflush_r+0xa>
 801ce26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ce28:	07d0      	lsls	r0, r2, #31
 801ce2a:	d404      	bmi.n	801ce36 <_fflush_r+0x32>
 801ce2c:	0599      	lsls	r1, r3, #22
 801ce2e:	d402      	bmi.n	801ce36 <_fflush_r+0x32>
 801ce30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce32:	f7fe fbd2 	bl	801b5da <__retarget_lock_acquire_recursive>
 801ce36:	4628      	mov	r0, r5
 801ce38:	4621      	mov	r1, r4
 801ce3a:	f7ff ff5f 	bl	801ccfc <__sflush_r>
 801ce3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce40:	07da      	lsls	r2, r3, #31
 801ce42:	4605      	mov	r5, r0
 801ce44:	d4e4      	bmi.n	801ce10 <_fflush_r+0xc>
 801ce46:	89a3      	ldrh	r3, [r4, #12]
 801ce48:	059b      	lsls	r3, r3, #22
 801ce4a:	d4e1      	bmi.n	801ce10 <_fflush_r+0xc>
 801ce4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce4e:	f7fe fbc5 	bl	801b5dc <__retarget_lock_release_recursive>
 801ce52:	e7dd      	b.n	801ce10 <_fflush_r+0xc>

0801ce54 <fiprintf>:
 801ce54:	b40e      	push	{r1, r2, r3}
 801ce56:	b503      	push	{r0, r1, lr}
 801ce58:	4601      	mov	r1, r0
 801ce5a:	ab03      	add	r3, sp, #12
 801ce5c:	4805      	ldr	r0, [pc, #20]	@ (801ce74 <fiprintf+0x20>)
 801ce5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce62:	6800      	ldr	r0, [r0, #0]
 801ce64:	9301      	str	r3, [sp, #4]
 801ce66:	f7ff fe31 	bl	801cacc <_vfiprintf_r>
 801ce6a:	b002      	add	sp, #8
 801ce6c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce70:	b003      	add	sp, #12
 801ce72:	4770      	bx	lr
 801ce74:	200000cc 	.word	0x200000cc

0801ce78 <__swhatbuf_r>:
 801ce78:	b570      	push	{r4, r5, r6, lr}
 801ce7a:	460c      	mov	r4, r1
 801ce7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce80:	2900      	cmp	r1, #0
 801ce82:	b096      	sub	sp, #88	@ 0x58
 801ce84:	4615      	mov	r5, r2
 801ce86:	461e      	mov	r6, r3
 801ce88:	da0d      	bge.n	801cea6 <__swhatbuf_r+0x2e>
 801ce8a:	89a3      	ldrh	r3, [r4, #12]
 801ce8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ce90:	f04f 0100 	mov.w	r1, #0
 801ce94:	bf14      	ite	ne
 801ce96:	2340      	movne	r3, #64	@ 0x40
 801ce98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ce9c:	2000      	movs	r0, #0
 801ce9e:	6031      	str	r1, [r6, #0]
 801cea0:	602b      	str	r3, [r5, #0]
 801cea2:	b016      	add	sp, #88	@ 0x58
 801cea4:	bd70      	pop	{r4, r5, r6, pc}
 801cea6:	466a      	mov	r2, sp
 801cea8:	f000 f848 	bl	801cf3c <_fstat_r>
 801ceac:	2800      	cmp	r0, #0
 801ceae:	dbec      	blt.n	801ce8a <__swhatbuf_r+0x12>
 801ceb0:	9901      	ldr	r1, [sp, #4]
 801ceb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ceb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ceba:	4259      	negs	r1, r3
 801cebc:	4159      	adcs	r1, r3
 801cebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cec2:	e7eb      	b.n	801ce9c <__swhatbuf_r+0x24>

0801cec4 <__smakebuf_r>:
 801cec4:	898b      	ldrh	r3, [r1, #12]
 801cec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cec8:	079d      	lsls	r5, r3, #30
 801ceca:	4606      	mov	r6, r0
 801cecc:	460c      	mov	r4, r1
 801cece:	d507      	bpl.n	801cee0 <__smakebuf_r+0x1c>
 801ced0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ced4:	6023      	str	r3, [r4, #0]
 801ced6:	6123      	str	r3, [r4, #16]
 801ced8:	2301      	movs	r3, #1
 801ceda:	6163      	str	r3, [r4, #20]
 801cedc:	b003      	add	sp, #12
 801cede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cee0:	ab01      	add	r3, sp, #4
 801cee2:	466a      	mov	r2, sp
 801cee4:	f7ff ffc8 	bl	801ce78 <__swhatbuf_r>
 801cee8:	9f00      	ldr	r7, [sp, #0]
 801ceea:	4605      	mov	r5, r0
 801ceec:	4639      	mov	r1, r7
 801ceee:	4630      	mov	r0, r6
 801cef0:	f7fd fb02 	bl	801a4f8 <_malloc_r>
 801cef4:	b948      	cbnz	r0, 801cf0a <__smakebuf_r+0x46>
 801cef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cefa:	059a      	lsls	r2, r3, #22
 801cefc:	d4ee      	bmi.n	801cedc <__smakebuf_r+0x18>
 801cefe:	f023 0303 	bic.w	r3, r3, #3
 801cf02:	f043 0302 	orr.w	r3, r3, #2
 801cf06:	81a3      	strh	r3, [r4, #12]
 801cf08:	e7e2      	b.n	801ced0 <__smakebuf_r+0xc>
 801cf0a:	89a3      	ldrh	r3, [r4, #12]
 801cf0c:	6020      	str	r0, [r4, #0]
 801cf0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cf12:	81a3      	strh	r3, [r4, #12]
 801cf14:	9b01      	ldr	r3, [sp, #4]
 801cf16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cf1a:	b15b      	cbz	r3, 801cf34 <__smakebuf_r+0x70>
 801cf1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf20:	4630      	mov	r0, r6
 801cf22:	f000 f81d 	bl	801cf60 <_isatty_r>
 801cf26:	b128      	cbz	r0, 801cf34 <__smakebuf_r+0x70>
 801cf28:	89a3      	ldrh	r3, [r4, #12]
 801cf2a:	f023 0303 	bic.w	r3, r3, #3
 801cf2e:	f043 0301 	orr.w	r3, r3, #1
 801cf32:	81a3      	strh	r3, [r4, #12]
 801cf34:	89a3      	ldrh	r3, [r4, #12]
 801cf36:	431d      	orrs	r5, r3
 801cf38:	81a5      	strh	r5, [r4, #12]
 801cf3a:	e7cf      	b.n	801cedc <__smakebuf_r+0x18>

0801cf3c <_fstat_r>:
 801cf3c:	b538      	push	{r3, r4, r5, lr}
 801cf3e:	4d07      	ldr	r5, [pc, #28]	@ (801cf5c <_fstat_r+0x20>)
 801cf40:	2300      	movs	r3, #0
 801cf42:	4604      	mov	r4, r0
 801cf44:	4608      	mov	r0, r1
 801cf46:	4611      	mov	r1, r2
 801cf48:	602b      	str	r3, [r5, #0]
 801cf4a:	f7e7 fa4b 	bl	80043e4 <_fstat>
 801cf4e:	1c43      	adds	r3, r0, #1
 801cf50:	d102      	bne.n	801cf58 <_fstat_r+0x1c>
 801cf52:	682b      	ldr	r3, [r5, #0]
 801cf54:	b103      	cbz	r3, 801cf58 <_fstat_r+0x1c>
 801cf56:	6023      	str	r3, [r4, #0]
 801cf58:	bd38      	pop	{r3, r4, r5, pc}
 801cf5a:	bf00      	nop
 801cf5c:	20014038 	.word	0x20014038

0801cf60 <_isatty_r>:
 801cf60:	b538      	push	{r3, r4, r5, lr}
 801cf62:	4d06      	ldr	r5, [pc, #24]	@ (801cf7c <_isatty_r+0x1c>)
 801cf64:	2300      	movs	r3, #0
 801cf66:	4604      	mov	r4, r0
 801cf68:	4608      	mov	r0, r1
 801cf6a:	602b      	str	r3, [r5, #0]
 801cf6c:	f7e7 fa4a 	bl	8004404 <_isatty>
 801cf70:	1c43      	adds	r3, r0, #1
 801cf72:	d102      	bne.n	801cf7a <_isatty_r+0x1a>
 801cf74:	682b      	ldr	r3, [r5, #0]
 801cf76:	b103      	cbz	r3, 801cf7a <_isatty_r+0x1a>
 801cf78:	6023      	str	r3, [r4, #0]
 801cf7a:	bd38      	pop	{r3, r4, r5, pc}
 801cf7c:	20014038 	.word	0x20014038

0801cf80 <abort>:
 801cf80:	b508      	push	{r3, lr}
 801cf82:	2006      	movs	r0, #6
 801cf84:	f000 f84a 	bl	801d01c <raise>
 801cf88:	2001      	movs	r0, #1
 801cf8a:	f7e7 f9db 	bl	8004344 <_exit>

0801cf8e <__ascii_mbtowc>:
 801cf8e:	b082      	sub	sp, #8
 801cf90:	b901      	cbnz	r1, 801cf94 <__ascii_mbtowc+0x6>
 801cf92:	a901      	add	r1, sp, #4
 801cf94:	b142      	cbz	r2, 801cfa8 <__ascii_mbtowc+0x1a>
 801cf96:	b14b      	cbz	r3, 801cfac <__ascii_mbtowc+0x1e>
 801cf98:	7813      	ldrb	r3, [r2, #0]
 801cf9a:	600b      	str	r3, [r1, #0]
 801cf9c:	7812      	ldrb	r2, [r2, #0]
 801cf9e:	1e10      	subs	r0, r2, #0
 801cfa0:	bf18      	it	ne
 801cfa2:	2001      	movne	r0, #1
 801cfa4:	b002      	add	sp, #8
 801cfa6:	4770      	bx	lr
 801cfa8:	4610      	mov	r0, r2
 801cfaa:	e7fb      	b.n	801cfa4 <__ascii_mbtowc+0x16>
 801cfac:	f06f 0001 	mvn.w	r0, #1
 801cfb0:	e7f8      	b.n	801cfa4 <__ascii_mbtowc+0x16>

0801cfb2 <__ascii_wctomb>:
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	4608      	mov	r0, r1
 801cfb6:	b141      	cbz	r1, 801cfca <__ascii_wctomb+0x18>
 801cfb8:	2aff      	cmp	r2, #255	@ 0xff
 801cfba:	d904      	bls.n	801cfc6 <__ascii_wctomb+0x14>
 801cfbc:	228a      	movs	r2, #138	@ 0x8a
 801cfbe:	601a      	str	r2, [r3, #0]
 801cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 801cfc4:	4770      	bx	lr
 801cfc6:	700a      	strb	r2, [r1, #0]
 801cfc8:	2001      	movs	r0, #1
 801cfca:	4770      	bx	lr

0801cfcc <_raise_r>:
 801cfcc:	291f      	cmp	r1, #31
 801cfce:	b538      	push	{r3, r4, r5, lr}
 801cfd0:	4605      	mov	r5, r0
 801cfd2:	460c      	mov	r4, r1
 801cfd4:	d904      	bls.n	801cfe0 <_raise_r+0x14>
 801cfd6:	2316      	movs	r3, #22
 801cfd8:	6003      	str	r3, [r0, #0]
 801cfda:	f04f 30ff 	mov.w	r0, #4294967295
 801cfde:	bd38      	pop	{r3, r4, r5, pc}
 801cfe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cfe2:	b112      	cbz	r2, 801cfea <_raise_r+0x1e>
 801cfe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cfe8:	b94b      	cbnz	r3, 801cffe <_raise_r+0x32>
 801cfea:	4628      	mov	r0, r5
 801cfec:	f000 f830 	bl	801d050 <_getpid_r>
 801cff0:	4622      	mov	r2, r4
 801cff2:	4601      	mov	r1, r0
 801cff4:	4628      	mov	r0, r5
 801cff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cffa:	f000 b817 	b.w	801d02c <_kill_r>
 801cffe:	2b01      	cmp	r3, #1
 801d000:	d00a      	beq.n	801d018 <_raise_r+0x4c>
 801d002:	1c59      	adds	r1, r3, #1
 801d004:	d103      	bne.n	801d00e <_raise_r+0x42>
 801d006:	2316      	movs	r3, #22
 801d008:	6003      	str	r3, [r0, #0]
 801d00a:	2001      	movs	r0, #1
 801d00c:	e7e7      	b.n	801cfde <_raise_r+0x12>
 801d00e:	2100      	movs	r1, #0
 801d010:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d014:	4620      	mov	r0, r4
 801d016:	4798      	blx	r3
 801d018:	2000      	movs	r0, #0
 801d01a:	e7e0      	b.n	801cfde <_raise_r+0x12>

0801d01c <raise>:
 801d01c:	4b02      	ldr	r3, [pc, #8]	@ (801d028 <raise+0xc>)
 801d01e:	4601      	mov	r1, r0
 801d020:	6818      	ldr	r0, [r3, #0]
 801d022:	f7ff bfd3 	b.w	801cfcc <_raise_r>
 801d026:	bf00      	nop
 801d028:	200000cc 	.word	0x200000cc

0801d02c <_kill_r>:
 801d02c:	b538      	push	{r3, r4, r5, lr}
 801d02e:	4d07      	ldr	r5, [pc, #28]	@ (801d04c <_kill_r+0x20>)
 801d030:	2300      	movs	r3, #0
 801d032:	4604      	mov	r4, r0
 801d034:	4608      	mov	r0, r1
 801d036:	4611      	mov	r1, r2
 801d038:	602b      	str	r3, [r5, #0]
 801d03a:	f7e7 f973 	bl	8004324 <_kill>
 801d03e:	1c43      	adds	r3, r0, #1
 801d040:	d102      	bne.n	801d048 <_kill_r+0x1c>
 801d042:	682b      	ldr	r3, [r5, #0]
 801d044:	b103      	cbz	r3, 801d048 <_kill_r+0x1c>
 801d046:	6023      	str	r3, [r4, #0]
 801d048:	bd38      	pop	{r3, r4, r5, pc}
 801d04a:	bf00      	nop
 801d04c:	20014038 	.word	0x20014038

0801d050 <_getpid_r>:
 801d050:	f7e7 b960 	b.w	8004314 <_getpid>

0801d054 <_init>:
 801d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d056:	bf00      	nop
 801d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d05a:	bc08      	pop	{r3}
 801d05c:	469e      	mov	lr, r3
 801d05e:	4770      	bx	lr

0801d060 <_fini>:
 801d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d062:	bf00      	nop
 801d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d066:	bc08      	pop	{r3}
 801d068:	469e      	mov	lr, r3
 801d06a:	4770      	bx	lr
