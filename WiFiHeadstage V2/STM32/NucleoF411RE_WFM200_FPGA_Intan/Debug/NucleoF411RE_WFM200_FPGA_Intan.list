
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fe64  0801dfe0  0801dfe0  0001efe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806de44  0806de44  0006f288  2**0
                  CONTENTS
  4 .ARM          00000008  0806de44  0806de44  0006ee44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806de4c  0806de4c  0006f288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806de4c  0806de4c  0006ee4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806de50  0806de50  0006ee50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0806de54  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013d6c  20000288  0806e0dc  0006f288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013ff4  0806e0dc  0006fff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0006f288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d66  00000000  00000000  0006f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009673  00000000  00000000  000a101e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  000aa698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c24  00000000  00000000  000aca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cb7  00000000  00000000  000ae6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b9f6  00000000  00000000  000d636b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7499  00000000  00000000  00111d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c91fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a00c  00000000  00000000  001c9240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001d324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801dfc4 	.word	0x0801dfc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0801dfc4 	.word	0x0801dfc4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <print_configuration>:
    buffer[index] = '\0';

    return buffer;
}

void print_configuration(uint8_t cmd_selector, uint8_t reg_address, uint16_t lsb_value) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	71bb      	strb	r3, [r7, #6]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80bb      	strh	r3, [r7, #4]
    // Determine the command type string
    const char *cmd_type = "Unknown";
 8000eda:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <print_configuration+0xc4>)
 8000edc:	60fb      	str	r3, [r7, #12]
    if ((cmd_selector & 0b11000000) == CONVERT_CMD) {
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <print_configuration+0x26>
        cmd_type = "CONVERT";
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <print_configuration+0xc8>)
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e014      	b.n	8000f18 <print_configuration+0x50>
    } else if ((cmd_selector & 0b11000000) == WRITE_CMD) {
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000ef4:	2b80      	cmp	r3, #128	@ 0x80
 8000ef6:	d102      	bne.n	8000efe <print_configuration+0x36>
        cmd_type = "WRITE";
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <print_configuration+0xcc>)
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e00c      	b.n	8000f18 <print_configuration+0x50>
    } else if ((cmd_selector & 0b11000000) == READ_CMD) {
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f04:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f06:	d102      	bne.n	8000f0e <print_configuration+0x46>
        cmd_type = "READ";
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <print_configuration+0xd0>)
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e004      	b.n	8000f18 <print_configuration+0x50>
    } else if (cmd_selector == CLEAR_CMD) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f12:	d101      	bne.n	8000f18 <print_configuration+0x50>
        cmd_type = "CLEAR";
 8000f14:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <print_configuration+0xd4>)
 8000f16:	60fb      	str	r3, [r7, #12]
    }

    // Determine flag status
    const char *flag_info = "";
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <print_configuration+0xd8>)
 8000f1a:	60bb      	str	r3, [r7, #8]
    if (cmd_selector & 0b00010000) { // Binary equivalent for M_Flag
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <print_configuration+0x62>
        flag_info = "M_FLAG";
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <print_configuration+0xdc>)
 8000f28:	60bb      	str	r3, [r7, #8]
    }
    if (cmd_selector & 0b00100000) { // Binary equivalent for U_Flag
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d015      	beq.n	8000f60 <print_configuration+0x98>
        if (*flag_info) {
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00f      	beq.n	8000f5c <print_configuration+0x94>
            flag_info = strcat(flag_info, " | U_FLAG");
 8000f3c:	68b8      	ldr	r0, [r7, #8]
 8000f3e:	f7ff f9af 	bl	80002a0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4917      	ldr	r1, [pc, #92]	@ (8000fa8 <print_configuration+0xe0>)
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	460b      	mov	r3, r1
 8000f50:	cb03      	ldmia	r3!, {r0, r1}
 8000f52:	6010      	str	r0, [r2, #0]
 8000f54:	6051      	str	r1, [r2, #4]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	8113      	strh	r3, [r2, #8]
 8000f5a:	e001      	b.n	8000f60 <print_configuration+0x98>
        } else {
            flag_info = "U_FLAG";
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <print_configuration+0xe4>)
 8000f5e:	60bb      	str	r3, [r7, #8]
        }
    }
    if (!*flag_info) {
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <print_configuration+0xa4>
        flag_info = "None";
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <print_configuration+0xe8>)
 8000f6a:	60bb      	str	r3, [r7, #8]
    }

    // Single printf statement
    printf("Command: %s | Register: %d | LSB : 0x%04X | Flags: %s \r\n", cmd_type, reg_address, lsb_value, flag_info);
 8000f6c:	79ba      	ldrb	r2, [r7, #6]
 8000f6e:	88b9      	ldrh	r1, [r7, #4]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	460b      	mov	r3, r1
 8000f76:	68f9      	ldr	r1, [r7, #12]
 8000f78:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <print_configuration+0xec>)
 8000f7a:	f01b f8d1 	bl	801c120 <iprintf>
    printf("------------------------------------------------  \r\n");
 8000f7e:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <print_configuration+0xf0>)
 8000f80:	f01b f936 	bl	801c1f0 <puts>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	0801dfe0 	.word	0x0801dfe0
 8000f90:	0801dfe8 	.word	0x0801dfe8
 8000f94:	0801dff0 	.word	0x0801dff0
 8000f98:	0801dff8 	.word	0x0801dff8
 8000f9c:	0801e000 	.word	0x0801e000
 8000fa0:	0801e008 	.word	0x0801e008
 8000fa4:	0801e00c 	.word	0x0801e00c
 8000fa8:	0801e014 	.word	0x0801e014
 8000fac:	0801e020 	.word	0x0801e020
 8000fb0:	0801e028 	.word	0x0801e028
 8000fb4:	0801e030 	.word	0x0801e030
 8000fb8:	0801e06c 	.word	0x0801e06c

08000fbc <INIT_RHS>:


void INIT_RHS(SPI_HandleTypeDef *hspi){
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b0a4      	sub	sp, #144	@ 0x90
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint16_t tx_vector[2];
	uint16_t rx_vector[2];
	uint8_t data_size = 2; //Number of 16bit word to send
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	uint8_t reg_address;
	uint8_t cmd_selector;
	uint16_t lsb_value;

	//SET CS_PIN
	RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 8000fca:	4bde      	ldr	r3, [pc, #888]	@ (8001344 <INIT_RHS+0x388>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	619a      	str	r2, [r3, #24]

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8000fd0:	23c0      	movs	r3, #192	@ 0xc0
 8000fd2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_255;
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8000fe2:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8000ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000ffe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001002:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001006:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800100a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fed6 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001014:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001018:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 800101c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff51 	bl	8000ec8 <print_configuration>

	// Register 32 - Write Disable Stim A
	cmd_selector = WRITE_CMD;
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_32;
 800102c:	2320      	movs	r3, #32
 800102e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001032:	2300      	movs	r3, #0
 8001034:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001038:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001050:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001054:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001058:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800105c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001060:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 feab 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 800106a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800106e:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001072:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff26 	bl	8000ec8 <print_configuration>


	// Register 33 - Write Disable Stim B
	cmd_selector = WRITE_CMD;
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_33;
 8001082:	2321      	movs	r3, #33	@ 0x21
 8001084:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001088:	2300      	movs	r3, #0
 800108a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800108e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 80010a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80010aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80010ae:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80010b2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80010b6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fe80 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80010c0:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80010c4:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80010c8:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fefb 	bl	8000ec8 <print_configuration>



	// Register 38 - Power Up DC-couple low-gain amplifiers
	cmd_selector = WRITE_CMD;
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_38;
 80010d8:	2326      	movs	r3, #38	@ 0x26
 80010da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b1111111111111111;
 80010de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80010e6:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 80010fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001102:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001106:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800110a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800110e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fe54 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001118:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800111c:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001120:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fecf 	bl	8000ec8 <print_configuration>


	// Clear Command
	cmd_selector = CLEAR_CMD;
 800112a:	236a      	movs	r3, #106	@ 0x6a
 800112c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = 0b00000000;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001136:	2300      	movs	r3, #0
 8001138:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800113c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001154:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001158:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800115c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001160:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001164:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fe29 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 800116e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001172:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001176:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fea4 	bl	8000ec8 <print_configuration>

	// Register 0 - Configure the ADC and analog MUX for a total ADC sampling rate of... EXEMPLE : 480 kS/s ( 16 × 30 kS/s)
	cmd_selector = WRITE_CMD;
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t adc_buffer_bias = 32;
 800118c:	2320      	movs	r3, #32
 800118e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	uint8_t mux_bias = 40;
 8001192:	2328      	movs	r3, #40	@ 0x28
 8001194:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	lsb_value = (adc_buffer_bias << 6) | mux_bias;
 8001198:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800119c:	019b      	lsls	r3, r3, #6
 800119e:	b21a      	sxth	r2, r3
 80011a0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80011ae:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21b      	sxth	r3, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 80011c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80011ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80011ce:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80011d2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80011d6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fdf0 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80011e0:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80011e4:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80011e8:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe6b 	bl	8000ec8 <print_configuration>


	// Register 1 - Set all auxiliary digital outputs to a high-impedance state. Set DSP high-pass filter to 4.665 Hz.
	// IN EXEMPLE : 0x051A --> 0bxxx 0 0 1 0 1 0 0 0 1 1010
	cmd_selector = WRITE_CMD;
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t DSPcutoffFreq = 0b1010;
 80011fe:	230a      	movs	r3, #10
 8001200:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	uint8_t DSPenable = 0b1;
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	uint8_t ABSmode = 0b0;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
	uint8_t TWOScomp = 0b0;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	uint8_t weakMISO = 0b0;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t digout1_HiZ = 0b1;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	uint8_t digout1 = 0b0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	uint8_t digout2_HiZ = 0b1;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	uint8_t digout2 = 0b0;
 800122e:	2300      	movs	r3, #0
 8001230:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	uint8_t digoutOD = 0b0;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	lsb_value = (digoutOD << 12) | (digout2 << 11)    | (digout2_HiZ << 10)
 800123a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800123e:	031b      	lsls	r3, r3, #12
 8001240:	b21a      	sxth	r2, r3
 8001242:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001246:	02db      	lsls	r3, r3, #11
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
			  | (digout1 << 9)   | (digout1_HiZ << 8) | (weakMISO << 7)
 800125a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800125e:	025b      	lsls	r3, r3, #9
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21a      	sxth	r2, r3
 8001266:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21a      	sxth	r2, r3
			  | (TWOScomp << 6)  | (ABSmode << 5)  | (DSPenable << 4) | DSPcutoffFreq;
 800127e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001282:	019b      	lsls	r3, r3, #6
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21a      	sxth	r2, r3
 800128a:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
	lsb_value = (digoutOD << 12) | (digout2 << 11)    | (digout2_HiZ << 10)
 80012ac:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80012b0:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 80012c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80012cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80012d0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80012d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012d8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fd6f 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80012e2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80012e6:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80012ea:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fdea 	bl	8000ec8 <print_configuration>


	// Register 2 - Power up DAC used for impedance testing, but disable impedance testing for now.
	// IN EXEMPLE : 0x0040 --> 0bxx 000000 x 1 0 00 xx 0
	cmd_selector = WRITE_CMD;
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t Zcheck_en = 0b0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	uint8_t Zcheck_scale = 0b00;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	uint8_t Zcheck_load = 0b0;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t Zcheck_DAC_power = 0b1;
 8001312:	2301      	movs	r3, #1
 8001314:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	uint8_t Zcheck_select = 0b000000;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	lsb_value = (Zcheck_select << 8)  | (Zcheck_DAC_power << 6)  | (Zcheck_load << 5)  | (Zcheck_scale << 4) | Zcheck_en;
 800131e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800132a:	019b      	lsls	r3, r3, #6
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001336:	015b      	lsls	r3, r3, #5
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21a      	sxth	r2, r3
 800133e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001342:	e001      	b.n	8001348 <INIT_RHS+0x38c>
 8001344:	40020c00 	.word	0x40020c00
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21a      	sxth	r2, r3
 8001350:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800135e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21b      	sxth	r3, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800137a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800137e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001382:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001386:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fd18 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001390:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001394:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001398:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fd93 	bl	8000ec8 <print_configuration>

	// Register 3 - Initialize impedance check DAC to midrange value
	// IN EXEMPLE : 0x0080 --> 0bxxxxxxxx 10000000
	cmd_selector = WRITE_CMD;
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_3;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t Zcheck_DAC = 0b10000000;
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	lsb_value = Zcheck_DAC;
 80013b4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80013b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80013bc:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 80013d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80013d8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80013dc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80013e0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80013e4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fce9 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80013ee:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80013f2:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80013f6:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd64 	bl	8000ec8 <print_configuration>


	// Register 4 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0016 --> 0bxxxxx 00000 010110
	cmd_selector = WRITE_CMD;
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_4;
 8001406:	2304      	movs	r3, #4
 8001408:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t RH1_sel1  = 0b010110;
 800140c:	2316      	movs	r3, #22
 800140e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	uint8_t RH1_sel2  = 0b00000;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	lsb_value = (RH1_sel2 << 6) | RH1_sel1;
 8001418:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	b21a      	sxth	r2, r3
 8001420:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800142e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	b29b      	uxth	r3, r3
 8001442:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 8001446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800144a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 800144e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001452:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001456:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fcb0 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001460:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001464:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001468:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd2b 	bl	8000ec8 <print_configuration>

	// Register 5 - Set upper cutoff frequency of AC-coupled high-gain amplifiers to 7.5 kHz.
	// IN EXEMPLE : 0x0017 --> 0bxxxxx 00000 010111
	cmd_selector = WRITE_CMD;
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_5;
 8001478:	2305      	movs	r3, #5
 800147a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t RH2_sel1  = 0b010111;
 800147e:	2317      	movs	r3, #23
 8001480:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	uint8_t RH2_sel2  = 0b00000;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	lsb_value = (RH2_sel2 << 6) | RH2_sel1;
 800148a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800148e:	019b      	lsls	r3, r3, #6
 8001490:	b21a      	sxth	r2, r3
 8001492:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80014a0:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 80014b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80014bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80014c0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80014c4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80014c8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fc77 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80014d2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80014d6:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80014da:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fcf2 	bl	8000ec8 <print_configuration>

	// Register 6 - Set lower cutoff frequency of AC-coupled high-gain amplifiers to 5 Hz
	// IN EXEMPLE : 0x00A8 --> 0bxx 0 000001 0101000
	cmd_selector = WRITE_CMD;
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_6;
 80014ea:	2306      	movs	r3, #6
 80014ec:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t RL_Asel1  = 0b0101000;
 80014f0:	2328      	movs	r3, #40	@ 0x28
 80014f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t RL_Asel2  = 0b000001;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t RL_Asel3  = 0b0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	lsb_value = (RL_Asel3 << 13) | (RL_Asel2 << 7) | RL_Asel1;
 8001502:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001506:	035b      	lsls	r3, r3, #13
 8001508:	b21a      	sxth	r2, r3
 800150a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800150e:	01db      	lsls	r3, r3, #7
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001524:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21b      	sxth	r3, r3
 8001536:	b29b      	uxth	r3, r3
 8001538:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 800153c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001540:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001544:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001548:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800154c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fc35 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001556:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800155a:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 800155e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fcb0 	bl	8000ec8 <print_configuration>

	// Register 7 - Set alternate lower cutoff frequency (to be used for stimulation artifact recovery) to 1000 Hz
	// IN EXEMPLE : 0x000A --> 0bxx 0 000000 0001010
	cmd_selector = WRITE_CMD;
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_7;
 800156e:	2307      	movs	r3, #7
 8001570:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t RL_Bsel1  = 0b0001010;
 8001574:	230a      	movs	r3, #10
 8001576:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
	uint8_t RL_Bsel2  = 0b000000;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	uint8_t RL_Bsel3  = 0b0;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
	lsb_value = (RL_Bsel3 << 13) | (RL_Bsel2 << 7) | RL_Bsel1;
 8001586:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800158a:	035b      	lsls	r3, r3, #13
 800158c:	b21a      	sxth	r2, r3
 800158e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001592:	01db      	lsls	r3, r3, #7
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
 800159a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80015a8:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 80015c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80015c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80015c8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80015cc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80015d0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fbf3 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80015da:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80015de:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80015e2:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc6e 	bl	8000ec8 <print_configuration>

	// Register 8 - Power up all AC-coupled high-gain amplifiers.
	// IN EXEMPLE : 0xFFFF
	cmd_selector = WRITE_CMD;
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_8;
 80015f2:	2308      	movs	r3, #8
 80015f4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t AC_amp_power  = 0b1111111111111111;
 80015f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015fc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	lsb_value = AC_amp_power;
 8001600:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8001604:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001608:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 8001620:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001624:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001628:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800162c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001630:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fbc3 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 800163a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800163e:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001642:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc3e 	bl	8000ec8 <print_configuration>

	// Register 10 - Turn off fast settle function on all channels. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	cmd_selector |= (1 << U_FLAG);
 8001652:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_10;
 800165e:	230a      	movs	r3, #10
 8001660:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t amp_fast_settle  = 0b0000000000000000;
 8001664:	2300      	movs	r3, #0
 8001666:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	lsb_value = amp_fast_settle;
 800166a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800166e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001672:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21b      	sxth	r3, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 800168a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800168e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001692:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001696:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800169a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fb8e 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80016a4:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80016a8:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80016ac:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc09 	bl	8000ec8 <print_configuration>

	// Register 12 - Set all amplifiers to the lower cutoff frequency set by Register 6. Bits in this register can be set to zero during and immediately following stimulation
	// pulses to rapidly recover from stimulation artifacts. (This command does not take effect until the U flag is asserted since Register 10 is a triggered register.)
	// IN EXEMPLE : 0xFFFF --> 0xFFFF
	cmd_selector = WRITE_CMD;
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	cmd_selector |= (1 << U_FLAG);
 80016bc:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_12;
 80016c8:	230c      	movs	r3, #12
 80016ca:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t amp_fL_select  = 0b1111111111111111;
 80016ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016d2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	lsb_value = amp_fL_select;
 80016d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80016da:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80016de:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 80016f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80016fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80016fe:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001702:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001706:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fb58 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001710:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001714:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001718:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbd3 	bl	8000ec8 <print_configuration>



	// Register 34 - Set up a stimulation step size of 1 µA, giving us a stimulation range of ±255 µA on each channel.
	//IN EXEMPLE : 0x00E2 --> Obx 00 000001 1100010
	cmd_selector = WRITE_CMD;
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_34;
 8001728:	2322      	movs	r3, #34	@ 0x22
 800172a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t step_sel1 = 0b1100010;
 800172e:	2362      	movs	r3, #98	@ 0x62
 8001730:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	uint8_t step_sel2 = 0b000001;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	uint8_t step_sel3 = 0b00;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	lsb_value = (step_sel3 << 13) | (step_sel2 << 7) | (step_sel1);
 8001740:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001744:	035b      	lsls	r3, r3, #13
 8001746:	b21a      	sxth	r2, r3
 8001748:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b21a      	sxth	r2, r3
 8001754:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001758:	b21b      	sxth	r3, r3
 800175a:	4313      	orrs	r3, r2
 800175c:	b21b      	sxth	r3, r3
 800175e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001762:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 800177a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800177e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001782:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001786:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800178a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fb16 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001794:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001798:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 800179c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fb91 	bl	8000ec8 <print_configuration>

	// Register 35 - Set stimulation bias voltages appropriate for a 1 µA step size.
	//IN EXEMPLE : 0x00AA --> Obxxxxxxxx 1010 1010
	cmd_selector = WRITE_CMD;
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_35;
 80017ac:	2323      	movs	r3, #35	@ 0x23
 80017ae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t stim_nbias = 0b1010;
 80017b2:	230a      	movs	r3, #10
 80017b4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	uint8_t stim_Pbias = 0b1010;
 80017b8:	230a      	movs	r3, #10
 80017ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	lsb_value = (stim_Pbias << 4) | (stim_nbias);
 80017be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80017d4:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 80017ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80017f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80017f4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80017f8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80017fc:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fadd 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001806:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800180a:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 800180e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fb58 	bl	8000ec8 <print_configuration>

	// Register 36 - Set stimulation bias voltages appropriate for a 1 µA step size.
	//IN EXEMPLE : 0x0080 --> Obxxxxxxxx 10000000
	cmd_selector = WRITE_CMD;
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_36;
 800181e:	2324      	movs	r3, #36	@ 0x24
 8001820:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t charge_recovery_DAC = 0b10000000;
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	lsb_value = charge_recovery_DAC;
 800182a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800182e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001832:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b21a      	sxth	r2, r3
 800183a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b21b      	sxth	r3, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 800184a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800184e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001852:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001856:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800185a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 faae 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001864:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001868:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 800186c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb29 	bl	8000ec8 <print_configuration>

	// Register 37 - Set charge recovery current limit to 1 nA.
	//IN EXEMPLE : 0x4F00 --> Obx 10 011110 0000000
	cmd_selector = WRITE_CMD;
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_37;
 800187c:	2325      	movs	r3, #37	@ 0x25
 800187e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t Imax_sel1 = 0b0000000;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint8_t Imax_sel2 = 0b011110;
 8001888:	231e      	movs	r3, #30
 800188a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	uint8_t Imax_sel3 = 0b10;
 800188e:	2302      	movs	r3, #2
 8001890:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	lsb_value = (Imax_sel3 << 13) | (Imax_sel2 << 7) | (Imax_sel1);
 8001894:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001898:	035b      	lsls	r3, r3, #13
 800189a:	b21a      	sxth	r2, r3
 800189c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80018a0:	01db      	lsls	r3, r3, #7
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80018b6:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b21a      	sxth	r2, r3
 80018be:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 80018ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80018d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80018d6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80018da:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80018de:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fa6c 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80018e8:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80018ec:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80018f0:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fae7 	bl	8000ec8 <print_configuration>

	// Register 42 - Turn all stimulators off. (This command does not take effect until the U flag is asserted since Register 42 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	cmd_selector |= (1 << U_FLAG);
 8001900:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_42;
 800190c:	232a      	movs	r3, #42	@ 0x2a
 800190e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t stim_on = 0x0000;
 8001912:	2300      	movs	r3, #0
 8001914:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	lsb_value = stim_on;
 8001918:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800191c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001920:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21b      	sxth	r3, r3
 8001932:	b29b      	uxth	r3, r3
 8001934:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 8001938:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800193c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001940:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001944:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001948:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa37 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001952:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001956:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 800195a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fab2 	bl	8000ec8 <print_configuration>

	// Register 44 - Set all stimulators to negative polarity. (This command does not take effect until the U flag is asserted since Register 44 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	cmd_selector |= (1 << U_FLAG);
 800196a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800196e:	f043 0320 	orr.w	r3, r3, #32
 8001972:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_44;
 8001976:	232c      	movs	r3, #44	@ 0x2c
 8001978:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t stim_pol = 0x0000;
 800197c:	2300      	movs	r3, #0
 800197e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	lsb_value = stim_pol;
 8001982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001986:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 800198a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21a      	sxth	r2, r3
 8001992:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 80019a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80019a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 80019aa:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80019ae:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80019b2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fa02 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 80019bc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80019c0:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 80019c4:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fa7d 	bl	8000ec8 <print_configuration>

	// Register 46 - Open all charge recovery switches. (This command does not take effect until the U flag is asserted since Register 46 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	cmd_selector |= (1 << U_FLAG);
 80019d4:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80019d8:	f043 0320 	orr.w	r3, r3, #32
 80019dc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_46;
 80019e0:	232e      	movs	r3, #46	@ 0x2e
 80019e2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t charge_recovery_switch = 0x0000;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	lsb_value = charge_recovery_switch;
 80019ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80019f0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 80019f4:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 8001a0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001a10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001a14:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001a18:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001a1c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f9cd 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001a26:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001a2a:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001a2e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fa48 	bl	8000ec8 <print_configuration>

	// Register 48 - Disable all current-limited charge recovery circuits. (This command does not take effect until the U flag is asserted since Register 48 is a triggered register.)
	//IN EXEMPLE : 0x0000
	cmd_selector = WRITE_CMD;
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	cmd_selector |= (1 << U_FLAG);
 8001a3e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_48;
 8001a4a:	2330      	movs	r3, #48	@ 0x30
 8001a4c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint16_t CL_charge_recovery_enable = 0x0000;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	lsb_value = CL_charge_recovery_enable;
 8001a56:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a5a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001a5e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] =  lsb_value;
 8001a76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001a7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001a7e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001a82:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001a86:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f998 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	print_configuration(cmd_selector, reg_address, lsb_value);
 8001a90:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001a94:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001a98:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa13 	bl	8000ec8 <print_configuration>

	// Write to registers 64-79, setting the negative stimulation current magnitudes to zero and the current
	// trims to the center point. (These commands do not take effect until the U flag is asserted since Registers 64-79 are triggered registers.)
	// Register 64
	//IN EXEMPLE : 0x8000 --> 0b1000000000000000
	uint16_t register_addresses[] = {
 8001aa2:	4bc1      	ldr	r3, [pc, #772]	@ (8001da8 <INIT_RHS+0xdec>)
 8001aa4:	f107 0408 	add.w	r4, r7, #8
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		REGISTER_102, REGISTER_103, REGISTER_104, REGISTER_105, REGISTER_106, REGISTER_107,
		REGISTER_108, REGISTER_109, REGISTER_110, REGISTER_111
	};

	// Define the common values for negative current trim and magnitude
	uint8_t negative_current_trim = 0b10000000;
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	uint8_t negative_current_magnitude = 0b00000000;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ad0:	e03d      	b.n	8001b4e <INIT_RHS+0xb92>
	    reg_address = register_addresses[i];
 8001ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	3390      	adds	r3, #144	@ 0x90
 8001ada:	443b      	add	r3, r7
 8001adc:	f833 3c88 	ldrh.w	r3, [r3, #-136]
 8001ae0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	    cmd_selector = WRITE_CMD | (1 << U_FLAG);
 8001ae4:	23a0      	movs	r3, #160	@ 0xa0
 8001ae6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	    lsb_value = (negative_current_trim << 8) | negative_current_magnitude;
 8001aea:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	    tx_vector[0] = (cmd_selector << 8) | reg_address;
 8001b00:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	    tx_vector[1] = lsb_value;
 8001b18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	    SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001b20:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001b24:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001b28:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f947 	bl	8001dc0 <SPI_SEND_RECV>
	    print_configuration(cmd_selector, reg_address, lsb_value);
 8001b32:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8001b36:	f897 1089 	ldrb.w	r1, [r7, #137]	@ 0x89
 8001b3a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9c2 	bl	8000ec8 <print_configuration>
	for (int i = 0; i < sizeof(register_addresses) / sizeof(register_addresses[0]); i++) {
 8001b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b52:	2b1f      	cmp	r3, #31
 8001b54:	d9bd      	bls.n	8001ad2 <INIT_RHS+0xb16>
	}


	// Register 251 - Read I and N
	cmd_selector = READ_CMD;
 8001b56:	23c0      	movs	r3, #192	@ 0xc0
 8001b58:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_251;
 8001b5c:	23fb      	movs	r3, #251	@ 0xfb
 8001b5e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001b68:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001b88:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001b8c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001b90:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f913 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("------------------------------------------------  \r\n");
//	print_configuration(cmd_selector, reg_address, lsb_value);


	// Register 252 - Read T and A
	cmd_selector = READ_CMD;
 8001b9a:	23c0      	movs	r3, #192	@ 0xc0
 8001b9c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_252;
 8001ba0:	23fc      	movs	r3, #252	@ 0xfc
 8001ba2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001bac:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001bc8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001bcc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001bd0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001bd4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8f1 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
//	print_configuration(cmd_selector, reg_address, lsb_value);

	// Register 251 - Read N and 0
	cmd_selector = READ_CMD;
 8001bde:	23c0      	movs	r3, #192	@ 0xc0
 8001be0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_253;
 8001be4:	23fd      	movs	r3, #253	@ 0xfd
 8001be6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001bf0:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001c08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001c0c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001c10:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001c14:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001c18:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8cf 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	printf("Should be I and N:  %c   %c\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8001c22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	485d      	ldr	r0, [pc, #372]	@ (8001dac <INIT_RHS+0xdf0>)
 8001c36:	f01a fa73 	bl	801c120 <iprintf>
//	print_configuration(cmd_selector, reg_address, lsb_value);

	// Register 254 - Read Number of Channel and Die Revision
	cmd_selector = READ_CMD;
 8001c3a:	23c0      	movs	r3, #192	@ 0xc0
 8001c3c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_254;
 8001c40:	23fe      	movs	r3, #254	@ 0xfe
 8001c42:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001c4c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001c64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001c68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001c6c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001c70:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001c74:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8a1 	bl	8001dc0 <SPI_SEND_RECV>
	//	printf("Receiving Data: 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
	//	printf("------------------------------------------------  \r\n");
	printf("Should be T and A:  %c   %c\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8001c7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4847      	ldr	r0, [pc, #284]	@ (8001db0 <INIT_RHS+0xdf4>)
 8001c92:	f01a fa45 	bl	801c120 <iprintf>
//	print_configuration(cmd_selector, reg_address, lsb_value);


	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8001c96:	23c0      	movs	r3, #192	@ 0xc0
 8001c98:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_255;
 8001c9c:	23ff      	movs	r3, #255	@ 0xff
 8001c9e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001ca8:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001cc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cc4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001cc8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001ccc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001cd0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f873 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	printf("Should be N and 0:  %c   %01X\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8001cda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	4831      	ldr	r0, [pc, #196]	@ (8001db4 <INIT_RHS+0xdf8>)
 8001cee:	f01a fa17 	bl	801c120 <iprintf>
//	print_configuration(cmd_selector, reg_address, lsb_value);

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8001cf2:	23c0      	movs	r3, #192	@ 0xc0
 8001cf4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_255;
 8001cf8:	23ff      	movs	r3, #255	@ 0xff
 8001cfa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001d04:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001d1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001d24:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001d28:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001d2c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f845 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	printf("Die Revision : %d | #channel: %d\r\n", (rx_vector[1] >> 8) & 0xFF, rx_vector[1] & 0xFF);
 8001d36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	481b      	ldr	r0, [pc, #108]	@ (8001db8 <INIT_RHS+0xdfc>)
 8001d4a:	f01a f9e9 	bl	801c120 <iprintf>
//	print_configuration(cmd_selector, reg_address, lsb_value);

	// Register 255 - Read Dummy
	cmd_selector = READ_CMD;
 8001d4e:	23c0      	movs	r3, #192	@ 0xc0
 8001d50:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	reg_address = REGISTER_255;
 8001d54:	23ff      	movs	r3, #255	@ 0xff
 8001d56:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	lsb_value = 0b0000000000000000;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	tx_vector[0] = (cmd_selector << 8) | (reg_address);
 8001d60:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	tx_vector[1] = lsb_value;
 8001d78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	SPI_SEND_RECV(hspi, tx_vector, rx_vector, data_size);
 8001d80:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001d84:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001d88:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f817 	bl	8001dc0 <SPI_SEND_RECV>
//	printf("Receiving Data : 0x%04X%04X | %s\r\n", rx_vector[0], rx_vector[1], binary_string((uint32_t)(rx_vector[0] << 16 | rx_vector[1])));
//	printf("------------------------------------------------  \r\n");
	printf("Char Receiving Data - CHIP ID : %d \r\n", (rx_vector[1] & 0xFF));
 8001d92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4808      	ldr	r0, [pc, #32]	@ (8001dbc <INIT_RHS+0xe00>)
 8001d9c:	f01a f9c0 	bl	801c120 <iprintf>
//	print_configuration(cmd_selector, reg_address, lsb_value);


}
 8001da0:	bf00      	nop
 8001da2:	3790      	adds	r7, #144	@ 0x90
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bdb0      	pop	{r4, r5, r7, pc}
 8001da8:	0801e14c 	.word	0x0801e14c
 8001dac:	0801e0a0 	.word	0x0801e0a0
 8001db0:	0801e0c0 	.word	0x0801e0c0
 8001db4:	0801e0e0 	.word	0x0801e0e0
 8001db8:	0801e100 	.word	0x0801e100
 8001dbc:	0801e124 	.word	0x0801e124

08001dc0 <SPI_SEND_RECV>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t size) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	70fb      	strb	r3, [r7, #3]
    uint16_t Size = size;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	827b      	strh	r3, [r7, #18]

    /* Variable used to alternate Rx and Tx during transfer */
    uint32_t txallowed = 1U;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]

    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d003      	beq.n	8001dea <SPI_SEND_RECV+0x2a>
        hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2205      	movs	r2, #5
 8001de6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }

    /* Set the transaction information */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54
    hspi->pRxBuffPtr = (uint8_t *)rx_ptr;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->RxXferCount = Size;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8a7a      	ldrh	r2, [r7, #18]
 8001dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferSize = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8a7a      	ldrh	r2, [r7, #18]
 8001e00:	879a      	strh	r2, [r3, #60]	@ 0x3c
    hspi->pTxBuffPtr = (uint8_t *)tx_ptr;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->TxXferCount = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8a7a      	ldrh	r2, [r7, #18]
 8001e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->TxXferSize = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8a7a      	ldrh	r2, [r7, #18]
 8001e12:	869a      	strh	r2, [r3, #52]	@ 0x34

    /* Init field not used in handle to zero */
    hspi->RxISR = NULL;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR = NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d007      	beq.n	8001e3e <SPI_SEND_RECV+0x7e>
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e3c:	601a      	str	r2, [r3, #0]
    }

    // RESET CS_PIN
    if (hspi->Instance == SPI3) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a3c      	ldr	r2, [pc, #240]	@ (8001f34 <SPI_SEND_RECV+0x174>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d104      	bne.n	8001e52 <SPI_SEND_RECV+0x92>
    	RHS_SPI_CS_Port->BSRR = (uint32_t)RHS_SPI_CS_Pin << 16U;
 8001e48:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <SPI_SEND_RECV+0x178>)
 8001e4a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	e04d      	b.n	8001eee <SPI_SEND_RECV+0x12e>
    } else if (hspi->Instance == SPI4) {
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a39      	ldr	r2, [pc, #228]	@ (8001f3c <SPI_SEND_RECV+0x17c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d148      	bne.n	8001eee <SPI_SEND_RECV+0x12e>
        RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 8001e5c:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <SPI_SEND_RECV+0x180>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e62:	619a      	str	r2, [r3, #24]
    }

    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8001e64:	e043      	b.n	8001eee <SPI_SEND_RECV+0x12e>
        /* Check TXE flag */
        if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d11b      	bne.n	8001eac <SPI_SEND_RECV+0xec>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d016      	beq.n	8001eac <SPI_SEND_RECV+0xec>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d113      	bne.n	8001eac <SPI_SEND_RECV+0xec>
            hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60da      	str	r2, [r3, #12]
            hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	1c9a      	adds	r2, r3, #2
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	631a      	str	r2, [r3, #48]	@ 0x30
            hspi->TxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
            /* Next Data is a reception (Rx). Tx not allowed */
            txallowed = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
        }

        /* Check RXNE flag */
        if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d119      	bne.n	8001eee <SPI_SEND_RECV+0x12e>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d014      	beq.n	8001eee <SPI_SEND_RECV+0x12e>
            *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	639a      	str	r2, [r3, #56]	@ 0x38
            hspi->RxXferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
            /* Next Data is a Transmission (Tx). Tx is allowed */
            txallowed = 1U;
 8001eea:	2301      	movs	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1b6      	bne.n	8001e66 <SPI_SEND_RECV+0xa6>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1b1      	bne.n	8001e66 <SPI_SEND_RECV+0xa6>
        }
    }

    // SET CS_PIN
    if (hspi->Instance == SPI3){
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <SPI_SEND_RECV+0x174>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d103      	bne.n	8001f14 <SPI_SEND_RECV+0x154>
        RHS_SPI_CS_Port->BSRR = RHS_SPI_CS_Pin;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <SPI_SEND_RECV+0x178>)
 8001f0e:	2204      	movs	r2, #4
 8001f10:	619a      	str	r2, [r3, #24]
    } else if (hspi->Instance == SPI4) {
        RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
    }
}
 8001f12:	e008      	b.n	8001f26 <SPI_SEND_RECV+0x166>
    } else if (hspi->Instance == SPI4) {
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a08      	ldr	r2, [pc, #32]	@ (8001f3c <SPI_SEND_RECV+0x17c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d103      	bne.n	8001f26 <SPI_SEND_RECV+0x166>
        RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <SPI_SEND_RECV+0x180>)
 8001f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40003c00 	.word	0x40003c00
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40013400 	.word	0x40013400
 8001f40:	40020400 	.word	0x40020400

08001f44 <start_app_task>:




void start_app_task(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
//	INIT_TCP();

//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8001f48:	2200      	movs	r2, #0
 8001f4a:	210c      	movs	r1, #12
 8001f4c:	2014      	movs	r0, #20
 8001f4e:	f009 fbc9 	bl	800b6e4 <xQueueGenericCreate>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <start_app_task+0x30>)
 8001f56:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <start_app_task+0x30>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <start_app_task+0x22>
  		printf("booboo Queue \r\n");
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <start_app_task+0x34>)
 8001f62:	f01a f945 	bl	801c1f0 <puts>
//  	}
//  	WIFI_MENU_INIT();
//  	TASK_UDP_TRANSMIT_INIT((void*) spi_to_wifi_queue);
//  	TASK_TCP_TRANSMIT_INIT((void*) spi_to_wifi_queue);

  	TASK_RHD_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 8001f66:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <start_app_task+0x30>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fbd6 	bl	800271c <TASK_RHD_SPI_COMMUNICATION_INIT>

//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200002a4 	.word	0x200002a4
 8001f78:	0801e18c 	.word	0x0801e18c

08001f7c <INIT_RHD>:


void RHD_SPI_COMMUNICATION_task_entry(void const *p_arg);


void INIT_RHD(SPI_HandleTypeDef *hspi){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	uint16_t tx_vector;
	uint16_t rx_vector[1] = {0xFFFF};
 8001f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f88:	82bb      	strh	r3, [r7, #20]
	uint8_t data_size = 1; //Number of Bytes to send
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
	uint8_t reg_address;
	uint8_t reg_value;
	uint16_t formated_value;
	uint8_t bit_shifting = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	const char *rhd_versions[] = {"RHD2132", "RHD2216", "RHD2164"};
 8001f94:	4a07      	ldr	r2, [pc, #28]	@ (8001fb4 <INIT_RHD+0x38>)
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char *rhd_detected = rhd_versions[2];
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <INIT_RHD+0x3c>)
 8001fa6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001faa:	619a      	str	r2, [r3, #24]

	for (int i = 0; i<10 ; i++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb0:	e012      	b.n	8001fd8 <INIT_RHD+0x5c>
 8001fb2:	bf00      	nop
 8001fb4:	0801e344 	.word	0x0801e344
 8001fb8:	40020400 	.word	0x40020400
		// Register 63 for DUMMY READ on BOOT
		tx_vector = 0b1111111100000000;
 8001fbc:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001fc0:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	f107 0214 	add.w	r2, r7, #20
 8001fc8:	f107 0118 	add.w	r1, r7, #24
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fef7 	bl	8001dc0 <SPI_SEND_RECV>
	for (int i = 0; i<10 ; i++){
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	ddee      	ble.n	8001fbc <INIT_RHD+0x40>

	}

	// Register 0 - ADC config.
	reg_address = 0b10000000;
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11011110;
 8001fe2:	23de      	movs	r3, #222	@ 0xde
 8001fe4:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8001fe6:	7fbb      	ldrb	r3, [r7, #30]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	7f7b      	ldrb	r3, [r7, #29]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	f107 0214 	add.w	r2, r7, #20
 8001ffe:	f107 0118 	add.w	r1, r7, #24
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fedc 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 1 - Supply sensor & ADC buffer bias current
	reg_address = 0b10000001;
 8002008:	2381      	movs	r3, #129	@ 0x81
 800200a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00100000; //(ADC BUFFER BIAS AT 32)
 800200c:	2320      	movs	r3, #32
 800200e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002010:	7fbb      	ldrb	r3, [r7, #30]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	b21a      	sxth	r2, r3
 8002016:	7f7b      	ldrb	r3, [r7, #29]
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	f107 0214 	add.w	r2, r7, #20
 8002028:	f107 0118 	add.w	r1, r7, #24
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fec7 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 2 - MUX bias current
	reg_address = 0b10000010;
 8002032:	2382      	movs	r3, #130	@ 0x82
 8002034:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101000; //(MUX BIAS AT 40)
 8002036:	2328      	movs	r3, #40	@ 0x28
 8002038:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800203a:	7fbb      	ldrb	r3, [r7, #30]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21a      	sxth	r2, r3
 8002040:	7f7b      	ldrb	r3, [r7, #29]
 8002042:	b21b      	sxth	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b21b      	sxth	r3, r3
 8002048:	b29b      	uxth	r3, r3
 800204a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800204c:	7ffb      	ldrb	r3, [r7, #31]
 800204e:	f107 0214 	add.w	r2, r7, #20
 8002052:	f107 0118 	add.w	r1, r7, #24
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff feb2 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	reg_address = 0b10000011;
 800205c:	2383      	movs	r3, #131	@ 0x83
 800205e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000010;
 8002060:	2302      	movs	r3, #2
 8002062:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002064:	7fbb      	ldrb	r3, [r7, #30]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b21a      	sxth	r2, r3
 800206a:	7f7b      	ldrb	r3, [r7, #29]
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	b29b      	uxth	r3, r3
 8002074:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	f107 0214 	add.w	r2, r7, #20
 800207c:	f107 0118 	add.w	r1, r7, #24
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fe9d 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 4 - ADC output format & DSP offset removal
	reg_address = 0b10000100;
 8002086:	2384      	movs	r3, #132	@ 0x84
 8002088:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11010110;
 800208a:	23d6      	movs	r3, #214	@ 0xd6
 800208c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800208e:	7fbb      	ldrb	r3, [r7, #30]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b21a      	sxth	r2, r3
 8002094:	7f7b      	ldrb	r3, [r7, #29]
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b21b      	sxth	r3, r3
 800209c:	b29b      	uxth	r3, r3
 800209e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	f107 0214 	add.w	r2, r7, #20
 80020a6:	f107 0118 	add.w	r1, r7, #24
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fe88 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 5 - Impedance check control
	reg_address = 0b10000101;
 80020b0:	2385      	movs	r3, #133	@ 0x85
 80020b2:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80020b4:	2300      	movs	r3, #0
 80020b6:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80020b8:	7fbb      	ldrb	r3, [r7, #30]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	b21a      	sxth	r2, r3
 80020be:	7f7b      	ldrb	r3, [r7, #29]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	f107 0214 	add.w	r2, r7, #20
 80020d0:	f107 0118 	add.w	r1, r7, #24
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fe73 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 6 - Impedance check DAC [unchanged]
	reg_address = 0b10000110;
 80020da:	2386      	movs	r3, #134	@ 0x86
 80020dc:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80020de:	2300      	movs	r3, #0
 80020e0:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80020e2:	7fbb      	ldrb	r3, [r7, #30]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7f7b      	ldrb	r3, [r7, #29]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
 80020f6:	f107 0214 	add.w	r2, r7, #20
 80020fa:	f107 0118 	add.w	r1, r7, #24
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fe5e 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 7 - Impedance check amplifier select [unchanged]
	reg_address = 0b10000111;
 8002104:	2387      	movs	r3, #135	@ 0x87
 8002106:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002108:	2300      	movs	r3, #0
 800210a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800210c:	7fbb      	ldrb	r3, [r7, #30]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b21a      	sxth	r2, r3
 8002112:	7f7b      	ldrb	r3, [r7, #29]
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	b29b      	uxth	r3, r3
 800211c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	f107 0214 	add.w	r2, r7, #20
 8002124:	f107 0118 	add.w	r1, r7, #24
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe49 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	reg_address = 0b10001000;
 800212e:	2388      	movs	r3, #136	@ 0x88
 8002130:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00011110;
 8002132:	231e      	movs	r3, #30
 8002134:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002136:	7fbb      	ldrb	r3, [r7, #30]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	7f7b      	ldrb	r3, [r7, #29]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	b29b      	uxth	r3, r3
 8002146:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	f107 0214 	add.w	r2, r7, #20
 800214e:	f107 0118 	add.w	r1, r7, #24
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fe34 	bl	8001dc0 <SPI_SEND_RECV>

	// 	Reg. 9 -> 5
	reg_address = 0b10001001;
 8002158:	2389      	movs	r3, #137	@ 0x89
 800215a:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000101;
 800215c:	2305      	movs	r3, #5
 800215e:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002160:	7fbb      	ldrb	r3, [r7, #30]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	b21a      	sxth	r2, r3
 8002166:	7f7b      	ldrb	r3, [r7, #29]
 8002168:	b21b      	sxth	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b21b      	sxth	r3, r3
 800216e:	b29b      	uxth	r3, r3
 8002170:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	f107 0214 	add.w	r2, r7, #20
 8002178:	f107 0118 	add.w	r1, r7, #24
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fe1f 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 10 -> 43
	reg_address = 0b10001010;
 8002182:	238a      	movs	r3, #138	@ 0x8a
 8002184:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00101011;
 8002186:	232b      	movs	r3, #43	@ 0x2b
 8002188:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800218a:	7fbb      	ldrb	r3, [r7, #30]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	7f7b      	ldrb	r3, [r7, #29]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b21b      	sxth	r3, r3
 8002198:	b29b      	uxth	r3, r3
 800219a:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800219c:	7ffb      	ldrb	r3, [r7, #31]
 800219e:	f107 0214 	add.w	r2, r7, #20
 80021a2:	f107 0118 	add.w	r1, r7, #24
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fe0a 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 11 -> 6
	reg_address = 0b10001011;
 80021ac:	238b      	movs	r3, #139	@ 0x8b
 80021ae:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000110;
 80021b0:	2306      	movs	r3, #6
 80021b2:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80021b4:	7fbb      	ldrb	r3, [r7, #30]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	7f7b      	ldrb	r3, [r7, #29]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80021c6:	7ffb      	ldrb	r3, [r7, #31]
 80021c8:	f107 0214 	add.w	r2, r7, #20
 80021cc:	f107 0118 	add.w	r1, r7, #24
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fdf5 	bl	8001dc0 <SPI_SEND_RECV>

	// 	Reg. 12 -> 54
	reg_address = 0b10001100;
 80021d6:	238c      	movs	r3, #140	@ 0x8c
 80021d8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00110110;
 80021da:	2336      	movs	r3, #54	@ 0x36
 80021dc:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80021de:	7fbb      	ldrb	r3, [r7, #30]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	7f7b      	ldrb	r3, [r7, #29]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80021f0:	7ffb      	ldrb	r3, [r7, #31]
 80021f2:	f107 0214 	add.w	r2, r7, #20
 80021f6:	f107 0118 	add.w	r1, r7, #24
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fde0 	bl	8001dc0 <SPI_SEND_RECV>

	// 	Reg. 13 -> 0
	reg_address = 0b10001101;
 8002200:	238d      	movs	r3, #141	@ 0x8d
 8002202:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002204:	2300      	movs	r3, #0
 8002206:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002208:	7fbb      	ldrb	r3, [r7, #30]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	7f7b      	ldrb	r3, [r7, #29]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21b      	sxth	r3, r3
 8002216:	b29b      	uxth	r3, r3
 8002218:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	f107 0214 	add.w	r2, r7, #20
 8002220:	f107 0118 	add.w	r1, r7, #24
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fdcb 	bl	8001dc0 <SPI_SEND_RECV>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	reg_address = 0b10001110;
 800222a:	238e      	movs	r3, #142	@ 0x8e
 800222c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b111111111;
 800222e:	23ff      	movs	r3, #255	@ 0xff
 8002230:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002232:	7fbb      	ldrb	r3, [r7, #30]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	b21a      	sxth	r2, r3
 8002238:	7f7b      	ldrb	r3, [r7, #29]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21b      	sxth	r3, r3
 8002240:	b29b      	uxth	r3, r3
 8002242:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	f107 0214 	add.w	r2, r7, #20
 800224a:	f107 0118 	add.w	r1, r7, #24
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fdb6 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 15
	reg_address = 0b10001111;
 8002254:	238f      	movs	r3, #143	@ 0x8f
 8002256:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002258:	23ff      	movs	r3, #255	@ 0xff
 800225a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800225c:	7fbb      	ldrb	r3, [r7, #30]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21a      	sxth	r2, r3
 8002262:	7f7b      	ldrb	r3, [r7, #29]
 8002264:	b21b      	sxth	r3, r3
 8002266:	4313      	orrs	r3, r2
 8002268:	b21b      	sxth	r3, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	f107 0214 	add.w	r2, r7, #20
 8002274:	f107 0118 	add.w	r1, r7, #24
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fda1 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 16
	reg_address = 0b10010000;
 800227e:	2390      	movs	r3, #144	@ 0x90
 8002280:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002282:	23ff      	movs	r3, #255	@ 0xff
 8002284:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002286:	7fbb      	ldrb	r3, [r7, #30]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	7f7b      	ldrb	r3, [r7, #29]
 800228e:	b21b      	sxth	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b21b      	sxth	r3, r3
 8002294:	b29b      	uxth	r3, r3
 8002296:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002298:	7ffb      	ldrb	r3, [r7, #31]
 800229a:	f107 0214 	add.w	r2, r7, #20
 800229e:	f107 0118 	add.w	r1, r7, #24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fd8c 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 17
	reg_address = 0b10010001;
 80022a8:	2391      	movs	r3, #145	@ 0x91
 80022aa:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80022ac:	23ff      	movs	r3, #255	@ 0xff
 80022ae:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80022b0:	7fbb      	ldrb	r3, [r7, #30]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	7f7b      	ldrb	r3, [r7, #29]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21b      	sxth	r3, r3
 80022be:	b29b      	uxth	r3, r3
 80022c0:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	f107 0214 	add.w	r2, r7, #20
 80022c8:	f107 0118 	add.w	r1, r7, #24
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff fd77 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 18
	reg_address = 0b10010010;
 80022d2:	2392      	movs	r3, #146	@ 0x92
 80022d4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 80022d6:	23ff      	movs	r3, #255	@ 0xff
 80022d8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80022da:	7fbb      	ldrb	r3, [r7, #30]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	7f7b      	ldrb	r3, [r7, #29]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80022ec:	7ffb      	ldrb	r3, [r7, #31]
 80022ee:	f107 0214 	add.w	r2, r7, #20
 80022f2:	f107 0118 	add.w	r1, r7, #24
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fd62 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 19
	reg_address = 0b10010011;
 80022fc:	2393      	movs	r3, #147	@ 0x93
 80022fe:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002300:	23ff      	movs	r3, #255	@ 0xff
 8002302:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002304:	7fbb      	ldrb	r3, [r7, #30]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b21a      	sxth	r2, r3
 800230a:	7f7b      	ldrb	r3, [r7, #29]
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	f107 0214 	add.w	r2, r7, #20
 800231c:	f107 0118 	add.w	r1, r7, #24
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fd4d 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 20
	reg_address = 0b10010100;
 8002326:	2394      	movs	r3, #148	@ 0x94
 8002328:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 800232a:	23ff      	movs	r3, #255	@ 0xff
 800232c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800232e:	7fbb      	ldrb	r3, [r7, #30]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b21a      	sxth	r2, r3
 8002334:	7f7b      	ldrb	r3, [r7, #29]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002340:	7ffb      	ldrb	r3, [r7, #31]
 8002342:	f107 0214 	add.w	r2, r7, #20
 8002346:	f107 0118 	add.w	r1, r7, #24
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fd38 	bl	8001dc0 <SPI_SEND_RECV>

	//	Reg. 21
	reg_address = 0b10010101;
 8002350:	2395      	movs	r3, #149	@ 0x95
 8002352:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b11111111;
 8002354:	23ff      	movs	r3, #255	@ 0xff
 8002356:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002358:	7fbb      	ldrb	r3, [r7, #30]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	7f7b      	ldrb	r3, [r7, #29]
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21b      	sxth	r3, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800236a:	7ffb      	ldrb	r3, [r7, #31]
 800236c:	f107 0214 	add.w	r2, r7, #20
 8002370:	f107 0118 	add.w	r1, r7, #24
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fd23 	bl	8001dc0 <SPI_SEND_RECV>

	// Calibrate ADC
	HAL_Delay(100);
 800237a:	2064      	movs	r0, #100	@ 0x64
 800237c:	f003 f8f8 	bl	8005570 <HAL_Delay>
	reg_address = 0b01010101;
 8002380:	2355      	movs	r3, #85	@ 0x55
 8002382:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002384:	2300      	movs	r3, #0
 8002386:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002388:	7fbb      	ldrb	r3, [r7, #30]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	7f7b      	ldrb	r3, [r7, #29]
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21b      	sxth	r3, r3
 8002396:	b29b      	uxth	r3, r3
 8002398:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	f107 0214 	add.w	r2, r7, #20
 80023a0:	f107 0118 	add.w	r1, r7, #24
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fd0b 	bl	8001dc0 <SPI_SEND_RECV>

	for (int i = 0; i<9 ; i++){
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	e017      	b.n	80023e0 <INIT_RHD+0x464>
		// Register 63 for DUMMY READ on BOOT
		reg_address = 0b11111111;
 80023b0:	23ff      	movs	r3, #255	@ 0xff
 80023b2:	77bb      	strb	r3, [r7, #30]
		reg_value = 0b00000000;
 80023b4:	2300      	movs	r3, #0
 80023b6:	777b      	strb	r3, [r7, #29]
		tx_vector = (reg_address << 8) | reg_value;
 80023b8:	7fbb      	ldrb	r3, [r7, #30]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b21a      	sxth	r2, r3
 80023be:	7f7b      	ldrb	r3, [r7, #29]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	833b      	strh	r3, [r7, #24]
		SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
 80023cc:	f107 0214 	add.w	r2, r7, #20
 80023d0:	f107 0118 	add.w	r1, r7, #24
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fcf3 	bl	8001dc0 <SPI_SEND_RECV>
	for (int i = 0; i<9 ; i++){
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	3301      	adds	r3, #1
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	dde4      	ble.n	80023b0 <INIT_RHD+0x434>

	}

	//Read Register 59 MISO MARKER
	reg_address = 0b11111011;
 80023e6:	23fb      	movs	r3, #251	@ 0xfb
 80023e8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80023ea:	2300      	movs	r3, #0
 80023ec:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80023ee:	7fbb      	ldrb	r3, [r7, #30]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	7f7b      	ldrb	r3, [r7, #29]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002400:	7ffb      	ldrb	r3, [r7, #31]
 8002402:	f107 0214 	add.w	r2, r7, #20
 8002406:	f107 0118 	add.w	r1, r7, #24
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fcd8 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002410:	8abb      	ldrh	r3, [r7, #20]
 8002412:	461a      	mov	r2, r3
 8002414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 800241e:	23ff      	movs	r3, #255	@ 0xff
 8002420:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002422:	2300      	movs	r3, #0
 8002424:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002426:	7fbb      	ldrb	r3, [r7, #30]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	7f7b      	ldrb	r3, [r7, #29]
 800242e:	b21b      	sxth	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	b21b      	sxth	r3, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002438:	7ffb      	ldrb	r3, [r7, #31]
 800243a:	f107 0214 	add.w	r2, r7, #20
 800243e:	f107 0118 	add.w	r1, r7, #24
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fcbc 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002448:	8abb      	ldrh	r3, [r7, #20]
 800244a:	461a      	mov	r2, r3
 800244c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	837b      	strh	r3, [r7, #26]

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002456:	23ff      	movs	r3, #255	@ 0xff
 8002458:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800245a:	2300      	movs	r3, #0
 800245c:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800245e:	7fbb      	ldrb	r3, [r7, #30]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	b21a      	sxth	r2, r3
 8002464:	7f7b      	ldrb	r3, [r7, #29]
 8002466:	b21b      	sxth	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b21b      	sxth	r3, r3
 800246c:	b29b      	uxth	r3, r3
 800246e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002470:	7ffb      	ldrb	r3, [r7, #31]
 8002472:	f107 0214 	add.w	r2, r7, #20
 8002476:	f107 0118 	add.w	r1, r7, #24
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fca0 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002480:	8abb      	ldrh	r3, [r7, #20]
 8002482:	461a      	mov	r2, r3
 8002484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - MISO MARKER :   %c - 0x%04X \r\n", (int)formated_value, formated_value);
 800248e:	8b7b      	ldrh	r3, [r7, #26]
 8002490:	8b7a      	ldrh	r2, [r7, #26]
 8002492:	4619      	mov	r1, r3
 8002494:	4899      	ldr	r0, [pc, #612]	@ (80026fc <INIT_RHD+0x780>)
 8002496:	f019 fe43 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 800249a:	4899      	ldr	r0, [pc, #612]	@ (8002700 <INIT_RHD+0x784>)
 800249c:	f019 fea8 	bl	801c1f0 <puts>

	if (formated_value == 0x00){
 80024a0:	8b7b      	ldrh	r3, [r7, #26]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <INIT_RHD+0x53c>
		bit_shifting = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		printf("Shifting Bit to 0 \r\n");
 80024ac:	4895      	ldr	r0, [pc, #596]	@ (8002704 <INIT_RHD+0x788>)
 80024ae:	f019 fe9f 	bl	801c1f0 <puts>
		printf("------------------------------------------------  \r\n");
 80024b2:	4893      	ldr	r0, [pc, #588]	@ (8002700 <INIT_RHD+0x784>)
 80024b4:	f019 fe9c 	bl	801c1f0 <puts>
	}

	//Read Register 40
	reg_address = 0b11101000;
 80024b8:	23e8      	movs	r3, #232	@ 0xe8
 80024ba:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80024bc:	2300      	movs	r3, #0
 80024be:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80024c0:	7fbb      	ldrb	r3, [r7, #30]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	7f7b      	ldrb	r3, [r7, #29]
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	833b      	strh	r3, [r7, #24]
 	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	f107 0214 	add.w	r2, r7, #20
 80024d8:	f107 0118 	add.w	r1, r7, #24
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff fc6f 	bl	8001dc0 <SPI_SEND_RECV>

	//Read Register 41
	reg_address = 0b11101001;
 80024e2:	23e9      	movs	r3, #233	@ 0xe9
 80024e4:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80024e6:	2300      	movs	r3, #0
 80024e8:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80024ea:	7fbb      	ldrb	r3, [r7, #30]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	7f7b      	ldrb	r3, [r7, #29]
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);;
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	f107 0214 	add.w	r2, r7, #20
 8002502:	f107 0118 	add.w	r1, r7, #24
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fc5a 	bl	8001dc0 <SPI_SEND_RECV>

	//Read Register 42
	reg_address = 0b11101010;
 800250c:	23ea      	movs	r3, #234	@ 0xea
 800250e:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002510:	2300      	movs	r3, #0
 8002512:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002514:	7fbb      	ldrb	r3, [r7, #30]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	b21a      	sxth	r2, r3
 800251a:	7f7b      	ldrb	r3, [r7, #29]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21b      	sxth	r3, r3
 8002522:	b29b      	uxth	r3, r3
 8002524:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	f107 0214 	add.w	r2, r7, #20
 800252c:	f107 0118 	add.w	r1, r7, #24
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fc45 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002536:	8abb      	ldrh	r3, [r7, #20]
 8002538:	461a      	mov	r2, r3
 800253a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be I :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002544:	8b7b      	ldrh	r3, [r7, #26]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4619      	mov	r1, r3
 800254a:	8b7b      	ldrh	r3, [r7, #26]
 800254c:	461a      	mov	r2, r3
 800254e:	486e      	ldr	r0, [pc, #440]	@ (8002708 <INIT_RHD+0x78c>)
 8002550:	f019 fde6 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 8002554:	486a      	ldr	r0, [pc, #424]	@ (8002700 <INIT_RHD+0x784>)
 8002556:	f019 fe4b 	bl	801c1f0 <puts>

	//Read Register 43
	reg_address = 0b11101011;
 800255a:	23eb      	movs	r3, #235	@ 0xeb
 800255c:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 800255e:	2300      	movs	r3, #0
 8002560:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 8002562:	7fbb      	ldrb	r3, [r7, #30]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	b21a      	sxth	r2, r3
 8002568:	7f7b      	ldrb	r3, [r7, #29]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21b      	sxth	r3, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002574:	7ffb      	ldrb	r3, [r7, #31]
 8002576:	f107 0214 	add.w	r2, r7, #20
 800257a:	f107 0118 	add.w	r1, r7, #24
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fc1e 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002584:	8abb      	ldrh	r3, [r7, #20]
 8002586:	461a      	mov	r2, r3
 8002588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8002592:	8b7b      	ldrh	r3, [r7, #26]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4619      	mov	r1, r3
 8002598:	8b7b      	ldrh	r3, [r7, #26]
 800259a:	461a      	mov	r2, r3
 800259c:	485b      	ldr	r0, [pc, #364]	@ (800270c <INIT_RHD+0x790>)
 800259e:	f019 fdbf 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 80025a2:	4857      	ldr	r0, [pc, #348]	@ (8002700 <INIT_RHD+0x784>)
 80025a4:	f019 fe24 	bl	801c1f0 <puts>

	//Read Register 44
	reg_address = 0b11101100;
 80025a8:	23ec      	movs	r3, #236	@ 0xec
 80025aa:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80025ac:	2300      	movs	r3, #0
 80025ae:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80025b0:	7fbb      	ldrb	r3, [r7, #30]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	7f7b      	ldrb	r3, [r7, #29]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b21b      	sxth	r3, r3
 80025be:	b29b      	uxth	r3, r3
 80025c0:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	f107 0214 	add.w	r2, r7, #20
 80025c8:	f107 0118 	add.w	r1, r7, #24
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fbf7 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80025d2:	8abb      	ldrh	r3, [r7, #20]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be T :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 80025e0:	8b7b      	ldrh	r3, [r7, #26]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	4619      	mov	r1, r3
 80025e6:	8b7b      	ldrh	r3, [r7, #26]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4849      	ldr	r0, [pc, #292]	@ (8002710 <INIT_RHD+0x794>)
 80025ec:	f019 fd98 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 80025f0:	4843      	ldr	r0, [pc, #268]	@ (8002700 <INIT_RHD+0x784>)
 80025f2:	f019 fdfd 	bl	801c1f0 <puts>


	//Read Register 63
	reg_address = 0b11111111;
 80025f6:	23ff      	movs	r3, #255	@ 0xff
 80025f8:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 80025fa:	2300      	movs	r3, #0
 80025fc:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 80025fe:	7fbb      	ldrb	r3, [r7, #30]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b21a      	sxth	r2, r3
 8002604:	7f7b      	ldrb	r3, [r7, #29]
 8002606:	b21b      	sxth	r3, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	b21b      	sxth	r3, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 8002610:	7ffb      	ldrb	r3, [r7, #31]
 8002612:	f107 0214 	add.w	r2, r7, #20
 8002616:	f107 0118 	add.w	r1, r7, #24
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fbd0 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 8002620:	8abb      	ldrh	r3, [r7, #20]
 8002622:	461a      	mov	r2, r3
 8002624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be A :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 800262e:	8b7b      	ldrh	r3, [r7, #26]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	8b7b      	ldrh	r3, [r7, #26]
 8002636:	461a      	mov	r2, r3
 8002638:	4836      	ldr	r0, [pc, #216]	@ (8002714 <INIT_RHD+0x798>)
 800263a:	f019 fd71 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 800263e:	4830      	ldr	r0, [pc, #192]	@ (8002700 <INIT_RHD+0x784>)
 8002640:	f019 fdd6 	bl	801c1f0 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002644:	23ff      	movs	r3, #255	@ 0xff
 8002646:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002648:	2300      	movs	r3, #0
 800264a:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800264c:	7fbb      	ldrb	r3, [r7, #30]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	b21a      	sxth	r2, r3
 8002652:	7f7b      	ldrb	r3, [r7, #29]
 8002654:	b21b      	sxth	r3, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	b21b      	sxth	r3, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 800265e:	7ffb      	ldrb	r3, [r7, #31]
 8002660:	f107 0214 	add.w	r2, r7, #20
 8002664:	f107 0118 	add.w	r1, r7, #24
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fba9 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 800266e:	8abb      	ldrh	r3, [r7, #20]
 8002670:	461a      	mov	r2, r3
 8002672:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	837b      	strh	r3, [r7, #26]
	printf("Char Receiving Data - Should be N :   %c - 0x%04X \r\n", (char)formated_value, formated_value);
 800267c:	8b7b      	ldrh	r3, [r7, #26]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	8b7b      	ldrh	r3, [r7, #26]
 8002684:	461a      	mov	r2, r3
 8002686:	4821      	ldr	r0, [pc, #132]	@ (800270c <INIT_RHD+0x790>)
 8002688:	f019 fd4a 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 800268c:	481c      	ldr	r0, [pc, #112]	@ (8002700 <INIT_RHD+0x784>)
 800268e:	f019 fdaf 	bl	801c1f0 <puts>

	//Send dummy CMD to RECV N-2 MISO
	reg_address = 0b11111111;
 8002692:	23ff      	movs	r3, #255	@ 0xff
 8002694:	77bb      	strb	r3, [r7, #30]
	reg_value = 0b00000000;
 8002696:	2300      	movs	r3, #0
 8002698:	777b      	strb	r3, [r7, #29]
	tx_vector = (reg_address << 8) | reg_value;
 800269a:	7fbb      	ldrb	r3, [r7, #30]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21a      	sxth	r2, r3
 80026a0:	7f7b      	ldrb	r3, [r7, #29]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	833b      	strh	r3, [r7, #24]
	SPI_SEND_RECV(hspi, &tx_vector, rx_vector, data_size);
 80026ac:	7ffb      	ldrb	r3, [r7, #31]
 80026ae:	f107 0214 	add.w	r2, r7, #20
 80026b2:	f107 0118 	add.w	r1, r7, #24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fb82 	bl	8001dc0 <SPI_SEND_RECV>
	formated_value = rx_vector[0] << bit_shifting;
 80026bc:	8abb      	ldrh	r3, [r7, #20]
 80026be:	461a      	mov	r2, r3
 80026c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	837b      	strh	r3, [r7, #26]

	if (formated_value == 0x01){
 80026ca:	8b7b      	ldrh	r3, [r7, #26]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <INIT_RHD+0x75a>
		rhd_detected = rhd_versions[0];
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d4:	e004      	b.n	80026e0 <INIT_RHD+0x764>
	}
	else if (formated_value == 0x02){
 80026d6:	8b7b      	ldrh	r3, [r7, #26]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d101      	bne.n	80026e0 <INIT_RHD+0x764>
		rhd_detected = rhd_versions[1];
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	printf("Char Receiving Data - CHIP ID : %s - 0x%04X \r\n", rhd_detected, formated_value);
 80026e0:	8b7b      	ldrh	r3, [r7, #26]
 80026e2:	461a      	mov	r2, r3
 80026e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e6:	480c      	ldr	r0, [pc, #48]	@ (8002718 <INIT_RHD+0x79c>)
 80026e8:	f019 fd1a 	bl	801c120 <iprintf>
	printf("------------------------------------------------  \r\n");
 80026ec:	4804      	ldr	r0, [pc, #16]	@ (8002700 <INIT_RHD+0x784>)
 80026ee:	f019 fd7f 	bl	801c1f0 <puts>

 }
 80026f2:	bf00      	nop
 80026f4:	3730      	adds	r7, #48	@ 0x30
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	0801e19c 	.word	0x0801e19c
 8002700:	0801e1d4 	.word	0x0801e1d4
 8002704:	0801e208 	.word	0x0801e208
 8002708:	0801e21c 	.word	0x0801e21c
 800270c:	0801e254 	.word	0x0801e254
 8002710:	0801e28c 	.word	0x0801e28c
 8002714:	0801e2c4 	.word	0x0801e2c4
 8002718:	0801e2fc 	.word	0x0801e2fc

0800271c <TASK_RHD_SPI_COMMUNICATION_INIT>:




void TASK_RHD_SPI_COMMUNICATION_INIT (void *arg) {
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	printf("Starting RHD Task \r\n");
 8002724:	480d      	ldr	r0, [pc, #52]	@ (800275c <TASK_RHD_SPI_COMMUNICATION_INIT+0x40>)
 8002726:	f019 fd63 	bl	801c1f0 <puts>
	osThreadDef(RHD64_SPI_handle, RHD_SPI_COMMUNICATION_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*10);
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <TASK_RHD_SPI_COMMUNICATION_INIT+0x44>)
 800272c:	f107 040c 	add.w	r4, r7, #12
 8002730:	461d      	mov	r5, r3
 8002732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(RHD64_SPI_handle), (void *)arg) == NULL){
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4618      	mov	r0, r3
 8002742:	f008 fb4c 	bl	800adde <osThreadCreate>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <TASK_RHD_SPI_COMMUNICATION_INIT+0x36>
		printf("Booboo created SPI task \r\n");
 800274c:	4805      	ldr	r0, [pc, #20]	@ (8002764 <TASK_RHD_SPI_COMMUNICATION_INIT+0x48>)
 800274e:	f019 fd4f 	bl	801c1f0 <puts>
	}
}
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
 800275a:	bf00      	nop
 800275c:	0801e350 	.word	0x0801e350
 8002760:	0801e394 	.word	0x0801e394
 8002764:	0801e364 	.word	0x0801e364

08002768 <RHD_SPI_COMMUNICATION_task_entry>:

void RHD_SPI_COMMUNICATION_task_entry(void const *arg){
 8002768:	b580      	push	{r7, lr}
 800276a:	b0ac      	sub	sp, #176	@ 0xb0
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	uint8_t DATA_CH0[2];
	uint8_t DATA_CH32[2];

	uint16_t UDP_vector[32][2];

	uint16_t counter = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	spi_to_udp_t spi_message = {0};
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]

	SPI_HandleTypeDef *hspi;

	printf("Init RHD \r\n");
 8002782:	482a      	ldr	r0, [pc, #168]	@ (800282c <RHD_SPI_COMMUNICATION_task_entry+0xc4>)
 8002784:	f019 fd34 	bl	801c1f0 <puts>
	hspi = &hspi4;
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <RHD_SPI_COMMUNICATION_task_entry+0xc8>)
 800278a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	//Activate SPI
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800278e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a0:	601a      	str	r2, [r3, #0]
	//Activating the 16bit data mode
	hspi->Instance->CR1 |= SPI_CR1_DFF;
 80027a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b4:	601a      	str	r2, [r3, #0]
	INIT_RHD(hspi);
 80027b6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80027ba:	f7ff fbdf 	bl	8001f7c <INIT_RHD>


	printf("Init RHS \r\n");
 80027be:	481d      	ldr	r0, [pc, #116]	@ (8002834 <RHD_SPI_COMMUNICATION_task_entry+0xcc>)
 80027c0:	f019 fd16 	bl	801c1f0 <puts>
	hspi = &hspi3;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <RHD_SPI_COMMUNICATION_task_entry+0xd0>)
 80027c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80027ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027dc:	601a      	str	r2, [r3, #0]
	hspi->Instance->CR1 |= SPI_CR1_DFF;
 80027de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f0:	601a      	str	r2, [r3, #0]
	INIT_RHS(hspi);
 80027f2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80027f6:	f7fe fbe1 	bl	8000fbc <INIT_RHS>
//		FULL_TASK_SCOPE_Port->BSRR = FULL_TASK_SCOPE_Pin;
//		//SET SPI_TASK_Scope_Pin
//		SPI_TASK_SCOPE_Port->BSRR = SPI_TASK_SCOPE_Pin;
//
//		spi_message.buffer = (void*)transmit_vector;
		if (spi_flag){
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <RHD_SPI_COMMUNICATION_task_entry+0xd4>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <RHD_SPI_COMMUNICATION_task_entry+0xbc>
			if (arg != 0){
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f8      	beq.n	80027fa <RHD_SPI_COMMUNICATION_task_entry+0x92>

				if(xQueueSend((QueueHandle_t)arg,
 8002808:	f107 0108 	add.w	r1, r7, #8
 800280c:	2300      	movs	r3, #0
 800280e:	220a      	movs	r2, #10
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f008 ffef 	bl	800b7f4 <xQueueGenericSend>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d0ee      	beq.n	80027fa <RHD_SPI_COMMUNICATION_task_entry+0x92>
							 (void *)&spi_message,
							 (TickType_t)10) != pdPASS)
				{
					printf("problem in queueSend \r\n");
 800281c:	4808      	ldr	r0, [pc, #32]	@ (8002840 <RHD_SPI_COMMUNICATION_task_entry+0xd8>)
 800281e:	f019 fce7 	bl	801c1f0 <puts>
 8002822:	e7ea      	b.n	80027fa <RHD_SPI_COMMUNICATION_task_entry+0x92>
				//RESET SPI_TASK_Scope_Pin
//				SPI_TASK_SCOPE_Port->BSRR = (uint32_t)SPI_TASK_SCOPE_Pin << 16U;
			}
		}
		else{
			vTaskDelay(1);
 8002824:	2001      	movs	r0, #1
 8002826:	f00a f81d 	bl	800c864 <vTaskDelay>
		if (spi_flag){
 800282a:	e7e6      	b.n	80027fa <RHD_SPI_COMMUNICATION_task_entry+0x92>
 800282c:	0801e3a8 	.word	0x0801e3a8
 8002830:	20000974 	.word	0x20000974
 8002834:	0801e3b4 	.word	0x0801e3b4
 8002838:	2000091c 	.word	0x2000091c
 800283c:	200002a8 	.word	0x200002a8
 8002840:	0801e3c0 	.word	0x0801e3c0

08002844 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	3301      	adds	r3, #1
 8002852:	4a11      	ldr	r2, [pc, #68]	@ (8002898 <from_hex+0x54>)
 8002854:	4413      	add	r3, r2
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <from_hex+0x24>
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	3b30      	subs	r3, #48	@ 0x30
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e011      	b.n	800288c <from_hex+0x48>
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	3301      	adds	r3, #1
 8002870:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <from_hex+0x54>)
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <from_hex+0x40>
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	3320      	adds	r3, #32
 8002882:	e000      	b.n	8002886 <from_hex+0x42>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3b57      	subs	r3, #87	@ 0x57
 800288a:	b2db      	uxtb	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	0806daeb 	.word	0x0806daeb

0800289c <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b095      	sub	sp, #84	@ 0x54
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int i = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (strlen(str) > 64) {
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fd fcf7 	bl	80002a0 <strlen>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d947      	bls.n	8002948 <url_decode+0xac>
    return SL_STATUS_FAIL;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e056      	b.n	800296a <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 80028bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b25      	cmp	r3, #37	@ 0x25
 80028c2:	d128      	bne.n	8002916 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 80028c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c6:	3301      	adds	r3, #1
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d039      	beq.n	8002942 <url_decode+0xa6>
 80028ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028d0:	3302      	adds	r3, #2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d034      	beq.n	8002942 <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 80028d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028da:	3301      	adds	r3, #1
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ffb0 	bl	8002844 <from_hex>
 80028e4:	4603      	mov	r3, r0
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	b25c      	sxtb	r4, r3
 80028ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028ec:	3302      	adds	r3, #2
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ffa7 	bl	8002844 <from_hex>
 80028f6:	4603      	mov	r3, r0
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4323      	orrs	r3, r4
 80028fc:	b259      	sxtb	r1, r3
 80028fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002904:	b2ca      	uxtb	r2, r1
 8002906:	3350      	adds	r3, #80	@ 0x50
 8002908:	443b      	add	r3, r7
 800290a:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 800290e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002910:	3302      	adds	r3, #2
 8002912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002914:	e015      	b.n	8002942 <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 8002916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b2b      	cmp	r3, #43	@ 0x2b
 800291c:	d108      	bne.n	8002930 <url_decode+0x94>
      rstr[i++]  = ' ';
 800291e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002924:	3350      	adds	r3, #80	@ 0x50
 8002926:	443b      	add	r3, r7
 8002928:	2220      	movs	r2, #32
 800292a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800292e:	e008      	b.n	8002942 <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 8002930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	3350      	adds	r3, #80	@ 0x50
 800293c:	443b      	add	r3, r7
 800293e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 8002942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002944:	3301      	adds	r3, #1
 8002946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (*pstr) {
 8002948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1b5      	bne.n	80028bc <url_decode+0x20>
  }
  rstr[i] = '\0';
 8002950:	f107 0208 	add.w	r2, r7, #8
 8002954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002956:	4413      	add	r3, r2
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 800295c:	f107 0308 	add.w	r3, r7, #8
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f019 fdf3 	bl	801c54e <strcpy>
  return SL_STATUS_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3754      	adds	r7, #84	@ 0x54
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
	...

08002974 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8002974:	b5b0      	push	{r4, r5, r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <wifi_autoconnexion_init+0x28>)
 800297c:	1d3c      	adds	r4, r7, #4
 800297e:	461d      	mov	r5, r3
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f008 fa26 	bl	800adde <osThreadCreate>

}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bdb0      	pop	{r4, r5, r7, pc}
 800299a:	bf00      	nop
 800299c:	0801e3ec 	.word	0x0801e3ec

080029a0 <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b097      	sub	sp, #92	@ 0x5c
 80029a4:	af08      	add	r7, sp, #32
 80029a6:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 80029a8:	2303      	movs	r3, #3
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 80029ac:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <wifi_station_connect_task_entry+0x170>)
 80029ae:	f107 0418 	add.w	r4, r7, #24
 80029b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 80029b8:	4b56      	ldr	r3, [pc, #344]	@ (8002b14 <wifi_station_connect_task_entry+0x174>)
 80029ba:	f107 0408 	add.w	r4, r7, #8
 80029be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30

  if (num_params == 3) {
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	f040 8096 	bne.w	8002b00 <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4950      	ldr	r1, [pc, #320]	@ (8002b18 <wifi_station_connect_task_entry+0x178>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fc01 	bl	80001e0 <strcmp>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d114      	bne.n	8002a0e <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff58 	bl	800289c <url_decode>
      ssid_length = strlen(pc_value[0]);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fc56 	bl	80002a0 <strlen>
 80029f4:	4603      	mov	r3, r0
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
      memset(wlan_ssid, 0, 32);
 80029f8:	2220      	movs	r2, #32
 80029fa:	2100      	movs	r1, #0
 80029fc:	4847      	ldr	r0, [pc, #284]	@ (8002b1c <wifi_station_connect_task_entry+0x17c>)
 80029fe:	f019 fcf1 	bl	801c3e4 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a06:	4619      	mov	r1, r3
 8002a08:	4844      	ldr	r0, [pc, #272]	@ (8002b1c <wifi_station_connect_task_entry+0x17c>)
 8002a0a:	f019 fd05 	bl	801c418 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	4943      	ldr	r1, [pc, #268]	@ (8002b20 <wifi_station_connect_task_entry+0x180>)
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fbe4 	bl	80001e0 <strcmp>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d114      	bne.n	8002a48 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff3b 	bl	800289c <url_decode>
      passkey_length = strlen(pc_value[1]);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fc39 	bl	80002a0 <strlen>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	633b      	str	r3, [r7, #48]	@ 0x30
      memset(wlan_passkey, 0, 64);
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	2100      	movs	r1, #0
 8002a36:	483b      	ldr	r0, [pc, #236]	@ (8002b24 <wifi_station_connect_task_entry+0x184>)
 8002a38:	f019 fcd4 	bl	801c3e4 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a40:	4619      	mov	r1, r3
 8002a42:	4838      	ldr	r0, [pc, #224]	@ (8002b24 <wifi_station_connect_task_entry+0x184>)
 8002a44:	f019 fce8 	bl	801c418 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	4937      	ldr	r1, [pc, #220]	@ (8002b28 <wifi_station_connect_task_entry+0x188>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fbc7 	bl	80001e0 <strcmp>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d12e      	bne.n	8002ab6 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff1e 	bl	800289c <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4932      	ldr	r1, [pc, #200]	@ (8002b2c <wifi_station_connect_task_entry+0x18c>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fbbb 	bl	80001e0 <strcmp>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <wifi_station_connect_task_entry+0xe0>
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	492f      	ldr	r1, [pc, #188]	@ (8002b30 <wifi_station_connect_task_entry+0x190>)
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fbb3 	bl	80001e0 <strcmp>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8002a80:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <wifi_station_connect_task_entry+0x194>)
 8002a82:	2202      	movs	r2, #2
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e016      	b.n	8002ab6 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	492b      	ldr	r1, [pc, #172]	@ (8002b38 <wifi_station_connect_task_entry+0x198>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fba7 	bl	80001e0 <strcmp>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 8002a98:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <wifi_station_connect_task_entry+0x194>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e00a      	b.n	8002ab6 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4926      	ldr	r1, [pc, #152]	@ (8002b3c <wifi_station_connect_task_entry+0x19c>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fb9b 	bl	80001e0 <strcmp>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8002ab0:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <wifi_station_connect_task_entry+0x194>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <wifi_station_connect_task_entry+0x1a0>)
 8002ab8:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d120      	bne.n	8002b06 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8002ac4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <wifi_station_connect_task_entry+0x194>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002acc:	b292      	uxth	r2, r2
 8002ace:	2000      	movs	r0, #0
 8002ad0:	9006      	str	r0, [sp, #24]
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	9005      	str	r0, [sp, #20]
 8002ad6:	9204      	str	r2, [sp, #16]
 8002ad8:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <wifi_station_connect_task_entry+0x184>)
 8002ada:	9203      	str	r2, [sp, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	9202      	str	r2, [sp, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	9201      	str	r2, [sp, #4]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2200      	movs	r2, #0
 8002aea:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <wifi_station_connect_task_entry+0x17c>)
 8002aec:	f006 f91c 	bl	8008d28 <sl_wfx_send_join_command>
 8002af0:	62b8      	str	r0, [r7, #40]	@ 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d006      	beq.n	8002b06 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8002af8:	4812      	ldr	r0, [pc, #72]	@ (8002b44 <wifi_station_connect_task_entry+0x1a4>)
 8002afa:	f019 fb79 	bl	801c1f0 <puts>
 8002afe:	e002      	b.n	8002b06 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8002b00:	4811      	ldr	r0, [pc, #68]	@ (8002b48 <wifi_station_connect_task_entry+0x1a8>)
 8002b02:	f019 fb75 	bl	801c1f0 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f008 f990 	bl	800ae2c <osThreadTerminate>
 8002b0c:	e7fb      	b.n	8002b06 <wifi_station_connect_task_entry+0x166>
 8002b0e:	bf00      	nop
 8002b10:	0801e468 	.word	0x0801e468
 8002b14:	0801e494 	.word	0x0801e494
 8002b18:	0801e400 	.word	0x0801e400
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	0801e408 	.word	0x0801e408
 8002b24:	20000024 	.word	0x20000024
 8002b28:	0801e40c 	.word	0x0801e40c
 8002b2c:	0801e414 	.word	0x0801e414
 8002b30:	0801e41c 	.word	0x0801e41c
 8002b34:	20000065 	.word	0x20000065
 8002b38:	0801e420 	.word	0x0801e420
 8002b3c:	0801e424 	.word	0x0801e424
 8002b40:	200003ac 	.word	0x200003ac
 8002b44:	0801e42c 	.word	0x0801e42c
 8002b48:	0801e448 	.word	0x0801e448

08002b4c <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <dhcpclient_set_link_state+0x28>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8002b60:	e002      	b.n	8002b68 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8002b62:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <dhcpclient_set_link_state+0x28>)
 8002b64:	2205      	movs	r2, #5
 8002b66:	701a      	strb	r2, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	200005d0 	.word	0x200005d0

08002b78 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8002b84:	4b9a      	ldr	r3, [pc, #616]	@ (8002df0 <dhcpclient_start+0x278>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	f000 811f 	beq.w	8002dce <dhcpclient_start+0x256>
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	f300 8125 	bgt.w	8002de0 <dhcpclient_start+0x268>
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <dhcpclient_start+0x28>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d012      	beq.n	8002bc4 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 8002b9e:	e11f      	b.n	8002de0 <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8002bb2:	4a90      	ldr	r2, [pc, #576]	@ (8002df4 <dhcpclient_start+0x27c>)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	69f8      	ldr	r0, [r7, #28]
 8002bb8:	f00b fd44 	bl	800e644 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002df0 <dhcpclient_start+0x278>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
      break;
 8002bc2:	e110      	b.n	8002de6 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8002bc4:	69f8      	ldr	r0, [r7, #28]
 8002bc6:	f015 fec1 	bl	801894c <dhcp_supplied_address>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d018      	beq.n	8002c02 <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8002bd0:	4b87      	ldr	r3, [pc, #540]	@ (8002df0 <dhcpclient_start+0x278>)
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <dhcpclient_start+0x280>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8002bda:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 8002bdc:	4b86      	ldr	r3, [pc, #536]	@ (8002df8 <dhcpclient_start+0x280>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8002be2:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8002be4:	4b84      	ldr	r3, [pc, #528]	@ (8002df8 <dhcpclient_start+0x280>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8002bea:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 8002bec:	4b82      	ldr	r3, [pc, #520]	@ (8002df8 <dhcpclient_start+0x280>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4881      	ldr	r0, [pc, #516]	@ (8002dfc <dhcpclient_start+0x284>)
 8002bf8:	f019 fa92 	bl	801c120 <iprintf>
          start_app_task();
 8002bfc:	f7ff f9a2 	bl	8001f44 <start_app_task>
      break;
 8002c00:	e0f0      	b.n	8002de4 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	799b      	ldrb	r3, [r3, #6]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	f240 80e9 	bls.w	8002de4 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8002c12:	4b77      	ldr	r3, [pc, #476]	@ (8002df0 <dhcpclient_start+0x278>)
 8002c14:	2204      	movs	r2, #4
 8002c16:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4979      	ldr	r1, [pc, #484]	@ (8002e00 <dhcpclient_start+0x288>)
 8002c1c:	69f8      	ldr	r0, [r7, #28]
 8002c1e:	f00b fd11 	bl	800e644 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8002c22:	4b78      	ldr	r3, [pc, #480]	@ (8002e04 <dhcpclient_start+0x28c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	061a      	lsls	r2, r3, #24
 8002c28:	4b77      	ldr	r3, [pc, #476]	@ (8002e08 <dhcpclient_start+0x290>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	4b76      	ldr	r3, [pc, #472]	@ (8002e0c <dhcpclient_start+0x294>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4313      	orrs	r3, r2
 8002c38:	4a75      	ldr	r2, [pc, #468]	@ (8002e10 <dhcpclient_start+0x298>)
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	061a      	lsls	r2, r3, #24
 8002c40:	4b70      	ldr	r3, [pc, #448]	@ (8002e04 <dhcpclient_start+0x28c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	0619      	lsls	r1, r3, #24
 8002c46:	4b70      	ldr	r3, [pc, #448]	@ (8002e08 <dhcpclient_start+0x290>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	4319      	orrs	r1, r3
 8002c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002e0c <dhcpclient_start+0x294>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	430b      	orrs	r3, r1
 8002c56:	496e      	ldr	r1, [pc, #440]	@ (8002e10 <dhcpclient_start+0x298>)
 8002c58:	7809      	ldrb	r1, [r1, #0]
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c62:	431a      	orrs	r2, r3
 8002c64:	4b67      	ldr	r3, [pc, #412]	@ (8002e04 <dhcpclient_start+0x28c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	0619      	lsls	r1, r3, #24
 8002c6a:	4b67      	ldr	r3, [pc, #412]	@ (8002e08 <dhcpclient_start+0x290>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	4319      	orrs	r1, r3
 8002c72:	4b66      	ldr	r3, [pc, #408]	@ (8002e0c <dhcpclient_start+0x294>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	4965      	ldr	r1, [pc, #404]	@ (8002e10 <dhcpclient_start+0x298>)
 8002c7c:	7809      	ldrb	r1, [r1, #0]
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002c86:	431a      	orrs	r2, r3
 8002c88:	4b5e      	ldr	r3, [pc, #376]	@ (8002e04 <dhcpclient_start+0x28c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	0619      	lsls	r1, r3, #24
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002e08 <dhcpclient_start+0x290>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	4319      	orrs	r1, r3
 8002c96:	4b5d      	ldr	r3, [pc, #372]	@ (8002e0c <dhcpclient_start+0x294>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	495c      	ldr	r1, [pc, #368]	@ (8002e10 <dhcpclient_start+0x298>)
 8002ca0:	7809      	ldrb	r1, [r1, #0]
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	0e1b      	lsrs	r3, r3, #24
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8002caa:	4b5a      	ldr	r3, [pc, #360]	@ (8002e14 <dhcpclient_start+0x29c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	061a      	lsls	r2, r3, #24
 8002cb0:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <dhcpclient_start+0x2a0>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	4b58      	ldr	r3, [pc, #352]	@ (8002e1c <dhcpclient_start+0x2a4>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	4a57      	ldr	r2, [pc, #348]	@ (8002e20 <dhcpclient_start+0x2a8>)
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	061a      	lsls	r2, r3, #24
 8002cc8:	4b52      	ldr	r3, [pc, #328]	@ (8002e14 <dhcpclient_start+0x29c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	0619      	lsls	r1, r3, #24
 8002cce:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <dhcpclient_start+0x2a0>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	4319      	orrs	r1, r3
 8002cd6:	4b51      	ldr	r3, [pc, #324]	@ (8002e1c <dhcpclient_start+0x2a4>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	4950      	ldr	r1, [pc, #320]	@ (8002e20 <dhcpclient_start+0x2a8>)
 8002ce0:	7809      	ldrb	r1, [r1, #0]
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002cea:	431a      	orrs	r2, r3
 8002cec:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <dhcpclient_start+0x29c>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	0619      	lsls	r1, r3, #24
 8002cf2:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <dhcpclient_start+0x2a0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	4319      	orrs	r1, r3
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <dhcpclient_start+0x2a4>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	430b      	orrs	r3, r1
 8002d02:	4947      	ldr	r1, [pc, #284]	@ (8002e20 <dhcpclient_start+0x2a8>)
 8002d04:	7809      	ldrb	r1, [r1, #0]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	4b40      	ldr	r3, [pc, #256]	@ (8002e14 <dhcpclient_start+0x29c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	0619      	lsls	r1, r3, #24
 8002d16:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <dhcpclient_start+0x2a0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	4319      	orrs	r1, r3
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <dhcpclient_start+0x2a4>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	430b      	orrs	r3, r1
 8002d26:	493e      	ldr	r1, [pc, #248]	@ (8002e20 <dhcpclient_start+0x2a8>)
 8002d28:	7809      	ldrb	r1, [r1, #0]
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	0e1b      	lsrs	r3, r3, #24
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8002d32:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <dhcpclient_start+0x2ac>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	061a      	lsls	r2, r3, #24
 8002d38:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <dhcpclient_start+0x2b0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	4b3a      	ldr	r3, [pc, #232]	@ (8002e2c <dhcpclient_start+0x2b4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	4313      	orrs	r3, r2
 8002d48:	4a39      	ldr	r2, [pc, #228]	@ (8002e30 <dhcpclient_start+0x2b8>)
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	061a      	lsls	r2, r3, #24
 8002d50:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <dhcpclient_start+0x2ac>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	0619      	lsls	r1, r3, #24
 8002d56:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <dhcpclient_start+0x2b0>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	4319      	orrs	r1, r3
 8002d5e:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <dhcpclient_start+0x2b4>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	430b      	orrs	r3, r1
 8002d66:	4932      	ldr	r1, [pc, #200]	@ (8002e30 <dhcpclient_start+0x2b8>)
 8002d68:	7809      	ldrb	r1, [r1, #0]
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d72:	431a      	orrs	r2, r3
 8002d74:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <dhcpclient_start+0x2ac>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	0619      	lsls	r1, r3, #24
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <dhcpclient_start+0x2b0>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	4319      	orrs	r1, r3
 8002d82:	4b2a      	ldr	r3, [pc, #168]	@ (8002e2c <dhcpclient_start+0x2b4>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	4929      	ldr	r1, [pc, #164]	@ (8002e30 <dhcpclient_start+0x2b8>)
 8002d8c:	7809      	ldrb	r1, [r1, #0]
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002d96:	431a      	orrs	r2, r3
 8002d98:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <dhcpclient_start+0x2ac>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	0619      	lsls	r1, r3, #24
 8002d9e:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <dhcpclient_start+0x2b0>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	4319      	orrs	r1, r3
 8002da6:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <dhcpclient_start+0x2b4>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	430b      	orrs	r3, r1
 8002dae:	4920      	ldr	r1, [pc, #128]	@ (8002e30 <dhcpclient_start+0x2b8>)
 8002db0:	7809      	ldrb	r1, [r1, #0]
 8002db2:	430b      	orrs	r3, r1
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	f107 0210 	add.w	r2, r7, #16
 8002dc2:	f107 0114 	add.w	r1, r7, #20
 8002dc6:	69f8      	ldr	r0, [r7, #28]
 8002dc8:	f00c fe6c 	bl	800faa4 <netif_set_addr>
      break;
 8002dcc:	e00a      	b.n	8002de4 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	490b      	ldr	r1, [pc, #44]	@ (8002e00 <dhcpclient_start+0x288>)
 8002dd2:	69f8      	ldr	r0, [r7, #28]
 8002dd4:	f00b fc36 	bl	800e644 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <dhcpclient_start+0x278>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
    break;
 8002dde:	e002      	b.n	8002de6 <dhcpclient_start+0x26e>
    default: break;
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <dhcpclient_start+0x26e>
      break;
 8002de4:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8002de6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dea:	f009 fd3b 	bl	800c864 <vTaskDelay>
    switch (dhcp_state)
 8002dee:	e6c9      	b.n	8002b84 <dhcpclient_start+0xc>
 8002df0:	200005d0 	.word	0x200005d0
 8002df4:	08017349 	.word	0x08017349
 8002df8:	2000082c 	.word	0x2000082c
 8002dfc:	0801e4a4 	.word	0x0801e4a4
 8002e00:	08017dfd 	.word	0x08017dfd
 8002e04:	20000090 	.word	0x20000090
 8002e08:	20000091 	.word	0x20000091
 8002e0c:	200008ce 	.word	0x200008ce
 8002e10:	20000092 	.word	0x20000092
 8002e14:	20000093 	.word	0x20000093
 8002e18:	20000094 	.word	0x20000094
 8002e1c:	20000095 	.word	0x20000095
 8002e20:	200008cf 	.word	0x200008cf
 8002e24:	200008d0 	.word	0x200008d0
 8002e28:	200008d1 	.word	0x200008d1
 8002e2c:	200008d2 	.word	0x200008d2
 8002e30:	200008d3 	.word	0x200008d3

08002e34 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e08a      	b.n	8002f58 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8002e42:	494b      	ldr	r1, [pc, #300]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	440b      	add	r3, r1
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d17b      	bne.n	8002f52 <dhcpserver_remove_mac+0x11e>
 8002e5a:	4945      	ldr	r1, [pc, #276]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	440b      	add	r3, r1
 8002e68:	3301      	adds	r3, #1
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d16e      	bne.n	8002f52 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8002e74:	493e      	ldr	r1, [pc, #248]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	440b      	add	r3, r1
 8002e82:	3302      	adds	r3, #2
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	789b      	ldrb	r3, [r3, #2]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d161      	bne.n	8002f52 <dhcpserver_remove_mac+0x11e>
 8002e8e:	4938      	ldr	r1, [pc, #224]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3303      	adds	r3, #3
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	78db      	ldrb	r3, [r3, #3]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d154      	bne.n	8002f52 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8002ea8:	4931      	ldr	r1, [pc, #196]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d147      	bne.n	8002f52 <dhcpserver_remove_mac+0x11e>
 8002ec2:	492b      	ldr	r1, [pc, #172]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	3305      	adds	r3, #5
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	795b      	ldrb	r3, [r3, #5]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d13a      	bne.n	8002f52 <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8002edc:	4924      	ldr	r1, [pc, #144]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	440b      	add	r3, r1
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 8002eee:	4920      	ldr	r1, [pc, #128]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	3301      	adds	r3, #1
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8002f02:	491b      	ldr	r1, [pc, #108]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	3302      	adds	r3, #2
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8002f16:	4916      	ldr	r1, [pc, #88]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	440b      	add	r3, r1
 8002f24:	3303      	adds	r3, #3
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8002f2a:	4911      	ldr	r1, [pc, #68]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 8002f3e:	490c      	ldr	r1, [pc, #48]	@ (8002f70 <dhcpserver_remove_mac+0x13c>)
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3305      	adds	r3, #5
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b07      	cmp	r3, #7
 8002f5c:	f67f af71 	bls.w	8002e42 <dhcpserver_remove_mac+0xe>
    }
  }
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	200005d8 	.word	0x200005d8

08002f74 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff59 	bl	8002e34 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e08b      	b.n	80030a0 <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	494a      	ldr	r1, [pc, #296]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d17e      	bne.n	800309a <dhcpserver_save_mac+0x126>
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	4945      	ldr	r1, [pc, #276]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	440b      	add	r3, r1
 8002faa:	3301      	adds	r3, #1
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d173      	bne.n	800309a <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	493f      	ldr	r1, [pc, #252]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d168      	bne.n	800309a <dhcpserver_save_mac+0x126>
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	493a      	ldr	r1, [pc, #232]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3303      	adds	r3, #3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d15d      	bne.n	800309a <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	4934      	ldr	r1, [pc, #208]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	3304      	adds	r3, #4
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d152      	bne.n	800309a <dhcpserver_save_mac+0x126>
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	492f      	ldr	r1, [pc, #188]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	3305      	adds	r3, #5
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d147      	bne.n	800309a <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7818      	ldrb	r0, [r3, #0]
 8003010:	4928      	ldr	r1, [pc, #160]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	440b      	add	r3, r1
 800301c:	4602      	mov	r2, r0
 800301e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7858      	ldrb	r0, [r3, #1]
 8003026:	4923      	ldr	r1, [pc, #140]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	440b      	add	r3, r1
 8003032:	3301      	adds	r3, #1
 8003034:	4602      	mov	r2, r0
 8003036:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7898      	ldrb	r0, [r3, #2]
 800303e:	491d      	ldr	r1, [pc, #116]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	3302      	adds	r3, #2
 800304c:	4602      	mov	r2, r0
 800304e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	78d8      	ldrb	r0, [r3, #3]
 8003056:	4917      	ldr	r1, [pc, #92]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	3303      	adds	r3, #3
 8003064:	4602      	mov	r2, r0
 8003066:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7918      	ldrb	r0, [r3, #4]
 800306e:	4911      	ldr	r1, [pc, #68]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	440b      	add	r3, r1
 800307a:	3304      	adds	r3, #4
 800307c:	4602      	mov	r2, r0
 800307e:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7958      	ldrb	r0, [r3, #5]
 8003086:	490b      	ldr	r1, [pc, #44]	@ (80030b4 <dhcpserver_save_mac+0x140>)
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	440b      	add	r3, r1
 8003092:	3305      	adds	r3, #5
 8003094:	4602      	mov	r2, r0
 8003096:	701a      	strb	r2, [r3, #0]
      break;
 8003098:	e007      	b.n	80030aa <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	3301      	adds	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	f67f af70 	bls.w	8002f88 <dhcpserver_save_mac+0x14>
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200005d8 	.word	0x200005d8

080030b8 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e060      	b.n	800318c <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 80030ca:	4935      	ldr	r1, [pc, #212]	@ (80031a0 <dhcpserver_get_ip+0xe8>)
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	440b      	add	r3, r1
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d151      	bne.n	8003186 <dhcpserver_get_ip+0xce>
 80030e2:	492f      	ldr	r1, [pc, #188]	@ (80031a0 <dhcpserver_get_ip+0xe8>)
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	440b      	add	r3, r1
 80030f0:	3301      	adds	r3, #1
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d144      	bne.n	8003186 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 80030fc:	4928      	ldr	r1, [pc, #160]	@ (80031a0 <dhcpserver_get_ip+0xe8>)
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	3302      	adds	r3, #2
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	789b      	ldrb	r3, [r3, #2]
 8003112:	429a      	cmp	r2, r3
 8003114:	d137      	bne.n	8003186 <dhcpserver_get_ip+0xce>
 8003116:	4922      	ldr	r1, [pc, #136]	@ (80031a0 <dhcpserver_get_ip+0xe8>)
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	440b      	add	r3, r1
 8003124:	3303      	adds	r3, #3
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	429a      	cmp	r2, r3
 800312e:	d12a      	bne.n	8003186 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8003130:	491b      	ldr	r1, [pc, #108]	@ (80031a0 <dhcpserver_get_ip+0xe8>)
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	440b      	add	r3, r1
 800313e:	3304      	adds	r3, #4
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d11d      	bne.n	8003186 <dhcpserver_get_ip+0xce>
 800314a:	4915      	ldr	r1, [pc, #84]	@ (80031a0 <dhcpserver_get_ip+0xe8>)
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	440b      	add	r3, r1
 8003158:	3305      	adds	r3, #5
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	795b      	ldrb	r3, [r3, #5]
 8003160:	429a      	cmp	r2, r3
 8003162:	d110      	bne.n	8003186 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	330a      	adds	r3, #10
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <dhcpserver_get_ip+0xec>)
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	441a      	add	r2, r3
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <dhcpserver_get_ip+0xf0>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	441a      	add	r2, r3
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <dhcpserver_get_ip+0xf4>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	4413      	add	r3, r2
 8003180:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	e006      	b.n	8003194 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b07      	cmp	r3, #7
 8003190:	d99b      	bls.n	80030ca <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 8003192:	68bb      	ldr	r3, [r7, #8]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	200005d8 	.word	0x200005d8
 80031a4:	20000096 	.word	0x20000096
 80031a8:	20000097 	.word	0x20000097
 80031ac:	20000098 	.word	0x20000098

080031b0 <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e03d      	b.n	8003238 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 80031bc:	4923      	ldr	r1, [pc, #140]	@ (800324c <dhcpserver_clear_stored_mac+0x9c>)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	440b      	add	r3, r1
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 80031ce:	491f      	ldr	r1, [pc, #124]	@ (800324c <dhcpserver_clear_stored_mac+0x9c>)
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	3301      	adds	r3, #1
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 80031e2:	491a      	ldr	r1, [pc, #104]	@ (800324c <dhcpserver_clear_stored_mac+0x9c>)
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	440b      	add	r3, r1
 80031f0:	3302      	adds	r3, #2
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 80031f6:	4915      	ldr	r1, [pc, #84]	@ (800324c <dhcpserver_clear_stored_mac+0x9c>)
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	440b      	add	r3, r1
 8003204:	3303      	adds	r3, #3
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 800320a:	4910      	ldr	r1, [pc, #64]	@ (800324c <dhcpserver_clear_stored_mac+0x9c>)
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	440b      	add	r3, r1
 8003218:	3304      	adds	r3, #4
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 800321e:	490b      	ldr	r1, [pc, #44]	@ (800324c <dhcpserver_clear_stored_mac+0x9c>)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	440b      	add	r3, r1
 800322c:	3305      	adds	r3, #5
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3301      	adds	r3, #1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b07      	cmp	r3, #7
 800323c:	d9be      	bls.n	80031bc <dhcpserver_clear_stored_mac+0xc>
  }
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	200005d8 	.word	0x200005d8

08003250 <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 800325a:	23f0      	movs	r3, #240	@ 0xf0
 800325c:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 800325e:	2332      	movs	r3, #50	@ 0x32
 8003260:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 800326a:	e036      	b.n	80032da <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f00d fbfc 	bl	8010a70 <pbuf_get_at>
 8003278:	4603      	mov	r3, r0
 800327a:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 800327c:	7c7a      	ldrb	r2, [r7, #17]
 800327e:	7c3b      	ldrb	r3, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d11b      	bne.n	80032bc <dhcpserver_find_requested_ip+0x6c>
      index++;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	b29b      	uxth	r3, r3
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f00d fbed 	bl	8010a70 <pbuf_get_at>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]
      index++;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f00d fb00 	bl	80108b0 <pbuf_copy_partial>
      index += size;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
      found = 1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	827b      	strh	r3, [r7, #18]
    }
    index++;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f00d fbd1 	bl	8010a70 <pbuf_get_at>
 80032ce:	4603      	mov	r3, r0
 80032d0:	3301      	adds	r3, #1
 80032d2:	461a      	mov	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4413      	add	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80032da:	7c7b      	ldrb	r3, [r7, #17]
 80032dc:	2bff      	cmp	r3, #255	@ 0xff
 80032de:	d005      	beq.n	80032ec <dhcpserver_find_requested_ip+0x9c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	891b      	ldrh	r3, [r3, #8]
 80032e4:	461a      	mov	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d3bf      	bcc.n	800326c <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 80032ec:	8a7b      	ldrh	r3, [r7, #18]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	@ 0x30
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t i;
  uint8_t flags = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t client_requested_addr = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 85b8 	beq.w	8003e96 <dhcpserver_fn+0xb9e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	891b      	ldrh	r3, [r3, #8]
 800332a:	2bf0      	cmp	r3, #240	@ 0xf0
 800332c:	f240 85b3 	bls.w	8003e96 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 8003330:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003338:	2036      	movs	r0, #54	@ 0x36
 800333a:	f00c fdcb 	bl	800fed4 <pbuf_alloc>
 800333e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 85a9 	beq.w	8003e9a <dhcpserver_fn+0xba2>
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334a:	891b      	ldrh	r3, [r3, #8]
 800334c:	2bef      	cmp	r3, #239	@ 0xef
 800334e:	f240 85a4 	bls.w	8003e9a <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003356:	f00d f9d9 	bl	801070c <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 800335a:	2300      	movs	r3, #0
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800335e:	e014      	b.n	800338a <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	b29b      	uxth	r3, r3
 8003364:	331c      	adds	r3, #28
 8003366:	b29b      	uxth	r3, r3
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f00d fb80 	bl	8010a70 <pbuf_get_at>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    ethaddr.addr[i] = val;
 8003376:	f107 021c 	add.w	r2, r7, #28
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	4413      	add	r3, r2
 800337e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003382:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	3301      	adds	r3, #1
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338c:	2b05      	cmp	r3, #5
 800338e:	d9e7      	bls.n	8003360 <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fded 	bl	8002f74 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 800339a:	f107 031c 	add.w	r3, r7, #28
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe8a 	bl	80030b8 <dhcpserver_get_ip>
 80033a4:	4603      	mov	r3, r0
 80033a6:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8577 	beq.w	8003e9e <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 80033b0:	f107 021c 	add.w	r2, r7, #28
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f015 fe38 	bl	8019030 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 80033c0:	21f2      	movs	r1, #242	@ 0xf2
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f00d fb54 	bl	8010a70 <pbuf_get_at>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  switch (val) {
 80033ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d004      	beq.n	80033e0 <dhcpserver_fn+0xe8>
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	f000 826a 	beq.w	80038b0 <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 80033dc:	f000 bd62 	b.w	8003ea4 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 80033e0:	2202      	movs	r2, #2
 80033e2:	2100      	movs	r1, #0
 80033e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033e6:	f00d fb7c 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	2108      	movs	r1, #8
 80033ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033f0:	f00d fb77 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 80033f4:	2200      	movs	r2, #0
 80033f6:	210a      	movs	r1, #10
 80033f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033fa:	f00d fb72 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	2110      	movs	r1, #16
 8003406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003408:	f00d fb6b 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	2111      	movs	r1, #17
 8003416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003418:	f00d fb63 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	2112      	movs	r1, #18
 8003426:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003428:	f00d fb5b 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	0e1b      	lsrs	r3, r3, #24
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	2113      	movs	r1, #19
 8003436:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003438:	f00d fb53 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2114      	movs	r1, #20
 8003440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003442:	f00d fb4e 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2115      	movs	r1, #21
 800344a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800344c:	f00d fb49 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	2116      	movs	r1, #22
 8003454:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003456:	f00d fb44 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2117      	movs	r1, #23
 800345e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003460:	f00d fb3f 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8003464:	2263      	movs	r2, #99	@ 0x63
 8003466:	21ec      	movs	r1, #236	@ 0xec
 8003468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800346a:	f00d fb3a 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 800346e:	2282      	movs	r2, #130	@ 0x82
 8003470:	21ed      	movs	r1, #237	@ 0xed
 8003472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003474:	f00d fb35 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8003478:	2253      	movs	r2, #83	@ 0x53
 800347a:	21ee      	movs	r1, #238	@ 0xee
 800347c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800347e:	f00d fb30 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8003482:	2263      	movs	r2, #99	@ 0x63
 8003484:	21ef      	movs	r1, #239	@ 0xef
 8003486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003488:	f00d fb2b 	bl	8010ae2 <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 800348c:	23f0      	movs	r3, #240	@ 0xf0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	b29b      	uxth	r3, r3
 8003494:	2235      	movs	r2, #53	@ 0x35
 8003496:	4619      	mov	r1, r3
 8003498:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800349a:	f00d fb22 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2201      	movs	r2, #1
 80034aa:	4619      	mov	r1, r3
 80034ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034ae:	f00d fb18 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	3301      	adds	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2202      	movs	r2, #2
 80034be:	4619      	mov	r1, r3
 80034c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034c2:	f00d fb0e 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	3301      	adds	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2201      	movs	r2, #1
 80034d2:	4619      	mov	r1, r3
 80034d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034d6:	f00d fb04 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	3301      	adds	r3, #1
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2204      	movs	r2, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034ea:	f00d fafa 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 80034f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003798 <dhcpserver_fn+0x4a0>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	061a      	lsls	r2, r3, #24
 80034fa:	4ba8      	ldr	r3, [pc, #672]	@ (800379c <dhcpserver_fn+0x4a4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	4ba7      	ldr	r3, [pc, #668]	@ (80037a0 <dhcpserver_fn+0x4a8>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	4313      	orrs	r3, r2
 800350a:	4aa6      	ldr	r2, [pc, #664]	@ (80037a4 <dhcpserver_fn+0x4ac>)
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	061a      	lsls	r2, r3, #24
 8003512:	4ba1      	ldr	r3, [pc, #644]	@ (8003798 <dhcpserver_fn+0x4a0>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	0619      	lsls	r1, r3, #24
 8003518:	4ba0      	ldr	r3, [pc, #640]	@ (800379c <dhcpserver_fn+0x4a4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	4319      	orrs	r1, r3
 8003520:	4b9f      	ldr	r3, [pc, #636]	@ (80037a0 <dhcpserver_fn+0x4a8>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	430b      	orrs	r3, r1
 8003528:	499e      	ldr	r1, [pc, #632]	@ (80037a4 <dhcpserver_fn+0x4ac>)
 800352a:	7809      	ldrb	r1, [r1, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003534:	431a      	orrs	r2, r3
 8003536:	4b98      	ldr	r3, [pc, #608]	@ (8003798 <dhcpserver_fn+0x4a0>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	0619      	lsls	r1, r3, #24
 800353c:	4b97      	ldr	r3, [pc, #604]	@ (800379c <dhcpserver_fn+0x4a4>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4319      	orrs	r1, r3
 8003544:	4b96      	ldr	r3, [pc, #600]	@ (80037a0 <dhcpserver_fn+0x4a8>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	430b      	orrs	r3, r1
 800354c:	4995      	ldr	r1, [pc, #596]	@ (80037a4 <dhcpserver_fn+0x4ac>)
 800354e:	7809      	ldrb	r1, [r1, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003558:	431a      	orrs	r2, r3
 800355a:	4b8f      	ldr	r3, [pc, #572]	@ (8003798 <dhcpserver_fn+0x4a0>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	0619      	lsls	r1, r3, #24
 8003560:	4b8e      	ldr	r3, [pc, #568]	@ (800379c <dhcpserver_fn+0x4a4>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	4319      	orrs	r1, r3
 8003568:	4b8d      	ldr	r3, [pc, #564]	@ (80037a0 <dhcpserver_fn+0x4a8>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	430b      	orrs	r3, r1
 8003570:	498c      	ldr	r1, [pc, #560]	@ (80037a4 <dhcpserver_fn+0x4ac>)
 8003572:	7809      	ldrb	r1, [r1, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	0e1b      	lsrs	r3, r3, #24
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	b29b      	uxth	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	4619      	mov	r1, r3
 8003586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003588:	f00d faab 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	b29b      	uxth	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	b299      	uxth	r1, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800359e:	f00d faa0 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3302      	adds	r3, #2
 80035a8:	b299      	uxth	r1, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035b4:	f00d fa95 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3303      	adds	r3, #3
 80035be:	b299      	uxth	r1, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	0e1b      	lsrs	r3, r3, #24
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035ca:	f00d fa8a 	bl	8010ae2 <pbuf_put_at>
      options_offset += 4;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	3304      	adds	r3, #4
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2203      	movs	r2, #3
 80035da:	4619      	mov	r1, r3
 80035dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035de:	f00d fa80 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	3301      	adds	r3, #1
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2204      	movs	r2, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035f2:	f00d fa76 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	3301      	adds	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80035fc:	4b6a      	ldr	r3, [pc, #424]	@ (80037a8 <dhcpserver_fn+0x4b0>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	061a      	lsls	r2, r3, #24
 8003602:	4b6a      	ldr	r3, [pc, #424]	@ (80037ac <dhcpserver_fn+0x4b4>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	4b69      	ldr	r3, [pc, #420]	@ (80037b0 <dhcpserver_fn+0x4b8>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	4313      	orrs	r3, r2
 8003612:	4a68      	ldr	r2, [pc, #416]	@ (80037b4 <dhcpserver_fn+0x4bc>)
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	061a      	lsls	r2, r3, #24
 800361a:	4b63      	ldr	r3, [pc, #396]	@ (80037a8 <dhcpserver_fn+0x4b0>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	0619      	lsls	r1, r3, #24
 8003620:	4b62      	ldr	r3, [pc, #392]	@ (80037ac <dhcpserver_fn+0x4b4>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	4319      	orrs	r1, r3
 8003628:	4b61      	ldr	r3, [pc, #388]	@ (80037b0 <dhcpserver_fn+0x4b8>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	430b      	orrs	r3, r1
 8003630:	4960      	ldr	r1, [pc, #384]	@ (80037b4 <dhcpserver_fn+0x4bc>)
 8003632:	7809      	ldrb	r1, [r1, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800363c:	431a      	orrs	r2, r3
 800363e:	4b5a      	ldr	r3, [pc, #360]	@ (80037a8 <dhcpserver_fn+0x4b0>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	0619      	lsls	r1, r3, #24
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <dhcpserver_fn+0x4b4>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	4319      	orrs	r1, r3
 800364c:	4b58      	ldr	r3, [pc, #352]	@ (80037b0 <dhcpserver_fn+0x4b8>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	430b      	orrs	r3, r1
 8003654:	4957      	ldr	r1, [pc, #348]	@ (80037b4 <dhcpserver_fn+0x4bc>)
 8003656:	7809      	ldrb	r1, [r1, #0]
 8003658:	430b      	orrs	r3, r1
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003660:	431a      	orrs	r2, r3
 8003662:	4b51      	ldr	r3, [pc, #324]	@ (80037a8 <dhcpserver_fn+0x4b0>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	0619      	lsls	r1, r3, #24
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <dhcpserver_fn+0x4b4>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	4319      	orrs	r1, r3
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <dhcpserver_fn+0x4b8>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	430b      	orrs	r3, r1
 8003678:	494e      	ldr	r1, [pc, #312]	@ (80037b4 <dhcpserver_fn+0x4bc>)
 800367a:	7809      	ldrb	r1, [r1, #0]
 800367c:	430b      	orrs	r3, r1
 800367e:	0e1b      	lsrs	r3, r3, #24
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	b29b      	uxth	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	4619      	mov	r1, r3
 800368e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003690:	f00d fa27 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	b29b      	uxth	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	b299      	uxth	r1, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036a6:	f00d fa1c 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3302      	adds	r3, #2
 80036b0:	b299      	uxth	r1, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036bc:	f00d fa11 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3303      	adds	r3, #3
 80036c6:	b299      	uxth	r1, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	0e1b      	lsrs	r3, r3, #24
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036d2:	f00d fa06 	bl	8010ae2 <pbuf_put_at>
      options_offset += 4;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	3304      	adds	r3, #4
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2233      	movs	r2, #51	@ 0x33
 80036e2:	4619      	mov	r1, r3
 80036e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036e6:	f00d f9fc 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2204      	movs	r2, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036fa:	f00d f9f2 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	3301      	adds	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	b29b      	uxth	r3, r3
 8003708:	2200      	movs	r2, #0
 800370a:	4619      	mov	r1, r3
 800370c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800370e:	f00d f9e8 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	b29b      	uxth	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	2201      	movs	r2, #1
 800371c:	4619      	mov	r1, r3
 800371e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003720:	f00d f9df 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	b29b      	uxth	r3, r3
 8003728:	3302      	adds	r3, #2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2251      	movs	r2, #81	@ 0x51
 800372e:	4619      	mov	r1, r3
 8003730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003732:	f00d f9d6 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	b29b      	uxth	r3, r3
 800373a:	3303      	adds	r3, #3
 800373c:	b29b      	uxth	r3, r3
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	4619      	mov	r1, r3
 8003742:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003744:	f00d f9cd 	bl	8010ae2 <pbuf_put_at>
      options_offset += 4;
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	3304      	adds	r3, #4
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	b29b      	uxth	r3, r3
 8003752:	2236      	movs	r2, #54	@ 0x36
 8003754:	4619      	mov	r1, r3
 8003756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003758:	f00d f9c3 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	3301      	adds	r3, #1
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	b29b      	uxth	r3, r3
 8003766:	2204      	movs	r2, #4
 8003768:	4619      	mov	r1, r3
 800376a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800376c:	f00d f9b9 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	3301      	adds	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8003776:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <dhcpserver_fn+0x4b0>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	061a      	lsls	r2, r3, #24
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <dhcpserver_fn+0x4b4>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	431a      	orrs	r2, r3
 8003784:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <dhcpserver_fn+0x4b8>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	4313      	orrs	r3, r2
 800378c:	4a09      	ldr	r2, [pc, #36]	@ (80037b4 <dhcpserver_fn+0x4bc>)
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	061a      	lsls	r2, r3, #24
 8003794:	e010      	b.n	80037b8 <dhcpserver_fn+0x4c0>
 8003796:	bf00      	nop
 8003798:	2000009a 	.word	0x2000009a
 800379c:	2000009b 	.word	0x2000009b
 80037a0:	2000009c 	.word	0x2000009c
 80037a4:	200008d4 	.word	0x200008d4
 80037a8:	20000096 	.word	0x20000096
 80037ac:	20000097 	.word	0x20000097
 80037b0:	20000098 	.word	0x20000098
 80037b4:	20000099 	.word	0x20000099
 80037b8:	4b54      	ldr	r3, [pc, #336]	@ (800390c <dhcpserver_fn+0x614>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	0619      	lsls	r1, r3, #24
 80037be:	4b54      	ldr	r3, [pc, #336]	@ (8003910 <dhcpserver_fn+0x618>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	4319      	orrs	r1, r3
 80037c6:	4b53      	ldr	r3, [pc, #332]	@ (8003914 <dhcpserver_fn+0x61c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4952      	ldr	r1, [pc, #328]	@ (8003918 <dhcpserver_fn+0x620>)
 80037d0:	7809      	ldrb	r1, [r1, #0]
 80037d2:	430b      	orrs	r3, r1
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037da:	431a      	orrs	r2, r3
 80037dc:	4b4b      	ldr	r3, [pc, #300]	@ (800390c <dhcpserver_fn+0x614>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	0619      	lsls	r1, r3, #24
 80037e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003910 <dhcpserver_fn+0x618>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	4319      	orrs	r1, r3
 80037ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003914 <dhcpserver_fn+0x61c>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	430b      	orrs	r3, r1
 80037f2:	4949      	ldr	r1, [pc, #292]	@ (8003918 <dhcpserver_fn+0x620>)
 80037f4:	7809      	ldrb	r1, [r1, #0]
 80037f6:	430b      	orrs	r3, r1
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037fe:	431a      	orrs	r2, r3
 8003800:	4b42      	ldr	r3, [pc, #264]	@ (800390c <dhcpserver_fn+0x614>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	0619      	lsls	r1, r3, #24
 8003806:	4b42      	ldr	r3, [pc, #264]	@ (8003910 <dhcpserver_fn+0x618>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	4319      	orrs	r1, r3
 800380e:	4b41      	ldr	r3, [pc, #260]	@ (8003914 <dhcpserver_fn+0x61c>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	430b      	orrs	r3, r1
 8003816:	4940      	ldr	r1, [pc, #256]	@ (8003918 <dhcpserver_fn+0x620>)
 8003818:	7809      	ldrb	r1, [r1, #0]
 800381a:	430b      	orrs	r3, r1
 800381c:	0e1b      	lsrs	r3, r3, #24
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	b29b      	uxth	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	4619      	mov	r1, r3
 800382c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800382e:	f00d f958 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	b29b      	uxth	r3, r3
 8003836:	3301      	adds	r3, #1
 8003838:	b299      	uxth	r1, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003844:	f00d f94d 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	b29b      	uxth	r3, r3
 800384c:	3302      	adds	r3, #2
 800384e:	b299      	uxth	r1, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800385a:	f00d f942 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	b29b      	uxth	r3, r3
 8003862:	3303      	adds	r3, #3
 8003864:	b299      	uxth	r1, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003870:	f00d f937 	bl	8010ae2 <pbuf_put_at>
      options_offset += 4;
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	3304      	adds	r3, #4
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	b29b      	uxth	r3, r3
 800387e:	22ff      	movs	r2, #255	@ 0xff
 8003880:	4619      	mov	r1, r3
 8003882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003884:	f00d f92d 	bl	8010ae2 <pbuf_put_at>
      options_offset++;
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	3301      	adds	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	b29b      	uxth	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003896:	f00c fc7f 	bl	8010198 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 800389a:	4b20      	ldr	r3, [pc, #128]	@ (800391c <dhcpserver_fn+0x624>)
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	f107 0214 	add.w	r2, r7, #20
 80038a2:	2344      	movs	r3, #68	@ 0x44
 80038a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a6:	f012 fe3b 	bl	8016520 <udp_sendto>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
      break;
 80038ae:	e2f9      	b.n	8003ea4 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 80038b0:	2202      	movs	r2, #2
 80038b2:	2100      	movs	r1, #0
 80038b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038b6:	f00d f914 	bl	8010ae2 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2108      	movs	r1, #8
 80038be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038c0:	f00d f90f 	bl	8010ae2 <pbuf_put_at>
      flags = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 80038ca:	210a      	movs	r1, #10
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f00d f8cf 	bl	8010a70 <pbuf_get_at>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      if (flags & 0x80) {
 80038d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da1f      	bge.n	8003920 <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80038e0:	210a      	movs	r1, #10
 80038e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038e4:	f00d f8c4 	bl	8010a70 <pbuf_get_at>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags |= 0x80;
 80038ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 80038fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038fe:	461a      	mov	r2, r3
 8003900:	210a      	movs	r1, #10
 8003902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003904:	f00d f8ed 	bl	8010ae2 <pbuf_put_at>
 8003908:	e01e      	b.n	8003948 <dhcpserver_fn+0x650>
 800390a:	bf00      	nop
 800390c:	20000096 	.word	0x20000096
 8003910:	20000097 	.word	0x20000097
 8003914:	20000098 	.word	0x20000098
 8003918:	20000099 	.word	0x20000099
 800391c:	200005d4 	.word	0x200005d4
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8003920:	210a      	movs	r1, #10
 8003922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003924:	f00d f8a4 	bl	8010a70 <pbuf_get_at>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags &= ~0x80;
 800392e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800393a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800393e:	461a      	mov	r2, r3
 8003940:	210a      	movs	r1, #10
 8003942:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003944:	f00d f8cd 	bl	8010ae2 <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8003948:	f107 0318 	add.w	r3, r7, #24
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fc7e 	bl	8003250 <dhcpserver_find_requested_ip>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 82a3 	beq.w	8003ea2 <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 8249 	bne.w	8003df8 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	2110      	movs	r1, #16
 800396e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003970:	f00d f8b7 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	2111      	movs	r1, #17
 800397e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003980:	f00d f8af 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	2112      	movs	r1, #18
 800398e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003990:	f00d f8a7 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	0e1b      	lsrs	r3, r3, #24
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	2113      	movs	r1, #19
 800399e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039a0:	f00d f89f 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 80039a4:	2200      	movs	r2, #0
 80039a6:	2114      	movs	r1, #20
 80039a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039aa:	f00d f89a 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2115      	movs	r1, #21
 80039b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039b4:	f00d f895 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2116      	movs	r1, #22
 80039bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039be:	f00d f890 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2117      	movs	r1, #23
 80039c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039c8:	f00d f88b 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 80039cc:	2263      	movs	r2, #99	@ 0x63
 80039ce:	21ec      	movs	r1, #236	@ 0xec
 80039d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039d2:	f00d f886 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 80039d6:	2282      	movs	r2, #130	@ 0x82
 80039d8:	21ed      	movs	r1, #237	@ 0xed
 80039da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039dc:	f00d f881 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 80039e0:	2253      	movs	r2, #83	@ 0x53
 80039e2:	21ee      	movs	r1, #238	@ 0xee
 80039e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039e6:	f00d f87c 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 80039ea:	2263      	movs	r2, #99	@ 0x63
 80039ec:	21ef      	movs	r1, #239	@ 0xef
 80039ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039f0:	f00d f877 	bl	8010ae2 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 80039f4:	23f0      	movs	r3, #240	@ 0xf0
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2235      	movs	r2, #53	@ 0x35
 80039fe:	4619      	mov	r1, r3
 8003a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a02:	f00d f86e 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	3301      	adds	r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2201      	movs	r2, #1
 8003a12:	4619      	mov	r1, r3
 8003a14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a16:	f00d f864 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2205      	movs	r2, #5
 8003a26:	4619      	mov	r1, r3
 8003a28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a2a:	f00d f85a 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	3301      	adds	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a3e:	f00d f850 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	3301      	adds	r3, #1
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a52:	f00d f846 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	3301      	adds	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8003a5c:	4ba8      	ldr	r3, [pc, #672]	@ (8003d00 <dhcpserver_fn+0xa08>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	061a      	lsls	r2, r3, #24
 8003a62:	4ba8      	ldr	r3, [pc, #672]	@ (8003d04 <dhcpserver_fn+0xa0c>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	4ba7      	ldr	r3, [pc, #668]	@ (8003d08 <dhcpserver_fn+0xa10>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4313      	orrs	r3, r2
 8003a72:	4aa6      	ldr	r2, [pc, #664]	@ (8003d0c <dhcpserver_fn+0xa14>)
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	061a      	lsls	r2, r3, #24
 8003a7a:	4ba1      	ldr	r3, [pc, #644]	@ (8003d00 <dhcpserver_fn+0xa08>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	0619      	lsls	r1, r3, #24
 8003a80:	4ba0      	ldr	r3, [pc, #640]	@ (8003d04 <dhcpserver_fn+0xa0c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	4319      	orrs	r1, r3
 8003a88:	4b9f      	ldr	r3, [pc, #636]	@ (8003d08 <dhcpserver_fn+0xa10>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	499e      	ldr	r1, [pc, #632]	@ (8003d0c <dhcpserver_fn+0xa14>)
 8003a92:	7809      	ldrb	r1, [r1, #0]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	4b98      	ldr	r3, [pc, #608]	@ (8003d00 <dhcpserver_fn+0xa08>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0619      	lsls	r1, r3, #24
 8003aa4:	4b97      	ldr	r3, [pc, #604]	@ (8003d04 <dhcpserver_fn+0xa0c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	4319      	orrs	r1, r3
 8003aac:	4b96      	ldr	r3, [pc, #600]	@ (8003d08 <dhcpserver_fn+0xa10>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	4995      	ldr	r1, [pc, #596]	@ (8003d0c <dhcpserver_fn+0xa14>)
 8003ab6:	7809      	ldrb	r1, [r1, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	4b8f      	ldr	r3, [pc, #572]	@ (8003d00 <dhcpserver_fn+0xa08>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	0619      	lsls	r1, r3, #24
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8003d04 <dhcpserver_fn+0xa0c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	4319      	orrs	r1, r3
 8003ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <dhcpserver_fn+0xa10>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	498c      	ldr	r1, [pc, #560]	@ (8003d0c <dhcpserver_fn+0xa14>)
 8003ada:	7809      	ldrb	r1, [r1, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	0e1b      	lsrs	r3, r3, #24
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003af0:	f00c fff7 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	b299      	uxth	r1, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b06:	f00c ffec 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3302      	adds	r3, #2
 8003b10:	b299      	uxth	r1, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b1c:	f00c ffe1 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3303      	adds	r3, #3
 8003b26:	b299      	uxth	r1, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	0e1b      	lsrs	r3, r3, #24
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b32:	f00c ffd6 	bl	8010ae2 <pbuf_put_at>
        options_offset += 4;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	3304      	adds	r3, #4
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2203      	movs	r2, #3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b46:	f00c ffcc 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2204      	movs	r2, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b5a:	f00c ffc2 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	3301      	adds	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8003b64:	4b6a      	ldr	r3, [pc, #424]	@ (8003d10 <dhcpserver_fn+0xa18>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	061a      	lsls	r2, r3, #24
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <dhcpserver_fn+0xa1c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	431a      	orrs	r2, r3
 8003b72:	4b69      	ldr	r3, [pc, #420]	@ (8003d18 <dhcpserver_fn+0xa20>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	4a68      	ldr	r2, [pc, #416]	@ (8003d1c <dhcpserver_fn+0xa24>)
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	061a      	lsls	r2, r3, #24
 8003b82:	4b63      	ldr	r3, [pc, #396]	@ (8003d10 <dhcpserver_fn+0xa18>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	0619      	lsls	r1, r3, #24
 8003b88:	4b62      	ldr	r3, [pc, #392]	@ (8003d14 <dhcpserver_fn+0xa1c>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	4319      	orrs	r1, r3
 8003b90:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <dhcpserver_fn+0xa20>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	430b      	orrs	r3, r1
 8003b98:	4960      	ldr	r1, [pc, #384]	@ (8003d1c <dhcpserver_fn+0xa24>)
 8003b9a:	7809      	ldrb	r1, [r1, #0]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d10 <dhcpserver_fn+0xa18>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	0619      	lsls	r1, r3, #24
 8003bac:	4b59      	ldr	r3, [pc, #356]	@ (8003d14 <dhcpserver_fn+0xa1c>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	4319      	orrs	r1, r3
 8003bb4:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <dhcpserver_fn+0xa20>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	4957      	ldr	r1, [pc, #348]	@ (8003d1c <dhcpserver_fn+0xa24>)
 8003bbe:	7809      	ldrb	r1, [r1, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	4b51      	ldr	r3, [pc, #324]	@ (8003d10 <dhcpserver_fn+0xa18>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	0619      	lsls	r1, r3, #24
 8003bd0:	4b50      	ldr	r3, [pc, #320]	@ (8003d14 <dhcpserver_fn+0xa1c>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	4319      	orrs	r1, r3
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <dhcpserver_fn+0xa20>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	430b      	orrs	r3, r1
 8003be0:	494e      	ldr	r1, [pc, #312]	@ (8003d1c <dhcpserver_fn+0xa24>)
 8003be2:	7809      	ldrb	r1, [r1, #0]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	0e1b      	lsrs	r3, r3, #24
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bf8:	f00c ff73 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	b299      	uxth	r1, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c0e:	f00c ff68 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3302      	adds	r3, #2
 8003c18:	b299      	uxth	r1, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c24:	f00c ff5d 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3303      	adds	r3, #3
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	0e1b      	lsrs	r3, r3, #24
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c3a:	f00c ff52 	bl	8010ae2 <pbuf_put_at>
        options_offset += 4;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	3304      	adds	r3, #4
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2233      	movs	r2, #51	@ 0x33
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c4e:	f00c ff48 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c62:	f00c ff3e 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	3301      	adds	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	4619      	mov	r1, r3
 8003c74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c76:	f00c ff34 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2201      	movs	r2, #1
 8003c84:	4619      	mov	r1, r3
 8003c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c88:	f00c ff2b 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3302      	adds	r3, #2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2251      	movs	r2, #81	@ 0x51
 8003c96:	4619      	mov	r1, r3
 8003c98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c9a:	f00c ff22 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3303      	adds	r3, #3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cac:	f00c ff19 	bl	8010ae2 <pbuf_put_at>
        options_offset += 4;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2236      	movs	r2, #54	@ 0x36
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cc0:	f00c ff0f 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cd4:	f00c ff05 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	3301      	adds	r3, #1
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <dhcpserver_fn+0xa18>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	061a      	lsls	r2, r3, #24
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <dhcpserver_fn+0xa1c>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <dhcpserver_fn+0xa20>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	4a09      	ldr	r2, [pc, #36]	@ (8003d1c <dhcpserver_fn+0xa24>)
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	061a      	lsls	r2, r3, #24
 8003cfc:	e010      	b.n	8003d20 <dhcpserver_fn+0xa28>
 8003cfe:	bf00      	nop
 8003d00:	2000009a 	.word	0x2000009a
 8003d04:	2000009b 	.word	0x2000009b
 8003d08:	2000009c 	.word	0x2000009c
 8003d0c:	200008d4 	.word	0x200008d4
 8003d10:	20000096 	.word	0x20000096
 8003d14:	20000097 	.word	0x20000097
 8003d18:	20000098 	.word	0x20000098
 8003d1c:	20000099 	.word	0x20000099
 8003d20:	4b67      	ldr	r3, [pc, #412]	@ (8003ec0 <dhcpserver_fn+0xbc8>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	0619      	lsls	r1, r3, #24
 8003d26:	4b67      	ldr	r3, [pc, #412]	@ (8003ec4 <dhcpserver_fn+0xbcc>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	4319      	orrs	r1, r3
 8003d2e:	4b66      	ldr	r3, [pc, #408]	@ (8003ec8 <dhcpserver_fn+0xbd0>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	430b      	orrs	r3, r1
 8003d36:	4965      	ldr	r1, [pc, #404]	@ (8003ecc <dhcpserver_fn+0xbd4>)
 8003d38:	7809      	ldrb	r1, [r1, #0]
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003d42:	431a      	orrs	r2, r3
 8003d44:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec0 <dhcpserver_fn+0xbc8>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	0619      	lsls	r1, r3, #24
 8003d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec4 <dhcpserver_fn+0xbcc>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	4319      	orrs	r1, r3
 8003d52:	4b5d      	ldr	r3, [pc, #372]	@ (8003ec8 <dhcpserver_fn+0xbd0>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	495c      	ldr	r1, [pc, #368]	@ (8003ecc <dhcpserver_fn+0xbd4>)
 8003d5c:	7809      	ldrb	r1, [r1, #0]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003d66:	431a      	orrs	r2, r3
 8003d68:	4b55      	ldr	r3, [pc, #340]	@ (8003ec0 <dhcpserver_fn+0xbc8>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	0619      	lsls	r1, r3, #24
 8003d6e:	4b55      	ldr	r3, [pc, #340]	@ (8003ec4 <dhcpserver_fn+0xbcc>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	4319      	orrs	r1, r3
 8003d76:	4b54      	ldr	r3, [pc, #336]	@ (8003ec8 <dhcpserver_fn+0xbd0>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	4953      	ldr	r1, [pc, #332]	@ (8003ecc <dhcpserver_fn+0xbd4>)
 8003d80:	7809      	ldrb	r1, [r1, #0]
 8003d82:	430b      	orrs	r3, r1
 8003d84:	0e1b      	lsrs	r3, r3, #24
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d96:	f00c fea4 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	b299      	uxth	r1, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dac:	f00c fe99 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3302      	adds	r3, #2
 8003db6:	b299      	uxth	r1, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dc2:	f00c fe8e 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3303      	adds	r3, #3
 8003dcc:	b299      	uxth	r1, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dd8:	f00c fe83 	bl	8010ae2 <pbuf_put_at>
        options_offset += 4;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	3304      	adds	r3, #4
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	22ff      	movs	r2, #255	@ 0xff
 8003de8:	4619      	mov	r1, r3
 8003dea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dec:	f00c fe79 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	3301      	adds	r3, #1
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df6:	e03d      	b.n	8003e74 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8003df8:	2263      	movs	r2, #99	@ 0x63
 8003dfa:	21ec      	movs	r1, #236	@ 0xec
 8003dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dfe:	f00c fe70 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8003e02:	2282      	movs	r2, #130	@ 0x82
 8003e04:	21ed      	movs	r1, #237	@ 0xed
 8003e06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e08:	f00c fe6b 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8003e0c:	2253      	movs	r2, #83	@ 0x53
 8003e0e:	21ee      	movs	r1, #238	@ 0xee
 8003e10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e12:	f00c fe66 	bl	8010ae2 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8003e16:	2263      	movs	r2, #99	@ 0x63
 8003e18:	21ef      	movs	r1, #239	@ 0xef
 8003e1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e1c:	f00c fe61 	bl	8010ae2 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8003e20:	23f0      	movs	r3, #240	@ 0xf0
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2235      	movs	r2, #53	@ 0x35
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e2e:	f00c fe58 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	3301      	adds	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e42:	f00c fe4e 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	3301      	adds	r3, #1
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2206      	movs	r2, #6
 8003e52:	4619      	mov	r1, r3
 8003e54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e56:	f00c fe44 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	22ff      	movs	r2, #255	@ 0xff
 8003e66:	4619      	mov	r1, r3
 8003e68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e6a:	f00c fe3a 	bl	8010ae2 <pbuf_put_at>
        options_offset++;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	3301      	adds	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e7c:	f00c f98c 	bl	8010198 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8003e80:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <dhcpserver_fn+0xbd8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	f107 0214 	add.w	r2, r7, #20
 8003e88:	2344      	movs	r3, #68	@ 0x44
 8003e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e8c:	f012 fb48 	bl	8016520 <udp_sendto>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
      break;
 8003e94:	e006      	b.n	8003ea4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8003ea2:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8003eaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eac:	f00c fafa 	bl	80104a4 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f00c faf7 	bl	80104a4 <pbuf_free>
}
 8003eb6:	bf00      	nop
 8003eb8:	3730      	adds	r7, #48	@ 0x30
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000096 	.word	0x20000096
 8003ec4:	20000097 	.word	0x20000097
 8003ec8:	20000098 	.word	0x20000098
 8003ecc:	20000099 	.word	0x20000099
 8003ed0:	200005d4 	.word	0x200005d4

08003ed4 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e03d      	b.n	8003f5e <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8003ee2:	4933      	ldr	r1, [pc, #204]	@ (8003fb0 <dhcpserver_start_prv+0xdc>)
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	440b      	add	r3, r1
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8003ef4:	492e      	ldr	r1, [pc, #184]	@ (8003fb0 <dhcpserver_start_prv+0xdc>)
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	440b      	add	r3, r1
 8003f02:	3301      	adds	r3, #1
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8003f08:	4929      	ldr	r1, [pc, #164]	@ (8003fb0 <dhcpserver_start_prv+0xdc>)
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	440b      	add	r3, r1
 8003f16:	3302      	adds	r3, #2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8003f1c:	4924      	ldr	r1, [pc, #144]	@ (8003fb0 <dhcpserver_start_prv+0xdc>)
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	3303      	adds	r3, #3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8003f30:	491f      	ldr	r1, [pc, #124]	@ (8003fb0 <dhcpserver_start_prv+0xdc>)
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8003f44:	491a      	ldr	r1, [pc, #104]	@ (8003fb0 <dhcpserver_start_prv+0xdc>)
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	440b      	add	r3, r1
 8003f52:	3305      	adds	r3, #5
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	d9be      	bls.n	8003ee2 <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <dhcpserver_start_prv+0xe0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11e      	bne.n	8003faa <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 8003f6c:	f012 fe28 	bl	8016bc0 <udp_new>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4a10      	ldr	r2, [pc, #64]	@ (8003fb4 <dhcpserver_start_prv+0xe0>)
 8003f74:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8003f76:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <dhcpserver_start_prv+0xe0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <dhcpserver_start_prv+0xe0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2243      	movs	r2, #67	@ 0x43
 8003f84:	490c      	ldr	r1, [pc, #48]	@ (8003fb8 <dhcpserver_start_prv+0xe4>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f012 fc80 	bl	801688c <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <dhcpserver_start_prv+0xe0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	490a      	ldr	r1, [pc, #40]	@ (8003fbc <dhcpserver_start_prv+0xe8>)
 8003f92:	4618      	mov	r0, r3
 8003f94:	f012 fd02 	bl	801699c <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8003f98:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <dhcpserver_start_prv+0xe0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4908      	ldr	r1, [pc, #32]	@ (8003fc0 <dhcpserver_start_prv+0xec>)
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f012 fdab 	bl	8016afc <udp_recv>
 8003fa6:	e000      	b.n	8003faa <dhcpserver_start_prv+0xd6>
      return;
 8003fa8:	bf00      	nop
  }
}
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200005d8 	.word	0x200005d8
 8003fb4:	200005d4 	.word	0x200005d4
 8003fb8:	0806da60 	.word	0x0806da60
 8003fbc:	20000864 	.word	0x20000864
 8003fc0:	080032f9 	.word	0x080032f9

08003fc4 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4802      	ldr	r0, [pc, #8]	@ (8003fd4 <dhcpserver_start+0x10>)
 8003fcc:	f00a fc70 	bl	800e8b0 <tcpip_callback>
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	08003ed5 	.word	0x08003ed5

08003fd8 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <dhcpserver_stop_prv+0x34>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00c      	beq.n	8004002 <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8003fe8:	4b08      	ldr	r3, [pc, #32]	@ (800400c <dhcpserver_stop_prv+0x34>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f012 fd5d 	bl	8016aac <udp_disconnect>
    udp_remove(dhcp_pcb);
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <dhcpserver_stop_prv+0x34>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f012 fda0 	bl	8016b3c <udp_remove>
    dhcp_pcb = NULL;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <dhcpserver_stop_prv+0x34>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200005d4 	.word	0x200005d4

08004010 <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8004014:	2100      	movs	r1, #0
 8004016:	4802      	ldr	r0, [pc, #8]	@ (8004020 <dhcpserver_stop+0x10>)
 8004018:	f00a fc4a 	bl	800e8b0 <tcpip_callback>
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08003fd9 	.word	0x08003fd9

08004024 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2206      	movs	r2, #6
 8004030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3332      	adds	r3, #50	@ 0x32
 8004038:	2202      	movs	r2, #2
 800403a:	491b      	ldr	r1, [pc, #108]	@ (80040a8 <low_level_init+0x84>)
 800403c:	4618      	mov	r0, r3
 800403e:	f018 f9c1 	bl	801c3c4 <memcmp>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800404e:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <low_level_init+0x88>)
 8004050:	f203 2316 	addw	r3, r3, #534	@ 0x216
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	6011      	str	r1, [r2, #0]
 8004058:	889b      	ldrh	r3, [r3, #4]
 800405a:	8093      	strh	r3, [r2, #4]
 800405c:	e009      	b.n	8004072 <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8004064:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <low_level_init+0x88>)
 8004066:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	6010      	str	r0, [r2, #0]
 800406e:	889b      	ldrh	r3, [r3, #4]
 8004070:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004078:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004080:	f043 030a 	orr.w	r3, r3, #10
 8004084:	b2da      	uxtb	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	0801e4c4 	.word	0x0801e4c4
 80040ac:	20000608 	.word	0x20000608

080040b0 <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 80040ba:	4b37      	ldr	r3, [pc, #220]	@ (8004198 <low_level_output+0xe8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f04f 31ff 	mov.w	r1, #4294967295
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 fea8 	bl	800be18 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	891b      	ldrh	r3, [r3, #8]
 80040cc:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 80040ce:	f107 0008 	add.w	r0, r7, #8
 80040d2:	2200      	movs	r2, #0
 80040d4:	214a      	movs	r1, #74	@ 0x4a
 80040d6:	f005 fd1b 	bl	8009b10 <sl_wfx_allocate_command_buffer>
 80040da:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <low_level_output+0x38>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80040e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <low_level_output+0xe8>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	2300      	movs	r3, #0
 80040ee:	2200      	movs	r2, #0
 80040f0:	2100      	movs	r1, #0
 80040f2:	f007 fb7f 	bl	800b7f4 <xQueueGenericSend>
    return ERR_MEM;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	e049      	b.n	8004190 <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	3318      	adds	r3, #24
 8004100:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e010      	b.n	800412a <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	895b      	ldrh	r3, [r3, #10]
 8004110:	461a      	mov	r2, r3
 8004112:	6938      	ldr	r0, [r7, #16]
 8004114:	f018 fa23 	bl	801c55e <memcpy>
    buffer += q->len;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	895b      	ldrh	r3, [r3, #10]
 800411c:	461a      	mov	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1eb      	bne.n	8004108 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3332      	adds	r3, #50	@ 0x32
 8004134:	2202      	movs	r2, #2
 8004136:	4919      	ldr	r1, [pc, #100]	@ (800419c <low_level_output+0xec>)
 8004138:	4618      	mov	r0, r3
 800413a:	f018 f943 	bl	801c3c4 <memcmp>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	891a      	ldrh	r2, [r3, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <low_level_output+0xf0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <low_level_output+0xf0>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e002      	b.n	800416e <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a0d      	ldr	r2, [pc, #52]	@ (80041a0 <low_level_output+0xf0>)
 800416c:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4a0b      	ldr	r2, [pc, #44]	@ (80041a0 <low_level_output+0xf0>)
 8004172:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <low_level_output+0xf4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f007 f8d8 	bl	800b330 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <low_level_output+0xe8>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	f007 fb33 	bl	800b7f4 <xQueueGenericSend>
  
  return ERR_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200014b0 	.word	0x200014b0
 800419c:	0801e4c4 	.word	0x0801e4c4
 80041a0:	200014b4 	.word	0x200014b4
 80041a4:	200014ac 	.word	0x200014ac

080041a8 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	795b      	ldrb	r3, [r3, #5]
 80041b6:	461a      	mov	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4413      	add	r3, r2
 80041bc:	3308      	adds	r3, #8
 80041be:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	88db      	ldrh	r3, [r3, #6]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	88db      	ldrh	r3, [r3, #6]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80041d4:	4619      	mov	r1, r3
 80041d6:	2000      	movs	r0, #0
 80041d8:	f00b fe7c 	bl	800fed4 <pbuf_alloc>
 80041dc:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e010      	b.n	800420c <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6858      	ldr	r0, [r3, #4]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	895b      	ldrh	r3, [r3, #10]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	f018 f9b2 	bl	801c55e <memcpy>
      buffer += q->len;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	895b      	ldrh	r3, [r3, #10]
 80041fe:	461a      	mov	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1eb      	bne.n	80041ea <low_level_input+0x42>
    }
  }  
   
  return p;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	78db      	ldrb	r3, [r3, #3]
 8004228:	f003 0306 	and.w	r3, r3, #6
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 8004230:	4b0f      	ldr	r3, [pc, #60]	@ (8004270 <sl_wfx_host_received_frame_callback+0x54>)
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e001      	b.n	800423a <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8004236:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <sl_wfx_host_received_frame_callback+0x58>)
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d012      	beq.n	8004266 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff ffb0 	bl	80041a8 <low_level_input>
 8004248:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	68b8      	ldr	r0, [r7, #8]
 8004258:	4798      	blx	r3
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f00c f91f 	bl	80104a4 <pbuf_free>
      }
    }
  }
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2000082c 	.word	0x2000082c
 8004274:	20000864 	.word	0x20000864

08004278 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <sta_ethernetif_init+0x1a>
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <sta_ethernetif_init+0x44>)
 8004288:	22dc      	movs	r2, #220	@ 0xdc
 800428a:	490d      	ldr	r1, [pc, #52]	@ (80042c0 <sta_ethernetif_init+0x48>)
 800428c:	480d      	ldr	r0, [pc, #52]	@ (80042c4 <sta_ethernetif_init+0x4c>)
 800428e:	f017 ff47 	bl	801c120 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3332      	adds	r3, #50	@ 0x32
 8004296:	2202      	movs	r2, #2
 8004298:	490b      	ldr	r1, [pc, #44]	@ (80042c8 <sta_ethernetif_init+0x50>)
 800429a:	4618      	mov	r0, r3
 800429c:	f018 f95f 	bl	801c55e <memcpy>

  netif->output = etharp_output;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <sta_ethernetif_init+0x54>)
 80042a4:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <sta_ethernetif_init+0x58>)
 80042aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff feb9 	bl	8004024 <low_level_init>
  
  return ERR_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	0801e4c8 	.word	0x0801e4c8
 80042c0:	0801e4e4 	.word	0x0801e4e4
 80042c4:	0801e4f4 	.word	0x0801e4f4
 80042c8:	0801e4c4 	.word	0x0801e4c4
 80042cc:	08019315 	.word	0x08019315
 80042d0:	080040b1 	.word	0x080040b1

080042d4 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80042d8:	f001 f93e 	bl	8005558 <HAL_GetTick>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80042ec:	2100      	movs	r1, #0
 80042ee:	2000      	movs	r0, #0
 80042f0:	f00a fb6c 	bl	800e9cc <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 80042f4:	f000 f886 	bl	8004404 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <lwip_start_task_entry+0x44>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00d      	beq.n	800431c <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <lwip_start_task_entry+0x48>)
 8004302:	f107 040c 	add.w	r4, r7, #12
 8004306:	461d      	mov	r5, r3
 8004308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800430a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	4906      	ldr	r1, [pc, #24]	@ (8004330 <lwip_start_task_entry+0x4c>)
 8004316:	4618      	mov	r0, r3
 8004318:	f006 fd61 	bl	800adde <osThreadCreate>
  }

  wifi_autoconnexion_init();
 800431c:	f7fe fb2a 	bl	8002974 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 8004320:	2000      	movs	r0, #0
 8004322:	f006 fd83 	bl	800ae2c <osThreadTerminate>
 8004326:	e7fb      	b.n	8004320 <lwip_start_task_entry+0x3c>
 8004328:	2000008c 	.word	0x2000008c
 800432c:	0801e528 	.word	0x0801e528
 8004330:	2000082c 	.word	0x2000082c

08004334 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8004338:	2200      	movs	r2, #0
 800433a:	4909      	ldr	r1, [pc, #36]	@ (8004360 <lwip_set_sta_link_up+0x2c>)
 800433c:	4809      	ldr	r0, [pc, #36]	@ (8004364 <lwip_set_sta_link_up+0x30>)
 800433e:	f00a f981 	bl	800e644 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 8004342:	2200      	movs	r2, #0
 8004344:	4908      	ldr	r1, [pc, #32]	@ (8004368 <lwip_set_sta_link_up+0x34>)
 8004346:	4807      	ldr	r0, [pc, #28]	@ (8004364 <lwip_set_sta_link_up+0x30>)
 8004348:	f00a f97c 	bl	800e644 <netifapi_netif_common>
  if (use_dhcp_client) {
 800434c:	4b07      	ldr	r3, [pc, #28]	@ (800436c <lwip_set_sta_link_up+0x38>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 8004354:	2001      	movs	r0, #1
 8004356:	f7fe fbf9 	bl	8002b4c <dhcpclient_set_link_state>
  }
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800fb59 	.word	0x0800fb59
 8004364:	2000082c 	.word	0x2000082c
 8004368:	0800fc95 	.word	0x0800fc95
 800436c:	2000008c 	.word	0x2000008c

08004370 <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <lwip_set_sta_link_down+0x2c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 800437c:	2000      	movs	r0, #0
 800437e:	f7fe fbe5 	bl	8002b4c <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 8004382:	2200      	movs	r2, #0
 8004384:	4906      	ldr	r1, [pc, #24]	@ (80043a0 <lwip_set_sta_link_down+0x30>)
 8004386:	4807      	ldr	r0, [pc, #28]	@ (80043a4 <lwip_set_sta_link_down+0x34>)
 8004388:	f00a f95c 	bl	800e644 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 800438c:	2200      	movs	r2, #0
 800438e:	4906      	ldr	r1, [pc, #24]	@ (80043a8 <lwip_set_sta_link_down+0x38>)
 8004390:	4804      	ldr	r0, [pc, #16]	@ (80043a4 <lwip_set_sta_link_down+0x34>)
 8004392:	f00a f957 	bl	800e644 <netifapi_netif_common>
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000008c 	.word	0x2000008c
 80043a0:	0800fd05 	.word	0x0800fd05
 80043a4:	2000082c 	.word	0x2000082c
 80043a8:	0800fc31 	.word	0x0800fc31

080043ac <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 80043b0:	2200      	movs	r2, #0
 80043b2:	4906      	ldr	r1, [pc, #24]	@ (80043cc <lwip_set_ap_link_up+0x20>)
 80043b4:	4806      	ldr	r0, [pc, #24]	@ (80043d0 <lwip_set_ap_link_up+0x24>)
 80043b6:	f00a f945 	bl	800e644 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 80043ba:	2200      	movs	r2, #0
 80043bc:	4905      	ldr	r1, [pc, #20]	@ (80043d4 <lwip_set_ap_link_up+0x28>)
 80043be:	4804      	ldr	r0, [pc, #16]	@ (80043d0 <lwip_set_ap_link_up+0x24>)
 80043c0:	f00a f940 	bl	800e644 <netifapi_netif_common>
  dhcpserver_start();
 80043c4:	f7ff fdfe 	bl	8003fc4 <dhcpserver_start>
}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	0800fb59 	.word	0x0800fb59
 80043d0:	20000864 	.word	0x20000864
 80043d4:	0800fc95 	.word	0x0800fc95

080043d8 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 80043dc:	f7ff fe18 	bl	8004010 <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 80043e0:	2200      	movs	r2, #0
 80043e2:	4905      	ldr	r1, [pc, #20]	@ (80043f8 <lwip_set_ap_link_down+0x20>)
 80043e4:	4805      	ldr	r0, [pc, #20]	@ (80043fc <lwip_set_ap_link_down+0x24>)
 80043e6:	f00a f92d 	bl	800e644 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 80043ea:	2200      	movs	r2, #0
 80043ec:	4904      	ldr	r1, [pc, #16]	@ (8004400 <lwip_set_ap_link_down+0x28>)
 80043ee:	4803      	ldr	r0, [pc, #12]	@ (80043fc <lwip_set_ap_link_down+0x24>)
 80043f0:	f00a f928 	bl	800e644 <netifapi_netif_common>
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	0800fd05 	.word	0x0800fd05
 80043fc:	20000864 	.word	0x20000864
 8004400:	0800fc31 	.word	0x0800fc31

08004404 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	@ 0x28
 8004408:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 8004410:	4b9e      	ldr	r3, [pc, #632]	@ (800468c <netif_config+0x288>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 8004420:	2300      	movs	r3, #0
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	e0cb      	b.n	80045be <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8004426:	4b9a      	ldr	r3, [pc, #616]	@ (8004690 <netif_config+0x28c>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	061a      	lsls	r2, r3, #24
 800442c:	4b99      	ldr	r3, [pc, #612]	@ (8004694 <netif_config+0x290>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	4b98      	ldr	r3, [pc, #608]	@ (8004698 <netif_config+0x294>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	4313      	orrs	r3, r2
 800443c:	4a97      	ldr	r2, [pc, #604]	@ (800469c <netif_config+0x298>)
 800443e:	7812      	ldrb	r2, [r2, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	061a      	lsls	r2, r3, #24
 8004444:	4b92      	ldr	r3, [pc, #584]	@ (8004690 <netif_config+0x28c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	0619      	lsls	r1, r3, #24
 800444a:	4b92      	ldr	r3, [pc, #584]	@ (8004694 <netif_config+0x290>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	4319      	orrs	r1, r3
 8004452:	4b91      	ldr	r3, [pc, #580]	@ (8004698 <netif_config+0x294>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	430b      	orrs	r3, r1
 800445a:	4990      	ldr	r1, [pc, #576]	@ (800469c <netif_config+0x298>)
 800445c:	7809      	ldrb	r1, [r1, #0]
 800445e:	430b      	orrs	r3, r1
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004466:	431a      	orrs	r2, r3
 8004468:	4b89      	ldr	r3, [pc, #548]	@ (8004690 <netif_config+0x28c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	0619      	lsls	r1, r3, #24
 800446e:	4b89      	ldr	r3, [pc, #548]	@ (8004694 <netif_config+0x290>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	4319      	orrs	r1, r3
 8004476:	4b88      	ldr	r3, [pc, #544]	@ (8004698 <netif_config+0x294>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	430b      	orrs	r3, r1
 800447e:	4987      	ldr	r1, [pc, #540]	@ (800469c <netif_config+0x298>)
 8004480:	7809      	ldrb	r1, [r1, #0]
 8004482:	430b      	orrs	r3, r1
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800448a:	431a      	orrs	r2, r3
 800448c:	4b80      	ldr	r3, [pc, #512]	@ (8004690 <netif_config+0x28c>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	0619      	lsls	r1, r3, #24
 8004492:	4b80      	ldr	r3, [pc, #512]	@ (8004694 <netif_config+0x290>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	4319      	orrs	r1, r3
 800449a:	4b7f      	ldr	r3, [pc, #508]	@ (8004698 <netif_config+0x294>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	430b      	orrs	r3, r1
 80044a2:	497e      	ldr	r1, [pc, #504]	@ (800469c <netif_config+0x298>)
 80044a4:	7809      	ldrb	r1, [r1, #0]
 80044a6:	430b      	orrs	r3, r1
 80044a8:	0e1b      	lsrs	r3, r3, #24
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 80044ae:	4b7c      	ldr	r3, [pc, #496]	@ (80046a0 <netif_config+0x29c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	4b7b      	ldr	r3, [pc, #492]	@ (80046a4 <netif_config+0x2a0>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	4b7a      	ldr	r3, [pc, #488]	@ (80046a8 <netif_config+0x2a4>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	4313      	orrs	r3, r2
 80044c4:	4a79      	ldr	r2, [pc, #484]	@ (80046ac <netif_config+0x2a8>)
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	061a      	lsls	r2, r3, #24
 80044cc:	4b74      	ldr	r3, [pc, #464]	@ (80046a0 <netif_config+0x29c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	0619      	lsls	r1, r3, #24
 80044d2:	4b74      	ldr	r3, [pc, #464]	@ (80046a4 <netif_config+0x2a0>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	4319      	orrs	r1, r3
 80044da:	4b73      	ldr	r3, [pc, #460]	@ (80046a8 <netif_config+0x2a4>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	430b      	orrs	r3, r1
 80044e2:	4972      	ldr	r1, [pc, #456]	@ (80046ac <netif_config+0x2a8>)
 80044e4:	7809      	ldrb	r1, [r1, #0]
 80044e6:	430b      	orrs	r3, r1
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80044ee:	431a      	orrs	r2, r3
 80044f0:	4b6b      	ldr	r3, [pc, #428]	@ (80046a0 <netif_config+0x29c>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	0619      	lsls	r1, r3, #24
 80044f6:	4b6b      	ldr	r3, [pc, #428]	@ (80046a4 <netif_config+0x2a0>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	4319      	orrs	r1, r3
 80044fe:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <netif_config+0x2a4>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	430b      	orrs	r3, r1
 8004506:	4969      	ldr	r1, [pc, #420]	@ (80046ac <netif_config+0x2a8>)
 8004508:	7809      	ldrb	r1, [r1, #0]
 800450a:	430b      	orrs	r3, r1
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004512:	431a      	orrs	r2, r3
 8004514:	4b62      	ldr	r3, [pc, #392]	@ (80046a0 <netif_config+0x29c>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	0619      	lsls	r1, r3, #24
 800451a:	4b62      	ldr	r3, [pc, #392]	@ (80046a4 <netif_config+0x2a0>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	4319      	orrs	r1, r3
 8004522:	4b61      	ldr	r3, [pc, #388]	@ (80046a8 <netif_config+0x2a4>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	430b      	orrs	r3, r1
 800452a:	4960      	ldr	r1, [pc, #384]	@ (80046ac <netif_config+0x2a8>)
 800452c:	7809      	ldrb	r1, [r1, #0]
 800452e:	430b      	orrs	r3, r1
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	4313      	orrs	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8004536:	4b5e      	ldr	r3, [pc, #376]	@ (80046b0 <netif_config+0x2ac>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	061a      	lsls	r2, r3, #24
 800453c:	4b5d      	ldr	r3, [pc, #372]	@ (80046b4 <netif_config+0x2b0>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	4b5c      	ldr	r3, [pc, #368]	@ (80046b8 <netif_config+0x2b4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4313      	orrs	r3, r2
 800454c:	4a5b      	ldr	r2, [pc, #364]	@ (80046bc <netif_config+0x2b8>)
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	4313      	orrs	r3, r2
 8004552:	061a      	lsls	r2, r3, #24
 8004554:	4b56      	ldr	r3, [pc, #344]	@ (80046b0 <netif_config+0x2ac>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	0619      	lsls	r1, r3, #24
 800455a:	4b56      	ldr	r3, [pc, #344]	@ (80046b4 <netif_config+0x2b0>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	4319      	orrs	r1, r3
 8004562:	4b55      	ldr	r3, [pc, #340]	@ (80046b8 <netif_config+0x2b4>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	430b      	orrs	r3, r1
 800456a:	4954      	ldr	r1, [pc, #336]	@ (80046bc <netif_config+0x2b8>)
 800456c:	7809      	ldrb	r1, [r1, #0]
 800456e:	430b      	orrs	r3, r1
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004576:	431a      	orrs	r2, r3
 8004578:	4b4d      	ldr	r3, [pc, #308]	@ (80046b0 <netif_config+0x2ac>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	0619      	lsls	r1, r3, #24
 800457e:	4b4d      	ldr	r3, [pc, #308]	@ (80046b4 <netif_config+0x2b0>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	4319      	orrs	r1, r3
 8004586:	4b4c      	ldr	r3, [pc, #304]	@ (80046b8 <netif_config+0x2b4>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	430b      	orrs	r3, r1
 800458e:	494b      	ldr	r1, [pc, #300]	@ (80046bc <netif_config+0x2b8>)
 8004590:	7809      	ldrb	r1, [r1, #0]
 8004592:	430b      	orrs	r3, r1
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800459a:	431a      	orrs	r2, r3
 800459c:	4b44      	ldr	r3, [pc, #272]	@ (80046b0 <netif_config+0x2ac>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	0619      	lsls	r1, r3, #24
 80045a2:	4b44      	ldr	r3, [pc, #272]	@ (80046b4 <netif_config+0x2b0>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	4319      	orrs	r1, r3
 80045aa:	4b43      	ldr	r3, [pc, #268]	@ (80046b8 <netif_config+0x2b4>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	430b      	orrs	r3, r1
 80045b2:	4942      	ldr	r1, [pc, #264]	@ (80046bc <netif_config+0x2b8>)
 80045b4:	7809      	ldrb	r1, [r1, #0]
 80045b6:	430b      	orrs	r3, r1
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	4313      	orrs	r3, r2
 80045bc:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 80045be:	4840      	ldr	r0, [pc, #256]	@ (80046c0 <netif_config+0x2bc>)
 80045c0:	f004 fae4 	bl	8008b8c <sl_wfx_init>
 80045c4:	6138      	str	r0, [r7, #16]
  switch (status) {
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f640 3202 	movw	r2, #2818	@ 0xb02
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d034      	beq.n	800463a <netif_config+0x236>
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f640 3202 	movw	r2, #2818	@ 0xb02
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d83b      	bhi.n	8004652 <netif_config+0x24e>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f640 3201 	movw	r2, #2817	@ 0xb01
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d026      	beq.n	8004632 <netif_config+0x22e>
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f640 3201 	movw	r2, #2817	@ 0xb01
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d831      	bhi.n	8004652 <netif_config+0x24e>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b07      	cmp	r3, #7
 80045f2:	d026      	beq.n	8004642 <netif_config+0x23e>
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	d82b      	bhi.n	8004652 <netif_config+0x24e>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <netif_config+0x204>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d021      	beq.n	800464a <netif_config+0x246>
 8004606:	e024      	b.n	8004652 <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8004608:	4b2d      	ldr	r3, [pc, #180]	@ (80046c0 <netif_config+0x2bc>)
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8004610:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <netif_config+0x2bc>)
 8004612:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004616:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 8004618:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <netif_config+0x2bc>)
 800461a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 800461e:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 8004620:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <netif_config+0x2bc>)
 8004622:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8004626:	4827      	ldr	r0, [pc, #156]	@ (80046c4 <netif_config+0x2c0>)
 8004628:	f017 fd7a 	bl	801c120 <iprintf>
    res = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
    break;
 8004630:	e012      	b.n	8004658 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 8004632:	4825      	ldr	r0, [pc, #148]	@ (80046c8 <netif_config+0x2c4>)
 8004634:	f017 fddc 	bl	801c1f0 <puts>
    break;
 8004638:	e00e      	b.n	8004658 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 800463a:	4824      	ldr	r0, [pc, #144]	@ (80046cc <netif_config+0x2c8>)
 800463c:	f017 fdd8 	bl	801c1f0 <puts>
    break;
 8004640:	e00a      	b.n	8004658 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 8004642:	4823      	ldr	r0, [pc, #140]	@ (80046d0 <netif_config+0x2cc>)
 8004644:	f017 fdd4 	bl	801c1f0 <puts>
    break;
 8004648:	e006      	b.n	8004658 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 800464a:	4822      	ldr	r0, [pc, #136]	@ (80046d4 <netif_config+0x2d0>)
 800464c:	f017 fdd0 	bl	801c1f0 <puts>
    break;
 8004650:	e002      	b.n	8004658 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 8004652:	4821      	ldr	r0, [pc, #132]	@ (80046d8 <netif_config+0x2d4>)
 8004654:	f017 fdcc 	bl	801c1f0 <puts>
  }

  if (res == 0) {
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d110      	bne.n	8004680 <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	f107 0208 	add.w	r2, r7, #8
 8004664:	f107 010c 	add.w	r1, r7, #12
 8004668:	481c      	ldr	r0, [pc, #112]	@ (80046dc <netif_config+0x2d8>)
 800466a:	9002      	str	r0, [sp, #8]
 800466c:	481c      	ldr	r0, [pc, #112]	@ (80046e0 <netif_config+0x2dc>)
 800466e:	9001      	str	r0, [sp, #4]
 8004670:	2000      	movs	r0, #0
 8004672:	9000      	str	r0, [sp, #0]
 8004674:	481b      	ldr	r0, [pc, #108]	@ (80046e4 <netif_config+0x2e0>)
 8004676:	f00b f8a5 	bl	800f7c4 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 800467a:	481a      	ldr	r0, [pc, #104]	@ (80046e4 <netif_config+0x2e0>)
 800467c:	f00b fa5c 	bl	800fb38 <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2000008c 	.word	0x2000008c
 8004690:	20000090 	.word	0x20000090
 8004694:	20000091 	.word	0x20000091
 8004698:	200008ce 	.word	0x200008ce
 800469c:	20000092 	.word	0x20000092
 80046a0:	20000093 	.word	0x20000093
 80046a4:	20000094 	.word	0x20000094
 80046a8:	20000095 	.word	0x20000095
 80046ac:	200008cf 	.word	0x200008cf
 80046b0:	200008d0 	.word	0x200008d0
 80046b4:	200008d1 	.word	0x200008d1
 80046b8:	200008d2 	.word	0x200008d2
 80046bc:	200008d3 	.word	0x200008d3
 80046c0:	20000608 	.word	0x20000608
 80046c4:	0801e53c 	.word	0x0801e53c
 80046c8:	0801e568 	.word	0x0801e568
 80046cc:	0801e598 	.word	0x0801e598
 80046d0:	0801e5cc 	.word	0x0801e5cc
 80046d4:	0801e5fc 	.word	0x0801e5fc
 80046d8:	0801e61c 	.word	0x0801e61c
 80046dc:	0800e86d 	.word	0x0800e86d
 80046e0:	08004279 	.word	0x08004279
 80046e4:	2000082c 	.word	0x2000082c

080046e8 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <lwip_start+0x28>)
 80046f0:	1d3c      	adds	r4, r7, #4
 80046f2:	461d      	mov	r5, r3
 80046f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f006 fb6c 	bl	800adde <osThreadCreate>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bdb0      	pop	{r4, r5, r7, pc}
 800470e:	bf00      	nop
 8004710:	0801e650 	.word	0x0801e650

08004714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004718:	f000 feb8 	bl	800548c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800471c:	f000 f822 	bl	8004764 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004720:	f000 f958 	bl	80049d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004724:	f000 f936 	bl	8004994 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004728:	f000 f90a 	bl	8004940 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI3_Init();
 800472c:	f000 f8d0 	bl	80048d0 <MX_SPI3_Init>
  MX_SPI4_Init();
 8004730:	f000 f896 	bl	8004860 <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 8004734:	4809      	ldr	r0, [pc, #36]	@ (800475c <main+0x48>)
 8004736:	f017 fcf3 	bl	801c120 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 800473a:	4809      	ldr	r0, [pc, #36]	@ (8004760 <main+0x4c>)
 800473c:	f017 fd58 	bl	801c1f0 <puts>
  HAL_Delay(100);
 8004740:	2064      	movs	r0, #100	@ 0x64
 8004742:	f000 ff15 	bl	8005570 <HAL_Delay>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 8004746:	f006 fa31 	bl	800abac <sl_wfx_task_start>
  wifi_events_start();
 800474a:	f006 f8c1 	bl	800a8d0 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 800474e:	f7ff ffcb 	bl	80046e8 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 8004752:	f006 fb2d 	bl	800adb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <main+0x42>
 800475a:	bf00      	nop
 800475c:	0801e664 	.word	0x0801e664
 8004760:	0801e668 	.word	0x0801e668

08004764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b094      	sub	sp, #80	@ 0x50
 8004768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800476a:	f107 0320 	add.w	r3, r7, #32
 800476e:	2230      	movs	r2, #48	@ 0x30
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f017 fe36 	bl	801c3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <SystemClock_Config+0xf0>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	4a30      	ldr	r2, [pc, #192]	@ (8004854 <SystemClock_Config+0xf0>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004796:	6413      	str	r3, [r2, #64]	@ 0x40
 8004798:	4b2e      	ldr	r3, [pc, #184]	@ (8004854 <SystemClock_Config+0xf0>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a4:	2300      	movs	r3, #0
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <SystemClock_Config+0xf4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004858 <SystemClock_Config+0xf4>)
 80047ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b28      	ldr	r3, [pc, #160]	@ (8004858 <SystemClock_Config+0xf4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80047c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047ca:	2302      	movs	r3, #2
 80047cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80047d4:	2308      	movs	r3, #8
 80047d6:	643b      	str	r3, [r7, #64]	@ 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 80047d8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80047dc:	647b      	str	r3, [r7, #68]	@ 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80047de:	2304      	movs	r3, #4
 80047e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80047e2:	2308      	movs	r3, #8
 80047e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e6:	f107 0320 	add.w	r3, r7, #32
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 feda 	bl	80065a4 <HAL_RCC_OscConfig>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80047f6:	f000 f991 	bl	8004b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047fa:	230f      	movs	r3, #15
 80047fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047fe:	2302      	movs	r3, #2
 8004800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800480a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	2103      	movs	r1, #3
 8004816:	4618      	mov	r0, r3
 8004818:	f002 f93c 	bl	8006a94 <HAL_RCC_ClockConfig>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004822:	f000 f97b 	bl	8004b1c <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004826:	f002 fb21 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 800482a:	4603      	mov	r3, r0
 800482c:	4a0b      	ldr	r2, [pc, #44]	@ (800485c <SystemClock_Config+0xf8>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fff6 	bl	8005826 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800483a:	2004      	movs	r0, #4
 800483c:	f001 f800 	bl	8005840 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004840:	2200      	movs	r2, #0
 8004842:	210f      	movs	r1, #15
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	f000 ffb5 	bl	80057b6 <HAL_NVIC_SetPriority>

}
 800484c:	bf00      	nop
 800484e:	3750      	adds	r7, #80	@ 0x50
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40023800 	.word	0x40023800
 8004858:	40007000 	.word	0x40007000
 800485c:	10624dd3 	.word	0x10624dd3

08004860 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* SPI4 parameter configuration */
  hspi4.Instance = SPI4;
 8004864:	4b18      	ldr	r3, [pc, #96]	@ (80048c8 <MX_SPI4_Init+0x68>)
 8004866:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <MX_SPI4_Init+0x6c>)
 8004868:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800486a:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <MX_SPI4_Init+0x68>)
 800486c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004870:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004872:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <MX_SPI4_Init+0x68>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8004878:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <MX_SPI4_Init+0x68>)
 800487a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800487e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;  // Set CPOL = 0
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <MX_SPI4_Init+0x68>)
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;       // Set CPHA = 0
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <MX_SPI4_Init+0x68>)
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800488c:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <MX_SPI4_Init+0x68>)
 800488e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004892:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <MX_SPI4_Init+0x68>)
 8004896:	2210      	movs	r2, #16
 8004898:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800489a:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <MX_SPI4_Init+0x68>)
 800489c:	2200      	movs	r2, #0
 800489e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80048a0:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <MX_SPI4_Init+0x68>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a6:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <MX_SPI4_Init+0x68>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80048ac:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <MX_SPI4_Init+0x68>)
 80048ae:	220a      	movs	r2, #10
 80048b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80048b2:	4805      	ldr	r0, [pc, #20]	@ (80048c8 <MX_SPI4_Init+0x68>)
 80048b4:	f002 fb0e 	bl	8006ed4 <HAL_SPI_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_SPI4_Init+0x62>
  {
    Error_Handler();
 80048be:	f000 f92d 	bl	8004b1c <Error_Handler>
  }
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000974 	.word	0x20000974
 80048cc:	40013400 	.word	0x40013400

080048d0 <MX_SPI3_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi3.Instance = SPI3;
 80048d4:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048d6:	4a19      	ldr	r2, [pc, #100]	@ (800493c <MX_SPI3_Init+0x6c>)
 80048d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80048da:	4b17      	ldr	r3, [pc, #92]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80048e2:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80048e8:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f0:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048f6:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80048fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <MX_SPI3_Init+0x68>)
 80048fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004902:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <MX_SPI3_Init+0x68>)
 8004906:	2220      	movs	r2, #32
 8004908:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800490a:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <MX_SPI3_Init+0x68>)
 800490c:	2200      	movs	r2, #0
 800490e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <MX_SPI3_Init+0x68>)
 8004912:	2200      	movs	r2, #0
 8004914:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004916:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <MX_SPI3_Init+0x68>)
 8004918:	2200      	movs	r2, #0
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800491c:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <MX_SPI3_Init+0x68>)
 800491e:	220a      	movs	r2, #10
 8004920:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004922:	4805      	ldr	r0, [pc, #20]	@ (8004938 <MX_SPI3_Init+0x68>)
 8004924:	f002 fad6 	bl	8006ed4 <HAL_SPI_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <MX_SPI3_Init+0x62>
  {
	Error_Handler();
 800492e:	f000 f8f5 	bl	8004b1c <Error_Handler>
  }
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	2000091c 	.word	0x2000091c
 800493c:	40003c00 	.word	0x40003c00

08004940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004944:	4b11      	ldr	r3, [pc, #68]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 8004946:	4a12      	ldr	r2, [pc, #72]	@ (8004990 <MX_USART2_UART_Init+0x50>)
 8004948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800494a:	4b10      	ldr	r3, [pc, #64]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 800494c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8004950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004952:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 8004954:	2200      	movs	r2, #0
 8004956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004958:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 800495a:	2200      	movs	r2, #0
 800495c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 8004960:	2200      	movs	r2, #0
 8004962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004964:	4b09      	ldr	r3, [pc, #36]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 8004966:	220c      	movs	r2, #12
 8004968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496a:	4b08      	ldr	r3, [pc, #32]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 8004972:	2200      	movs	r2, #0
 8004974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004976:	4805      	ldr	r0, [pc, #20]	@ (800498c <MX_USART2_UART_Init+0x4c>)
 8004978:	f003 fab8 	bl	8007eec <HAL_UART_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004982:	f000 f8cb 	bl	8004b1c <Error_Handler>
  }
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200008d8 	.word	0x200008d8
 8004990:	40004400 	.word	0x40004400

08004994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <MX_DMA_Init+0x3c>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	4a0b      	ldr	r2, [pc, #44]	@ (80049d0 <MX_DMA_Init+0x3c>)
 80049a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049aa:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <MX_DMA_Init+0x3c>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	203b      	movs	r0, #59	@ 0x3b
 80049bc:	f000 fefb 	bl	80057b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80049c0:	203b      	movs	r0, #59	@ 0x3b
 80049c2:	f000 ff14 	bl	80057ee <HAL_NVIC_EnableIRQ>

}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	@ 0x28
 80049d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	609a      	str	r2, [r3, #8]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049fa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4a36      	ldr	r2, [pc, #216]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a16:	4b34      	ldr	r3, [pc, #208]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	4b30      	ldr	r3, [pc, #192]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a32:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	4b29      	ldr	r3, [pc, #164]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	4a28      	ldr	r2, [pc, #160]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4e:	4b26      	ldr	r3, [pc, #152]	@ (8004ae8 <MX_GPIO_Init+0x114>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	607b      	str	r3, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	4823      	ldr	r0, [pc, #140]	@ (8004aec <MX_GPIO_Init+0x118>)
 8004a60:	f001 fd62 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8004a64:	2200      	movs	r2, #0
 8004a66:	2101      	movs	r1, #1
 8004a68:	4821      	ldr	r0, [pc, #132]	@ (8004af0 <MX_GPIO_Init+0x11c>)
 8004a6a:	f001 fd5d 	bl	8006528 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 8004a6e:	2310      	movs	r3, #16
 8004a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a72:	2301      	movs	r3, #1
 8004a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	4619      	mov	r1, r3
 8004a84:	4819      	ldr	r0, [pc, #100]	@ (8004aec <MX_GPIO_Init+0x118>)
 8004a86:	f001 fae7 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 8004a9a:	f107 0314 	add.w	r3, r7, #20
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4813      	ldr	r0, [pc, #76]	@ (8004af0 <MX_GPIO_Init+0x11c>)
 8004aa2:	f001 fad9 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_WUP_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 8004aa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aaa:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aac:	2301      	movs	r3, #1
 8004aae:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	4619      	mov	r1, r3
 8004abe:	480d      	ldr	r0, [pc, #52]	@ (8004af4 <MX_GPIO_Init+0x120>)
 8004ac0:	f001 faca 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 8004ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4806      	ldr	r0, [pc, #24]	@ (8004af4 <MX_GPIO_Init+0x120>)
 8004adc:	f001 fabc 	bl	8006058 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8004ae0:	bf00      	nop
 8004ae2:	3728      	adds	r7, #40	@ 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40020000 	.word	0x40020000
 8004af0:	40020800 	.word	0x40020800
 8004af4:	40020400 	.word	0x40020400

08004af8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8004b00:	1d39      	adds	r1, r7, #4
 8004b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b06:	2201      	movs	r2, #1
 8004b08:	4803      	ldr	r0, [pc, #12]	@ (8004b18 <__io_putchar+0x20>)
 8004b0a:	f003 fa3c 	bl	8007f86 <HAL_UART_Transmit>

  return ch;
 8004b0e:	687b      	ldr	r3, [r7, #4]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200008d8 	.word	0x200008d8

08004b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b20:	b672      	cpsid	i
}
 8004b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <Error_Handler+0x8>

08004b28 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi4_rx;
extern DMA_HandleTypeDef hdma_spi3_rx;


void HAL_MspInit(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	4b25      	ldr	r3, [pc, #148]	@ (8004bc8 <HAL_MspInit+0xa0>)
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	4a24      	ldr	r2, [pc, #144]	@ (8004bc8 <HAL_MspInit+0xa0>)
 8004b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b3e:	4b22      	ldr	r3, [pc, #136]	@ (8004bc8 <HAL_MspInit+0xa0>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc8 <HAL_MspInit+0xa0>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc8 <HAL_MspInit+0xa0>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <HAL_MspInit+0xa0>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b66:	2003      	movs	r0, #3
 8004b68:	f000 fe1a 	bl	80057a0 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f06f 000b 	mvn.w	r0, #11
 8004b74:	f000 fe1f 	bl	80057b6 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	f06f 000a 	mvn.w	r0, #10
 8004b80:	f000 fe19 	bl	80057b6 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004b84:	2200      	movs	r2, #0
 8004b86:	2100      	movs	r1, #0
 8004b88:	f06f 0009 	mvn.w	r0, #9
 8004b8c:	f000 fe13 	bl	80057b6 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004b90:	2200      	movs	r2, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	f06f 0004 	mvn.w	r0, #4
 8004b98:	f000 fe0d 	bl	80057b6 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	f06f 0003 	mvn.w	r0, #3
 8004ba4:	f000 fe07 	bl	80057b6 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	210f      	movs	r1, #15
 8004bac:	f06f 0001 	mvn.w	r0, #1
 8004bb0:	f000 fe01 	bl	80057b6 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	210f      	movs	r1, #15
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	f000 fdfb 	bl	80057b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800

08004bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b090      	sub	sp, #64	@ 0x40
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4aa7      	ldr	r2, [pc, #668]	@ (8004e88 <HAL_SPI_MspInit+0x2bc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f040 80a1 	bne.w	8004d32 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf4:	4ba5      	ldr	r3, [pc, #660]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf8:	4aa4      	ldr	r2, [pc, #656]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004bfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c00:	4ba2      	ldr	r3, [pc, #648]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c10:	4b9e      	ldr	r3, [pc, #632]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	4a9d      	ldr	r2, [pc, #628]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c1c:	4b9b      	ldr	r3, [pc, #620]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8004c28:	23e0      	movs	r3, #224	@ 0xe0
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c38:	2305      	movs	r3, #5
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c40:	4619      	mov	r1, r3
 8004c42:	4893      	ldr	r0, [pc, #588]	@ (8004e90 <HAL_SPI_MspInit+0x2c4>)
 8004c44:	f001 fa08 	bl	8006058 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004c48:	4b92      	ldr	r3, [pc, #584]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c4a:	4a93      	ldr	r2, [pc, #588]	@ (8004e98 <HAL_SPI_MspInit+0x2cc>)
 8004c4c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004c4e:	4b91      	ldr	r3, [pc, #580]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c50:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004c54:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c56:	4b8f      	ldr	r3, [pc, #572]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c62:	4b8c      	ldr	r3, [pc, #560]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c68:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c70:	4b88      	ldr	r3, [pc, #544]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004c76:	4b87      	ldr	r3, [pc, #540]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c7c:	4b85      	ldr	r3, [pc, #532]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c82:	4b84      	ldr	r3, [pc, #528]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004c88:	4882      	ldr	r0, [pc, #520]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c8a:	f000 fdf5 	bl	8005878 <HAL_DMA_Init>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004c94:	f7ff ff42 	bl	8004b1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004c9c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e94 <HAL_SPI_MspInit+0x2c8>)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8004ca4:	4b7d      	ldr	r3, [pc, #500]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ea0 <HAL_SPI_MspInit+0x2d4>)
 8004ca8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8004caa:	4b7c      	ldr	r3, [pc, #496]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004cb0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cb4:	2240      	movs	r2, #64	@ 0x40
 8004cb6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb8:	4b78      	ldr	r3, [pc, #480]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cbe:	4b77      	ldr	r3, [pc, #476]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cc4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cc6:	4b75      	ldr	r3, [pc, #468]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ccc:	4b73      	ldr	r3, [pc, #460]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004cd2:	4b72      	ldr	r3, [pc, #456]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cd8:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cde:	4b6f      	ldr	r3, [pc, #444]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004ce4:	486d      	ldr	r0, [pc, #436]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004ce6:	f000 fdc7 	bl	8005878 <HAL_DMA_Init>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004cf0:	f7ff ff14 	bl	8004b1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a69      	ldr	r2, [pc, #420]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cf8:	649a      	str	r2, [r3, #72]	@ 0x48
 8004cfa:	4a68      	ldr	r2, [pc, #416]	@ (8004e9c <HAL_SPI_MspInit+0x2d0>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8004d00:	2201      	movs	r2, #1
 8004d02:	210a      	movs	r1, #10
 8004d04:	2038      	movs	r0, #56	@ 0x38
 8004d06:	f000 fd56 	bl	80057b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004d0a:	2038      	movs	r0, #56	@ 0x38
 8004d0c:	f000 fd6f 	bl	80057ee <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8004d10:	2200      	movs	r2, #0
 8004d12:	210a      	movs	r1, #10
 8004d14:	203a      	movs	r0, #58	@ 0x3a
 8004d16:	f000 fd4e 	bl	80057b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004d1a:	203a      	movs	r0, #58	@ 0x3a
 8004d1c:	f000 fd67 	bl	80057ee <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8004d20:	2202      	movs	r2, #2
 8004d22:	210a      	movs	r1, #10
 8004d24:	2023      	movs	r0, #35	@ 0x23
 8004d26:	f000 fd46 	bl	80057b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004d2a:	2023      	movs	r0, #35	@ 0x23
 8004d2c:	f000 fd5f 	bl	80057ee <HAL_NVIC_EnableIRQ>
          /* USER CODE BEGIN SPI3_MspInit 1 */

          /* USER CODE END SPI3_MspInit 1 */
      }

}
 8004d30:	e10e      	b.n	8004f50 <HAL_SPI_MspInit+0x384>
  else if(hspi->Instance==SPI4)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_SPI_MspInit+0x2d8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	f040 80bb 	bne.w	8004eb4 <HAL_SPI_MspInit+0x2e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	4b52      	ldr	r3, [pc, #328]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	4a51      	ldr	r2, [pc, #324]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d56:	623b      	str	r3, [r7, #32]
 8004d58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	4a4a      	ldr	r2, [pc, #296]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6a:	4b48      	ldr	r3, [pc, #288]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	4b44      	ldr	r3, [pc, #272]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	4a43      	ldr	r2, [pc, #268]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d86:	4b41      	ldr	r3, [pc, #260]	@ (8004e8c <HAL_SPI_MspInit+0x2c0>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 8004d92:	2302      	movs	r3, #2
 8004d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d96:	2302      	movs	r3, #2
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004da2:	2305      	movs	r3, #5
 8004da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8004da6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004daa:	4619      	mov	r1, r3
 8004dac:	4838      	ldr	r0, [pc, #224]	@ (8004e90 <HAL_SPI_MspInit+0x2c4>)
 8004dae:	f001 f953 	bl	8006058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_MISO_Pin;
 8004db2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db8:	2302      	movs	r3, #2
 8004dba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004dc4:	2306      	movs	r3, #6
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MISO_Port, &GPIO_InitStruct);
 8004dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4830      	ldr	r0, [pc, #192]	@ (8004e90 <HAL_SPI_MspInit+0x2c4>)
 8004dd0:	f001 f942 	bl	8006058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 8004dd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de2:	2303      	movs	r3, #3
 8004de4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004de6:	2306      	movs	r3, #6
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8004dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dee:	4619      	mov	r1, r3
 8004df0:	482d      	ldr	r0, [pc, #180]	@ (8004ea8 <HAL_SPI_MspInit+0x2dc>)
 8004df2:	f001 f931 	bl	8006058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8004df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e04:	2303      	movs	r3, #3
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8004e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4826      	ldr	r0, [pc, #152]	@ (8004ea8 <HAL_SPI_MspInit+0x2dc>)
 8004e10:	f001 f922 	bl	8006058 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8004e14:	4b25      	ldr	r3, [pc, #148]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e16:	4a26      	ldr	r2, [pc, #152]	@ (8004eb0 <HAL_SPI_MspInit+0x2e4>)
 8004e18:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e1c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004e20:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e22:	4b22      	ldr	r3, [pc, #136]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e28:	4b20      	ldr	r3, [pc, #128]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e34:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e36:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e3c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e44:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8004e46:	4b19      	ldr	r3, [pc, #100]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e4c:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e52:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e54:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8004e5a:	4814      	ldr	r0, [pc, #80]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e5c:	f000 fd0c 	bl	8005878 <HAL_DMA_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_SPI_MspInit+0x29e>
      Error_Handler();
 8004e66:	f7ff fe59 	bl	8004b1c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e70:	4a0e      	ldr	r2, [pc, #56]	@ (8004eac <HAL_SPI_MspInit+0x2e0>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004e76:	2200      	movs	r2, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	203b      	movs	r0, #59	@ 0x3b
 8004e7c:	f000 fc9b 	bl	80057b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004e80:	203b      	movs	r0, #59	@ 0x3b
 8004e82:	f000 fcb4 	bl	80057ee <HAL_NVIC_EnableIRQ>
}
 8004e86:	e063      	b.n	8004f50 <HAL_SPI_MspInit+0x384>
 8004e88:	40013000 	.word	0x40013000
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40020000 	.word	0x40020000
 8004e94:	20001444 	.word	0x20001444
 8004e98:	40026410 	.word	0x40026410
 8004e9c:	200013e4 	.word	0x200013e4
 8004ea0:	40026440 	.word	0x40026440
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40020400 	.word	0x40020400
 8004eac:	200009cc 	.word	0x200009cc
 8004eb0:	40026458 	.word	0x40026458
  else if (hspi->Instance == SPI3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	@ (8004f58 <HAL_SPI_MspInit+0x38c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d148      	bne.n	8004f50 <HAL_SPI_MspInit+0x384>
	  __HAL_RCC_SPI3_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	4b26      	ldr	r3, [pc, #152]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	4a25      	ldr	r2, [pc, #148]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ece:	4b23      	ldr	r3, [pc, #140]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eea:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f06:	4b15      	ldr	r3, [pc, #84]	@ (8004f5c <HAL_SPI_MspInit+0x390>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = RHS_SPI_CLK_Pin | RHS_SPI_MISO_Pin | RHS_SPI_MOSI_Pin;
 8004f12:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f20:	2303      	movs	r3, #3
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004f24:	2306      	movs	r3, #6
 8004f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	480c      	ldr	r0, [pc, #48]	@ (8004f60 <HAL_SPI_MspInit+0x394>)
 8004f30:	f001 f892 	bl	8006058 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin   = RHS_SPI_CS_Pin;
 8004f34:	2304      	movs	r3, #4
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f40:	2303      	movs	r3, #3
 8004f42:	63bb      	str	r3, [r7, #56]	@ 0x38
	  HAL_GPIO_Init(RHS_SPI_CS_Port, &GPIO_InitStruct);
 8004f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4806      	ldr	r0, [pc, #24]	@ (8004f64 <HAL_SPI_MspInit+0x398>)
 8004f4c:	f001 f884 	bl	8006058 <HAL_GPIO_Init>
}
 8004f50:	bf00      	nop
 8004f52:	3740      	adds	r7, #64	@ 0x40
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40003c00 	.word	0x40003c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40020800 	.word	0x40020800
 8004f64:	40020c00 	.word	0x40020c00

08004f68 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe8 <HAL_SPI_MspDeInit+0x80>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d114      	bne.n	8004fa4 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fec <HAL_SPI_MspDeInit+0x84>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fec <HAL_SPI_MspDeInit+0x84>)
 8004f80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f84:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8004f86:	21e0      	movs	r1, #224	@ 0xe0
 8004f88:	4819      	ldr	r0, [pc, #100]	@ (8004ff0 <HAL_SPI_MspDeInit+0x88>)
 8004f8a:	f001 f9e9 	bl	8006360 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fd1e 	bl	80059d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fd19 	bl	80059d4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8004fa2:	e01d      	b.n	8004fe0 <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a12      	ldr	r2, [pc, #72]	@ (8004ff4 <HAL_SPI_MspDeInit+0x8c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d118      	bne.n	8004fe0 <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8004fae:	4b0f      	ldr	r3, [pc, #60]	@ (8004fec <HAL_SPI_MspDeInit+0x84>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004fec <HAL_SPI_MspDeInit+0x84>)
 8004fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fb8:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 8004fba:	2102      	movs	r1, #2
 8004fbc:	480c      	ldr	r0, [pc, #48]	@ (8004ff0 <HAL_SPI_MspDeInit+0x88>)
 8004fbe:	f001 f9cf 	bl	8006360 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 8004fc2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004fc6:	480c      	ldr	r0, [pc, #48]	@ (8004ff8 <HAL_SPI_MspDeInit+0x90>)
 8004fc8:	f001 f9ca 	bl	8006360 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fcff 	bl	80059d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fcfa 	bl	80059d4 <HAL_DMA_DeInit>
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40013000 	.word	0x40013000
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	40013400 	.word	0x40013400
 8004ff8:	40020400 	.word	0x40020400

08004ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	@ 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	@ (8005080 <HAL_UART_MspInit+0x84>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d12b      	bne.n	8005076 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	4b18      	ldr	r3, [pc, #96]	@ (8005084 <HAL_UART_MspInit+0x88>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	4a17      	ldr	r2, [pc, #92]	@ (8005084 <HAL_UART_MspInit+0x88>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502c:	6413      	str	r3, [r2, #64]	@ 0x40
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <HAL_UART_MspInit+0x88>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <HAL_UART_MspInit+0x88>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	4a10      	ldr	r2, [pc, #64]	@ (8005084 <HAL_UART_MspInit+0x88>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6313      	str	r3, [r2, #48]	@ 0x30
 800504a:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <HAL_UART_MspInit+0x88>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005056:	230c      	movs	r3, #12
 8005058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800505a:	2302      	movs	r3, #2
 800505c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005062:	2303      	movs	r3, #3
 8005064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005066:	2307      	movs	r3, #7
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	4619      	mov	r1, r3
 8005070:	4805      	ldr	r0, [pc, #20]	@ (8005088 <HAL_UART_MspInit+0x8c>)
 8005072:	f000 fff1 	bl	8006058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005076:	bf00      	nop
 8005078:	3728      	adds	r7, #40	@ 0x28
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40004400 	.word	0x40004400
 8005084:	40023800 	.word	0x40023800
 8005088:	40020000 	.word	0x40020000

0800508c <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8005090:	4802      	ldr	r0, [pc, #8]	@ (800509c <SPI1_IRQHandler+0x10>)
 8005092:	f002 fb87 	bl	80077a4 <HAL_SPI_IRQHandler>
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000138c 	.word	0x2000138c

080050a0 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_SPI_TxCpltCallback+0x3c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f107 020c 	add.w	r2, r7, #12
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f006 fd3c 	bl	800bb34 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_SPI_TxCpltCallback+0x32>
 80050c2:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <HAL_SPI_TxCpltCallback+0x40>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200014a4 	.word	0x200014a4
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <HAL_SPI_RxCpltCallback+0x84>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d112      	bne.n	8005120 <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80050fa:	4b1c      	ldr	r3, [pc, #112]	@ (800516c <HAL_SPI_RxCpltCallback+0x88>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f107 020c 	add.w	r2, r7, #12
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f006 fd15 	bl	800bb34 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <HAL_SPI_RxCpltCallback+0x3c>
 8005110:	4b17      	ldr	r3, [pc, #92]	@ (8005170 <HAL_SPI_RxCpltCallback+0x8c>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <HAL_SPI_RxCpltCallback+0x90>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d119      	bne.n	800515e <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 800512a:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <HAL_SPI_RxCpltCallback+0x94>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3301      	adds	r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	bfb8      	it	lt
 800513a:	425b      	neglt	r3, r3
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <HAL_SPI_RxCpltCallback+0x94>)
 8005140:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <HAL_SPI_RxCpltCallback+0x94>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	01db      	lsls	r3, r3, #7
 800514a:	4a0c      	ldr	r2, [pc, #48]	@ (800517c <HAL_SPI_RxCpltCallback+0x98>)
 800514c:	4413      	add	r3, r2
 800514e:	2240      	movs	r2, #64	@ 0x40
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f002 f962 	bl	800741c <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_SPI_RxCpltCallback+0x9c>)
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
	}
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40013000 	.word	0x40013000
 800516c:	200014a4 	.word	0x200014a4
 8005170:	e000ed04 	.word	0xe000ed04
 8005174:	40013400 	.word	0x40013400
 8005178:	200002a9 	.word	0x200002a9
 800517c:	200002ac 	.word	0x200002ac
 8005180:	200002a8 	.word	0x200002a8

08005184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <NMI_Handler+0x4>

0800518c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005190:	bf00      	nop
 8005192:	e7fd      	b.n	8005190 <HardFault_Handler+0x4>

08005194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <MemManage_Handler+0x4>

0800519c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <BusFault_Handler+0x4>

080051a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <UsageFault_Handler+0x4>

080051ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051be:	f000 f9b7 	bl	8005530 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80051c2:	f008 f84b 	bl	800d25c <xTaskGetSchedulerState>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80051cc:	f008 ff9c 	bl	800e108 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 80051d0:	f005 ffba 	bl	800b148 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80051de:	2300      	movs	r3, #0
 80051e0:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 80051e2:	4b15      	ldr	r3, [pc, #84]	@ (8005238 <EXTI15_10_IRQHandler+0x60>)
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d011      	beq.n	8005212 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 80051ee:	4b13      	ldr	r3, [pc, #76]	@ (800523c <EXTI15_10_IRQHandler+0x64>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 80051f6:	4b11      	ldr	r3, [pc, #68]	@ (800523c <EXTI15_10_IRQHandler+0x64>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1d3a      	adds	r2, r7, #4
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f006 fc98 	bl	800bb34 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8005204:	4b0e      	ldr	r3, [pc, #56]	@ (8005240 <EXTI15_10_IRQHandler+0x68>)
 8005206:	6819      	ldr	r1, [r3, #0]
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	2202      	movs	r2, #2
 800520c:	480d      	ldr	r0, [pc, #52]	@ (8005244 <EXTI15_10_IRQHandler+0x6c>)
 800520e:	f008 fd9b 	bl	800dd48 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 8005212:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005216:	f001 f9a1 	bl	800655c <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <EXTI15_10_IRQHandler+0x58>
 8005220:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <EXTI15_10_IRQHandler+0x70>)
 8005222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy

}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40013c00 	.word	0x40013c00
 800523c:	20001370 	.word	0x20001370
 8005240:	200014ac 	.word	0x200014ac
 8005244:	0800b449 	.word	0x0800b449
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005250:	4802      	ldr	r0, [pc, #8]	@ (800525c <DMA2_Stream0_IRQHandler+0x10>)
 8005252:	f000 fc97 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20001444 	.word	0x20001444

08005260 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005264:	4802      	ldr	r0, [pc, #8]	@ (8005270 <DMA2_Stream2_IRQHandler+0x10>)
 8005266:	f000 fc8d 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200013e4 	.word	0x200013e4

08005274 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8005278:	4802      	ldr	r0, [pc, #8]	@ (8005284 <DMA2_Stream3_IRQHandler+0x10>)
 800527a:	f000 fc83 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200009cc 	.word	0x200009cc

08005288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
	return 1;
 800528c:	2301      	movs	r3, #1
}
 800528e:	4618      	mov	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <_kill>:

int _kill(int pid, int sig)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80052a2:	f017 f927 	bl	801c4f4 <__errno>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2216      	movs	r2, #22
 80052aa:	601a      	str	r2, [r3, #0]
	return -1;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <_exit>:

void _exit (int status)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80052c0:	f04f 31ff 	mov.w	r1, #4294967295
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ffe7 	bl	8005298 <_kill>
	while (1) {}		/* Make sure we hang here */
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <_exit+0x12>

080052ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e00a      	b.n	80052f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80052e0:	f3af 8000 	nop.w
 80052e4:	4601      	mov	r1, r0
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	60ba      	str	r2, [r7, #8]
 80052ec:	b2ca      	uxtb	r2, r1
 80052ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3301      	adds	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	dbf0      	blt.n	80052e0 <_read+0x12>
	}

return len;
 80052fe:	687b      	ldr	r3, [r7, #4]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e009      	b.n	800532e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	60ba      	str	r2, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fbe8 	bl	8004af8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3301      	adds	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	dbf1      	blt.n	800531a <_write+0x12>
	}
	return len;
 8005336:	687b      	ldr	r3, [r7, #4]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <_close>:

int _close(int file)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	return -1;
 8005348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005368:	605a      	str	r2, [r3, #4]
	return 0;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_isatty>:

int _isatty(int file)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	return 1;
 8005380:	2301      	movs	r3, #1
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
	return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053b0:	4a14      	ldr	r2, [pc, #80]	@ (8005404 <_sbrk+0x5c>)
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <_sbrk+0x60>)
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053bc:	4b13      	ldr	r3, [pc, #76]	@ (800540c <_sbrk+0x64>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053c4:	4b11      	ldr	r3, [pc, #68]	@ (800540c <_sbrk+0x64>)
 80053c6:	4a12      	ldr	r2, [pc, #72]	@ (8005410 <_sbrk+0x68>)
 80053c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053ca:	4b10      	ldr	r3, [pc, #64]	@ (800540c <_sbrk+0x64>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d207      	bcs.n	80053e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053d8:	f017 f88c 	bl	801c4f4 <__errno>
 80053dc:	4603      	mov	r3, r0
 80053de:	220c      	movs	r2, #12
 80053e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e009      	b.n	80053fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053e8:	4b08      	ldr	r3, [pc, #32]	@ (800540c <_sbrk+0x64>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ee:	4b07      	ldr	r3, [pc, #28]	@ (800540c <_sbrk+0x64>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4413      	add	r3, r2
 80053f6:	4a05      	ldr	r2, [pc, #20]	@ (800540c <_sbrk+0x64>)
 80053f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053fa:	68fb      	ldr	r3, [r7, #12]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20020000 	.word	0x20020000
 8005408:	00000400 	.word	0x00000400
 800540c:	20000a2c 	.word	0x20000a2c
 8005410:	20013ff8 	.word	0x20013ff8

08005414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005418:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <SystemInit+0x20>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	4a05      	ldr	r2, [pc, #20]	@ (8005434 <SystemInit+0x20>)
 8005420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005428:	bf00      	nop
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800543c:	480d      	ldr	r0, [pc, #52]	@ (8005474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800543e:	490e      	ldr	r1, [pc, #56]	@ (8005478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005440:	4a0e      	ldr	r2, [pc, #56]	@ (800547c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005444:	e002      	b.n	800544c <LoopCopyDataInit>

08005446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800544a:	3304      	adds	r3, #4

0800544c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800544c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800544e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005450:	d3f9      	bcc.n	8005446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005452:	4a0b      	ldr	r2, [pc, #44]	@ (8005480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005454:	4c0b      	ldr	r4, [pc, #44]	@ (8005484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005458:	e001      	b.n	800545e <LoopFillZerobss>

0800545a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800545a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800545c:	3204      	adds	r2, #4

0800545e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800545e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005460:	d3fb      	bcc.n	800545a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005462:	f7ff ffd7 	bl	8005414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005466:	f017 f84b 	bl	801c500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800546a:	f7ff f953 	bl	8004714 <main>
  bx  lr    
 800546e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005478:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800547c:	0806de54 	.word	0x0806de54
  ldr r2, =_sbss
 8005480:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8005484:	20013ff4 	.word	0x20013ff4

08005488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005488:	e7fe      	b.n	8005488 <ADC_IRQHandler>
	...

0800548c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <HAL_Init+0x40>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a0d      	ldr	r2, [pc, #52]	@ (80054cc <HAL_Init+0x40>)
 8005496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800549a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800549c:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <HAL_Init+0x40>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0a      	ldr	r2, [pc, #40]	@ (80054cc <HAL_Init+0x40>)
 80054a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a8:	4b08      	ldr	r3, [pc, #32]	@ (80054cc <HAL_Init+0x40>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a07      	ldr	r2, [pc, #28]	@ (80054cc <HAL_Init+0x40>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b4:	2003      	movs	r0, #3
 80054b6:	f000 f973 	bl	80057a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ba:	200f      	movs	r0, #15
 80054bc:	f000 f808 	bl	80054d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054c0:	f7ff fb32 	bl	8004b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023c00 	.word	0x40023c00

080054d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054d8:	4b12      	ldr	r3, [pc, #72]	@ (8005524 <HAL_InitTick+0x54>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <HAL_InitTick+0x58>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f999 	bl	8005826 <HAL_SYSTICK_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00e      	b.n	800551c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d80a      	bhi.n	800551a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005504:	2200      	movs	r2, #0
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	f000 f953 	bl	80057b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005510:	4a06      	ldr	r2, [pc, #24]	@ (800552c <HAL_InitTick+0x5c>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200000a0 	.word	0x200000a0
 8005528:	200000a8 	.word	0x200000a8
 800552c:	200000a4 	.word	0x200000a4

08005530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <HAL_IncTick+0x20>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <HAL_IncTick+0x24>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4413      	add	r3, r2
 8005540:	4a04      	ldr	r2, [pc, #16]	@ (8005554 <HAL_IncTick+0x24>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	200000a8 	.word	0x200000a8
 8005554:	20000a30 	.word	0x20000a30

08005558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return uwTick;
 800555c:	4b03      	ldr	r3, [pc, #12]	@ (800556c <HAL_GetTick+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000a30 	.word	0x20000a30

08005570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7ff ffee 	bl	8005558 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d005      	beq.n	8005596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <HAL_Delay+0x44>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005596:	bf00      	nop
 8005598:	f7ff ffde 	bl	8005558 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d8f7      	bhi.n	8005598 <HAL_Delay+0x28>
  {
  }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200000a8 	.word	0x200000a8

080055b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055c8:	4b0c      	ldr	r3, [pc, #48]	@ (80055fc <__NVIC_SetPriorityGrouping+0x44>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055ea:	4a04      	ldr	r2, [pc, #16]	@ (80055fc <__NVIC_SetPriorityGrouping+0x44>)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	60d3      	str	r3, [r2, #12]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005604:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <__NVIC_GetPriorityGrouping+0x18>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	0a1b      	lsrs	r3, r3, #8
 800560a:	f003 0307 	and.w	r3, r3, #7
}
 800560e:	4618      	mov	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562a:	2b00      	cmp	r3, #0
 800562c:	db0b      	blt.n	8005646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	f003 021f 	and.w	r2, r3, #31
 8005634:	4907      	ldr	r1, [pc, #28]	@ (8005654 <__NVIC_EnableIRQ+0x38>)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2001      	movs	r0, #1
 800563e:	fa00 f202 	lsl.w	r2, r0, r2
 8005642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	e000e100 	.word	0xe000e100

08005658 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	2b00      	cmp	r3, #0
 8005668:	db12      	blt.n	8005690 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	f003 021f 	and.w	r2, r3, #31
 8005670:	490a      	ldr	r1, [pc, #40]	@ (800569c <__NVIC_DisableIRQ+0x44>)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	2001      	movs	r0, #1
 800567a:	fa00 f202 	lsl.w	r2, r0, r2
 800567e:	3320      	adds	r3, #32
 8005680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005684:	f3bf 8f4f 	dsb	sy
}
 8005688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800568a:	f3bf 8f6f 	isb	sy
}
 800568e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	e000e100 	.word	0xe000e100

080056a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	6039      	str	r1, [r7, #0]
 80056aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db0a      	blt.n	80056ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	490c      	ldr	r1, [pc, #48]	@ (80056ec <__NVIC_SetPriority+0x4c>)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	0112      	lsls	r2, r2, #4
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	440b      	add	r3, r1
 80056c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056c8:	e00a      	b.n	80056e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4908      	ldr	r1, [pc, #32]	@ (80056f0 <__NVIC_SetPriority+0x50>)
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	3b04      	subs	r3, #4
 80056d8:	0112      	lsls	r2, r2, #4
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	440b      	add	r3, r1
 80056de:	761a      	strb	r2, [r3, #24]
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	e000e100 	.word	0xe000e100
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	@ 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f1c3 0307 	rsb	r3, r3, #7
 800570e:	2b04      	cmp	r3, #4
 8005710:	bf28      	it	cs
 8005712:	2304      	movcs	r3, #4
 8005714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3304      	adds	r3, #4
 800571a:	2b06      	cmp	r3, #6
 800571c:	d902      	bls.n	8005724 <NVIC_EncodePriority+0x30>
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3b03      	subs	r3, #3
 8005722:	e000      	b.n	8005726 <NVIC_EncodePriority+0x32>
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005728:	f04f 32ff 	mov.w	r2, #4294967295
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43da      	mvns	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	401a      	ands	r2, r3
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800573c:	f04f 31ff 	mov.w	r1, #4294967295
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fa01 f303 	lsl.w	r3, r1, r3
 8005746:	43d9      	mvns	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800574c:	4313      	orrs	r3, r2
         );
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	@ 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800576c:	d301      	bcc.n	8005772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800576e:	2301      	movs	r3, #1
 8005770:	e00f      	b.n	8005792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005772:	4a0a      	ldr	r2, [pc, #40]	@ (800579c <SysTick_Config+0x40>)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3b01      	subs	r3, #1
 8005778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800577a:	210f      	movs	r1, #15
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	f7ff ff8e 	bl	80056a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <SysTick_Config+0x40>)
 8005786:	2200      	movs	r2, #0
 8005788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800578a:	4b04      	ldr	r3, [pc, #16]	@ (800579c <SysTick_Config+0x40>)
 800578c:	2207      	movs	r2, #7
 800578e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	e000e010 	.word	0xe000e010

080057a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ff05 	bl	80055b8 <__NVIC_SetPriorityGrouping>
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	4603      	mov	r3, r0
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057c8:	f7ff ff1a 	bl	8005600 <__NVIC_GetPriorityGrouping>
 80057cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	6978      	ldr	r0, [r7, #20]
 80057d4:	f7ff ff8e 	bl	80056f4 <NVIC_EncodePriority>
 80057d8:	4602      	mov	r2, r0
 80057da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057de:	4611      	mov	r1, r2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ff5d 	bl	80056a0 <__NVIC_SetPriority>
}
 80057e6:	bf00      	nop
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff ff0d 	bl	800561c <__NVIC_EnableIRQ>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff1d 	bl	8005658 <__NVIC_DisableIRQ>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff94 	bl	800575c <SysTick_Config>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b04      	cmp	r3, #4
 800584c:	d106      	bne.n	800585c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005854:	f043 0304 	orr.w	r3, r3, #4
 8005858:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800585a:	e005      	b.n	8005868 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800585c:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005862:	f023 0304 	bic.w	r3, r3, #4
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000e010 	.word	0xe000e010

08005878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005884:	f7ff fe68 	bl	8005558 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e099      	b.n	80059c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058b4:	e00f      	b.n	80058d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058b6:	f7ff fe4f 	bl	8005558 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d908      	bls.n	80058d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e078      	b.n	80059c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e8      	bne.n	80058b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4b38      	ldr	r3, [pc, #224]	@ (80059d0 <HAL_DMA_Init+0x158>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800591a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	2b04      	cmp	r3, #4
 800592e:	d107      	bne.n	8005940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	4313      	orrs	r3, r2
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f023 0307 	bic.w	r3, r3, #7
 8005956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	2b04      	cmp	r3, #4
 8005968:	d117      	bne.n	800599a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 faef 	bl	8005f60 <DMA_CheckFifoParam>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2240      	movs	r2, #64	@ 0x40
 800598c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005996:	2301      	movs	r3, #1
 8005998:	e016      	b.n	80059c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 faa6 	bl	8005ef4 <DMA_CalcBaseAndBitshift>
 80059a8:	4603      	mov	r3, r0
 80059aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	223f      	movs	r2, #63	@ 0x3f
 80059b2:	409a      	lsls	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	f010803f 	.word	0xf010803f

080059d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e050      	b.n	8005a88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d101      	bne.n	80059f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e048      	b.n	8005a88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2221      	movs	r2, #33	@ 0x21
 8005a34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa5c 	bl	8005ef4 <DMA_CalcBaseAndBitshift>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a68:	223f      	movs	r2, #63	@ 0x3f
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_DMA_Start_IT+0x26>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e040      	b.n	8005b38 <HAL_DMA_Start_IT+0xa8>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d12f      	bne.n	8005b2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f9da 	bl	8005e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	223f      	movs	r2, #63	@ 0x3f
 8005aea:	409a      	lsls	r2, r3
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0216 	orr.w	r2, r2, #22
 8005afe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0208 	orr.w	r2, r2, #8
 8005b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e005      	b.n	8005b36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d004      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2280      	movs	r2, #128	@ 0x80
 8005b58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e00c      	b.n	8005b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2205      	movs	r2, #5
 8005b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b90:	4b8e      	ldr	r3, [pc, #568]	@ (8005dcc <HAL_DMA_IRQHandler+0x248>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a8e      	ldr	r2, [pc, #568]	@ (8005dd0 <HAL_DMA_IRQHandler+0x24c>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0a9b      	lsrs	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	2208      	movs	r2, #8
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	2208      	movs	r2, #8
 8005bde:	409a      	lsls	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d012      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c48:	2204      	movs	r2, #4
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c54:	f043 0204 	orr.w	r2, r3, #4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c60:	2210      	movs	r2, #16
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d043      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d03c      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	2210      	movs	r2, #16
 8005c80:	409a      	lsls	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d024      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e01f      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
 8005cc4:	e016      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0208 	bic.w	r2, r2, #8
 8005ce2:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 808f 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8087 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d136      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0216 	bic.w	r2, r2, #22
 8005d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_DMA_IRQHandler+0x1da>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0208 	bic.w	r2, r2, #8
 8005d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	223f      	movs	r2, #63	@ 0x3f
 8005d74:	409a      	lsls	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d07e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
        }
        return;
 8005d9a:	e079      	b.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	e02c      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
 8005dca:	bf00      	nop
 8005dcc:	200000a0 	.word	0x200000a0
 8005dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d023      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
 8005de4:	e01e      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0210 	bic.w	r2, r2, #16
 8005e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d032      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2205      	movs	r2, #5
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d307      	bcc.n	8005e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f2      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x2cc>
 8005e6a:	e000      	b.n	8005e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e90:	bf00      	nop
    }
  }
}
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d108      	bne.n	8005ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ed6:	e007      	b.n	8005ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	3b10      	subs	r3, #16
 8005f04:	4a14      	ldr	r2, [pc, #80]	@ (8005f58 <DMA_CalcBaseAndBitshift+0x64>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f0e:	4a13      	ldr	r2, [pc, #76]	@ (8005f5c <DMA_CalcBaseAndBitshift+0x68>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d909      	bls.n	8005f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f34:	e007      	b.n	8005f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	aaaaaaab 	.word	0xaaaaaaab
 8005f5c:	08021c84 	.word	0x08021c84

08005f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d11f      	bne.n	8005fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d856      	bhi.n	800602e <DMA_CheckFifoParam+0xce>
 8005f80:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <DMA_CheckFifoParam+0x28>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fab 	.word	0x08005fab
 8005f90:	08005f99 	.word	0x08005f99
 8005f94:	0800602f 	.word	0x0800602f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d046      	beq.n	8006032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa8:	e043      	b.n	8006032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fb2:	d140      	bne.n	8006036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb8:	e03d      	b.n	8006036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc2:	d121      	bne.n	8006008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d837      	bhi.n	800603a <DMA_CheckFifoParam+0xda>
 8005fca:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <DMA_CheckFifoParam+0x70>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005fe7 	.word	0x08005fe7
 8005fd8:	08005fe1 	.word	0x08005fe1
 8005fdc:	08005ff9 	.word	0x08005ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe4:	e030      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d025      	beq.n	800603e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff6:	e022      	b.n	800603e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006000:	d11f      	bne.n	8006042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006006:	e01c      	b.n	8006042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d903      	bls.n	8006016 <DMA_CheckFifoParam+0xb6>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d003      	beq.n	800601c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006014:	e018      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
      break;
 800601a:	e015      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00e      	beq.n	8006046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
      break;
 800602c:	e00b      	b.n	8006046 <DMA_CheckFifoParam+0xe6>
      break;
 800602e:	bf00      	nop
 8006030:	e00a      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 8006032:	bf00      	nop
 8006034:	e008      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 8006036:	bf00      	nop
 8006038:	e006      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 800603a:	bf00      	nop
 800603c:	e004      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 800603e:	bf00      	nop
 8006040:	e002      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;   
 8006042:	bf00      	nop
 8006044:	e000      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 8006046:	bf00      	nop
    }
  } 
  
  return status; 
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	@ 0x24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800606a:	2300      	movs	r3, #0
 800606c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e159      	b.n	8006328 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006074:	2201      	movs	r2, #1
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4013      	ands	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	429a      	cmp	r2, r3
 800608e:	f040 8148 	bne.w	8006322 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b01      	cmp	r3, #1
 800609c:	d005      	beq.n	80060aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d130      	bne.n	800610c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	2203      	movs	r2, #3
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060e0:	2201      	movs	r2, #1
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	f003 0201 	and.w	r2, r3, #1
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	4313      	orrs	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b03      	cmp	r3, #3
 8006116:	d017      	beq.n	8006148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	2203      	movs	r2, #3
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d123      	bne.n	800619c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	08da      	lsrs	r2, r3, #3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3208      	adds	r2, #8
 800615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	220f      	movs	r2, #15
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	43db      	mvns	r3, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4313      	orrs	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	08da      	lsrs	r2, r3, #3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3208      	adds	r2, #8
 8006196:	69b9      	ldr	r1, [r7, #24]
 8006198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	2203      	movs	r2, #3
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0203 	and.w	r2, r3, #3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80a2 	beq.w	8006322 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	4b57      	ldr	r3, [pc, #348]	@ (8006340 <HAL_GPIO_Init+0x2e8>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	4a56      	ldr	r2, [pc, #344]	@ (8006340 <HAL_GPIO_Init+0x2e8>)
 80061e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80061ee:	4b54      	ldr	r3, [pc, #336]	@ (8006340 <HAL_GPIO_Init+0x2e8>)
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061fa:	4a52      	ldr	r2, [pc, #328]	@ (8006344 <HAL_GPIO_Init+0x2ec>)
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	3302      	adds	r3, #2
 8006202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	220f      	movs	r2, #15
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a49      	ldr	r2, [pc, #292]	@ (8006348 <HAL_GPIO_Init+0x2f0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d019      	beq.n	800625a <HAL_GPIO_Init+0x202>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a48      	ldr	r2, [pc, #288]	@ (800634c <HAL_GPIO_Init+0x2f4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <HAL_GPIO_Init+0x1fe>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a47      	ldr	r2, [pc, #284]	@ (8006350 <HAL_GPIO_Init+0x2f8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00d      	beq.n	8006252 <HAL_GPIO_Init+0x1fa>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a46      	ldr	r2, [pc, #280]	@ (8006354 <HAL_GPIO_Init+0x2fc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d007      	beq.n	800624e <HAL_GPIO_Init+0x1f6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a45      	ldr	r2, [pc, #276]	@ (8006358 <HAL_GPIO_Init+0x300>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_GPIO_Init+0x1f2>
 8006246:	2304      	movs	r3, #4
 8006248:	e008      	b.n	800625c <HAL_GPIO_Init+0x204>
 800624a:	2307      	movs	r3, #7
 800624c:	e006      	b.n	800625c <HAL_GPIO_Init+0x204>
 800624e:	2303      	movs	r3, #3
 8006250:	e004      	b.n	800625c <HAL_GPIO_Init+0x204>
 8006252:	2302      	movs	r3, #2
 8006254:	e002      	b.n	800625c <HAL_GPIO_Init+0x204>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <HAL_GPIO_Init+0x204>
 800625a:	2300      	movs	r3, #0
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	f002 0203 	and.w	r2, r2, #3
 8006262:	0092      	lsls	r2, r2, #2
 8006264:	4093      	lsls	r3, r2
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4313      	orrs	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800626c:	4935      	ldr	r1, [pc, #212]	@ (8006344 <HAL_GPIO_Init+0x2ec>)
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	089b      	lsrs	r3, r3, #2
 8006272:	3302      	adds	r3, #2
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800627a:	4b38      	ldr	r3, [pc, #224]	@ (800635c <HAL_GPIO_Init+0x304>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	43db      	mvns	r3, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4013      	ands	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800629e:	4a2f      	ldr	r2, [pc, #188]	@ (800635c <HAL_GPIO_Init+0x304>)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062a4:	4b2d      	ldr	r3, [pc, #180]	@ (800635c <HAL_GPIO_Init+0x304>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062c8:	4a24      	ldr	r2, [pc, #144]	@ (800635c <HAL_GPIO_Init+0x304>)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062ce:	4b23      	ldr	r3, [pc, #140]	@ (800635c <HAL_GPIO_Init+0x304>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	43db      	mvns	r3, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4013      	ands	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062f2:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_GPIO_Init+0x304>)
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062f8:	4b18      	ldr	r3, [pc, #96]	@ (800635c <HAL_GPIO_Init+0x304>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800631c:	4a0f      	ldr	r2, [pc, #60]	@ (800635c <HAL_GPIO_Init+0x304>)
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3301      	adds	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b0f      	cmp	r3, #15
 800632c:	f67f aea2 	bls.w	8006074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3724      	adds	r7, #36	@ 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40023800 	.word	0x40023800
 8006344:	40013800 	.word	0x40013800
 8006348:	40020000 	.word	0x40020000
 800634c:	40020400 	.word	0x40020400
 8006350:	40020800 	.word	0x40020800
 8006354:	40020c00 	.word	0x40020c00
 8006358:	40021000 	.word	0x40021000
 800635c:	40013c00 	.word	0x40013c00

08006360 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e0bb      	b.n	80064f4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800637c:	2201      	movs	r2, #1
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	429a      	cmp	r2, r3
 8006394:	f040 80ab 	bne.w	80064ee <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006398:	4a5c      	ldr	r2, [pc, #368]	@ (800650c <HAL_GPIO_DeInit+0x1ac>)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	3302      	adds	r3, #2
 80063a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	220f      	movs	r2, #15
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a54      	ldr	r2, [pc, #336]	@ (8006510 <HAL_GPIO_DeInit+0x1b0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d019      	beq.n	80063f6 <HAL_GPIO_DeInit+0x96>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a53      	ldr	r2, [pc, #332]	@ (8006514 <HAL_GPIO_DeInit+0x1b4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_GPIO_DeInit+0x92>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a52      	ldr	r2, [pc, #328]	@ (8006518 <HAL_GPIO_DeInit+0x1b8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00d      	beq.n	80063ee <HAL_GPIO_DeInit+0x8e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a51      	ldr	r2, [pc, #324]	@ (800651c <HAL_GPIO_DeInit+0x1bc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <HAL_GPIO_DeInit+0x8a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a50      	ldr	r2, [pc, #320]	@ (8006520 <HAL_GPIO_DeInit+0x1c0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <HAL_GPIO_DeInit+0x86>
 80063e2:	2304      	movs	r3, #4
 80063e4:	e008      	b.n	80063f8 <HAL_GPIO_DeInit+0x98>
 80063e6:	2307      	movs	r3, #7
 80063e8:	e006      	b.n	80063f8 <HAL_GPIO_DeInit+0x98>
 80063ea:	2303      	movs	r3, #3
 80063ec:	e004      	b.n	80063f8 <HAL_GPIO_DeInit+0x98>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e002      	b.n	80063f8 <HAL_GPIO_DeInit+0x98>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <HAL_GPIO_DeInit+0x98>
 80063f6:	2300      	movs	r3, #0
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	f002 0203 	and.w	r2, r2, #3
 80063fe:	0092      	lsls	r2, r2, #2
 8006400:	4093      	lsls	r3, r2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	d132      	bne.n	800646e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006408:	4b46      	ldr	r3, [pc, #280]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	43db      	mvns	r3, r3
 8006410:	4944      	ldr	r1, [pc, #272]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 8006412:	4013      	ands	r3, r2
 8006414:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006416:	4b43      	ldr	r3, [pc, #268]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	43db      	mvns	r3, r3
 800641e:	4941      	ldr	r1, [pc, #260]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 8006420:	4013      	ands	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006424:	4b3f      	ldr	r3, [pc, #252]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	43db      	mvns	r3, r3
 800642c:	493d      	ldr	r1, [pc, #244]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 800642e:	4013      	ands	r3, r2
 8006430:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006432:	4b3c      	ldr	r3, [pc, #240]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	43db      	mvns	r3, r3
 800643a:	493a      	ldr	r1, [pc, #232]	@ (8006524 <HAL_GPIO_DeInit+0x1c4>)
 800643c:	4013      	ands	r3, r2
 800643e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	220f      	movs	r2, #15
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006450:	4a2e      	ldr	r2, [pc, #184]	@ (800650c <HAL_GPIO_DeInit+0x1ac>)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	089b      	lsrs	r3, r3, #2
 8006456:	3302      	adds	r3, #2
 8006458:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	43da      	mvns	r2, r3
 8006460:	482a      	ldr	r0, [pc, #168]	@ (800650c <HAL_GPIO_DeInit+0x1ac>)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	089b      	lsrs	r3, r3, #2
 8006466:	400a      	ands	r2, r1
 8006468:	3302      	adds	r3, #2
 800646a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	2103      	movs	r1, #3
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	401a      	ands	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	08da      	lsrs	r2, r3, #3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3208      	adds	r2, #8
 800648c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	220f      	movs	r2, #15
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	08d2      	lsrs	r2, r2, #3
 80064a4:	4019      	ands	r1, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3208      	adds	r2, #8
 80064aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	2103      	movs	r1, #3
 80064b8:	fa01 f303 	lsl.w	r3, r1, r3
 80064bc:	43db      	mvns	r3, r3
 80064be:	401a      	ands	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	2101      	movs	r1, #1
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	401a      	ands	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	2103      	movs	r1, #3
 80064e2:	fa01 f303 	lsl.w	r3, r1, r3
 80064e6:	43db      	mvns	r3, r3
 80064e8:	401a      	ands	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3301      	adds	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	f67f af40 	bls.w	800637c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40013800 	.word	0x40013800
 8006510:	40020000 	.word	0x40020000
 8006514:	40020400 	.word	0x40020400
 8006518:	40020800 	.word	0x40020800
 800651c:	40020c00 	.word	0x40020c00
 8006520:	40021000 	.word	0x40021000
 8006524:	40013c00 	.word	0x40013c00

08006528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
 8006534:	4613      	mov	r3, r2
 8006536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006538:	787b      	ldrb	r3, [r7, #1]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800653e:	887a      	ldrh	r2, [r7, #2]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006544:	e003      	b.n	800654e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006546:	887b      	ldrh	r3, [r7, #2]
 8006548:	041a      	lsls	r2, r3, #16
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	619a      	str	r2, [r3, #24]
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006566:	4b08      	ldr	r3, [pc, #32]	@ (8006588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d006      	beq.n	8006580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006572:	4a05      	ldr	r2, [pc, #20]	@ (8006588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006578:	88fb      	ldrh	r3, [r7, #6]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f806 	bl	800658c <HAL_GPIO_EXTI_Callback>
  }
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40013c00 	.word	0x40013c00

0800658c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e267      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d075      	beq.n	80066ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065c2:	4b88      	ldr	r3, [pc, #544]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d00c      	beq.n	80065e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ce:	4b85      	ldr	r3, [pc, #532]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d112      	bne.n	8006600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065da:	4b82      	ldr	r3, [pc, #520]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065e6:	d10b      	bne.n	8006600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e8:	4b7e      	ldr	r3, [pc, #504]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d05b      	beq.n	80066ac <HAL_RCC_OscConfig+0x108>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d157      	bne.n	80066ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e242      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006608:	d106      	bne.n	8006618 <HAL_RCC_OscConfig+0x74>
 800660a:	4b76      	ldr	r3, [pc, #472]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a75      	ldr	r2, [pc, #468]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	e01d      	b.n	8006654 <HAL_RCC_OscConfig+0xb0>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006620:	d10c      	bne.n	800663c <HAL_RCC_OscConfig+0x98>
 8006622:	4b70      	ldr	r3, [pc, #448]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6f      	ldr	r2, [pc, #444]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4b6d      	ldr	r3, [pc, #436]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a6c      	ldr	r2, [pc, #432]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	e00b      	b.n	8006654 <HAL_RCC_OscConfig+0xb0>
 800663c:	4b69      	ldr	r3, [pc, #420]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a68      	ldr	r2, [pc, #416]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	4b66      	ldr	r3, [pc, #408]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a65      	ldr	r2, [pc, #404]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 800664e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d013      	beq.n	8006684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665c:	f7fe ff7c 	bl	8005558 <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006664:	f7fe ff78 	bl	8005558 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b64      	cmp	r3, #100	@ 0x64
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e207      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006676:	4b5b      	ldr	r3, [pc, #364]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f0      	beq.n	8006664 <HAL_RCC_OscConfig+0xc0>
 8006682:	e014      	b.n	80066ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006684:	f7fe ff68 	bl	8005558 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800668c:	f7fe ff64 	bl	8005558 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b64      	cmp	r3, #100	@ 0x64
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e1f3      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669e:	4b51      	ldr	r3, [pc, #324]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0xe8>
 80066aa:	e000      	b.n	80066ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d063      	beq.n	8006782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ba:	4b4a      	ldr	r3, [pc, #296]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c6:	4b47      	ldr	r3, [pc, #284]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d11c      	bne.n	800670c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d2:	4b44      	ldr	r3, [pc, #272]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d116      	bne.n	800670c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066de:	4b41      	ldr	r3, [pc, #260]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_RCC_OscConfig+0x152>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d001      	beq.n	80066f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e1c7      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f6:	4b3b      	ldr	r3, [pc, #236]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4937      	ldr	r1, [pc, #220]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800670a:	e03a      	b.n	8006782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006714:	4b34      	ldr	r3, [pc, #208]	@ (80067e8 <HAL_RCC_OscConfig+0x244>)
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fe ff1d 	bl	8005558 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006722:	f7fe ff19 	bl	8005558 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e1a8      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006734:	4b2b      	ldr	r3, [pc, #172]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006740:	4b28      	ldr	r3, [pc, #160]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4925      	ldr	r1, [pc, #148]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006750:	4313      	orrs	r3, r2
 8006752:	600b      	str	r3, [r1, #0]
 8006754:	e015      	b.n	8006782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006756:	4b24      	ldr	r3, [pc, #144]	@ (80067e8 <HAL_RCC_OscConfig+0x244>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fe fefc 	bl	8005558 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006764:	f7fe fef8 	bl	8005558 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e187      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006776:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d036      	beq.n	80067fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006796:	4b15      	ldr	r3, [pc, #84]	@ (80067ec <HAL_RCC_OscConfig+0x248>)
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679c:	f7fe fedc 	bl	8005558 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a4:	f7fe fed8 	bl	8005558 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e167      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b6:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <HAL_RCC_OscConfig+0x240>)
 80067b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f0      	beq.n	80067a4 <HAL_RCC_OscConfig+0x200>
 80067c2:	e01b      	b.n	80067fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c4:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <HAL_RCC_OscConfig+0x248>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ca:	f7fe fec5 	bl	8005558 <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d0:	e00e      	b.n	80067f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067d2:	f7fe fec1 	bl	8005558 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d907      	bls.n	80067f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e150      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
 80067e4:	40023800 	.word	0x40023800
 80067e8:	42470000 	.word	0x42470000
 80067ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f0:	4b88      	ldr	r3, [pc, #544]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80067f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ea      	bne.n	80067d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8097 	beq.w	8006938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680e:	4b81      	ldr	r3, [pc, #516]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	4a7c      	ldr	r2, [pc, #496]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006828:	6413      	str	r3, [r2, #64]	@ 0x40
 800682a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683a:	4b77      	ldr	r3, [pc, #476]	@ (8006a18 <HAL_RCC_OscConfig+0x474>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d118      	bne.n	8006878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006846:	4b74      	ldr	r3, [pc, #464]	@ (8006a18 <HAL_RCC_OscConfig+0x474>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a73      	ldr	r2, [pc, #460]	@ (8006a18 <HAL_RCC_OscConfig+0x474>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006852:	f7fe fe81 	bl	8005558 <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685a:	f7fe fe7d 	bl	8005558 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e10c      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a18 <HAL_RCC_OscConfig+0x474>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d106      	bne.n	800688e <HAL_RCC_OscConfig+0x2ea>
 8006880:	4b64      	ldr	r3, [pc, #400]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006884:	4a63      	ldr	r2, [pc, #396]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	6713      	str	r3, [r2, #112]	@ 0x70
 800688c:	e01c      	b.n	80068c8 <HAL_RCC_OscConfig+0x324>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b05      	cmp	r3, #5
 8006894:	d10c      	bne.n	80068b0 <HAL_RCC_OscConfig+0x30c>
 8006896:	4b5f      	ldr	r3, [pc, #380]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689a:	4a5e      	ldr	r2, [pc, #376]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 800689c:	f043 0304 	orr.w	r3, r3, #4
 80068a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a6:	4a5b      	ldr	r2, [pc, #364]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ae:	e00b      	b.n	80068c8 <HAL_RCC_OscConfig+0x324>
 80068b0:	4b58      	ldr	r3, [pc, #352]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b4:	4a57      	ldr	r2, [pc, #348]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80068bc:	4b55      	ldr	r3, [pc, #340]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c0:	4a54      	ldr	r2, [pc, #336]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068c2:	f023 0304 	bic.w	r3, r3, #4
 80068c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d0:	f7fe fe42 	bl	8005558 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d6:	e00a      	b.n	80068ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068d8:	f7fe fe3e 	bl	8005558 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e0cb      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ee:	4b49      	ldr	r3, [pc, #292]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0ee      	beq.n	80068d8 <HAL_RCC_OscConfig+0x334>
 80068fa:	e014      	b.n	8006926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068fc:	f7fe fe2c 	bl	8005558 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006902:	e00a      	b.n	800691a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006904:	f7fe fe28 	bl	8005558 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e0b5      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800691a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1ee      	bne.n	8006904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d105      	bne.n	8006938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692c:	4b39      	ldr	r3, [pc, #228]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 800692e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006930:	4a38      	ldr	r2, [pc, #224]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006936:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80a1 	beq.w	8006a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006942:	4b34      	ldr	r3, [pc, #208]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 030c 	and.w	r3, r3, #12
 800694a:	2b08      	cmp	r3, #8
 800694c:	d05c      	beq.n	8006a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d141      	bne.n	80069da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006956:	4b31      	ldr	r3, [pc, #196]	@ (8006a1c <HAL_RCC_OscConfig+0x478>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695c:	f7fe fdfc 	bl	8005558 <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006964:	f7fe fdf8 	bl	8005558 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e087      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006976:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f0      	bne.n	8006964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69da      	ldr	r2, [r3, #28]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	019b      	lsls	r3, r3, #6
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	3b01      	subs	r3, #1
 800699c:	041b      	lsls	r3, r3, #16
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	061b      	lsls	r3, r3, #24
 80069a6:	491b      	ldr	r1, [pc, #108]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ac:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <HAL_RCC_OscConfig+0x478>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b2:	f7fe fdd1 	bl	8005558 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ba:	f7fe fdcd 	bl	8005558 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e05c      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069cc:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_RCC_OscConfig+0x416>
 80069d8:	e054      	b.n	8006a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069da:	4b10      	ldr	r3, [pc, #64]	@ (8006a1c <HAL_RCC_OscConfig+0x478>)
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e0:	f7fe fdba 	bl	8005558 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e8:	f7fe fdb6 	bl	8005558 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e045      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <HAL_RCC_OscConfig+0x470>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <HAL_RCC_OscConfig+0x444>
 8006a06:	e03d      	b.n	8006a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e038      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
 8006a14:	40023800 	.word	0x40023800
 8006a18:	40007000 	.word	0x40007000
 8006a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a20:	4b1b      	ldr	r3, [pc, #108]	@ (8006a90 <HAL_RCC_OscConfig+0x4ec>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d028      	beq.n	8006a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d121      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d11a      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d111      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40023800 	.word	0x40023800

08006a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0cc      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa8:	4b68      	ldr	r3, [pc, #416]	@ (8006c4c <HAL_RCC_ClockConfig+0x1b8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d90c      	bls.n	8006ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab6:	4b65      	ldr	r3, [pc, #404]	@ (8006c4c <HAL_RCC_ClockConfig+0x1b8>)
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abe:	4b63      	ldr	r3, [pc, #396]	@ (8006c4c <HAL_RCC_ClockConfig+0x1b8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d001      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0b8      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ae8:	4b59      	ldr	r3, [pc, #356]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4a58      	ldr	r2, [pc, #352]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b00:	4b53      	ldr	r3, [pc, #332]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4a52      	ldr	r2, [pc, #328]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b0c:	4b50      	ldr	r3, [pc, #320]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	494d      	ldr	r1, [pc, #308]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d044      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b32:	4b47      	ldr	r3, [pc, #284]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d119      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e07f      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d003      	beq.n	8006b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b52:	4b3f      	ldr	r3, [pc, #252]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e06f      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b62:	4b3b      	ldr	r3, [pc, #236]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e067      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b72:	4b37      	ldr	r3, [pc, #220]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 0203 	bic.w	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	4934      	ldr	r1, [pc, #208]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b84:	f7fe fce8 	bl	8005558 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b8c:	f7fe fce4 	bl	8005558 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e04f      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 020c 	and.w	r2, r3, #12
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d1eb      	bne.n	8006b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bb4:	4b25      	ldr	r3, [pc, #148]	@ (8006c4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d20c      	bcs.n	8006bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc2:	4b22      	ldr	r3, [pc, #136]	@ (8006c4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bca:	4b20      	ldr	r3, [pc, #128]	@ (8006c4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e032      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006be8:	4b19      	ldr	r3, [pc, #100]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	4916      	ldr	r1, [pc, #88]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c06:	4b12      	ldr	r3, [pc, #72]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	490e      	ldr	r1, [pc, #56]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c1a:	f000 f821 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	091b      	lsrs	r3, r3, #4
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	490a      	ldr	r1, [pc, #40]	@ (8006c54 <HAL_RCC_ClockConfig+0x1c0>)
 8006c2c:	5ccb      	ldrb	r3, [r1, r3]
 8006c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c32:	4a09      	ldr	r2, [pc, #36]	@ (8006c58 <HAL_RCC_ClockConfig+0x1c4>)
 8006c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c36:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <HAL_RCC_ClockConfig+0x1c8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fc48 	bl	80054d0 <HAL_InitTick>

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40023c00 	.word	0x40023c00
 8006c50:	40023800 	.word	0x40023800
 8006c54:	08021c6c 	.word	0x08021c6c
 8006c58:	200000a0 	.word	0x200000a0
 8006c5c:	200000a4 	.word	0x200000a4

08006c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c64:	b094      	sub	sp, #80	@ 0x50
 8006c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c70:	2300      	movs	r3, #0
 8006c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c78:	4b79      	ldr	r3, [pc, #484]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d00d      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	f200 80e1 	bhi.w	8006e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_RCC_GetSysClockFreq+0x34>
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d003      	beq.n	8006c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c92:	e0db      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c94:	4b73      	ldr	r3, [pc, #460]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c96:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006c98:	e0db      	b.n	8006e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c9a:	4b73      	ldr	r3, [pc, #460]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c9e:	e0d8      	b.n	8006e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ca8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006caa:	4b6d      	ldr	r3, [pc, #436]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d063      	beq.n	8006d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	f04f 0000 	mov.w	r0, #0
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	0159      	lsls	r1, r3, #5
 8006ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ce4:	0150      	lsls	r0, r2, #5
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4621      	mov	r1, r4
 8006cec:	1a51      	subs	r1, r2, r1
 8006cee:	6139      	str	r1, [r7, #16]
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d04:	4659      	mov	r1, fp
 8006d06:	018b      	lsls	r3, r1, #6
 8006d08:	4651      	mov	r1, sl
 8006d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d0e:	4651      	mov	r1, sl
 8006d10:	018a      	lsls	r2, r1, #6
 8006d12:	4651      	mov	r1, sl
 8006d14:	ebb2 0801 	subs.w	r8, r2, r1
 8006d18:	4659      	mov	r1, fp
 8006d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d32:	4690      	mov	r8, r2
 8006d34:	4699      	mov	r9, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	eb18 0303 	adds.w	r3, r8, r3
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	462b      	mov	r3, r5
 8006d40:	eb49 0303 	adc.w	r3, r9, r3
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d52:	4629      	mov	r1, r5
 8006d54:	024b      	lsls	r3, r1, #9
 8006d56:	4621      	mov	r1, r4
 8006d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	024a      	lsls	r2, r1, #9
 8006d60:	4610      	mov	r0, r2
 8006d62:	4619      	mov	r1, r3
 8006d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d66:	2200      	movs	r2, #0
 8006d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d70:	f7f9 ff32 	bl	8000bd8 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4613      	mov	r3, r2
 8006d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d7c:	e058      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b38      	ldr	r3, [pc, #224]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	2200      	movs	r2, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	4611      	mov	r1, r2
 8006d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d8e:	623b      	str	r3, [r7, #32]
 8006d90:	2300      	movs	r3, #0
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d98:	4642      	mov	r2, r8
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	f04f 0000 	mov.w	r0, #0
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	0159      	lsls	r1, r3, #5
 8006da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006daa:	0150      	lsls	r0, r2, #5
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4641      	mov	r1, r8
 8006db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006db6:	4649      	mov	r1, r9
 8006db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8006dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	00eb      	lsls	r3, r5, #3
 8006de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006de6:	00e2      	lsls	r2, r4, #3
 8006de8:	4614      	mov	r4, r2
 8006dea:	461d      	mov	r5, r3
 8006dec:	4643      	mov	r3, r8
 8006dee:	18e3      	adds	r3, r4, r3
 8006df0:	603b      	str	r3, [r7, #0]
 8006df2:	464b      	mov	r3, r9
 8006df4:	eb45 0303 	adc.w	r3, r5, r3
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e06:	4629      	mov	r1, r5
 8006e08:	028b      	lsls	r3, r1, #10
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e10:	4621      	mov	r1, r4
 8006e12:	028a      	lsls	r2, r1, #10
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	61fa      	str	r2, [r7, #28]
 8006e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e24:	f7f9 fed8 	bl	8000bd8 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e30:	4b0b      	ldr	r3, [pc, #44]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e4a:	e002      	b.n	8006e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3750      	adds	r7, #80	@ 0x50
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e5e:	bf00      	nop
 8006e60:	40023800 	.word	0x40023800
 8006e64:	00f42400 	.word	0x00f42400
 8006e68:	007a1200 	.word	0x007a1200

08006e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e70:	4b03      	ldr	r3, [pc, #12]	@ (8006e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e72:	681b      	ldr	r3, [r3, #0]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	200000a0 	.word	0x200000a0

08006e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e88:	f7ff fff0 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	0a9b      	lsrs	r3, r3, #10
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4903      	ldr	r1, [pc, #12]	@ (8006ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	08021c7c 	.word	0x08021c7c

08006eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006eb0:	f7ff ffdc 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	0b5b      	lsrs	r3, r3, #13
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	4903      	ldr	r1, [pc, #12]	@ (8006ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ec2:	5ccb      	ldrb	r3, [r1, r3]
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	08021c7c 	.word	0x08021c7c

08006ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e07b      	b.n	8006fde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d108      	bne.n	8006f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ef6:	d009      	beq.n	8006f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	61da      	str	r2, [r3, #28]
 8006efe:	e005      	b.n	8006f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fd fe50 	bl	8004bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f90:	ea42 0103 	orr.w	r1, r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	f003 0104 	and.w	r1, r3, #4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	f003 0210 	and.w	r2, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e01a      	b.n	800702e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800700e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fd ffa9 	bl	8004f68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b088      	sub	sp, #32
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	4613      	mov	r3, r2
 8007044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_SPI_Transmit+0x22>
 8007054:	2302      	movs	r3, #2
 8007056:	e126      	b.n	80072a6 <HAL_SPI_Transmit+0x270>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007060:	f7fe fa7a 	bl	8005558 <HAL_GetTick>
 8007064:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b01      	cmp	r3, #1
 8007074:	d002      	beq.n	800707c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007076:	2302      	movs	r3, #2
 8007078:	77fb      	strb	r3, [r7, #31]
    goto error;
 800707a:	e10b      	b.n	8007294 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_SPI_Transmit+0x52>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800708c:	e102      	b.n	8007294 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2203      	movs	r2, #3
 8007092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	88fa      	ldrh	r2, [r7, #6]
 80070a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070d4:	d10f      	bne.n	80070f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007100:	2b40      	cmp	r3, #64	@ 0x40
 8007102:	d007      	beq.n	8007114 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800711c:	d14b      	bne.n	80071b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <HAL_SPI_Transmit+0xf6>
 8007126:	8afb      	ldrh	r3, [r7, #22]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d13e      	bne.n	80071aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	881a      	ldrh	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	1c9a      	adds	r2, r3, #2
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007150:	e02b      	b.n	80071aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d112      	bne.n	8007186 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	881a      	ldrh	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007170:	1c9a      	adds	r2, r3, #2
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007184:	e011      	b.n	80071aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007186:	f7fe f9e7 	bl	8005558 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d803      	bhi.n	800719e <HAL_SPI_Transmit+0x168>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d102      	bne.n	80071a4 <HAL_SPI_Transmit+0x16e>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071a8:	e074      	b.n	8007294 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ce      	bne.n	8007152 <HAL_SPI_Transmit+0x11c>
 80071b4:	e04c      	b.n	8007250 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_SPI_Transmit+0x18e>
 80071be:	8afb      	ldrh	r3, [r7, #22]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d140      	bne.n	8007246 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	330c      	adds	r3, #12
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071ea:	e02c      	b.n	8007246 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d113      	bne.n	8007222 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007220:	e011      	b.n	8007246 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007222:	f7fe f999 	bl	8005558 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d803      	bhi.n	800723a <HAL_SPI_Transmit+0x204>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d102      	bne.n	8007240 <HAL_SPI_Transmit+0x20a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007244:	e026      	b.n	8007294 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1cd      	bne.n	80071ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fe07 	bl	8007e68 <SPI_EndRxTxTransaction>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e000      	b.n	8007294 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80072a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	4613      	mov	r3, r2
 80072bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_SPI_Transmit_DMA+0x20>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e09b      	b.n	8007408 <HAL_SPI_Transmit_DMA+0x158>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d002      	beq.n	80072ea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
 80072e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072e8:	e089      	b.n	80073fe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_SPI_Transmit_DMA+0x46>
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072fa:	e080      	b.n	80073fe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2203      	movs	r2, #3
 8007300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	88fa      	ldrh	r2, [r7, #6]
 800731a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007342:	d10f      	bne.n	8007364 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007352:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007362:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007368:	4a29      	ldr	r2, [pc, #164]	@ (8007410 <HAL_SPI_Transmit_DMA+0x160>)
 800736a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007370:	4a28      	ldr	r2, [pc, #160]	@ (8007414 <HAL_SPI_Transmit_DMA+0x164>)
 8007372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007378:	4a27      	ldr	r2, [pc, #156]	@ (8007418 <HAL_SPI_Transmit_DMA+0x168>)
 800737a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007380:	2200      	movs	r2, #0
 8007382:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	4619      	mov	r1, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	330c      	adds	r3, #12
 8007394:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800739a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800739c:	f7fe fb78 	bl	8005a90 <HAL_DMA_Start_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00c      	beq.n	80073c0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073aa:	f043 0210 	orr.w	r2, r3, #16
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80073be:	e01e      	b.n	80073fe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	d007      	beq.n	80073de <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073dc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0220 	orr.w	r2, r2, #32
 80073ec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0202 	orr.w	r2, r2, #2
 80073fc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	08007bd1 	.word	0x08007bd1
 8007414:	080079f1 	.word	0x080079f1
 8007418:	08007c25 	.word	0x08007c25

0800741c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d110      	bne.n	8007458 <HAL_SPI_Receive_DMA+0x3c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800743e:	d10b      	bne.n	8007458 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2204      	movs	r2, #4
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f8a6 	bl	80075a0 <HAL_SPI_TransmitReceive_DMA>
 8007454:	4603      	mov	r3, r0
 8007456:	e09b      	b.n	8007590 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_SPI_Receive_DMA+0x4a>
 8007462:	2302      	movs	r3, #2
 8007464:	e094      	b.n	8007590 <HAL_SPI_Receive_DMA+0x174>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b01      	cmp	r3, #1
 8007478:	d002      	beq.n	8007480 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800747a:	2302      	movs	r3, #2
 800747c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800747e:	e082      	b.n	8007586 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_SPI_Receive_DMA+0x70>
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d102      	bne.n	8007492 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007490:	e079      	b.n	8007586 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2204      	movs	r2, #4
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074d2:	d10f      	bne.n	80074f4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074f2:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f8:	4a27      	ldr	r2, [pc, #156]	@ (8007598 <HAL_SPI_Receive_DMA+0x17c>)
 80074fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007500:	4a26      	ldr	r2, [pc, #152]	@ (800759c <HAL_SPI_Receive_DMA+0x180>)
 8007502:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007508:	2200      	movs	r2, #0
 800750a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	4619      	mov	r1, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007522:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007524:	f7fe fab4 	bl	8005a90 <HAL_DMA_Start_IT>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00c      	beq.n	8007548 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	f043 0210 	orr.w	r2, r3, #16
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007546:	e01e      	b.n	8007586 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007552:	2b40      	cmp	r3, #64	@ 0x40
 8007554:	d007      	beq.n	8007566 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007564:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0220 	orr.w	r2, r2, #32
 8007574:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	08007a99 	.word	0x08007a99
 800759c:	08007c25 	.word	0x08007c25

080075a0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80075bc:	2302      	movs	r3, #2
 80075be:	e0e3      	b.n	8007788 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075ce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80075d6:	7dbb      	ldrb	r3, [r7, #22]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d00d      	beq.n	80075f8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075e2:	d106      	bne.n	80075f2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80075ec:	7dbb      	ldrb	r3, [r7, #22]
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d002      	beq.n	80075f8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80075f2:	2302      	movs	r3, #2
 80075f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075f6:	e0c2      	b.n	800777e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <HAL_SPI_TransmitReceive_DMA+0x6a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007604:	887b      	ldrh	r3, [r7, #2]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800760e:	e0b6      	b.n	800777e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b04      	cmp	r3, #4
 800761a:	d003      	beq.n	8007624 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2205      	movs	r2, #5
 8007620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	887a      	ldrh	r2, [r7, #2]
 8007634:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	887a      	ldrh	r2, [r7, #2]
 800763a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	887a      	ldrh	r2, [r7, #2]
 8007646:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	887a      	ldrh	r2, [r7, #2]
 800764c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b04      	cmp	r3, #4
 8007664:	d108      	bne.n	8007678 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800766a:	4a49      	ldr	r2, [pc, #292]	@ (8007790 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800766c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007672:	4a48      	ldr	r2, [pc, #288]	@ (8007794 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007674:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007676:	e007      	b.n	8007688 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767c:	4a46      	ldr	r2, [pc, #280]	@ (8007798 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800767e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007684:	4a45      	ldr	r2, [pc, #276]	@ (800779c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007686:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768c:	4a44      	ldr	r2, [pc, #272]	@ (80077a0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800768e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007694:	2200      	movs	r2, #0
 8007696:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	4619      	mov	r1, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80076b0:	f7fe f9ee 	bl	8005a90 <HAL_DMA_Start_IT>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00c      	beq.n	80076d4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076be:	f043 0210 	orr.w	r2, r3, #16
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80076d2:	e054      	b.n	800777e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076e8:	2200      	movs	r2, #0
 80076ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f0:	2200      	movs	r2, #0
 80076f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f8:	2200      	movs	r2, #0
 80076fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007700:	2200      	movs	r2, #0
 8007702:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	4619      	mov	r1, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330c      	adds	r3, #12
 8007714:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800771a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800771c:	f7fe f9b8 	bl	8005a90 <HAL_DMA_Start_IT>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00c      	beq.n	8007740 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772a:	f043 0210 	orr.w	r2, r3, #16
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800773e:	e01e      	b.n	800777e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774a:	2b40      	cmp	r3, #64	@ 0x40
 800774c:	d007      	beq.n	800775e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0220 	orr.w	r2, r2, #32
 800776c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0202 	orr.w	r2, r2, #2
 800777c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	08007bed 	.word	0x08007bed
 8007794:	08007a99 	.word	0x08007a99
 8007798:	08007c09 	.word	0x08007c09
 800779c:	08007b41 	.word	0x08007b41
 80077a0:	08007c25 	.word	0x08007c25

080077a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10e      	bne.n	80077e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
    return;
 80077e2:	e0ce      	b.n	8007982 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_SPI_IRQHandler+0x5e>
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
    return;
 8007800:	e0bf      	b.n	8007982 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <HAL_SPI_IRQHandler+0x7e>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d105      	bne.n	8007822 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80b0 	beq.w	8007982 <HAL_SPI_IRQHandler+0x1de>
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80aa 	beq.w	8007982 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d023      	beq.n	8007880 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b03      	cmp	r3, #3
 8007842:	d011      	beq.n	8007868 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007848:	f043 0204 	orr.w	r2, r3, #4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	e00b      	b.n	8007880 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	693b      	ldr	r3, [r7, #16]
        return;
 800787e:	e080      	b.n	8007982 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d014      	beq.n	80078b4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788e:	f043 0201 	orr.w	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00c      	beq.n	80078d8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f043 0208 	orr.w	r2, r3, #8
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078ca:	2300      	movs	r3, #0
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d04f      	beq.n	8007980 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80078ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <HAL_SPI_IRQHandler+0x168>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d034      	beq.n	8007976 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0203 	bic.w	r2, r2, #3
 800791a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d011      	beq.n	8007948 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007928:	4a17      	ldr	r2, [pc, #92]	@ (8007988 <HAL_SPI_IRQHandler+0x1e4>)
 800792a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe f905 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800794c:	2b00      	cmp	r3, #0
 800794e:	d016      	beq.n	800797e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007954:	4a0c      	ldr	r2, [pc, #48]	@ (8007988 <HAL_SPI_IRQHandler+0x1e4>)
 8007956:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe f8ef 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007974:	e003      	b.n	800797e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f830 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800797c:	e000      	b.n	8007980 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800797e:	bf00      	nop
    return;
 8007980:	bf00      	nop
  }
}
 8007982:	3720      	adds	r7, #32
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08007c65 	.word	0x08007c65

0800798c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079fe:	f7fd fdab 	bl	8005558 <HAL_GetTick>
 8007a02:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a12:	d03b      	beq.n	8007a8c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0220 	bic.w	r2, r2, #32
 8007a22:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0202 	bic.w	r2, r2, #2
 8007a32:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	2164      	movs	r1, #100	@ 0x64
 8007a38:	6978      	ldr	r0, [r7, #20]
 8007a3a:	f000 fa15 	bl	8007e68 <SPI_EndRxTxTransaction>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a48:	f043 0220 	orr.w	r2, r3, #32
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f7ff ffa9 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a8a:	e002      	b.n	8007a92 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007a8c:	6978      	ldr	r0, [r7, #20]
 8007a8e:	f7fd fb07 	bl	80050a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aa6:	f7fd fd57 	bl	8005558 <HAL_GetTick>
 8007aaa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aba:	d03b      	beq.n	8007b34 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0220 	bic.w	r2, r2, #32
 8007aca:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10d      	bne.n	8007af0 <SPI_DMAReceiveCplt+0x58>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007adc:	d108      	bne.n	8007af0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0203 	bic.w	r2, r2, #3
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	e007      	b.n	8007b00 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	2164      	movs	r1, #100	@ 0x64
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f949 	bl	8007d9c <SPI_EndRxTransaction>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff ff55 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007b32:	e002      	b.n	8007b3a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7fd fad5 	bl	80050e4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b4e:	f7fd fd03 	bl	8005558 <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b62:	d02f      	beq.n	8007bc4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0220 	bic.w	r2, r2, #32
 8007b72:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	2164      	movs	r1, #100	@ 0x64
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f975 	bl	8007e68 <SPI_EndRxTxTransaction>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b88:	f043 0220 	orr.w	r2, r3, #32
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0203 	bic.w	r2, r2, #3
 8007b9e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff ff0d 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007bc2:	e002      	b.n	8007bca <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f7ff fee1 	bl	800798c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fede 	bl	80079a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007be4:	bf00      	nop
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff feda 	bl	80079b4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fed6 	bl	80079c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0203 	bic.w	r2, r2, #3
 8007c40:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c46:	f043 0210 	orr.w	r2, r3, #16
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fec0 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff feac 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c9c:	f7fd fc5c 	bl	8005558 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4413      	add	r3, r2
 8007caa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cac:	f7fd fc54 	bl	8005558 <HAL_GetTick>
 8007cb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cb2:	4b39      	ldr	r3, [pc, #228]	@ (8007d98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	015b      	lsls	r3, r3, #5
 8007cb8:	0d1b      	lsrs	r3, r3, #20
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cc2:	e054      	b.n	8007d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cca:	d050      	beq.n	8007d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ccc:	f7fd fc44 	bl	8005558 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d902      	bls.n	8007ce2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d13d      	bne.n	8007d5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cfa:	d111      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d04:	d004      	beq.n	8007d10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0e:	d107      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d28:	d10f      	bne.n	8007d4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e017      	b.n	8007d8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4013      	ands	r3, r2
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d19b      	bne.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	200000a0 	.word	0x200000a0

08007d9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007db0:	d111      	bne.n	8007dd6 <SPI_EndRxTransaction+0x3a>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dba:	d004      	beq.n	8007dc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc4:	d107      	bne.n	8007dd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dde:	d12a      	bne.n	8007e36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de8:	d012      	beq.n	8007e10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	2180      	movs	r1, #128	@ 0x80
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff ff49 	bl	8007c8c <SPI_WaitFlagStateUntilTimeout>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d02d      	beq.n	8007e5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e026      	b.n	8007e5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2200      	movs	r2, #0
 8007e18:	2101      	movs	r1, #1
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff ff36 	bl	8007c8c <SPI_WaitFlagStateUntilTimeout>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01a      	beq.n	8007e5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2a:	f043 0220 	orr.w	r2, r3, #32
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e013      	b.n	8007e5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2101      	movs	r1, #1
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff ff23 	bl	8007c8c <SPI_WaitFlagStateUntilTimeout>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e000      	b.n	8007e5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee4 <SPI_EndRxTxTransaction+0x7c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee8 <SPI_EndRxTxTransaction+0x80>)
 8007e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7e:	0d5b      	lsrs	r3, r3, #21
 8007e80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007e84:	fb02 f303 	mul.w	r3, r2, r3
 8007e88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e92:	d112      	bne.n	8007eba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2180      	movs	r1, #128	@ 0x80
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f7ff fef4 	bl	8007c8c <SPI_WaitFlagStateUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d016      	beq.n	8007ed8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eae:	f043 0220 	orr.w	r2, r3, #32
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e00f      	b.n	8007eda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed0:	2b80      	cmp	r3, #128	@ 0x80
 8007ed2:	d0f2      	beq.n	8007eba <SPI_EndRxTxTransaction+0x52>
 8007ed4:	e000      	b.n	8007ed8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ed6:	bf00      	nop
  }

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200000a0 	.word	0x200000a0
 8007ee8:	165e9f81 	.word	0x165e9f81

08007eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e03f      	b.n	8007f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fd f872 	bl	8004ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2224      	movs	r2, #36	@ 0x24
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f929 	bl	8008188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695a      	ldr	r2, [r3, #20]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b08a      	sub	sp, #40	@ 0x28
 8007f8a:	af02      	add	r7, sp, #8
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d17c      	bne.n	80080a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_Transmit+0x2c>
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e075      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_UART_Transmit+0x3e>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e06e      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2221      	movs	r2, #33	@ 0x21
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fda:	f7fd fabd 	bl	8005558 <HAL_GetTick>
 8007fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	88fa      	ldrh	r2, [r7, #6]
 8007fe4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff4:	d108      	bne.n	8008008 <HAL_UART_Transmit+0x82>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	e003      	b.n	8008010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008018:	e02a      	b.n	8008070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2200      	movs	r2, #0
 8008022:	2180      	movs	r1, #128	@ 0x80
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f840 	bl	80080aa <UART_WaitOnFlagUntilTimeout>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e036      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	3302      	adds	r3, #2
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	e007      	b.n	8008062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	3301      	adds	r3, #1
 8008060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1cf      	bne.n	800801a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2200      	movs	r2, #0
 8008082:	2140      	movs	r1, #64	@ 0x40
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f810 	bl	80080aa <UART_WaitOnFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e006      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	e000      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b090      	sub	sp, #64	@ 0x40
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	603b      	str	r3, [r7, #0]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ba:	e050      	b.n	800815e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d04c      	beq.n	800815e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <UART_WaitOnFlagUntilTimeout+0x30>
 80080ca:	f7fd fa45 	bl	8005558 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d241      	bcs.n	800815e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	330c      	adds	r3, #12
 80080e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	330c      	adds	r3, #12
 80080f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80080fc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e5      	bne.n	80080da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3314      	adds	r3, #20
 8008114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	613b      	str	r3, [r7, #16]
   return(result);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800812e:	623a      	str	r2, [r7, #32]
 8008130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	69f9      	ldr	r1, [r7, #28]
 8008134:	6a3a      	ldr	r2, [r7, #32]
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	61bb      	str	r3, [r7, #24]
   return(result);
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e5      	bne.n	800810e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e00f      	b.n	800817e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4013      	ands	r3, r2
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	bf0c      	ite	eq
 800816e:	2301      	moveq	r3, #1
 8008170:	2300      	movne	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	429a      	cmp	r2, r3
 800817a:	d09f      	beq.n	80080bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3740      	adds	r7, #64	@ 0x40
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800818c:	b0c0      	sub	sp, #256	@ 0x100
 800818e:	af00      	add	r7, sp, #0
 8008190:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a4:	68d9      	ldr	r1, [r3, #12]
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	ea40 0301 	orr.w	r3, r0, r1
 80081b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	431a      	orrs	r2, r3
 80081c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80081e0:	f021 010c 	bic.w	r1, r1, #12
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081ee:	430b      	orrs	r3, r1
 80081f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008202:	6999      	ldr	r1, [r3, #24]
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	ea40 0301 	orr.w	r3, r0, r1
 800820e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b8f      	ldr	r3, [pc, #572]	@ (8008454 <UART_SetConfig+0x2cc>)
 8008218:	429a      	cmp	r2, r3
 800821a:	d005      	beq.n	8008228 <UART_SetConfig+0xa0>
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b8d      	ldr	r3, [pc, #564]	@ (8008458 <UART_SetConfig+0x2d0>)
 8008224:	429a      	cmp	r2, r3
 8008226:	d104      	bne.n	8008232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008228:	f7fe fe40 	bl	8006eac <HAL_RCC_GetPCLK2Freq>
 800822c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008230:	e003      	b.n	800823a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008232:	f7fe fe27 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 8008236:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800823a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008244:	f040 810c 	bne.w	8008460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800824c:	2200      	movs	r2, #0
 800824e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008252:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800825a:	4622      	mov	r2, r4
 800825c:	462b      	mov	r3, r5
 800825e:	1891      	adds	r1, r2, r2
 8008260:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008262:	415b      	adcs	r3, r3
 8008264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800826a:	4621      	mov	r1, r4
 800826c:	eb12 0801 	adds.w	r8, r2, r1
 8008270:	4629      	mov	r1, r5
 8008272:	eb43 0901 	adc.w	r9, r3, r1
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800828a:	4690      	mov	r8, r2
 800828c:	4699      	mov	r9, r3
 800828e:	4623      	mov	r3, r4
 8008290:	eb18 0303 	adds.w	r3, r8, r3
 8008294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008298:	462b      	mov	r3, r5
 800829a:	eb49 0303 	adc.w	r3, r9, r3
 800829e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082b6:	460b      	mov	r3, r1
 80082b8:	18db      	adds	r3, r3, r3
 80082ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80082bc:	4613      	mov	r3, r2
 80082be:	eb42 0303 	adc.w	r3, r2, r3
 80082c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80082c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082cc:	f7f8 fc84 	bl	8000bd8 <__aeabi_uldivmod>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4b61      	ldr	r3, [pc, #388]	@ (800845c <UART_SetConfig+0x2d4>)
 80082d6:	fba3 2302 	umull	r2, r3, r3, r2
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	011c      	lsls	r4, r3, #4
 80082de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80082ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80082f0:	4642      	mov	r2, r8
 80082f2:	464b      	mov	r3, r9
 80082f4:	1891      	adds	r1, r2, r2
 80082f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80082f8:	415b      	adcs	r3, r3
 80082fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008300:	4641      	mov	r1, r8
 8008302:	eb12 0a01 	adds.w	sl, r2, r1
 8008306:	4649      	mov	r1, r9
 8008308:	eb43 0b01 	adc.w	fp, r3, r1
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800831c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008320:	4692      	mov	sl, r2
 8008322:	469b      	mov	fp, r3
 8008324:	4643      	mov	r3, r8
 8008326:	eb1a 0303 	adds.w	r3, sl, r3
 800832a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800832e:	464b      	mov	r3, r9
 8008330:	eb4b 0303 	adc.w	r3, fp, r3
 8008334:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008344:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800834c:	460b      	mov	r3, r1
 800834e:	18db      	adds	r3, r3, r3
 8008350:	643b      	str	r3, [r7, #64]	@ 0x40
 8008352:	4613      	mov	r3, r2
 8008354:	eb42 0303 	adc.w	r3, r2, r3
 8008358:	647b      	str	r3, [r7, #68]	@ 0x44
 800835a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800835e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008362:	f7f8 fc39 	bl	8000bd8 <__aeabi_uldivmod>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4611      	mov	r1, r2
 800836c:	4b3b      	ldr	r3, [pc, #236]	@ (800845c <UART_SetConfig+0x2d4>)
 800836e:	fba3 2301 	umull	r2, r3, r3, r1
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	2264      	movs	r2, #100	@ 0x64
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	1acb      	subs	r3, r1, r3
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008382:	4b36      	ldr	r3, [pc, #216]	@ (800845c <UART_SetConfig+0x2d4>)
 8008384:	fba3 2302 	umull	r2, r3, r3, r2
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008390:	441c      	add	r4, r3
 8008392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008396:	2200      	movs	r2, #0
 8008398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800839c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083a4:	4642      	mov	r2, r8
 80083a6:	464b      	mov	r3, r9
 80083a8:	1891      	adds	r1, r2, r2
 80083aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083ac:	415b      	adcs	r3, r3
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083b4:	4641      	mov	r1, r8
 80083b6:	1851      	adds	r1, r2, r1
 80083b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80083ba:	4649      	mov	r1, r9
 80083bc:	414b      	adcs	r3, r1
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083cc:	4659      	mov	r1, fp
 80083ce:	00cb      	lsls	r3, r1, #3
 80083d0:	4651      	mov	r1, sl
 80083d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083d6:	4651      	mov	r1, sl
 80083d8:	00ca      	lsls	r2, r1, #3
 80083da:	4610      	mov	r0, r2
 80083dc:	4619      	mov	r1, r3
 80083de:	4603      	mov	r3, r0
 80083e0:	4642      	mov	r2, r8
 80083e2:	189b      	adds	r3, r3, r2
 80083e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083e8:	464b      	mov	r3, r9
 80083ea:	460a      	mov	r2, r1
 80083ec:	eb42 0303 	adc.w	r3, r2, r3
 80083f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008400:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008408:	460b      	mov	r3, r1
 800840a:	18db      	adds	r3, r3, r3
 800840c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800840e:	4613      	mov	r3, r2
 8008410:	eb42 0303 	adc.w	r3, r2, r3
 8008414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800841a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800841e:	f7f8 fbdb 	bl	8000bd8 <__aeabi_uldivmod>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <UART_SetConfig+0x2d4>)
 8008428:	fba3 1302 	umull	r1, r3, r3, r2
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	2164      	movs	r1, #100	@ 0x64
 8008430:	fb01 f303 	mul.w	r3, r1, r3
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	3332      	adds	r3, #50	@ 0x32
 800843a:	4a08      	ldr	r2, [pc, #32]	@ (800845c <UART_SetConfig+0x2d4>)
 800843c:	fba2 2303 	umull	r2, r3, r2, r3
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	f003 0207 	and.w	r2, r3, #7
 8008446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4422      	add	r2, r4
 800844e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008450:	e106      	b.n	8008660 <UART_SetConfig+0x4d8>
 8008452:	bf00      	nop
 8008454:	40011000 	.word	0x40011000
 8008458:	40011400 	.word	0x40011400
 800845c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008464:	2200      	movs	r2, #0
 8008466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800846a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800846e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008472:	4642      	mov	r2, r8
 8008474:	464b      	mov	r3, r9
 8008476:	1891      	adds	r1, r2, r2
 8008478:	6239      	str	r1, [r7, #32]
 800847a:	415b      	adcs	r3, r3
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
 800847e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008482:	4641      	mov	r1, r8
 8008484:	1854      	adds	r4, r2, r1
 8008486:	4649      	mov	r1, r9
 8008488:	eb43 0501 	adc.w	r5, r3, r1
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	00eb      	lsls	r3, r5, #3
 8008496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800849a:	00e2      	lsls	r2, r4, #3
 800849c:	4614      	mov	r4, r2
 800849e:	461d      	mov	r5, r3
 80084a0:	4643      	mov	r3, r8
 80084a2:	18e3      	adds	r3, r4, r3
 80084a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084a8:	464b      	mov	r3, r9
 80084aa:	eb45 0303 	adc.w	r3, r5, r3
 80084ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084c2:	f04f 0200 	mov.w	r2, #0
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084ce:	4629      	mov	r1, r5
 80084d0:	008b      	lsls	r3, r1, #2
 80084d2:	4621      	mov	r1, r4
 80084d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d8:	4621      	mov	r1, r4
 80084da:	008a      	lsls	r2, r1, #2
 80084dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80084e0:	f7f8 fb7a 	bl	8000bd8 <__aeabi_uldivmod>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4b60      	ldr	r3, [pc, #384]	@ (800866c <UART_SetConfig+0x4e4>)
 80084ea:	fba3 2302 	umull	r2, r3, r3, r2
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	011c      	lsls	r4, r3, #4
 80084f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008504:	4642      	mov	r2, r8
 8008506:	464b      	mov	r3, r9
 8008508:	1891      	adds	r1, r2, r2
 800850a:	61b9      	str	r1, [r7, #24]
 800850c:	415b      	adcs	r3, r3
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008514:	4641      	mov	r1, r8
 8008516:	1851      	adds	r1, r2, r1
 8008518:	6139      	str	r1, [r7, #16]
 800851a:	4649      	mov	r1, r9
 800851c:	414b      	adcs	r3, r1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	f04f 0200 	mov.w	r2, #0
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800852c:	4659      	mov	r1, fp
 800852e:	00cb      	lsls	r3, r1, #3
 8008530:	4651      	mov	r1, sl
 8008532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008536:	4651      	mov	r1, sl
 8008538:	00ca      	lsls	r2, r1, #3
 800853a:	4610      	mov	r0, r2
 800853c:	4619      	mov	r1, r3
 800853e:	4603      	mov	r3, r0
 8008540:	4642      	mov	r2, r8
 8008542:	189b      	adds	r3, r3, r2
 8008544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008548:	464b      	mov	r3, r9
 800854a:	460a      	mov	r2, r1
 800854c:	eb42 0303 	adc.w	r3, r2, r3
 8008550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800855e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800856c:	4649      	mov	r1, r9
 800856e:	008b      	lsls	r3, r1, #2
 8008570:	4641      	mov	r1, r8
 8008572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008576:	4641      	mov	r1, r8
 8008578:	008a      	lsls	r2, r1, #2
 800857a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800857e:	f7f8 fb2b 	bl	8000bd8 <__aeabi_uldivmod>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4611      	mov	r1, r2
 8008588:	4b38      	ldr	r3, [pc, #224]	@ (800866c <UART_SetConfig+0x4e4>)
 800858a:	fba3 2301 	umull	r2, r3, r3, r1
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	2264      	movs	r2, #100	@ 0x64
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	3332      	adds	r3, #50	@ 0x32
 800859c:	4a33      	ldr	r2, [pc, #204]	@ (800866c <UART_SetConfig+0x4e4>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085a8:	441c      	add	r4, r3
 80085aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ae:	2200      	movs	r2, #0
 80085b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80085b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80085b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80085b8:	4642      	mov	r2, r8
 80085ba:	464b      	mov	r3, r9
 80085bc:	1891      	adds	r1, r2, r2
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	415b      	adcs	r3, r3
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085c8:	4641      	mov	r1, r8
 80085ca:	1851      	adds	r1, r2, r1
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	4649      	mov	r1, r9
 80085d0:	414b      	adcs	r3, r1
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085e0:	4659      	mov	r1, fp
 80085e2:	00cb      	lsls	r3, r1, #3
 80085e4:	4651      	mov	r1, sl
 80085e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ea:	4651      	mov	r1, sl
 80085ec:	00ca      	lsls	r2, r1, #3
 80085ee:	4610      	mov	r0, r2
 80085f0:	4619      	mov	r1, r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	4642      	mov	r2, r8
 80085f6:	189b      	adds	r3, r3, r2
 80085f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085fa:	464b      	mov	r3, r9
 80085fc:	460a      	mov	r2, r1
 80085fe:	eb42 0303 	adc.w	r3, r2, r3
 8008602:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	663b      	str	r3, [r7, #96]	@ 0x60
 800860e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800861c:	4649      	mov	r1, r9
 800861e:	008b      	lsls	r3, r1, #2
 8008620:	4641      	mov	r1, r8
 8008622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008626:	4641      	mov	r1, r8
 8008628:	008a      	lsls	r2, r1, #2
 800862a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800862e:	f7f8 fad3 	bl	8000bd8 <__aeabi_uldivmod>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4b0d      	ldr	r3, [pc, #52]	@ (800866c <UART_SetConfig+0x4e4>)
 8008638:	fba3 1302 	umull	r1, r3, r3, r2
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	2164      	movs	r1, #100	@ 0x64
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	3332      	adds	r3, #50	@ 0x32
 800864a:	4a08      	ldr	r2, [pc, #32]	@ (800866c <UART_SetConfig+0x4e4>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	f003 020f 	and.w	r2, r3, #15
 8008656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4422      	add	r2, r4
 800865e:	609a      	str	r2, [r3, #8]
}
 8008660:	bf00      	nop
 8008662:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008666:	46bd      	mov	sp, r7
 8008668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800866c:	51eb851f 	.word	0x51eb851f

08008670 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  return x;
 8008678:	687b      	ldr	r3, [r7, #4]
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	4603      	mov	r3, r0
 800868e:	6039      	str	r1, [r7, #0]
 8008690:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 8008692:	f107 0208 	add.w	r2, r7, #8
 8008696:	79f9      	ldrb	r1, [r7, #7]
 8008698:	2304      	movs	r3, #4
 800869a:	2002      	movs	r0, #2
 800869c:	f000 f8f6 	bl	800888c <sl_wfx_bus_access>
 80086a0:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 80086a2:	7a3b      	ldrb	r3, [r7, #8]
 80086a4:	461a      	mov	r2, r3
 80086a6:	7a7b      	ldrb	r3, [r7, #9]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	4313      	orrs	r3, r2
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 80086b4:	68fb      	ldr	r3, [r7, #12]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	4603      	mov	r3, r0
 80086c6:	460a      	mov	r2, r1
 80086c8:	71fb      	strb	r3, [r7, #7]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 80086ce:	88bb      	ldrh	r3, [r7, #4]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	733b      	strb	r3, [r7, #12]
 80086d4:	88bb      	ldrh	r3, [r7, #4]
 80086d6:	0a1b      	lsrs	r3, r3, #8
 80086d8:	b29b      	uxth	r3, r3
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 80086e6:	f107 020c 	add.w	r2, r7, #12
 80086ea:	79f9      	ldrb	r1, [r7, #7]
 80086ec:	2304      	movs	r3, #4
 80086ee:	2001      	movs	r0, #1
 80086f0:	f000 f8cc 	bl	800888c <sl_wfx_bus_access>
 80086f4:	4603      	mov	r3, r0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	4603      	mov	r3, r0
 8008706:	6039      	str	r1, [r7, #0]
 8008708:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 800870a:	79f9      	ldrb	r1, [r7, #7]
 800870c:	2304      	movs	r3, #4
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	2002      	movs	r0, #2
 8008712:	f000 f8bb 	bl	800888c <sl_wfx_bus_access>
 8008716:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff ffa7 	bl	8008670 <uint32_identity>
 8008722:	4602      	mov	r2, r0
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	4603      	mov	r3, r0
 800873a:	6039      	str	r1, [r7, #0]
 800873c:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff ff95 	bl	8008670 <uint32_identity>
 8008746:	4603      	mov	r3, r0
 8008748:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 800874a:	463a      	mov	r2, r7
 800874c:	79f9      	ldrb	r1, [r7, #7]
 800874e:	2304      	movs	r3, #4
 8008750:	2001      	movs	r0, #1
 8008752:	f000 f89b 	bl	800888c <sl_wfx_bus_access>
 8008756:	4603      	mov	r3, r0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	2102      	movs	r1, #2
 8008770:	2002      	movs	r0, #2
 8008772:	f000 f88b 	bl	800888c <sl_wfx_bus_access>
 8008776:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 8008778:	68fb      	ldr	r3, [r7, #12]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	2102      	movs	r1, #2
 8008792:	2001      	movs	r0, #1
 8008794:	f000 f87a 	bl	800888c <sl_wfx_bus_access>
 8008798:	60f8      	str	r0, [r7, #12]

  return result;
 800879a:	68fb      	ldr	r3, [r7, #12]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087b6:	d301      	bcc.n	80087bc <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 80087b8:	2321      	movs	r3, #33	@ 0x21
 80087ba:	e00f      	b.n	80087dc <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80087bc:	68f9      	ldr	r1, [r7, #12]
 80087be:	2004      	movs	r0, #4
 80087c0:	f7ff ffb7 	bl	8008732 <sl_wfx_reg_write_32>
 80087c4:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	2105      	movs	r1, #5
 80087d2:	2001      	movs	r0, #1
 80087d4:	f000 f85a 	bl	800888c <sl_wfx_bus_access>
 80087d8:	6178      	str	r0, [r7, #20]
  }

  return result;
 80087da:	697b      	ldr	r3, [r7, #20]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	2004      	movs	r0, #4
 80087f2:	f7ff ff9e 	bl	8008732 <sl_wfx_reg_write_32>
 80087f6:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	2005      	movs	r0, #5
 8008802:	f7ff ff96 	bl	8008732 <sl_wfx_reg_write_32>
 8008806:	60f8      	str	r0, [r7, #12]
  }

  return result;
 8008808:	68fb      	ldr	r3, [r7, #12]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b086      	sub	sp, #24
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	2004      	movs	r0, #4
 8008820:	f7ff ff87 	bl	8008732 <sl_wfx_reg_write_32>
 8008824:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4619      	mov	r1, r3
 800882c:	2000      	movs	r0, #0
 800882e:	f7ff ff66 	bl	80086fe <sl_wfx_reg_read_32>
 8008832:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800883a:	4619      	mov	r1, r3
 800883c:	2000      	movs	r0, #0
 800883e:	f7ff ff78 	bl	8008732 <sl_wfx_reg_write_32>
 8008842:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 8008844:	2300      	movs	r3, #0
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	e011      	b.n	800886e <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800884a:	f107 030c 	add.w	r3, r7, #12
 800884e:	4619      	mov	r1, r3
 8008850:	2000      	movs	r0, #0
 8008852:	f7ff ff54 	bl	80086fe <sl_wfx_reg_read_32>
 8008856:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 8008862:	2001      	movs	r0, #1
 8008864:	f001 fadc 	bl	8009e20 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	3301      	adds	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b13      	cmp	r3, #19
 8008872:	d9ea      	bls.n	800884a <sl_wfx_apb_read_32+0x38>
 8008874:	e000      	b.n	8008878 <sl_wfx_apb_read_32+0x66>
      break;
 8008876:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	2005      	movs	r0, #5
 800887c:	f7ff ff3f 	bl	80086fe <sl_wfx_reg_read_32>
 8008880:	6138      	str	r0, [r7, #16]

  return result;
 8008882:	693b      	ldr	r3, [r7, #16]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60ba      	str	r2, [r7, #8]
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]
 800889a:	460b      	mov	r3, r1
 800889c:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 800889e:	4b43      	ldr	r3, [pc, #268]	@ (80089ac <sl_wfx_bus_access+0x120>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01a      	beq.n	80088e4 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 80088ae:	2001      	movs	r0, #1
 80088b0:	f001 fa30 	bl	8009d14 <sl_wfx_host_set_wake_up_pin>
 80088b4:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d171      	bne.n	80089a0 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d105      	bne.n	80088ce <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 80088c2:	f001 fa43 	bl	8009d4c <sl_wfx_host_wait_for_wake_up>
 80088c6:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d168      	bne.n	80089a0 <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 80088ce:	4b37      	ldr	r3, [pc, #220]	@ (80089ac <sl_wfx_bus_access+0x120>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80088d6:	4b35      	ldr	r3, [pc, #212]	@ (80089ac <sl_wfx_bus_access+0x120>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0208 	bic.w	r2, r2, #8
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d107      	bne.n	80088fa <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f85d 	bl	80089b0 <sl_wfx_reg_read>
 80088f6:	6178      	str	r0, [r7, #20]
 80088f8:	e00c      	b.n	8008914 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d107      	bne.n	8008910 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f89e 	bl	8008a48 <sl_wfx_reg_write>
 800890c:	6178      	str	r0, [r7, #20]
 800890e:	e001      	b.n	8008914 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 8008910:	2321      	movs	r3, #33	@ 0x21
 8008912:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d142      	bne.n	80089a0 <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 800891a:	4b24      	ldr	r3, [pc, #144]	@ (80089ac <sl_wfx_bus_access+0x120>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8008922:	f003 0310 	and.w	r3, r3, #16
 8008926:	2b00      	cmp	r3, #0
 8008928:	d039      	beq.n	800899e <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d136      	bne.n	800899e <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d108      	bne.n	8008948 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d130      	bne.n	800899e <sl_wfx_bus_access+0x112>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008944:	2b00      	cmp	r3, #0
 8008946:	d12a      	bne.n	800899e <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 8008948:	4b18      	ldr	r3, [pc, #96]	@ (80089ac <sl_wfx_bus_access+0x120>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8008950:	2b01      	cmp	r3, #1
 8008952:	d824      	bhi.n	800899e <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3b02      	subs	r3, #2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008962:	2b00      	cmp	r3, #0
 8008964:	d11b      	bne.n	800899e <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 8008966:	7bb9      	ldrb	r1, [r7, #14]
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fa01 	bl	8009d74 <sl_wfx_host_sleep_grant>
 8008972:	4603      	mov	r3, r0
 8008974:	f640 3208 	movw	r2, #2824	@ 0xb08
 8008978:	4293      	cmp	r3, r2
 800897a:	d110      	bne.n	800899e <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 800897c:	4b0b      	ldr	r3, [pc, #44]	@ (80089ac <sl_wfx_bus_access+0x120>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8008984:	4b09      	ldr	r3, [pc, #36]	@ (80089ac <sl_wfx_bus_access+0x120>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0208 	orr.w	r2, r2, #8
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 8008992:	2000      	movs	r0, #0
 8008994:	f001 f9be 	bl	8009d14 <sl_wfx_host_set_wake_up_pin>
 8008998:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 800899e:	bf00      	nop
  return result;
 80089a0:	697b      	ldr	r3, [r7, #20]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000a34 	.word	0x20000a34

080089b0 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08a      	sub	sp, #40	@ 0x28
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	4603      	mov	r3, r0
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	031b      	lsls	r3, r3, #12
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d8:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80089da:	8bfb      	ldrh	r3, [r7, #30]
 80089dc:	0a1b      	lsrs	r3, r3, #8
 80089de:	b29b      	uxth	r3, r3
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	753b      	strb	r3, [r7, #20]
 80089e4:	8bfb      	ldrh	r3, [r7, #30]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80089ea:	f002 f80f 	bl	800aa0c <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f107 0114 	add.w	r1, r7, #20
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2202      	movs	r2, #2
 80089fc:	2002      	movs	r0, #2
 80089fe:	f002 f81d 	bl	800aa3c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8008a02:	f002 f80f 	bl	800aa24 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d118      	bne.n	8008a3e <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	785a      	ldrb	r2, [r3, #1]
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	3301      	adds	r3, #1
 8008a22:	7dfa      	ldrb	r2, [r7, #23]
 8008a24:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	789b      	ldrb	r3, [r3, #2]
 8008a2a:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	3302      	adds	r3, #2
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	78d2      	ldrb	r2, [r2, #3]
 8008a34:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	3303      	adds	r3, #3
 8008a3a:	7dfa      	ldrb	r2, [r7, #23]
 8008a3c:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	@ 0x28
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	4603      	mov	r3, r0
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d118      	bne.n	8008a8e <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	785a      	ldrb	r2, [r3, #1]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	7efa      	ldrb	r2, [r7, #27]
 8008a74:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	789b      	ldrb	r3, [r3, #2]
 8008a7a:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	3302      	adds	r3, #2
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	78d2      	ldrb	r2, [r2, #3]
 8008a84:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	3303      	adds	r3, #3
 8008a8a:	7efa      	ldrb	r2, [r7, #27]
 8008a8c:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	031b      	lsls	r3, r3, #12
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8008aa0:	8b3b      	ldrh	r3, [r7, #24]
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	753b      	strb	r3, [r7, #20]
 8008aaa:	8b3b      	ldrh	r3, [r7, #24]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8008ab0:	f001 ffac 	bl	800aa0c <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f107 0114 	add.w	r1, r7, #20
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f001 ffba 	bl	800aa3c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8008ac8:	f001 ffac 	bl	800aa24 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3720      	adds	r7, #32
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 8008ade:	f001 ff6f 	bl	800a9c0 <sl_wfx_host_init_bus>
 8008ae2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d12b      	bne.n	8008b42 <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8008aea:	f001 f8fb 	bl	8009ce4 <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008aee:	463b      	mov	r3, r7
 8008af0:	4619      	mov	r1, r3
 8008af2:	2000      	movs	r0, #0
 8008af4:	f7ff fe03 	bl	80086fe <sl_wfx_reg_read_32>
 8008af8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d120      	bne.n	8008b42 <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <sl_wfx_init_bus+0x36>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d104      	bne.n	8008b18 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d114      	bne.n	8008b42 <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b1e:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b26:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	4b08      	ldr	r3, [pc, #32]	@ (8008b4c <sl_wfx_init_bus+0x74>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	4619      	mov	r1, r3
 8008b34:	2000      	movs	r0, #0
 8008b36:	f7ff fdfc 	bl	8008732 <sl_wfx_reg_write_32>
 8008b3a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0

  error_handler:
 8008b40:	bf00      	nop
  return status;
 8008b42:	687b      	ldr	r3, [r7, #4]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	04045400 	.word	0x04045400

08008b50 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8008b54:	f001 ff4c 	bl	800a9f0 <sl_wfx_host_deinit_bus>
 8008b58:	4603      	mov	r3, r0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <uint16_identity>:
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	4603      	mov	r3, r0
 8008b66:	80fb      	strh	r3, [r7, #6]
  return x;
 8008b68:	88fb      	ldrh	r3, [r7, #6]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <uint32_identity>:
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  return x;
 8008b7e:	687b      	ldr	r3, [r7, #4]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8008b8c:	b590      	push	{r4, r7, lr}
 8008b8e:	b089      	sub	sp, #36	@ 0x24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 8008b94:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8008b98:	2100      	movs	r1, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f013 fc22 	bl	801c3e4 <memset>

  sl_wfx_context = context;
 8008ba0:	4a5f      	ldr	r2, [pc, #380]	@ (8008d20 <sl_wfx_init+0x194>)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 8008ba6:	4b5e      	ldr	r3, [pc, #376]	@ (8008d20 <sl_wfx_init+0x194>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  result = sl_wfx_init_bus(  );
 8008bb0:	f7ff ff92 	bl	8008ad8 <sl_wfx_init_bus>
 8008bb4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 80a2 	bne.w	8008d02 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8008bbe:	f000 fbf3 	bl	80093a8 <sl_wfx_init_chip>
 8008bc2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f040 809b 	bne.w	8008d02 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8008bcc:	f000 fc80 	bl	80094d0 <sl_wfx_download_run_bootloader>
 8008bd0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f040 8094 	bne.w	8008d02 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8008bda:	20e1      	movs	r0, #225	@ 0xe1
 8008bdc:	f001 f8da 	bl	8009d94 <sl_wfx_host_setup_waited_event>
 8008be0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 808c 	bne.w	8008d02 <sl_wfx_init+0x176>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8008bea:	f000 fcb9 	bl	8009560 <sl_wfx_download_run_firmware>
 8008bee:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f040 8085 	bne.w	8008d02 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8008bf8:	f000 fb72 	bl	80092e0 <sl_wfx_enable_irq>
 8008bfc:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d17e      	bne.n	8008d02 <sl_wfx_init+0x176>

  result = sl_wfx_set_access_mode_message(  );
 8008c04:	f000 fbb4 	bl	8009370 <sl_wfx_set_access_mode_message>
 8008c08:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d178      	bne.n	8008d02 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8008c10:	f107 0314 	add.w	r3, r7, #20
 8008c14:	461a      	mov	r2, r3
 8008c16:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008c1a:	20e1      	movs	r0, #225	@ 0xe1
 8008c1c:	f001 f8cc 	bl	8009db8 <sl_wfx_host_wait_for_confirmation>
 8008c20:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d16c      	bne.n	8008d02 <sl_wfx_init+0x176>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f203 2016 	addw	r0, r3, #534	@ 0x216
         startup_info->body.mac_addr[0],
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	3326      	adds	r3, #38	@ 0x26
  memcpy(&(context->mac_addr_0.octet),
 8008c56:	2206      	movs	r2, #6
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f013 fc80 	bl	801c55e <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
         startup_info->body.mac_addr[1],
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	332c      	adds	r3, #44	@ 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8008c68:	2206      	movs	r2, #6
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	f013 fc77 	bl	801c55e <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	8c1b      	ldrh	r3, [r3, #32]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff ff71 	bl	8008b5e <uint16_identity>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4b28      	ldr	r3, [pc, #160]	@ (8008d24 <sl_wfx_init+0x198>)
 8008c82:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	330a      	adds	r3, #10
 8008c8e:	220e      	movs	r2, #14
 8008c90:	4619      	mov	r1, r3
 8008c92:	f013 fc64 	bl	801c55e <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 8008c96:	2001      	movs	r0, #1
 8008c98:	f001 f83c 	bl	8009d14 <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8008c9c:	f107 0312 	add.w	r3, r7, #18
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fff7 	bl	8009c94 <sl_wfx_host_get_pds_size>
 8008ca6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d129      	bne.n	8008d02 <sl_wfx_init+0x176>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 8008cae:	2300      	movs	r3, #0
 8008cb0:	76fb      	strb	r3, [r7, #27]
 8008cb2:	e01c      	b.n	8008cee <sl_wfx_init+0x162>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 8008cb4:	7efb      	ldrb	r3, [r7, #27]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 ffbc 	bl	8009c3c <sl_wfx_host_get_pds_data>
 8008cc4:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11a      	bne.n	8008d02 <sl_wfx_init+0x176>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8008ccc:	68fc      	ldr	r4, [r7, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f7 fae5 	bl	80002a0 <strlen>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 f950 	bl	8008f80 <sl_wfx_send_configuration>
 8008ce0:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <sl_wfx_init+0x176>
  for (uint8_t a = 0; a < pds_size; a++) {
 8008ce8:	7efb      	ldrb	r3, [r7, #27]
 8008cea:	3301      	adds	r3, #1
 8008cec:	76fb      	strb	r3, [r7, #27]
 8008cee:	7efb      	ldrb	r3, [r7, #27]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	8a7b      	ldrh	r3, [r7, #18]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3dd      	bcc.n	8008cb4 <sl_wfx_init+0x128>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8008cf8:	4b09      	ldr	r3, [pc, #36]	@ (8008d20 <sl_wfx_init+0x194>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <sl_wfx_init+0x188>
    sl_wfx_disable_irq( );
 8008d08:	f000 fb0e 	bl	8009328 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8008d0c:	f7ff ff20 	bl	8008b50 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8008d10:	f000 ffe0 	bl	8009cd4 <sl_wfx_host_deinit>
  }

  return result;
 8008d14:	69fb      	ldr	r3, [r7, #28]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3724      	adds	r7, #36	@ 0x24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd90      	pop	{r4, r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000a34 	.word	0x20000a34
 8008d24:	20000a3a 	.word	0x20000a3a

08008d28 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	@ 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8008d46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	3378      	adds	r3, #120	@ 0x78
 8008d52:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8008d54:	f107 0018 	add.w	r0, r7, #24
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	2143      	movs	r1, #67	@ 0x43
 8008d5e:	f000 fed7 	bl	8009b10 <sl_wfx_allocate_command_buffer>
 8008d62:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 8092 	bne.w	8008e90 <sl_wfx_send_join_command+0x168>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	3304      	adds	r3, #4
 8008d76:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8008d78:	68b8      	ldr	r0, [r7, #8]
 8008d7a:	f7ff fefc 	bl	8008b76 <uint32_identity>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 8008d84:	887b      	ldrh	r3, [r7, #2]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff fee9 	bl	8008b5e <uint16_identity>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
  connect_request->security_mode         = security_mode;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008d9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8008da4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8008da8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	d109      	bne.n	8008dc4 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f042 0202 	orr.w	r2, r2, #2
 8008db8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8008dc2:	e007      	b.n	8008dd4 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8008dc4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fec9 	bl	8008b5e <uint16_identity>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8008dd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fec0 	bl	8008b5e <uint16_identity>
 8008dde:	4603      	mov	r3, r0
 8008de0:	461a      	mov	r2, r3
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	861a      	strh	r2, [r3, #48]	@ 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8008de6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff feb7 	bl	8008b5e <uint16_identity>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	68f9      	ldr	r1, [r7, #12]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f013 fbab 	bl	801c55e <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	3332      	adds	r3, #50	@ 0x32
 8008e0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e12:	4618      	mov	r0, r3
 8008e14:	f013 fba3 	bl	801c55e <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	3374      	adds	r3, #116	@ 0x74
 8008e1c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8008e20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e22:	4618      	mov	r0, r3
 8008e24:	f013 fb9b 	bl	801c55e <memcpy>
  if (bssid != NULL) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d007      	beq.n	8008e3e <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	3324      	adds	r3, #36	@ 0x24
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	2206      	movs	r2, #6
 8008e36:	4618      	mov	r0, r3
 8008e38:	f013 fb91 	bl	801c55e <memcpy>
 8008e3c:	e006      	b.n	8008e4c <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	3324      	adds	r3, #36	@ 0x24
 8008e42:	2206      	movs	r2, #6
 8008e44:	21ff      	movs	r1, #255	@ 0xff
 8008e46:	4618      	mov	r0, r3
 8008e48:	f013 facc 	bl	801c3e4 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	b292      	uxth	r2, r2
 8008e52:	4619      	mov	r1, r3
 8008e54:	2043      	movs	r0, #67	@ 0x43
 8008e56:	f000 f90b 	bl	8009070 <sl_wfx_send_request>
 8008e5a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d116      	bne.n	8008e90 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8008e62:	f107 0314 	add.w	r3, r7, #20
 8008e66:	461a      	mov	r2, r3
 8008e68:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008e6c:	2043      	movs	r0, #67	@ 0x43
 8008e6e:	f000 ffa3 	bl	8009db8 <sl_wfx_host_wait_for_confirmation>
 8008e72:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff fe79 	bl	8008b76 <uint32_identity>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2143      	movs	r1, #67	@ 0x43
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fd61 	bl	8009950 <sl_wfx_get_status_code>
 8008e8e:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	2b07      	cmp	r3, #7
 8008e94:	d10d      	bne.n	8008eb2 <sl_wfx_send_join_command+0x18a>
    if (sl_wfx_context->used_buffers > 0) {
 8008e96:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed0 <sl_wfx_send_join_command+0x1a8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <sl_wfx_send_join_command+0x18a>
      sl_wfx_context->used_buffers--;
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed0 <sl_wfx_send_join_command+0x1a8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8008eaa:	3a01      	subs	r2, #1
 8008eac:	b292      	uxth	r2, r2
 8008eae:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <sl_wfx_send_join_command+0x19c>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	2143      	movs	r1, #67	@ 0x43
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fe44 	bl	8009b4c <sl_wfx_free_command_buffer>
  }
  return result;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3728      	adds	r7, #40	@ 0x28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000a34 	.word	0x20000a34

08008ed4 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	4611      	mov	r1, r2
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	71fb      	strb	r3, [r7, #7]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	3301      	adds	r3, #1
 8008eee:	f023 0301 	bic.w	r3, r3, #1
 8008ef2:	330c      	adds	r3, #12
 8008ef4:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8008ef6:	4b21      	ldr	r3, [pc, #132]	@ (8008f7c <sl_wfx_send_ethernet_frame+0xa8>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 8008efe:	3201      	adds	r2, #1
 8008f00:	b292      	uxth	r2, r2
 8008f02:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fe25 	bl	8008b5e <uint16_identity>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	224a      	movs	r2, #74	@ 0x4a
 8008f20:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f003 0306 	and.w	r3, r3, #6
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2208      	movs	r2, #8
 8008f36:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	79ba      	ldrb	r2, [r7, #6]
 8008f3c:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <sl_wfx_send_ethernet_frame+0xa8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff fe09 	bl	8008b5e <uint16_identity>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8008f54:	68b8      	ldr	r0, [r7, #8]
 8008f56:	f7ff fe0e 	bl	8008b76 <uint32_identity>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	461a      	mov	r2, r3
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	204a      	movs	r0, #74	@ 0x4a
 8008f6a:	f000 f881 	bl	8009070 <sl_wfx_send_request>
 8008f6e:	6138      	str	r0, [r7, #16]

  return result;
 8008f70:	693b      	ldr	r3, [r7, #16]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000a34 	.word	0x20000a34

08008f80 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f023 0301 	bic.w	r3, r3, #1
 8008fa2:	3306      	adds	r3, #6
 8008fa4:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8008fa6:	f107 0010 	add.w	r0, r7, #16
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2202      	movs	r2, #2
 8008fae:	2109      	movs	r1, #9
 8008fb0:	f000 fdae 	bl	8009b10 <sl_wfx_allocate_command_buffer>
 8008fb4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d137      	bne.n	800902c <sl_wfx_send_configuration+0xac>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff fdc6 	bl	8008b5e <uint16_identity>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	3302      	adds	r3, #2
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f013 fabb 	bl	801c55e <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	b292      	uxth	r2, r2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	2009      	movs	r0, #9
 8008ff2:	f000 f83d 	bl	8009070 <sl_wfx_send_request>
 8008ff6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d116      	bne.n	800902c <sl_wfx_send_configuration+0xac>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8008ffe:	f107 030c 	add.w	r3, r7, #12
 8009002:	461a      	mov	r2, r3
 8009004:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009008:	2009      	movs	r0, #9
 800900a:	f000 fed5 	bl	8009db8 <sl_wfx_host_wait_for_confirmation>
 800900e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10a      	bne.n	800902c <sl_wfx_send_configuration+0xac>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fdab 	bl	8008b76 <uint32_identity>
 8009020:	4603      	mov	r3, r0
 8009022:	2109      	movs	r1, #9
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fc93 	bl	8009950 <sl_wfx_get_status_code>
 800902a:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2b07      	cmp	r3, #7
 8009030:	d10d      	bne.n	800904e <sl_wfx_send_configuration+0xce>
    if (sl_wfx_context->used_buffers > 0) {
 8009032:	4b0e      	ldr	r3, [pc, #56]	@ (800906c <sl_wfx_send_configuration+0xec>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <sl_wfx_send_configuration+0xce>
      sl_wfx_context->used_buffers--;
 800903e:	4b0b      	ldr	r3, [pc, #44]	@ (800906c <sl_wfx_send_configuration+0xec>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8009046:	3a01      	subs	r2, #1
 8009048:	b292      	uxth	r2, r2
 800904a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <sl_wfx_send_configuration+0xe0>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2202      	movs	r2, #2
 8009058:	2109      	movs	r1, #9
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fd76 	bl	8009b4c <sl_wfx_free_command_buffer>
  }
  return result;
 8009060:	69fb      	ldr	r3, [r7, #28]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000a34 	.word	0x20000a34

08009070 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
 800907c:	4613      	mov	r3, r2
 800907e:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 8009080:	f001 f84a 	bl	800a118 <sl_wfx_host_lock>
 8009084:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 800908c:	68f9      	ldr	r1, [r7, #12]
 800908e:	482f      	ldr	r0, [pc, #188]	@ (800914c <sl_wfx_send_request+0xdc>)
 8009090:	f001 f830 	bl	800a0f4 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	e054      	b.n	8009142 <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 8009098:	4b2d      	ldr	r3, [pc, #180]	@ (8009150 <sl_wfx_send_request+0xe0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80090a0:	4b2c      	ldr	r3, [pc, #176]	@ (8009154 <sl_wfx_send_request+0xe4>)
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d304      	bcc.n	80090b2 <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 80090a8:	231d      	movs	r3, #29
 80090aa:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d137      	bne.n	8009122 <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	79fa      	ldrb	r2, [r7, #7]
 80090b6:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 80090b8:	88bb      	ldrh	r3, [r7, #4]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fd4f 	bl	8008b5e <uint16_identity>
 80090c0:	4603      	mov	r3, r0
 80090c2:	461a      	mov	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b4a      	cmp	r3, #74	@ 0x4a
 80090cc:	d00a      	beq.n	80090e4 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	2b32      	cmp	r3, #50	@ 0x32
 80090d2:	d007      	beq.n	80090e4 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fe5c 	bl	8009d94 <sl_wfx_host_setup_waited_event>
 80090dc:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11e      	bne.n	8009122 <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	481a      	ldr	r0, [pc, #104]	@ (8009158 <sl_wfx_send_request+0xe8>)
 80090ee:	f001 f801 	bl	800a0f4 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 80090f2:	88bb      	ldrh	r3, [r7, #4]
 80090f4:	4619      	mov	r1, r3
 80090f6:	6838      	ldr	r0, [r7, #0]
 80090f8:	f000 ffee 	bl	800a0d8 <sl_wfx_host_transmit_frame>
 80090fc:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10e      	bne.n	8009122 <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	4812      	ldr	r0, [pc, #72]	@ (8009158 <sl_wfx_send_request+0xe8>)
 800910e:	f000 fff1 	bl	800a0f4 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 8009112:	4b0f      	ldr	r3, [pc, #60]	@ (8009150 <sl_wfx_send_request+0xe0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800911a:	3201      	adds	r2, #1
 800911c:	b292      	uxth	r2, r2
 800911e:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 8009122:	f001 f819 	bl	800a158 <sl_wfx_host_unlock>
 8009126:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <sl_wfx_send_request+0xc2>
    result = unlock_result;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	4807      	ldr	r0, [pc, #28]	@ (8009158 <sl_wfx_send_request+0xe8>)
 800913c:	f000 ffda 	bl	800a0f4 <sl_wfx_host_log>
  }
#endif
  return result;
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	0801e690 	.word	0x0801e690
 8009150:	20000a34 	.word	0x20000a34
 8009154:	20000a3a 	.word	0x20000a3a
 8009158:	0801e6ac 	.word	0x0801e6ac

0800915c <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 800915c:	b590      	push	{r4, r7, lr}
 800915e:	b08b      	sub	sp, #44	@ 0x2c
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 800916e:	f000 ffd3 	bl	800a118 <sl_wfx_host_lock>
 8009172:	6278      	str	r0, [r7, #36]	@ 0x24

  if (result != SL_STATUS_OK) {
 8009174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	d005      	beq.n	8009186 <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 800917a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800917c:	4855      	ldr	r0, [pc, #340]	@ (80092d4 <sl_wfx_receive_frame+0x178>)
 800917e:	f000 ffb9 	bl	800a0f4 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	e0a1      	b.n	80092ca <sl_wfx_receive_frame+0x16e>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d116      	bne.n	80091c6 <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	2001      	movs	r0, #1
 800919c:	f7ff fa73 	bl	8008686 <sl_wfx_reg_read_16>
 80091a0:	6278      	str	r0, [r7, #36]	@ 0x24
    SL_WFX_ERROR_CHECK(result);
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d174      	bne.n	8009292 <sl_wfx_receive_frame+0x136>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 80091ba:	f640 3305 	movw	r3, #2821	@ 0xb05
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
      SL_WFX_ERROR_CHECK(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d165      	bne.n	8009292 <sl_wfx_receive_frame+0x136>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	0b9b      	lsrs	r3, r3, #14
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	3302      	adds	r3, #2
 80091d4:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 80091d6:	7efb      	ldrb	r3, [r7, #27]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d101      	bne.n	80091e0 <sl_wfx_receive_frame+0x84>
 80091dc:	2301      	movs	r3, #1
 80091de:	e000      	b.n	80091e2 <sl_wfx_receive_frame+0x86>
 80091e0:	2302      	movs	r3, #2
 80091e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 80091f6:	3340      	adds	r3, #64	@ 0x40
 80091f8:	e000      	b.n	80091fc <sl_wfx_receive_frame+0xa0>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8009200:	f107 000c 	add.w	r0, r7, #12
 8009204:	461a      	mov	r2, r3
 8009206:	f000 ff47 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800920a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d13f      	bne.n	8009292 <sl_wfx_receive_frame+0x136>

  memset(network_rx_buffer, 0, read_length);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f013 f8e3 	bl	801c3e4 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fa9c 	bl	8008760 <sl_wfx_data_read>
 8009228:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d130      	bne.n	8009292 <sl_wfx_receive_frame+0x136>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 8009230:	4b29      	ldr	r3, [pc, #164]	@ (80092d8 <sl_wfx_receive_frame+0x17c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00c      	beq.n	8009256 <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	789b      	ldrb	r3, [r3, #2]
 8009240:	b25b      	sxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	db07      	blt.n	8009256 <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 8009246:	4b24      	ldr	r3, [pc, #144]	@ (80092d8 <sl_wfx_receive_frame+0x17c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800924e:	3a01      	subs	r2, #1
 8009250:	b292      	uxth	r2, r2
 8009252:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	4619      	mov	r1, r3
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	3301      	adds	r3, #1
 8009266:	4413      	add	r3, r2
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	b29b      	uxth	r3, r3
 800926e:	430b      	orrs	r3, r1
 8009270:	b29a      	uxth	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	68fc      	ldr	r4, [r7, #12]
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fc6d 	bl	8008b5e <uint16_identity>
 8009284:	4603      	mov	r3, r0
 8009286:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fdd4 	bl	8009e38 <sl_wfx_host_post_event>
 8009290:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d008      	beq.n	80092aa <sl_wfx_receive_frame+0x14e>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	789b      	ldrb	r3, [r3, #2]
 800929e:	4619      	mov	r1, r3
 80092a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80092a4:	461a      	mov	r2, r3
 80092a6:	f000 fc51 	bl	8009b4c <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 80092aa:	f000 ff55 	bl	800a158 <sl_wfx_host_unlock>
 80092ae:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <sl_wfx_receive_frame+0x15e>
    result = unlock_result;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <sl_wfx_receive_frame+0x16c>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 80092c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092c2:	4806      	ldr	r0, [pc, #24]	@ (80092dc <sl_wfx_receive_frame+0x180>)
 80092c4:	f000 ff16 	bl	800a0f4 <sl_wfx_host_log>
  }
#endif
  return result;
 80092c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	372c      	adds	r7, #44	@ 0x2c
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd90      	pop	{r4, r7, pc}
 80092d2:	bf00      	nop
 80092d4:	0801e6c4 	.word	0x0801e6c4
 80092d8:	20000a34 	.word	0x20000a34
 80092dc:	0801e6e4 	.word	0x0801e6e4

080092e0 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 80092e6:	f001 fc01 	bl	800aaec <sl_wfx_host_enable_platform_interrupt>
 80092ea:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d115      	bne.n	800931e <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80092f2:	463b      	mov	r3, r7
 80092f4:	4619      	mov	r1, r3
 80092f6:	2000      	movs	r0, #0
 80092f8:	f7ff fa01 	bl	80086fe <sl_wfx_reg_read_32>
 80092fc:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10c      	bne.n	800931e <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800930a:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	4619      	mov	r1, r3
 8009310:	2000      	movs	r0, #0
 8009312:	f7ff fa0e 	bl	8008732 <sl_wfx_reg_write_32>
 8009316:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0

  error_handler:
 800931c:	bf00      	nop
  return result;
 800931e:	687b      	ldr	r3, [r7, #4]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800932e:	463b      	mov	r3, r7
 8009330:	4619      	mov	r1, r3
 8009332:	2000      	movs	r0, #0
 8009334:	f7ff f9e3 	bl	80086fe <sl_wfx_reg_read_32>
 8009338:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d112      	bne.n	8009366 <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009346:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	4619      	mov	r1, r3
 800934c:	2000      	movs	r0, #0
 800934e:	f7ff f9f0 	bl	8008732 <sl_wfx_reg_write_32>
 8009352:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 800935a:	f001 fbd4 	bl	800ab06 <sl_wfx_host_disable_platform_interrupt>
 800935e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0

  error_handler:
 8009364:	bf00      	nop
  return result;
 8009366:	687b      	ldr	r3, [r7, #4]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8009376:	463b      	mov	r3, r7
 8009378:	4619      	mov	r1, r3
 800937a:	2000      	movs	r0, #0
 800937c:	f7ff f9bf 	bl	80086fe <sl_wfx_reg_read_32>
 8009380:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800938e:	4619      	mov	r1, r3
 8009390:	2000      	movs	r0, #0
 8009392:	f7ff f9ce 	bl	8008732 <sl_wfx_reg_write_32>
 8009396:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0

  error_handler:
 800939c:	bf00      	nop
  return result;
 800939e:	687b      	ldr	r3, [r7, #4]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80093ae:	1d3b      	adds	r3, r7, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	2000      	movs	r0, #0
 80093b4:	f7ff f9a3 	bl	80086fe <sl_wfx_reg_read_32>
 80093b8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d177      	bne.n	80094b0 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 80093c0:	493e      	ldr	r1, [pc, #248]	@ (80094bc <sl_wfx_init_chip+0x114>)
 80093c2:	2006      	movs	r0, #6
 80093c4:	f7ff f9b5 	bl	8008732 <sl_wfx_reg_write_32>
 80093c8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d16f      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 80093d0:	493b      	ldr	r1, [pc, #236]	@ (80094c0 <sl_wfx_init_chip+0x118>)
 80093d2:	2006      	movs	r0, #6
 80093d4:	f7ff f9ad 	bl	8008732 <sl_wfx_reg_write_32>
 80093d8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d167      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 80093e0:	4938      	ldr	r1, [pc, #224]	@ (80094c4 <sl_wfx_init_chip+0x11c>)
 80093e2:	2006      	movs	r0, #6
 80093e4:	f7ff f9a5 	bl	8008732 <sl_wfx_reg_write_32>
 80093e8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d15f      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 80093f0:	4935      	ldr	r1, [pc, #212]	@ (80094c8 <sl_wfx_init_chip+0x120>)
 80093f2:	2006      	movs	r0, #6
 80093f4:	f7ff f99d 	bl	8008732 <sl_wfx_reg_write_32>
 80093f8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d157      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8009400:	4932      	ldr	r1, [pc, #200]	@ (80094cc <sl_wfx_init_chip+0x124>)
 8009402:	2006      	movs	r0, #6
 8009404:	f7ff f995 	bl	8008732 <sl_wfx_reg_write_32>
 8009408:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d14f      	bne.n	80094b0 <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8009410:	1cbb      	adds	r3, r7, #2
 8009412:	4619      	mov	r1, r3
 8009414:	2001      	movs	r0, #1
 8009416:	f7ff f936 	bl	8008686 <sl_wfx_reg_read_16>
 800941a:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d146      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 8009422:	887b      	ldrh	r3, [r7, #2]
 8009424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009428:	b29b      	uxth	r3, r3
 800942a:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 800942c:	887b      	ldrh	r3, [r7, #2]
 800942e:	4619      	mov	r1, r3
 8009430:	2001      	movs	r0, #1
 8009432:	f7ff f944 	bl	80086be <sl_wfx_reg_write_16>
 8009436:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d138      	bne.n	80094b0 <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]
 8009442:	e013      	b.n	800946c <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8009444:	1cbb      	adds	r3, r7, #2
 8009446:	4619      	mov	r1, r3
 8009448:	2001      	movs	r0, #1
 800944a:	f7ff f91c 	bl	8008686 <sl_wfx_reg_read_16>
 800944e:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d12c      	bne.n	80094b0 <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 8009456:	887b      	ldrh	r3, [r7, #2]
 8009458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8009460:	2001      	movs	r0, #1
 8009462:	f000 fcdd 	bl	8009e20 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	60bb      	str	r3, [r7, #8]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009470:	d9e8      	bls.n	8009444 <sl_wfx_init_chip+0x9c>
 8009472:	e000      	b.n	8009476 <sl_wfx_init_chip+0xce>
      break;
 8009474:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 8009476:	887b      	ldrh	r3, [r7, #2]
 8009478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 8009480:	2307      	movs	r3, #7
 8009482:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d112      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800948a:	1d3b      	adds	r3, r7, #4
 800948c:	4619      	mov	r1, r3
 800948e:	2000      	movs	r0, #0
 8009490:	f7ff f935 	bl	80086fe <sl_wfx_reg_read_32>
 8009494:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d109      	bne.n	80094b0 <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 80094a6:	2301      	movs	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
  }

  error_handler:
 80094ae:	bf00      	nop
  return result;
 80094b0:	68fb      	ldr	r3, [r7, #12]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	07208775 	.word	0x07208775
 80094c0:	082ec020 	.word	0x082ec020
 80094c4:	093c3c3c 	.word	0x093c3c3c
 80094c8:	0b322c44 	.word	0x0b322c44
 80094cc:	0ca06497 	.word	0x0ca06497

080094d0 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 80094d6:	463b      	mov	r3, r7
 80094d8:	4619      	mov	r1, r3
 80094da:	481e      	ldr	r0, [pc, #120]	@ (8009554 <sl_wfx_download_run_bootloader+0x84>)
 80094dc:	f7ff f999 	bl	8008812 <sl_wfx_apb_read_32>
 80094e0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d12f      	bne.n	8009548 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80094e8:	463b      	mov	r3, r7
 80094ea:	4619      	mov	r1, r3
 80094ec:	2000      	movs	r0, #0
 80094ee:	f7ff f906 	bl	80086fe <sl_wfx_reg_read_32>
 80094f2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d126      	bne.n	8009548 <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8009500:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	4619      	mov	r1, r3
 8009506:	2000      	movs	r0, #0
 8009508:	f7ff f913 	bl	8008732 <sl_wfx_reg_write_32>
 800950c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d119      	bne.n	8009548 <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 8009514:	4910      	ldr	r1, [pc, #64]	@ (8009558 <sl_wfx_download_run_bootloader+0x88>)
 8009516:	4811      	ldr	r0, [pc, #68]	@ (800955c <sl_wfx_download_run_bootloader+0x8c>)
 8009518:	f7ff f964 	bl	80087e4 <sl_wfx_apb_write_32>
 800951c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d111      	bne.n	8009548 <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 8009524:	463b      	mov	r3, r7
 8009526:	4619      	mov	r1, r3
 8009528:	480c      	ldr	r0, [pc, #48]	@ (800955c <sl_wfx_download_run_bootloader+0x8c>)
 800952a:	f7ff f972 	bl	8008812 <sl_wfx_apb_read_32>
 800952e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d108      	bne.n	8009548 <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	4a07      	ldr	r2, [pc, #28]	@ (8009558 <sl_wfx_download_run_bootloader+0x88>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d003      	beq.n	8009546 <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 800953e:	2301      	movs	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
  }

  error_handler:
 8009546:	bf00      	nop
  return result;
 8009548:	687b      	ldr	r3, [r7, #4]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	0900c010 	.word	0x0900c010
 8009558:	23abc88e 	.word	0x23abc88e
 800955c:	09004000 	.word	0x09004000

08009560 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08c      	sub	sp, #48	@ 0x30
 8009564:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 800956e:	f000 faff 	bl	8009b70 <sl_wfx_host_init>
 8009572:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009576:	2b00      	cmp	r3, #0
 8009578:	f040 8185 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 800957c:	4984      	ldr	r1, [pc, #528]	@ (8009790 <sl_wfx_download_run_firmware+0x230>)
 800957e:	4885      	ldr	r0, [pc, #532]	@ (8009794 <sl_wfx_download_run_firmware+0x234>)
 8009580:	f7ff f930 	bl	80087e4 <sl_wfx_apb_write_32>
 8009584:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009588:	2b00      	cmp	r3, #0
 800958a:	f040 817c 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 800958e:	2100      	movs	r1, #0
 8009590:	4881      	ldr	r0, [pc, #516]	@ (8009798 <sl_wfx_download_run_firmware+0x238>)
 8009592:	f7ff f927 	bl	80087e4 <sl_wfx_apb_write_32>
 8009596:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 8173 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 80095a0:	2100      	movs	r1, #0
 80095a2:	487e      	ldr	r0, [pc, #504]	@ (800979c <sl_wfx_download_run_firmware+0x23c>)
 80095a4:	f7ff f91e 	bl	80087e4 <sl_wfx_apb_write_32>
 80095a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 816a 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 80095b2:	497b      	ldr	r1, [pc, #492]	@ (80097a0 <sl_wfx_download_run_firmware+0x240>)
 80095b4:	4877      	ldr	r0, [pc, #476]	@ (8009794 <sl_wfx_download_run_firmware+0x234>)
 80095b6:	f7ff f915 	bl	80087e4 <sl_wfx_apb_write_32>
 80095ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80095bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f040 8161 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 80095c4:	2264      	movs	r2, #100	@ 0x64
 80095c6:	4977      	ldr	r1, [pc, #476]	@ (80097a4 <sl_wfx_download_run_firmware+0x244>)
 80095c8:	4877      	ldr	r0, [pc, #476]	@ (80097a8 <sl_wfx_download_run_firmware+0x248>)
 80095ca:	f000 f96b 	bl	80098a4 <sl_wfx_poll_for_value>
 80095ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80095d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f040 8157 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 80095d8:	f107 0310 	add.w	r3, r7, #16
 80095dc:	4619      	mov	r1, r3
 80095de:	4873      	ldr	r0, [pc, #460]	@ (80097ac <sl_wfx_download_run_firmware+0x24c>)
 80095e0:	f7ff f917 	bl	8008812 <sl_wfx_apb_read_32>
 80095e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80095e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f040 814c 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 80095ee:	f107 0310 	add.w	r3, r7, #16
 80095f2:	4619      	mov	r1, r3
 80095f4:	486e      	ldr	r0, [pc, #440]	@ (80097b0 <sl_wfx_download_run_firmware+0x250>)
 80095f6:	f7ff f90c 	bl	8008812 <sl_wfx_apb_read_32>
 80095fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80095fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 8141 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	0a1b      	lsrs	r3, r3, #8
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b6a      	ldr	r3, [pc, #424]	@ (80097b4 <sl_wfx_download_run_firmware+0x254>)
 800960c:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 800960e:	496a      	ldr	r1, [pc, #424]	@ (80097b8 <sl_wfx_download_run_firmware+0x258>)
 8009610:	4860      	ldr	r0, [pc, #384]	@ (8009794 <sl_wfx_download_run_firmware+0x234>)
 8009612:	f7ff f8e7 	bl	80087e4 <sl_wfx_apb_write_32>
 8009616:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 8133 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8009620:	2264      	movs	r2, #100	@ 0x64
 8009622:	495f      	ldr	r1, [pc, #380]	@ (80097a0 <sl_wfx_download_run_firmware+0x240>)
 8009624:	4860      	ldr	r0, [pc, #384]	@ (80097a8 <sl_wfx_download_run_firmware+0x248>)
 8009626:	f000 f93d 	bl	80098a4 <sl_wfx_poll_for_value>
 800962a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 8129 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 8009634:	f04f 31ff 	mov.w	r1, #4294967295
 8009638:	4860      	ldr	r0, [pc, #384]	@ (80097bc <sl_wfx_download_run_firmware+0x25c>)
 800963a:	f7ff f8d3 	bl	80087e4 <sl_wfx_apb_write_32>
 800963e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 811f 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 8009648:	f107 030c 	add.w	r3, r7, #12
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fae5 	bl	8009c1c <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3b50      	subs	r3, #80	@ 0x50
 8009656:	4619      	mov	r1, r3
 8009658:	4859      	ldr	r0, [pc, #356]	@ (80097c0 <sl_wfx_download_run_firmware+0x260>)
 800965a:	f7ff f8c3 	bl	80087e4 <sl_wfx_apb_write_32>
 800965e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 810f 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 8009668:	1d3b      	adds	r3, r7, #4
 800966a:	2108      	movs	r1, #8
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fab9 	bl	8009be4 <sl_wfx_host_get_firmware_data>
 8009672:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009676:	2b00      	cmp	r3, #0
 8009678:	f040 8105 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 800967c:	4b4d      	ldr	r3, [pc, #308]	@ (80097b4 <sl_wfx_download_run_firmware+0x254>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f93c 	bl	8009902 <sl_wfx_compare_keysets>
 800968a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968e:	2b00      	cmp	r3, #0
 8009690:	f040 80f9 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 8009694:	1d3b      	adds	r3, r7, #4
 8009696:	2140      	movs	r1, #64	@ 0x40
 8009698:	4618      	mov	r0, r3
 800969a:	f000 faa3 	bl	8009be4 <sl_wfx_host_get_firmware_data>
 800969e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80096a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 80ef 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2240      	movs	r2, #64	@ 0x40
 80096ac:	4619      	mov	r1, r3
 80096ae:	4845      	ldr	r0, [pc, #276]	@ (80097c4 <sl_wfx_download_run_firmware+0x264>)
 80096b0:	f7ff f878 	bl	80087a4 <sl_wfx_apb_write>
 80096b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80096b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f040 80e4 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 80096be:	1d3b      	adds	r3, r7, #4
 80096c0:	2108      	movs	r1, #8
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 fa8e 	bl	8009be4 <sl_wfx_host_get_firmware_data>
 80096c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f040 80da 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2208      	movs	r2, #8
 80096d6:	4619      	mov	r1, r3
 80096d8:	483b      	ldr	r0, [pc, #236]	@ (80097c8 <sl_wfx_download_run_firmware+0x268>)
 80096da:	f7ff f863 	bl	80087a4 <sl_wfx_apb_write>
 80096de:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f040 80cf 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 80096e8:	2101      	movs	r1, #1
 80096ea:	4838      	ldr	r0, [pc, #224]	@ (80097cc <sl_wfx_download_run_firmware+0x26c>)
 80096ec:	f7ff f87a 	bl	80087e4 <sl_wfx_apb_write_32>
 80096f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f040 80c6 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 80096fa:	4935      	ldr	r1, [pc, #212]	@ (80097d0 <sl_wfx_download_run_firmware+0x270>)
 80096fc:	4825      	ldr	r0, [pc, #148]	@ (8009794 <sl_wfx_download_run_firmware+0x234>)
 80096fe:	f7ff f871 	bl	80087e4 <sl_wfx_apb_write_32>
 8009702:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 80bd 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3b50      	subs	r3, #80	@ 0x50
 8009710:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3b01      	subs	r3, #1
 8009716:	0a9b      	lsrs	r3, r3, #10
 8009718:	3301      	adds	r3, #1
 800971a:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 800971c:	2300      	movs	r3, #0
 800971e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009720:	e093      	b.n	800984a <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 8009722:	2300      	movs	r3, #0
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009726:	e015      	b.n	8009754 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6a3a      	ldr	r2, [r7, #32]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8009732:	d913      	bls.n	800975c <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 8009738:	f107 0308 	add.w	r3, r7, #8
 800973c:	4619      	mov	r1, r3
 800973e:	4817      	ldr	r0, [pc, #92]	@ (800979c <sl_wfx_download_run_firmware+0x23c>)
 8009740:	f7ff f867 	bl	8008812 <sl_wfx_apb_read_32>
 8009744:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	2b00      	cmp	r3, #0
 800974a:	f040 809c 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	3301      	adds	r3, #1
 8009752:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	2b63      	cmp	r3, #99	@ 0x63
 8009758:	d9e6      	bls.n	8009728 <sl_wfx_download_run_firmware+0x1c8>
 800975a:	e000      	b.n	800975e <sl_wfx_download_run_firmware+0x1fe>
        break;
 800975c:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6a3a      	ldr	r2, [r7, #32]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8009768:	d93a      	bls.n	80097e0 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800976a:	f107 0310 	add.w	r3, r7, #16
 800976e:	4619      	mov	r1, r3
 8009770:	480d      	ldr	r0, [pc, #52]	@ (80097a8 <sl_wfx_download_run_firmware+0x248>)
 8009772:	f7ff f84e 	bl	8008812 <sl_wfx_apb_read_32>
 8009776:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 8083 	bne.w	8009886 <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	4a13      	ldr	r2, [pc, #76]	@ (80097d0 <sl_wfx_download_run_firmware+0x270>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d025      	beq.n	80097d4 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8009788:	2301      	movs	r3, #1
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800978c:	e025      	b.n	80097da <sl_wfx_download_run_firmware+0x27a>
 800978e:	bf00      	nop
 8009790:	12345678 	.word	0x12345678
 8009794:	0900c00c 	.word	0x0900c00c
 8009798:	0900c004 	.word	0x0900c004
 800979c:	0900c008 	.word	0x0900c008
 80097a0:	87654321 	.word	0x87654321
 80097a4:	bd53ef99 	.word	0xbd53ef99
 80097a8:	0900c010 	.word	0x0900c010
 80097ac:	0900c080 	.word	0x0900c080
 80097b0:	0900c0cc 	.word	0x0900c0cc
 80097b4:	20000a38 	.word	0x20000a38
 80097b8:	a753bd99 	.word	0xa753bd99
 80097bc:	09004000 	.word	0x09004000
 80097c0:	0900c000 	.word	0x0900c000
 80097c4:	0900c014 	.word	0x0900c014
 80097c8:	0900c054 	.word	0x0900c054
 80097cc:	0900c05c 	.word	0x0900c05c
 80097d0:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 80097d4:	f640 3302 	movw	r3, #2818	@ 0xb02
 80097d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d152      	bne.n	8009886 <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ee:	d902      	bls.n	80097f6 <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 80097f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097f4:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 80097f6:	1d3b      	adds	r3, r7, #4
 80097f8:	69f9      	ldr	r1, [r7, #28]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f9f2 	bl	8009be4 <sl_wfx_host_get_firmware_data>
 8009800:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8009802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d13e      	bne.n	8009886 <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800980e:	f103 6310 	add.w	r3, r3, #150994944	@ 0x9000000
 8009812:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009816:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	4619      	mov	r1, r3
 800981e:	6978      	ldr	r0, [r7, #20]
 8009820:	f7fe ffc0 	bl	80087a4 <sl_wfx_apb_write>
 8009824:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d12c      	bne.n	8009886 <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 800982c:	6a3a      	ldr	r2, [r7, #32]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 8009834:	6a39      	ldr	r1, [r7, #32]
 8009836:	4816      	ldr	r0, [pc, #88]	@ (8009890 <sl_wfx_download_run_firmware+0x330>)
 8009838:	f7fe ffd4 	bl	80087e4 <sl_wfx_apb_write_32>
 800983c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d120      	bne.n	8009886 <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	3301      	adds	r3, #1
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24
 800984a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	429a      	cmp	r2, r3
 8009850:	f4ff af67 	bcc.w	8009722 <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 8009854:	490f      	ldr	r1, [pc, #60]	@ (8009894 <sl_wfx_download_run_firmware+0x334>)
 8009856:	4810      	ldr	r0, [pc, #64]	@ (8009898 <sl_wfx_download_run_firmware+0x338>)
 8009858:	f7fe ffc4 	bl	80087e4 <sl_wfx_apb_write_32>
 800985c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d110      	bne.n	8009886 <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 8009864:	2264      	movs	r2, #100	@ 0x64
 8009866:	490b      	ldr	r1, [pc, #44]	@ (8009894 <sl_wfx_download_run_firmware+0x334>)
 8009868:	480c      	ldr	r0, [pc, #48]	@ (800989c <sl_wfx_download_run_firmware+0x33c>)
 800986a:	f000 f81b 	bl	80098a4 <sl_wfx_poll_for_value>
 800986e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d107      	bne.n	8009886 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 8009876:	490a      	ldr	r1, [pc, #40]	@ (80098a0 <sl_wfx_download_run_firmware+0x340>)
 8009878:	4807      	ldr	r0, [pc, #28]	@ (8009898 <sl_wfx_download_run_firmware+0x338>)
 800987a:	f7fe ffb3 	bl	80087e4 <sl_wfx_apb_write_32>
 800987e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8009880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009882:	2b00      	cmp	r3, #0

  error_handler:
 8009884:	bf00      	nop
  return result;
 8009886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009888:	4618      	mov	r0, r3
 800988a:	3730      	adds	r7, #48	@ 0x30
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	0900c004 	.word	0x0900c004
 8009894:	d4c64a99 	.word	0xd4c64a99
 8009898:	0900c00c 	.word	0x0900c00c
 800989c:	0900c010 	.word	0x0900c010
 80098a0:	174fc882 	.word	0x174fc882

080098a4 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 80098b4:	e013      	b.n	80098de <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 80098b6:	f107 0310 	add.w	r3, r7, #16
 80098ba:	4619      	mov	r1, r3
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7fe ffa8 	bl	8008812 <sl_wfx_apb_read_32>
 80098c2:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d116      	bne.n	80098f8 <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d009      	beq.n	80098e6 <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 80098d2:	2001      	movs	r0, #1
 80098d4:	f000 faa4 	bl	8009e20 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3b01      	subs	r3, #1
 80098dc:	607b      	str	r3, [r7, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e8      	bne.n	80098b6 <sl_wfx_poll_for_value+0x12>
 80098e4:	e000      	b.n	80098e8 <sl_wfx_poll_for_value+0x44>
      break;
 80098e6:	bf00      	nop
    }
  }
  if (value != polled_value) {
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d002      	beq.n	80098f6 <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 80098f0:	2307      	movs	r3, #7
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e000      	b.n	80098f8 <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 80098f6:	bf00      	nop
  return result;
 80098f8:	697b      	ldr	r3, [r7, #20]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	4603      	mov	r3, r0
 800990a:	6039      	str	r1, [r7, #0]
 800990c:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	799b      	ldrb	r3, [r3, #6]
 8009912:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	79db      	ldrb	r3, [r3, #7]
 8009918:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 800991a:	2300      	movs	r3, #0
 800991c:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	2210      	movs	r2, #16
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f011 fed6 	bl	801b6d8 <strtoul>
 800992c:	4603      	mov	r3, r0
 800992e:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 8009930:	7afa      	ldrb	r2, [r7, #11]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d102      	bne.n	800993e <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	e002      	b.n	8009944 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 800993e:	f640 3301 	movw	r3, #2817	@ 0xb01
 8009942:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009944:	68fb      	ldr	r3, [r7, #12]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d05b      	beq.n	8009a1e <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f241 2256 	movw	r2, #4694	@ 0x1256
 800996c:	4293      	cmp	r3, r2
 800996e:	d045      	beq.n	80099fc <sl_wfx_get_status_code+0xac>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f241 2256 	movw	r2, #4694	@ 0x1256
 8009976:	4293      	cmp	r3, r2
 8009978:	d84e      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f241 2234 	movw	r2, #4660	@ 0x1234
 8009980:	4293      	cmp	r3, r2
 8009982:	d038      	beq.n	80099f6 <sl_wfx_get_status_code+0xa6>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f241 2234 	movw	r2, #4660	@ 0x1234
 800998a:	4293      	cmp	r3, r2
 800998c:	d844      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2baf      	cmp	r3, #175	@ 0xaf
 8009992:	d033      	beq.n	80099fc <sl_wfx_get_status_code+0xac>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2baf      	cmp	r3, #175	@ 0xaf
 8009998:	d83e      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b9e      	cmp	r3, #158	@ 0x9e
 800999e:	d02a      	beq.n	80099f6 <sl_wfx_get_status_code+0xa6>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b9e      	cmp	r3, #158	@ 0x9e
 80099a4:	d838      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b8d      	cmp	r3, #141	@ 0x8d
 80099aa:	d027      	beq.n	80099fc <sl_wfx_get_status_code+0xac>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b8d      	cmp	r3, #141	@ 0x8d
 80099b0:	d832      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b7c      	cmp	r3, #124	@ 0x7c
 80099b6:	d021      	beq.n	80099fc <sl_wfx_get_status_code+0xac>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b7c      	cmp	r3, #124	@ 0x7c
 80099bc:	d82c      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b6b      	cmp	r3, #107	@ 0x6b
 80099c2:	d01b      	beq.n	80099fc <sl_wfx_get_status_code+0xac>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b6b      	cmp	r3, #107	@ 0x6b
 80099c8:	d826      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d80f      	bhi.n	80099f0 <sl_wfx_get_status_code+0xa0>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d820      	bhi.n	8009a18 <sl_wfx_get_status_code+0xc8>
 80099d6:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <sl_wfx_get_status_code+0x8c>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	080099f7 	.word	0x080099f7
 80099e0:	080099fd 	.word	0x080099fd
 80099e4:	08009a03 	.word	0x08009a03
 80099e8:	08009a09 	.word	0x08009a09
 80099ec:	08009a11 	.word	0x08009a11
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80099f4:	d110      	bne.n	8009a18 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
        break;
 80099fa:	e075      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 80099fc:	2301      	movs	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
        break;
 8009a00:	e072      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8009a02:	2321      	movs	r3, #33	@ 0x21
 8009a04:	60fb      	str	r3, [r7, #12]
        break;
 8009a06:	e06f      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8009a08:	f640 3304 	movw	r3, #2820	@ 0xb04
 8009a0c:	60fb      	str	r3, [r7, #12]
        break;
 8009a0e:	e06b      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8009a10:	f640 3303 	movw	r3, #2819	@ 0xb03
 8009a14:	60fb      	str	r3, [r7, #12]
        break;
 8009a16:	e067      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]
        break;
 8009a1c:	e064      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b14      	cmp	r3, #20
 8009a22:	d85e      	bhi.n	8009ae2 <sl_wfx_get_status_code+0x192>
 8009a24:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <sl_wfx_get_status_code+0xdc>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a81 	.word	0x08009a81
 8009a30:	08009a87 	.word	0x08009a87
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009a9b 	.word	0x08009a9b
 8009a40:	08009aa3 	.word	0x08009aa3
 8009a44:	08009aab 	.word	0x08009aab
 8009a48:	08009ab3 	.word	0x08009ab3
 8009a4c:	08009abb 	.word	0x08009abb
 8009a50:	08009ac3 	.word	0x08009ac3
 8009a54:	08009acb 	.word	0x08009acb
 8009a58:	08009ae3 	.word	0x08009ae3
 8009a5c:	08009ae3 	.word	0x08009ae3
 8009a60:	08009ae3 	.word	0x08009ae3
 8009a64:	08009ae3 	.word	0x08009ae3
 8009a68:	08009ae3 	.word	0x08009ae3
 8009a6c:	08009ae3 	.word	0x08009ae3
 8009a70:	08009ae3 	.word	0x08009ae3
 8009a74:	08009ae3 	.word	0x08009ae3
 8009a78:	08009ad3 	.word	0x08009ad3
 8009a7c:	08009adb 	.word	0x08009adb
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
        break;
 8009a84:	e030      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8009a86:	2321      	movs	r3, #33	@ 0x21
 8009a88:	60fb      	str	r3, [r7, #12]
        break;
 8009a8a:	e02d      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 8009a8c:	f640 3318 	movw	r3, #2840	@ 0xb18
 8009a90:	60fb      	str	r3, [r7, #12]
        break;
 8009a92:	e029      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 8009a94:	2301      	movs	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
        break;
 8009a98:	e026      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 8009a9a:	f640 3319 	movw	r3, #2841	@ 0xb19
 8009a9e:	60fb      	str	r3, [r7, #12]
        break;
 8009aa0:	e022      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8009aa2:	f640 3304 	movw	r3, #2820	@ 0xb04
 8009aa6:	60fb      	str	r3, [r7, #12]
        break;
 8009aa8:	e01e      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 8009aaa:	f640 331a 	movw	r3, #2842	@ 0xb1a
 8009aae:	60fb      	str	r3, [r7, #12]
        break;
 8009ab0:	e01a      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 8009ab2:	f640 331b 	movw	r3, #2843	@ 0xb1b
 8009ab6:	60fb      	str	r3, [r7, #12]
        break;
 8009ab8:	e016      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 8009aba:	f640 331c 	movw	r3, #2844	@ 0xb1c
 8009abe:	60fb      	str	r3, [r7, #12]
        break;
 8009ac0:	e012      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 8009ac2:	f640 331d 	movw	r3, #2845	@ 0xb1d
 8009ac6:	60fb      	str	r3, [r7, #12]
        break;
 8009ac8:	e00e      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 8009aca:	f640 331e 	movw	r3, #2846	@ 0xb1e
 8009ace:	60fb      	str	r3, [r7, #12]
        break;
 8009ad0:	e00a      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 8009ad2:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8009ad6:	60fb      	str	r3, [r7, #12]
        break;
 8009ad8:	e006      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 8009ada:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8009ade:	60fb      	str	r3, [r7, #12]
        break;
 8009ae0:	e002      	b.n	8009ae8 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
        break;
 8009ae6:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d008      	beq.n	8009b00 <sl_wfx_get_status_code+0x1b0>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f640 3204 	movw	r2, #2820	@ 0xb04
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	4804      	ldr	r0, [pc, #16]	@ (8009b0c <sl_wfx_get_status_code+0x1bc>)
 8009afc:	f000 fafa 	bl	800a0f4 <sl_wfx_host_log>
  }
#endif
  return result;
 8009b00:	68fb      	ldr	r3, [r7, #12]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0801e76c 	.word	0x0801e76c

08009b10 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4619      	mov	r1, r3
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 fab6 	bl	800a098 <sl_wfx_host_allocate_buffer>
 8009b2c:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d106      	bne.n	8009b42 <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f012 fc51 	bl	801c3e4 <memset>
  }

  error_handler:
  return result;
 8009b42:	697b      	ldr	r3, [r7, #20]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 faac 	bl	800a0bc <sl_wfx_host_free_buffer>
 8009b64:	4603      	mov	r3, r0
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 8009b74:	4b16      	ldr	r3, [pc, #88]	@ (8009bd0 <sl_wfx_host_init+0x60>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	2001      	movs	r0, #1
 8009b80:	f001 fdb0 	bl	800b6e4 <xQueueGenericCreate>
 8009b84:	4603      	mov	r3, r0
 8009b86:	4a13      	ldr	r2, [pc, #76]	@ (8009bd4 <sl_wfx_host_init+0x64>)
 8009b88:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8009b8a:	2203      	movs	r2, #3
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	2001      	movs	r0, #1
 8009b90:	f001 fda8 	bl	800b6e4 <xQueueGenericCreate>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4a10      	ldr	r2, [pc, #64]	@ (8009bd8 <sl_wfx_host_init+0x68>)
 8009b98:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8009b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd8 <sl_wfx_host_init+0x68>)
 8009b9c:	6818      	ldr	r0, [r3, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	f001 fe26 	bl	800b7f4 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8009ba8:	2203      	movs	r2, #3
 8009baa:	2100      	movs	r1, #0
 8009bac:	2001      	movs	r0, #1
 8009bae:	f001 fd99 	bl	800b6e4 <xQueueGenericCreate>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4a09      	ldr	r2, [pc, #36]	@ (8009bdc <sl_wfx_host_init+0x6c>)
 8009bb6:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2101      	movs	r1, #1
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f001 fd91 	bl	800b6e4 <xQueueGenericCreate>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	4a06      	ldr	r2, [pc, #24]	@ (8009be0 <sl_wfx_host_init+0x70>)
 8009bc6:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	2000137c 	.word	0x2000137c
 8009bd4:	20001378 	.word	0x20001378
 8009bd8:	20001374 	.word	0x20001374
 8009bdc:	20001370 	.word	0x20001370
 8009be0:	2000136c 	.word	0x2000136c

08009be4 <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8009bee:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <sl_wfx_host_get_firmware_data+0x30>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a09      	ldr	r2, [pc, #36]	@ (8009c18 <sl_wfx_host_get_firmware_data+0x34>)
 8009bf4:	441a      	add	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8009bfa:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <sl_wfx_host_get_firmware_data+0x30>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	4413      	add	r3, r2
 8009c02:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <sl_wfx_host_get_firmware_data+0x30>)
 8009c04:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	2000137c 	.word	0x2000137c
 8009c18:	08021cbc 	.word	0x08021cbc

08009c1c <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a04      	ldr	r2, [pc, #16]	@ (8009c38 <sl_wfx_host_get_firmware_size+0x1c>)
 8009c28:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	0004bc50 	.word	0x0004bc50

08009c3c <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8009c48:	4b0e      	ldr	r3, [pc, #56]	@ (8009c84 <sl_wfx_host_get_pds_data+0x48>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009c50:	2206      	movs	r2, #6
 8009c52:	4619      	mov	r1, r3
 8009c54:	480c      	ldr	r0, [pc, #48]	@ (8009c88 <sl_wfx_host_get_pds_data+0x4c>)
 8009c56:	f012 fbcd 	bl	801c3f4 <strncmp>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d106      	bne.n	8009c6e <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 8009c60:	887b      	ldrh	r3, [r7, #2]
 8009c62:	4a0a      	ldr	r2, [pc, #40]	@ (8009c8c <sl_wfx_host_get_pds_data+0x50>)
 8009c64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e005      	b.n	8009c7a <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 8009c6e:	887b      	ldrh	r3, [r7, #2]
 8009c70:	4a07      	ldr	r2, [pc, #28]	@ (8009c90 <sl_wfx_host_get_pds_data+0x54>)
 8009c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000a34 	.word	0x20000a34
 8009c88:	0801ea08 	.word	0x0801ea08
 8009c8c:	08021ca4 	.word	0x08021ca4
 8009c90:	08021c8c 	.word	0x08021c8c

08009c94 <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ccc <sl_wfx_host_get_pds_size+0x38>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009ca4:	2206      	movs	r2, #6
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4809      	ldr	r0, [pc, #36]	@ (8009cd0 <sl_wfx_host_get_pds_size+0x3c>)
 8009caa:	f012 fba3 	bl	801c3f4 <strncmp>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d103      	bne.n	8009cbc <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2206      	movs	r2, #6
 8009cb8:	801a      	strh	r2, [r3, #0]
 8009cba:	e002      	b.n	8009cc2 <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000a34 	.word	0x20000a34
 8009cd0:	0801ea08 	.word	0x0801ea08

08009cd4 <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 8009cd4:	b480      	push	{r7}
 8009cd6:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2101      	movs	r1, #1
 8009cec:	4808      	ldr	r0, [pc, #32]	@ (8009d10 <sl_wfx_host_reset_chip+0x2c>)
 8009cee:	f7fc fc1b 	bl	8006528 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009cf2:	200a      	movs	r0, #10
 8009cf4:	f7fb fc3c 	bl	8005570 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4804      	ldr	r0, [pc, #16]	@ (8009d10 <sl_wfx_host_reset_chip+0x2c>)
 8009cfe:	f7fc fc13 	bl	8006528 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009d02:	200a      	movs	r0, #10
 8009d04:	f7fb fc34 	bl	8005570 <HAL_Delay>

  return SL_STATUS_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40020800 	.word	0x40020800

08009d14 <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 8009d24:	2201      	movs	r2, #1
 8009d26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d2a:	4807      	ldr	r0, [pc, #28]	@ (8009d48 <sl_wfx_host_set_wake_up_pin+0x34>)
 8009d2c:	f7fc fbfc 	bl	8006528 <HAL_GPIO_WritePin>
 8009d30:	e005      	b.n	8009d3e <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 8009d32:	2200      	movs	r2, #0
 8009d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d38:	4803      	ldr	r0, [pc, #12]	@ (8009d48 <sl_wfx_host_set_wake_up_pin+0x34>)
 8009d3a:	f7fc fbf5 	bl	8006528 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	40020400 	.word	0x40020400

08009d4c <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 8009d50:	4b07      	ldr	r3, [pc, #28]	@ (8009d70 <sl_wfx_host_wait_for_wake_up+0x24>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f002 f85e 	bl	800be18 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 8009d5c:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <sl_wfx_host_wait_for_wake_up+0x24>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2101      	movs	r1, #1
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 f858 	bl	800be18 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20001370 	.word	0x20001370

08009d74 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	603a      	str	r2, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
 8009d80:	460b      	mov	r3, r1
 8009d82:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 8009d84:	f640 3308 	movw	r3, #2824	@ 0xb08
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8009d9e:	4a05      	ldr	r2, [pc, #20]	@ (8009db4 <sl_wfx_host_setup_waited_event+0x20>)
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	2000137c 	.word	0x2000137c

08009db8 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	e01b      	b.n	8009e04 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8009dcc:	4b12      	ldr	r3, [pc, #72]	@ (8009e18 <sl_wfx_host_wait_for_confirmation+0x60>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f107 0113 	add.w	r1, r7, #19
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 ff3c 	bl	800bc54 <xQueueReceive>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d10d      	bne.n	8009dfe <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 8009de2:	7cfb      	ldrb	r3, [r7, #19]
 8009de4:	7bfa      	ldrb	r2, [r7, #15]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d109      	bne.n	8009dfe <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8009df0:	4b0a      	ldr	r3, [pc, #40]	@ (8009e1c <sl_wfx_host_wait_for_confirmation+0x64>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e007      	b.n	8009e0e <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	3301      	adds	r3, #1
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d3df      	bcc.n	8009dcc <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8009e0c:	2307      	movs	r3, #7
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	2000136c 	.word	0x2000136c
 8009e1c:	20000a34 	.word	0x20000a34

08009e20 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 f80b 	bl	800ae44 <osDelay>
  
  return SL_STATUS_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	@ 0x28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	789b      	ldrb	r3, [r3, #2]
 8009e44:	3bc3      	subs	r3, #195	@ 0xc3
 8009e46:	2b21      	cmp	r3, #33	@ 0x21
 8009e48:	f200 80f3 	bhi.w	800a032 <sl_wfx_host_post_event+0x1fa>
 8009e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e54 <sl_wfx_host_post_event+0x1c>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009edd 	.word	0x08009edd
 8009e58:	08009ee5 	.word	0x08009ee5
 8009e5c:	08009eed 	.word	0x08009eed
 8009e60:	0800a033 	.word	0x0800a033
 8009e64:	08009ef5 	.word	0x08009ef5
 8009e68:	0800a033 	.word	0x0800a033
 8009e6c:	0800a033 	.word	0x0800a033
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009f13 	.word	0x08009f13
 8009e78:	08009f1b 	.word	0x08009f1b
 8009e7c:	08009f23 	.word	0x08009f23
 8009e80:	08009f2b 	.word	0x08009f2b
 8009e84:	08009f33 	.word	0x08009f33
 8009e88:	0800a033 	.word	0x0800a033
 8009e8c:	0800a033 	.word	0x0800a033
 8009e90:	08009f3b 	.word	0x08009f3b
 8009e94:	0800a033 	.word	0x0800a033
 8009e98:	0800a033 	.word	0x0800a033
 8009e9c:	0800a033 	.word	0x0800a033
 8009ea0:	0800a033 	.word	0x0800a033
 8009ea4:	0800a033 	.word	0x0800a033
 8009ea8:	0800a033 	.word	0x0800a033
 8009eac:	0800a033 	.word	0x0800a033
 8009eb0:	0800a033 	.word	0x0800a033
 8009eb4:	0800a033 	.word	0x0800a033
 8009eb8:	0800a033 	.word	0x0800a033
 8009ebc:	0800a033 	.word	0x0800a033
 8009ec0:	0800a033 	.word	0x0800a033
 8009ec4:	0800a033 	.word	0x0800a033
 8009ec8:	08009f43 	.word	0x08009f43
 8009ecc:	0800a033 	.word	0x0800a033
 8009ed0:	0800a033 	.word	0x0800a033
 8009ed4:	0800a033 	.word	0x0800a033
 8009ed8:	08009fbf 	.word	0x08009fbf
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fa41 	bl	800a364 <sl_wfx_connect_callback>
      break;
 8009ee2:	e0a6      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fb4d 	bl	800a584 <sl_wfx_disconnect_callback>
      break;
 8009eea:	e0a2      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fb87 	bl	800a600 <sl_wfx_start_ap_callback>
      break;
 8009ef2:	e09e      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fbdd 	bl	800a6b4 <sl_wfx_stop_ap_callback>
      break;
 8009efa:	e09a      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	791b      	ldrb	r3, [r3, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 8093 	bne.w	800a030 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7fa f986 	bl	800421c <sl_wfx_host_received_frame_callback>
      }
      break;
 8009f10:	e08e      	b.n	800a030 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f92e 	bl	800a174 <sl_wfx_scan_result_callback>
      break;
 8009f18:	e08b      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f9ee 	bl	800a2fc <sl_wfx_scan_complete_callback>
      break;
 8009f20:	e087      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fc02 	bl	800a72c <sl_wfx_ap_client_connected_callback>
      break;
 8009f28:	e083      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fc3c 	bl	800a7a8 <sl_wfx_ap_client_rejected_callback>
      break;
 8009f30:	e07f      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fc6e 	bl	800a814 <sl_wfx_ap_client_disconnected_callback>
      break;
 8009f38:	e07b      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fca0 	bl	800a880 <sl_wfx_ext_auth_callback>
      break;
 8009f40:	e077      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	627b      	str	r3, [r7, #36]	@ 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4849      	ldr	r0, [pc, #292]	@ (800a078 <sl_wfx_host_post_event+0x240>)
 8009f52:	f012 f8e5 	bl	801c120 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8009f56:	2300      	movs	r3, #0
 8009f58:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009f5a:	e029      	b.n	8009fb0 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 8009f5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4846      	ldr	r0, [pc, #280]	@ (800a07c <sl_wfx_host_post_event+0x244>)
 8009f62:	f012 f8dd 	bl	801c120 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8009f6c:	e00d      	b.n	8009f8a <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	4842      	ldr	r0, [pc, #264]	@ (800a080 <sl_wfx_host_post_event+0x248>)
 8009f76:	f012 f8d3 	bl	801c120 <iprintf>
            exception_tmp++;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8009f80:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f84:	3301      	adds	r3, #1
 8009f86:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8009f8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	d808      	bhi.n	8009fa4 <sl_wfx_host_post_event+0x16c>
 8009f92:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009f94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f98:	4413      	add	r3, r2
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	8812      	ldrh	r2, [r2, #0]
 8009f9e:	b292      	uxth	r2, r2
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	dbe4      	blt.n	8009f6e <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 8009fa4:	4837      	ldr	r0, [pc, #220]	@ (800a084 <sl_wfx_host_post_event+0x24c>)
 8009fa6:	f012 f923 	bl	801c1f0 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8009faa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009fac:	3310      	adds	r3, #16
 8009fae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d3cf      	bcc.n	8009f5c <sl_wfx_host_post_event+0x124>
      }
      break;
 8009fbc:	e039      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	482e      	ldr	r0, [pc, #184]	@ (800a088 <sl_wfx_host_post_event+0x250>)
 8009fce:	f012 f8a7 	bl	801c120 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	837b      	strh	r3, [r7, #26]
 8009fd6:	e024      	b.n	800a022 <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8009fd8:	8b7b      	ldrh	r3, [r7, #26]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4827      	ldr	r0, [pc, #156]	@ (800a07c <sl_wfx_host_post_event+0x244>)
 8009fde:	f012 f89f 	bl	801c120 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	767b      	strb	r3, [r7, #25]
 8009fe6:	e00b      	b.n	800a000 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	4619      	mov	r1, r3
 8009fee:	4824      	ldr	r0, [pc, #144]	@ (800a080 <sl_wfx_host_post_event+0x248>)
 8009ff0:	f012 f896 	bl	801c120 <iprintf>
            error_tmp++;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8009ffa:	7e7b      	ldrb	r3, [r7, #25]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	767b      	strb	r3, [r7, #25]
 800a000:	7e7b      	ldrb	r3, [r7, #25]
 800a002:	2b0f      	cmp	r3, #15
 800a004:	d807      	bhi.n	800a016 <sl_wfx_host_post_event+0x1de>
 800a006:	8b7a      	ldrh	r2, [r7, #26]
 800a008:	7e7b      	ldrb	r3, [r7, #25]
 800a00a:	4413      	add	r3, r2
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	8812      	ldrh	r2, [r2, #0]
 800a010:	b292      	uxth	r2, r2
 800a012:	4293      	cmp	r3, r2
 800a014:	dbe8      	blt.n	8009fe8 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 800a016:	481b      	ldr	r0, [pc, #108]	@ (800a084 <sl_wfx_host_post_event+0x24c>)
 800a018:	f012 f8ea 	bl	801c1f0 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 800a01c:	8b7b      	ldrh	r3, [r7, #26]
 800a01e:	3310      	adds	r3, #16
 800a020:	837b      	strh	r3, [r7, #26]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29b      	uxth	r3, r3
 800a028:	8b7a      	ldrh	r2, [r7, #26]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d3d4      	bcc.n	8009fd8 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 800a02e:	e000      	b.n	800a032 <sl_wfx_host_post_event+0x1fa>
      break;
 800a030:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 800a032:	4b16      	ldr	r3, [pc, #88]	@ (800a08c <sl_wfx_host_post_event+0x254>)
 800a034:	791a      	ldrb	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	789b      	ldrb	r3, [r3, #2]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d117      	bne.n	800a06e <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a048:	d211      	bcs.n	800a06e <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 800a04a:	4b11      	ldr	r3, [pc, #68]	@ (800a090 <sl_wfx_host_post_event+0x258>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 800a056:	461a      	mov	r2, r3
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	f012 fa80 	bl	801c55e <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <sl_wfx_host_post_event+0x25c>)
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	1c99      	adds	r1, r3, #2
 800a066:	2302      	movs	r3, #2
 800a068:	2200      	movs	r2, #0
 800a06a:	f001 fbc3 	bl	800b7f4 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3728      	adds	r7, #40	@ 0x28
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0801ea10 	.word	0x0801ea10
 800a07c:	0801ea2c 	.word	0x0801ea2c
 800a080:	0801ea38 	.word	0x0801ea38
 800a084:	0801ea40 	.word	0x0801ea40
 800a088:	0801ea44 	.word	0x0801ea44
 800a08c:	2000137c 	.word	0x2000137c
 800a090:	20000a34 	.word	0x20000a34
 800a094:	2000136c 	.word	0x2000136c

0800a098 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f004 f8c0 	bl	800e22c <pvPortMalloc>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f004 f97d 	bl	800e3c8 <vPortFree>
  
  return SL_STATUS_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7fe fb4c 	bl	8008782 <sl_wfx_data_write>
 800a0ea:	4603      	mov	r3, r0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 800a0f4:	b40f      	push	{r0, r1, r2, r3}
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 800a0fc:	f107 0314 	add.w	r3, r7, #20
 800a100:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	6938      	ldr	r0, [r7, #16]
 800a106:	f012 f8bf 	bl	801c288 <viprintf>
  va_end(valist);
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a114:	b004      	add	sp, #16
 800a116:	4770      	bx	lr

0800a118 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 800a11e:	2307      	movs	r3, #7
 800a120:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 800a122:	4b0b      	ldr	r3, [pc, #44]	@ (800a150 <sl_wfx_host_lock+0x38>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fe74 	bl	800be18 <xQueueSemaphoreTake>
 800a130:	4603      	mov	r3, r0
 800a132:	2b01      	cmp	r3, #1
 800a134:	d102      	bne.n	800a13c <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	607b      	str	r3, [r7, #4]
 800a13a:	e004      	b.n	800a146 <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 800a13c:	4805      	ldr	r0, [pc, #20]	@ (800a154 <sl_wfx_host_lock+0x3c>)
 800a13e:	f012 f857 	bl	801c1f0 <puts>
	      status = SL_STATUS_TIMEOUT;
 800a142:	2307      	movs	r3, #7
 800a144:	607b      	str	r3, [r7, #4]
	    }

  return status;
 800a146:	687b      	ldr	r3, [r7, #4]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20001374 	.word	0x20001374
 800a154:	0801ea5c 	.word	0x0801ea5c

0800a158 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 800a15c:	4b04      	ldr	r3, [pc, #16]	@ (800a170 <sl_wfx_host_unlock+0x18>)
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	2300      	movs	r3, #0
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	f001 fb45 	bl	800b7f4 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20001374 	.word	0x20001374

0800a174 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	b08a      	sub	sp, #40	@ 0x28
 800a17a:	af08      	add	r7, sp, #32
 800a17c:	6078      	str	r0, [r7, #4]
  scan_count++;
 800a17e:	4b5b      	ldr	r3, [pc, #364]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	3301      	adds	r3, #1
 800a184:	b2da      	uxtb	r2, r3
 800a186:	4b59      	ldr	r3, [pc, #356]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a188:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 800a18a:	4b59      	ldr	r3, [pc, #356]	@ (800a2f0 <sl_wfx_scan_result_callback+0x17c>)
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d03e      	beq.n	800a210 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 800a192:	4b56      	ldr	r3, [pc, #344]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a19c:	b29b      	uxth	r3, r3
    printf(
 800a19e:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3330      	adds	r3, #48	@ 0x30
 800a1a4:	781b      	ldrb	r3, [r3, #0]
    printf(
 800a1a6:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	3bdc      	subs	r3, #220	@ 0xdc
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	b21b      	sxth	r3, r3
    printf(
 800a1b4:	0fda      	lsrs	r2, r3, #31
 800a1b6:	4413      	add	r3, r2
 800a1b8:	105b      	asrs	r3, r3, #1
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    printf(
 800a1c4:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    printf(
 800a1cc:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    printf(
 800a1d4:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    printf(
 800a1dc:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    printf(
 800a1e4:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    printf(
 800a1ec:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3308      	adds	r3, #8
    printf(
 800a1f2:	9307      	str	r3, [sp, #28]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	9306      	str	r3, [sp, #24]
 800a1f8:	9605      	str	r6, [sp, #20]
 800a1fa:	9504      	str	r5, [sp, #16]
 800a1fc:	9403      	str	r4, [sp, #12]
 800a1fe:	9002      	str	r0, [sp, #8]
 800a200:	9101      	str	r1, [sp, #4]
 800a202:	9200      	str	r2, [sp, #0]
 800a204:	4643      	mov	r3, r8
 800a206:	4672      	mov	r2, lr
 800a208:	4661      	mov	r1, ip
 800a20a:	483a      	ldr	r0, [pc, #232]	@ (800a2f4 <sl_wfx_scan_result_callback+0x180>)
 800a20c:	f011 ff88 	bl	801c120 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 800a210:	4b36      	ldr	r3, [pc, #216]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b32      	cmp	r3, #50	@ 0x32
 800a216:	d863      	bhi.n	800a2e0 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 800a218:	4b34      	ldr	r3, [pc, #208]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	1e5a      	subs	r2, r3, #1
 800a21e:	4936      	ldr	r1, [pc, #216]	@ (800a2f8 <sl_wfx_scan_result_callback+0x184>)
 800a220:	4613      	mov	r3, r2
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4413      	add	r3, r2
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	18ca      	adds	r2, r1, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3304      	adds	r3, #4
 800a230:	4610      	mov	r0, r2
 800a232:	f103 0420 	add.w	r4, r3, #32
 800a236:	4602      	mov	r2, r0
 800a238:	4619      	mov	r1, r3
 800a23a:	f8d1 c000 	ldr.w	ip, [r1]
 800a23e:	684e      	ldr	r6, [r1, #4]
 800a240:	688d      	ldr	r5, [r1, #8]
 800a242:	68c9      	ldr	r1, [r1, #12]
 800a244:	f8c2 c000 	str.w	ip, [r2]
 800a248:	6056      	str	r6, [r2, #4]
 800a24a:	6095      	str	r5, [r2, #8]
 800a24c:	60d1      	str	r1, [r2, #12]
 800a24e:	3310      	adds	r3, #16
 800a250:	3010      	adds	r0, #16
 800a252:	42a3      	cmp	r3, r4
 800a254:	d1ef      	bne.n	800a236 <sl_wfx_scan_result_callback+0xc2>
 800a256:	4602      	mov	r2, r0
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 800a25c:	4b23      	ldr	r3, [pc, #140]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	1e5a      	subs	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a266:	b298      	uxth	r0, r3
 800a268:	4923      	ldr	r1, [pc, #140]	@ (800a2f8 <sl_wfx_scan_result_callback+0x184>)
 800a26a:	4613      	mov	r3, r2
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	4413      	add	r3, r2
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	1a9b      	subs	r3, r3, r2
 800a274:	440b      	add	r3, r1
 800a276:	332a      	adds	r3, #42	@ 0x2a
 800a278:	4602      	mov	r2, r0
 800a27a:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 800a27c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	1e5a      	subs	r2, r3, #1
 800a282:	491d      	ldr	r1, [pc, #116]	@ (800a2f8 <sl_wfx_scan_result_callback+0x184>)
 800a284:	4613      	mov	r3, r2
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	4413      	add	r3, r2
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	1a9b      	subs	r3, r3, r2
 800a28e:	440b      	add	r3, r1
 800a290:	332c      	adds	r3, #44	@ 0x2c
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800a298:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 800a29a:	4b14      	ldr	r3, [pc, #80]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	1e5a      	subs	r2, r3, #1
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800a2a4:	b298      	uxth	r0, r3
 800a2a6:	4914      	ldr	r1, [pc, #80]	@ (800a2f8 <sl_wfx_scan_result_callback+0x184>)
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	011b      	lsls	r3, r3, #4
 800a2b0:	1a9b      	subs	r3, r3, r2
 800a2b2:	440b      	add	r3, r1
 800a2b4:	3328      	adds	r3, #40	@ 0x28
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ec <sl_wfx_scan_result_callback+0x178>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	1e5a      	subs	r2, r3, #1
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	4413      	add	r3, r2
 800a2c8:	011b      	lsls	r3, r3, #4
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	3320      	adds	r3, #32
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f8 <sl_wfx_scan_result_callback+0x184>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	1d18      	adds	r0, r3, #4
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3328      	adds	r3, #40	@ 0x28
 800a2d8:	2206      	movs	r2, #6
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f012 f93f 	bl	801c55e <memcpy>
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ea:	bf00      	nop
 800a2ec:	2000136a 	.word	0x2000136a
 800a2f0:	200000a9 	.word	0x200000a9
 800a2f4:	0801ea78 	.word	0x0801ea78
 800a2f8:	20000a3c 	.word	0x20000a3c

0800a2fc <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 800a304:	4b14      	ldr	r3, [pc, #80]	@ (800a358 <sl_wfx_scan_complete_callback+0x5c>)
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	4b14      	ldr	r3, [pc, #80]	@ (800a35c <sl_wfx_scan_complete_callback+0x60>)
 800a30a:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 800a30c:	4b12      	ldr	r3, [pc, #72]	@ (800a358 <sl_wfx_scan_complete_callback+0x5c>)
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800a318:	461a      	mov	r2, r3
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	2101      	movs	r1, #1
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff feb9 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800a326:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10f      	bne.n	800a34e <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 800a32e:	68b8      	ldr	r0, [r7, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	461a      	mov	r2, r3
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	f012 f910 	bl	801c55e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800a33e:	4b08      	ldr	r3, [pc, #32]	@ (800a360 <sl_wfx_scan_complete_callback+0x64>)
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f107 0108 	add.w	r1, r7, #8
 800a346:	2300      	movs	r3, #0
 800a348:	2200      	movs	r2, #0
 800a34a:	f001 fa53 	bl	800b7f4 <xQueueGenericSend>
  }
}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	2000136a 	.word	0x2000136a
 800a35c:	2000136b 	.word	0x2000136b
 800a360:	20001384 	.word	0x20001384

0800a364 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 800a364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	2b0a      	cmp	r3, #10
 800a372:	f200 80d3 	bhi.w	800a51c <sl_wfx_connect_callback+0x1b8>
 800a376:	a201      	add	r2, pc, #4	@ (adr r2, 800a37c <sl_wfx_connect_callback+0x18>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	0800a51d 	.word	0x0800a51d
 800a384:	0800a51d 	.word	0x0800a51d
 800a388:	0800a51d 	.word	0x0800a51d
 800a38c:	0800a51d 	.word	0x0800a51d
 800a390:	0800a51d 	.word	0x0800a51d
 800a394:	0800a407 	.word	0x0800a407
 800a398:	0800a44b 	.word	0x0800a44b
 800a39c:	0800a479 	.word	0x0800a479
 800a3a0:	0800a4a7 	.word	0x0800a4a7
 800a3a4:	0800a4e3 	.word	0x0800a4e3
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 800a3a8:	496a      	ldr	r1, [pc, #424]	@ (800a554 <sl_wfx_connect_callback+0x1f0>)
 800a3aa:	486b      	ldr	r0, [pc, #428]	@ (800a558 <sl_wfx_connect_callback+0x1f4>)
 800a3ac:	f011 feb8 	bl	801c120 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 800a3b0:	4b6a      	ldr	r3, [pc, #424]	@ (800a55c <sl_wfx_connect_callback+0x1f8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800a3b8:	4b68      	ldr	r3, [pc, #416]	@ (800a55c <sl_wfx_connect_callback+0x1f8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f042 0202 	orr.w	r2, r2, #2
 800a3c0:	b2d2      	uxtb	r2, r2
 800a3c2:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f107 0308 	add.w	r3, r7, #8
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff fe5f 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800a3da:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f040 80b3 	bne.w	800a54a <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 800a3e4:	68b8      	ldr	r0, [r7, #8]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	f012 f8b5 	bl	801c55e <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 800a3f4:	4b5a      	ldr	r3, [pc, #360]	@ (800a560 <sl_wfx_connect_callback+0x1fc>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	f107 0108 	add.w	r1, r7, #8
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2200      	movs	r2, #0
 800a400:	f001 f9f8 	bl	800b7f4 <xQueueGenericSend>
      }
      break;
 800a404:	e0a1      	b.n	800a54a <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 800a406:	4b57      	ldr	r3, [pc, #348]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a408:	4a57      	ldr	r2, [pc, #348]	@ (800a568 <sl_wfx_connect_callback+0x204>)
 800a40a:	4614      	mov	r4, r2
 800a40c:	469c      	mov	ip, r3
 800a40e:	f104 0e20 	add.w	lr, r4, #32
 800a412:	4665      	mov	r5, ip
 800a414:	4626      	mov	r6, r4
 800a416:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a418:	6028      	str	r0, [r5, #0]
 800a41a:	6069      	str	r1, [r5, #4]
 800a41c:	60aa      	str	r2, [r5, #8]
 800a41e:	60eb      	str	r3, [r5, #12]
 800a420:	3410      	adds	r4, #16
 800a422:	f10c 0c10 	add.w	ip, ip, #16
 800a426:	4574      	cmp	r4, lr
 800a428:	d1f3      	bne.n	800a412 <sl_wfx_connect_callback+0xae>
 800a42a:	4662      	mov	r2, ip
 800a42c:	4623      	mov	r3, r4
 800a42e:	cb03      	ldmia	r3!, {r0, r1}
 800a430:	6010      	str	r0, [r2, #0]
 800a432:	6051      	str	r1, [r2, #4]
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 800a438:	484a      	ldr	r0, [pc, #296]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a43a:	f011 fe71 	bl	801c120 <iprintf>
      printf("\r\n");
 800a43e:	484b      	ldr	r0, [pc, #300]	@ (800a56c <sl_wfx_connect_callback+0x208>)
 800a440:	f011 fed6 	bl	801c1f0 <puts>
      wifi_autoconnexion_init();
 800a444:	f7f8 fa96 	bl	8002974 <wifi_autoconnexion_init>
      break;
 800a448:	e080      	b.n	800a54c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 800a44a:	4a46      	ldr	r2, [pc, #280]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a44c:	4b48      	ldr	r3, [pc, #288]	@ (800a570 <sl_wfx_connect_callback+0x20c>)
 800a44e:	4615      	mov	r5, r2
 800a450:	461c      	mov	r4, r3
 800a452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a454:	6028      	str	r0, [r5, #0]
 800a456:	6069      	str	r1, [r5, #4]
 800a458:	60aa      	str	r2, [r5, #8]
 800a45a:	60eb      	str	r3, [r5, #12]
 800a45c:	8823      	ldrh	r3, [r4, #0]
 800a45e:	78a2      	ldrb	r2, [r4, #2]
 800a460:	822b      	strh	r3, [r5, #16]
 800a462:	4613      	mov	r3, r2
 800a464:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800a466:	483f      	ldr	r0, [pc, #252]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a468:	f011 fe5a 	bl	801c120 <iprintf>
      printf("\r\n");
 800a46c:	483f      	ldr	r0, [pc, #252]	@ (800a56c <sl_wfx_connect_callback+0x208>)
 800a46e:	f011 febf 	bl	801c1f0 <puts>
      wifi_autoconnexion_init();
 800a472:	f7f8 fa7f 	bl	8002974 <wifi_autoconnexion_init>
      break;
 800a476:	e069      	b.n	800a54c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 800a478:	4a3a      	ldr	r2, [pc, #232]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a47a:	4b3e      	ldr	r3, [pc, #248]	@ (800a574 <sl_wfx_connect_callback+0x210>)
 800a47c:	4615      	mov	r5, r2
 800a47e:	461c      	mov	r4, r3
 800a480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a482:	6028      	str	r0, [r5, #0]
 800a484:	6069      	str	r1, [r5, #4]
 800a486:	60aa      	str	r2, [r5, #8]
 800a488:	60eb      	str	r3, [r5, #12]
 800a48a:	8823      	ldrh	r3, [r4, #0]
 800a48c:	78a2      	ldrb	r2, [r4, #2]
 800a48e:	822b      	strh	r3, [r5, #16]
 800a490:	4613      	mov	r3, r2
 800a492:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800a494:	4833      	ldr	r0, [pc, #204]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a496:	f011 fe43 	bl	801c120 <iprintf>
      printf("\r\n");
 800a49a:	4834      	ldr	r0, [pc, #208]	@ (800a56c <sl_wfx_connect_callback+0x208>)
 800a49c:	f011 fea8 	bl	801c1f0 <puts>
      wifi_autoconnexion_init();
 800a4a0:	f7f8 fa68 	bl	8002974 <wifi_autoconnexion_init>
      break;
 800a4a4:	e052      	b.n	800a54c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 800a4a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a4a8:	4a33      	ldr	r2, [pc, #204]	@ (800a578 <sl_wfx_connect_callback+0x214>)
 800a4aa:	4614      	mov	r4, r2
 800a4ac:	469c      	mov	ip, r3
 800a4ae:	f104 0e20 	add.w	lr, r4, #32
 800a4b2:	4665      	mov	r5, ip
 800a4b4:	4626      	mov	r6, r4
 800a4b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a4b8:	6028      	str	r0, [r5, #0]
 800a4ba:	6069      	str	r1, [r5, #4]
 800a4bc:	60aa      	str	r2, [r5, #8]
 800a4be:	60eb      	str	r3, [r5, #12]
 800a4c0:	3410      	adds	r4, #16
 800a4c2:	f10c 0c10 	add.w	ip, ip, #16
 800a4c6:	4574      	cmp	r4, lr
 800a4c8:	d1f3      	bne.n	800a4b2 <sl_wfx_connect_callback+0x14e>
 800a4ca:	4662      	mov	r2, ip
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	cb03      	ldmia	r3!, {r0, r1}
 800a4d0:	6010      	str	r0, [r2, #0]
 800a4d2:	6051      	str	r1, [r2, #4]
      printf(event_log);
 800a4d4:	4823      	ldr	r0, [pc, #140]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a4d6:	f011 fe23 	bl	801c120 <iprintf>
      printf("\r\n");
 800a4da:	4824      	ldr	r0, [pc, #144]	@ (800a56c <sl_wfx_connect_callback+0x208>)
 800a4dc:	f011 fe88 	bl	801c1f0 <puts>
      break;
 800a4e0:	e034      	b.n	800a54c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 800a4e2:	4b20      	ldr	r3, [pc, #128]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a4e4:	4a25      	ldr	r2, [pc, #148]	@ (800a57c <sl_wfx_connect_callback+0x218>)
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	469c      	mov	ip, r3
 800a4ea:	f104 0e20 	add.w	lr, r4, #32
 800a4ee:	4665      	mov	r5, ip
 800a4f0:	4626      	mov	r6, r4
 800a4f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a4f4:	6028      	str	r0, [r5, #0]
 800a4f6:	6069      	str	r1, [r5, #4]
 800a4f8:	60aa      	str	r2, [r5, #8]
 800a4fa:	60eb      	str	r3, [r5, #12]
 800a4fc:	3410      	adds	r4, #16
 800a4fe:	f10c 0c10 	add.w	ip, ip, #16
 800a502:	4574      	cmp	r4, lr
 800a504:	d1f3      	bne.n	800a4ee <sl_wfx_connect_callback+0x18a>
 800a506:	4662      	mov	r2, ip
 800a508:	4623      	mov	r3, r4
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 800a50e:	4815      	ldr	r0, [pc, #84]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a510:	f011 fe06 	bl	801c120 <iprintf>
      printf("\r\n");
 800a514:	4815      	ldr	r0, [pc, #84]	@ (800a56c <sl_wfx_connect_callback+0x208>)
 800a516:	f011 fe6b 	bl	801c1f0 <puts>
      break;
 800a51a:	e017      	b.n	800a54c <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 800a51c:	4a11      	ldr	r2, [pc, #68]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a51e:	4b18      	ldr	r3, [pc, #96]	@ (800a580 <sl_wfx_connect_callback+0x21c>)
 800a520:	4615      	mov	r5, r2
 800a522:	461c      	mov	r4, r3
 800a524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a526:	6028      	str	r0, [r5, #0]
 800a528:	6069      	str	r1, [r5, #4]
 800a52a:	60aa      	str	r2, [r5, #8]
 800a52c:	60eb      	str	r3, [r5, #12]
 800a52e:	cc03      	ldmia	r4!, {r0, r1}
 800a530:	6128      	str	r0, [r5, #16]
 800a532:	6169      	str	r1, [r5, #20]
 800a534:	7823      	ldrb	r3, [r4, #0]
 800a536:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 800a538:	480a      	ldr	r0, [pc, #40]	@ (800a564 <sl_wfx_connect_callback+0x200>)
 800a53a:	f011 fdf1 	bl	801c120 <iprintf>
      printf("\r\n");
 800a53e:	480b      	ldr	r0, [pc, #44]	@ (800a56c <sl_wfx_connect_callback+0x208>)
 800a540:	f011 fe56 	bl	801c1f0 <puts>
      wifi_autoconnexion_init();
 800a544:	f7f8 fa16 	bl	8002974 <wifi_autoconnexion_init>
    }
  }
}
 800a548:	e000      	b.n	800a54c <sl_wfx_connect_callback+0x1e8>
      break;
 800a54a:	bf00      	nop
}
 800a54c:	bf00      	nop
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a554:	0801eab0 	.word	0x0801eab0
 800a558:	0801eac0 	.word	0x0801eac0
 800a55c:	20000a34 	.word	0x20000a34
 800a560:	20001384 	.word	0x20001384
 800a564:	2000089c 	.word	0x2000089c
 800a568:	0801eadc 	.word	0x0801eadc
 800a56c:	0801ea40 	.word	0x0801ea40
 800a570:	0801eb08 	.word	0x0801eb08
 800a574:	0801eb1c 	.word	0x0801eb1c
 800a578:	0801eb30 	.word	0x0801eb30
 800a57c:	0801eb58 	.word	0x0801eb58
 800a580:	0801eb7c 	.word	0x0801eb7c

0800a584 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	895b      	ldrh	r3, [r3, #10]
 800a590:	b29b      	uxth	r3, r3
 800a592:	4619      	mov	r1, r3
 800a594:	4817      	ldr	r0, [pc, #92]	@ (800a5f4 <sl_wfx_disconnect_callback+0x70>)
 800a596:	f011 fdc3 	bl	801c120 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 800a59a:	4b17      	ldr	r3, [pc, #92]	@ (800a5f8 <sl_wfx_disconnect_callback+0x74>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800a5a2:	4b15      	ldr	r3, [pc, #84]	@ (800a5f8 <sl_wfx_disconnect_callback+0x74>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0202 	bic.w	r2, r2, #2
 800a5aa:	b2d2      	uxtb	r2, r2
 800a5ac:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f107 0308 	add.w	r3, r7, #8
 800a5bc:	2101      	movs	r1, #1
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff fd6a 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800a5c4:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10f      	bne.n	800a5ec <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 800a5cc:	68b8      	ldr	r0, [r7, #8]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	f011 ffc1 	bl	801c55e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800a5dc:	4b07      	ldr	r3, [pc, #28]	@ (800a5fc <sl_wfx_disconnect_callback+0x78>)
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	f107 0108 	add.w	r1, r7, #8
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f001 f904 	bl	800b7f4 <xQueueGenericSend>
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0801eb98 	.word	0x0801eb98
 800a5f8:	20000a34 	.word	0x20000a34
 800a5fc:	20001384 	.word	0x20001384

0800a600 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 800a600:	b5b0      	push	{r4, r5, r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d130      	bne.n	800a672 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 800a610:	4820      	ldr	r0, [pc, #128]	@ (800a694 <sl_wfx_start_ap_callback+0x94>)
 800a612:	f011 fded 	bl	801c1f0 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 800a616:	4920      	ldr	r1, [pc, #128]	@ (800a698 <sl_wfx_start_ap_callback+0x98>)
 800a618:	4820      	ldr	r0, [pc, #128]	@ (800a69c <sl_wfx_start_ap_callback+0x9c>)
 800a61a:	f011 fd81 	bl	801c120 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 800a61e:	4b20      	ldr	r3, [pc, #128]	@ (800a6a0 <sl_wfx_start_ap_callback+0xa0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800a626:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a0 <sl_wfx_start_ap_callback+0xa0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0204 	orr.w	r2, r2, #4
 800a62e:	b2d2      	uxtb	r2, r2
 800a630:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 800a63a:	461a      	mov	r2, r3
 800a63c:	f107 0308 	add.w	r3, r7, #8
 800a640:	2101      	movs	r1, #1
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fd28 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800a648:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d11c      	bne.n	800a68a <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 800a650:	68b8      	ldr	r0, [r7, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29b      	uxth	r3, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	f011 ff7f 	bl	801c55e <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 800a660:	4b10      	ldr	r3, [pc, #64]	@ (800a6a4 <sl_wfx_start_ap_callback+0xa4>)
 800a662:	6818      	ldr	r0, [r3, #0]
 800a664:	f107 0108 	add.w	r1, r7, #8
 800a668:	2300      	movs	r3, #0
 800a66a:	2200      	movs	r2, #0
 800a66c:	f001 f8c2 	bl	800b7f4 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 800a670:	e00b      	b.n	800a68a <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 800a672:	480d      	ldr	r0, [pc, #52]	@ (800a6a8 <sl_wfx_start_ap_callback+0xa8>)
 800a674:	f011 fdbc 	bl	801c1f0 <puts>
    strcpy(event_log, "AP start failed");
 800a678:	4a0c      	ldr	r2, [pc, #48]	@ (800a6ac <sl_wfx_start_ap_callback+0xac>)
 800a67a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b0 <sl_wfx_start_ap_callback+0xb0>)
 800a67c:	4614      	mov	r4, r2
 800a67e:	461d      	mov	r5, r3
 800a680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	6061      	str	r1, [r4, #4]
 800a686:	60a2      	str	r2, [r4, #8]
 800a688:	60e3      	str	r3, [r4, #12]
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bdb0      	pop	{r4, r5, r7, pc}
 800a692:	bf00      	nop
 800a694:	0801ebac 	.word	0x0801ebac
 800a698:	20000068 	.word	0x20000068
 800a69c:	0801ebb8 	.word	0x0801ebb8
 800a6a0:	20000a34 	.word	0x20000a34
 800a6a4:	20001384 	.word	0x20001384
 800a6a8:	0801ebd4 	.word	0x0801ebd4
 800a6ac:	2000089c 	.word	0x2000089c
 800a6b0:	0801ebe8 	.word	0x0801ebe8

0800a6b4 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 800a6bc:	4818      	ldr	r0, [pc, #96]	@ (800a720 <sl_wfx_stop_ap_callback+0x6c>)
 800a6be:	f011 fd97 	bl	801c1f0 <puts>
  dhcpserver_clear_stored_mac();
 800a6c2:	f7f8 fd75 	bl	80031b0 <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 800a6c6:	4b17      	ldr	r3, [pc, #92]	@ (800a724 <sl_wfx_stop_ap_callback+0x70>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 800a6ce:	4b15      	ldr	r3, [pc, #84]	@ (800a724 <sl_wfx_stop_ap_callback+0x70>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0204 	bic.w	r2, r2, #4
 800a6d6:	b2d2      	uxtb	r2, r2
 800a6d8:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f107 0308 	add.w	r3, r7, #8
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7ff fcd4 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800a6f0:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10f      	bne.n	800a718 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 800a6f8:	68b8      	ldr	r0, [r7, #8]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	f011 ff2b 	bl	801c55e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800a708:	4b07      	ldr	r3, [pc, #28]	@ (800a728 <sl_wfx_stop_ap_callback+0x74>)
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	f107 0108 	add.w	r1, r7, #8
 800a710:	2300      	movs	r3, #0
 800a712:	2200      	movs	r2, #0
 800a714:	f001 f86e 	bl	800b7f4 <xQueueGenericSend>
  }
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	0801ebf8 	.word	0x0801ebf8
 800a724:	20000a34 	.word	0x20000a34
 800a728:	20001384 	.word	0x20001384

0800a72c <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 800a72c:	b5b0      	push	{r4, r5, r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af04      	add	r7, sp, #16
 800a732:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a738:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a73e:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a744:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a74a:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a750:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a756:	9302      	str	r3, [sp, #8]
 800a758:	9101      	str	r1, [sp, #4]
 800a75a:	9200      	str	r2, [sp, #0]
 800a75c:	462b      	mov	r3, r5
 800a75e:	4622      	mov	r2, r4
 800a760:	4601      	mov	r1, r0
 800a762:	480b      	ldr	r0, [pc, #44]	@ (800a790 <sl_wfx_ap_client_connected_callback+0x64>)
 800a764:	f011 fcdc 	bl	801c120 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <sl_wfx_ap_client_connected_callback+0x68>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	4619      	mov	r1, r3
 800a76e:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <sl_wfx_ap_client_connected_callback+0x6c>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	4b09      	ldr	r3, [pc, #36]	@ (800a79c <sl_wfx_ap_client_connected_callback+0x70>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	4b09      	ldr	r3, [pc, #36]	@ (800a7a0 <sl_wfx_ap_client_connected_callback+0x74>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	4603      	mov	r3, r0
 800a782:	4808      	ldr	r0, [pc, #32]	@ (800a7a4 <sl_wfx_ap_client_connected_callback+0x78>)
 800a784:	f011 fccc 	bl	801c120 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 800a788:	bf00      	nop
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bdb0      	pop	{r4, r5, r7, pc}
 800a790:	0801ec08 	.word	0x0801ec08
 800a794:	20000096 	.word	0x20000096
 800a798:	20000097 	.word	0x20000097
 800a79c:	20000098 	.word	0x20000098
 800a7a0:	20000099 	.word	0x20000099
 800a7a4:	0801ec40 	.word	0x0801ec40

0800a7a8 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 800a7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7aa:	b089      	sub	sp, #36	@ 0x24
 800a7ac:	af04      	add	r7, sp, #16
 800a7ae:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	1d1a      	adds	r2, r3, #4
 800a7b4:	f107 0308 	add.w	r3, r7, #8
 800a7b8:	6810      	ldr	r0, [r2, #0]
 800a7ba:	6018      	str	r0, [r3, #0]
 800a7bc:	8892      	ldrh	r2, [r2, #4]
 800a7be:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800a7c0:	f107 0308 	add.w	r3, r7, #8
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f8 fb35 	bl	8002e34 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	895b      	ldrh	r3, [r3, #10]
 800a7ce:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7d0:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7d6:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7dc:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7e2:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7e8:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7ee:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a7f4:	9303      	str	r3, [sp, #12]
 800a7f6:	9002      	str	r0, [sp, #8]
 800a7f8:	9101      	str	r1, [sp, #4]
 800a7fa:	9200      	str	r2, [sp, #0]
 800a7fc:	4633      	mov	r3, r6
 800a7fe:	462a      	mov	r2, r5
 800a800:	4621      	mov	r1, r4
 800a802:	4803      	ldr	r0, [pc, #12]	@ (800a810 <sl_wfx_ap_client_rejected_callback+0x68>)
 800a804:	f011 fc8c 	bl	801c120 <iprintf>
}
 800a808:	bf00      	nop
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a810:	0801ec74 	.word	0x0801ec74

0800a814 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 800a814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a816:	b089      	sub	sp, #36	@ 0x24
 800a818:	af04      	add	r7, sp, #16
 800a81a:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	1d1a      	adds	r2, r3, #4
 800a820:	f107 0308 	add.w	r3, r7, #8
 800a824:	6810      	ldr	r0, [r2, #0]
 800a826:	6018      	str	r0, [r3, #0]
 800a828:	8892      	ldrh	r2, [r2, #4]
 800a82a:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800a82c:	f107 0308 	add.w	r3, r7, #8
 800a830:	4618      	mov	r0, r3
 800a832:	f7f8 faff 	bl	8002e34 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	895b      	ldrh	r3, [r3, #10]
 800a83a:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a83c:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a842:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a848:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a84e:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a854:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a85a:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	9002      	str	r0, [sp, #8]
 800a864:	9101      	str	r1, [sp, #4]
 800a866:	9200      	str	r2, [sp, #0]
 800a868:	4633      	mov	r3, r6
 800a86a:	462a      	mov	r2, r5
 800a86c:	4621      	mov	r1, r4
 800a86e:	4803      	ldr	r0, [pc, #12]	@ (800a87c <sl_wfx_ap_client_disconnected_callback+0x68>)
 800a870:	f011 fc56 	bl	801c120 <iprintf>
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87c:	0801ecb8 	.word	0x0801ecb8

0800a880 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800a88e:	461a      	mov	r2, r3
 800a890:	f107 0308 	add.w	r3, r7, #8
 800a894:	2101      	movs	r1, #1
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff fbfe 	bl	800a098 <sl_wfx_host_allocate_buffer>
 800a89c:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10f      	bne.n	800a8c4 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 800a8a4:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
    memcpy(buffer,
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	f011 fe55 	bl	801c55e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800a8b4:	4b05      	ldr	r3, [pc, #20]	@ (800a8cc <sl_wfx_ext_auth_callback+0x4c>)
 800a8b6:	6818      	ldr	r0, [r3, #0]
 800a8b8:	f107 0108 	add.w	r1, r7, #8
 800a8bc:	2300      	movs	r3, #0
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f000 ff98 	bl	800b7f4 <xQueueGenericSend>
  }
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20001384 	.word	0x20001384

0800a8d0 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 800a8d0:	b5b0      	push	{r4, r5, r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2001      	movs	r0, #1
 800a8dc:	f000 ff02 	bl	800b6e4 <xQueueGenericCreate>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4a0d      	ldr	r2, [pc, #52]	@ (800a918 <wifi_events_start+0x48>)
 800a8e4:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a91c <wifi_events_start+0x4c>)
 800a8e8:	1d3c      	adds	r4, r7, #4
 800a8ea:	461d      	mov	r5, r3
 800a8ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 800a8f4:	1d3b      	adds	r3, r7, #4
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fa70 	bl	800adde <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 800a8fe:	2200      	movs	r2, #0
 800a900:	2104      	movs	r1, #4
 800a902:	200a      	movs	r0, #10
 800a904:	f000 feee 	bl	800b6e4 <xQueueGenericCreate>
 800a908:	4603      	mov	r3, r0
 800a90a:	4a05      	ldr	r2, [pc, #20]	@ (800a920 <wifi_events_start+0x50>)
 800a90c:	6013      	str	r3, [r2, #0]
}
 800a90e:	bf00      	nop
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bdb0      	pop	{r4, r5, r7, pc}
 800a916:	bf00      	nop
 800a918:	20001388 	.word	0x20001388
 800a91c:	0801ed0c 	.word	0x0801ed0c
 800a920:	20001384 	.word	0x20001384

0800a924 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800a92c:	4b22      	ldr	r3, [pc, #136]	@ (800a9b8 <wifi_events_task_entry+0x94>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f107 0108 	add.w	r1, r7, #8
 800a934:	f04f 32ff 	mov.w	r2, #4294967295
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 f98b 	bl	800bc54 <xQueueReceive>
 800a93e:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d1f2      	bne.n	800a92c <wifi_events_task_entry+0x8>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0ef      	beq.n	800a92c <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	789b      	ldrb	r3, [r3, #2]
 800a950:	3bc3      	subs	r3, #195	@ 0xc3
 800a952:	2b09      	cmp	r3, #9
 800a954:	d82a      	bhi.n	800a9ac <wifi_events_task_entry+0x88>
 800a956:	a201      	add	r2, pc, #4	@ (adr r2, 800a95c <wifi_events_task_entry+0x38>)
 800a958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95c:	0800a985 	.word	0x0800a985
 800a960:	0800a98b 	.word	0x0800a98b
 800a964:	0800a991 	.word	0x0800a991
 800a968:	0800a9ad 	.word	0x0800a9ad
 800a96c:	0800a997 	.word	0x0800a997
 800a970:	0800a9ad 	.word	0x0800a9ad
 800a974:	0800a9ad 	.word	0x0800a9ad
 800a978:	0800a9ad 	.word	0x0800a9ad
 800a97c:	0800a9ad 	.word	0x0800a9ad
 800a980:	0800a99d 	.word	0x0800a99d
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 800a984:	f7f9 fcd6 	bl	8004334 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800a988:	e010      	b.n	800a9ac <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 800a98a:	f7f9 fcf1 	bl	8004370 <lwip_set_sta_link_down>
          break;
 800a98e:	e00d      	b.n	800a9ac <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 800a990:	f7f9 fd0c 	bl	80043ac <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 800a994:	e00a      	b.n	800a9ac <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 800a996:	f7f9 fd1f 	bl	80043d8 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800a99a:	e007      	b.n	800a9ac <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 800a99c:	4b07      	ldr	r3, [pc, #28]	@ (800a9bc <wifi_events_task_entry+0x98>)
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f000 ff25 	bl	800b7f4 <xQueueGenericSend>
          break;
 800a9aa:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff fb83 	bl	800a0bc <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800a9b6:	e7b9      	b.n	800a92c <wifi_events_task_entry+0x8>
 800a9b8:	20001384 	.word	0x20001384
 800a9bc:	20001378 	.word	0x20001378

0800a9c0 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 800a9c4:	f000 f8a8 	bl	800ab18 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f000 fe89 	bl	800b6e4 <xQueueGenericCreate>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4a05      	ldr	r2, [pc, #20]	@ (800a9ec <sl_wfx_host_init_bus+0x2c>)
 800a9d6:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 800a9d8:	4b04      	ldr	r3, [pc, #16]	@ (800a9ec <sl_wfx_host_init_bus+0x2c>)
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f000 ff07 	bl	800b7f4 <xQueueGenericSend>
  return SL_STATUS_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	200014a4 	.word	0x200014a4

0800a9f0 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 800a9f4:	4b04      	ldr	r3, [pc, #16]	@ (800aa08 <sl_wfx_host_deinit_bus+0x18>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fac9 	bl	800af90 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 800a9fe:	f000 f8c1 	bl	800ab84 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	200014a4 	.word	0x200014a4

0800aa0c <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 800aa10:	2200      	movs	r2, #0
 800aa12:	2110      	movs	r1, #16
 800aa14:	4802      	ldr	r0, [pc, #8]	@ (800aa20 <sl_wfx_host_spi_cs_assert+0x14>)
 800aa16:	f7fb fd87 	bl	8006528 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	40020000 	.word	0x40020000

0800aa24 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 800aa28:	2201      	movs	r2, #1
 800aa2a:	2110      	movs	r1, #16
 800aa2c:	4802      	ldr	r0, [pc, #8]	@ (800aa38 <sl_wfx_host_spi_cs_deassert+0x14>)
 800aa2e:	f7fb fd7b 	bl	8006528 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	40020000 	.word	0x40020000

0800aa3c <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607b      	str	r3, [r7, #4]
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	bf0c      	ite	eq
 800aa58:	2301      	moveq	r3, #1
 800aa5a:	2300      	movne	r3, #0
 800aa5c:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800aa5e:	4b21      	ldr	r3, [pc, #132]	@ (800aae4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f04f 31ff 	mov.w	r1, #4294967295
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 f9d6 	bl	800be18 <xQueueSemaphoreTake>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d120      	bne.n	800aab4 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 800aa72:	89ba      	ldrh	r2, [r7, #12]
 800aa74:	2301      	movs	r3, #1
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	481b      	ldr	r0, [pc, #108]	@ (800aae8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800aa7a:	f7fc fadc 	bl	8007036 <HAL_SPI_Transmit>
    if (is_read) {
 800aa7e:	7cfb      	ldrb	r3, [r7, #19]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00b      	beq.n	800aa9c <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 800aa84:	8c3b      	ldrh	r3, [r7, #32]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	4817      	ldr	r0, [pc, #92]	@ (800aae8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800aa8c:	f7fc fcc6 	bl	800741c <HAL_SPI_Receive_DMA>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d110      	bne.n	800aab8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	e00d      	b.n	800aab8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 800aa9c:	8c3b      	ldrh	r3, [r7, #32]
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	4811      	ldr	r0, [pc, #68]	@ (800aae8 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800aaa4:	f7fc fc04 	bl	80072b0 <HAL_SPI_Transmit_DMA>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d104      	bne.n	800aab8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]
 800aab2:	e001      	b.n	800aab8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 800aab4:	2307      	movs	r3, #7
 800aab6:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800aab8:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f04f 31ff 	mov.w	r1, #4294967295
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 f9a9 	bl	800be18 <xQueueSemaphoreTake>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d106      	bne.n	800aada <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 800aacc:	4b05      	ldr	r3, [pc, #20]	@ (800aae4 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 800aace:	6818      	ldr	r0, [r3, #0]
 800aad0:	2300      	movs	r3, #0
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	f000 fe8d 	bl	800b7f4 <xQueueGenericSend>
  }

  return result;
 800aada:	697b      	ldr	r3, [r7, #20]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	200014a4 	.word	0x200014a4
 800aae8:	2000138c 	.word	0x2000138c

0800aaec <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	210a      	movs	r1, #10
 800aaf4:	2028      	movs	r0, #40	@ 0x28
 800aaf6:	f7fa fe5e 	bl	80057b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800aafa:	2028      	movs	r0, #40	@ 0x28
 800aafc:	f7fa fe77 	bl	80057ee <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 800ab06:	b580      	push	{r7, lr}
 800ab08:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800ab0a:	2028      	movs	r0, #40	@ 0x28
 800ab0c:	f7fa fe7d 	bl	800580a <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ab1c:	4b17      	ldr	r3, [pc, #92]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab1e:	4a18      	ldr	r2, [pc, #96]	@ (800ab80 <MX_SPI1_Init+0x68>)
 800ab20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ab22:	4b16      	ldr	r3, [pc, #88]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ab28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ab2a:	4b14      	ldr	r3, [pc, #80]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ab30:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab36:	4b11      	ldr	r3, [pc, #68]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ab42:	4b0e      	ldr	r3, [pc, #56]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab50:	4b0a      	ldr	r3, [pc, #40]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ab56:	4b09      	ldr	r3, [pc, #36]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab5c:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ab62:	4b06      	ldr	r3, [pc, #24]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab64:	220a      	movs	r2, #10
 800ab66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab68:	4804      	ldr	r0, [pc, #16]	@ (800ab7c <MX_SPI1_Init+0x64>)
 800ab6a:	f7fc f9b3 	bl	8006ed4 <HAL_SPI_Init>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800ab74:	f7f9 ffd2 	bl	8004b1c <Error_Handler>
  }
}
 800ab78:	bf00      	nop
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	2000138c 	.word	0x2000138c
 800ab80:	40013000 	.word	0x40013000

0800ab84 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 800ab88:	4805      	ldr	r0, [pc, #20]	@ (800aba0 <MX_SPI1_DeInit+0x1c>)
 800ab8a:	f7fa ff23 	bl	80059d4 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 800ab8e:	4805      	ldr	r0, [pc, #20]	@ (800aba4 <MX_SPI1_DeInit+0x20>)
 800ab90:	f7fa ff20 	bl	80059d4 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 800ab94:	4804      	ldr	r0, [pc, #16]	@ (800aba8 <MX_SPI1_DeInit+0x24>)
 800ab96:	f7fc fa26 	bl	8006fe6 <HAL_SPI_DeInit>
}
 800ab9a:	bf00      	nop
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20001444 	.word	0x20001444
 800aba4:	200013e4 	.word	0x200013e4
 800aba8:	2000138c 	.word	0x2000138c

0800abac <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 800abac:	b5b0      	push	{r4, r5, r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 800abb2:	f000 fad4 	bl	800b15e <xEventGroupCreate>
 800abb6:	4603      	mov	r3, r0
 800abb8:	4a10      	ldr	r2, [pc, #64]	@ (800abfc <sl_wfx_task_start+0x50>)
 800abba:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 800abbc:	2001      	movs	r0, #1
 800abbe:	f000 fe01 	bl	800b7c4 <xQueueCreateMutex>
 800abc2:	4603      	mov	r3, r0
 800abc4:	4a0e      	ldr	r2, [pc, #56]	@ (800ac00 <sl_wfx_task_start+0x54>)
 800abc6:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 800abc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac04 <sl_wfx_task_start+0x58>)
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 800abce:	4b0d      	ldr	r3, [pc, #52]	@ (800ac04 <sl_wfx_task_start+0x58>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 800abd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <sl_wfx_task_start+0x5c>)
 800abd6:	1d3c      	adds	r4, r7, #4
 800abd8:	461d      	mov	r5, r3
 800abda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 800abe2:	1d3b      	adds	r3, r7, #4
 800abe4:	2100      	movs	r1, #0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f8f9 	bl	800adde <osThreadCreate>
 800abec:	4603      	mov	r3, r0
 800abee:	4a07      	ldr	r2, [pc, #28]	@ (800ac0c <sl_wfx_task_start+0x60>)
 800abf0:	6013      	str	r3, [r2, #0]

}
 800abf2:	bf00      	nop
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bdb0      	pop	{r4, r5, r7, pc}
 800abfa:	bf00      	nop
 800abfc:	200014ac 	.word	0x200014ac
 800ac00:	200014b0 	.word	0x200014b0
 800ac04:	200014b4 	.word	0x200014b4
 800ac08:	0801ed2c 	.word	0x0801ed2c
 800ac0c:	200014a8 	.word	0x200014a8

0800ac10 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <sl_wfx_task_entry+0x44>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	f04f 33ff 	mov.w	r3, #4294967295
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	2300      	movs	r3, #0
 800ac28:	2201      	movs	r2, #1
 800ac2a:	2103      	movs	r1, #3
 800ac2c:	f000 faae 	bl	800b18c <xEventGroupWaitBits>
 800ac30:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 800ac3c:	f000 f834 	bl	800aca8 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0e8      	beq.n	800ac1c <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 800ac4a:	89fb      	ldrh	r3, [r7, #14]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 f803 	bl	800ac58 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 800ac52:	e7e3      	b.n	800ac1c <sl_wfx_task_entry+0xc>
 800ac54:	200014ac 	.word	0x200014ac

0800ac58 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 800ac62:	f7ff ff50 	bl	800ab06 <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 800ac66:	1dbb      	adds	r3, r7, #6
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe fa77 	bl	800915c <sl_wfx_receive_frame>
 800ac6e:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 800ac76:	f7ff ff39 	bl	800aaec <sl_wfx_host_enable_platform_interrupt>
 800ac7a:	e00d      	b.n	800ac98 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d006      	beq.n	800ac94 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 800ac86:	4b07      	ldr	r3, [pc, #28]	@ (800aca4 <sl_wfx_rx_process+0x4c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2102      	movs	r1, #2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fb4f 	bl	800b330 <xEventGroupSetBits>
 800ac92:	e001      	b.n	800ac98 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 800ac94:	f7ff ff2a 	bl	800aaec <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 800ac98:	68fb      	ldr	r3, [r7, #12]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200014ac 	.word	0x200014ac

0800aca8 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 800acae:	4b28      	ldr	r3, [pc, #160]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 800acb6:	231b      	movs	r3, #27
 800acb8:	e045      	b.n	800ad46 <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 800acba:	4b26      	ldr	r3, [pc, #152]	@ (800ad54 <sl_wfx_tx_process+0xac>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f04f 31ff 	mov.w	r1, #4294967295
 800acc2:	4618      	mov	r0, r3
 800acc4:	f001 f8a8 	bl	800be18 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800acc8:	4b21      	ldr	r3, [pc, #132]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 800acd0:	4b1f      	ldr	r3, [pc, #124]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800acd2:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800acd4:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 800acd6:	4b1e      	ldr	r3, [pc, #120]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800acd8:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800acda:	791a      	ldrb	r2, [r3, #4]
 800acdc:	2300      	movs	r3, #0
 800acde:	f7fe f8f9 	bl	8008ed4 <sl_wfx_send_ethernet_frame>
 800ace2:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00e      	beq.n	800ad08 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 800acea:	4b1b      	ldr	r3, [pc, #108]	@ (800ad58 <sl_wfx_tx_process+0xb0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2101      	movs	r1, #1
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fb1d 	bl	800b330 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800acf6:	4b17      	ldr	r3, [pc, #92]	@ (800ad54 <sl_wfx_tx_process+0xac>)
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	2300      	movs	r3, #0
 800acfc:	2200      	movs	r2, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	f000 fd78 	bl	800b7f4 <xQueueGenericSend>
    return SL_STATUS_FULL;
 800ad04:	231c      	movs	r3, #28
 800ad06:	e01e      	b.n	800ad46 <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 800ad08:	4b11      	ldr	r3, [pc, #68]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 800ad0e:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a0e      	ldr	r2, [pc, #56]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800ad16:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 800ad18:	2200      	movs	r2, #0
 800ad1a:	214a      	movs	r1, #74	@ 0x4a
 800ad1c:	6838      	ldr	r0, [r7, #0]
 800ad1e:	f7fe ff15 	bl	8009b4c <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 800ad22:	4b0b      	ldr	r3, [pc, #44]	@ (800ad50 <sl_wfx_tx_process+0xa8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <sl_wfx_tx_process+0xb0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2101      	movs	r1, #1
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fafd 	bl	800b330 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800ad36:	4b07      	ldr	r3, [pc, #28]	@ (800ad54 <sl_wfx_tx_process+0xac>)
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2100      	movs	r1, #0
 800ad40:	f000 fd58 	bl	800b7f4 <xQueueGenericSend>

  return result;
 800ad44:	687b      	ldr	r3, [r7, #4]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200014b4 	.word	0x200014b4
 800ad54:	200014b0 	.word	0x200014b0
 800ad58:	200014ac 	.word	0x200014ac

0800ad5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad6e:	2b84      	cmp	r3, #132	@ 0x84
 800ad70:	d005      	beq.n	800ad7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ad72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	3303      	adds	r3, #3
 800ad7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad92:	f3ef 8305 	mrs	r3, IPSR
 800ad96:	607b      	str	r3, [r7, #4]
  return(result);
 800ad98:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800adb4:	f001 fd8c 	bl	800c8d0 <vTaskStartScheduler>
  
  return osOK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800adc2:	f7ff ffe3 	bl	800ad8c <inHandlerMode>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800adcc:	f001 fe8a 	bl	800cae4 <xTaskGetTickCountFromISR>
 800add0:	4603      	mov	r3, r0
 800add2:	e002      	b.n	800adda <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800add4:	f001 fe76 	bl	800cac4 <xTaskGetTickCount>
 800add8:	4603      	mov	r3, r0
  }
}
 800adda:	4618      	mov	r0, r3
 800addc:	bd80      	pop	{r7, pc}

0800adde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800adde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade0:	b087      	sub	sp, #28
 800ade2:	af02      	add	r7, sp, #8
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685c      	ldr	r4, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adf4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff ffad 	bl	800ad5c <makeFreeRtosPriority>
 800ae02:	4602      	mov	r2, r0
 800ae04:	f107 030c 	add.w	r3, r7, #12
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	9200      	str	r2, [sp, #0]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	4632      	mov	r2, r6
 800ae10:	4629      	mov	r1, r5
 800ae12:	4620      	mov	r0, r4
 800ae14:	f001 fb62 	bl	800c4dc <xTaskCreate>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d001      	beq.n	800ae22 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e000      	b.n	800ae24 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800ae22:	68fb      	ldr	r3, [r7, #12]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae2c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 fc85 	bl	800c744 <vTaskDelete>
  return osOK;
 800ae3a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	085b      	lsrs	r3, r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <osDelay+0x18>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	e000      	b.n	800ae5e <osDelay+0x1a>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 fd00 	bl	800c864 <vTaskDelay>
  
  return osOK;
 800ae64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ae76:	2001      	movs	r0, #1
 800ae78:	f000 fca4 	bl	800b7c4 <xQueueCreateMutex>
 800ae7c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
	...

0800ae88 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ae92:	2300      	movs	r3, #0
 800ae94:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <osMutexWait+0x18>
    return osErrorParameter;
 800ae9c:	2380      	movs	r3, #128	@ 0x80
 800ae9e:	e03b      	b.n	800af18 <osMutexWait+0x90>
  }
  
  ticks = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d103      	bne.n	800aeb4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	e00a      	b.n	800aeca <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <osMutexWait+0x42>
      ticks = 1;
 800aec6:	2301      	movs	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aeca:	f7ff ff5f 	bl	800ad8c <inHandlerMode>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d017      	beq.n	800af04 <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	461a      	mov	r2, r3
 800aeda:	2100      	movs	r1, #0
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 f8ab 	bl	800c038 <xQueueReceiveFromISR>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d001      	beq.n	800aeec <osMutexWait+0x64>
      return osErrorOS;
 800aee8:	23ff      	movs	r3, #255	@ 0xff
 800aeea:	e015      	b.n	800af18 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d011      	beq.n	800af16 <osMutexWait+0x8e>
 800aef2:	4b0b      	ldr	r3, [pc, #44]	@ (800af20 <osMutexWait+0x98>)
 800aef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	e008      	b.n	800af16 <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800af04:	68f9      	ldr	r1, [r7, #12]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 ff86 	bl	800be18 <xQueueSemaphoreTake>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d001      	beq.n	800af16 <osMutexWait+0x8e>
    return osErrorOS;
 800af12:	23ff      	movs	r3, #255	@ 0xff
 800af14:	e000      	b.n	800af18 <osMutexWait+0x90>
  }
  
  return osOK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800af34:	f7ff ff2a 	bl	800ad8c <inHandlerMode>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d016      	beq.n	800af6c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fdf5 	bl	800bb34 <xQueueGiveFromISR>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d001      	beq.n	800af54 <osMutexRelease+0x30>
      return osErrorOS;
 800af50:	23ff      	movs	r3, #255	@ 0xff
 800af52:	e017      	b.n	800af84 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d013      	beq.n	800af82 <osMutexRelease+0x5e>
 800af5a:	4b0c      	ldr	r3, [pc, #48]	@ (800af8c <osMutexRelease+0x68>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	e00a      	b.n	800af82 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800af6c:	2300      	movs	r3, #0
 800af6e:	2200      	movs	r2, #0
 800af70:	2100      	movs	r1, #0
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fc3e 	bl	800b7f4 <xQueueGenericSend>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d001      	beq.n	800af82 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800af7e:	23ff      	movs	r3, #255	@ 0xff
 800af80:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800af82:	68fb      	ldr	r3, [r7, #12]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800af98:	f7ff fef8 	bl	800ad8c <inHandlerMode>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <osMutexDelete+0x16>
    return osErrorISR;
 800afa2:	2382      	movs	r3, #130	@ 0x82
 800afa4:	e003      	b.n	800afae <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 f8c8 	bl	800c13c <vQueueDelete>

  return osOK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	4619      	mov	r1, r3
 800afcc:	f000 fb8a 	bl	800b6e4 <xQueueGenericCreate>
 800afd0:	4603      	mov	r3, r0
#endif
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	085b      	lsrs	r3, r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <osMessagePut+0x20>
    ticks = 1;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800affc:	f7ff fec6 	bl	800ad8c <inHandlerMode>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d018      	beq.n	800b038 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b006:	f107 0210 	add.w	r2, r7, #16
 800b00a:	f107 0108 	add.w	r1, r7, #8
 800b00e:	2300      	movs	r3, #0
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 fcf1 	bl	800b9f8 <xQueueGenericSendFromISR>
 800b016:	4603      	mov	r3, r0
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d001      	beq.n	800b020 <osMessagePut+0x44>
      return osErrorOS;
 800b01c:	23ff      	movs	r3, #255	@ 0xff
 800b01e:	e018      	b.n	800b052 <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d014      	beq.n	800b050 <osMessagePut+0x74>
 800b026:	4b0d      	ldr	r3, [pc, #52]	@ (800b05c <osMessagePut+0x80>)
 800b028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	e00b      	b.n	800b050 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b038:	f107 0108 	add.w	r1, r7, #8
 800b03c:	2300      	movs	r3, #0
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 fbd7 	bl	800b7f4 <xQueueGenericSend>
 800b046:	4603      	mov	r3, r0
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d001      	beq.n	800b050 <osMessagePut+0x74>
      return osErrorOS;
 800b04c:	23ff      	movs	r3, #255	@ 0xff
 800b04e:	e000      	b.n	800b052 <osMessagePut+0x76>
    }
  }
  
  return osOK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	e000ed04 	.word	0xe000ed04

0800b060 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b060:	b590      	push	{r4, r7, lr}
 800b062:	b08b      	sub	sp, #44	@ 0x2c
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10a      	bne.n	800b090 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b07a:	2380      	movs	r3, #128	@ 0x80
 800b07c:	617b      	str	r3, [r7, #20]
    return event;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	461c      	mov	r4, r3
 800b082:	f107 0314 	add.w	r3, r7, #20
 800b086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b08a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b08e:	e055      	b.n	800b13c <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 800b090:	2300      	movs	r3, #0
 800b092:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d103      	bne.n	800b0a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0a6:	e00a      	b.n	800b0be <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d007      	beq.n	800b0be <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <osMessageGet+0x5e>
      ticks = 1;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b0be:	f7ff fe65 	bl	800ad8c <inHandlerMode>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01c      	beq.n	800b102 <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b0c8:	f107 0220 	add.w	r2, r7, #32
 800b0cc:	f107 0314 	add.w	r3, r7, #20
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68b8      	ldr	r0, [r7, #8]
 800b0d6:	f000 ffaf 	bl	800c038 <xQueueReceiveFromISR>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d102      	bne.n	800b0e6 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 800b0e0:	2310      	movs	r3, #16
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e001      	b.n	800b0ea <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d01d      	beq.n	800b12c <osMessageGet+0xcc>
 800b0f0:	4b14      	ldr	r3, [pc, #80]	@ (800b144 <osMessageGet+0xe4>)
 800b0f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	e014      	b.n	800b12c <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b102:	f107 0314 	add.w	r3, r7, #20
 800b106:	3304      	adds	r3, #4
 800b108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b10a:	4619      	mov	r1, r3
 800b10c:	68b8      	ldr	r0, [r7, #8]
 800b10e:	f000 fda1 	bl	800bc54 <xQueueReceive>
 800b112:	4603      	mov	r3, r0
 800b114:	2b01      	cmp	r3, #1
 800b116:	d102      	bne.n	800b11e <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800b118:	2310      	movs	r3, #16
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e006      	b.n	800b12c <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <osMessageGet+0xc8>
 800b124:	2300      	movs	r3, #0
 800b126:	e000      	b.n	800b12a <osMessageGet+0xca>
 800b128:	2340      	movs	r3, #64	@ 0x40
 800b12a:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	461c      	mov	r4, r3
 800b130:	f107 0314 	add.w	r3, r7, #20
 800b134:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	372c      	adds	r7, #44	@ 0x2c
 800b140:	46bd      	mov	sp, r7
 800b142:	bd90      	pop	{r4, r7, pc}
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800b14c:	f002 f886 	bl	800d25c <xTaskGetSchedulerState>
 800b150:	4603      	mov	r3, r0
 800b152:	2b01      	cmp	r3, #1
 800b154:	d001      	beq.n	800b15a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800b156:	f002 ffd7 	bl	800e108 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800b15a:	bf00      	nop
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b164:	2018      	movs	r0, #24
 800b166:	f003 f861 	bl	800e22c <pvPortMalloc>
 800b16a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d007      	beq.n	800b182 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 f992 	bl	800b4a6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b182:	687b      	ldr	r3, [r7, #4]
	}
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b090      	sub	sp, #64	@ 0x40
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10b      	bne.n	800b1c4 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	e7fd      	b.n	800b1c0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1ca:	d30b      	bcc.n	800b1e4 <xEventGroupWaitBits+0x58>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	61fb      	str	r3, [r7, #28]
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	e7fd      	b.n	800b1e0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10b      	bne.n	800b202 <xEventGroupWaitBits+0x76>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	61bb      	str	r3, [r7, #24]
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	e7fd      	b.n	800b1fe <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b202:	f002 f82b 	bl	800d25c <xTaskGetSchedulerState>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <xEventGroupWaitBits+0x86>
 800b20c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <xEventGroupWaitBits+0x8a>
 800b212:	2301      	movs	r3, #1
 800b214:	e000      	b.n	800b218 <xEventGroupWaitBits+0x8c>
 800b216:	2300      	movs	r3, #0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10b      	bne.n	800b234 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	617b      	str	r3, [r7, #20]
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800b234:	f001 fb9a 	bl	800c96c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b244:	f000 f90d 	bl	800b462 <prvTestWaitCondition>
 800b248:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00e      	beq.n	800b26e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b252:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b254:	2300      	movs	r3, #0
 800b256:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d028      	beq.n	800b2b0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	43db      	mvns	r3, r3
 800b266:	401a      	ands	r2, r3
 800b268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e020      	b.n	800b2b0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b26e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b270:	2b00      	cmp	r3, #0
 800b272:	d104      	bne.n	800b27e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800b278:	2301      	movs	r3, #1
 800b27a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b27c:	e018      	b.n	800b2b0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b28a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b294:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b298:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b29c:	1d18      	adds	r0, r3, #4
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f001 fd6a 	bl	800cd80 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b2b0:	f001 fb6a 	bl	800c988 <xTaskResumeAll>
 800b2b4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b2b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d031      	beq.n	800b320 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d107      	bne.n	800b2d2 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800b2c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b32c <xEventGroupWaitBits+0x1a0>)
 800b2c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b2d2:	f002 f96f 	bl	800d5b4 <uxTaskResetEventItemValue>
 800b2d6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d11a      	bne.n	800b318 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800b2e2:	f002 fe81 	bl	800dfe8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	68b9      	ldr	r1, [r7, #8]
 800b2f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2f2:	f000 f8b6 	bl	800b462 <prvTestWaitCondition>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d006      	beq.n	800b310 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	43db      	mvns	r3, r3
 800b30a:	401a      	ands	r2, r3
 800b30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800b310:	2301      	movs	r3, #1
 800b312:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800b314:	f002 fe9a 	bl	800e04c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800b320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b322:	4618      	mov	r0, r3
 800b324:	3740      	adds	r7, #64	@ 0x40
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	e000ed04 	.word	0xe000ed04

0800b330 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08e      	sub	sp, #56	@ 0x38
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800b33a:	2300      	movs	r3, #0
 800b33c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800b342:	2300      	movs	r3, #0
 800b344:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10b      	bne.n	800b364 <xEventGroupSetBits+0x34>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	613b      	str	r3, [r7, #16]
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	e7fd      	b.n	800b360 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b36a:	d30b      	bcc.n	800b384 <xEventGroupSetBits+0x54>
	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	60fb      	str	r3, [r7, #12]
}
 800b37e:	bf00      	nop
 800b380:	bf00      	nop
 800b382:	e7fd      	b.n	800b380 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800b384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b386:	3304      	adds	r3, #4
 800b388:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	3308      	adds	r3, #8
 800b38e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800b390:	f001 faec 	bl	800c96c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800b394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800b3a6:	e03c      	b.n	800b422 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800b3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b3be:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b3c6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d108      	bne.n	800b3e4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800b3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	4013      	ands	r3, r2
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3e2:	e008      	b.n	800b3f6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d101      	bne.n	800b3f6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800b3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d010      	beq.n	800b41e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800b406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800b40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b416:	4619      	mov	r1, r3
 800b418:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b41a:	f001 fd7f 	bl	800cf1c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800b422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	429a      	cmp	r2, r3
 800b428:	d1be      	bne.n	800b3a8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800b42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	43db      	mvns	r3, r3
 800b432:	401a      	ands	r2, r3
 800b434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b436:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800b438:	f001 faa6 	bl	800c988 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800b43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43e:	681b      	ldr	r3, [r3, #0]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3738      	adds	r7, #56	@ 0x38
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff ff6b 	bl	800b330 <xEventGroupSetBits>
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b462:	b480      	push	{r7}
 800b464:	b087      	sub	sp, #28
 800b466:	af00      	add	r7, sp, #0
 800b468:	60f8      	str	r0, [r7, #12]
 800b46a:	60b9      	str	r1, [r7, #8]
 800b46c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d107      	bne.n	800b488 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	4013      	ands	r3, r2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b482:	2301      	movs	r3, #1
 800b484:	617b      	str	r3, [r7, #20]
 800b486:	e007      	b.n	800b498 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	4013      	ands	r3, r2
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	429a      	cmp	r2, r3
 800b492:	d101      	bne.n	800b498 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b494:	2301      	movs	r3, #1
 800b496:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b498:	697b      	ldr	r3, [r7, #20]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b083      	sub	sp, #12
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f103 0208 	add.w	r2, r3, #8
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b4be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f103 0208 	add.w	r2, r3, #8
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f103 0208 	add.w	r2, r3, #8
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4da:	bf00      	nop
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	601a      	str	r2, [r3, #0]
}
 800b53c:	bf00      	nop
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55e:	d103      	bne.n	800b568 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	e00c      	b.n	800b582 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3308      	adds	r3, #8
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	e002      	b.n	800b576 <vListInsert+0x2e>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d2f6      	bcs.n	800b570 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	601a      	str	r2, [r3, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6892      	ldr	r2, [r2, #8]
 800b5d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	6852      	ldr	r2, [r2, #4]
 800b5da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d103      	bne.n	800b5ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689a      	ldr	r2, [r3, #8]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	1e5a      	subs	r2, r3, #1
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
	...

0800b610 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10b      	bne.n	800b63c <xQueueGenericReset+0x2c>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	60bb      	str	r3, [r7, #8]
}
 800b636:	bf00      	nop
 800b638:	bf00      	nop
 800b63a:	e7fd      	b.n	800b638 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b63c:	f002 fcd4 	bl	800dfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b64c:	fb01 f303 	mul.w	r3, r1, r3
 800b650:	441a      	add	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b66c:	3b01      	subs	r3, #1
 800b66e:	68f9      	ldr	r1, [r7, #12]
 800b670:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b672:	fb01 f303 	mul.w	r3, r1, r3
 800b676:	441a      	add	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	22ff      	movs	r2, #255	@ 0xff
 800b680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	22ff      	movs	r2, #255	@ 0xff
 800b688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d114      	bne.n	800b6bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d01a      	beq.n	800b6d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3310      	adds	r3, #16
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f001 fbd8 	bl	800ce54 <xTaskRemoveFromEventList>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d012      	beq.n	800b6d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e0 <xQueueGenericReset+0xd0>)
 800b6ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	e009      	b.n	800b6d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3310      	adds	r3, #16
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff fef0 	bl	800b4a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3324      	adds	r3, #36	@ 0x24
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff feeb 	bl	800b4a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6d0:	f002 fcbc 	bl	800e04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6d4:	2301      	movs	r3, #1
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	e000ed04 	.word	0xe000ed04

0800b6e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08a      	sub	sp, #40	@ 0x28
 800b6e8:	af02      	add	r7, sp, #8
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10b      	bne.n	800b710 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	613b      	str	r3, [r7, #16]
}
 800b70a:	bf00      	nop
 800b70c:	bf00      	nop
 800b70e:	e7fd      	b.n	800b70c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	fb02 f303 	mul.w	r3, r2, r3
 800b718:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	3348      	adds	r3, #72	@ 0x48
 800b71e:	4618      	mov	r0, r3
 800b720:	f002 fd84 	bl	800e22c <pvPortMalloc>
 800b724:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00d      	beq.n	800b748 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	3348      	adds	r3, #72	@ 0x48
 800b734:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b736:	79fa      	ldrb	r2, [r7, #7]
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	4613      	mov	r3, r2
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f805 	bl	800b752 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b748:	69bb      	ldr	r3, [r7, #24]
	}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	607a      	str	r2, [r7, #4]
 800b75e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	69ba      	ldr	r2, [r7, #24]
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	e002      	b.n	800b774 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b780:	2101      	movs	r1, #1
 800b782:	69b8      	ldr	r0, [r7, #24]
 800b784:	f7ff ff44 	bl	800b610 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00e      	beq.n	800b7bc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f81c 	bl	800b7f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6939      	ldr	r1, [r7, #16]
 800b7dc:	6978      	ldr	r0, [r7, #20]
 800b7de:	f7ff ff81 	bl	800b6e4 <xQueueGenericCreate>
 800b7e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff ffd3 	bl	800b790 <prvInitialiseMutex>

		return xNewQueue;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08e      	sub	sp, #56	@ 0x38
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b802:	2300      	movs	r3, #0
 800b804:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <xQueueGenericSend+0x34>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d103      	bne.n	800b836 <xQueueGenericSend+0x42>
 800b82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <xQueueGenericSend+0x46>
 800b836:	2301      	movs	r3, #1
 800b838:	e000      	b.n	800b83c <xQueueGenericSend+0x48>
 800b83a:	2300      	movs	r3, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10b      	bne.n	800b858 <xQueueGenericSend+0x64>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	e7fd      	b.n	800b854 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d103      	bne.n	800b866 <xQueueGenericSend+0x72>
 800b85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b862:	2b01      	cmp	r3, #1
 800b864:	d101      	bne.n	800b86a <xQueueGenericSend+0x76>
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <xQueueGenericSend+0x78>
 800b86a:	2300      	movs	r3, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10b      	bne.n	800b888 <xQueueGenericSend+0x94>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	623b      	str	r3, [r7, #32]
}
 800b882:	bf00      	nop
 800b884:	bf00      	nop
 800b886:	e7fd      	b.n	800b884 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b888:	f001 fce8 	bl	800d25c <xTaskGetSchedulerState>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <xQueueGenericSend+0xa4>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <xQueueGenericSend+0xa8>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <xQueueGenericSend+0xaa>
 800b89c:	2300      	movs	r3, #0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10b      	bne.n	800b8ba <xQueueGenericSend+0xc6>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	61fb      	str	r3, [r7, #28]
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop
 800b8b8:	e7fd      	b.n	800b8b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8ba:	f002 fb95 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d302      	bcc.n	800b8d0 <xQueueGenericSend+0xdc>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d129      	bne.n	800b924 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	68b9      	ldr	r1, [r7, #8]
 800b8d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8d6:	f000 fc68 	bl	800c1aa <prvCopyDataToQueue>
 800b8da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d010      	beq.n	800b906 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e6:	3324      	adds	r3, #36	@ 0x24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 fab3 	bl	800ce54 <xTaskRemoveFromEventList>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d013      	beq.n	800b91c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8f4:	4b3f      	ldr	r3, [pc, #252]	@ (800b9f4 <xQueueGenericSend+0x200>)
 800b8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	e00a      	b.n	800b91c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b90c:	4b39      	ldr	r3, [pc, #228]	@ (800b9f4 <xQueueGenericSend+0x200>)
 800b90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b91c:	f002 fb96 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800b920:	2301      	movs	r3, #1
 800b922:	e063      	b.n	800b9ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d103      	bne.n	800b932 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b92a:	f002 fb8f 	bl	800e04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	e05c      	b.n	800b9ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b938:	f107 0314 	add.w	r3, r7, #20
 800b93c:	4618      	mov	r0, r3
 800b93e:	f001 fb51 	bl	800cfe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b942:	2301      	movs	r3, #1
 800b944:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b946:	f002 fb81 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b94a:	f001 f80f 	bl	800c96c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b94e:	f002 fb4b 	bl	800dfe8 <vPortEnterCritical>
 800b952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b958:	b25b      	sxtb	r3, r3
 800b95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95e:	d103      	bne.n	800b968 <xQueueGenericSend+0x174>
 800b960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b96e:	b25b      	sxtb	r3, r3
 800b970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b974:	d103      	bne.n	800b97e <xQueueGenericSend+0x18a>
 800b976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b97e:	f002 fb65 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b982:	1d3a      	adds	r2, r7, #4
 800b984:	f107 0314 	add.w	r3, r7, #20
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f001 fb40 	bl	800d010 <xTaskCheckForTimeOut>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d124      	bne.n	800b9e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b998:	f000 fcff 	bl	800c39a <prvIsQueueFull>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d018      	beq.n	800b9d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	3310      	adds	r3, #16
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f9c2 	bl	800cd34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9b2:	f000 fc8a 	bl	800c2ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9b6:	f000 ffe7 	bl	800c988 <xTaskResumeAll>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f47f af7c 	bne.w	800b8ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f4 <xQueueGenericSend+0x200>)
 800b9c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	e772      	b.n	800b8ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9d6:	f000 fc78 	bl	800c2ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9da:	f000 ffd5 	bl	800c988 <xTaskResumeAll>
 800b9de:	e76c      	b.n	800b8ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9e2:	f000 fc72 	bl	800c2ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9e6:	f000 ffcf 	bl	800c988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3738      	adds	r7, #56	@ 0x38
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	e000ed04 	.word	0xe000ed04

0800b9f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b090      	sub	sp, #64	@ 0x40
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10b      	bne.n	800ba28 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	e7fd      	b.n	800ba24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d103      	bne.n	800ba36 <xQueueGenericSendFromISR+0x3e>
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <xQueueGenericSendFromISR+0x42>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <xQueueGenericSendFromISR+0x44>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10b      	bne.n	800ba58 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	e7fd      	b.n	800ba54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d103      	bne.n	800ba66 <xQueueGenericSendFromISR+0x6e>
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d101      	bne.n	800ba6a <xQueueGenericSendFromISR+0x72>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <xQueueGenericSendFromISR+0x74>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10b      	bne.n	800ba88 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	623b      	str	r3, [r7, #32]
}
 800ba82:	bf00      	nop
 800ba84:	bf00      	nop
 800ba86:	e7fd      	b.n	800ba84 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba88:	f002 fb8e 	bl	800e1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba8c:	f3ef 8211 	mrs	r2, BASEPRI
 800ba90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	61fa      	str	r2, [r7, #28]
 800baa2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800baa4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800baa6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d302      	bcc.n	800baba <xQueueGenericSendFromISR+0xc2>
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d12f      	bne.n	800bb1a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800baba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	68b9      	ldr	r1, [r7, #8]
 800bace:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bad0:	f000 fb6b 	bl	800c1aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bad4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800badc:	d112      	bne.n	800bb04 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d016      	beq.n	800bb14 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae8:	3324      	adds	r3, #36	@ 0x24
 800baea:	4618      	mov	r0, r3
 800baec:	f001 f9b2 	bl	800ce54 <xTaskRemoveFromEventList>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00e      	beq.n	800bb14 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00b      	beq.n	800bb14 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	e007      	b.n	800bb14 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bb08:	3301      	adds	r3, #1
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	b25a      	sxtb	r2, r3
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bb14:	2301      	movs	r3, #1
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bb18:	e001      	b.n	800bb1e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb20:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3740      	adds	r7, #64	@ 0x40
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b08e      	sub	sp, #56	@ 0x38
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10b      	bne.n	800bb60 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	623b      	str	r3, [r7, #32]
}
 800bb5a:	bf00      	nop
 800bb5c:	bf00      	nop
 800bb5e:	e7fd      	b.n	800bb5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	61fb      	str	r3, [r7, #28]
}
 800bb7a:	bf00      	nop
 800bb7c:	bf00      	nop
 800bb7e:	e7fd      	b.n	800bb7c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d103      	bne.n	800bb90 <xQueueGiveFromISR+0x5c>
 800bb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <xQueueGiveFromISR+0x60>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e000      	b.n	800bb96 <xQueueGiveFromISR+0x62>
 800bb94:	2300      	movs	r3, #0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10b      	bne.n	800bbb2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	61bb      	str	r3, [r7, #24]
}
 800bbac:	bf00      	nop
 800bbae:	bf00      	nop
 800bbb0:	e7fd      	b.n	800bbae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbb2:	f002 faf9 	bl	800e1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800bbb6:	f3ef 8211 	mrs	r2, BASEPRI
 800bbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	617a      	str	r2, [r7, #20]
 800bbcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bbce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d22b      	bcs.n	800bc3a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfc:	d112      	bne.n	800bc24 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d016      	beq.n	800bc34 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc08:	3324      	adds	r3, #36	@ 0x24
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 f922 	bl	800ce54 <xTaskRemoveFromEventList>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00e      	beq.n	800bc34 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	e007      	b.n	800bc34 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc28:	3301      	adds	r3, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	b25a      	sxtb	r2, r3
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bc34:	2301      	movs	r3, #1
 800bc36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc38:	e001      	b.n	800bc3e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f383 8811 	msr	BASEPRI, r3
}
 800bc48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3738      	adds	r7, #56	@ 0x38
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08c      	sub	sp, #48	@ 0x30
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc60:	2300      	movs	r3, #0
 800bc62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10b      	bne.n	800bc86 <xQueueReceive+0x32>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	623b      	str	r3, [r7, #32]
}
 800bc80:	bf00      	nop
 800bc82:	bf00      	nop
 800bc84:	e7fd      	b.n	800bc82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d103      	bne.n	800bc94 <xQueueReceive+0x40>
 800bc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <xQueueReceive+0x44>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e000      	b.n	800bc9a <xQueueReceive+0x46>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10b      	bne.n	800bcb6 <xQueueReceive+0x62>
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	61fb      	str	r3, [r7, #28]
}
 800bcb0:	bf00      	nop
 800bcb2:	bf00      	nop
 800bcb4:	e7fd      	b.n	800bcb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcb6:	f001 fad1 	bl	800d25c <xTaskGetSchedulerState>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <xQueueReceive+0x72>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <xQueueReceive+0x76>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <xQueueReceive+0x78>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10b      	bne.n	800bce8 <xQueueReceive+0x94>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	61bb      	str	r3, [r7, #24]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bce8:	f002 f97e 	bl	800dfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d01f      	beq.n	800bd38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcfc:	f000 fabf 	bl	800c27e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd02:	1e5a      	subs	r2, r3, #1
 800bd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00f      	beq.n	800bd30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd12:	3310      	adds	r3, #16
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f89d 	bl	800ce54 <xTaskRemoveFromEventList>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d007      	beq.n	800bd30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd20:	4b3c      	ldr	r3, [pc, #240]	@ (800be14 <xQueueReceive+0x1c0>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd30:	f002 f98c 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e069      	b.n	800be0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d103      	bne.n	800bd46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd3e:	f002 f985 	bl	800e04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e062      	b.n	800be0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d106      	bne.n	800bd5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd4c:	f107 0310 	add.w	r3, r7, #16
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 f947 	bl	800cfe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd56:	2301      	movs	r3, #1
 800bd58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd5a:	f002 f977 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd5e:	f000 fe05 	bl	800c96c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd62:	f002 f941 	bl	800dfe8 <vPortEnterCritical>
 800bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd6c:	b25b      	sxtb	r3, r3
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd72:	d103      	bne.n	800bd7c <xQueueReceive+0x128>
 800bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd82:	b25b      	sxtb	r3, r3
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd88:	d103      	bne.n	800bd92 <xQueueReceive+0x13e>
 800bd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd92:	f002 f95b 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd96:	1d3a      	adds	r2, r7, #4
 800bd98:	f107 0310 	add.w	r3, r7, #16
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 f936 	bl	800d010 <xTaskCheckForTimeOut>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d123      	bne.n	800bdf2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdac:	f000 fadf 	bl	800c36e <prvIsQueueEmpty>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d017      	beq.n	800bde6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb8:	3324      	adds	r3, #36	@ 0x24
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 ffb8 	bl	800cd34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdc6:	f000 fa80 	bl	800c2ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdca:	f000 fddd 	bl	800c988 <xTaskResumeAll>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d189      	bne.n	800bce8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bdd4:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <xQueueReceive+0x1c0>)
 800bdd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	e780      	b.n	800bce8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bde6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bde8:	f000 fa6f 	bl	800c2ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdec:	f000 fdcc 	bl	800c988 <xTaskResumeAll>
 800bdf0:	e77a      	b.n	800bce8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdf4:	f000 fa69 	bl	800c2ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdf8:	f000 fdc6 	bl	800c988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdfe:	f000 fab6 	bl	800c36e <prvIsQueueEmpty>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	f43f af6f 	beq.w	800bce8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3730      	adds	r7, #48	@ 0x30
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	e000ed04 	.word	0xe000ed04

0800be18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08e      	sub	sp, #56	@ 0x38
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be22:	2300      	movs	r3, #0
 800be24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	623b      	str	r3, [r7, #32]
}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	e7fd      	b.n	800be48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00b      	beq.n	800be6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	61fb      	str	r3, [r7, #28]
}
 800be66:	bf00      	nop
 800be68:	bf00      	nop
 800be6a:	e7fd      	b.n	800be68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be6c:	f001 f9f6 	bl	800d25c <xTaskGetSchedulerState>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d102      	bne.n	800be7c <xQueueSemaphoreTake+0x64>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <xQueueSemaphoreTake+0x68>
 800be7c:	2301      	movs	r3, #1
 800be7e:	e000      	b.n	800be82 <xQueueSemaphoreTake+0x6a>
 800be80:	2300      	movs	r3, #0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10b      	bne.n	800be9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	61bb      	str	r3, [r7, #24]
}
 800be98:	bf00      	nop
 800be9a:	bf00      	nop
 800be9c:	e7fd      	b.n	800be9a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be9e:	f002 f8a3 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d024      	beq.n	800bef8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb0:	1e5a      	subs	r2, r3, #1
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d104      	bne.n	800bec8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bebe:	f001 fb91 	bl	800d5e4 <pvTaskIncrementMutexHeldCount>
 800bec2:	4602      	mov	r2, r0
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00f      	beq.n	800bef0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed2:	3310      	adds	r3, #16
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 ffbd 	bl	800ce54 <xTaskRemoveFromEventList>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bee0:	4b54      	ldr	r3, [pc, #336]	@ (800c034 <xQueueSemaphoreTake+0x21c>)
 800bee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bee6:	601a      	str	r2, [r3, #0]
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bef0:	f002 f8ac 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e098      	b.n	800c02a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d112      	bne.n	800bf24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800befe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	617b      	str	r3, [r7, #20]
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	e7fd      	b.n	800bf18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf1c:	f002 f896 	bl	800e04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf20:	2300      	movs	r3, #0
 800bf22:	e082      	b.n	800c02a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf2a:	f107 030c 	add.w	r3, r7, #12
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f001 f858 	bl	800cfe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf34:	2301      	movs	r3, #1
 800bf36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf38:	f002 f888 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf3c:	f000 fd16 	bl	800c96c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf40:	f002 f852 	bl	800dfe8 <vPortEnterCritical>
 800bf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf4a:	b25b      	sxtb	r3, r3
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf50:	d103      	bne.n	800bf5a <xQueueSemaphoreTake+0x142>
 800bf52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf66:	d103      	bne.n	800bf70 <xQueueSemaphoreTake+0x158>
 800bf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf70:	f002 f86c 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf74:	463a      	mov	r2, r7
 800bf76:	f107 030c 	add.w	r3, r7, #12
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 f847 	bl	800d010 <xTaskCheckForTimeOut>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d132      	bne.n	800bfee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf8a:	f000 f9f0 	bl	800c36e <prvIsQueueEmpty>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d026      	beq.n	800bfe2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d109      	bne.n	800bfb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bf9c:	f002 f824 	bl	800dfe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 f977 	bl	800d298 <xTaskPriorityInherit>
 800bfaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bfac:	f002 f84e 	bl	800e04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb2:	3324      	adds	r3, #36	@ 0x24
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 febb 	bl	800cd34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfc0:	f000 f983 	bl	800c2ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfc4:	f000 fce0 	bl	800c988 <xTaskResumeAll>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f47f af67 	bne.w	800be9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bfd0:	4b18      	ldr	r3, [pc, #96]	@ (800c034 <xQueueSemaphoreTake+0x21c>)
 800bfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	e75d      	b.n	800be9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfe4:	f000 f971 	bl	800c2ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfe8:	f000 fcce 	bl	800c988 <xTaskResumeAll>
 800bfec:	e757      	b.n	800be9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bff0:	f000 f96b 	bl	800c2ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bff4:	f000 fcc8 	bl	800c988 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bffa:	f000 f9b8 	bl	800c36e <prvIsQueueEmpty>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	f43f af4c 	beq.w	800be9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00d      	beq.n	800c028 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c00c:	f001 ffec 	bl	800dfe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c010:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c012:	f000 f8b2 	bl	800c17a <prvGetDisinheritPriorityAfterTimeout>
 800c016:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 fa38 	bl	800d494 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c024:	f002 f812 	bl	800e04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3738      	adds	r7, #56	@ 0x38
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	e000ed04 	.word	0xe000ed04

0800c038 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08e      	sub	sp, #56	@ 0x38
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10b      	bne.n	800c066 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	623b      	str	r3, [r7, #32]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d103      	bne.n	800c074 <xQueueReceiveFromISR+0x3c>
 800c06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <xQueueReceiveFromISR+0x40>
 800c074:	2301      	movs	r3, #1
 800c076:	e000      	b.n	800c07a <xQueueReceiveFromISR+0x42>
 800c078:	2300      	movs	r3, #0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10b      	bne.n	800c096 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	61fb      	str	r3, [r7, #28]
}
 800c090:	bf00      	nop
 800c092:	bf00      	nop
 800c094:	e7fd      	b.n	800c092 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c096:	f002 f887 	bl	800e1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800c09a:	f3ef 8211 	mrs	r2, BASEPRI
 800c09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	61ba      	str	r2, [r7, #24]
 800c0b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d02f      	beq.n	800c122 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0cc:	68b9      	ldr	r1, [r7, #8]
 800c0ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0d0:	f000 f8d5 	bl	800c27e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d6:	1e5a      	subs	r2, r3, #1
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c0dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e4:	d112      	bne.n	800c10c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d016      	beq.n	800c11c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	3310      	adds	r3, #16
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 feae 	bl	800ce54 <xTaskRemoveFromEventList>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	e007      	b.n	800c11c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c10c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c110:	3301      	adds	r3, #1
 800c112:	b2db      	uxtb	r3, r3
 800c114:	b25a      	sxtb	r2, r3
 800c116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c11c:	2301      	movs	r3, #1
 800c11e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c120:	e001      	b.n	800c126 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c122:	2300      	movs	r3, #0
 800c124:	637b      	str	r3, [r7, #52]	@ 0x34
 800c126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	f383 8811 	msr	BASEPRI, r3
}
 800c130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c134:	4618      	mov	r0, r3
 800c136:	3738      	adds	r7, #56	@ 0x38
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10b      	bne.n	800c166 <vQueueDelete+0x2a>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	60bb      	str	r3, [r7, #8]
}
 800c160:	bf00      	nop
 800c162:	bf00      	nop
 800c164:	e7fd      	b.n	800c162 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f000 f95a 	bl	800c420 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f002 f92b 	bl	800e3c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	d006      	beq.n	800c198 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f1c3 0307 	rsb	r3, r3, #7
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	e001      	b.n	800c19c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c198:	2300      	movs	r3, #0
 800c19a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c19c:	68fb      	ldr	r3, [r7, #12]
	}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b086      	sub	sp, #24
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10d      	bne.n	800c1e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d14d      	bne.n	800c26c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 f8d5 	bl	800d384 <xTaskPriorityDisinherit>
 800c1da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	609a      	str	r2, [r3, #8]
 800c1e2:	e043      	b.n	800c26c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d119      	bne.n	800c21e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6858      	ldr	r0, [r3, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	f010 f9b2 	bl	801c55e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c202:	441a      	add	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	429a      	cmp	r2, r3
 800c212:	d32b      	bcc.n	800c26c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	605a      	str	r2, [r3, #4]
 800c21c:	e026      	b.n	800c26c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68d8      	ldr	r0, [r3, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c226:	461a      	mov	r2, r3
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	f010 f998 	bl	801c55e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c236:	425b      	negs	r3, r3
 800c238:	441a      	add	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	429a      	cmp	r2, r3
 800c248:	d207      	bcs.n	800c25a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c252:	425b      	negs	r3, r3
 800c254:	441a      	add	r2, r3
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d105      	bne.n	800c26c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d002      	beq.n	800c26c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	3b01      	subs	r3, #1
 800c26a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c274:	697b      	ldr	r3, [r7, #20]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b082      	sub	sp, #8
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d018      	beq.n	800c2c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68da      	ldr	r2, [r3, #12]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c298:	441a      	add	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68da      	ldr	r2, [r3, #12]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d303      	bcc.n	800c2b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68d9      	ldr	r1, [r3, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	f010 f94e 	bl	801c55e <memcpy>
	}
}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2d2:	f001 fe89 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2de:	e011      	b.n	800c304 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d012      	beq.n	800c30e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3324      	adds	r3, #36	@ 0x24
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fdb1 	bl	800ce54 <xTaskRemoveFromEventList>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2f8:	f000 feee 	bl	800d0d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	b2db      	uxtb	r3, r3
 800c302:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dce9      	bgt.n	800c2e0 <prvUnlockQueue+0x16>
 800c30c:	e000      	b.n	800c310 <prvUnlockQueue+0x46>
					break;
 800c30e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	22ff      	movs	r2, #255	@ 0xff
 800c314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c318:	f001 fe98 	bl	800e04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c31c:	f001 fe64 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c326:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c328:	e011      	b.n	800c34e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d012      	beq.n	800c358 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	3310      	adds	r3, #16
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fd8c 	bl	800ce54 <xTaskRemoveFromEventList>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c342:	f000 fec9 	bl	800d0d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	3b01      	subs	r3, #1
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c34e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c352:	2b00      	cmp	r3, #0
 800c354:	dce9      	bgt.n	800c32a <prvUnlockQueue+0x60>
 800c356:	e000      	b.n	800c35a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c358:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	22ff      	movs	r2, #255	@ 0xff
 800c35e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c362:	f001 fe73 	bl	800e04c <vPortExitCritical>
}
 800c366:	bf00      	nop
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c376:	f001 fe37 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c382:	2301      	movs	r3, #1
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	e001      	b.n	800c38c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c388:	2300      	movs	r3, #0
 800c38a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c38c:	f001 fe5e 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800c390:	68fb      	ldr	r3, [r7, #12]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3a2:	f001 fe21 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d102      	bne.n	800c3b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	e001      	b.n	800c3bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3bc:	f001 fe46 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e014      	b.n	800c406 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3dc:	4a0f      	ldr	r2, [pc, #60]	@ (800c41c <vQueueAddToRegistry+0x50>)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10b      	bne.n	800c400 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3e8:	490c      	ldr	r1, [pc, #48]	@ (800c41c <vQueueAddToRegistry+0x50>)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3f2:	4a0a      	ldr	r2, [pc, #40]	@ (800c41c <vQueueAddToRegistry+0x50>)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	4413      	add	r3, r2
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3fe:	e006      	b.n	800c40e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3301      	adds	r3, #1
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b07      	cmp	r3, #7
 800c40a:	d9e7      	bls.n	800c3dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c40c:	bf00      	nop
 800c40e:	bf00      	nop
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	200014bc 	.word	0x200014bc

0800c420 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e016      	b.n	800c45c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c42e:	4a10      	ldr	r2, [pc, #64]	@ (800c470 <vQueueUnregisterQueue+0x50>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	4413      	add	r3, r2
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d10b      	bne.n	800c456 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c43e:	4a0c      	ldr	r2, [pc, #48]	@ (800c470 <vQueueUnregisterQueue+0x50>)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2100      	movs	r1, #0
 800c444:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c448:	4a09      	ldr	r2, [pc, #36]	@ (800c470 <vQueueUnregisterQueue+0x50>)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	4413      	add	r3, r2
 800c450:	2200      	movs	r2, #0
 800c452:	605a      	str	r2, [r3, #4]
				break;
 800c454:	e006      	b.n	800c464 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3301      	adds	r3, #1
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b07      	cmp	r3, #7
 800c460:	d9e5      	bls.n	800c42e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	200014bc 	.word	0x200014bc

0800c474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c484:	f001 fdb0 	bl	800dfe8 <vPortEnterCritical>
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c48e:	b25b      	sxtb	r3, r3
 800c490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c494:	d103      	bne.n	800c49e <vQueueWaitForMessageRestricted+0x2a>
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4a4:	b25b      	sxtb	r3, r3
 800c4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4aa:	d103      	bne.n	800c4b4 <vQueueWaitForMessageRestricted+0x40>
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4b4:	f001 fdca 	bl	800e04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d106      	bne.n	800c4ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	3324      	adds	r3, #36	@ 0x24
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fc97 	bl	800cdfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4ce:	6978      	ldr	r0, [r7, #20]
 800c4d0:	f7ff fefb 	bl	800c2ca <prvUnlockQueue>
	}
 800c4d4:	bf00      	nop
 800c4d6:	3718      	adds	r7, #24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08c      	sub	sp, #48	@ 0x30
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4ec:	88fb      	ldrh	r3, [r7, #6]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f001 fe9b 	bl	800e22c <pvPortMalloc>
 800c4f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00e      	beq.n	800c51c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4fe:	2054      	movs	r0, #84	@ 0x54
 800c500:	f001 fe94 	bl	800e22c <pvPortMalloc>
 800c504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d003      	beq.n	800c514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	631a      	str	r2, [r3, #48]	@ 0x30
 800c512:	e005      	b.n	800c520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c514:	6978      	ldr	r0, [r7, #20]
 800c516:	f001 ff57 	bl	800e3c8 <vPortFree>
 800c51a:	e001      	b.n	800c520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d013      	beq.n	800c54e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c526:	88fa      	ldrh	r2, [r7, #6]
 800c528:	2300      	movs	r3, #0
 800c52a:	9303      	str	r3, [sp, #12]
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	9302      	str	r3, [sp, #8]
 800c530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 f80e 	bl	800c55e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c542:	69f8      	ldr	r0, [r7, #28]
 800c544:	f000 f894 	bl	800c670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c548:	2301      	movs	r3, #1
 800c54a:	61bb      	str	r3, [r7, #24]
 800c54c:	e002      	b.n	800c554 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
 800c552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c554:	69bb      	ldr	r3, [r7, #24]
	}
 800c556:	4618      	mov	r0, r3
 800c558:	3720      	adds	r7, #32
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b088      	sub	sp, #32
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	607a      	str	r2, [r7, #4]
 800c56a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c576:	3b01      	subs	r3, #1
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	f023 0307 	bic.w	r3, r3, #7
 800c584:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	f003 0307 	and.w	r3, r3, #7
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00b      	beq.n	800c5a8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	617b      	str	r3, [r7, #20]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d01f      	beq.n	800c5ee <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61fb      	str	r3, [r7, #28]
 800c5b2:	e012      	b.n	800c5da <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	7819      	ldrb	r1, [r3, #0]
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	3334      	adds	r3, #52	@ 0x34
 800c5c4:	460a      	mov	r2, r1
 800c5c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d006      	beq.n	800c5e2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	61fb      	str	r3, [r7, #28]
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	2b0f      	cmp	r3, #15
 800c5de:	d9e9      	bls.n	800c5b4 <prvInitialiseNewTask+0x56>
 800c5e0:	e000      	b.n	800c5e4 <prvInitialiseNewTask+0x86>
			{
				break;
 800c5e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c5ec:	e003      	b.n	800c5f6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f8:	2b06      	cmp	r3, #6
 800c5fa:	d901      	bls.n	800c600 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5fc:	2306      	movs	r3, #6
 800c5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c604:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c60a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	2200      	movs	r2, #0
 800c610:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	3304      	adds	r3, #4
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe ff65 	bl	800b4e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61e:	3318      	adds	r3, #24
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe ff60 	bl	800b4e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c62a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62e:	f1c3 0207 	rsb	r2, r3, #7
 800c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c634:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c63a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63e:	2200      	movs	r2, #0
 800c640:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	69b8      	ldr	r0, [r7, #24]
 800c650:	f001 fb9a 	bl	800dd88 <pxPortInitialiseStack>
 800c654:	4602      	mov	r2, r0
 800c656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c658:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c666:	bf00      	nop
 800c668:	3720      	adds	r7, #32
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
	...

0800c670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c678:	f001 fcb6 	bl	800dfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c67c:	4b2a      	ldr	r3, [pc, #168]	@ (800c728 <prvAddNewTaskToReadyList+0xb8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3301      	adds	r3, #1
 800c682:	4a29      	ldr	r2, [pc, #164]	@ (800c728 <prvAddNewTaskToReadyList+0xb8>)
 800c684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c686:	4b29      	ldr	r3, [pc, #164]	@ (800c72c <prvAddNewTaskToReadyList+0xbc>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d109      	bne.n	800c6a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c68e:	4a27      	ldr	r2, [pc, #156]	@ (800c72c <prvAddNewTaskToReadyList+0xbc>)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c694:	4b24      	ldr	r3, [pc, #144]	@ (800c728 <prvAddNewTaskToReadyList+0xb8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d110      	bne.n	800c6be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c69c:	f000 fd40 	bl	800d120 <prvInitialiseTaskLists>
 800c6a0:	e00d      	b.n	800c6be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6a2:	4b23      	ldr	r3, [pc, #140]	@ (800c730 <prvAddNewTaskToReadyList+0xc0>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d109      	bne.n	800c6be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6aa:	4b20      	ldr	r3, [pc, #128]	@ (800c72c <prvAddNewTaskToReadyList+0xbc>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d802      	bhi.n	800c6be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6b8:	4a1c      	ldr	r2, [pc, #112]	@ (800c72c <prvAddNewTaskToReadyList+0xbc>)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6be:	4b1d      	ldr	r3, [pc, #116]	@ (800c734 <prvAddNewTaskToReadyList+0xc4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c734 <prvAddNewTaskToReadyList+0xc4>)
 800c6c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	409a      	lsls	r2, r3
 800c6d0:	4b19      	ldr	r3, [pc, #100]	@ (800c738 <prvAddNewTaskToReadyList+0xc8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	4a18      	ldr	r2, [pc, #96]	@ (800c738 <prvAddNewTaskToReadyList+0xc8>)
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4a15      	ldr	r2, [pc, #84]	@ (800c73c <prvAddNewTaskToReadyList+0xcc>)
 800c6e8:	441a      	add	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7fe ff05 	bl	800b500 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6f6:	f001 fca9 	bl	800e04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c730 <prvAddNewTaskToReadyList+0xc0>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00e      	beq.n	800c720 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c702:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <prvAddNewTaskToReadyList+0xbc>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d207      	bcs.n	800c720 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c710:	4b0b      	ldr	r3, [pc, #44]	@ (800c740 <prvAddNewTaskToReadyList+0xd0>)
 800c712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	200015fc 	.word	0x200015fc
 800c72c:	200014fc 	.word	0x200014fc
 800c730:	20001608 	.word	0x20001608
 800c734:	20001618 	.word	0x20001618
 800c738:	20001604 	.word	0x20001604
 800c73c:	20001500 	.word	0x20001500
 800c740:	e000ed04 	.word	0xe000ed04

0800c744 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c74c:	f001 fc4c 	bl	800dfe8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d102      	bne.n	800c75c <vTaskDelete+0x18>
 800c756:	4b39      	ldr	r3, [pc, #228]	@ (800c83c <vTaskDelete+0xf8>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	e000      	b.n	800c75e <vTaskDelete+0x1a>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	3304      	adds	r3, #4
 800c764:	4618      	mov	r0, r3
 800c766:	f7fe ff28 	bl	800b5ba <uxListRemove>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d115      	bne.n	800c79c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c774:	4932      	ldr	r1, [pc, #200]	@ (800c840 <vTaskDelete+0xfc>)
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	440b      	add	r3, r1
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <vTaskDelete+0x58>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78a:	2201      	movs	r2, #1
 800c78c:	fa02 f303 	lsl.w	r3, r2, r3
 800c790:	43da      	mvns	r2, r3
 800c792:	4b2c      	ldr	r3, [pc, #176]	@ (800c844 <vTaskDelete+0x100>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4013      	ands	r3, r2
 800c798:	4a2a      	ldr	r2, [pc, #168]	@ (800c844 <vTaskDelete+0x100>)
 800c79a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d004      	beq.n	800c7ae <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3318      	adds	r3, #24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe ff06 	bl	800b5ba <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c7ae:	4b26      	ldr	r3, [pc, #152]	@ (800c848 <vTaskDelete+0x104>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	4a24      	ldr	r2, [pc, #144]	@ (800c848 <vTaskDelete+0x104>)
 800c7b6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c7b8:	4b20      	ldr	r3, [pc, #128]	@ (800c83c <vTaskDelete+0xf8>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d10b      	bne.n	800c7da <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4820      	ldr	r0, [pc, #128]	@ (800c84c <vTaskDelete+0x108>)
 800c7ca:	f7fe fe99 	bl	800b500 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c7ce:	4b20      	ldr	r3, [pc, #128]	@ (800c850 <vTaskDelete+0x10c>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	4a1e      	ldr	r2, [pc, #120]	@ (800c850 <vTaskDelete+0x10c>)
 800c7d6:	6013      	str	r3, [r2, #0]
 800c7d8:	e009      	b.n	800c7ee <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c7da:	4b1e      	ldr	r3, [pc, #120]	@ (800c854 <vTaskDelete+0x110>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	4a1c      	ldr	r2, [pc, #112]	@ (800c854 <vTaskDelete+0x110>)
 800c7e2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 fd09 	bl	800d1fc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c7ea:	f000 fd17 	bl	800d21c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c7ee:	f001 fc2d 	bl	800e04c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c7f2:	4b19      	ldr	r3, [pc, #100]	@ (800c858 <vTaskDelete+0x114>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d01c      	beq.n	800c834 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800c7fa:	4b10      	ldr	r3, [pc, #64]	@ (800c83c <vTaskDelete+0xf8>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	429a      	cmp	r2, r3
 800c802:	d117      	bne.n	800c834 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c804:	4b15      	ldr	r3, [pc, #84]	@ (800c85c <vTaskDelete+0x118>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00b      	beq.n	800c824 <vTaskDelete+0xe0>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	60bb      	str	r3, [r7, #8]
}
 800c81e:	bf00      	nop
 800c820:	bf00      	nop
 800c822:	e7fd      	b.n	800c820 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800c824:	4b0e      	ldr	r3, [pc, #56]	@ (800c860 <vTaskDelete+0x11c>)
 800c826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c834:	bf00      	nop
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	200014fc 	.word	0x200014fc
 800c840:	20001500 	.word	0x20001500
 800c844:	20001604 	.word	0x20001604
 800c848:	20001618 	.word	0x20001618
 800c84c:	200015d0 	.word	0x200015d0
 800c850:	200015e4 	.word	0x200015e4
 800c854:	200015fc 	.word	0x200015fc
 800c858:	20001608 	.word	0x20001608
 800c85c:	20001624 	.word	0x20001624
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d018      	beq.n	800c8a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c876:	4b14      	ldr	r3, [pc, #80]	@ (800c8c8 <vTaskDelay+0x64>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00b      	beq.n	800c896 <vTaskDelay+0x32>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	60bb      	str	r3, [r7, #8]
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	e7fd      	b.n	800c892 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c896:	f000 f869 	bl	800c96c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c89a:	2100      	movs	r1, #0
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 feb5 	bl	800d60c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c8a2:	f000 f871 	bl	800c988 <xTaskResumeAll>
 800c8a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d107      	bne.n	800c8be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c8ae:	4b07      	ldr	r3, [pc, #28]	@ (800c8cc <vTaskDelay+0x68>)
 800c8b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8be:	bf00      	nop
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20001624 	.word	0x20001624
 800c8cc:	e000ed04 	.word	0xe000ed04

0800c8d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c8d6:	4b1f      	ldr	r3, [pc, #124]	@ (800c954 <vTaskStartScheduler+0x84>)
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	2300      	movs	r3, #0
 800c8e0:	2280      	movs	r2, #128	@ 0x80
 800c8e2:	491d      	ldr	r1, [pc, #116]	@ (800c958 <vTaskStartScheduler+0x88>)
 800c8e4:	481d      	ldr	r0, [pc, #116]	@ (800c95c <vTaskStartScheduler+0x8c>)
 800c8e6:	f7ff fdf9 	bl	800c4dc <xTaskCreate>
 800c8ea:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d102      	bne.n	800c8f8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800c8f2:	f000 fef1 	bl	800d6d8 <xTimerCreateTimerTask>
 800c8f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d116      	bne.n	800c92c <vTaskStartScheduler+0x5c>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	60bb      	str	r3, [r7, #8]
}
 800c910:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c912:	4b13      	ldr	r3, [pc, #76]	@ (800c960 <vTaskStartScheduler+0x90>)
 800c914:	f04f 32ff 	mov.w	r2, #4294967295
 800c918:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c91a:	4b12      	ldr	r3, [pc, #72]	@ (800c964 <vTaskStartScheduler+0x94>)
 800c91c:	2201      	movs	r2, #1
 800c91e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c920:	4b11      	ldr	r3, [pc, #68]	@ (800c968 <vTaskStartScheduler+0x98>)
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c926:	f001 fabb 	bl	800dea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c92a:	e00f      	b.n	800c94c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c932:	d10b      	bne.n	800c94c <vTaskStartScheduler+0x7c>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	607b      	str	r3, [r7, #4]
}
 800c946:	bf00      	nop
 800c948:	bf00      	nop
 800c94a:	e7fd      	b.n	800c948 <vTaskStartScheduler+0x78>
}
 800c94c:	bf00      	nop
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	20001620 	.word	0x20001620
 800c958:	0801ed40 	.word	0x0801ed40
 800c95c:	0800d0f1 	.word	0x0800d0f1
 800c960:	2000161c 	.word	0x2000161c
 800c964:	20001608 	.word	0x20001608
 800c968:	20001600 	.word	0x20001600

0800c96c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c96c:	b480      	push	{r7}
 800c96e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c970:	4b04      	ldr	r3, [pc, #16]	@ (800c984 <vTaskSuspendAll+0x18>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3301      	adds	r3, #1
 800c976:	4a03      	ldr	r2, [pc, #12]	@ (800c984 <vTaskSuspendAll+0x18>)
 800c978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c97a:	bf00      	nop
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	20001624 	.word	0x20001624

0800c988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c992:	2300      	movs	r3, #0
 800c994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c996:	4b42      	ldr	r3, [pc, #264]	@ (800caa0 <xTaskResumeAll+0x118>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10b      	bne.n	800c9b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	603b      	str	r3, [r7, #0]
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9b6:	f001 fb17 	bl	800dfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9ba:	4b39      	ldr	r3, [pc, #228]	@ (800caa0 <xTaskResumeAll+0x118>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	4a37      	ldr	r2, [pc, #220]	@ (800caa0 <xTaskResumeAll+0x118>)
 800c9c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9c4:	4b36      	ldr	r3, [pc, #216]	@ (800caa0 <xTaskResumeAll+0x118>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d161      	bne.n	800ca90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9cc:	4b35      	ldr	r3, [pc, #212]	@ (800caa4 <xTaskResumeAll+0x11c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d05d      	beq.n	800ca90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9d4:	e02e      	b.n	800ca34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d6:	4b34      	ldr	r3, [pc, #208]	@ (800caa8 <xTaskResumeAll+0x120>)
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3318      	adds	r3, #24
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fe fde9 	bl	800b5ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe fde4 	bl	800b5ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	409a      	lsls	r2, r3
 800c9fa:	4b2c      	ldr	r3, [pc, #176]	@ (800caac <xTaskResumeAll+0x124>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	4a2a      	ldr	r2, [pc, #168]	@ (800caac <xTaskResumeAll+0x124>)
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca08:	4613      	mov	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	4413      	add	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4a27      	ldr	r2, [pc, #156]	@ (800cab0 <xTaskResumeAll+0x128>)
 800ca12:	441a      	add	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3304      	adds	r3, #4
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	f7fe fd70 	bl	800b500 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca24:	4b23      	ldr	r3, [pc, #140]	@ (800cab4 <xTaskResumeAll+0x12c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d302      	bcc.n	800ca34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca2e:	4b22      	ldr	r3, [pc, #136]	@ (800cab8 <xTaskResumeAll+0x130>)
 800ca30:	2201      	movs	r2, #1
 800ca32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca34:	4b1c      	ldr	r3, [pc, #112]	@ (800caa8 <xTaskResumeAll+0x120>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1cc      	bne.n	800c9d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca42:	f000 fbeb 	bl	800d21c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca46:	4b1d      	ldr	r3, [pc, #116]	@ (800cabc <xTaskResumeAll+0x134>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d010      	beq.n	800ca74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca52:	f000 f859 	bl	800cb08 <xTaskIncrementTick>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca5c:	4b16      	ldr	r3, [pc, #88]	@ (800cab8 <xTaskResumeAll+0x130>)
 800ca5e:	2201      	movs	r2, #1
 800ca60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1f1      	bne.n	800ca52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca6e:	4b13      	ldr	r3, [pc, #76]	@ (800cabc <xTaskResumeAll+0x134>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca74:	4b10      	ldr	r3, [pc, #64]	@ (800cab8 <xTaskResumeAll+0x130>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d009      	beq.n	800ca90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca80:	4b0f      	ldr	r3, [pc, #60]	@ (800cac0 <xTaskResumeAll+0x138>)
 800ca82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca90:	f001 fadc 	bl	800e04c <vPortExitCritical>

	return xAlreadyYielded;
 800ca94:	68bb      	ldr	r3, [r7, #8]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20001624 	.word	0x20001624
 800caa4:	200015fc 	.word	0x200015fc
 800caa8:	200015bc 	.word	0x200015bc
 800caac:	20001604 	.word	0x20001604
 800cab0:	20001500 	.word	0x20001500
 800cab4:	200014fc 	.word	0x200014fc
 800cab8:	20001610 	.word	0x20001610
 800cabc:	2000160c 	.word	0x2000160c
 800cac0:	e000ed04 	.word	0xe000ed04

0800cac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800caca:	4b05      	ldr	r3, [pc, #20]	@ (800cae0 <xTaskGetTickCount+0x1c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cad0:	687b      	ldr	r3, [r7, #4]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	20001600 	.word	0x20001600

0800cae4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800caea:	f001 fb5d 	bl	800e1a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800caee:	2300      	movs	r3, #0
 800caf0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800caf2:	4b04      	ldr	r3, [pc, #16]	@ (800cb04 <xTaskGetTickCountFromISR+0x20>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800caf8:	683b      	ldr	r3, [r7, #0]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20001600 	.word	0x20001600

0800cb08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb12:	4b4f      	ldr	r3, [pc, #316]	@ (800cc50 <xTaskIncrementTick+0x148>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f040 808f 	bne.w	800cc3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb1c:	4b4d      	ldr	r3, [pc, #308]	@ (800cc54 <xTaskIncrementTick+0x14c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3301      	adds	r3, #1
 800cb22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb24:	4a4b      	ldr	r2, [pc, #300]	@ (800cc54 <xTaskIncrementTick+0x14c>)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d121      	bne.n	800cb74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb30:	4b49      	ldr	r3, [pc, #292]	@ (800cc58 <xTaskIncrementTick+0x150>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00b      	beq.n	800cb52 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	603b      	str	r3, [r7, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <xTaskIncrementTick+0x46>
 800cb52:	4b41      	ldr	r3, [pc, #260]	@ (800cc58 <xTaskIncrementTick+0x150>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	4b40      	ldr	r3, [pc, #256]	@ (800cc5c <xTaskIncrementTick+0x154>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a3e      	ldr	r2, [pc, #248]	@ (800cc58 <xTaskIncrementTick+0x150>)
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	4a3e      	ldr	r2, [pc, #248]	@ (800cc5c <xTaskIncrementTick+0x154>)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	4b3e      	ldr	r3, [pc, #248]	@ (800cc60 <xTaskIncrementTick+0x158>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	4a3c      	ldr	r2, [pc, #240]	@ (800cc60 <xTaskIncrementTick+0x158>)
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	f000 fb54 	bl	800d21c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb74:	4b3b      	ldr	r3, [pc, #236]	@ (800cc64 <xTaskIncrementTick+0x15c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d348      	bcc.n	800cc10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb7e:	4b36      	ldr	r3, [pc, #216]	@ (800cc58 <xTaskIncrementTick+0x150>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d104      	bne.n	800cb92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb88:	4b36      	ldr	r3, [pc, #216]	@ (800cc64 <xTaskIncrementTick+0x15c>)
 800cb8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8e:	601a      	str	r2, [r3, #0]
					break;
 800cb90:	e03e      	b.n	800cc10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb92:	4b31      	ldr	r3, [pc, #196]	@ (800cc58 <xTaskIncrementTick+0x150>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cba2:	693a      	ldr	r2, [r7, #16]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d203      	bcs.n	800cbb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbaa:	4a2e      	ldr	r2, [pc, #184]	@ (800cc64 <xTaskIncrementTick+0x15c>)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbb0:	e02e      	b.n	800cc10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe fcff 	bl	800b5ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d004      	beq.n	800cbce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	3318      	adds	r3, #24
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fcf6 	bl	800b5ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	409a      	lsls	r2, r3
 800cbd6:	4b24      	ldr	r3, [pc, #144]	@ (800cc68 <xTaskIncrementTick+0x160>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	4a22      	ldr	r2, [pc, #136]	@ (800cc68 <xTaskIncrementTick+0x160>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4a1f      	ldr	r2, [pc, #124]	@ (800cc6c <xTaskIncrementTick+0x164>)
 800cbee:	441a      	add	r2, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	f7fe fc82 	bl	800b500 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc00:	4b1b      	ldr	r3, [pc, #108]	@ (800cc70 <xTaskIncrementTick+0x168>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d3b9      	bcc.n	800cb7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc0e:	e7b6      	b.n	800cb7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc10:	4b17      	ldr	r3, [pc, #92]	@ (800cc70 <xTaskIncrementTick+0x168>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc16:	4915      	ldr	r1, [pc, #84]	@ (800cc6c <xTaskIncrementTick+0x164>)
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	440b      	add	r3, r1
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d901      	bls.n	800cc2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc2c:	4b11      	ldr	r3, [pc, #68]	@ (800cc74 <xTaskIncrementTick+0x16c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d007      	beq.n	800cc44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc34:	2301      	movs	r3, #1
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e004      	b.n	800cc44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc3a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc78 <xTaskIncrementTick+0x170>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	4a0d      	ldr	r2, [pc, #52]	@ (800cc78 <xTaskIncrementTick+0x170>)
 800cc42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc44:	697b      	ldr	r3, [r7, #20]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20001624 	.word	0x20001624
 800cc54:	20001600 	.word	0x20001600
 800cc58:	200015b4 	.word	0x200015b4
 800cc5c:	200015b8 	.word	0x200015b8
 800cc60:	20001614 	.word	0x20001614
 800cc64:	2000161c 	.word	0x2000161c
 800cc68:	20001604 	.word	0x20001604
 800cc6c:	20001500 	.word	0x20001500
 800cc70:	200014fc 	.word	0x200014fc
 800cc74:	20001610 	.word	0x20001610
 800cc78:	2000160c 	.word	0x2000160c

0800cc7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc82:	4b27      	ldr	r3, [pc, #156]	@ (800cd20 <vTaskSwitchContext+0xa4>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc8a:	4b26      	ldr	r3, [pc, #152]	@ (800cd24 <vTaskSwitchContext+0xa8>)
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc90:	e040      	b.n	800cd14 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800cc92:	4b24      	ldr	r3, [pc, #144]	@ (800cd24 <vTaskSwitchContext+0xa8>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc98:	4b23      	ldr	r3, [pc, #140]	@ (800cd28 <vTaskSwitchContext+0xac>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	fab3 f383 	clz	r3, r3
 800cca4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cca6:	7afb      	ldrb	r3, [r7, #11]
 800cca8:	f1c3 031f 	rsb	r3, r3, #31
 800ccac:	617b      	str	r3, [r7, #20]
 800ccae:	491f      	ldr	r1, [pc, #124]	@ (800cd2c <vTaskSwitchContext+0xb0>)
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	440b      	add	r3, r1
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <vTaskSwitchContext+0x5e>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	607b      	str	r3, [r7, #4]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <vTaskSwitchContext+0x5a>
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4a11      	ldr	r2, [pc, #68]	@ (800cd2c <vTaskSwitchContext+0xb0>)
 800cce6:	4413      	add	r3, r2
 800cce8:	613b      	str	r3, [r7, #16]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	605a      	str	r2, [r3, #4]
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d104      	bne.n	800cd0a <vTaskSwitchContext+0x8e>
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	605a      	str	r2, [r3, #4]
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	4a07      	ldr	r2, [pc, #28]	@ (800cd30 <vTaskSwitchContext+0xb4>)
 800cd12:	6013      	str	r3, [r2, #0]
}
 800cd14:	bf00      	nop
 800cd16:	371c      	adds	r7, #28
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	20001624 	.word	0x20001624
 800cd24:	20001610 	.word	0x20001610
 800cd28:	20001604 	.word	0x20001604
 800cd2c:	20001500 	.word	0x20001500
 800cd30:	200014fc 	.word	0x200014fc

0800cd34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10b      	bne.n	800cd5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	60fb      	str	r3, [r7, #12]
}
 800cd56:	bf00      	nop
 800cd58:	bf00      	nop
 800cd5a:	e7fd      	b.n	800cd58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd5c:	4b07      	ldr	r3, [pc, #28]	@ (800cd7c <vTaskPlaceOnEventList+0x48>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	3318      	adds	r3, #24
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7fe fbef 	bl	800b548 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	6838      	ldr	r0, [r7, #0]
 800cd6e:	f000 fc4d 	bl	800d60c <prvAddCurrentTaskToDelayedList>
}
 800cd72:	bf00      	nop
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	200014fc 	.word	0x200014fc

0800cd80 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10b      	bne.n	800cdaa <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	617b      	str	r3, [r7, #20]
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	e7fd      	b.n	800cda6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	@ (800cdf4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10b      	bne.n	800cdca <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	613b      	str	r3, [r7, #16]
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop
 800cdc8:	e7fd      	b.n	800cdc6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800cdca:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cdd4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdd6:	4b08      	ldr	r3, [pc, #32]	@ (800cdf8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3318      	adds	r3, #24
 800cddc:	4619      	mov	r1, r3
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f7fe fb8e 	bl	800b500 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cde4:	2101      	movs	r1, #1
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fc10 	bl	800d60c <prvAddCurrentTaskToDelayedList>
}
 800cdec:	bf00      	nop
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	20001624 	.word	0x20001624
 800cdf8:	200014fc 	.word	0x200014fc

0800cdfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10b      	bne.n	800ce26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	617b      	str	r3, [r7, #20]
}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	e7fd      	b.n	800ce22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce26:	4b0a      	ldr	r3, [pc, #40]	@ (800ce50 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3318      	adds	r3, #24
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7fe fb66 	bl	800b500 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d002      	beq.n	800ce40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ce3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	68b8      	ldr	r0, [r7, #8]
 800ce44:	f000 fbe2 	bl	800d60c <prvAddCurrentTaskToDelayedList>
	}
 800ce48:	bf00      	nop
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	200014fc 	.word	0x200014fc

0800ce54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10b      	bne.n	800ce82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60fb      	str	r3, [r7, #12]
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	e7fd      	b.n	800ce7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	3318      	adds	r3, #24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe fb97 	bl	800b5ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce8c:	4b1d      	ldr	r3, [pc, #116]	@ (800cf04 <xTaskRemoveFromEventList+0xb0>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11c      	bne.n	800cece <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	3304      	adds	r3, #4
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fb8e 	bl	800b5ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea2:	2201      	movs	r2, #1
 800cea4:	409a      	lsls	r2, r3
 800cea6:	4b18      	ldr	r3, [pc, #96]	@ (800cf08 <xTaskRemoveFromEventList+0xb4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	4a16      	ldr	r2, [pc, #88]	@ (800cf08 <xTaskRemoveFromEventList+0xb4>)
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4a13      	ldr	r2, [pc, #76]	@ (800cf0c <xTaskRemoveFromEventList+0xb8>)
 800cebe:	441a      	add	r2, r3
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f7fe fb1a 	bl	800b500 <vListInsertEnd>
 800cecc:	e005      	b.n	800ceda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3318      	adds	r3, #24
 800ced2:	4619      	mov	r1, r3
 800ced4:	480e      	ldr	r0, [pc, #56]	@ (800cf10 <xTaskRemoveFromEventList+0xbc>)
 800ced6:	f7fe fb13 	bl	800b500 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cede:	4b0d      	ldr	r3, [pc, #52]	@ (800cf14 <xTaskRemoveFromEventList+0xc0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d905      	bls.n	800cef4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cee8:	2301      	movs	r3, #1
 800ceea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ceec:	4b0a      	ldr	r3, [pc, #40]	@ (800cf18 <xTaskRemoveFromEventList+0xc4>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e001      	b.n	800cef8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20001624 	.word	0x20001624
 800cf08:	20001604 	.word	0x20001604
 800cf0c:	20001500 	.word	0x20001500
 800cf10:	200015bc 	.word	0x200015bc
 800cf14:	200014fc 	.word	0x200014fc
 800cf18:	20001610 	.word	0x20001610

0800cf1c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800cf26:	4b2a      	ldr	r3, [pc, #168]	@ (800cfd0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10b      	bne.n	800cf46 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	613b      	str	r3, [r7, #16]
}
 800cf40:	bf00      	nop
 800cf42:	bf00      	nop
 800cf44:	e7fd      	b.n	800cf42 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10b      	bne.n	800cf74 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf60:	f383 8811 	msr	BASEPRI, r3
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	60fb      	str	r3, [r7, #12]
}
 800cf6e:	bf00      	nop
 800cf70:	bf00      	nop
 800cf72:	e7fd      	b.n	800cf70 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7fe fb20 	bl	800b5ba <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe fb1b 	bl	800b5ba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf88:	2201      	movs	r2, #1
 800cf8a:	409a      	lsls	r2, r3
 800cf8c:	4b11      	ldr	r3, [pc, #68]	@ (800cfd4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	4a10      	ldr	r2, [pc, #64]	@ (800cfd4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800cf94:	6013      	str	r3, [r2, #0]
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4a0d      	ldr	r2, [pc, #52]	@ (800cfd8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800cfa4:	441a      	add	r2, r3
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	4619      	mov	r1, r3
 800cfac:	4610      	mov	r0, r2
 800cfae:	f7fe faa7 	bl	800b500 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb6:	4b09      	ldr	r3, [pc, #36]	@ (800cfdc <vTaskRemoveFromUnorderedEventList+0xc0>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d902      	bls.n	800cfc6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800cfc0:	4b07      	ldr	r3, [pc, #28]	@ (800cfe0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	601a      	str	r2, [r3, #0]
	}
}
 800cfc6:	bf00      	nop
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20001624 	.word	0x20001624
 800cfd4:	20001604 	.word	0x20001604
 800cfd8:	20001500 	.word	0x20001500
 800cfdc:	200014fc 	.word	0x200014fc
 800cfe0:	20001610 	.word	0x20001610

0800cfe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfec:	4b06      	ldr	r3, [pc, #24]	@ (800d008 <vTaskInternalSetTimeOutState+0x24>)
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cff4:	4b05      	ldr	r3, [pc, #20]	@ (800d00c <vTaskInternalSetTimeOutState+0x28>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	605a      	str	r2, [r3, #4]
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	20001614 	.word	0x20001614
 800d00c:	20001600 	.word	0x20001600

0800d010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10b      	bne.n	800d038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	613b      	str	r3, [r7, #16]
}
 800d032:	bf00      	nop
 800d034:	bf00      	nop
 800d036:	e7fd      	b.n	800d034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10b      	bne.n	800d056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	60fb      	str	r3, [r7, #12]
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	e7fd      	b.n	800d052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d056:	f000 ffc7 	bl	800dfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d05a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d0 <xTaskCheckForTimeOut+0xc0>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	69ba      	ldr	r2, [r7, #24]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d102      	bne.n	800d07a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d074:	2300      	movs	r3, #0
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	e023      	b.n	800d0c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	4b15      	ldr	r3, [pc, #84]	@ (800d0d4 <xTaskCheckForTimeOut+0xc4>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d007      	beq.n	800d096 <xTaskCheckForTimeOut+0x86>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	69ba      	ldr	r2, [r7, #24]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d302      	bcc.n	800d096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d090:	2301      	movs	r3, #1
 800d092:	61fb      	str	r3, [r7, #28]
 800d094:	e015      	b.n	800d0c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	697a      	ldr	r2, [r7, #20]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d20b      	bcs.n	800d0b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	1ad2      	subs	r2, r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff ff99 	bl	800cfe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	61fb      	str	r3, [r7, #28]
 800d0b6:	e004      	b.n	800d0c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0c2:	f000 ffc3 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800d0c6:	69fb      	ldr	r3, [r7, #28]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3720      	adds	r7, #32
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20001600 	.word	0x20001600
 800d0d4:	20001614 	.word	0x20001614

0800d0d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0dc:	4b03      	ldr	r3, [pc, #12]	@ (800d0ec <vTaskMissedYield+0x14>)
 800d0de:	2201      	movs	r2, #1
 800d0e0:	601a      	str	r2, [r3, #0]
}
 800d0e2:	bf00      	nop
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	20001610 	.word	0x20001610

0800d0f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0f8:	f000 f852 	bl	800d1a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0fc:	4b06      	ldr	r3, [pc, #24]	@ (800d118 <prvIdleTask+0x28>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b01      	cmp	r3, #1
 800d102:	d9f9      	bls.n	800d0f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d104:	4b05      	ldr	r3, [pc, #20]	@ (800d11c <prvIdleTask+0x2c>)
 800d106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d114:	e7f0      	b.n	800d0f8 <prvIdleTask+0x8>
 800d116:	bf00      	nop
 800d118:	20001500 	.word	0x20001500
 800d11c:	e000ed04 	.word	0xe000ed04

0800d120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d126:	2300      	movs	r3, #0
 800d128:	607b      	str	r3, [r7, #4]
 800d12a:	e00c      	b.n	800d146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4a12      	ldr	r2, [pc, #72]	@ (800d180 <prvInitialiseTaskLists+0x60>)
 800d138:	4413      	add	r3, r2
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fe f9b3 	bl	800b4a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3301      	adds	r3, #1
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b06      	cmp	r3, #6
 800d14a:	d9ef      	bls.n	800d12c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d14c:	480d      	ldr	r0, [pc, #52]	@ (800d184 <prvInitialiseTaskLists+0x64>)
 800d14e:	f7fe f9aa 	bl	800b4a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d152:	480d      	ldr	r0, [pc, #52]	@ (800d188 <prvInitialiseTaskLists+0x68>)
 800d154:	f7fe f9a7 	bl	800b4a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d158:	480c      	ldr	r0, [pc, #48]	@ (800d18c <prvInitialiseTaskLists+0x6c>)
 800d15a:	f7fe f9a4 	bl	800b4a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d15e:	480c      	ldr	r0, [pc, #48]	@ (800d190 <prvInitialiseTaskLists+0x70>)
 800d160:	f7fe f9a1 	bl	800b4a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d164:	480b      	ldr	r0, [pc, #44]	@ (800d194 <prvInitialiseTaskLists+0x74>)
 800d166:	f7fe f99e 	bl	800b4a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d16a:	4b0b      	ldr	r3, [pc, #44]	@ (800d198 <prvInitialiseTaskLists+0x78>)
 800d16c:	4a05      	ldr	r2, [pc, #20]	@ (800d184 <prvInitialiseTaskLists+0x64>)
 800d16e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d170:	4b0a      	ldr	r3, [pc, #40]	@ (800d19c <prvInitialiseTaskLists+0x7c>)
 800d172:	4a05      	ldr	r2, [pc, #20]	@ (800d188 <prvInitialiseTaskLists+0x68>)
 800d174:	601a      	str	r2, [r3, #0]
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20001500 	.word	0x20001500
 800d184:	2000158c 	.word	0x2000158c
 800d188:	200015a0 	.word	0x200015a0
 800d18c:	200015bc 	.word	0x200015bc
 800d190:	200015d0 	.word	0x200015d0
 800d194:	200015e8 	.word	0x200015e8
 800d198:	200015b4 	.word	0x200015b4
 800d19c:	200015b8 	.word	0x200015b8

0800d1a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1a6:	e019      	b.n	800d1dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1a8:	f000 ff1e 	bl	800dfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ac:	4b10      	ldr	r3, [pc, #64]	@ (800d1f0 <prvCheckTasksWaitingTermination+0x50>)
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fe f9fe 	bl	800b5ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1be:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f4 <prvCheckTasksWaitingTermination+0x54>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	4a0b      	ldr	r2, [pc, #44]	@ (800d1f4 <prvCheckTasksWaitingTermination+0x54>)
 800d1c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f8 <prvCheckTasksWaitingTermination+0x58>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d1f8 <prvCheckTasksWaitingTermination+0x58>)
 800d1d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1d2:	f000 ff3b 	bl	800e04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f810 	bl	800d1fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1dc:	4b06      	ldr	r3, [pc, #24]	@ (800d1f8 <prvCheckTasksWaitingTermination+0x58>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1e1      	bne.n	800d1a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1e4:	bf00      	nop
 800d1e6:	bf00      	nop
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	200015d0 	.word	0x200015d0
 800d1f4:	200015fc 	.word	0x200015fc
 800d1f8:	200015e4 	.word	0x200015e4

0800d1fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d208:	4618      	mov	r0, r3
 800d20a:	f001 f8dd 	bl	800e3c8 <vPortFree>
			vPortFree( pxTCB );
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 f8da 	bl	800e3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d222:	4b0c      	ldr	r3, [pc, #48]	@ (800d254 <prvResetNextTaskUnblockTime+0x38>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d104      	bne.n	800d236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d22c:	4b0a      	ldr	r3, [pc, #40]	@ (800d258 <prvResetNextTaskUnblockTime+0x3c>)
 800d22e:	f04f 32ff 	mov.w	r2, #4294967295
 800d232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d234:	e008      	b.n	800d248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d236:	4b07      	ldr	r3, [pc, #28]	@ (800d254 <prvResetNextTaskUnblockTime+0x38>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	4a04      	ldr	r2, [pc, #16]	@ (800d258 <prvResetNextTaskUnblockTime+0x3c>)
 800d246:	6013      	str	r3, [r2, #0]
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	200015b4 	.word	0x200015b4
 800d258:	2000161c 	.word	0x2000161c

0800d25c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d262:	4b0b      	ldr	r3, [pc, #44]	@ (800d290 <xTaskGetSchedulerState+0x34>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d26a:	2301      	movs	r3, #1
 800d26c:	607b      	str	r3, [r7, #4]
 800d26e:	e008      	b.n	800d282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d270:	4b08      	ldr	r3, [pc, #32]	@ (800d294 <xTaskGetSchedulerState+0x38>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d102      	bne.n	800d27e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d278:	2302      	movs	r3, #2
 800d27a:	607b      	str	r3, [r7, #4]
 800d27c:	e001      	b.n	800d282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d27e:	2300      	movs	r3, #0
 800d280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d282:	687b      	ldr	r3, [r7, #4]
	}
 800d284:	4618      	mov	r0, r3
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20001608 	.word	0x20001608
 800d294:	20001624 	.word	0x20001624

0800d298 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d05e      	beq.n	800d36c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2b2:	4b31      	ldr	r3, [pc, #196]	@ (800d378 <xTaskPriorityInherit+0xe0>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d24e      	bcs.n	800d35a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	db06      	blt.n	800d2d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2c4:	4b2c      	ldr	r3, [pc, #176]	@ (800d378 <xTaskPriorityInherit+0xe0>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ca:	f1c3 0207 	rsb	r2, r3, #7
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	6959      	ldr	r1, [r3, #20]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4a26      	ldr	r2, [pc, #152]	@ (800d37c <xTaskPriorityInherit+0xe4>)
 800d2e4:	4413      	add	r3, r2
 800d2e6:	4299      	cmp	r1, r3
 800d2e8:	d12f      	bne.n	800d34a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe f963 	bl	800b5ba <uxListRemove>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fe:	2201      	movs	r2, #1
 800d300:	fa02 f303 	lsl.w	r3, r2, r3
 800d304:	43da      	mvns	r2, r3
 800d306:	4b1e      	ldr	r3, [pc, #120]	@ (800d380 <xTaskPriorityInherit+0xe8>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4013      	ands	r3, r2
 800d30c:	4a1c      	ldr	r2, [pc, #112]	@ (800d380 <xTaskPriorityInherit+0xe8>)
 800d30e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d310:	4b19      	ldr	r3, [pc, #100]	@ (800d378 <xTaskPriorityInherit+0xe0>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d31e:	2201      	movs	r2, #1
 800d320:	409a      	lsls	r2, r3
 800d322:	4b17      	ldr	r3, [pc, #92]	@ (800d380 <xTaskPriorityInherit+0xe8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4313      	orrs	r3, r2
 800d328:	4a15      	ldr	r2, [pc, #84]	@ (800d380 <xTaskPriorityInherit+0xe8>)
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4a10      	ldr	r2, [pc, #64]	@ (800d37c <xTaskPriorityInherit+0xe4>)
 800d33a:	441a      	add	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	3304      	adds	r3, #4
 800d340:	4619      	mov	r1, r3
 800d342:	4610      	mov	r0, r2
 800d344:	f7fe f8dc 	bl	800b500 <vListInsertEnd>
 800d348:	e004      	b.n	800d354 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d34a:	4b0b      	ldr	r3, [pc, #44]	@ (800d378 <xTaskPriorityInherit+0xe0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d354:	2301      	movs	r3, #1
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	e008      	b.n	800d36c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d35e:	4b06      	ldr	r3, [pc, #24]	@ (800d378 <xTaskPriorityInherit+0xe0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d364:	429a      	cmp	r2, r3
 800d366:	d201      	bcs.n	800d36c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d368:	2301      	movs	r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d36c:	68fb      	ldr	r3, [r7, #12]
	}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	200014fc 	.word	0x200014fc
 800d37c:	20001500 	.word	0x20001500
 800d380:	20001604 	.word	0x20001604

0800d384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d390:	2300      	movs	r3, #0
 800d392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d070      	beq.n	800d47c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d39a:	4b3b      	ldr	r3, [pc, #236]	@ (800d488 <xTaskPriorityDisinherit+0x104>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d00b      	beq.n	800d3bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	60fb      	str	r3, [r7, #12]
}
 800d3b6:	bf00      	nop
 800d3b8:	bf00      	nop
 800d3ba:	e7fd      	b.n	800d3b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10b      	bne.n	800d3dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c8:	f383 8811 	msr	BASEPRI, r3
 800d3cc:	f3bf 8f6f 	isb	sy
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	60bb      	str	r3, [r7, #8]
}
 800d3d6:	bf00      	nop
 800d3d8:	bf00      	nop
 800d3da:	e7fd      	b.n	800d3d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3e0:	1e5a      	subs	r2, r3, #1
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d044      	beq.n	800d47c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d140      	bne.n	800d47c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe f8db 	bl	800b5ba <uxListRemove>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d115      	bne.n	800d436 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d40e:	491f      	ldr	r1, [pc, #124]	@ (800d48c <xTaskPriorityDisinherit+0x108>)
 800d410:	4613      	mov	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	440b      	add	r3, r1
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10a      	bne.n	800d436 <xTaskPriorityDisinherit+0xb2>
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d424:	2201      	movs	r2, #1
 800d426:	fa02 f303 	lsl.w	r3, r2, r3
 800d42a:	43da      	mvns	r2, r3
 800d42c:	4b18      	ldr	r3, [pc, #96]	@ (800d490 <xTaskPriorityDisinherit+0x10c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4013      	ands	r3, r2
 800d432:	4a17      	ldr	r2, [pc, #92]	@ (800d490 <xTaskPriorityDisinherit+0x10c>)
 800d434:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d442:	f1c3 0207 	rsb	r2, r3, #7
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d44e:	2201      	movs	r2, #1
 800d450:	409a      	lsls	r2, r3
 800d452:	4b0f      	ldr	r3, [pc, #60]	@ (800d490 <xTaskPriorityDisinherit+0x10c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4313      	orrs	r3, r2
 800d458:	4a0d      	ldr	r2, [pc, #52]	@ (800d490 <xTaskPriorityDisinherit+0x10c>)
 800d45a:	6013      	str	r3, [r2, #0]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d460:	4613      	mov	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	4a08      	ldr	r2, [pc, #32]	@ (800d48c <xTaskPriorityDisinherit+0x108>)
 800d46a:	441a      	add	r2, r3
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	3304      	adds	r3, #4
 800d470:	4619      	mov	r1, r3
 800d472:	4610      	mov	r0, r2
 800d474:	f7fe f844 	bl	800b500 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d478:	2301      	movs	r3, #1
 800d47a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d47c:	697b      	ldr	r3, [r7, #20]
	}
 800d47e:	4618      	mov	r0, r3
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	200014fc 	.word	0x200014fc
 800d48c:	20001500 	.word	0x20001500
 800d490:	20001604 	.word	0x20001604

0800d494 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d079      	beq.n	800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10b      	bne.n	800d4cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	60fb      	str	r3, [r7, #12]
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	e7fd      	b.n	800d4c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d902      	bls.n	800d4dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	61fb      	str	r3, [r7, #28]
 800d4da:	e002      	b.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e6:	69fa      	ldr	r2, [r7, #28]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d059      	beq.n	800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d154      	bne.n	800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d5a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d10b      	bne.n	800d518 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	60bb      	str	r3, [r7, #8]
}
 800d512:	bf00      	nop
 800d514:	bf00      	nop
 800d516:	e7fd      	b.n	800d514 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	db04      	blt.n	800d536 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f1c3 0207 	rsb	r2, r3, #7
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	6959      	ldr	r1, [r3, #20]
 800d53a:	693a      	ldr	r2, [r7, #16]
 800d53c:	4613      	mov	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4a19      	ldr	r2, [pc, #100]	@ (800d5ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d546:	4413      	add	r3, r2
 800d548:	4299      	cmp	r1, r3
 800d54a:	d129      	bne.n	800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	3304      	adds	r3, #4
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe f832 	bl	800b5ba <uxListRemove>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10a      	bne.n	800d572 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d560:	2201      	movs	r2, #1
 800d562:	fa02 f303 	lsl.w	r3, r2, r3
 800d566:	43da      	mvns	r2, r3
 800d568:	4b11      	ldr	r3, [pc, #68]	@ (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4013      	ands	r3, r2
 800d56e:	4a10      	ldr	r2, [pc, #64]	@ (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d570:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d576:	2201      	movs	r2, #1
 800d578:	409a      	lsls	r2, r3
 800d57a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4313      	orrs	r3, r2
 800d580:	4a0b      	ldr	r2, [pc, #44]	@ (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d588:	4613      	mov	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4a06      	ldr	r2, [pc, #24]	@ (800d5ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d592:	441a      	add	r2, r3
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	3304      	adds	r3, #4
 800d598:	4619      	mov	r1, r3
 800d59a:	4610      	mov	r0, r2
 800d59c:	f7fd ffb0 	bl	800b500 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5a0:	bf00      	nop
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	200014fc 	.word	0x200014fc
 800d5ac:	20001500 	.word	0x20001500
 800d5b0:	20001604 	.word	0x20001604

0800d5b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800d5ba:	4b09      	ldr	r3, [pc, #36]	@ (800d5e0 <uxTaskResetEventItemValue+0x2c>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	699b      	ldr	r3, [r3, #24]
 800d5c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c2:	4b07      	ldr	r3, [pc, #28]	@ (800d5e0 <uxTaskResetEventItemValue+0x2c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5c8:	4b05      	ldr	r3, [pc, #20]	@ (800d5e0 <uxTaskResetEventItemValue+0x2c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f1c2 0207 	rsb	r2, r2, #7
 800d5d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800d5d2:	687b      	ldr	r3, [r7, #4]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	200014fc 	.word	0x200014fc

0800d5e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5e4:	b480      	push	{r7}
 800d5e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5e8:	4b07      	ldr	r3, [pc, #28]	@ (800d608 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5f0:	4b05      	ldr	r3, [pc, #20]	@ (800d608 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5f6:	3201      	adds	r2, #1
 800d5f8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d5fa:	4b03      	ldr	r3, [pc, #12]	@ (800d608 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
	}
 800d5fe:	4618      	mov	r0, r3
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	200014fc 	.word	0x200014fc

0800d60c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d616:	4b29      	ldr	r3, [pc, #164]	@ (800d6bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d61c:	4b28      	ldr	r3, [pc, #160]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3304      	adds	r3, #4
 800d622:	4618      	mov	r0, r3
 800d624:	f7fd ffc9 	bl	800b5ba <uxListRemove>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10b      	bne.n	800d646 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d62e:	4b24      	ldr	r3, [pc, #144]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d634:	2201      	movs	r2, #1
 800d636:	fa02 f303 	lsl.w	r3, r2, r3
 800d63a:	43da      	mvns	r2, r3
 800d63c:	4b21      	ldr	r3, [pc, #132]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4013      	ands	r3, r2
 800d642:	4a20      	ldr	r2, [pc, #128]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d644:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64c:	d10a      	bne.n	800d664 <prvAddCurrentTaskToDelayedList+0x58>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d007      	beq.n	800d664 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d654:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3304      	adds	r3, #4
 800d65a:	4619      	mov	r1, r3
 800d65c:	481a      	ldr	r0, [pc, #104]	@ (800d6c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d65e:	f7fd ff4f 	bl	800b500 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d662:	e026      	b.n	800d6b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4413      	add	r3, r2
 800d66a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d66c:	4b14      	ldr	r3, [pc, #80]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d209      	bcs.n	800d690 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d67c:	4b13      	ldr	r3, [pc, #76]	@ (800d6cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3304      	adds	r3, #4
 800d686:	4619      	mov	r1, r3
 800d688:	4610      	mov	r0, r2
 800d68a:	f7fd ff5d 	bl	800b548 <vListInsert>
}
 800d68e:	e010      	b.n	800d6b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d690:	4b0f      	ldr	r3, [pc, #60]	@ (800d6d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3304      	adds	r3, #4
 800d69a:	4619      	mov	r1, r3
 800d69c:	4610      	mov	r0, r2
 800d69e:	f7fd ff53 	bl	800b548 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d202      	bcs.n	800d6b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d6ac:	4a09      	ldr	r2, [pc, #36]	@ (800d6d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	6013      	str	r3, [r2, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20001600 	.word	0x20001600
 800d6c0:	200014fc 	.word	0x200014fc
 800d6c4:	20001604 	.word	0x20001604
 800d6c8:	200015e8 	.word	0x200015e8
 800d6cc:	200015b8 	.word	0x200015b8
 800d6d0:	200015b4 	.word	0x200015b4
 800d6d4:	2000161c 	.word	0x2000161c

0800d6d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6e2:	f000 fafb 	bl	800dcdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6e6:	4b11      	ldr	r3, [pc, #68]	@ (800d72c <xTimerCreateTimerTask+0x54>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00a      	beq.n	800d704 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800d6ee:	4b10      	ldr	r3, [pc, #64]	@ (800d730 <xTimerCreateTimerTask+0x58>)
 800d6f0:	9301      	str	r3, [sp, #4]
 800d6f2:	2306      	movs	r3, #6
 800d6f4:	9300      	str	r3, [sp, #0]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2280      	movs	r2, #128	@ 0x80
 800d6fa:	490e      	ldr	r1, [pc, #56]	@ (800d734 <xTimerCreateTimerTask+0x5c>)
 800d6fc:	480e      	ldr	r0, [pc, #56]	@ (800d738 <xTimerCreateTimerTask+0x60>)
 800d6fe:	f7fe feed 	bl	800c4dc <xTaskCreate>
 800d702:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	603b      	str	r3, [r7, #0]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800d722:	687b      	ldr	r3, [r7, #4]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20001658 	.word	0x20001658
 800d730:	2000165c 	.word	0x2000165c
 800d734:	0801ed48 	.word	0x0801ed48
 800d738:	0800d875 	.word	0x0800d875

0800d73c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	@ 0x28
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10b      	bne.n	800d76c <xTimerGenericCommand+0x30>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	623b      	str	r3, [r7, #32]
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	e7fd      	b.n	800d768 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d76c:	4b19      	ldr	r3, [pc, #100]	@ (800d7d4 <xTimerGenericCommand+0x98>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d02a      	beq.n	800d7ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b05      	cmp	r3, #5
 800d784:	dc18      	bgt.n	800d7b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d786:	f7ff fd69 	bl	800d25c <xTaskGetSchedulerState>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d109      	bne.n	800d7a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d790:	4b10      	ldr	r3, [pc, #64]	@ (800d7d4 <xTimerGenericCommand+0x98>)
 800d792:	6818      	ldr	r0, [r3, #0]
 800d794:	f107 0110 	add.w	r1, r7, #16
 800d798:	2300      	movs	r3, #0
 800d79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d79c:	f7fe f82a 	bl	800b7f4 <xQueueGenericSend>
 800d7a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d7a2:	e012      	b.n	800d7ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d4 <xTimerGenericCommand+0x98>)
 800d7a6:	6818      	ldr	r0, [r3, #0]
 800d7a8:	f107 0110 	add.w	r1, r7, #16
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f7fe f820 	bl	800b7f4 <xQueueGenericSend>
 800d7b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d7b6:	e008      	b.n	800d7ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d7b8:	4b06      	ldr	r3, [pc, #24]	@ (800d7d4 <xTimerGenericCommand+0x98>)
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	f107 0110 	add.w	r1, r7, #16
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	f7fe f918 	bl	800b9f8 <xQueueGenericSendFromISR>
 800d7c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3728      	adds	r7, #40	@ 0x28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20001658 	.word	0x20001658

0800d7d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7e2:	4b23      	ldr	r3, [pc, #140]	@ (800d870 <prvProcessExpiredTimer+0x98>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fd fee2 	bl	800b5ba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	d023      	beq.n	800d84c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	699a      	ldr	r2, [r3, #24]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	18d1      	adds	r1, r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	6978      	ldr	r0, [r7, #20]
 800d812:	f000 f8d5 	bl	800d9c0 <prvInsertTimerInActiveList>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d020      	beq.n	800d85e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d81c:	2300      	movs	r3, #0
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	2300      	movs	r3, #0
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	2100      	movs	r1, #0
 800d826:	6978      	ldr	r0, [r7, #20]
 800d828:	f7ff ff88 	bl	800d73c <xTimerGenericCommand>
 800d82c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d114      	bne.n	800d85e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	60fb      	str	r3, [r7, #12]
}
 800d846:	bf00      	nop
 800d848:	bf00      	nop
 800d84a:	e7fd      	b.n	800d848 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d852:	f023 0301 	bic.w	r3, r3, #1
 800d856:	b2da      	uxtb	r2, r3
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	6978      	ldr	r0, [r7, #20]
 800d864:	4798      	blx	r3
}
 800d866:	bf00      	nop
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	20001650 	.word	0x20001650

0800d874 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d87c:	f107 0308 	add.w	r3, r7, #8
 800d880:	4618      	mov	r0, r3
 800d882:	f000 f859 	bl	800d938 <prvGetNextExpireTime>
 800d886:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	4619      	mov	r1, r3
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f000 f805 	bl	800d89c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d892:	f000 f8d7 	bl	800da44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d896:	bf00      	nop
 800d898:	e7f0      	b.n	800d87c <prvTimerTask+0x8>
	...

0800d89c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d8a6:	f7ff f861 	bl	800c96c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8aa:	f107 0308 	add.w	r3, r7, #8
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 f866 	bl	800d980 <prvSampleTimeNow>
 800d8b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d130      	bne.n	800d91e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10a      	bne.n	800d8d8 <prvProcessTimerOrBlockTask+0x3c>
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d806      	bhi.n	800d8d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d8ca:	f7ff f85d 	bl	800c988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d8ce:	68f9      	ldr	r1, [r7, #12]
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff ff81 	bl	800d7d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d8d6:	e024      	b.n	800d922 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d008      	beq.n	800d8f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d8de:	4b13      	ldr	r3, [pc, #76]	@ (800d92c <prvProcessTimerOrBlockTask+0x90>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <prvProcessTimerOrBlockTask+0x50>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e000      	b.n	800d8ee <prvProcessTimerOrBlockTask+0x52>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d930 <prvProcessTimerOrBlockTask+0x94>)
 800d8f2:	6818      	ldr	r0, [r3, #0]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	f7fe fdb9 	bl	800c474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d902:	f7ff f841 	bl	800c988 <xTaskResumeAll>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10a      	bne.n	800d922 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d90c:	4b09      	ldr	r3, [pc, #36]	@ (800d934 <prvProcessTimerOrBlockTask+0x98>)
 800d90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	f3bf 8f6f 	isb	sy
}
 800d91c:	e001      	b.n	800d922 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d91e:	f7ff f833 	bl	800c988 <xTaskResumeAll>
}
 800d922:	bf00      	nop
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	20001654 	.word	0x20001654
 800d930:	20001658 	.word	0x20001658
 800d934:	e000ed04 	.word	0xe000ed04

0800d938 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d940:	4b0e      	ldr	r3, [pc, #56]	@ (800d97c <prvGetNextExpireTime+0x44>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <prvGetNextExpireTime+0x16>
 800d94a:	2201      	movs	r2, #1
 800d94c:	e000      	b.n	800d950 <prvGetNextExpireTime+0x18>
 800d94e:	2200      	movs	r2, #0
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d105      	bne.n	800d968 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d95c:	4b07      	ldr	r3, [pc, #28]	@ (800d97c <prvGetNextExpireTime+0x44>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	60fb      	str	r3, [r7, #12]
 800d966:	e001      	b.n	800d96c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d96c:	68fb      	ldr	r3, [r7, #12]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	20001650 	.word	0x20001650

0800d980 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d988:	f7ff f89c 	bl	800cac4 <xTaskGetTickCount>
 800d98c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d98e:	4b0b      	ldr	r3, [pc, #44]	@ (800d9bc <prvSampleTimeNow+0x3c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	429a      	cmp	r2, r3
 800d996:	d205      	bcs.n	800d9a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d998:	f000 f93a 	bl	800dc10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	e002      	b.n	800d9aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d9aa:	4a04      	ldr	r2, [pc, #16]	@ (800d9bc <prvSampleTimeNow+0x3c>)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	20001660 	.word	0x20001660

0800d9c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d812      	bhi.n	800da0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	1ad2      	subs	r2, r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	699b      	ldr	r3, [r3, #24]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d302      	bcc.n	800d9fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	617b      	str	r3, [r7, #20]
 800d9f8:	e01b      	b.n	800da32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9fa:	4b10      	ldr	r3, [pc, #64]	@ (800da3c <prvInsertTimerInActiveList+0x7c>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3304      	adds	r3, #4
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f7fd fd9f 	bl	800b548 <vListInsert>
 800da0a:	e012      	b.n	800da32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	429a      	cmp	r2, r3
 800da12:	d206      	bcs.n	800da22 <prvInsertTimerInActiveList+0x62>
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d302      	bcc.n	800da22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800da1c:	2301      	movs	r3, #1
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	e007      	b.n	800da32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da22:	4b07      	ldr	r3, [pc, #28]	@ (800da40 <prvInsertTimerInActiveList+0x80>)
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	3304      	adds	r3, #4
 800da2a:	4619      	mov	r1, r3
 800da2c:	4610      	mov	r0, r2
 800da2e:	f7fd fd8b 	bl	800b548 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da32:	697b      	ldr	r3, [r7, #20]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20001654 	.word	0x20001654
 800da40:	20001650 	.word	0x20001650

0800da44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08e      	sub	sp, #56	@ 0x38
 800da48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da4a:	e0ce      	b.n	800dbea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	da19      	bge.n	800da86 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da52:	1d3b      	adds	r3, r7, #4
 800da54:	3304      	adds	r3, #4
 800da56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10b      	bne.n	800da76 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800da5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	61fb      	str	r3, [r7, #28]
}
 800da70:	bf00      	nop
 800da72:	bf00      	nop
 800da74:	e7fd      	b.n	800da72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da7c:	6850      	ldr	r0, [r2, #4]
 800da7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da80:	6892      	ldr	r2, [r2, #8]
 800da82:	4611      	mov	r1, r2
 800da84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f2c0 80ae 	blt.w	800dbea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d004      	beq.n	800daa4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9c:	3304      	adds	r3, #4
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fd fd8b 	bl	800b5ba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800daa4:	463b      	mov	r3, r7
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff ff6a 	bl	800d980 <prvSampleTimeNow>
 800daac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b09      	cmp	r3, #9
 800dab2:	f200 8097 	bhi.w	800dbe4 <prvProcessReceivedCommands+0x1a0>
 800dab6:	a201      	add	r2, pc, #4	@ (adr r2, 800dabc <prvProcessReceivedCommands+0x78>)
 800dab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800dae5 	.word	0x0800dae5
 800dac4:	0800dae5 	.word	0x0800dae5
 800dac8:	0800db5b 	.word	0x0800db5b
 800dacc:	0800db6f 	.word	0x0800db6f
 800dad0:	0800dbbb 	.word	0x0800dbbb
 800dad4:	0800dae5 	.word	0x0800dae5
 800dad8:	0800dae5 	.word	0x0800dae5
 800dadc:	0800db5b 	.word	0x0800db5b
 800dae0:	0800db6f 	.word	0x0800db6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800daea:	f043 0301 	orr.w	r3, r3, #1
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	18d1      	adds	r1, r2, r3
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db04:	f7ff ff5c 	bl	800d9c0 <prvInsertTimerInActiveList>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d06c      	beq.n	800dbe8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db10:	6a1b      	ldr	r3, [r3, #32]
 800db12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800db1c:	f003 0304 	and.w	r3, r3, #4
 800db20:	2b00      	cmp	r3, #0
 800db22:	d061      	beq.n	800dbe8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	699b      	ldr	r3, [r3, #24]
 800db2a:	441a      	add	r2, r3
 800db2c:	2300      	movs	r3, #0
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	2300      	movs	r3, #0
 800db32:	2100      	movs	r1, #0
 800db34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db36:	f7ff fe01 	bl	800d73c <xTimerGenericCommand>
 800db3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d152      	bne.n	800dbe8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	61bb      	str	r3, [r7, #24]
}
 800db54:	bf00      	nop
 800db56:	bf00      	nop
 800db58:	e7fd      	b.n	800db56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800db60:	f023 0301 	bic.w	r3, r3, #1
 800db64:	b2da      	uxtb	r2, r3
 800db66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800db6c:	e03d      	b.n	800dbea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800db74:	f043 0301 	orr.w	r3, r3, #1
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10b      	bne.n	800dba6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	617b      	str	r3, [r7, #20]
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	e7fd      	b.n	800dba2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba8:	699a      	ldr	r2, [r3, #24]
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbac:	18d1      	adds	r1, r2, r3
 800dbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbb4:	f7ff ff04 	bl	800d9c0 <prvInsertTimerInActiveList>
					break;
 800dbb8:	e017      	b.n	800dbea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dbc0:	f003 0302 	and.w	r3, r3, #2
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d103      	bne.n	800dbd0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dbc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbca:	f000 fbfd 	bl	800e3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbce:	e00c      	b.n	800dbea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dbd6:	f023 0301 	bic.w	r3, r3, #1
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800dbe2:	e002      	b.n	800dbea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dbe4:	bf00      	nop
 800dbe6:	e000      	b.n	800dbea <prvProcessReceivedCommands+0x1a6>
					break;
 800dbe8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbea:	4b08      	ldr	r3, [pc, #32]	@ (800dc0c <prvProcessReceivedCommands+0x1c8>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	1d39      	adds	r1, r7, #4
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe f82e 	bl	800bc54 <xQueueReceive>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f47f af26 	bne.w	800da4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dc00:	bf00      	nop
 800dc02:	bf00      	nop
 800dc04:	3730      	adds	r7, #48	@ 0x30
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	20001658 	.word	0x20001658

0800dc10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc16:	e049      	b.n	800dcac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc18:	4b2e      	ldr	r3, [pc, #184]	@ (800dcd4 <prvSwitchTimerLists+0xc4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc22:	4b2c      	ldr	r3, [pc, #176]	@ (800dcd4 <prvSwitchTimerLists+0xc4>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	3304      	adds	r3, #4
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fd fcc2 	bl	800b5ba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc44:	f003 0304 	and.w	r3, r3, #4
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d02f      	beq.n	800dcac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	699b      	ldr	r3, [r3, #24]
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	4413      	add	r3, r2
 800dc54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d90e      	bls.n	800dc7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc6a:	4b1a      	ldr	r3, [pc, #104]	@ (800dcd4 <prvSwitchTimerLists+0xc4>)
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	4610      	mov	r0, r2
 800dc76:	f7fd fc67 	bl	800b548 <vListInsert>
 800dc7a:	e017      	b.n	800dcac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	2300      	movs	r3, #0
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	2100      	movs	r1, #0
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f7ff fd58 	bl	800d73c <xTimerGenericCommand>
 800dc8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10b      	bne.n	800dcac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	603b      	str	r3, [r7, #0]
}
 800dca6:	bf00      	nop
 800dca8:	bf00      	nop
 800dcaa:	e7fd      	b.n	800dca8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcac:	4b09      	ldr	r3, [pc, #36]	@ (800dcd4 <prvSwitchTimerLists+0xc4>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1b0      	bne.n	800dc18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dcb6:	4b07      	ldr	r3, [pc, #28]	@ (800dcd4 <prvSwitchTimerLists+0xc4>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dcbc:	4b06      	ldr	r3, [pc, #24]	@ (800dcd8 <prvSwitchTimerLists+0xc8>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a04      	ldr	r2, [pc, #16]	@ (800dcd4 <prvSwitchTimerLists+0xc4>)
 800dcc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dcc4:	4a04      	ldr	r2, [pc, #16]	@ (800dcd8 <prvSwitchTimerLists+0xc8>)
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	6013      	str	r3, [r2, #0]
}
 800dcca:	bf00      	nop
 800dccc:	3718      	adds	r7, #24
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20001650 	.word	0x20001650
 800dcd8:	20001654 	.word	0x20001654

0800dcdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dce0:	f000 f982 	bl	800dfe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dce4:	4b12      	ldr	r3, [pc, #72]	@ (800dd30 <prvCheckForValidListAndQueue+0x54>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d11d      	bne.n	800dd28 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800dcec:	4811      	ldr	r0, [pc, #68]	@ (800dd34 <prvCheckForValidListAndQueue+0x58>)
 800dcee:	f7fd fbda 	bl	800b4a6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dcf2:	4811      	ldr	r0, [pc, #68]	@ (800dd38 <prvCheckForValidListAndQueue+0x5c>)
 800dcf4:	f7fd fbd7 	bl	800b4a6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcf8:	4b10      	ldr	r3, [pc, #64]	@ (800dd3c <prvCheckForValidListAndQueue+0x60>)
 800dcfa:	4a0e      	ldr	r2, [pc, #56]	@ (800dd34 <prvCheckForValidListAndQueue+0x58>)
 800dcfc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dcfe:	4b10      	ldr	r3, [pc, #64]	@ (800dd40 <prvCheckForValidListAndQueue+0x64>)
 800dd00:	4a0d      	ldr	r2, [pc, #52]	@ (800dd38 <prvCheckForValidListAndQueue+0x5c>)
 800dd02:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800dd04:	2200      	movs	r2, #0
 800dd06:	2110      	movs	r1, #16
 800dd08:	2001      	movs	r0, #1
 800dd0a:	f7fd fceb 	bl	800b6e4 <xQueueGenericCreate>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4a07      	ldr	r2, [pc, #28]	@ (800dd30 <prvCheckForValidListAndQueue+0x54>)
 800dd12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd14:	4b06      	ldr	r3, [pc, #24]	@ (800dd30 <prvCheckForValidListAndQueue+0x54>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d005      	beq.n	800dd28 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd1c:	4b04      	ldr	r3, [pc, #16]	@ (800dd30 <prvCheckForValidListAndQueue+0x54>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4908      	ldr	r1, [pc, #32]	@ (800dd44 <prvCheckForValidListAndQueue+0x68>)
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe fb52 	bl	800c3cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd28:	f000 f990 	bl	800e04c <vPortExitCritical>
}
 800dd2c:	bf00      	nop
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20001658 	.word	0x20001658
 800dd34:	20001628 	.word	0x20001628
 800dd38:	2000163c 	.word	0x2000163c
 800dd3c:	20001650 	.word	0x20001650
 800dd40:	20001654 	.word	0x20001654
 800dd44:	0801ed50 	.word	0x0801ed50

0800dd48 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	@ 0x28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800dd56:	f06f 0301 	mvn.w	r3, #1
 800dd5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd68:	4b06      	ldr	r3, [pc, #24]	@ (800dd84 <xTimerPendFunctionCallFromISR+0x3c>)
 800dd6a:	6818      	ldr	r0, [r3, #0]
 800dd6c:	f107 0114 	add.w	r1, r7, #20
 800dd70:	2300      	movs	r3, #0
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	f7fd fe40 	bl	800b9f8 <xQueueGenericSendFromISR>
 800dd78:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800dd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3728      	adds	r7, #40	@ 0x28
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	20001658 	.word	0x20001658

0800dd88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	3b04      	subs	r3, #4
 800dd98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3b04      	subs	r3, #4
 800dda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	f023 0201 	bic.w	r2, r3, #1
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3b04      	subs	r3, #4
 800ddb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddb8:	4a0c      	ldr	r2, [pc, #48]	@ (800ddec <pxPortInitialiseStack+0x64>)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3b14      	subs	r3, #20
 800ddc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3b04      	subs	r3, #4
 800ddce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f06f 0202 	mvn.w	r2, #2
 800ddd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3b20      	subs	r3, #32
 800dddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ddde:	68fb      	ldr	r3, [r7, #12]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3714      	adds	r7, #20
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	0800ddf1 	.word	0x0800ddf1

0800ddf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddfa:	4b13      	ldr	r3, [pc, #76]	@ (800de48 <prvTaskExitError+0x58>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de02:	d00b      	beq.n	800de1c <prvTaskExitError+0x2c>
	__asm volatile
 800de04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	60fb      	str	r3, [r7, #12]
}
 800de16:	bf00      	nop
 800de18:	bf00      	nop
 800de1a:	e7fd      	b.n	800de18 <prvTaskExitError+0x28>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	60bb      	str	r3, [r7, #8]
}
 800de2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de30:	bf00      	nop
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d0fc      	beq.n	800de32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	3714      	adds	r7, #20
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	200000ac 	.word	0x200000ac
 800de4c:	00000000 	.word	0x00000000

0800de50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de50:	4b07      	ldr	r3, [pc, #28]	@ (800de70 <pxCurrentTCBConst2>)
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	6808      	ldr	r0, [r1, #0]
 800de56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5a:	f380 8809 	msr	PSP, r0
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f04f 0000 	mov.w	r0, #0
 800de66:	f380 8811 	msr	BASEPRI, r0
 800de6a:	4770      	bx	lr
 800de6c:	f3af 8000 	nop.w

0800de70 <pxCurrentTCBConst2>:
 800de70:	200014fc 	.word	0x200014fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop

0800de78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de78:	4808      	ldr	r0, [pc, #32]	@ (800de9c <prvPortStartFirstTask+0x24>)
 800de7a:	6800      	ldr	r0, [r0, #0]
 800de7c:	6800      	ldr	r0, [r0, #0]
 800de7e:	f380 8808 	msr	MSP, r0
 800de82:	f04f 0000 	mov.w	r0, #0
 800de86:	f380 8814 	msr	CONTROL, r0
 800de8a:	b662      	cpsie	i
 800de8c:	b661      	cpsie	f
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	df00      	svc	0
 800de98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de9a:	bf00      	nop
 800de9c:	e000ed08 	.word	0xe000ed08

0800dea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dea6:	4b47      	ldr	r3, [pc, #284]	@ (800dfc4 <xPortStartScheduler+0x124>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a47      	ldr	r2, [pc, #284]	@ (800dfc8 <xPortStartScheduler+0x128>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d10b      	bne.n	800dec8 <xPortStartScheduler+0x28>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	613b      	str	r3, [r7, #16]
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	e7fd      	b.n	800dec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dec8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc4 <xPortStartScheduler+0x124>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a3f      	ldr	r2, [pc, #252]	@ (800dfcc <xPortStartScheduler+0x12c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d10b      	bne.n	800deea <xPortStartScheduler+0x4a>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	60fb      	str	r3, [r7, #12]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800deea:	4b39      	ldr	r3, [pc, #228]	@ (800dfd0 <xPortStartScheduler+0x130>)
 800deec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	b2db      	uxtb	r3, r3
 800def4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	22ff      	movs	r2, #255	@ 0xff
 800defa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	4b31      	ldr	r3, [pc, #196]	@ (800dfd4 <xPortStartScheduler+0x134>)
 800df10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df12:	4b31      	ldr	r3, [pc, #196]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df14:	2207      	movs	r2, #7
 800df16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df18:	e009      	b.n	800df2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800df1a:	4b2f      	ldr	r3, [pc, #188]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3b01      	subs	r3, #1
 800df20:	4a2d      	ldr	r2, [pc, #180]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df24:	78fb      	ldrb	r3, [r7, #3]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df2e:	78fb      	ldrb	r3, [r7, #3]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df36:	2b80      	cmp	r3, #128	@ 0x80
 800df38:	d0ef      	beq.n	800df1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df3a:	4b27      	ldr	r3, [pc, #156]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f1c3 0307 	rsb	r3, r3, #7
 800df42:	2b04      	cmp	r3, #4
 800df44:	d00b      	beq.n	800df5e <xPortStartScheduler+0xbe>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	60bb      	str	r3, [r7, #8]
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	e7fd      	b.n	800df5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df68:	4b1b      	ldr	r3, [pc, #108]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800df70:	4a19      	ldr	r2, [pc, #100]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	b2da      	uxtb	r2, r3
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df7c:	4b17      	ldr	r3, [pc, #92]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a16      	ldr	r2, [pc, #88]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800df86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df88:	4b14      	ldr	r3, [pc, #80]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a13      	ldr	r2, [pc, #76]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800df92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df94:	f000 f8da 	bl	800e14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df98:	4b11      	ldr	r3, [pc, #68]	@ (800dfe0 <xPortStartScheduler+0x140>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df9e:	f000 f8f9 	bl	800e194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfa2:	4b10      	ldr	r3, [pc, #64]	@ (800dfe4 <xPortStartScheduler+0x144>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a0f      	ldr	r2, [pc, #60]	@ (800dfe4 <xPortStartScheduler+0x144>)
 800dfa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dfac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfae:	f7ff ff63 	bl	800de78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfb2:	f7fe fe63 	bl	800cc7c <vTaskSwitchContext>
	prvTaskExitError();
 800dfb6:	f7ff ff1b 	bl	800ddf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	e000ed00 	.word	0xe000ed00
 800dfc8:	410fc271 	.word	0x410fc271
 800dfcc:	410fc270 	.word	0x410fc270
 800dfd0:	e000e400 	.word	0xe000e400
 800dfd4:	20001664 	.word	0x20001664
 800dfd8:	20001668 	.word	0x20001668
 800dfdc:	e000ed20 	.word	0xe000ed20
 800dfe0:	200000ac 	.word	0x200000ac
 800dfe4:	e000ef34 	.word	0xe000ef34

0800dfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	607b      	str	r3, [r7, #4]
}
 800e000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e002:	4b10      	ldr	r3, [pc, #64]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	3301      	adds	r3, #1
 800e008:	4a0e      	ldr	r2, [pc, #56]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e00c:	4b0d      	ldr	r3, [pc, #52]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d110      	bne.n	800e036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e014:	4b0c      	ldr	r3, [pc, #48]	@ (800e048 <vPortEnterCritical+0x60>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00b      	beq.n	800e036 <vPortEnterCritical+0x4e>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	603b      	str	r3, [r7, #0]
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	e7fd      	b.n	800e032 <vPortEnterCritical+0x4a>
	}
}
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	200000ac 	.word	0x200000ac
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e052:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <vPortExitCritical+0x50>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <vPortExitCritical+0x26>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	607b      	str	r3, [r7, #4]
}
 800e06c:	bf00      	nop
 800e06e:	bf00      	nop
 800e070:	e7fd      	b.n	800e06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e072:	4b0a      	ldr	r3, [pc, #40]	@ (800e09c <vPortExitCritical+0x50>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3b01      	subs	r3, #1
 800e078:	4a08      	ldr	r2, [pc, #32]	@ (800e09c <vPortExitCritical+0x50>)
 800e07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e07c:	4b07      	ldr	r3, [pc, #28]	@ (800e09c <vPortExitCritical+0x50>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <vPortExitCritical+0x44>
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
}
 800e08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	200000ac 	.word	0x200000ac

0800e0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0a0:	f3ef 8009 	mrs	r0, PSP
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	4b15      	ldr	r3, [pc, #84]	@ (800e100 <pxCurrentTCBConst>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	f01e 0f10 	tst.w	lr, #16
 800e0b0:	bf08      	it	eq
 800e0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	6010      	str	r0, [r2, #0]
 800e0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e0c4:	f380 8811 	msr	BASEPRI, r0
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f7fe fdd4 	bl	800cc7c <vTaskSwitchContext>
 800e0d4:	f04f 0000 	mov.w	r0, #0
 800e0d8:	f380 8811 	msr	BASEPRI, r0
 800e0dc:	bc09      	pop	{r0, r3}
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	6808      	ldr	r0, [r1, #0]
 800e0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e6:	f01e 0f10 	tst.w	lr, #16
 800e0ea:	bf08      	it	eq
 800e0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0f0:	f380 8809 	msr	PSP, r0
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w

0800e100 <pxCurrentTCBConst>:
 800e100:	200014fc 	.word	0x200014fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
}
 800e120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e122:	f7fe fcf1 	bl	800cb08 <xTaskIncrementTick>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e12c:	4b06      	ldr	r3, [pc, #24]	@ (800e148 <xPortSysTickHandler+0x40>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	2300      	movs	r3, #0
 800e136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f383 8811 	msr	BASEPRI, r3
}
 800e13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	e000ed04 	.word	0xe000ed04

0800e14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e150:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e156:	4b0b      	ldr	r3, [pc, #44]	@ (800e184 <vPortSetupTimerInterrupt+0x38>)
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e15c:	4b0a      	ldr	r3, [pc, #40]	@ (800e188 <vPortSetupTimerInterrupt+0x3c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0a      	ldr	r2, [pc, #40]	@ (800e18c <vPortSetupTimerInterrupt+0x40>)
 800e162:	fba2 2303 	umull	r2, r3, r2, r3
 800e166:	099b      	lsrs	r3, r3, #6
 800e168:	4a09      	ldr	r2, [pc, #36]	@ (800e190 <vPortSetupTimerInterrupt+0x44>)
 800e16a:	3b01      	subs	r3, #1
 800e16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e16e:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e170:	2207      	movs	r2, #7
 800e172:	601a      	str	r2, [r3, #0]
}
 800e174:	bf00      	nop
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	e000e010 	.word	0xe000e010
 800e184:	e000e018 	.word	0xe000e018
 800e188:	200000a0 	.word	0x200000a0
 800e18c:	10624dd3 	.word	0x10624dd3
 800e190:	e000e014 	.word	0xe000e014

0800e194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e1a4 <vPortEnableVFP+0x10>
 800e198:	6801      	ldr	r1, [r0, #0]
 800e19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e19e:	6001      	str	r1, [r0, #0]
 800e1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1a2:	bf00      	nop
 800e1a4:	e000ed88 	.word	0xe000ed88

0800e1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1ae:	f3ef 8305 	mrs	r3, IPSR
 800e1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b0f      	cmp	r3, #15
 800e1b8:	d915      	bls.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1ba:	4a18      	ldr	r2, [pc, #96]	@ (800e21c <vPortValidateInterruptPriority+0x74>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1c4:	4b16      	ldr	r3, [pc, #88]	@ (800e220 <vPortValidateInterruptPriority+0x78>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	7afa      	ldrb	r2, [r7, #11]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d20b      	bcs.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	607b      	str	r3, [r7, #4]
}
 800e1e0:	bf00      	nop
 800e1e2:	bf00      	nop
 800e1e4:	e7fd      	b.n	800e1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e224 <vPortValidateInterruptPriority+0x7c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e228 <vPortValidateInterruptPriority+0x80>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d90b      	bls.n	800e20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	603b      	str	r3, [r7, #0]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <vPortValidateInterruptPriority+0x62>
	}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	e000e3f0 	.word	0xe000e3f0
 800e220:	20001664 	.word	0x20001664
 800e224:	e000ed0c 	.word	0xe000ed0c
 800e228:	20001668 	.word	0x20001668

0800e22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	@ 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e238:	f7fe fb98 	bl	800c96c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e23c:	4b5c      	ldr	r3, [pc, #368]	@ (800e3b0 <pvPortMalloc+0x184>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e244:	f000 f924 	bl	800e490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e248:	4b5a      	ldr	r3, [pc, #360]	@ (800e3b4 <pvPortMalloc+0x188>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4013      	ands	r3, r2
 800e250:	2b00      	cmp	r3, #0
 800e252:	f040 8095 	bne.w	800e380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01e      	beq.n	800e29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e25c:	2208      	movs	r2, #8
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4413      	add	r3, r2
 800e262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d015      	beq.n	800e29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f023 0307 	bic.w	r3, r3, #7
 800e274:	3308      	adds	r3, #8
 800e276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <pvPortMalloc+0x6e>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	617b      	str	r3, [r7, #20]
}
 800e294:	bf00      	nop
 800e296:	bf00      	nop
 800e298:	e7fd      	b.n	800e296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d06f      	beq.n	800e380 <pvPortMalloc+0x154>
 800e2a0:	4b45      	ldr	r3, [pc, #276]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d86a      	bhi.n	800e380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2aa:	4b44      	ldr	r3, [pc, #272]	@ (800e3bc <pvPortMalloc+0x190>)
 800e2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2ae:	4b43      	ldr	r3, [pc, #268]	@ (800e3bc <pvPortMalloc+0x190>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2b4:	e004      	b.n	800e2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d903      	bls.n	800e2d2 <pvPortMalloc+0xa6>
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1f1      	bne.n	800e2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2d2:	4b37      	ldr	r3, [pc, #220]	@ (800e3b0 <pvPortMalloc+0x184>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d051      	beq.n	800e380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2208      	movs	r2, #8
 800e2e2:	4413      	add	r3, r2
 800e2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	1ad2      	subs	r2, r2, r3
 800e2f6:	2308      	movs	r3, #8
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d920      	bls.n	800e340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	f003 0307 	and.w	r3, r3, #7
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <pvPortMalloc+0xfc>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	613b      	str	r3, [r7, #16]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	1ad2      	subs	r2, r2, r3
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e33a:	69b8      	ldr	r0, [r7, #24]
 800e33c:	f000 f90a 	bl	800e554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e340:	4b1d      	ldr	r3, [pc, #116]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e34e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4b1b      	ldr	r3, [pc, #108]	@ (800e3c0 <pvPortMalloc+0x194>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d203      	bcs.n	800e362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e35a:	4b17      	ldr	r3, [pc, #92]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a18      	ldr	r2, [pc, #96]	@ (800e3c0 <pvPortMalloc+0x194>)
 800e360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	4b13      	ldr	r3, [pc, #76]	@ (800e3b4 <pvPortMalloc+0x188>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	431a      	orrs	r2, r3
 800e36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e376:	4b13      	ldr	r3, [pc, #76]	@ (800e3c4 <pvPortMalloc+0x198>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3301      	adds	r3, #1
 800e37c:	4a11      	ldr	r2, [pc, #68]	@ (800e3c4 <pvPortMalloc+0x198>)
 800e37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e380:	f7fe fb02 	bl	800c988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	60fb      	str	r3, [r7, #12]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3728      	adds	r7, #40	@ 0x28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	2000a274 	.word	0x2000a274
 800e3b4:	2000a288 	.word	0x2000a288
 800e3b8:	2000a278 	.word	0x2000a278
 800e3bc:	2000a26c 	.word	0x2000a26c
 800e3c0:	2000a27c 	.word	0x2000a27c
 800e3c4:	2000a280 	.word	0x2000a280

0800e3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d04f      	beq.n	800e47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3da:	2308      	movs	r3, #8
 800e3dc:	425b      	negs	r3, r3
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	4b25      	ldr	r3, [pc, #148]	@ (800e484 <vPortFree+0xbc>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10b      	bne.n	800e40e <vPortFree+0x46>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00b      	beq.n	800e42e <vPortFree+0x66>
	__asm volatile
 800e416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	60bb      	str	r3, [r7, #8]
}
 800e428:	bf00      	nop
 800e42a:	bf00      	nop
 800e42c:	e7fd      	b.n	800e42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <vPortFree+0xbc>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01e      	beq.n	800e47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d11a      	bne.n	800e47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	4b0e      	ldr	r3, [pc, #56]	@ (800e484 <vPortFree+0xbc>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	43db      	mvns	r3, r3
 800e44e:	401a      	ands	r2, r3
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e454:	f7fe fa8a 	bl	800c96c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <vPortFree+0xc0>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4413      	add	r3, r2
 800e462:	4a09      	ldr	r2, [pc, #36]	@ (800e488 <vPortFree+0xc0>)
 800e464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f000 f874 	bl	800e554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e46c:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <vPortFree+0xc4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3301      	adds	r3, #1
 800e472:	4a06      	ldr	r2, [pc, #24]	@ (800e48c <vPortFree+0xc4>)
 800e474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e476:	f7fe fa87 	bl	800c988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e47a:	bf00      	nop
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	2000a288 	.word	0x2000a288
 800e488:	2000a278 	.word	0x2000a278
 800e48c:	2000a284 	.word	0x2000a284

0800e490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e496:	f44f 430c 	mov.w	r3, #35840	@ 0x8c00
 800e49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e49c:	4b27      	ldr	r3, [pc, #156]	@ (800e53c <prvHeapInit+0xac>)
 800e49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f003 0307 	and.w	r3, r3, #7
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3307      	adds	r3, #7
 800e4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f023 0307 	bic.w	r3, r3, #7
 800e4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	4a1f      	ldr	r2, [pc, #124]	@ (800e53c <prvHeapInit+0xac>)
 800e4c0:	4413      	add	r3, r2
 800e4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e540 <prvHeapInit+0xb0>)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e540 <prvHeapInit+0xb0>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	4413      	add	r3, r2
 800e4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4dc:	2208      	movs	r2, #8
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1a9b      	subs	r3, r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f023 0307 	bic.w	r3, r3, #7
 800e4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4a15      	ldr	r2, [pc, #84]	@ (800e544 <prvHeapInit+0xb4>)
 800e4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4f2:	4b14      	ldr	r3, [pc, #80]	@ (800e544 <prvHeapInit+0xb4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4fa:	4b12      	ldr	r3, [pc, #72]	@ (800e544 <prvHeapInit+0xb4>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2200      	movs	r2, #0
 800e500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	1ad2      	subs	r2, r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e510:	4b0c      	ldr	r3, [pc, #48]	@ (800e544 <prvHeapInit+0xb4>)
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	4a0a      	ldr	r2, [pc, #40]	@ (800e548 <prvHeapInit+0xb8>)
 800e51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	4a09      	ldr	r2, [pc, #36]	@ (800e54c <prvHeapInit+0xbc>)
 800e526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e528:	4b09      	ldr	r3, [pc, #36]	@ (800e550 <prvHeapInit+0xc0>)
 800e52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e52e:	601a      	str	r2, [r3, #0]
}
 800e530:	bf00      	nop
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	2000166c 	.word	0x2000166c
 800e540:	2000a26c 	.word	0x2000a26c
 800e544:	2000a274 	.word	0x2000a274
 800e548:	2000a27c 	.word	0x2000a27c
 800e54c:	2000a278 	.word	0x2000a278
 800e550:	2000a288 	.word	0x2000a288

0800e554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e55c:	4b28      	ldr	r3, [pc, #160]	@ (800e600 <prvInsertBlockIntoFreeList+0xac>)
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	e002      	b.n	800e568 <prvInsertBlockIntoFreeList+0x14>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d8f7      	bhi.n	800e562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	4413      	add	r3, r2
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	429a      	cmp	r2, r3
 800e582:	d108      	bne.n	800e596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	441a      	add	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d118      	bne.n	800e5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	4b15      	ldr	r3, [pc, #84]	@ (800e604 <prvInsertBlockIntoFreeList+0xb0>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d00d      	beq.n	800e5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	441a      	add	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	e008      	b.n	800e5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e604 <prvInsertBlockIntoFreeList+0xb0>)
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	e003      	b.n	800e5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d002      	beq.n	800e5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5f2:	bf00      	nop
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	2000a26c 	.word	0x2000a26c
 800e604:	2000a274 	.word	0x2000a274

0800e608 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d007      	beq.n	800e62c <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	6852      	ldr	r2, [r2, #4]
 800e624:	4610      	mov	r0, r2
 800e626:	4798      	blx	r3
 800e628:	4603      	mov	r3, r0
 800e62a:	e006      	b.n	800e63a <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	6852      	ldr	r2, [r2, #4]
 800e634:	4610      	mov	r0, r2
 800e636:	4798      	blx	r3
    return ERR_OK;
 800e638:	2300      	movs	r3, #0
  }
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b08e      	sub	sp, #56	@ 0x38
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800e65c:	f107 0314 	add.w	r3, r7, #20
 800e660:	4619      	mov	r1, r3
 800e662:	4806      	ldr	r0, [pc, #24]	@ (800e67c <netifapi_netif_common+0x38>)
 800e664:	f000 f99a 	bl	800e99c <tcpip_api_call>
 800e668:	4603      	mov	r3, r0
 800e66a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800e66e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e672:	4618      	mov	r0, r3
 800e674:	3738      	adds	r7, #56	@ 0x38
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	0800e609 	.word	0x0800e609

0800e680 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e68a:	f007 fd37 	bl	80160fc <sys_timeouts_sleeptime>
 800e68e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e696:	d10b      	bne.n	800e6b0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e698:	4813      	ldr	r0, [pc, #76]	@ (800e6e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800e69a:	f00c fe5e 	bl	801b35a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e69e:	2200      	movs	r2, #0
 800e6a0:	6839      	ldr	r1, [r7, #0]
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f00c fdd2 	bl	801b24c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e6a8:	480f      	ldr	r0, [pc, #60]	@ (800e6e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800e6aa:	f00c fe47 	bl	801b33c <sys_mutex_lock>
    return;
 800e6ae:	e018      	b.n	800e6e2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d102      	bne.n	800e6bc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e6b6:	f007 fce7 	bl	8016088 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e6ba:	e7e6      	b.n	800e68a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e6bc:	480a      	ldr	r0, [pc, #40]	@ (800e6e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800e6be:	f00c fe4c 	bl	801b35a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f00c fdc0 	bl	801b24c <sys_arch_mbox_fetch>
 800e6cc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e6ce:	4806      	ldr	r0, [pc, #24]	@ (800e6e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800e6d0:	f00c fe34 	bl	801b33c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6da:	d102      	bne.n	800e6e2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e6dc:	f007 fcd4 	bl	8016088 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e6e0:	e7d3      	b.n	800e68a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	2000a298 	.word	0x2000a298

0800e6ec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e6f4:	4810      	ldr	r0, [pc, #64]	@ (800e738 <tcpip_thread+0x4c>)
 800e6f6:	f00c fe21 	bl	801b33c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e6fa:	4b10      	ldr	r3, [pc, #64]	@ (800e73c <tcpip_thread+0x50>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d005      	beq.n	800e70e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e702:	4b0e      	ldr	r3, [pc, #56]	@ (800e73c <tcpip_thread+0x50>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a0e      	ldr	r2, [pc, #56]	@ (800e740 <tcpip_thread+0x54>)
 800e708:	6812      	ldr	r2, [r2, #0]
 800e70a:	4610      	mov	r0, r2
 800e70c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e70e:	f107 030c 	add.w	r3, r7, #12
 800e712:	4619      	mov	r1, r3
 800e714:	480b      	ldr	r0, [pc, #44]	@ (800e744 <tcpip_thread+0x58>)
 800e716:	f7ff ffb3 	bl	800e680 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e720:	4b09      	ldr	r3, [pc, #36]	@ (800e748 <tcpip_thread+0x5c>)
 800e722:	2291      	movs	r2, #145	@ 0x91
 800e724:	4909      	ldr	r1, [pc, #36]	@ (800e74c <tcpip_thread+0x60>)
 800e726:	480a      	ldr	r0, [pc, #40]	@ (800e750 <tcpip_thread+0x64>)
 800e728:	f00d fcfa 	bl	801c120 <iprintf>
      continue;
 800e72c:	e003      	b.n	800e736 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	4618      	mov	r0, r3
 800e732:	f000 f80f 	bl	800e754 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e736:	e7ea      	b.n	800e70e <tcpip_thread+0x22>
 800e738:	2000a298 	.word	0x2000a298
 800e73c:	2000a28c 	.word	0x2000a28c
 800e740:	2000a290 	.word	0x2000a290
 800e744:	2000a294 	.word	0x2000a294
 800e748:	0801ed58 	.word	0x0801ed58
 800e74c:	0801ed88 	.word	0x0801ed88
 800e750:	0801eda8 	.word	0x0801eda8

0800e754 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	2b02      	cmp	r3, #2
 800e762:	d026      	beq.n	800e7b2 <tcpip_thread_handle_msg+0x5e>
 800e764:	2b02      	cmp	r3, #2
 800e766:	dc2b      	bgt.n	800e7c0 <tcpip_thread_handle_msg+0x6c>
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d002      	beq.n	800e772 <tcpip_thread_handle_msg+0x1e>
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d015      	beq.n	800e79c <tcpip_thread_handle_msg+0x48>
 800e770:	e026      	b.n	800e7c0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	6850      	ldr	r0, [r2, #4]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	6892      	ldr	r2, [r2, #8]
 800e77e:	4611      	mov	r1, r2
 800e780:	4798      	blx	r3
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d004      	beq.n	800e792 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f001 fe89 	bl	80104a4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e792:	6879      	ldr	r1, [r7, #4]
 800e794:	2009      	movs	r0, #9
 800e796:	f000 ffe3 	bl	800f760 <memp_free>
      break;
 800e79a:	e018      	b.n	800e7ce <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	6892      	ldr	r2, [r2, #8]
 800e7a4:	4610      	mov	r0, r2
 800e7a6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e7a8:	6879      	ldr	r1, [r7, #4]
 800e7aa:	2008      	movs	r0, #8
 800e7ac:	f000 ffd8 	bl	800f760 <memp_free>
      break;
 800e7b0:	e00d      	b.n	800e7ce <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	6892      	ldr	r2, [r2, #8]
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	4798      	blx	r3
      break;
 800e7be:	e006      	b.n	800e7ce <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e7c0:	4b05      	ldr	r3, [pc, #20]	@ (800e7d8 <tcpip_thread_handle_msg+0x84>)
 800e7c2:	22cf      	movs	r2, #207	@ 0xcf
 800e7c4:	4905      	ldr	r1, [pc, #20]	@ (800e7dc <tcpip_thread_handle_msg+0x88>)
 800e7c6:	4806      	ldr	r0, [pc, #24]	@ (800e7e0 <tcpip_thread_handle_msg+0x8c>)
 800e7c8:	f00d fcaa 	bl	801c120 <iprintf>
      break;
 800e7cc:	bf00      	nop
  }
}
 800e7ce:	bf00      	nop
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	0801ed58 	.word	0x0801ed58
 800e7dc:	0801ed88 	.word	0x0801ed88
 800e7e0:	0801eda8 	.word	0x0801eda8

0800e7e4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b086      	sub	sp, #24
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e7f0:	481a      	ldr	r0, [pc, #104]	@ (800e85c <tcpip_inpkt+0x78>)
 800e7f2:	f00c fd6a 	bl	801b2ca <sys_mbox_valid>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d105      	bne.n	800e808 <tcpip_inpkt+0x24>
 800e7fc:	4b18      	ldr	r3, [pc, #96]	@ (800e860 <tcpip_inpkt+0x7c>)
 800e7fe:	22fc      	movs	r2, #252	@ 0xfc
 800e800:	4918      	ldr	r1, [pc, #96]	@ (800e864 <tcpip_inpkt+0x80>)
 800e802:	4819      	ldr	r0, [pc, #100]	@ (800e868 <tcpip_inpkt+0x84>)
 800e804:	f00d fc8c 	bl	801c120 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e808:	2009      	movs	r0, #9
 800e80a:	f000 ff57 	bl	800f6bc <memp_malloc>
 800e80e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e816:	f04f 33ff 	mov.w	r3, #4294967295
 800e81a:	e01a      	b.n	800e852 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	2200      	movs	r2, #0
 800e820:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e834:	6979      	ldr	r1, [r7, #20]
 800e836:	4809      	ldr	r0, [pc, #36]	@ (800e85c <tcpip_inpkt+0x78>)
 800e838:	f00c fcee 	bl	801b218 <sys_mbox_trypost>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d006      	beq.n	800e850 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e842:	6979      	ldr	r1, [r7, #20]
 800e844:	2009      	movs	r0, #9
 800e846:	f000 ff8b 	bl	800f760 <memp_free>
    return ERR_MEM;
 800e84a:	f04f 33ff 	mov.w	r3, #4294967295
 800e84e:	e000      	b.n	800e852 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e850:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	2000a294 	.word	0x2000a294
 800e860:	0801ed58 	.word	0x0801ed58
 800e864:	0801edd0 	.word	0x0801edd0
 800e868:	0801eda8 	.word	0x0801eda8

0800e86c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e87c:	f003 0318 	and.w	r3, r3, #24
 800e880:	2b00      	cmp	r3, #0
 800e882:	d006      	beq.n	800e892 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e884:	4a08      	ldr	r2, [pc, #32]	@ (800e8a8 <tcpip_input+0x3c>)
 800e886:	6839      	ldr	r1, [r7, #0]
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff ffab 	bl	800e7e4 <tcpip_inpkt>
 800e88e:	4603      	mov	r3, r0
 800e890:	e005      	b.n	800e89e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e892:	4a06      	ldr	r2, [pc, #24]	@ (800e8ac <tcpip_input+0x40>)
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff ffa4 	bl	800e7e4 <tcpip_inpkt>
 800e89c:	4603      	mov	r3, r0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	0801b005 	.word	0x0801b005
 800e8ac:	08019dcd 	.word	0x08019dcd

0800e8b0 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e8ba:	4814      	ldr	r0, [pc, #80]	@ (800e90c <tcpip_callback+0x5c>)
 800e8bc:	f00c fd05 	bl	801b2ca <sys_mbox_valid>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <tcpip_callback+0x24>
 800e8c6:	4b12      	ldr	r3, [pc, #72]	@ (800e910 <tcpip_callback+0x60>)
 800e8c8:	f240 1239 	movw	r2, #313	@ 0x139
 800e8cc:	4911      	ldr	r1, [pc, #68]	@ (800e914 <tcpip_callback+0x64>)
 800e8ce:	4812      	ldr	r0, [pc, #72]	@ (800e918 <tcpip_callback+0x68>)
 800e8d0:	f00d fc26 	bl	801c120 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e8d4:	2008      	movs	r0, #8
 800e8d6:	f000 fef1 	bl	800f6bc <memp_malloc>
 800e8da:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d102      	bne.n	800e8e8 <tcpip_callback+0x38>
    return ERR_MEM;
 800e8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e6:	e00d      	b.n	800e904 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800e8fa:	68f9      	ldr	r1, [r7, #12]
 800e8fc:	4803      	ldr	r0, [pc, #12]	@ (800e90c <tcpip_callback+0x5c>)
 800e8fe:	f00c fc75 	bl	801b1ec <sys_mbox_post>
  return ERR_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3710      	adds	r7, #16
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	2000a294 	.word	0x2000a294
 800e910:	0801ed58 	.word	0x0801ed58
 800e914:	0801edd0 	.word	0x0801edd0
 800e918:	0801eda8 	.word	0x0801eda8

0800e91c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e926:	4819      	ldr	r0, [pc, #100]	@ (800e98c <tcpip_try_callback+0x70>)
 800e928:	f00c fccf 	bl	801b2ca <sys_mbox_valid>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d106      	bne.n	800e940 <tcpip_try_callback+0x24>
 800e932:	4b17      	ldr	r3, [pc, #92]	@ (800e990 <tcpip_try_callback+0x74>)
 800e934:	f240 125d 	movw	r2, #349	@ 0x15d
 800e938:	4916      	ldr	r1, [pc, #88]	@ (800e994 <tcpip_try_callback+0x78>)
 800e93a:	4817      	ldr	r0, [pc, #92]	@ (800e998 <tcpip_try_callback+0x7c>)
 800e93c:	f00d fbf0 	bl	801c120 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e940:	2008      	movs	r0, #8
 800e942:	f000 febb 	bl	800f6bc <memp_malloc>
 800e946:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d102      	bne.n	800e954 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e94e:	f04f 33ff 	mov.w	r3, #4294967295
 800e952:	e017      	b.n	800e984 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2201      	movs	r2, #1
 800e958:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e966:	68f9      	ldr	r1, [r7, #12]
 800e968:	4808      	ldr	r0, [pc, #32]	@ (800e98c <tcpip_try_callback+0x70>)
 800e96a:	f00c fc55 	bl	801b218 <sys_mbox_trypost>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d006      	beq.n	800e982 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e974:	68f9      	ldr	r1, [r7, #12]
 800e976:	2008      	movs	r0, #8
 800e978:	f000 fef2 	bl	800f760 <memp_free>
    return ERR_MEM;
 800e97c:	f04f 33ff 	mov.w	r3, #4294967295
 800e980:	e000      	b.n	800e984 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	2000a294 	.word	0x2000a294
 800e990:	0801ed58 	.word	0x0801ed58
 800e994:	0801edd0 	.word	0x0801edd0
 800e998:	0801eda8 	.word	0x0801eda8

0800e99c <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800e9a6:	4808      	ldr	r0, [pc, #32]	@ (800e9c8 <tcpip_api_call+0x2c>)
 800e9a8:	f00c fcc8 	bl	801b33c <sys_mutex_lock>
  err = fn(call);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6838      	ldr	r0, [r7, #0]
 800e9b0:	4798      	blx	r3
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800e9b6:	4804      	ldr	r0, [pc, #16]	@ (800e9c8 <tcpip_api_call+0x2c>)
 800e9b8:	f00c fccf 	bl	801b35a <sys_mutex_unlock>
  return err;
 800e9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	2000a298 	.word	0x2000a298

0800e9cc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af02      	add	r7, sp, #8
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e9d6:	f000 f9ea 	bl	800edae <lwip_init>

  tcpip_init_done = initfunc;
 800e9da:	4a17      	ldr	r2, [pc, #92]	@ (800ea38 <tcpip_init+0x6c>)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e9e0:	4a16      	ldr	r2, [pc, #88]	@ (800ea3c <tcpip_init+0x70>)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e9e6:	210a      	movs	r1, #10
 800e9e8:	4815      	ldr	r0, [pc, #84]	@ (800ea40 <tcpip_init+0x74>)
 800e9ea:	f00c fbe1 	bl	801b1b0 <sys_mbox_new>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d006      	beq.n	800ea02 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e9f4:	4b13      	ldr	r3, [pc, #76]	@ (800ea44 <tcpip_init+0x78>)
 800e9f6:	f240 2261 	movw	r2, #609	@ 0x261
 800e9fa:	4913      	ldr	r1, [pc, #76]	@ (800ea48 <tcpip_init+0x7c>)
 800e9fc:	4813      	ldr	r0, [pc, #76]	@ (800ea4c <tcpip_init+0x80>)
 800e9fe:	f00d fb8f 	bl	801c120 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ea02:	4813      	ldr	r0, [pc, #76]	@ (800ea50 <tcpip_init+0x84>)
 800ea04:	f00c fc80 	bl	801b308 <sys_mutex_new>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d006      	beq.n	800ea1c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea44 <tcpip_init+0x78>)
 800ea10:	f240 2265 	movw	r2, #613	@ 0x265
 800ea14:	490f      	ldr	r1, [pc, #60]	@ (800ea54 <tcpip_init+0x88>)
 800ea16:	480d      	ldr	r0, [pc, #52]	@ (800ea4c <tcpip_init+0x80>)
 800ea18:	f00d fb82 	bl	801c120 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ea1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea26:	2200      	movs	r2, #0
 800ea28:	490b      	ldr	r1, [pc, #44]	@ (800ea58 <tcpip_init+0x8c>)
 800ea2a:	480c      	ldr	r0, [pc, #48]	@ (800ea5c <tcpip_init+0x90>)
 800ea2c:	f00c fca2 	bl	801b374 <sys_thread_new>
}
 800ea30:	bf00      	nop
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	2000a28c 	.word	0x2000a28c
 800ea3c:	2000a290 	.word	0x2000a290
 800ea40:	2000a294 	.word	0x2000a294
 800ea44:	0801ed58 	.word	0x0801ed58
 800ea48:	0801ede0 	.word	0x0801ede0
 800ea4c:	0801eda8 	.word	0x0801eda8
 800ea50:	2000a298 	.word	0x2000a298
 800ea54:	0801ee04 	.word	0x0801ee04
 800ea58:	0800e6ed 	.word	0x0800e6ed
 800ea5c:	0801ee28 	.word	0x0801ee28

0800ea60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ea6a:	88fb      	ldrh	r3, [r7, #6]
 800ea6c:	021b      	lsls	r3, r3, #8
 800ea6e:	b21a      	sxth	r2, r3
 800ea70:	88fb      	ldrh	r3, [r7, #6]
 800ea72:	0a1b      	lsrs	r3, r3, #8
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	b21b      	sxth	r3, r3
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	b21b      	sxth	r3, r3
 800ea7c:	b29b      	uxth	r3, r3
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b083      	sub	sp, #12
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	061a      	lsls	r2, r3, #24
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	021b      	lsls	r3, r3, #8
 800ea9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea9e:	431a      	orrs	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	0a1b      	lsrs	r3, r3, #8
 800eaa4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eaa8:	431a      	orrs	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	0e1b      	lsrs	r3, r3, #24
 800eaae:	4313      	orrs	r3, r2
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b089      	sub	sp, #36	@ 0x24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	f003 0301 	and.w	r3, r3, #1
 800ead8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d00d      	beq.n	800eafc <lwip_standard_chksum+0x40>
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dd0a      	ble.n	800eafc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800eae6:	69fa      	ldr	r2, [r7, #28]
 800eae8:	1c53      	adds	r3, r2, #1
 800eaea:	61fb      	str	r3, [r7, #28]
 800eaec:	f107 030e 	add.w	r3, r7, #14
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	7812      	ldrb	r2, [r2, #0]
 800eaf4:	701a      	strb	r2, [r3, #0]
    len--;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800eb00:	e00a      	b.n	800eb18 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	1c9a      	adds	r2, r3, #2
 800eb06:	61ba      	str	r2, [r7, #24]
 800eb08:	881b      	ldrh	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	4413      	add	r3, r2
 800eb10:	617b      	str	r3, [r7, #20]
    len -= 2;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	3b02      	subs	r3, #2
 800eb16:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	dcf1      	bgt.n	800eb02 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	dd04      	ble.n	800eb2e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800eb24:	f107 030e 	add.w	r3, r7, #14
 800eb28:	69ba      	ldr	r2, [r7, #24]
 800eb2a:	7812      	ldrb	r2, [r2, #0]
 800eb2c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800eb2e:	89fb      	ldrh	r3, [r7, #14]
 800eb30:	461a      	mov	r2, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	4413      	add	r3, r2
 800eb36:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	0c1a      	lsrs	r2, r3, #16
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	4413      	add	r3, r2
 800eb42:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	0c1a      	lsrs	r2, r3, #16
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	4413      	add	r3, r2
 800eb4e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d007      	beq.n	800eb66 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	021b      	lsls	r3, r3, #8
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	0a1b      	lsrs	r3, r3, #8
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	4313      	orrs	r3, r2
 800eb64:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	b29b      	uxth	r3, r3
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3724      	adds	r7, #36	@ 0x24
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b086      	sub	sp, #24
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	60f8      	str	r0, [r7, #12]
 800eb7e:	607b      	str	r3, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	72fb      	strb	r3, [r7, #11]
 800eb84:	4613      	mov	r3, r2
 800eb86:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	617b      	str	r3, [r7, #20]
 800eb90:	e02b      	b.n	800ebea <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	895b      	ldrh	r3, [r3, #10]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	f7ff ff8d 	bl	800eabc <lwip_standard_chksum>
 800eba2:	4603      	mov	r3, r0
 800eba4:	461a      	mov	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4413      	add	r3, r2
 800ebaa:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	0c1a      	lsrs	r2, r3, #16
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	4413      	add	r3, r2
 800ebb6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	895b      	ldrh	r3, [r3, #10]
 800ebbc:	f003 0301 	and.w	r3, r3, #1
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00e      	beq.n	800ebe4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	bf0c      	ite	eq
 800ebcc:	2301      	moveq	r3, #1
 800ebce:	2300      	movne	r3, #0
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	021b      	lsls	r3, r3, #8
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	0a1b      	lsrs	r3, r3, #8
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1d0      	bne.n	800eb92 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d007      	beq.n	800ec06 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	021b      	lsls	r3, r3, #8
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	0a1b      	lsrs	r3, r3, #8
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	4313      	orrs	r3, r2
 800ec04:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800ec06:	7afb      	ldrb	r3, [r7, #11]
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff ff28 	bl	800ea60 <lwip_htons>
 800ec10:	4603      	mov	r3, r0
 800ec12:	461a      	mov	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4413      	add	r3, r2
 800ec18:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800ec1a:	893b      	ldrh	r3, [r7, #8]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7ff ff1f 	bl	800ea60 <lwip_htons>
 800ec22:	4603      	mov	r3, r0
 800ec24:	461a      	mov	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4413      	add	r3, r2
 800ec2a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	0c1a      	lsrs	r2, r3, #16
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	4413      	add	r3, r2
 800ec36:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	0c1a      	lsrs	r2, r3, #16
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	4413      	add	r3, r2
 800ec42:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	43db      	mvns	r3, r3
 800ec4a:	b29b      	uxth	r3, r3
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3718      	adds	r7, #24
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	607b      	str	r3, [r7, #4]
 800ec5e:	460b      	mov	r3, r1
 800ec60:	72fb      	strb	r3, [r7, #11]
 800ec62:	4613      	mov	r3, r2
 800ec64:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	0c1b      	lsrs	r3, r3, #16
 800ec76:	693a      	ldr	r2, [r7, #16]
 800ec78:	4413      	add	r3, r2
 800ec7a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800ec7c:	6a3b      	ldr	r3, [r7, #32]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	4413      	add	r3, r2
 800ec8a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	0c1b      	lsrs	r3, r3, #16
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	4413      	add	r3, r2
 800ec94:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	0c1a      	lsrs	r2, r3, #16
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	4413      	add	r3, r2
 800eca0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	0c1a      	lsrs	r2, r3, #16
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	4413      	add	r3, r2
 800ecac:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800ecae:	893a      	ldrh	r2, [r7, #8]
 800ecb0:	7af9      	ldrb	r1, [r7, #11]
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f7ff ff5e 	bl	800eb76 <inet_cksum_pseudo_base>
 800ecba:	4603      	mov	r3, r0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3718      	adds	r7, #24
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af02      	add	r7, sp, #8
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	607b      	str	r3, [r7, #4]
 800ecce:	460b      	mov	r3, r1
 800ecd0:	72fb      	strb	r3, [r7, #11]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800ecd6:	893a      	ldrh	r2, [r7, #8]
 800ecd8:	7af9      	ldrb	r1, [r7, #11]
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7ff ffb7 	bl	800ec54 <inet_chksum_pseudo>
 800ece6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ecfc:	887b      	ldrh	r3, [r7, #2]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff fedb 	bl	800eabc <lwip_standard_chksum>
 800ed06:	4603      	mov	r3, r0
 800ed08:	43db      	mvns	r3, r3
 800ed0a:	b29b      	uxth	r3, r3
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ed20:	2300      	movs	r3, #0
 800ed22:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	613b      	str	r3, [r7, #16]
 800ed28:	e02b      	b.n	800ed82 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	685a      	ldr	r2, [r3, #4]
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	895b      	ldrh	r3, [r3, #10]
 800ed32:	4619      	mov	r1, r3
 800ed34:	4610      	mov	r0, r2
 800ed36:	f7ff fec1 	bl	800eabc <lwip_standard_chksum>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	4413      	add	r3, r2
 800ed42:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	0c1a      	lsrs	r2, r3, #16
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	4413      	add	r3, r2
 800ed4e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	895b      	ldrh	r3, [r3, #10]
 800ed54:	f003 0301 	and.w	r3, r3, #1
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00e      	beq.n	800ed7c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bf0c      	ite	eq
 800ed64:	2301      	moveq	r3, #1
 800ed66:	2300      	movne	r3, #0
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	021b      	lsls	r3, r3, #8
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	0a1b      	lsrs	r3, r3, #8
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	613b      	str	r3, [r7, #16]
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1d0      	bne.n	800ed2a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d007      	beq.n	800ed9e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	021b      	lsls	r3, r3, #8
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	0a1b      	lsrs	r3, r3, #8
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	43db      	mvns	r3, r3
 800eda4:	b29b      	uxth	r3, r3
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800edb4:	2300      	movs	r3, #0
 800edb6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800edb8:	f00c fa98 	bl	801b2ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800edbc:	f000 f8d4 	bl	800ef68 <mem_init>
  memp_init();
 800edc0:	f000 fc30 	bl	800f624 <memp_init>
  pbuf_init();
  netif_init();
 800edc4:	f000 fcf6 	bl	800f7b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800edc8:	f007 f9d0 	bl	801616c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800edcc:	f001 feac 	bl	8010b28 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800edd0:	f007 f912 	bl	8015ff8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ede6:	4b05      	ldr	r3, [pc, #20]	@ (800edfc <ptr_to_mem+0x20>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	88fb      	ldrh	r3, [r7, #6]
 800edec:	4413      	add	r3, r2
}
 800edee:	4618      	mov	r0, r3
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	2000f2c8 	.word	0x2000f2c8

0800ee00 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ee08:	4b05      	ldr	r3, [pc, #20]	@ (800ee20 <mem_to_ptr+0x20>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	1ad3      	subs	r3, r2, r3
 800ee10:	b29b      	uxth	r3, r3
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	2000f2c8 	.word	0x2000f2c8

0800ee24 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ee24:	b590      	push	{r4, r7, lr}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ee2c:	4b45      	ldr	r3, [pc, #276]	@ (800ef44 <plug_holes+0x120>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d206      	bcs.n	800ee44 <plug_holes+0x20>
 800ee36:	4b44      	ldr	r3, [pc, #272]	@ (800ef48 <plug_holes+0x124>)
 800ee38:	f240 12df 	movw	r2, #479	@ 0x1df
 800ee3c:	4943      	ldr	r1, [pc, #268]	@ (800ef4c <plug_holes+0x128>)
 800ee3e:	4844      	ldr	r0, [pc, #272]	@ (800ef50 <plug_holes+0x12c>)
 800ee40:	f00d f96e 	bl	801c120 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ee44:	4b43      	ldr	r3, [pc, #268]	@ (800ef54 <plug_holes+0x130>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d306      	bcc.n	800ee5c <plug_holes+0x38>
 800ee4e:	4b3e      	ldr	r3, [pc, #248]	@ (800ef48 <plug_holes+0x124>)
 800ee50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ee54:	4940      	ldr	r1, [pc, #256]	@ (800ef58 <plug_holes+0x134>)
 800ee56:	483e      	ldr	r0, [pc, #248]	@ (800ef50 <plug_holes+0x12c>)
 800ee58:	f00d f962 	bl	801c120 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	791b      	ldrb	r3, [r3, #4]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d006      	beq.n	800ee72 <plug_holes+0x4e>
 800ee64:	4b38      	ldr	r3, [pc, #224]	@ (800ef48 <plug_holes+0x124>)
 800ee66:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ee6a:	493c      	ldr	r1, [pc, #240]	@ (800ef5c <plug_holes+0x138>)
 800ee6c:	4838      	ldr	r0, [pc, #224]	@ (800ef50 <plug_holes+0x12c>)
 800ee6e:	f00d f957 	bl	801c120 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	881b      	ldrh	r3, [r3, #0]
 800ee76:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ee7a:	d906      	bls.n	800ee8a <plug_holes+0x66>
 800ee7c:	4b32      	ldr	r3, [pc, #200]	@ (800ef48 <plug_holes+0x124>)
 800ee7e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ee82:	4937      	ldr	r1, [pc, #220]	@ (800ef60 <plug_holes+0x13c>)
 800ee84:	4832      	ldr	r0, [pc, #200]	@ (800ef50 <plug_holes+0x12c>)
 800ee86:	f00d f94b 	bl	801c120 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff ffa4 	bl	800eddc <ptr_to_mem>
 800ee94:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d024      	beq.n	800eee8 <plug_holes+0xc4>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	791b      	ldrb	r3, [r3, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d120      	bne.n	800eee8 <plug_holes+0xc4>
 800eea6:	4b2b      	ldr	r3, [pc, #172]	@ (800ef54 <plug_holes+0x130>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d01b      	beq.n	800eee8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eeb0:	4b2c      	ldr	r3, [pc, #176]	@ (800ef64 <plug_holes+0x140>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d102      	bne.n	800eec0 <plug_holes+0x9c>
      lfree = mem;
 800eeba:	4a2a      	ldr	r2, [pc, #168]	@ (800ef64 <plug_holes+0x140>)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	881a      	ldrh	r2, [r3, #0]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800eed0:	d00a      	beq.n	800eee8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff ff80 	bl	800eddc <ptr_to_mem>
 800eedc:	4604      	mov	r4, r0
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ff8e 	bl	800ee00 <mem_to_ptr>
 800eee4:	4603      	mov	r3, r0
 800eee6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	885b      	ldrh	r3, [r3, #2]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff ff75 	bl	800eddc <ptr_to_mem>
 800eef2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d01f      	beq.n	800ef3c <plug_holes+0x118>
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	791b      	ldrb	r3, [r3, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d11b      	bne.n	800ef3c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ef04:	4b17      	ldr	r3, [pc, #92]	@ (800ef64 <plug_holes+0x140>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d102      	bne.n	800ef14 <plug_holes+0xf0>
      lfree = pmem;
 800ef0e:	4a15      	ldr	r2, [pc, #84]	@ (800ef64 <plug_holes+0x140>)
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	881a      	ldrh	r2, [r3, #0]
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	881b      	ldrh	r3, [r3, #0]
 800ef20:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ef24:	d00a      	beq.n	800ef3c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff ff56 	bl	800eddc <ptr_to_mem>
 800ef30:	4604      	mov	r4, r0
 800ef32:	68b8      	ldr	r0, [r7, #8]
 800ef34:	f7ff ff64 	bl	800ee00 <mem_to_ptr>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ef3c:	bf00      	nop
 800ef3e:	3714      	adds	r7, #20
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd90      	pop	{r4, r7, pc}
 800ef44:	2000f2c8 	.word	0x2000f2c8
 800ef48:	0801ee30 	.word	0x0801ee30
 800ef4c:	0801ee60 	.word	0x0801ee60
 800ef50:	0801ee78 	.word	0x0801ee78
 800ef54:	2000f2cc 	.word	0x2000f2cc
 800ef58:	0801eea0 	.word	0x0801eea0
 800ef5c:	0801eebc 	.word	0x0801eebc
 800ef60:	0801eed8 	.word	0x0801eed8
 800ef64:	2000f2d4 	.word	0x2000f2d4

0800ef68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ef6e:	4b1f      	ldr	r3, [pc, #124]	@ (800efec <mem_init+0x84>)
 800ef70:	3303      	adds	r3, #3
 800ef72:	f023 0303 	bic.w	r3, r3, #3
 800ef76:	461a      	mov	r2, r3
 800ef78:	4b1d      	ldr	r3, [pc, #116]	@ (800eff0 <mem_init+0x88>)
 800ef7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ef7c:	4b1c      	ldr	r3, [pc, #112]	@ (800eff0 <mem_init+0x88>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800ef88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ef96:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 800ef9a:	f7ff ff1f 	bl	800eddc <ptr_to_mem>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	4a14      	ldr	r2, [pc, #80]	@ (800eff4 <mem_init+0x8c>)
 800efa2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800efa4:	4b13      	ldr	r3, [pc, #76]	@ (800eff4 <mem_init+0x8c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2201      	movs	r2, #1
 800efaa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800efac:	4b11      	ldr	r3, [pc, #68]	@ (800eff4 <mem_init+0x8c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800efb4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800efb6:	4b0f      	ldr	r3, [pc, #60]	@ (800eff4 <mem_init+0x8c>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800efbe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800efc0:	4b0b      	ldr	r3, [pc, #44]	@ (800eff0 <mem_init+0x88>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a0c      	ldr	r2, [pc, #48]	@ (800eff8 <mem_init+0x90>)
 800efc6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800efc8:	480c      	ldr	r0, [pc, #48]	@ (800effc <mem_init+0x94>)
 800efca:	f00c f99d 	bl	801b308 <sys_mutex_new>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d006      	beq.n	800efe2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800efd4:	4b0a      	ldr	r3, [pc, #40]	@ (800f000 <mem_init+0x98>)
 800efd6:	f240 221f 	movw	r2, #543	@ 0x21f
 800efda:	490a      	ldr	r1, [pc, #40]	@ (800f004 <mem_init+0x9c>)
 800efdc:	480a      	ldr	r0, [pc, #40]	@ (800f008 <mem_init+0xa0>)
 800efde:	f00d f89f 	bl	801c120 <iprintf>
  }
}
 800efe2:	bf00      	nop
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2000a2b4 	.word	0x2000a2b4
 800eff0:	2000f2c8 	.word	0x2000f2c8
 800eff4:	2000f2cc 	.word	0x2000f2cc
 800eff8:	2000f2d4 	.word	0x2000f2d4
 800effc:	2000f2d0 	.word	0x2000f2d0
 800f000:	0801ee30 	.word	0x0801ee30
 800f004:	0801ef04 	.word	0x0801ef04
 800f008:	0801ee78 	.word	0x0801ee78

0800f00c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff fef3 	bl	800ee00 <mem_to_ptr>
 800f01a:	4603      	mov	r3, r0
 800f01c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	4618      	mov	r0, r3
 800f024:	f7ff feda 	bl	800eddc <ptr_to_mem>
 800f028:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	885b      	ldrh	r3, [r3, #2]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff fed4 	bl	800eddc <ptr_to_mem>
 800f034:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f03e:	d818      	bhi.n	800f072 <mem_link_valid+0x66>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	885b      	ldrh	r3, [r3, #2]
 800f044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f048:	d813      	bhi.n	800f072 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f04e:	8afa      	ldrh	r2, [r7, #22]
 800f050:	429a      	cmp	r2, r3
 800f052:	d004      	beq.n	800f05e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	881b      	ldrh	r3, [r3, #0]
 800f058:	8afa      	ldrh	r2, [r7, #22]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d109      	bne.n	800f072 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f05e:	4b08      	ldr	r3, [pc, #32]	@ (800f080 <mem_link_valid+0x74>)
 800f060:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	429a      	cmp	r2, r3
 800f066:	d006      	beq.n	800f076 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	885b      	ldrh	r3, [r3, #2]
 800f06c:	8afa      	ldrh	r2, [r7, #22]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d001      	beq.n	800f076 <mem_link_valid+0x6a>
    return 0;
 800f072:	2300      	movs	r3, #0
 800f074:	e000      	b.n	800f078 <mem_link_valid+0x6c>
  }
  return 1;
 800f076:	2301      	movs	r3, #1
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	2000f2cc 	.word	0x2000f2cc

0800f084 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d070      	beq.n	800f174 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f003 0303 	and.w	r3, r3, #3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00d      	beq.n	800f0b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f09c:	4b37      	ldr	r3, [pc, #220]	@ (800f17c <mem_free+0xf8>)
 800f09e:	f240 2273 	movw	r2, #627	@ 0x273
 800f0a2:	4937      	ldr	r1, [pc, #220]	@ (800f180 <mem_free+0xfc>)
 800f0a4:	4837      	ldr	r0, [pc, #220]	@ (800f184 <mem_free+0x100>)
 800f0a6:	f00d f83b 	bl	801c120 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f0aa:	f00c f981 	bl	801b3b0 <sys_arch_protect>
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f00c f98b 	bl	801b3cc <sys_arch_unprotect>
    return;
 800f0b6:	e05e      	b.n	800f176 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	3b08      	subs	r3, #8
 800f0bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f0be:	4b32      	ldr	r3, [pc, #200]	@ (800f188 <mem_free+0x104>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	69fa      	ldr	r2, [r7, #28]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d306      	bcc.n	800f0d6 <mem_free+0x52>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f103 020c 	add.w	r2, r3, #12
 800f0ce:	4b2f      	ldr	r3, [pc, #188]	@ (800f18c <mem_free+0x108>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d90d      	bls.n	800f0f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f0d6:	4b29      	ldr	r3, [pc, #164]	@ (800f17c <mem_free+0xf8>)
 800f0d8:	f240 227f 	movw	r2, #639	@ 0x27f
 800f0dc:	492c      	ldr	r1, [pc, #176]	@ (800f190 <mem_free+0x10c>)
 800f0de:	4829      	ldr	r0, [pc, #164]	@ (800f184 <mem_free+0x100>)
 800f0e0:	f00d f81e 	bl	801c120 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f0e4:	f00c f964 	bl	801b3b0 <sys_arch_protect>
 800f0e8:	6138      	str	r0, [r7, #16]
 800f0ea:	6938      	ldr	r0, [r7, #16]
 800f0ec:	f00c f96e 	bl	801b3cc <sys_arch_unprotect>
    return;
 800f0f0:	e041      	b.n	800f176 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f0f2:	4828      	ldr	r0, [pc, #160]	@ (800f194 <mem_free+0x110>)
 800f0f4:	f00c f922 	bl	801b33c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	791b      	ldrb	r3, [r3, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d110      	bne.n	800f122 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f100:	4b1e      	ldr	r3, [pc, #120]	@ (800f17c <mem_free+0xf8>)
 800f102:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f106:	4924      	ldr	r1, [pc, #144]	@ (800f198 <mem_free+0x114>)
 800f108:	481e      	ldr	r0, [pc, #120]	@ (800f184 <mem_free+0x100>)
 800f10a:	f00d f809 	bl	801c120 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f10e:	4821      	ldr	r0, [pc, #132]	@ (800f194 <mem_free+0x110>)
 800f110:	f00c f923 	bl	801b35a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f114:	f00c f94c 	bl	801b3b0 <sys_arch_protect>
 800f118:	6178      	str	r0, [r7, #20]
 800f11a:	6978      	ldr	r0, [r7, #20]
 800f11c:	f00c f956 	bl	801b3cc <sys_arch_unprotect>
    return;
 800f120:	e029      	b.n	800f176 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f122:	69f8      	ldr	r0, [r7, #28]
 800f124:	f7ff ff72 	bl	800f00c <mem_link_valid>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d110      	bne.n	800f150 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f12e:	4b13      	ldr	r3, [pc, #76]	@ (800f17c <mem_free+0xf8>)
 800f130:	f240 2295 	movw	r2, #661	@ 0x295
 800f134:	4919      	ldr	r1, [pc, #100]	@ (800f19c <mem_free+0x118>)
 800f136:	4813      	ldr	r0, [pc, #76]	@ (800f184 <mem_free+0x100>)
 800f138:	f00c fff2 	bl	801c120 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f13c:	4815      	ldr	r0, [pc, #84]	@ (800f194 <mem_free+0x110>)
 800f13e:	f00c f90c 	bl	801b35a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f142:	f00c f935 	bl	801b3b0 <sys_arch_protect>
 800f146:	61b8      	str	r0, [r7, #24]
 800f148:	69b8      	ldr	r0, [r7, #24]
 800f14a:	f00c f93f 	bl	801b3cc <sys_arch_unprotect>
    return;
 800f14e:	e012      	b.n	800f176 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	2200      	movs	r2, #0
 800f154:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f156:	4b12      	ldr	r3, [pc, #72]	@ (800f1a0 <mem_free+0x11c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	69fa      	ldr	r2, [r7, #28]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d202      	bcs.n	800f166 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f160:	4a0f      	ldr	r2, [pc, #60]	@ (800f1a0 <mem_free+0x11c>)
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f166:	69f8      	ldr	r0, [r7, #28]
 800f168:	f7ff fe5c 	bl	800ee24 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f16c:	4809      	ldr	r0, [pc, #36]	@ (800f194 <mem_free+0x110>)
 800f16e:	f00c f8f4 	bl	801b35a <sys_mutex_unlock>
 800f172:	e000      	b.n	800f176 <mem_free+0xf2>
    return;
 800f174:	bf00      	nop
}
 800f176:	3720      	adds	r7, #32
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	0801ee30 	.word	0x0801ee30
 800f180:	0801ef20 	.word	0x0801ef20
 800f184:	0801ee78 	.word	0x0801ee78
 800f188:	2000f2c8 	.word	0x2000f2c8
 800f18c:	2000f2cc 	.word	0x2000f2cc
 800f190:	0801ef44 	.word	0x0801ef44
 800f194:	2000f2d0 	.word	0x2000f2d0
 800f198:	0801ef60 	.word	0x0801ef60
 800f19c:	0801ef88 	.word	0x0801ef88
 800f1a0:	2000f2d4 	.word	0x2000f2d4

0800f1a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f1b0:	887b      	ldrh	r3, [r7, #2]
 800f1b2:	3303      	adds	r3, #3
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	f023 0303 	bic.w	r3, r3, #3
 800f1ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f1bc:	8bfb      	ldrh	r3, [r7, #30]
 800f1be:	2b0b      	cmp	r3, #11
 800f1c0:	d801      	bhi.n	800f1c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f1c2:	230c      	movs	r3, #12
 800f1c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f1c6:	8bfb      	ldrh	r3, [r7, #30]
 800f1c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f1cc:	d803      	bhi.n	800f1d6 <mem_trim+0x32>
 800f1ce:	8bfa      	ldrh	r2, [r7, #30]
 800f1d0:	887b      	ldrh	r3, [r7, #2]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d201      	bcs.n	800f1da <mem_trim+0x36>
    return NULL;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e0d8      	b.n	800f38c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f1da:	4b6e      	ldr	r3, [pc, #440]	@ (800f394 <mem_trim+0x1f0>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d304      	bcc.n	800f1ee <mem_trim+0x4a>
 800f1e4:	4b6c      	ldr	r3, [pc, #432]	@ (800f398 <mem_trim+0x1f4>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d306      	bcc.n	800f1fc <mem_trim+0x58>
 800f1ee:	4b6b      	ldr	r3, [pc, #428]	@ (800f39c <mem_trim+0x1f8>)
 800f1f0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f1f4:	496a      	ldr	r1, [pc, #424]	@ (800f3a0 <mem_trim+0x1fc>)
 800f1f6:	486b      	ldr	r0, [pc, #428]	@ (800f3a4 <mem_trim+0x200>)
 800f1f8:	f00c ff92 	bl	801c120 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f1fc:	4b65      	ldr	r3, [pc, #404]	@ (800f394 <mem_trim+0x1f0>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	429a      	cmp	r2, r3
 800f204:	d304      	bcc.n	800f210 <mem_trim+0x6c>
 800f206:	4b64      	ldr	r3, [pc, #400]	@ (800f398 <mem_trim+0x1f4>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d307      	bcc.n	800f220 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f210:	f00c f8ce 	bl	801b3b0 <sys_arch_protect>
 800f214:	60b8      	str	r0, [r7, #8]
 800f216:	68b8      	ldr	r0, [r7, #8]
 800f218:	f00c f8d8 	bl	801b3cc <sys_arch_unprotect>
    return rmem;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	e0b5      	b.n	800f38c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	3b08      	subs	r3, #8
 800f224:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f226:	69b8      	ldr	r0, [r7, #24]
 800f228:	f7ff fdea 	bl	800ee00 <mem_to_ptr>
 800f22c:	4603      	mov	r3, r0
 800f22e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	881a      	ldrh	r2, [r3, #0]
 800f234:	8afb      	ldrh	r3, [r7, #22]
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	b29b      	uxth	r3, r3
 800f23a:	3b08      	subs	r3, #8
 800f23c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f23e:	8bfa      	ldrh	r2, [r7, #30]
 800f240:	8abb      	ldrh	r3, [r7, #20]
 800f242:	429a      	cmp	r2, r3
 800f244:	d906      	bls.n	800f254 <mem_trim+0xb0>
 800f246:	4b55      	ldr	r3, [pc, #340]	@ (800f39c <mem_trim+0x1f8>)
 800f248:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f24c:	4956      	ldr	r1, [pc, #344]	@ (800f3a8 <mem_trim+0x204>)
 800f24e:	4855      	ldr	r0, [pc, #340]	@ (800f3a4 <mem_trim+0x200>)
 800f250:	f00c ff66 	bl	801c120 <iprintf>
  if (newsize > size) {
 800f254:	8bfa      	ldrh	r2, [r7, #30]
 800f256:	8abb      	ldrh	r3, [r7, #20]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d901      	bls.n	800f260 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f25c:	2300      	movs	r3, #0
 800f25e:	e095      	b.n	800f38c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f260:	8bfa      	ldrh	r2, [r7, #30]
 800f262:	8abb      	ldrh	r3, [r7, #20]
 800f264:	429a      	cmp	r2, r3
 800f266:	d101      	bne.n	800f26c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	e08f      	b.n	800f38c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f26c:	484f      	ldr	r0, [pc, #316]	@ (800f3ac <mem_trim+0x208>)
 800f26e:	f00c f865 	bl	801b33c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fdb0 	bl	800eddc <ptr_to_mem>
 800f27c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	791b      	ldrb	r3, [r3, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d13f      	bne.n	800f306 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	881b      	ldrh	r3, [r3, #0]
 800f28a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f28e:	d106      	bne.n	800f29e <mem_trim+0xfa>
 800f290:	4b42      	ldr	r3, [pc, #264]	@ (800f39c <mem_trim+0x1f8>)
 800f292:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f296:	4946      	ldr	r1, [pc, #280]	@ (800f3b0 <mem_trim+0x20c>)
 800f298:	4842      	ldr	r0, [pc, #264]	@ (800f3a4 <mem_trim+0x200>)
 800f29a:	f00c ff41 	bl	801c120 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	881b      	ldrh	r3, [r3, #0]
 800f2a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f2a4:	8afa      	ldrh	r2, [r7, #22]
 800f2a6:	8bfb      	ldrh	r3, [r7, #30]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	3308      	adds	r3, #8
 800f2ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f2b0:	4b40      	ldr	r3, [pc, #256]	@ (800f3b4 <mem_trim+0x210>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d106      	bne.n	800f2c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f2ba:	89fb      	ldrh	r3, [r7, #14]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff fd8d 	bl	800eddc <ptr_to_mem>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	4a3b      	ldr	r2, [pc, #236]	@ (800f3b4 <mem_trim+0x210>)
 800f2c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f2c8:	89fb      	ldrh	r3, [r7, #14]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7ff fd86 	bl	800eddc <ptr_to_mem>
 800f2d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	89ba      	ldrh	r2, [r7, #12]
 800f2dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	8afa      	ldrh	r2, [r7, #22]
 800f2e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	89fa      	ldrh	r2, [r7, #14]
 800f2e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f2f2:	d047      	beq.n	800f384 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff fd6f 	bl	800eddc <ptr_to_mem>
 800f2fe:	4602      	mov	r2, r0
 800f300:	89fb      	ldrh	r3, [r7, #14]
 800f302:	8053      	strh	r3, [r2, #2]
 800f304:	e03e      	b.n	800f384 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f306:	8bfb      	ldrh	r3, [r7, #30]
 800f308:	f103 0214 	add.w	r2, r3, #20
 800f30c:	8abb      	ldrh	r3, [r7, #20]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d838      	bhi.n	800f384 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f312:	8afa      	ldrh	r2, [r7, #22]
 800f314:	8bfb      	ldrh	r3, [r7, #30]
 800f316:	4413      	add	r3, r2
 800f318:	b29b      	uxth	r3, r3
 800f31a:	3308      	adds	r3, #8
 800f31c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f326:	d106      	bne.n	800f336 <mem_trim+0x192>
 800f328:	4b1c      	ldr	r3, [pc, #112]	@ (800f39c <mem_trim+0x1f8>)
 800f32a:	f240 3216 	movw	r2, #790	@ 0x316
 800f32e:	4920      	ldr	r1, [pc, #128]	@ (800f3b0 <mem_trim+0x20c>)
 800f330:	481c      	ldr	r0, [pc, #112]	@ (800f3a4 <mem_trim+0x200>)
 800f332:	f00c fef5 	bl	801c120 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f336:	89fb      	ldrh	r3, [r7, #14]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fd4f 	bl	800eddc <ptr_to_mem>
 800f33e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f340:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b4 <mem_trim+0x210>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	429a      	cmp	r2, r3
 800f348:	d202      	bcs.n	800f350 <mem_trim+0x1ac>
      lfree = mem2;
 800f34a:	4a1a      	ldr	r2, [pc, #104]	@ (800f3b4 <mem_trim+0x210>)
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	2200      	movs	r2, #0
 800f354:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	881a      	ldrh	r2, [r3, #0]
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	8afa      	ldrh	r2, [r7, #22]
 800f362:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	89fa      	ldrh	r2, [r7, #14]
 800f368:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f372:	d007      	beq.n	800f384 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	881b      	ldrh	r3, [r3, #0]
 800f378:	4618      	mov	r0, r3
 800f37a:	f7ff fd2f 	bl	800eddc <ptr_to_mem>
 800f37e:	4602      	mov	r2, r0
 800f380:	89fb      	ldrh	r3, [r7, #14]
 800f382:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f384:	4809      	ldr	r0, [pc, #36]	@ (800f3ac <mem_trim+0x208>)
 800f386:	f00b ffe8 	bl	801b35a <sys_mutex_unlock>
  return rmem;
 800f38a:	687b      	ldr	r3, [r7, #4]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3720      	adds	r7, #32
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	2000f2c8 	.word	0x2000f2c8
 800f398:	2000f2cc 	.word	0x2000f2cc
 800f39c:	0801ee30 	.word	0x0801ee30
 800f3a0:	0801efbc 	.word	0x0801efbc
 800f3a4:	0801ee78 	.word	0x0801ee78
 800f3a8:	0801efd4 	.word	0x0801efd4
 800f3ac:	2000f2d0 	.word	0x2000f2d0
 800f3b0:	0801eff4 	.word	0x0801eff4
 800f3b4:	2000f2d4 	.word	0x2000f2d4

0800f3b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b088      	sub	sp, #32
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f3c2:	88fb      	ldrh	r3, [r7, #6]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d101      	bne.n	800f3cc <mem_malloc+0x14>
    return NULL;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e0e2      	b.n	800f592 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f3cc:	88fb      	ldrh	r3, [r7, #6]
 800f3ce:	3303      	adds	r3, #3
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f023 0303 	bic.w	r3, r3, #3
 800f3d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f3d8:	8bbb      	ldrh	r3, [r7, #28]
 800f3da:	2b0b      	cmp	r3, #11
 800f3dc:	d801      	bhi.n	800f3e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f3de:	230c      	movs	r3, #12
 800f3e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f3e2:	8bbb      	ldrh	r3, [r7, #28]
 800f3e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f3e8:	d803      	bhi.n	800f3f2 <mem_malloc+0x3a>
 800f3ea:	8bba      	ldrh	r2, [r7, #28]
 800f3ec:	88fb      	ldrh	r3, [r7, #6]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d201      	bcs.n	800f3f6 <mem_malloc+0x3e>
    return NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e0cd      	b.n	800f592 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f3f6:	4869      	ldr	r0, [pc, #420]	@ (800f59c <mem_malloc+0x1e4>)
 800f3f8:	f00b ffa0 	bl	801b33c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f3fc:	4b68      	ldr	r3, [pc, #416]	@ (800f5a0 <mem_malloc+0x1e8>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff fcfd 	bl	800ee00 <mem_to_ptr>
 800f406:	4603      	mov	r3, r0
 800f408:	83fb      	strh	r3, [r7, #30]
 800f40a:	e0b7      	b.n	800f57c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f40c:	8bfb      	ldrh	r3, [r7, #30]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fce4 	bl	800eddc <ptr_to_mem>
 800f414:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	791b      	ldrb	r3, [r3, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f040 80a7 	bne.w	800f56e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	881b      	ldrh	r3, [r3, #0]
 800f424:	461a      	mov	r2, r3
 800f426:	8bfb      	ldrh	r3, [r7, #30]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	f1a3 0208 	sub.w	r2, r3, #8
 800f42e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f430:	429a      	cmp	r2, r3
 800f432:	f0c0 809c 	bcc.w	800f56e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	461a      	mov	r2, r3
 800f43c:	8bfb      	ldrh	r3, [r7, #30]
 800f43e:	1ad3      	subs	r3, r2, r3
 800f440:	f1a3 0208 	sub.w	r2, r3, #8
 800f444:	8bbb      	ldrh	r3, [r7, #28]
 800f446:	3314      	adds	r3, #20
 800f448:	429a      	cmp	r2, r3
 800f44a:	d333      	bcc.n	800f4b4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f44c:	8bfa      	ldrh	r2, [r7, #30]
 800f44e:	8bbb      	ldrh	r3, [r7, #28]
 800f450:	4413      	add	r3, r2
 800f452:	b29b      	uxth	r3, r3
 800f454:	3308      	adds	r3, #8
 800f456:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f458:	8a7b      	ldrh	r3, [r7, #18]
 800f45a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f45e:	d106      	bne.n	800f46e <mem_malloc+0xb6>
 800f460:	4b50      	ldr	r3, [pc, #320]	@ (800f5a4 <mem_malloc+0x1ec>)
 800f462:	f240 3287 	movw	r2, #903	@ 0x387
 800f466:	4950      	ldr	r1, [pc, #320]	@ (800f5a8 <mem_malloc+0x1f0>)
 800f468:	4850      	ldr	r0, [pc, #320]	@ (800f5ac <mem_malloc+0x1f4>)
 800f46a:	f00c fe59 	bl	801c120 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f46e:	8a7b      	ldrh	r3, [r7, #18]
 800f470:	4618      	mov	r0, r3
 800f472:	f7ff fcb3 	bl	800eddc <ptr_to_mem>
 800f476:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2200      	movs	r2, #0
 800f47c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	881a      	ldrh	r2, [r3, #0]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	8bfa      	ldrh	r2, [r7, #30]
 800f48a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	8a7a      	ldrh	r2, [r7, #18]
 800f490:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	2201      	movs	r2, #1
 800f496:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f4a0:	d00b      	beq.n	800f4ba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	881b      	ldrh	r3, [r3, #0]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff fc98 	bl	800eddc <ptr_to_mem>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	8a7b      	ldrh	r3, [r7, #18]
 800f4b0:	8053      	strh	r3, [r2, #2]
 800f4b2:	e002      	b.n	800f4ba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f4ba:	4b39      	ldr	r3, [pc, #228]	@ (800f5a0 <mem_malloc+0x1e8>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d127      	bne.n	800f514 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f4c4:	4b36      	ldr	r3, [pc, #216]	@ (800f5a0 <mem_malloc+0x1e8>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f4ca:	e005      	b.n	800f4d8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff fc83 	bl	800eddc <ptr_to_mem>
 800f4d6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	791b      	ldrb	r3, [r3, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d004      	beq.n	800f4ea <mem_malloc+0x132>
 800f4e0:	4b33      	ldr	r3, [pc, #204]	@ (800f5b0 <mem_malloc+0x1f8>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d1f0      	bne.n	800f4cc <mem_malloc+0x114>
          }
          lfree = cur;
 800f4ea:	4a2d      	ldr	r2, [pc, #180]	@ (800f5a0 <mem_malloc+0x1e8>)
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f4f0:	4b2b      	ldr	r3, [pc, #172]	@ (800f5a0 <mem_malloc+0x1e8>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	4b2e      	ldr	r3, [pc, #184]	@ (800f5b0 <mem_malloc+0x1f8>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d00b      	beq.n	800f514 <mem_malloc+0x15c>
 800f4fc:	4b28      	ldr	r3, [pc, #160]	@ (800f5a0 <mem_malloc+0x1e8>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	791b      	ldrb	r3, [r3, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d006      	beq.n	800f514 <mem_malloc+0x15c>
 800f506:	4b27      	ldr	r3, [pc, #156]	@ (800f5a4 <mem_malloc+0x1ec>)
 800f508:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f50c:	4929      	ldr	r1, [pc, #164]	@ (800f5b4 <mem_malloc+0x1fc>)
 800f50e:	4827      	ldr	r0, [pc, #156]	@ (800f5ac <mem_malloc+0x1f4>)
 800f510:	f00c fe06 	bl	801c120 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f514:	4821      	ldr	r0, [pc, #132]	@ (800f59c <mem_malloc+0x1e4>)
 800f516:	f00b ff20 	bl	801b35a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f51a:	8bba      	ldrh	r2, [r7, #28]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	4413      	add	r3, r2
 800f520:	3308      	adds	r3, #8
 800f522:	4a23      	ldr	r2, [pc, #140]	@ (800f5b0 <mem_malloc+0x1f8>)
 800f524:	6812      	ldr	r2, [r2, #0]
 800f526:	4293      	cmp	r3, r2
 800f528:	d906      	bls.n	800f538 <mem_malloc+0x180>
 800f52a:	4b1e      	ldr	r3, [pc, #120]	@ (800f5a4 <mem_malloc+0x1ec>)
 800f52c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f530:	4921      	ldr	r1, [pc, #132]	@ (800f5b8 <mem_malloc+0x200>)
 800f532:	481e      	ldr	r0, [pc, #120]	@ (800f5ac <mem_malloc+0x1f4>)
 800f534:	f00c fdf4 	bl	801c120 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	f003 0303 	and.w	r3, r3, #3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d006      	beq.n	800f550 <mem_malloc+0x198>
 800f542:	4b18      	ldr	r3, [pc, #96]	@ (800f5a4 <mem_malloc+0x1ec>)
 800f544:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f548:	491c      	ldr	r1, [pc, #112]	@ (800f5bc <mem_malloc+0x204>)
 800f54a:	4818      	ldr	r0, [pc, #96]	@ (800f5ac <mem_malloc+0x1f4>)
 800f54c:	f00c fde8 	bl	801c120 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	f003 0303 	and.w	r3, r3, #3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d006      	beq.n	800f568 <mem_malloc+0x1b0>
 800f55a:	4b12      	ldr	r3, [pc, #72]	@ (800f5a4 <mem_malloc+0x1ec>)
 800f55c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f560:	4917      	ldr	r1, [pc, #92]	@ (800f5c0 <mem_malloc+0x208>)
 800f562:	4812      	ldr	r0, [pc, #72]	@ (800f5ac <mem_malloc+0x1f4>)
 800f564:	f00c fddc 	bl	801c120 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	3308      	adds	r3, #8
 800f56c:	e011      	b.n	800f592 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f56e:	8bfb      	ldrh	r3, [r7, #30]
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff fc33 	bl	800eddc <ptr_to_mem>
 800f576:	4603      	mov	r3, r0
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f57c:	8bfa      	ldrh	r2, [r7, #30]
 800f57e:	8bbb      	ldrh	r3, [r7, #28]
 800f580:	f5c3 43a0 	rsb	r3, r3, #20480	@ 0x5000
 800f584:	429a      	cmp	r2, r3
 800f586:	f4ff af41 	bcc.w	800f40c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f58a:	4804      	ldr	r0, [pc, #16]	@ (800f59c <mem_malloc+0x1e4>)
 800f58c:	f00b fee5 	bl	801b35a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3720      	adds	r7, #32
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	2000f2d0 	.word	0x2000f2d0
 800f5a0:	2000f2d4 	.word	0x2000f2d4
 800f5a4:	0801ee30 	.word	0x0801ee30
 800f5a8:	0801eff4 	.word	0x0801eff4
 800f5ac:	0801ee78 	.word	0x0801ee78
 800f5b0:	2000f2cc 	.word	0x2000f2cc
 800f5b4:	0801f008 	.word	0x0801f008
 800f5b8:	0801f024 	.word	0x0801f024
 800f5bc:	0801f054 	.word	0x0801f054
 800f5c0:	0801f084 	.word	0x0801f084

0800f5c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	3303      	adds	r3, #3
 800f5da:	f023 0303 	bic.w	r3, r3, #3
 800f5de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	60fb      	str	r3, [r7, #12]
 800f5e4:	e011      	b.n	800f60a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	889b      	ldrh	r3, [r3, #4]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	4413      	add	r3, r2
 800f602:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	3301      	adds	r3, #1
 800f608:	60fb      	str	r3, [r7, #12]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	88db      	ldrh	r3, [r3, #6]
 800f60e:	461a      	mov	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	4293      	cmp	r3, r2
 800f614:	dbe7      	blt.n	800f5e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f616:	bf00      	nop
 800f618:	bf00      	nop
 800f61a:	3714      	adds	r7, #20
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f62a:	2300      	movs	r3, #0
 800f62c:	80fb      	strh	r3, [r7, #6]
 800f62e:	e009      	b.n	800f644 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f630:	88fb      	ldrh	r3, [r7, #6]
 800f632:	4a08      	ldr	r2, [pc, #32]	@ (800f654 <memp_init+0x30>)
 800f634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f638:	4618      	mov	r0, r3
 800f63a:	f7ff ffc3 	bl	800f5c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f63e:	88fb      	ldrh	r3, [r7, #6]
 800f640:	3301      	adds	r3, #1
 800f642:	80fb      	strh	r3, [r7, #6]
 800f644:	88fb      	ldrh	r3, [r7, #6]
 800f646:	2b0c      	cmp	r3, #12
 800f648:	d9f2      	bls.n	800f630 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f64a:	bf00      	nop
 800f64c:	bf00      	nop
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	0806d9dc 	.word	0x0806d9dc

0800f658 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f660:	f00b fea6 	bl	801b3b0 <sys_arch_protect>
 800f664:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d015      	beq.n	800f6a0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	6812      	ldr	r2, [r2, #0]
 800f67c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	f003 0303 	and.w	r3, r3, #3
 800f684:	2b00      	cmp	r3, #0
 800f686:	d006      	beq.n	800f696 <do_memp_malloc_pool+0x3e>
 800f688:	4b09      	ldr	r3, [pc, #36]	@ (800f6b0 <do_memp_malloc_pool+0x58>)
 800f68a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800f68e:	4909      	ldr	r1, [pc, #36]	@ (800f6b4 <do_memp_malloc_pool+0x5c>)
 800f690:	4809      	ldr	r0, [pc, #36]	@ (800f6b8 <do_memp_malloc_pool+0x60>)
 800f692:	f00c fd45 	bl	801c120 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f00b fe98 	bl	801b3cc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	e003      	b.n	800f6a8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f00b fe93 	bl	801b3cc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	0801f140 	.word	0x0801f140
 800f6b4:	0801f170 	.word	0x0801f170
 800f6b8:	0801f194 	.word	0x0801f194

0800f6bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	2b0c      	cmp	r3, #12
 800f6ca:	d908      	bls.n	800f6de <memp_malloc+0x22>
 800f6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f6f8 <memp_malloc+0x3c>)
 800f6ce:	f240 1257 	movw	r2, #343	@ 0x157
 800f6d2:	490a      	ldr	r1, [pc, #40]	@ (800f6fc <memp_malloc+0x40>)
 800f6d4:	480a      	ldr	r0, [pc, #40]	@ (800f700 <memp_malloc+0x44>)
 800f6d6:	f00c fd23 	bl	801c120 <iprintf>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e008      	b.n	800f6f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	4a08      	ldr	r2, [pc, #32]	@ (800f704 <memp_malloc+0x48>)
 800f6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff ffb6 	bl	800f658 <do_memp_malloc_pool>
 800f6ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	0801f140 	.word	0x0801f140
 800f6fc:	0801f1d0 	.word	0x0801f1d0
 800f700:	0801f194 	.word	0x0801f194
 800f704:	0806d9dc 	.word	0x0806d9dc

0800f708 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	f003 0303 	and.w	r3, r3, #3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d006      	beq.n	800f72a <do_memp_free_pool+0x22>
 800f71c:	4b0d      	ldr	r3, [pc, #52]	@ (800f754 <do_memp_free_pool+0x4c>)
 800f71e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800f722:	490d      	ldr	r1, [pc, #52]	@ (800f758 <do_memp_free_pool+0x50>)
 800f724:	480d      	ldr	r0, [pc, #52]	@ (800f75c <do_memp_free_pool+0x54>)
 800f726:	f00c fcfb 	bl	801c120 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f72e:	f00b fe3f 	bl	801b3b0 <sys_arch_protect>
 800f732:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f746:	68b8      	ldr	r0, [r7, #8]
 800f748:	f00b fe40 	bl	801b3cc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f74c:	bf00      	nop
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	0801f140 	.word	0x0801f140
 800f758:	0801f1f0 	.word	0x0801f1f0
 800f75c:	0801f194 	.word	0x0801f194

0800f760 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	4603      	mov	r3, r0
 800f768:	6039      	str	r1, [r7, #0]
 800f76a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f76c:	79fb      	ldrb	r3, [r7, #7]
 800f76e:	2b0c      	cmp	r3, #12
 800f770:	d907      	bls.n	800f782 <memp_free+0x22>
 800f772:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a4 <memp_free+0x44>)
 800f774:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800f778:	490b      	ldr	r1, [pc, #44]	@ (800f7a8 <memp_free+0x48>)
 800f77a:	480c      	ldr	r0, [pc, #48]	@ (800f7ac <memp_free+0x4c>)
 800f77c:	f00c fcd0 	bl	801c120 <iprintf>
 800f780:	e00c      	b.n	800f79c <memp_free+0x3c>

  if (mem == NULL) {
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d008      	beq.n	800f79a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f788:	79fb      	ldrb	r3, [r7, #7]
 800f78a:	4a09      	ldr	r2, [pc, #36]	@ (800f7b0 <memp_free+0x50>)
 800f78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f790:	6839      	ldr	r1, [r7, #0]
 800f792:	4618      	mov	r0, r3
 800f794:	f7ff ffb8 	bl	800f708 <do_memp_free_pool>
 800f798:	e000      	b.n	800f79c <memp_free+0x3c>
    return;
 800f79a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	0801f140 	.word	0x0801f140
 800f7a8:	0801f210 	.word	0x0801f210
 800f7ac:	0801f194 	.word	0x0801f194
 800f7b0:	0806d9dc 	.word	0x0806d9dc

0800f7b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f7b8:	bf00      	nop
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr
	...

0800f7c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d108      	bne.n	800f7ea <netif_add+0x26>
 800f7d8:	4b5b      	ldr	r3, [pc, #364]	@ (800f948 <netif_add+0x184>)
 800f7da:	f240 1227 	movw	r2, #295	@ 0x127
 800f7de:	495b      	ldr	r1, [pc, #364]	@ (800f94c <netif_add+0x188>)
 800f7e0:	485b      	ldr	r0, [pc, #364]	@ (800f950 <netif_add+0x18c>)
 800f7e2:	f00c fc9d 	bl	801c120 <iprintf>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	e0a9      	b.n	800f93e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d108      	bne.n	800f802 <netif_add+0x3e>
 800f7f0:	4b55      	ldr	r3, [pc, #340]	@ (800f948 <netif_add+0x184>)
 800f7f2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800f7f6:	4957      	ldr	r1, [pc, #348]	@ (800f954 <netif_add+0x190>)
 800f7f8:	4855      	ldr	r0, [pc, #340]	@ (800f950 <netif_add+0x18c>)
 800f7fa:	f00c fc91 	bl	801c120 <iprintf>
 800f7fe:	2300      	movs	r3, #0
 800f800:	e09d      	b.n	800f93e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d101      	bne.n	800f80c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f808:	4b53      	ldr	r3, [pc, #332]	@ (800f958 <netif_add+0x194>)
 800f80a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d101      	bne.n	800f816 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f812:	4b51      	ldr	r3, [pc, #324]	@ (800f958 <netif_add+0x194>)
 800f814:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d101      	bne.n	800f820 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f81c:	4b4e      	ldr	r3, [pc, #312]	@ (800f958 <netif_add+0x194>)
 800f81e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2200      	movs	r2, #0
 800f824:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	4a49      	ldr	r2, [pc, #292]	@ (800f95c <netif_add+0x198>)
 800f836:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2200      	movs	r2, #0
 800f83c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3324      	adds	r3, #36	@ 0x24
 800f84a:	2204      	movs	r2, #4
 800f84c:	2100      	movs	r1, #0
 800f84e:	4618      	mov	r0, r3
 800f850:	f00c fdc8 	bl	801c3e4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2200      	movs	r2, #0
 800f858:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6a3a      	ldr	r2, [r7, #32]
 800f85e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f860:	4b3f      	ldr	r3, [pc, #252]	@ (800f960 <netif_add+0x19c>)
 800f862:	781a      	ldrb	r2, [r3, #0]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f86e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	68b9      	ldr	r1, [r7, #8]
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f000 f914 	bl	800faa4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	4798      	blx	r3
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <netif_add+0xc8>
    return NULL;
 800f888:	2300      	movs	r3, #0
 800f88a:	e058      	b.n	800f93e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f892:	2bff      	cmp	r3, #255	@ 0xff
 800f894:	d103      	bne.n	800f89e <netif_add+0xda>
        netif->num = 0;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f8a2:	4b30      	ldr	r3, [pc, #192]	@ (800f964 <netif_add+0x1a0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	617b      	str	r3, [r7, #20]
 800f8a8:	e02b      	b.n	800f902 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d106      	bne.n	800f8c0 <netif_add+0xfc>
 800f8b2:	4b25      	ldr	r3, [pc, #148]	@ (800f948 <netif_add+0x184>)
 800f8b4:	f240 128b 	movw	r2, #395	@ 0x18b
 800f8b8:	492b      	ldr	r1, [pc, #172]	@ (800f968 <netif_add+0x1a4>)
 800f8ba:	4825      	ldr	r0, [pc, #148]	@ (800f950 <netif_add+0x18c>)
 800f8bc:	f00c fc30 	bl	801c120 <iprintf>
        num_netifs++;
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	2bff      	cmp	r3, #255	@ 0xff
 800f8ca:	dd06      	ble.n	800f8da <netif_add+0x116>
 800f8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800f948 <netif_add+0x184>)
 800f8ce:	f240 128d 	movw	r2, #397	@ 0x18d
 800f8d2:	4926      	ldr	r1, [pc, #152]	@ (800f96c <netif_add+0x1a8>)
 800f8d4:	481e      	ldr	r0, [pc, #120]	@ (800f950 <netif_add+0x18c>)
 800f8d6:	f00c fc23 	bl	801c120 <iprintf>
        if (netif2->num == netif->num) {
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d108      	bne.n	800f8fc <netif_add+0x138>
          netif->num++;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800f8fa:	e005      	b.n	800f908 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	617b      	str	r3, [r7, #20]
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1d0      	bne.n	800f8aa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1be      	bne.n	800f88c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f914:	2bfe      	cmp	r3, #254	@ 0xfe
 800f916:	d103      	bne.n	800f920 <netif_add+0x15c>
    netif_num = 0;
 800f918:	4b11      	ldr	r3, [pc, #68]	@ (800f960 <netif_add+0x19c>)
 800f91a:	2200      	movs	r2, #0
 800f91c:	701a      	strb	r2, [r3, #0]
 800f91e:	e006      	b.n	800f92e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f926:	3301      	adds	r3, #1
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	4b0d      	ldr	r3, [pc, #52]	@ (800f960 <netif_add+0x19c>)
 800f92c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f92e:	4b0d      	ldr	r3, [pc, #52]	@ (800f964 <netif_add+0x1a0>)
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f936:	4a0b      	ldr	r2, [pc, #44]	@ (800f964 <netif_add+0x1a0>)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f93c:	68fb      	ldr	r3, [r7, #12]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3718      	adds	r7, #24
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	0801f22c 	.word	0x0801f22c
 800f94c:	0801f2c0 	.word	0x0801f2c0
 800f950:	0801f27c 	.word	0x0801f27c
 800f954:	0801f2dc 	.word	0x0801f2dc
 800f958:	0806da60 	.word	0x0806da60
 800f95c:	0800fd65 	.word	0x0800fd65
 800f960:	20013d0c 	.word	0x20013d0c
 800f964:	20013d04 	.word	0x20013d04
 800f968:	0801f300 	.word	0x0801f300
 800f96c:	0801f314 	.word	0x0801f314

0800f970 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f97a:	6839      	ldr	r1, [r7, #0]
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f002 fc21 	bl	80121c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f982:	6839      	ldr	r1, [r7, #0]
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f007 f933 	bl	8016bf0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f98a:	bf00      	nop
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <netif_do_set_ipaddr+0x20>
 800f9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800fa1c <netif_do_set_ipaddr+0x88>)
 800f9a8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800f9ac:	491c      	ldr	r1, [pc, #112]	@ (800fa20 <netif_do_set_ipaddr+0x8c>)
 800f9ae:	481d      	ldr	r0, [pc, #116]	@ (800fa24 <netif_do_set_ipaddr+0x90>)
 800f9b0:	f00c fbb6 	bl	801c120 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <netif_do_set_ipaddr+0x34>
 800f9ba:	4b18      	ldr	r3, [pc, #96]	@ (800fa1c <netif_do_set_ipaddr+0x88>)
 800f9bc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800f9c0:	4917      	ldr	r1, [pc, #92]	@ (800fa20 <netif_do_set_ipaddr+0x8c>)
 800f9c2:	4818      	ldr	r0, [pc, #96]	@ (800fa24 <netif_do_set_ipaddr+0x90>)
 800f9c4:	f00c fbac 	bl	801c120 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d01c      	beq.n	800fa10 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3304      	adds	r3, #4
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f9e6:	f107 0314 	add.w	r3, r7, #20
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff ffbf 	bl	800f970 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d002      	beq.n	800f9fe <netif_do_set_ipaddr+0x6a>
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	e000      	b.n	800fa00 <netif_do_set_ipaddr+0x6c>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fa04:	2101      	movs	r1, #1
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f000 f8d2 	bl	800fbb0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e000      	b.n	800fa12 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3718      	adds	r7, #24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	0801f22c 	.word	0x0801f22c
 800fa20:	0801f344 	.word	0x0801f344
 800fa24:	0801f27c 	.word	0x0801f27c

0800fa28 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d00a      	beq.n	800fa58 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <netif_do_set_netmask+0x26>
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	e000      	b.n	800fa50 <netif_do_set_netmask+0x28>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fa54:	2301      	movs	r3, #1
 800fa56:	e000      	b.n	800fa5a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b085      	sub	sp, #20
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	60f8      	str	r0, [r7, #12]
 800fa6e:	60b9      	str	r1, [r7, #8]
 800fa70:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	330c      	adds	r3, #12
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d00a      	beq.n	800fa96 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d002      	beq.n	800fa8c <netif_do_set_gw+0x26>
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	e000      	b.n	800fa8e <netif_do_set_gw+0x28>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fa92:	2301      	movs	r3, #1
 800fa94:	e000      	b.n	800fa98 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b088      	sub	sp, #32
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	607a      	str	r2, [r7, #4]
 800fab0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fab2:	2300      	movs	r3, #0
 800fab4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fab6:	2300      	movs	r3, #0
 800fab8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fac0:	4b1c      	ldr	r3, [pc, #112]	@ (800fb34 <netif_set_addr+0x90>)
 800fac2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800faca:	4b1a      	ldr	r3, [pc, #104]	@ (800fb34 <netif_set_addr+0x90>)
 800facc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d101      	bne.n	800fad8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fad4:	4b17      	ldr	r3, [pc, #92]	@ (800fb34 <netif_set_addr+0x90>)
 800fad6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d003      	beq.n	800fae6 <netif_set_addr+0x42>
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <netif_set_addr+0x46>
 800fae6:	2301      	movs	r3, #1
 800fae8:	e000      	b.n	800faec <netif_set_addr+0x48>
 800faea:	2300      	movs	r3, #0
 800faec:	617b      	str	r3, [r7, #20]
  if (remove) {
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d006      	beq.n	800fb02 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800faf4:	f107 0310 	add.w	r3, r7, #16
 800faf8:	461a      	mov	r2, r3
 800fafa:	68b9      	ldr	r1, [r7, #8]
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7ff ff49 	bl	800f994 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fb02:	69fa      	ldr	r2, [r7, #28]
 800fb04:	6879      	ldr	r1, [r7, #4]
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	f7ff ff8e 	bl	800fa28 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fb0c:	69ba      	ldr	r2, [r7, #24]
 800fb0e:	6839      	ldr	r1, [r7, #0]
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff ffa8 	bl	800fa66 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d106      	bne.n	800fb2a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fb1c:	f107 0310 	add.w	r3, r7, #16
 800fb20:	461a      	mov	r2, r3
 800fb22:	68b9      	ldr	r1, [r7, #8]
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f7ff ff35 	bl	800f994 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fb2a:	bf00      	nop
 800fb2c:	3720      	adds	r7, #32
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	0806da60 	.word	0x0806da60

0800fb38 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fb40:	4a04      	ldr	r2, [pc, #16]	@ (800fb54 <netif_set_default+0x1c>)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fb46:	bf00      	nop
 800fb48:	370c      	adds	r7, #12
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	20013d08 	.word	0x20013d08

0800fb58 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d107      	bne.n	800fb76 <netif_set_up+0x1e>
 800fb66:	4b0f      	ldr	r3, [pc, #60]	@ (800fba4 <netif_set_up+0x4c>)
 800fb68:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800fb6c:	490e      	ldr	r1, [pc, #56]	@ (800fba8 <netif_set_up+0x50>)
 800fb6e:	480f      	ldr	r0, [pc, #60]	@ (800fbac <netif_set_up+0x54>)
 800fb70:	f00c fad6 	bl	801c120 <iprintf>
 800fb74:	e013      	b.n	800fb9e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10c      	bne.n	800fb9e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fb8a:	f043 0301 	orr.w	r3, r3, #1
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb96:	2103      	movs	r1, #3
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f809 	bl	800fbb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	0801f22c 	.word	0x0801f22c
 800fba8:	0801f3b4 	.word	0x0801f3b4
 800fbac:	0801f27c 	.word	0x0801f27c

0800fbb0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d106      	bne.n	800fbd0 <netif_issue_reports+0x20>
 800fbc2:	4b18      	ldr	r3, [pc, #96]	@ (800fc24 <netif_issue_reports+0x74>)
 800fbc4:	f240 326d 	movw	r2, #877	@ 0x36d
 800fbc8:	4917      	ldr	r1, [pc, #92]	@ (800fc28 <netif_issue_reports+0x78>)
 800fbca:	4818      	ldr	r0, [pc, #96]	@ (800fc2c <netif_issue_reports+0x7c>)
 800fbcc:	f00c faa8 	bl	801c120 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fbd6:	f003 0304 	and.w	r3, r3, #4
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d01e      	beq.n	800fc1c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fbe4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d017      	beq.n	800fc1c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbec:	78fb      	ldrb	r3, [r7, #3]
 800fbee:	f003 0301 	and.w	r3, r3, #1
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d013      	beq.n	800fc1e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	3304      	adds	r3, #4
 800fbfa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00e      	beq.n	800fc1e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fc06:	f003 0308 	and.w	r3, r3, #8
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d007      	beq.n	800fc1e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	3304      	adds	r3, #4
 800fc12:	4619      	mov	r1, r3
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f009 fe6b 	bl	80198f0 <etharp_request>
 800fc1a:	e000      	b.n	800fc1e <netif_issue_reports+0x6e>
    return;
 800fc1c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	0801f22c 	.word	0x0801f22c
 800fc28:	0801f3d0 	.word	0x0801f3d0
 800fc2c:	0801f27c 	.word	0x0801f27c

0800fc30 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d107      	bne.n	800fc4e <netif_set_down+0x1e>
 800fc3e:	4b12      	ldr	r3, [pc, #72]	@ (800fc88 <netif_set_down+0x58>)
 800fc40:	f240 329b 	movw	r2, #923	@ 0x39b
 800fc44:	4911      	ldr	r1, [pc, #68]	@ (800fc8c <netif_set_down+0x5c>)
 800fc46:	4812      	ldr	r0, [pc, #72]	@ (800fc90 <netif_set_down+0x60>)
 800fc48:	f00c fa6a 	bl	801c120 <iprintf>
 800fc4c:	e019      	b.n	800fc82 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fc54:	f003 0301 	and.w	r3, r3, #1
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d012      	beq.n	800fc82 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fc62:	f023 0301 	bic.w	r3, r3, #1
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fc74:	f003 0308 	and.w	r3, r3, #8
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d002      	beq.n	800fc82 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f009 f9f1 	bl	8019064 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	0801f22c 	.word	0x0801f22c
 800fc8c:	0801f3f4 	.word	0x0801f3f4
 800fc90:	0801f27c 	.word	0x0801f27c

0800fc94 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d107      	bne.n	800fcb2 <netif_set_link_up+0x1e>
 800fca2:	4b15      	ldr	r3, [pc, #84]	@ (800fcf8 <netif_set_link_up+0x64>)
 800fca4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800fca8:	4914      	ldr	r1, [pc, #80]	@ (800fcfc <netif_set_link_up+0x68>)
 800fcaa:	4815      	ldr	r0, [pc, #84]	@ (800fd00 <netif_set_link_up+0x6c>)
 800fcac:	f00c fa38 	bl	801c120 <iprintf>
 800fcb0:	e01e      	b.n	800fcf0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fcb8:	f003 0304 	and.w	r3, r3, #4
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d117      	bne.n	800fcf0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fcc6:	f043 0304 	orr.w	r3, r3, #4
 800fcca:	b2da      	uxtb	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f007 fbb6 	bl	8017444 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fcd8:	2103      	movs	r1, #3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff ff68 	bl	800fbb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	69db      	ldr	r3, [r3, #28]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d003      	beq.n	800fcf0 <netif_set_link_up+0x5c>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	69db      	ldr	r3, [r3, #28]
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	0801f22c 	.word	0x0801f22c
 800fcfc:	0801f414 	.word	0x0801f414
 800fd00:	0801f27c 	.word	0x0801f27c

0800fd04 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d107      	bne.n	800fd22 <netif_set_link_down+0x1e>
 800fd12:	4b11      	ldr	r3, [pc, #68]	@ (800fd58 <netif_set_link_down+0x54>)
 800fd14:	f240 4206 	movw	r2, #1030	@ 0x406
 800fd18:	4910      	ldr	r1, [pc, #64]	@ (800fd5c <netif_set_link_down+0x58>)
 800fd1a:	4811      	ldr	r0, [pc, #68]	@ (800fd60 <netif_set_link_down+0x5c>)
 800fd1c:	f00c fa00 	bl	801c120 <iprintf>
 800fd20:	e017      	b.n	800fd52 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fd28:	f003 0304 	and.w	r3, r3, #4
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d010      	beq.n	800fd52 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fd36:	f023 0304 	bic.w	r3, r3, #4
 800fd3a:	b2da      	uxtb	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <netif_set_link_down+0x4e>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	69db      	ldr	r3, [r3, #28]
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	0801f22c 	.word	0x0801f22c
 800fd5c:	0801f438 	.word	0x0801f438
 800fd60:	0801f27c 	.word	0x0801f27c

0800fd64 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b085      	sub	sp, #20
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fd70:	f06f 030b 	mvn.w	r3, #11
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4603      	mov	r3, r0
 800fd88:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fd8a:	79fb      	ldrb	r3, [r7, #7]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d013      	beq.n	800fdb8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fd90:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc8 <netif_get_by_index+0x48>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	60fb      	str	r3, [r7, #12]
 800fd96:	e00c      	b.n	800fdb2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fd9e:	3301      	adds	r3, #1
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	79fa      	ldrb	r2, [r7, #7]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d101      	bne.n	800fdac <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	e006      	b.n	800fdba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	60fb      	str	r3, [r7, #12]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1ef      	bne.n	800fd98 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop
 800fdc8:	20013d04 	.word	0x20013d04

0800fdcc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fdd2:	f00b faed 	bl	801b3b0 <sys_arch_protect>
 800fdd6:	6038      	str	r0, [r7, #0]
 800fdd8:	4b0d      	ldr	r3, [pc, #52]	@ (800fe10 <pbuf_free_ooseq+0x44>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	701a      	strb	r2, [r3, #0]
 800fdde:	6838      	ldr	r0, [r7, #0]
 800fde0:	f00b faf4 	bl	801b3cc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fde4:	4b0b      	ldr	r3, [pc, #44]	@ (800fe14 <pbuf_free_ooseq+0x48>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	607b      	str	r3, [r7, #4]
 800fdea:	e00a      	b.n	800fe02 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d003      	beq.n	800fdfc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f002 fa23 	bl	8012240 <tcp_free_ooseq>
      return;
 800fdfa:	e005      	b.n	800fe08 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	607b      	str	r3, [r7, #4]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1f1      	bne.n	800fdec <pbuf_free_ooseq+0x20>
    }
  }
}
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	20013d0d 	.word	0x20013d0d
 800fe14:	20013d1c 	.word	0x20013d1c

0800fe18 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fe20:	f7ff ffd4 	bl	800fdcc <pbuf_free_ooseq>
}
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fe32:	f00b fabd 	bl	801b3b0 <sys_arch_protect>
 800fe36:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fe38:	4b0f      	ldr	r3, [pc, #60]	@ (800fe78 <pbuf_pool_is_empty+0x4c>)
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fe3e:	4b0e      	ldr	r3, [pc, #56]	@ (800fe78 <pbuf_pool_is_empty+0x4c>)
 800fe40:	2201      	movs	r2, #1
 800fe42:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f00b fac1 	bl	801b3cc <sys_arch_unprotect>

  if (!queued) {
 800fe4a:	78fb      	ldrb	r3, [r7, #3]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d10f      	bne.n	800fe70 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fe50:	2100      	movs	r1, #0
 800fe52:	480a      	ldr	r0, [pc, #40]	@ (800fe7c <pbuf_pool_is_empty+0x50>)
 800fe54:	f7fe fd62 	bl	800e91c <tcpip_try_callback>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d008      	beq.n	800fe70 <pbuf_pool_is_empty+0x44>
 800fe5e:	f00b faa7 	bl	801b3b0 <sys_arch_protect>
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	4b04      	ldr	r3, [pc, #16]	@ (800fe78 <pbuf_pool_is_empty+0x4c>)
 800fe66:	2200      	movs	r2, #0
 800fe68:	701a      	strb	r2, [r3, #0]
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f00b faae 	bl	801b3cc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	20013d0d 	.word	0x20013d0d
 800fe7c:	0800fe19 	.word	0x0800fe19

0800fe80 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	460b      	mov	r3, r1
 800fe90:	80fb      	strh	r3, [r7, #6]
 800fe92:	4613      	mov	r3, r2
 800fe94:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	88fa      	ldrh	r2, [r7, #6]
 800fea6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	88ba      	ldrh	r2, [r7, #4]
 800feac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800feae:	8b3b      	ldrh	r3, [r7, #24]
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	7f3a      	ldrb	r2, [r7, #28]
 800feba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2201      	movs	r2, #1
 800fec0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	73da      	strb	r2, [r3, #15]
}
 800fec8:	bf00      	nop
 800feca:	3714      	adds	r7, #20
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b08c      	sub	sp, #48	@ 0x30
 800fed8:	af02      	add	r7, sp, #8
 800feda:	4603      	mov	r3, r0
 800fedc:	71fb      	strb	r3, [r7, #7]
 800fede:	460b      	mov	r3, r1
 800fee0:	80bb      	strh	r3, [r7, #4]
 800fee2:	4613      	mov	r3, r2
 800fee4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fee6:	79fb      	ldrb	r3, [r7, #7]
 800fee8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800feea:	887b      	ldrh	r3, [r7, #2]
 800feec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800fef0:	f000 8082 	beq.w	800fff8 <pbuf_alloc+0x124>
 800fef4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800fef8:	f300 80ca 	bgt.w	8010090 <pbuf_alloc+0x1bc>
 800fefc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ff00:	d010      	beq.n	800ff24 <pbuf_alloc+0x50>
 800ff02:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ff06:	f300 80c3 	bgt.w	8010090 <pbuf_alloc+0x1bc>
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d002      	beq.n	800ff14 <pbuf_alloc+0x40>
 800ff0e:	2b41      	cmp	r3, #65	@ 0x41
 800ff10:	f040 80be 	bne.w	8010090 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ff14:	887a      	ldrh	r2, [r7, #2]
 800ff16:	88bb      	ldrh	r3, [r7, #4]
 800ff18:	4619      	mov	r1, r3
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	f000 f8d4 	bl	80100c8 <pbuf_alloc_reference>
 800ff20:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ff22:	e0bf      	b.n	80100a4 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ff24:	2300      	movs	r3, #0
 800ff26:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ff2c:	88bb      	ldrh	r3, [r7, #4]
 800ff2e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ff30:	200c      	movs	r0, #12
 800ff32:	f7ff fbc3 	bl	800f6bc <memp_malloc>
 800ff36:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d109      	bne.n	800ff52 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800ff3e:	f7ff ff75 	bl	800fe2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ff42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d002      	beq.n	800ff4e <pbuf_alloc+0x7a>
            pbuf_free(p);
 800ff48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff4a:	f000 faab 	bl	80104a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	e0a9      	b.n	80100a6 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ff52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff54:	3303      	adds	r3, #3
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	f023 0303 	bic.w	r3, r3, #3
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800ff62:	3304      	adds	r3, #4
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	8b7a      	ldrh	r2, [r7, #26]
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	bf28      	it	cs
 800ff6c:	4613      	movcs	r3, r2
 800ff6e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ff70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff72:	3310      	adds	r3, #16
 800ff74:	693a      	ldr	r2, [r7, #16]
 800ff76:	4413      	add	r3, r2
 800ff78:	3303      	adds	r3, #3
 800ff7a:	f023 0303 	bic.w	r3, r3, #3
 800ff7e:	4618      	mov	r0, r3
 800ff80:	89f9      	ldrh	r1, [r7, #14]
 800ff82:	8b7a      	ldrh	r2, [r7, #26]
 800ff84:	2300      	movs	r3, #0
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	887b      	ldrh	r3, [r7, #2]
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	4601      	mov	r1, r0
 800ff90:	6938      	ldr	r0, [r7, #16]
 800ff92:	f7ff ff75 	bl	800fe80 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	f003 0303 	and.w	r3, r3, #3
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d006      	beq.n	800ffb0 <pbuf_alloc+0xdc>
 800ffa2:	4b43      	ldr	r3, [pc, #268]	@ (80100b0 <pbuf_alloc+0x1dc>)
 800ffa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ffa8:	4942      	ldr	r1, [pc, #264]	@ (80100b4 <pbuf_alloc+0x1e0>)
 800ffaa:	4843      	ldr	r0, [pc, #268]	@ (80100b8 <pbuf_alloc+0x1e4>)
 800ffac:	f00c f8b8 	bl	801c120 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ffb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ffb2:	3303      	adds	r3, #3
 800ffb4:	f023 0303 	bic.w	r3, r3, #3
 800ffb8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d106      	bne.n	800ffce <pbuf_alloc+0xfa>
 800ffc0:	4b3b      	ldr	r3, [pc, #236]	@ (80100b0 <pbuf_alloc+0x1dc>)
 800ffc2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ffc6:	493d      	ldr	r1, [pc, #244]	@ (80100bc <pbuf_alloc+0x1e8>)
 800ffc8:	483b      	ldr	r0, [pc, #236]	@ (80100b8 <pbuf_alloc+0x1e4>)
 800ffca:	f00c f8a9 	bl	801c120 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ffce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d102      	bne.n	800ffda <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffd8:	e002      	b.n	800ffe0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	693a      	ldr	r2, [r7, #16]
 800ffde:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ffe4:	8b7a      	ldrh	r2, [r7, #26]
 800ffe6:	89fb      	ldrh	r3, [r7, #14]
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800fff0:	8b7b      	ldrh	r3, [r7, #26]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d19c      	bne.n	800ff30 <pbuf_alloc+0x5c>
      break;
 800fff6:	e055      	b.n	80100a4 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fff8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fffa:	3303      	adds	r3, #3
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	f023 0303 	bic.w	r3, r3, #3
 8010002:	b29a      	uxth	r2, r3
 8010004:	88bb      	ldrh	r3, [r7, #4]
 8010006:	3303      	adds	r3, #3
 8010008:	b29b      	uxth	r3, r3
 801000a:	f023 0303 	bic.w	r3, r3, #3
 801000e:	b29b      	uxth	r3, r3
 8010010:	4413      	add	r3, r2
 8010012:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010014:	8b3b      	ldrh	r3, [r7, #24]
 8010016:	3310      	adds	r3, #16
 8010018:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801001a:	8b3a      	ldrh	r2, [r7, #24]
 801001c:	88bb      	ldrh	r3, [r7, #4]
 801001e:	3303      	adds	r3, #3
 8010020:	f023 0303 	bic.w	r3, r3, #3
 8010024:	429a      	cmp	r2, r3
 8010026:	d306      	bcc.n	8010036 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010028:	8afa      	ldrh	r2, [r7, #22]
 801002a:	88bb      	ldrh	r3, [r7, #4]
 801002c:	3303      	adds	r3, #3
 801002e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010032:	429a      	cmp	r2, r3
 8010034:	d201      	bcs.n	801003a <pbuf_alloc+0x166>
        return NULL;
 8010036:	2300      	movs	r3, #0
 8010038:	e035      	b.n	80100a6 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801003a:	8afb      	ldrh	r3, [r7, #22]
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff f9bb 	bl	800f3b8 <mem_malloc>
 8010042:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010046:	2b00      	cmp	r3, #0
 8010048:	d101      	bne.n	801004e <pbuf_alloc+0x17a>
        return NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	e02b      	b.n	80100a6 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801004e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010050:	3310      	adds	r3, #16
 8010052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010054:	4413      	add	r3, r2
 8010056:	3303      	adds	r3, #3
 8010058:	f023 0303 	bic.w	r3, r3, #3
 801005c:	4618      	mov	r0, r3
 801005e:	88b9      	ldrh	r1, [r7, #4]
 8010060:	88ba      	ldrh	r2, [r7, #4]
 8010062:	2300      	movs	r3, #0
 8010064:	9301      	str	r3, [sp, #4]
 8010066:	887b      	ldrh	r3, [r7, #2]
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	460b      	mov	r3, r1
 801006c:	4601      	mov	r1, r0
 801006e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010070:	f7ff ff06 	bl	800fe80 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	f003 0303 	and.w	r3, r3, #3
 801007c:	2b00      	cmp	r3, #0
 801007e:	d010      	beq.n	80100a2 <pbuf_alloc+0x1ce>
 8010080:	4b0b      	ldr	r3, [pc, #44]	@ (80100b0 <pbuf_alloc+0x1dc>)
 8010082:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010086:	490e      	ldr	r1, [pc, #56]	@ (80100c0 <pbuf_alloc+0x1ec>)
 8010088:	480b      	ldr	r0, [pc, #44]	@ (80100b8 <pbuf_alloc+0x1e4>)
 801008a:	f00c f849 	bl	801c120 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801008e:	e008      	b.n	80100a2 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010090:	4b07      	ldr	r3, [pc, #28]	@ (80100b0 <pbuf_alloc+0x1dc>)
 8010092:	f240 1227 	movw	r2, #295	@ 0x127
 8010096:	490b      	ldr	r1, [pc, #44]	@ (80100c4 <pbuf_alloc+0x1f0>)
 8010098:	4807      	ldr	r0, [pc, #28]	@ (80100b8 <pbuf_alloc+0x1e4>)
 801009a:	f00c f841 	bl	801c120 <iprintf>
      return NULL;
 801009e:	2300      	movs	r3, #0
 80100a0:	e001      	b.n	80100a6 <pbuf_alloc+0x1d2>
      break;
 80100a2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3728      	adds	r7, #40	@ 0x28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	0801f45c 	.word	0x0801f45c
 80100b4:	0801f48c 	.word	0x0801f48c
 80100b8:	0801f4bc 	.word	0x0801f4bc
 80100bc:	0801f4e4 	.word	0x0801f4e4
 80100c0:	0801f518 	.word	0x0801f518
 80100c4:	0801f544 	.word	0x0801f544

080100c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b086      	sub	sp, #24
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	460b      	mov	r3, r1
 80100d2:	807b      	strh	r3, [r7, #2]
 80100d4:	4613      	mov	r3, r2
 80100d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80100d8:	883b      	ldrh	r3, [r7, #0]
 80100da:	2b41      	cmp	r3, #65	@ 0x41
 80100dc:	d009      	beq.n	80100f2 <pbuf_alloc_reference+0x2a>
 80100de:	883b      	ldrh	r3, [r7, #0]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d006      	beq.n	80100f2 <pbuf_alloc_reference+0x2a>
 80100e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010124 <pbuf_alloc_reference+0x5c>)
 80100e6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80100ea:	490f      	ldr	r1, [pc, #60]	@ (8010128 <pbuf_alloc_reference+0x60>)
 80100ec:	480f      	ldr	r0, [pc, #60]	@ (801012c <pbuf_alloc_reference+0x64>)
 80100ee:	f00c f817 	bl	801c120 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80100f2:	200b      	movs	r0, #11
 80100f4:	f7ff fae2 	bl	800f6bc <memp_malloc>
 80100f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010100:	2300      	movs	r3, #0
 8010102:	e00b      	b.n	801011c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010104:	8879      	ldrh	r1, [r7, #2]
 8010106:	887a      	ldrh	r2, [r7, #2]
 8010108:	2300      	movs	r3, #0
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	883b      	ldrh	r3, [r7, #0]
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	460b      	mov	r3, r1
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f7ff feb3 	bl	800fe80 <pbuf_init_alloced_pbuf>
  return p;
 801011a:	68fb      	ldr	r3, [r7, #12]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	0801f45c 	.word	0x0801f45c
 8010128:	0801f560 	.word	0x0801f560
 801012c:	0801f4bc 	.word	0x0801f4bc

08010130 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b088      	sub	sp, #32
 8010134:	af02      	add	r7, sp, #8
 8010136:	607b      	str	r3, [r7, #4]
 8010138:	4603      	mov	r3, r0
 801013a:	73fb      	strb	r3, [r7, #15]
 801013c:	460b      	mov	r3, r1
 801013e:	81bb      	strh	r3, [r7, #12]
 8010140:	4613      	mov	r3, r2
 8010142:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010148:	8a7b      	ldrh	r3, [r7, #18]
 801014a:	3303      	adds	r3, #3
 801014c:	f023 0203 	bic.w	r2, r3, #3
 8010150:	89bb      	ldrh	r3, [r7, #12]
 8010152:	441a      	add	r2, r3
 8010154:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010156:	429a      	cmp	r2, r3
 8010158:	d901      	bls.n	801015e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801015a:	2300      	movs	r3, #0
 801015c:	e018      	b.n	8010190 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d007      	beq.n	8010174 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010164:	8a7b      	ldrh	r3, [r7, #18]
 8010166:	3303      	adds	r3, #3
 8010168:	f023 0303 	bic.w	r3, r3, #3
 801016c:	6a3a      	ldr	r2, [r7, #32]
 801016e:	4413      	add	r3, r2
 8010170:	617b      	str	r3, [r7, #20]
 8010172:	e001      	b.n	8010178 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	89b9      	ldrh	r1, [r7, #12]
 801017c:	89ba      	ldrh	r2, [r7, #12]
 801017e:	2302      	movs	r3, #2
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	897b      	ldrh	r3, [r7, #10]
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	460b      	mov	r3, r1
 8010188:	6979      	ldr	r1, [r7, #20]
 801018a:	f7ff fe79 	bl	800fe80 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801018e:	687b      	ldr	r3, [r7, #4]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d106      	bne.n	80101b8 <pbuf_realloc+0x20>
 80101aa:	4b3a      	ldr	r3, [pc, #232]	@ (8010294 <pbuf_realloc+0xfc>)
 80101ac:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80101b0:	4939      	ldr	r1, [pc, #228]	@ (8010298 <pbuf_realloc+0x100>)
 80101b2:	483a      	ldr	r0, [pc, #232]	@ (801029c <pbuf_realloc+0x104>)
 80101b4:	f00b ffb4 	bl	801c120 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	891b      	ldrh	r3, [r3, #8]
 80101bc:	887a      	ldrh	r2, [r7, #2]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d263      	bcs.n	801028a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	891a      	ldrh	r2, [r3, #8]
 80101c6:	887b      	ldrh	r3, [r7, #2]
 80101c8:	1ad3      	subs	r3, r2, r3
 80101ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80101cc:	887b      	ldrh	r3, [r7, #2]
 80101ce:	817b      	strh	r3, [r7, #10]
  q = p;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80101d4:	e018      	b.n	8010208 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	895b      	ldrh	r3, [r3, #10]
 80101da:	897a      	ldrh	r2, [r7, #10]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	891a      	ldrh	r2, [r3, #8]
 80101e4:	893b      	ldrh	r3, [r7, #8]
 80101e6:	1ad3      	subs	r3, r2, r3
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d106      	bne.n	8010208 <pbuf_realloc+0x70>
 80101fa:	4b26      	ldr	r3, [pc, #152]	@ (8010294 <pbuf_realloc+0xfc>)
 80101fc:	f240 12af 	movw	r2, #431	@ 0x1af
 8010200:	4927      	ldr	r1, [pc, #156]	@ (80102a0 <pbuf_realloc+0x108>)
 8010202:	4826      	ldr	r0, [pc, #152]	@ (801029c <pbuf_realloc+0x104>)
 8010204:	f00b ff8c 	bl	801c120 <iprintf>
  while (rem_len > q->len) {
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	895b      	ldrh	r3, [r3, #10]
 801020c:	897a      	ldrh	r2, [r7, #10]
 801020e:	429a      	cmp	r2, r3
 8010210:	d8e1      	bhi.n	80101d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	7b1b      	ldrb	r3, [r3, #12]
 8010216:	f003 030f 	and.w	r3, r3, #15
 801021a:	2b00      	cmp	r3, #0
 801021c:	d121      	bne.n	8010262 <pbuf_realloc+0xca>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	895b      	ldrh	r3, [r3, #10]
 8010222:	897a      	ldrh	r2, [r7, #10]
 8010224:	429a      	cmp	r2, r3
 8010226:	d01c      	beq.n	8010262 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	7b5b      	ldrb	r3, [r3, #13]
 801022c:	f003 0302 	and.w	r3, r3, #2
 8010230:	2b00      	cmp	r3, #0
 8010232:	d116      	bne.n	8010262 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	685a      	ldr	r2, [r3, #4]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	b29a      	uxth	r2, r3
 801023e:	897b      	ldrh	r3, [r7, #10]
 8010240:	4413      	add	r3, r2
 8010242:	b29b      	uxth	r3, r3
 8010244:	4619      	mov	r1, r3
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f7fe ffac 	bl	800f1a4 <mem_trim>
 801024c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d106      	bne.n	8010262 <pbuf_realloc+0xca>
 8010254:	4b0f      	ldr	r3, [pc, #60]	@ (8010294 <pbuf_realloc+0xfc>)
 8010256:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801025a:	4912      	ldr	r1, [pc, #72]	@ (80102a4 <pbuf_realloc+0x10c>)
 801025c:	480f      	ldr	r0, [pc, #60]	@ (801029c <pbuf_realloc+0x104>)
 801025e:	f00b ff5f 	bl	801c120 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	897a      	ldrh	r2, [r7, #10]
 8010266:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	895a      	ldrh	r2, [r3, #10]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d004      	beq.n	8010282 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4618      	mov	r0, r3
 801027e:	f000 f911 	bl	80104a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2200      	movs	r2, #0
 8010286:	601a      	str	r2, [r3, #0]
 8010288:	e000      	b.n	801028c <pbuf_realloc+0xf4>
    return;
 801028a:	bf00      	nop

}
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	0801f45c 	.word	0x0801f45c
 8010298:	0801f574 	.word	0x0801f574
 801029c:	0801f4bc 	.word	0x0801f4bc
 80102a0:	0801f58c 	.word	0x0801f58c
 80102a4:	0801f5a4 	.word	0x0801f5a4

080102a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b086      	sub	sp, #24
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	4613      	mov	r3, r2
 80102b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d106      	bne.n	80102ca <pbuf_add_header_impl+0x22>
 80102bc:	4b2b      	ldr	r3, [pc, #172]	@ (801036c <pbuf_add_header_impl+0xc4>)
 80102be:	f240 12df 	movw	r2, #479	@ 0x1df
 80102c2:	492b      	ldr	r1, [pc, #172]	@ (8010370 <pbuf_add_header_impl+0xc8>)
 80102c4:	482b      	ldr	r0, [pc, #172]	@ (8010374 <pbuf_add_header_impl+0xcc>)
 80102c6:	f00b ff2b 	bl	801c120 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d003      	beq.n	80102d8 <pbuf_add_header_impl+0x30>
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102d6:	d301      	bcc.n	80102dc <pbuf_add_header_impl+0x34>
    return 1;
 80102d8:	2301      	movs	r3, #1
 80102da:	e043      	b.n	8010364 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <pbuf_add_header_impl+0x3e>
    return 0;
 80102e2:	2300      	movs	r3, #0
 80102e4:	e03e      	b.n	8010364 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	891a      	ldrh	r2, [r3, #8]
 80102ee:	8a7b      	ldrh	r3, [r7, #18]
 80102f0:	4413      	add	r3, r2
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	8a7a      	ldrh	r2, [r7, #18]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d901      	bls.n	80102fe <pbuf_add_header_impl+0x56>
    return 1;
 80102fa:	2301      	movs	r3, #1
 80102fc:	e032      	b.n	8010364 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	7b1b      	ldrb	r3, [r3, #12]
 8010302:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010304:	8a3b      	ldrh	r3, [r7, #16]
 8010306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801030a:	2b00      	cmp	r3, #0
 801030c:	d00c      	beq.n	8010328 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	425b      	negs	r3, r3
 8010316:	4413      	add	r3, r2
 8010318:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	3310      	adds	r3, #16
 801031e:	697a      	ldr	r2, [r7, #20]
 8010320:	429a      	cmp	r2, r3
 8010322:	d20d      	bcs.n	8010340 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010324:	2301      	movs	r3, #1
 8010326:	e01d      	b.n	8010364 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010328:	79fb      	ldrb	r3, [r7, #7]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d006      	beq.n	801033c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	425b      	negs	r3, r3
 8010336:	4413      	add	r3, r2
 8010338:	617b      	str	r3, [r7, #20]
 801033a:	e001      	b.n	8010340 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801033c:	2301      	movs	r3, #1
 801033e:	e011      	b.n	8010364 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	697a      	ldr	r2, [r7, #20]
 8010344:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	895a      	ldrh	r2, [r3, #10]
 801034a:	8a7b      	ldrh	r3, [r7, #18]
 801034c:	4413      	add	r3, r2
 801034e:	b29a      	uxth	r2, r3
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	891a      	ldrh	r2, [r3, #8]
 8010358:	8a7b      	ldrh	r3, [r7, #18]
 801035a:	4413      	add	r3, r2
 801035c:	b29a      	uxth	r2, r3
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	811a      	strh	r2, [r3, #8]


  return 0;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3718      	adds	r7, #24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	0801f45c 	.word	0x0801f45c
 8010370:	0801f5c0 	.word	0x0801f5c0
 8010374:	0801f4bc 	.word	0x0801f4bc

08010378 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010382:	2200      	movs	r2, #0
 8010384:	6839      	ldr	r1, [r7, #0]
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7ff ff8e 	bl	80102a8 <pbuf_add_header_impl>
 801038c:	4603      	mov	r3, r0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
	...

08010398 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d106      	bne.n	80103b6 <pbuf_remove_header+0x1e>
 80103a8:	4b20      	ldr	r3, [pc, #128]	@ (801042c <pbuf_remove_header+0x94>)
 80103aa:	f240 224b 	movw	r2, #587	@ 0x24b
 80103ae:	4920      	ldr	r1, [pc, #128]	@ (8010430 <pbuf_remove_header+0x98>)
 80103b0:	4820      	ldr	r0, [pc, #128]	@ (8010434 <pbuf_remove_header+0x9c>)
 80103b2:	f00b feb5 	bl	801c120 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d003      	beq.n	80103c4 <pbuf_remove_header+0x2c>
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103c2:	d301      	bcc.n	80103c8 <pbuf_remove_header+0x30>
    return 1;
 80103c4:	2301      	movs	r3, #1
 80103c6:	e02c      	b.n	8010422 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <pbuf_remove_header+0x3a>
    return 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	e027      	b.n	8010422 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	895b      	ldrh	r3, [r3, #10]
 80103da:	89fa      	ldrh	r2, [r7, #14]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d908      	bls.n	80103f2 <pbuf_remove_header+0x5a>
 80103e0:	4b12      	ldr	r3, [pc, #72]	@ (801042c <pbuf_remove_header+0x94>)
 80103e2:	f240 2255 	movw	r2, #597	@ 0x255
 80103e6:	4914      	ldr	r1, [pc, #80]	@ (8010438 <pbuf_remove_header+0xa0>)
 80103e8:	4812      	ldr	r0, [pc, #72]	@ (8010434 <pbuf_remove_header+0x9c>)
 80103ea:	f00b fe99 	bl	801c120 <iprintf>
 80103ee:	2301      	movs	r3, #1
 80103f0:	e017      	b.n	8010422 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	685a      	ldr	r2, [r3, #4]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	441a      	add	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	895a      	ldrh	r2, [r3, #10]
 8010408:	89fb      	ldrh	r3, [r7, #14]
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	b29a      	uxth	r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	891a      	ldrh	r2, [r3, #8]
 8010416:	89fb      	ldrh	r3, [r7, #14]
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	b29a      	uxth	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	0801f45c 	.word	0x0801f45c
 8010430:	0801f5c0 	.word	0x0801f5c0
 8010434:	0801f4bc 	.word	0x0801f4bc
 8010438:	0801f5cc 	.word	0x0801f5cc

0801043c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	807b      	strh	r3, [r7, #2]
 8010448:	4613      	mov	r3, r2
 801044a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801044c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010450:	2b00      	cmp	r3, #0
 8010452:	da08      	bge.n	8010466 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010458:	425b      	negs	r3, r3
 801045a:	4619      	mov	r1, r3
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7ff ff9b 	bl	8010398 <pbuf_remove_header>
 8010462:	4603      	mov	r3, r0
 8010464:	e007      	b.n	8010476 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010466:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801046a:	787a      	ldrb	r2, [r7, #1]
 801046c:	4619      	mov	r1, r3
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7ff ff1a 	bl	80102a8 <pbuf_add_header_impl>
 8010474:	4603      	mov	r3, r0
  }
}
 8010476:	4618      	mov	r0, r3
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b082      	sub	sp, #8
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
 8010486:	460b      	mov	r3, r1
 8010488:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801048a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801048e:	2201      	movs	r2, #1
 8010490:	4619      	mov	r1, r3
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7ff ffd2 	bl	801043c <pbuf_header_impl>
 8010498:	4603      	mov	r3, r0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
	...

080104a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10b      	bne.n	80104ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d106      	bne.n	80104c6 <pbuf_free+0x22>
 80104b8:	4b3b      	ldr	r3, [pc, #236]	@ (80105a8 <pbuf_free+0x104>)
 80104ba:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80104be:	493b      	ldr	r1, [pc, #236]	@ (80105ac <pbuf_free+0x108>)
 80104c0:	483b      	ldr	r0, [pc, #236]	@ (80105b0 <pbuf_free+0x10c>)
 80104c2:	f00b fe2d 	bl	801c120 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	e069      	b.n	801059e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80104ce:	e062      	b.n	8010596 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80104d0:	f00a ff6e 	bl	801b3b0 <sys_arch_protect>
 80104d4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	7b9b      	ldrb	r3, [r3, #14]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d106      	bne.n	80104ec <pbuf_free+0x48>
 80104de:	4b32      	ldr	r3, [pc, #200]	@ (80105a8 <pbuf_free+0x104>)
 80104e0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80104e4:	4933      	ldr	r1, [pc, #204]	@ (80105b4 <pbuf_free+0x110>)
 80104e6:	4832      	ldr	r0, [pc, #200]	@ (80105b0 <pbuf_free+0x10c>)
 80104e8:	f00b fe1a 	bl	801c120 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	7b9b      	ldrb	r3, [r3, #14]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	b2da      	uxtb	r2, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	739a      	strb	r2, [r3, #14]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	7b9b      	ldrb	r3, [r3, #14]
 80104fc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80104fe:	69b8      	ldr	r0, [r7, #24]
 8010500:	f00a ff64 	bl	801b3cc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010504:	7dfb      	ldrb	r3, [r7, #23]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d143      	bne.n	8010592 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	7b1b      	ldrb	r3, [r3, #12]
 8010514:	f003 030f 	and.w	r3, r3, #15
 8010518:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	7b5b      	ldrb	r3, [r3, #13]
 801051e:	f003 0302 	and.w	r3, r3, #2
 8010522:	2b00      	cmp	r3, #0
 8010524:	d011      	beq.n	801054a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d106      	bne.n	8010540 <pbuf_free+0x9c>
 8010532:	4b1d      	ldr	r3, [pc, #116]	@ (80105a8 <pbuf_free+0x104>)
 8010534:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010538:	491f      	ldr	r1, [pc, #124]	@ (80105b8 <pbuf_free+0x114>)
 801053a:	481d      	ldr	r0, [pc, #116]	@ (80105b0 <pbuf_free+0x10c>)
 801053c:	f00b fdf0 	bl	801c120 <iprintf>
        pc->custom_free_function(p);
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	4798      	blx	r3
 8010548:	e01d      	b.n	8010586 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801054a:	7bfb      	ldrb	r3, [r7, #15]
 801054c:	2b02      	cmp	r3, #2
 801054e:	d104      	bne.n	801055a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010550:	6879      	ldr	r1, [r7, #4]
 8010552:	200c      	movs	r0, #12
 8010554:	f7ff f904 	bl	800f760 <memp_free>
 8010558:	e015      	b.n	8010586 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801055a:	7bfb      	ldrb	r3, [r7, #15]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d104      	bne.n	801056a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010560:	6879      	ldr	r1, [r7, #4]
 8010562:	200b      	movs	r0, #11
 8010564:	f7ff f8fc 	bl	800f760 <memp_free>
 8010568:	e00d      	b.n	8010586 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801056a:	7bfb      	ldrb	r3, [r7, #15]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d103      	bne.n	8010578 <pbuf_free+0xd4>
          mem_free(p);
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7fe fd87 	bl	800f084 <mem_free>
 8010576:	e006      	b.n	8010586 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010578:	4b0b      	ldr	r3, [pc, #44]	@ (80105a8 <pbuf_free+0x104>)
 801057a:	f240 320f 	movw	r2, #783	@ 0x30f
 801057e:	490f      	ldr	r1, [pc, #60]	@ (80105bc <pbuf_free+0x118>)
 8010580:	480b      	ldr	r0, [pc, #44]	@ (80105b0 <pbuf_free+0x10c>)
 8010582:	f00b fdcd 	bl	801c120 <iprintf>
        }
      }
      count++;
 8010586:	7ffb      	ldrb	r3, [r7, #31]
 8010588:	3301      	adds	r3, #1
 801058a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	607b      	str	r3, [r7, #4]
 8010590:	e001      	b.n	8010596 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010592:	2300      	movs	r3, #0
 8010594:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d199      	bne.n	80104d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801059c:	7ffb      	ldrb	r3, [r7, #31]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3720      	adds	r7, #32
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	0801f45c 	.word	0x0801f45c
 80105ac:	0801f5c0 	.word	0x0801f5c0
 80105b0:	0801f4bc 	.word	0x0801f4bc
 80105b4:	0801f5ec 	.word	0x0801f5ec
 80105b8:	0801f604 	.word	0x0801f604
 80105bc:	0801f628 	.word	0x0801f628

080105c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80105cc:	e005      	b.n	80105da <pbuf_clen+0x1a>
    ++len;
 80105ce:	89fb      	ldrh	r3, [r7, #14]
 80105d0:	3301      	adds	r3, #1
 80105d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1f6      	bne.n	80105ce <pbuf_clen+0xe>
  }
  return len;
 80105e0:	89fb      	ldrh	r3, [r7, #14]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3714      	adds	r7, #20
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
	...

080105f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d016      	beq.n	801062c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80105fe:	f00a fed7 	bl	801b3b0 <sys_arch_protect>
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	7b9b      	ldrb	r3, [r3, #14]
 8010608:	3301      	adds	r3, #1
 801060a:	b2da      	uxtb	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	739a      	strb	r2, [r3, #14]
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f00a fedb 	bl	801b3cc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	7b9b      	ldrb	r3, [r3, #14]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <pbuf_ref+0x3c>
 801061e:	4b05      	ldr	r3, [pc, #20]	@ (8010634 <pbuf_ref+0x44>)
 8010620:	f240 3242 	movw	r2, #834	@ 0x342
 8010624:	4904      	ldr	r1, [pc, #16]	@ (8010638 <pbuf_ref+0x48>)
 8010626:	4805      	ldr	r0, [pc, #20]	@ (801063c <pbuf_ref+0x4c>)
 8010628:	f00b fd7a 	bl	801c120 <iprintf>
  }
}
 801062c:	bf00      	nop
 801062e:	3710      	adds	r7, #16
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	0801f45c 	.word	0x0801f45c
 8010638:	0801f63c 	.word	0x0801f63c
 801063c:	0801f4bc 	.word	0x0801f4bc

08010640 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <pbuf_cat+0x16>
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d107      	bne.n	8010666 <pbuf_cat+0x26>
 8010656:	4b20      	ldr	r3, [pc, #128]	@ (80106d8 <pbuf_cat+0x98>)
 8010658:	f240 3259 	movw	r2, #857	@ 0x359
 801065c:	491f      	ldr	r1, [pc, #124]	@ (80106dc <pbuf_cat+0x9c>)
 801065e:	4820      	ldr	r0, [pc, #128]	@ (80106e0 <pbuf_cat+0xa0>)
 8010660:	f00b fd5e 	bl	801c120 <iprintf>
 8010664:	e034      	b.n	80106d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	60fb      	str	r3, [r7, #12]
 801066a:	e00a      	b.n	8010682 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	891a      	ldrh	r2, [r3, #8]
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	891b      	ldrh	r3, [r3, #8]
 8010674:	4413      	add	r3, r2
 8010676:	b29a      	uxth	r2, r3
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	60fb      	str	r3, [r7, #12]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1f0      	bne.n	801066c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	891a      	ldrh	r2, [r3, #8]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	895b      	ldrh	r3, [r3, #10]
 8010692:	429a      	cmp	r2, r3
 8010694:	d006      	beq.n	80106a4 <pbuf_cat+0x64>
 8010696:	4b10      	ldr	r3, [pc, #64]	@ (80106d8 <pbuf_cat+0x98>)
 8010698:	f240 3262 	movw	r2, #866	@ 0x362
 801069c:	4911      	ldr	r1, [pc, #68]	@ (80106e4 <pbuf_cat+0xa4>)
 801069e:	4810      	ldr	r0, [pc, #64]	@ (80106e0 <pbuf_cat+0xa0>)
 80106a0:	f00b fd3e 	bl	801c120 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d006      	beq.n	80106ba <pbuf_cat+0x7a>
 80106ac:	4b0a      	ldr	r3, [pc, #40]	@ (80106d8 <pbuf_cat+0x98>)
 80106ae:	f240 3263 	movw	r2, #867	@ 0x363
 80106b2:	490d      	ldr	r1, [pc, #52]	@ (80106e8 <pbuf_cat+0xa8>)
 80106b4:	480a      	ldr	r0, [pc, #40]	@ (80106e0 <pbuf_cat+0xa0>)
 80106b6:	f00b fd33 	bl	801c120 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	891a      	ldrh	r2, [r3, #8]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	891b      	ldrh	r3, [r3, #8]
 80106c2:	4413      	add	r3, r2
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	683a      	ldr	r2, [r7, #0]
 80106ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	0801f45c 	.word	0x0801f45c
 80106dc:	0801f650 	.word	0x0801f650
 80106e0:	0801f4bc 	.word	0x0801f4bc
 80106e4:	0801f688 	.word	0x0801f688
 80106e8:	0801f6b8 	.word	0x0801f6b8

080106ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80106f6:	6839      	ldr	r1, [r7, #0]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff ffa1 	bl	8010640 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80106fe:	6838      	ldr	r0, [r7, #0]
 8010700:	f7ff ff76 	bl	80105f0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010704:	bf00      	nop
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]
 801071a:	2300      	movs	r3, #0
 801071c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d008      	beq.n	8010736 <pbuf_copy+0x2a>
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d005      	beq.n	8010736 <pbuf_copy+0x2a>
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	891a      	ldrh	r2, [r3, #8]
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	891b      	ldrh	r3, [r3, #8]
 8010732:	429a      	cmp	r2, r3
 8010734:	d209      	bcs.n	801074a <pbuf_copy+0x3e>
 8010736:	4b57      	ldr	r3, [pc, #348]	@ (8010894 <pbuf_copy+0x188>)
 8010738:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801073c:	4956      	ldr	r1, [pc, #344]	@ (8010898 <pbuf_copy+0x18c>)
 801073e:	4857      	ldr	r0, [pc, #348]	@ (801089c <pbuf_copy+0x190>)
 8010740:	f00b fcee 	bl	801c120 <iprintf>
 8010744:	f06f 030f 	mvn.w	r3, #15
 8010748:	e09f      	b.n	801088a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	895b      	ldrh	r3, [r3, #10]
 801074e:	461a      	mov	r2, r3
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	1ad2      	subs	r2, r2, r3
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	895b      	ldrh	r3, [r3, #10]
 8010758:	4619      	mov	r1, r3
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	1acb      	subs	r3, r1, r3
 801075e:	429a      	cmp	r2, r3
 8010760:	d306      	bcc.n	8010770 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	895b      	ldrh	r3, [r3, #10]
 8010766:	461a      	mov	r2, r3
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	1ad3      	subs	r3, r2, r3
 801076c:	60fb      	str	r3, [r7, #12]
 801076e:	e005      	b.n	801077c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	895b      	ldrh	r3, [r3, #10]
 8010774:	461a      	mov	r2, r3
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	685a      	ldr	r2, [r3, #4]
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	18d0      	adds	r0, r2, r3
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	685a      	ldr	r2, [r3, #4]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	4413      	add	r3, r2
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	4619      	mov	r1, r3
 8010790:	f00b fee5 	bl	801c55e <memcpy>
    offset_to += len;
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	4413      	add	r3, r2
 801079a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801079c:	693a      	ldr	r2, [r7, #16]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	895b      	ldrh	r3, [r3, #10]
 80107a8:	461a      	mov	r2, r3
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d906      	bls.n	80107be <pbuf_copy+0xb2>
 80107b0:	4b38      	ldr	r3, [pc, #224]	@ (8010894 <pbuf_copy+0x188>)
 80107b2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80107b6:	493a      	ldr	r1, [pc, #232]	@ (80108a0 <pbuf_copy+0x194>)
 80107b8:	4838      	ldr	r0, [pc, #224]	@ (801089c <pbuf_copy+0x190>)
 80107ba:	f00b fcb1 	bl	801c120 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	895b      	ldrh	r3, [r3, #10]
 80107c2:	461a      	mov	r2, r3
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d906      	bls.n	80107d8 <pbuf_copy+0xcc>
 80107ca:	4b32      	ldr	r3, [pc, #200]	@ (8010894 <pbuf_copy+0x188>)
 80107cc:	f240 32da 	movw	r2, #986	@ 0x3da
 80107d0:	4934      	ldr	r1, [pc, #208]	@ (80108a4 <pbuf_copy+0x198>)
 80107d2:	4832      	ldr	r0, [pc, #200]	@ (801089c <pbuf_copy+0x190>)
 80107d4:	f00b fca4 	bl	801c120 <iprintf>
    if (offset_from >= p_from->len) {
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	895b      	ldrh	r3, [r3, #10]
 80107dc:	461a      	mov	r2, r3
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d304      	bcc.n	80107ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80107e4:	2300      	movs	r3, #0
 80107e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	895b      	ldrh	r3, [r3, #10]
 80107f2:	461a      	mov	r2, r3
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d114      	bne.n	8010824 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d10c      	bne.n	8010824 <pbuf_copy+0x118>
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d009      	beq.n	8010824 <pbuf_copy+0x118>
 8010810:	4b20      	ldr	r3, [pc, #128]	@ (8010894 <pbuf_copy+0x188>)
 8010812:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010816:	4924      	ldr	r1, [pc, #144]	@ (80108a8 <pbuf_copy+0x19c>)
 8010818:	4820      	ldr	r0, [pc, #128]	@ (801089c <pbuf_copy+0x190>)
 801081a:	f00b fc81 	bl	801c120 <iprintf>
 801081e:	f06f 030f 	mvn.w	r3, #15
 8010822:	e032      	b.n	801088a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d013      	beq.n	8010852 <pbuf_copy+0x146>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	895a      	ldrh	r2, [r3, #10]
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	891b      	ldrh	r3, [r3, #8]
 8010832:	429a      	cmp	r2, r3
 8010834:	d10d      	bne.n	8010852 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d009      	beq.n	8010852 <pbuf_copy+0x146>
 801083e:	4b15      	ldr	r3, [pc, #84]	@ (8010894 <pbuf_copy+0x188>)
 8010840:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010844:	4919      	ldr	r1, [pc, #100]	@ (80108ac <pbuf_copy+0x1a0>)
 8010846:	4815      	ldr	r0, [pc, #84]	@ (801089c <pbuf_copy+0x190>)
 8010848:	f00b fc6a 	bl	801c120 <iprintf>
 801084c:	f06f 0305 	mvn.w	r3, #5
 8010850:	e01b      	b.n	801088a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d013      	beq.n	8010880 <pbuf_copy+0x174>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	895a      	ldrh	r2, [r3, #10]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	891b      	ldrh	r3, [r3, #8]
 8010860:	429a      	cmp	r2, r3
 8010862:	d10d      	bne.n	8010880 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d009      	beq.n	8010880 <pbuf_copy+0x174>
 801086c:	4b09      	ldr	r3, [pc, #36]	@ (8010894 <pbuf_copy+0x188>)
 801086e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010872:	490e      	ldr	r1, [pc, #56]	@ (80108ac <pbuf_copy+0x1a0>)
 8010874:	4809      	ldr	r0, [pc, #36]	@ (801089c <pbuf_copy+0x190>)
 8010876:	f00b fc53 	bl	801c120 <iprintf>
 801087a:	f06f 0305 	mvn.w	r3, #5
 801087e:	e004      	b.n	801088a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	f47f af61 	bne.w	801074a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3718      	adds	r7, #24
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	0801f45c 	.word	0x0801f45c
 8010898:	0801f704 	.word	0x0801f704
 801089c:	0801f4bc 	.word	0x0801f4bc
 80108a0:	0801f734 	.word	0x0801f734
 80108a4:	0801f74c 	.word	0x0801f74c
 80108a8:	0801f768 	.word	0x0801f768
 80108ac:	0801f778 	.word	0x0801f778

080108b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b088      	sub	sp, #32
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	4611      	mov	r1, r2
 80108bc:	461a      	mov	r2, r3
 80108be:	460b      	mov	r3, r1
 80108c0:	80fb      	strh	r3, [r7, #6]
 80108c2:	4613      	mov	r3, r2
 80108c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d108      	bne.n	80108e6 <pbuf_copy_partial+0x36>
 80108d4:	4b2b      	ldr	r3, [pc, #172]	@ (8010984 <pbuf_copy_partial+0xd4>)
 80108d6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80108da:	492b      	ldr	r1, [pc, #172]	@ (8010988 <pbuf_copy_partial+0xd8>)
 80108dc:	482b      	ldr	r0, [pc, #172]	@ (801098c <pbuf_copy_partial+0xdc>)
 80108de:	f00b fc1f 	bl	801c120 <iprintf>
 80108e2:	2300      	movs	r3, #0
 80108e4:	e04a      	b.n	801097c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d108      	bne.n	80108fe <pbuf_copy_partial+0x4e>
 80108ec:	4b25      	ldr	r3, [pc, #148]	@ (8010984 <pbuf_copy_partial+0xd4>)
 80108ee:	f240 420b 	movw	r2, #1035	@ 0x40b
 80108f2:	4927      	ldr	r1, [pc, #156]	@ (8010990 <pbuf_copy_partial+0xe0>)
 80108f4:	4825      	ldr	r0, [pc, #148]	@ (801098c <pbuf_copy_partial+0xdc>)
 80108f6:	f00b fc13 	bl	801c120 <iprintf>
 80108fa:	2300      	movs	r3, #0
 80108fc:	e03e      	b.n	801097c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	61fb      	str	r3, [r7, #28]
 8010902:	e034      	b.n	801096e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010904:	88bb      	ldrh	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00a      	beq.n	8010920 <pbuf_copy_partial+0x70>
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	895b      	ldrh	r3, [r3, #10]
 801090e:	88ba      	ldrh	r2, [r7, #4]
 8010910:	429a      	cmp	r2, r3
 8010912:	d305      	bcc.n	8010920 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010914:	69fb      	ldr	r3, [r7, #28]
 8010916:	895b      	ldrh	r3, [r3, #10]
 8010918:	88ba      	ldrh	r2, [r7, #4]
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	80bb      	strh	r3, [r7, #4]
 801091e:	e023      	b.n	8010968 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	895a      	ldrh	r2, [r3, #10]
 8010924:	88bb      	ldrh	r3, [r7, #4]
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801092a:	8b3a      	ldrh	r2, [r7, #24]
 801092c:	88fb      	ldrh	r3, [r7, #6]
 801092e:	429a      	cmp	r2, r3
 8010930:	d901      	bls.n	8010936 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010932:	88fb      	ldrh	r3, [r7, #6]
 8010934:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010936:	8b7b      	ldrh	r3, [r7, #26]
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	18d0      	adds	r0, r2, r3
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	685a      	ldr	r2, [r3, #4]
 8010940:	88bb      	ldrh	r3, [r7, #4]
 8010942:	4413      	add	r3, r2
 8010944:	8b3a      	ldrh	r2, [r7, #24]
 8010946:	4619      	mov	r1, r3
 8010948:	f00b fe09 	bl	801c55e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801094c:	8afa      	ldrh	r2, [r7, #22]
 801094e:	8b3b      	ldrh	r3, [r7, #24]
 8010950:	4413      	add	r3, r2
 8010952:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010954:	8b7a      	ldrh	r2, [r7, #26]
 8010956:	8b3b      	ldrh	r3, [r7, #24]
 8010958:	4413      	add	r3, r2
 801095a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801095c:	88fa      	ldrh	r2, [r7, #6]
 801095e:	8b3b      	ldrh	r3, [r7, #24]
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010964:	2300      	movs	r3, #0
 8010966:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	61fb      	str	r3, [r7, #28]
 801096e:	88fb      	ldrh	r3, [r7, #6]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d002      	beq.n	801097a <pbuf_copy_partial+0xca>
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1c4      	bne.n	8010904 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801097a:	8afb      	ldrh	r3, [r7, #22]
}
 801097c:	4618      	mov	r0, r3
 801097e:	3720      	adds	r7, #32
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	0801f45c 	.word	0x0801f45c
 8010988:	0801f7a4 	.word	0x0801f7a4
 801098c:	0801f4bc 	.word	0x0801f4bc
 8010990:	0801f7c4 	.word	0x0801f7c4

08010994 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010994:	b480      	push	{r7}
 8010996:	b087      	sub	sp, #28
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	460b      	mov	r3, r1
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80109a2:	897b      	ldrh	r3, [r7, #10]
 80109a4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80109aa:	e007      	b.n	80109bc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	895b      	ldrh	r3, [r3, #10]
 80109b0:	8afa      	ldrh	r2, [r7, #22]
 80109b2:	1ad3      	subs	r3, r2, r3
 80109b4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d004      	beq.n	80109cc <pbuf_skip_const+0x38>
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	895b      	ldrh	r3, [r3, #10]
 80109c6:	8afa      	ldrh	r2, [r7, #22]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d2ef      	bcs.n	80109ac <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8afa      	ldrh	r2, [r7, #22]
 80109d6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80109d8:	693b      	ldr	r3, [r7, #16]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	371c      	adds	r7, #28
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b086      	sub	sp, #24
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	60f8      	str	r0, [r7, #12]
 80109ee:	460b      	mov	r3, r1
 80109f0:	607a      	str	r2, [r7, #4]
 80109f2:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80109f4:	897b      	ldrh	r3, [r7, #10]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	4619      	mov	r1, r3
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f7ff ffca 	bl	8010994 <pbuf_skip_const>
 8010a00:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8010a02:	697b      	ldr	r3, [r7, #20]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3718      	adds	r7, #24
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	603a      	str	r2, [r7, #0]
 8010a16:	71fb      	strb	r3, [r7, #7]
 8010a18:	460b      	mov	r3, r1
 8010a1a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	8919      	ldrh	r1, [r3, #8]
 8010a20:	88ba      	ldrh	r2, [r7, #4]
 8010a22:	79fb      	ldrb	r3, [r7, #7]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7ff fa55 	bl	800fed4 <pbuf_alloc>
 8010a2a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d101      	bne.n	8010a36 <pbuf_clone+0x2a>
    return NULL;
 8010a32:	2300      	movs	r3, #0
 8010a34:	e011      	b.n	8010a5a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7ff fe67 	bl	801070c <pbuf_copy>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010a42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d006      	beq.n	8010a58 <pbuf_clone+0x4c>
 8010a4a:	4b06      	ldr	r3, [pc, #24]	@ (8010a64 <pbuf_clone+0x58>)
 8010a4c:	f240 5224 	movw	r2, #1316	@ 0x524
 8010a50:	4905      	ldr	r1, [pc, #20]	@ (8010a68 <pbuf_clone+0x5c>)
 8010a52:	4806      	ldr	r0, [pc, #24]	@ (8010a6c <pbuf_clone+0x60>)
 8010a54:	f00b fb64 	bl	801c120 <iprintf>
  return q;
 8010a58:	68fb      	ldr	r3, [r7, #12]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	0801f45c 	.word	0x0801f45c
 8010a68:	0801f8d0 	.word	0x0801f8d0
 8010a6c:	0801f4bc 	.word	0x0801f4bc

08010a70 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8010a7c:	887b      	ldrh	r3, [r7, #2]
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 f80c 	bl	8010a9e <pbuf_try_get_at>
 8010a86:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	db02      	blt.n	8010a94 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	e000      	b.n	8010a96 <pbuf_get_at+0x26>
  }
  return 0;
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b084      	sub	sp, #16
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8010aaa:	f107 020a 	add.w	r2, r7, #10
 8010aae:	887b      	ldrh	r3, [r7, #2]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff ff6e 	bl	8010994 <pbuf_skip_const>
 8010ab8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00a      	beq.n	8010ad6 <pbuf_try_get_at+0x38>
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	895a      	ldrh	r2, [r3, #10]
 8010ac4:	897b      	ldrh	r3, [r7, #10]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d905      	bls.n	8010ad6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	897a      	ldrh	r2, [r7, #10]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	e001      	b.n	8010ada <pbuf_try_get_at+0x3c>
  }
  return -1;
 8010ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b084      	sub	sp, #16
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	460b      	mov	r3, r1
 8010aec:	807b      	strh	r3, [r7, #2]
 8010aee:	4613      	mov	r3, r2
 8010af0:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8010af2:	f107 020a 	add.w	r2, r7, #10
 8010af6:	887b      	ldrh	r3, [r7, #2]
 8010af8:	4619      	mov	r1, r3
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f7ff ff73 	bl	80109e6 <pbuf_skip>
 8010b00:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00a      	beq.n	8010b1e <pbuf_put_at+0x3c>
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	895a      	ldrh	r2, [r3, #10]
 8010b0c:	897b      	ldrh	r3, [r7, #10]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d905      	bls.n	8010b1e <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	897a      	ldrh	r2, [r7, #10]
 8010b18:	4413      	add	r3, r2
 8010b1a:	787a      	ldrb	r2, [r7, #1]
 8010b1c:	701a      	strb	r2, [r3, #0]
  }
}
 8010b1e:	bf00      	nop
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
	...

08010b28 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010b2c:	f00a fd28 	bl	801b580 <rand>
 8010b30:	4603      	mov	r3, r0
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	4b01      	ldr	r3, [pc, #4]	@ (8010b48 <tcp_init+0x20>)
 8010b42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010b44:	bf00      	nop
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	200000b0 	.word	0x200000b0

08010b4c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7d1b      	ldrb	r3, [r3, #20]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d105      	bne.n	8010b68 <tcp_free+0x1c>
 8010b5c:	4b06      	ldr	r3, [pc, #24]	@ (8010b78 <tcp_free+0x2c>)
 8010b5e:	22d4      	movs	r2, #212	@ 0xd4
 8010b60:	4906      	ldr	r1, [pc, #24]	@ (8010b7c <tcp_free+0x30>)
 8010b62:	4807      	ldr	r0, [pc, #28]	@ (8010b80 <tcp_free+0x34>)
 8010b64:	f00b fadc 	bl	801c120 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	f7fe fdf8 	bl	800f760 <memp_free>
}
 8010b70:	bf00      	nop
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	0801f95c 	.word	0x0801f95c
 8010b7c:	0801f98c 	.word	0x0801f98c
 8010b80:	0801f9a0 	.word	0x0801f9a0

08010b84 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	7d1b      	ldrb	r3, [r3, #20]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d105      	bne.n	8010ba0 <tcp_free_listen+0x1c>
 8010b94:	4b06      	ldr	r3, [pc, #24]	@ (8010bb0 <tcp_free_listen+0x2c>)
 8010b96:	22df      	movs	r2, #223	@ 0xdf
 8010b98:	4906      	ldr	r1, [pc, #24]	@ (8010bb4 <tcp_free_listen+0x30>)
 8010b9a:	4807      	ldr	r0, [pc, #28]	@ (8010bb8 <tcp_free_listen+0x34>)
 8010b9c:	f00b fac0 	bl	801c120 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010ba0:	6879      	ldr	r1, [r7, #4]
 8010ba2:	2002      	movs	r0, #2
 8010ba4:	f7fe fddc 	bl	800f760 <memp_free>
}
 8010ba8:	bf00      	nop
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	0801f95c 	.word	0x0801f95c
 8010bb4:	0801f9c8 	.word	0x0801f9c8
 8010bb8:	0801f9a0 	.word	0x0801f9a0

08010bbc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010bc0:	f000 fea6 	bl	8011910 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010bc4:	4b07      	ldr	r3, [pc, #28]	@ (8010be4 <tcp_tmr+0x28>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	4b05      	ldr	r3, [pc, #20]	@ (8010be4 <tcp_tmr+0x28>)
 8010bce:	701a      	strb	r2, [r3, #0]
 8010bd0:	4b04      	ldr	r3, [pc, #16]	@ (8010be4 <tcp_tmr+0x28>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d001      	beq.n	8010be0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010bdc:	f000 fb56 	bl	801128c <tcp_slowtmr>
  }
}
 8010be0:	bf00      	nop
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	20013d25 	.word	0x20013d25

08010be8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d105      	bne.n	8010c04 <tcp_remove_listener+0x1c>
 8010bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8010c30 <tcp_remove_listener+0x48>)
 8010bfa:	22ff      	movs	r2, #255	@ 0xff
 8010bfc:	490d      	ldr	r1, [pc, #52]	@ (8010c34 <tcp_remove_listener+0x4c>)
 8010bfe:	480e      	ldr	r0, [pc, #56]	@ (8010c38 <tcp_remove_listener+0x50>)
 8010c00:	f00b fa8e 	bl	801c120 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	60fb      	str	r3, [r7, #12]
 8010c08:	e00a      	b.n	8010c20 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d102      	bne.n	8010c1a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2200      	movs	r2, #0
 8010c18:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1f1      	bne.n	8010c0a <tcp_remove_listener+0x22>
    }
  }
}
 8010c26:	bf00      	nop
 8010c28:	bf00      	nop
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	0801f95c 	.word	0x0801f95c
 8010c34:	0801f9e4 	.word	0x0801f9e4
 8010c38:	0801f9a0 	.word	0x0801f9a0

08010c3c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <tcp_listen_closed+0x1c>
 8010c4a:	4b14      	ldr	r3, [pc, #80]	@ (8010c9c <tcp_listen_closed+0x60>)
 8010c4c:	f240 1211 	movw	r2, #273	@ 0x111
 8010c50:	4913      	ldr	r1, [pc, #76]	@ (8010ca0 <tcp_listen_closed+0x64>)
 8010c52:	4814      	ldr	r0, [pc, #80]	@ (8010ca4 <tcp_listen_closed+0x68>)
 8010c54:	f00b fa64 	bl	801c120 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	7d1b      	ldrb	r3, [r3, #20]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d006      	beq.n	8010c6e <tcp_listen_closed+0x32>
 8010c60:	4b0e      	ldr	r3, [pc, #56]	@ (8010c9c <tcp_listen_closed+0x60>)
 8010c62:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010c66:	4910      	ldr	r1, [pc, #64]	@ (8010ca8 <tcp_listen_closed+0x6c>)
 8010c68:	480e      	ldr	r0, [pc, #56]	@ (8010ca4 <tcp_listen_closed+0x68>)
 8010c6a:	f00b fa59 	bl	801c120 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010c6e:	2301      	movs	r3, #1
 8010c70:	60fb      	str	r3, [r7, #12]
 8010c72:	e00b      	b.n	8010c8c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010c74:	4a0d      	ldr	r2, [pc, #52]	@ (8010cac <tcp_listen_closed+0x70>)
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6879      	ldr	r1, [r7, #4]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7ff ffb1 	bl	8010be8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	60fb      	str	r3, [r7, #12]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2b03      	cmp	r3, #3
 8010c90:	d9f0      	bls.n	8010c74 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010c92:	bf00      	nop
 8010c94:	bf00      	nop
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	0801f95c 	.word	0x0801f95c
 8010ca0:	0801fa0c 	.word	0x0801fa0c
 8010ca4:	0801f9a0 	.word	0x0801f9a0
 8010ca8:	0801fa18 	.word	0x0801fa18
 8010cac:	0806da28 	.word	0x0806da28

08010cb0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010cb0:	b5b0      	push	{r4, r5, r7, lr}
 8010cb2:	b088      	sub	sp, #32
 8010cb4:	af04      	add	r7, sp, #16
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d106      	bne.n	8010cd0 <tcp_close_shutdown+0x20>
 8010cc2:	4b63      	ldr	r3, [pc, #396]	@ (8010e50 <tcp_close_shutdown+0x1a0>)
 8010cc4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010cc8:	4962      	ldr	r1, [pc, #392]	@ (8010e54 <tcp_close_shutdown+0x1a4>)
 8010cca:	4863      	ldr	r0, [pc, #396]	@ (8010e58 <tcp_close_shutdown+0x1a8>)
 8010ccc:	f00b fa28 	bl	801c120 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010cd0:	78fb      	ldrb	r3, [r7, #3]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d067      	beq.n	8010da6 <tcp_close_shutdown+0xf6>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	7d1b      	ldrb	r3, [r3, #20]
 8010cda:	2b04      	cmp	r3, #4
 8010cdc:	d003      	beq.n	8010ce6 <tcp_close_shutdown+0x36>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	7d1b      	ldrb	r3, [r3, #20]
 8010ce2:	2b07      	cmp	r3, #7
 8010ce4:	d15f      	bne.n	8010da6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d105      	bne.n	8010cfa <tcp_close_shutdown+0x4a>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cf2:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d055      	beq.n	8010da6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	8b5b      	ldrh	r3, [r3, #26]
 8010cfe:	f003 0310 	and.w	r3, r3, #16
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d106      	bne.n	8010d14 <tcp_close_shutdown+0x64>
 8010d06:	4b52      	ldr	r3, [pc, #328]	@ (8010e50 <tcp_close_shutdown+0x1a0>)
 8010d08:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8010d0c:	4953      	ldr	r1, [pc, #332]	@ (8010e5c <tcp_close_shutdown+0x1ac>)
 8010d0e:	4852      	ldr	r0, [pc, #328]	@ (8010e58 <tcp_close_shutdown+0x1a8>)
 8010d10:	f00b fa06 	bl	801c120 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010d1c:	687d      	ldr	r5, [r7, #4]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	3304      	adds	r3, #4
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	8ad2      	ldrh	r2, [r2, #22]
 8010d26:	6879      	ldr	r1, [r7, #4]
 8010d28:	8b09      	ldrh	r1, [r1, #24]
 8010d2a:	9102      	str	r1, [sp, #8]
 8010d2c:	9201      	str	r2, [sp, #4]
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	462b      	mov	r3, r5
 8010d32:	4622      	mov	r2, r4
 8010d34:	4601      	mov	r1, r0
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f004 fedc 	bl	8015af4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f001 f8cb 	bl	8011ed8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010d42:	4b47      	ldr	r3, [pc, #284]	@ (8010e60 <tcp_close_shutdown+0x1b0>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d105      	bne.n	8010d58 <tcp_close_shutdown+0xa8>
 8010d4c:	4b44      	ldr	r3, [pc, #272]	@ (8010e60 <tcp_close_shutdown+0x1b0>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	4a43      	ldr	r2, [pc, #268]	@ (8010e60 <tcp_close_shutdown+0x1b0>)
 8010d54:	6013      	str	r3, [r2, #0]
 8010d56:	e013      	b.n	8010d80 <tcp_close_shutdown+0xd0>
 8010d58:	4b41      	ldr	r3, [pc, #260]	@ (8010e60 <tcp_close_shutdown+0x1b0>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	60fb      	str	r3, [r7, #12]
 8010d5e:	e00c      	b.n	8010d7a <tcp_close_shutdown+0xca>
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d104      	bne.n	8010d74 <tcp_close_shutdown+0xc4>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	68da      	ldr	r2, [r3, #12]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	60da      	str	r2, [r3, #12]
 8010d72:	e005      	b.n	8010d80 <tcp_close_shutdown+0xd0>
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	60fb      	str	r3, [r7, #12]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d1ef      	bne.n	8010d60 <tcp_close_shutdown+0xb0>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2200      	movs	r2, #0
 8010d84:	60da      	str	r2, [r3, #12]
 8010d86:	4b37      	ldr	r3, [pc, #220]	@ (8010e64 <tcp_close_shutdown+0x1b4>)
 8010d88:	2201      	movs	r2, #1
 8010d8a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010d8c:	4b36      	ldr	r3, [pc, #216]	@ (8010e68 <tcp_close_shutdown+0x1b8>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d102      	bne.n	8010d9c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010d96:	f003 fd75 	bl	8014884 <tcp_trigger_input_pcb_close>
 8010d9a:	e002      	b.n	8010da2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7ff fed5 	bl	8010b4c <tcp_free>
      }
      return ERR_OK;
 8010da2:	2300      	movs	r3, #0
 8010da4:	e050      	b.n	8010e48 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	7d1b      	ldrb	r3, [r3, #20]
 8010daa:	2b02      	cmp	r3, #2
 8010dac:	d03b      	beq.n	8010e26 <tcp_close_shutdown+0x176>
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	dc44      	bgt.n	8010e3c <tcp_close_shutdown+0x18c>
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d002      	beq.n	8010dbc <tcp_close_shutdown+0x10c>
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d02a      	beq.n	8010e10 <tcp_close_shutdown+0x160>
 8010dba:	e03f      	b.n	8010e3c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	8adb      	ldrh	r3, [r3, #22]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d021      	beq.n	8010e08 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010dc4:	4b29      	ldr	r3, [pc, #164]	@ (8010e6c <tcp_close_shutdown+0x1bc>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d105      	bne.n	8010dda <tcp_close_shutdown+0x12a>
 8010dce:	4b27      	ldr	r3, [pc, #156]	@ (8010e6c <tcp_close_shutdown+0x1bc>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	4a25      	ldr	r2, [pc, #148]	@ (8010e6c <tcp_close_shutdown+0x1bc>)
 8010dd6:	6013      	str	r3, [r2, #0]
 8010dd8:	e013      	b.n	8010e02 <tcp_close_shutdown+0x152>
 8010dda:	4b24      	ldr	r3, [pc, #144]	@ (8010e6c <tcp_close_shutdown+0x1bc>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	60bb      	str	r3, [r7, #8]
 8010de0:	e00c      	b.n	8010dfc <tcp_close_shutdown+0x14c>
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d104      	bne.n	8010df6 <tcp_close_shutdown+0x146>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	68da      	ldr	r2, [r3, #12]
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	60da      	str	r2, [r3, #12]
 8010df4:	e005      	b.n	8010e02 <tcp_close_shutdown+0x152>
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	60bb      	str	r3, [r7, #8]
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1ef      	bne.n	8010de2 <tcp_close_shutdown+0x132>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7ff fe9f 	bl	8010b4c <tcp_free>
      break;
 8010e0e:	e01a      	b.n	8010e46 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7ff ff13 	bl	8010c3c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	4815      	ldr	r0, [pc, #84]	@ (8010e70 <tcp_close_shutdown+0x1c0>)
 8010e1a:	f001 f8ad 	bl	8011f78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff feb0 	bl	8010b84 <tcp_free_listen>
      break;
 8010e24:	e00f      	b.n	8010e46 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e26:	6879      	ldr	r1, [r7, #4]
 8010e28:	480d      	ldr	r0, [pc, #52]	@ (8010e60 <tcp_close_shutdown+0x1b0>)
 8010e2a:	f001 f8a5 	bl	8011f78 <tcp_pcb_remove>
 8010e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e64 <tcp_close_shutdown+0x1b4>)
 8010e30:	2201      	movs	r2, #1
 8010e32:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff fe89 	bl	8010b4c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010e3a:	e004      	b.n	8010e46 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f819 	bl	8010e74 <tcp_close_shutdown_fin>
 8010e42:	4603      	mov	r3, r0
 8010e44:	e000      	b.n	8010e48 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8010e50:	0801f95c 	.word	0x0801f95c
 8010e54:	0801fa30 	.word	0x0801fa30
 8010e58:	0801f9a0 	.word	0x0801f9a0
 8010e5c:	0801fa50 	.word	0x0801fa50
 8010e60:	20013d1c 	.word	0x20013d1c
 8010e64:	20013d24 	.word	0x20013d24
 8010e68:	20013d60 	.word	0x20013d60
 8010e6c:	20013d14 	.word	0x20013d14
 8010e70:	20013d18 	.word	0x20013d18

08010e74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d106      	bne.n	8010e90 <tcp_close_shutdown_fin+0x1c>
 8010e82:	4b2e      	ldr	r3, [pc, #184]	@ (8010f3c <tcp_close_shutdown_fin+0xc8>)
 8010e84:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8010e88:	492d      	ldr	r1, [pc, #180]	@ (8010f40 <tcp_close_shutdown_fin+0xcc>)
 8010e8a:	482e      	ldr	r0, [pc, #184]	@ (8010f44 <tcp_close_shutdown_fin+0xd0>)
 8010e8c:	f00b f948 	bl	801c120 <iprintf>

  switch (pcb->state) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	7d1b      	ldrb	r3, [r3, #20]
 8010e94:	2b07      	cmp	r3, #7
 8010e96:	d020      	beq.n	8010eda <tcp_close_shutdown_fin+0x66>
 8010e98:	2b07      	cmp	r3, #7
 8010e9a:	dc2b      	bgt.n	8010ef4 <tcp_close_shutdown_fin+0x80>
 8010e9c:	2b03      	cmp	r3, #3
 8010e9e:	d002      	beq.n	8010ea6 <tcp_close_shutdown_fin+0x32>
 8010ea0:	2b04      	cmp	r3, #4
 8010ea2:	d00d      	beq.n	8010ec0 <tcp_close_shutdown_fin+0x4c>
 8010ea4:	e026      	b.n	8010ef4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f003 ff04 	bl	8014cb4 <tcp_send_fin>
 8010eac:	4603      	mov	r3, r0
 8010eae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d11f      	bne.n	8010ef8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2205      	movs	r2, #5
 8010ebc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ebe:	e01b      	b.n	8010ef8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f003 fef7 	bl	8014cb4 <tcp_send_fin>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d114      	bne.n	8010efc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2205      	movs	r2, #5
 8010ed6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ed8:	e010      	b.n	8010efc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f003 feea 	bl	8014cb4 <tcp_send_fin>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d109      	bne.n	8010f00 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2209      	movs	r2, #9
 8010ef0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ef2:	e005      	b.n	8010f00 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	e01c      	b.n	8010f32 <tcp_close_shutdown_fin+0xbe>
      break;
 8010ef8:	bf00      	nop
 8010efa:	e002      	b.n	8010f02 <tcp_close_shutdown_fin+0x8e>
      break;
 8010efc:	bf00      	nop
 8010efe:	e000      	b.n	8010f02 <tcp_close_shutdown_fin+0x8e>
      break;
 8010f00:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d103      	bne.n	8010f12 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f004 f810 	bl	8014f30 <tcp_output>
 8010f10:	e00d      	b.n	8010f2e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1a:	d108      	bne.n	8010f2e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	8b5b      	ldrh	r3, [r3, #26]
 8010f20:	f043 0308 	orr.w	r3, r3, #8
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	e001      	b.n	8010f32 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	0801f95c 	.word	0x0801f95c
 8010f40:	0801fa0c 	.word	0x0801fa0c
 8010f44:	0801f9a0 	.word	0x0801f9a0

08010f48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d109      	bne.n	8010f6a <tcp_close+0x22>
 8010f56:	4b0f      	ldr	r3, [pc, #60]	@ (8010f94 <tcp_close+0x4c>)
 8010f58:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8010f5c:	490e      	ldr	r1, [pc, #56]	@ (8010f98 <tcp_close+0x50>)
 8010f5e:	480f      	ldr	r0, [pc, #60]	@ (8010f9c <tcp_close+0x54>)
 8010f60:	f00b f8de 	bl	801c120 <iprintf>
 8010f64:	f06f 030f 	mvn.w	r3, #15
 8010f68:	e00f      	b.n	8010f8a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	7d1b      	ldrb	r3, [r3, #20]
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d006      	beq.n	8010f80 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	8b5b      	ldrh	r3, [r3, #26]
 8010f76:	f043 0310 	orr.w	r3, r3, #16
 8010f7a:	b29a      	uxth	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010f80:	2101      	movs	r1, #1
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff fe94 	bl	8010cb0 <tcp_close_shutdown>
 8010f88:	4603      	mov	r3, r0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	0801f95c 	.word	0x0801f95c
 8010f98:	0801fa6c 	.word	0x0801fa6c
 8010f9c:	0801f9a0 	.word	0x0801f9a0

08010fa0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b08e      	sub	sp, #56	@ 0x38
 8010fa4:	af04      	add	r7, sp, #16
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d107      	bne.n	8010fc0 <tcp_abandon+0x20>
 8010fb0:	4b52      	ldr	r3, [pc, #328]	@ (80110fc <tcp_abandon+0x15c>)
 8010fb2:	f240 223d 	movw	r2, #573	@ 0x23d
 8010fb6:	4952      	ldr	r1, [pc, #328]	@ (8011100 <tcp_abandon+0x160>)
 8010fb8:	4852      	ldr	r0, [pc, #328]	@ (8011104 <tcp_abandon+0x164>)
 8010fba:	f00b f8b1 	bl	801c120 <iprintf>
 8010fbe:	e099      	b.n	80110f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	7d1b      	ldrb	r3, [r3, #20]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d106      	bne.n	8010fd6 <tcp_abandon+0x36>
 8010fc8:	4b4c      	ldr	r3, [pc, #304]	@ (80110fc <tcp_abandon+0x15c>)
 8010fca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010fce:	494e      	ldr	r1, [pc, #312]	@ (8011108 <tcp_abandon+0x168>)
 8010fd0:	484c      	ldr	r0, [pc, #304]	@ (8011104 <tcp_abandon+0x164>)
 8010fd2:	f00b f8a5 	bl	801c120 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	7d1b      	ldrb	r3, [r3, #20]
 8010fda:	2b0a      	cmp	r3, #10
 8010fdc:	d107      	bne.n	8010fee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010fde:	6879      	ldr	r1, [r7, #4]
 8010fe0:	484a      	ldr	r0, [pc, #296]	@ (801110c <tcp_abandon+0x16c>)
 8010fe2:	f000 ffc9 	bl	8011f78 <tcp_pcb_remove>
    tcp_free(pcb);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7ff fdb0 	bl	8010b4c <tcp_free>
 8010fec:	e082      	b.n	80110f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ffa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011000:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011008:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7d1b      	ldrb	r3, [r3, #20]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d126      	bne.n	8011066 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	8adb      	ldrh	r3, [r3, #22]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d02e      	beq.n	801107e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011020:	4b3b      	ldr	r3, [pc, #236]	@ (8011110 <tcp_abandon+0x170>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	429a      	cmp	r2, r3
 8011028:	d105      	bne.n	8011036 <tcp_abandon+0x96>
 801102a:	4b39      	ldr	r3, [pc, #228]	@ (8011110 <tcp_abandon+0x170>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	4a37      	ldr	r2, [pc, #220]	@ (8011110 <tcp_abandon+0x170>)
 8011032:	6013      	str	r3, [r2, #0]
 8011034:	e013      	b.n	801105e <tcp_abandon+0xbe>
 8011036:	4b36      	ldr	r3, [pc, #216]	@ (8011110 <tcp_abandon+0x170>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	61fb      	str	r3, [r7, #28]
 801103c:	e00c      	b.n	8011058 <tcp_abandon+0xb8>
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	429a      	cmp	r2, r3
 8011046:	d104      	bne.n	8011052 <tcp_abandon+0xb2>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	68da      	ldr	r2, [r3, #12]
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	60da      	str	r2, [r3, #12]
 8011050:	e005      	b.n	801105e <tcp_abandon+0xbe>
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	61fb      	str	r3, [r7, #28]
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1ef      	bne.n	801103e <tcp_abandon+0x9e>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	60da      	str	r2, [r3, #12]
 8011064:	e00b      	b.n	801107e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	8adb      	ldrh	r3, [r3, #22]
 801106e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	4828      	ldr	r0, [pc, #160]	@ (8011114 <tcp_abandon+0x174>)
 8011074:	f000 ff80 	bl	8011f78 <tcp_pcb_remove>
 8011078:	4b27      	ldr	r3, [pc, #156]	@ (8011118 <tcp_abandon+0x178>)
 801107a:	2201      	movs	r2, #1
 801107c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011082:	2b00      	cmp	r3, #0
 8011084:	d004      	beq.n	8011090 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801108a:	4618      	mov	r0, r3
 801108c:	f000 fd22 	bl	8011ad4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011094:	2b00      	cmp	r3, #0
 8011096:	d004      	beq.n	80110a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801109c:	4618      	mov	r0, r3
 801109e:	f000 fd19 	bl	8011ad4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d004      	beq.n	80110b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 fd10 	bl	8011ad4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80110b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00e      	beq.n	80110d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80110ba:	6879      	ldr	r1, [r7, #4]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	3304      	adds	r3, #4
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	8b12      	ldrh	r2, [r2, #24]
 80110c4:	9202      	str	r2, [sp, #8]
 80110c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80110c8:	9201      	str	r2, [sp, #4]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	460b      	mov	r3, r1
 80110ce:	697a      	ldr	r2, [r7, #20]
 80110d0:	69b9      	ldr	r1, [r7, #24]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f004 fd0e 	bl	8015af4 <tcp_rst>
    }
    last_state = pcb->state;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	7d1b      	ldrb	r3, [r3, #20]
 80110dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff fd34 	bl	8010b4c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d004      	beq.n	80110f4 <tcp_abandon+0x154>
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	f06f 010c 	mvn.w	r1, #12
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	4798      	blx	r3
  }
}
 80110f4:	3728      	adds	r7, #40	@ 0x28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	0801f95c 	.word	0x0801f95c
 8011100:	0801faa0 	.word	0x0801faa0
 8011104:	0801f9a0 	.word	0x0801f9a0
 8011108:	0801fabc 	.word	0x0801fabc
 801110c:	20013d20 	.word	0x20013d20
 8011110:	20013d14 	.word	0x20013d14
 8011114:	20013d1c 	.word	0x20013d1c
 8011118:	20013d24 	.word	0x20013d24

0801111c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011124:	2101      	movs	r1, #1
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff ff3a 	bl	8010fa0 <tcp_abandon>
}
 801112c:	bf00      	nop
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d106      	bne.n	8011150 <tcp_update_rcv_ann_wnd+0x1c>
 8011142:	4b25      	ldr	r3, [pc, #148]	@ (80111d8 <tcp_update_rcv_ann_wnd+0xa4>)
 8011144:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011148:	4924      	ldr	r1, [pc, #144]	@ (80111dc <tcp_update_rcv_ann_wnd+0xa8>)
 801114a:	4825      	ldr	r0, [pc, #148]	@ (80111e0 <tcp_update_rcv_ann_wnd+0xac>)
 801114c:	f00a ffe8 	bl	801c120 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011158:	4413      	add	r3, r2
 801115a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011164:	f241 61d0 	movw	r1, #5840	@ 0x16d0
 8011168:	428a      	cmp	r2, r1
 801116a:	bf28      	it	cs
 801116c:	460a      	movcs	r2, r1
 801116e:	b292      	uxth	r2, r2
 8011170:	4413      	add	r3, r2
 8011172:	68fa      	ldr	r2, [r7, #12]
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	2b00      	cmp	r3, #0
 8011178:	db08      	blt.n	801118c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	e020      	b.n	80111ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	2b00      	cmp	r3, #0
 8011198:	dd03      	ble.n	80111a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80111a0:	e014      	b.n	80111cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111b4:	d306      	bcc.n	80111c4 <tcp_update_rcv_ann_wnd+0x90>
 80111b6:	4b08      	ldr	r3, [pc, #32]	@ (80111d8 <tcp_update_rcv_ann_wnd+0xa4>)
 80111b8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80111bc:	4909      	ldr	r1, [pc, #36]	@ (80111e4 <tcp_update_rcv_ann_wnd+0xb0>)
 80111be:	4808      	ldr	r0, [pc, #32]	@ (80111e0 <tcp_update_rcv_ann_wnd+0xac>)
 80111c0:	f00a ffae 	bl	801c120 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80111cc:	2300      	movs	r3, #0
  }
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	0801f95c 	.word	0x0801f95c
 80111dc:	0801fbb8 	.word	0x0801fbb8
 80111e0:	0801f9a0 	.word	0x0801f9a0
 80111e4:	0801fbdc 	.word	0x0801fbdc

080111e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	460b      	mov	r3, r1
 80111f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d107      	bne.n	801120a <tcp_recved+0x22>
 80111fa:	4b20      	ldr	r3, [pc, #128]	@ (801127c <tcp_recved+0x94>)
 80111fc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011200:	491f      	ldr	r1, [pc, #124]	@ (8011280 <tcp_recved+0x98>)
 8011202:	4820      	ldr	r0, [pc, #128]	@ (8011284 <tcp_recved+0x9c>)
 8011204:	f00a ff8c 	bl	801c120 <iprintf>
 8011208:	e034      	b.n	8011274 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7d1b      	ldrb	r3, [r3, #20]
 801120e:	2b01      	cmp	r3, #1
 8011210:	d106      	bne.n	8011220 <tcp_recved+0x38>
 8011212:	4b1a      	ldr	r3, [pc, #104]	@ (801127c <tcp_recved+0x94>)
 8011214:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8011218:	491b      	ldr	r1, [pc, #108]	@ (8011288 <tcp_recved+0xa0>)
 801121a:	481a      	ldr	r0, [pc, #104]	@ (8011284 <tcp_recved+0x9c>)
 801121c:	f00a ff80 	bl	801c120 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011224:	887b      	ldrh	r3, [r7, #2]
 8011226:	4413      	add	r3, r2
 8011228:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801122a:	89fb      	ldrh	r3, [r7, #14]
 801122c:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011230:	4293      	cmp	r3, r2
 8011232:	d804      	bhi.n	801123e <tcp_recved+0x56>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011238:	89fa      	ldrh	r2, [r7, #14]
 801123a:	429a      	cmp	r2, r3
 801123c:	d204      	bcs.n	8011248 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011244:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011246:	e002      	b.n	801124e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	89fa      	ldrh	r2, [r7, #14]
 801124c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7ff ff70 	bl	8011134 <tcp_update_rcv_ann_wnd>
 8011254:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	f640 3267 	movw	r2, #2919	@ 0xb67
 801125c:	4293      	cmp	r3, r2
 801125e:	d909      	bls.n	8011274 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	8b5b      	ldrh	r3, [r3, #26]
 8011264:	f043 0302 	orr.w	r3, r3, #2
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f003 fe5e 	bl	8014f30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	0801f95c 	.word	0x0801f95c
 8011280:	0801fbf8 	.word	0x0801fbf8
 8011284:	0801f9a0 	.word	0x0801f9a0
 8011288:	0801fc10 	.word	0x0801fc10

0801128c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801128c:	b5b0      	push	{r4, r5, r7, lr}
 801128e:	b090      	sub	sp, #64	@ 0x40
 8011290:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011292:	2300      	movs	r3, #0
 8011294:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8011298:	4b95      	ldr	r3, [pc, #596]	@ (80114f0 <tcp_slowtmr+0x264>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	3301      	adds	r3, #1
 801129e:	4a94      	ldr	r2, [pc, #592]	@ (80114f0 <tcp_slowtmr+0x264>)
 80112a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80112a2:	4b94      	ldr	r3, [pc, #592]	@ (80114f4 <tcp_slowtmr+0x268>)
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	3301      	adds	r3, #1
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	4b92      	ldr	r3, [pc, #584]	@ (80114f4 <tcp_slowtmr+0x268>)
 80112ac:	701a      	strb	r2, [r3, #0]
 80112ae:	e000      	b.n	80112b2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80112b0:	bf00      	nop
  prev = NULL;
 80112b2:	2300      	movs	r3, #0
 80112b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80112b6:	4b90      	ldr	r3, [pc, #576]	@ (80114f8 <tcp_slowtmr+0x26c>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80112bc:	e29f      	b.n	80117fe <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80112be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c0:	7d1b      	ldrb	r3, [r3, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d106      	bne.n	80112d4 <tcp_slowtmr+0x48>
 80112c6:	4b8d      	ldr	r3, [pc, #564]	@ (80114fc <tcp_slowtmr+0x270>)
 80112c8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80112cc:	498c      	ldr	r1, [pc, #560]	@ (8011500 <tcp_slowtmr+0x274>)
 80112ce:	488d      	ldr	r0, [pc, #564]	@ (8011504 <tcp_slowtmr+0x278>)
 80112d0:	f00a ff26 	bl	801c120 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80112d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d6:	7d1b      	ldrb	r3, [r3, #20]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d106      	bne.n	80112ea <tcp_slowtmr+0x5e>
 80112dc:	4b87      	ldr	r3, [pc, #540]	@ (80114fc <tcp_slowtmr+0x270>)
 80112de:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80112e2:	4989      	ldr	r1, [pc, #548]	@ (8011508 <tcp_slowtmr+0x27c>)
 80112e4:	4887      	ldr	r0, [pc, #540]	@ (8011504 <tcp_slowtmr+0x278>)
 80112e6:	f00a ff1b 	bl	801c120 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80112ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ec:	7d1b      	ldrb	r3, [r3, #20]
 80112ee:	2b0a      	cmp	r3, #10
 80112f0:	d106      	bne.n	8011300 <tcp_slowtmr+0x74>
 80112f2:	4b82      	ldr	r3, [pc, #520]	@ (80114fc <tcp_slowtmr+0x270>)
 80112f4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80112f8:	4984      	ldr	r1, [pc, #528]	@ (801150c <tcp_slowtmr+0x280>)
 80112fa:	4882      	ldr	r0, [pc, #520]	@ (8011504 <tcp_slowtmr+0x278>)
 80112fc:	f00a ff10 	bl	801c120 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011302:	7f9a      	ldrb	r2, [r3, #30]
 8011304:	4b7b      	ldr	r3, [pc, #492]	@ (80114f4 <tcp_slowtmr+0x268>)
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	429a      	cmp	r2, r3
 801130a:	d105      	bne.n	8011318 <tcp_slowtmr+0x8c>
      prev = pcb;
 801130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8011316:	e272      	b.n	80117fe <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8011318:	4b76      	ldr	r3, [pc, #472]	@ (80114f4 <tcp_slowtmr+0x268>)
 801131a:	781a      	ldrb	r2, [r3, #0]
 801131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011320:	2300      	movs	r3, #0
 8011322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8011326:	2300      	movs	r3, #0
 8011328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132e:	7d1b      	ldrb	r3, [r3, #20]
 8011330:	2b02      	cmp	r3, #2
 8011332:	d10a      	bne.n	801134a <tcp_slowtmr+0xbe>
 8011334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801133a:	2b05      	cmp	r3, #5
 801133c:	d905      	bls.n	801134a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801133e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011342:	3301      	adds	r3, #1
 8011344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8011348:	e11e      	b.n	8011588 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801134a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011350:	2b0b      	cmp	r3, #11
 8011352:	d905      	bls.n	8011360 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8011354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011358:	3301      	adds	r3, #1
 801135a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801135e:	e113      	b.n	8011588 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011366:	2b00      	cmp	r3, #0
 8011368:	d075      	beq.n	8011456 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801136e:	2b00      	cmp	r3, #0
 8011370:	d006      	beq.n	8011380 <tcp_slowtmr+0xf4>
 8011372:	4b62      	ldr	r3, [pc, #392]	@ (80114fc <tcp_slowtmr+0x270>)
 8011374:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011378:	4965      	ldr	r1, [pc, #404]	@ (8011510 <tcp_slowtmr+0x284>)
 801137a:	4862      	ldr	r0, [pc, #392]	@ (8011504 <tcp_slowtmr+0x278>)
 801137c:	f00a fed0 	bl	801c120 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011384:	2b00      	cmp	r3, #0
 8011386:	d106      	bne.n	8011396 <tcp_slowtmr+0x10a>
 8011388:	4b5c      	ldr	r3, [pc, #368]	@ (80114fc <tcp_slowtmr+0x270>)
 801138a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801138e:	4961      	ldr	r1, [pc, #388]	@ (8011514 <tcp_slowtmr+0x288>)
 8011390:	485c      	ldr	r0, [pc, #368]	@ (8011504 <tcp_slowtmr+0x278>)
 8011392:	f00a fec5 	bl	801c120 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011398:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801139c:	2b0b      	cmp	r3, #11
 801139e:	d905      	bls.n	80113ac <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80113a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113a4:	3301      	adds	r3, #1
 80113a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113aa:	e0ed      	b.n	8011588 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80113ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80113b2:	3b01      	subs	r3, #1
 80113b4:	4a58      	ldr	r2, [pc, #352]	@ (8011518 <tcp_slowtmr+0x28c>)
 80113b6:	5cd3      	ldrb	r3, [r2, r3]
 80113b8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80113ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80113c0:	7c7a      	ldrb	r2, [r7, #17]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d907      	bls.n	80113d6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80113c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80113cc:	3301      	adds	r3, #1
 80113ce:	b2da      	uxtb	r2, r3
 80113d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80113d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80113dc:	7c7a      	ldrb	r2, [r7, #17]
 80113de:	429a      	cmp	r2, r3
 80113e0:	f200 80d2 	bhi.w	8011588 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80113e4:	2301      	movs	r3, #1
 80113e6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80113e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d108      	bne.n	8011404 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80113f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80113f4:	f004 fc72 	bl	8015cdc <tcp_zero_window_probe>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d014      	beq.n	8011428 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80113fe:	2300      	movs	r3, #0
 8011400:	623b      	str	r3, [r7, #32]
 8011402:	e011      	b.n	8011428 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801140a:	4619      	mov	r1, r3
 801140c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801140e:	f003 fb05 	bl	8014a1c <tcp_split_unsent_seg>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d107      	bne.n	8011428 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8011418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801141a:	f003 fd89 	bl	8014f30 <tcp_output>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d101      	bne.n	8011428 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8011424:	2300      	movs	r3, #0
 8011426:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8011428:	6a3b      	ldr	r3, [r7, #32]
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 80ac 	beq.w	8011588 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011432:	2200      	movs	r2, #0
 8011434:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801143a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801143e:	2b06      	cmp	r3, #6
 8011440:	f200 80a2 	bhi.w	8011588 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8011444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011446:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801144a:	3301      	adds	r3, #1
 801144c:	b2da      	uxtb	r2, r3
 801144e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011450:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8011454:	e098      	b.n	8011588 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011458:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801145c:	2b00      	cmp	r3, #0
 801145e:	db0f      	blt.n	8011480 <tcp_slowtmr+0x1f4>
 8011460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011462:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011466:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801146a:	4293      	cmp	r3, r2
 801146c:	d008      	beq.n	8011480 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801146e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011470:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011474:	b29b      	uxth	r3, r3
 8011476:	3301      	adds	r3, #1
 8011478:	b29b      	uxth	r3, r3
 801147a:	b21a      	sxth	r2, r3
 801147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011482:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8011486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011488:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801148c:	429a      	cmp	r2, r3
 801148e:	db7b      	blt.n	8011588 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011492:	f004 f855 	bl	8015540 <tcp_rexmit_rto_prepare>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d007      	beq.n	80114ac <tcp_slowtmr+0x220>
 801149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d171      	bne.n	8011588 <tcp_slowtmr+0x2fc>
 80114a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d06d      	beq.n	8011588 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80114ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ae:	7d1b      	ldrb	r3, [r3, #20]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d03a      	beq.n	801152a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80114b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114ba:	2b0c      	cmp	r3, #12
 80114bc:	bf28      	it	cs
 80114be:	230c      	movcs	r3, #12
 80114c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80114c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80114c8:	10db      	asrs	r3, r3, #3
 80114ca:	b21b      	sxth	r3, r3
 80114cc:	461a      	mov	r2, r3
 80114ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80114d4:	4413      	add	r3, r2
 80114d6:	7efa      	ldrb	r2, [r7, #27]
 80114d8:	4910      	ldr	r1, [pc, #64]	@ (801151c <tcp_slowtmr+0x290>)
 80114da:	5c8a      	ldrb	r2, [r1, r2]
 80114dc:	4093      	lsls	r3, r2
 80114de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80114e6:	4293      	cmp	r3, r2
 80114e8:	dc1a      	bgt.n	8011520 <tcp_slowtmr+0x294>
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	b21a      	sxth	r2, r3
 80114ee:	e019      	b.n	8011524 <tcp_slowtmr+0x298>
 80114f0:	20013d10 	.word	0x20013d10
 80114f4:	20013d26 	.word	0x20013d26
 80114f8:	20013d1c 	.word	0x20013d1c
 80114fc:	0801f95c 	.word	0x0801f95c
 8011500:	0801fca0 	.word	0x0801fca0
 8011504:	0801f9a0 	.word	0x0801f9a0
 8011508:	0801fccc 	.word	0x0801fccc
 801150c:	0801fcf8 	.word	0x0801fcf8
 8011510:	0801fd28 	.word	0x0801fd28
 8011514:	0801fd5c 	.word	0x0801fd5c
 8011518:	0806da20 	.word	0x0806da20
 801151c:	0806da10 	.word	0x0806da10
 8011520:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011526:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	2200      	movs	r2, #0
 801152e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011532:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011538:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801153c:	4293      	cmp	r3, r2
 801153e:	bf28      	it	cs
 8011540:	4613      	movcs	r3, r2
 8011542:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011544:	8a7b      	ldrh	r3, [r7, #18]
 8011546:	085b      	lsrs	r3, r3, #1
 8011548:	b29a      	uxth	r2, r3
 801154a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011552:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011558:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	b29b      	uxth	r3, r3
 801155e:	429a      	cmp	r2, r3
 8011560:	d206      	bcs.n	8011570 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011566:	005b      	lsls	r3, r3, #1
 8011568:	b29a      	uxth	r2, r3
 801156a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801156c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011572:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011576:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157c:	2200      	movs	r2, #0
 801157e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011582:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011584:	f004 f856 	bl	8015634 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801158a:	7d1b      	ldrb	r3, [r3, #20]
 801158c:	2b06      	cmp	r3, #6
 801158e:	d111      	bne.n	80115b4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011592:	8b5b      	ldrh	r3, [r3, #26]
 8011594:	f003 0310 	and.w	r3, r3, #16
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00b      	beq.n	80115b4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801159c:	4b9d      	ldr	r3, [pc, #628]	@ (8011814 <tcp_slowtmr+0x588>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a2:	6a1b      	ldr	r3, [r3, #32]
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	2b28      	cmp	r3, #40	@ 0x28
 80115a8:	d904      	bls.n	80115b4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80115aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115ae:	3301      	adds	r3, #1
 80115b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80115b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b6:	7a5b      	ldrb	r3, [r3, #9]
 80115b8:	f003 0308 	and.w	r3, r3, #8
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d04c      	beq.n	801165a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80115c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80115c4:	2b04      	cmp	r3, #4
 80115c6:	d003      	beq.n	80115d0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80115c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80115cc:	2b07      	cmp	r3, #7
 80115ce:	d144      	bne.n	801165a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115d0:	4b90      	ldr	r3, [pc, #576]	@ (8011814 <tcp_slowtmr+0x588>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d6:	6a1b      	ldr	r3, [r3, #32]
 80115d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80115da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80115e0:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80115e4:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80115e8:	498b      	ldr	r1, [pc, #556]	@ (8011818 <tcp_slowtmr+0x58c>)
 80115ea:	fba1 1303 	umull	r1, r3, r1, r3
 80115ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d90a      	bls.n	801160a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80115f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115f8:	3301      	adds	r3, #1
 80115fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80115fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011602:	3301      	adds	r3, #1
 8011604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011608:	e027      	b.n	801165a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801160a:	4b82      	ldr	r3, [pc, #520]	@ (8011814 <tcp_slowtmr+0x588>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011616:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801161a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011620:	4618      	mov	r0, r3
 8011622:	4b7e      	ldr	r3, [pc, #504]	@ (801181c <tcp_slowtmr+0x590>)
 8011624:	fb00 f303 	mul.w	r3, r0, r3
 8011628:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801162a:	497b      	ldr	r1, [pc, #492]	@ (8011818 <tcp_slowtmr+0x58c>)
 801162c:	fba1 1303 	umull	r1, r3, r1, r3
 8011630:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011632:	429a      	cmp	r2, r3
 8011634:	d911      	bls.n	801165a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8011636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011638:	f004 fb10 	bl	8015c5c <tcp_keepalive>
 801163c:	4603      	mov	r3, r0
 801163e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011642:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011646:	2b00      	cmp	r3, #0
 8011648:	d107      	bne.n	801165a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 801164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011650:	3301      	adds	r3, #1
 8011652:	b2da      	uxtb	r2, r3
 8011654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011656:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801165a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801165e:	2b00      	cmp	r3, #0
 8011660:	d011      	beq.n	8011686 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011662:	4b6c      	ldr	r3, [pc, #432]	@ (8011814 <tcp_slowtmr+0x588>)
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	1ad2      	subs	r2, r2, r3
 801166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011672:	4619      	mov	r1, r3
 8011674:	460b      	mov	r3, r1
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	440b      	add	r3, r1
 801167a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801167c:	429a      	cmp	r2, r3
 801167e:	d302      	bcc.n	8011686 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8011680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011682:	f000 fddd 	bl	8012240 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011688:	7d1b      	ldrb	r3, [r3, #20]
 801168a:	2b03      	cmp	r3, #3
 801168c:	d10b      	bne.n	80116a6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801168e:	4b61      	ldr	r3, [pc, #388]	@ (8011814 <tcp_slowtmr+0x588>)
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	2b28      	cmp	r3, #40	@ 0x28
 801169a:	d904      	bls.n	80116a6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 801169c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116a0:	3301      	adds	r3, #1
 80116a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80116a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a8:	7d1b      	ldrb	r3, [r3, #20]
 80116aa:	2b09      	cmp	r3, #9
 80116ac:	d10b      	bne.n	80116c6 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80116ae:	4b59      	ldr	r3, [pc, #356]	@ (8011814 <tcp_slowtmr+0x588>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b4:	6a1b      	ldr	r3, [r3, #32]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80116ba:	d904      	bls.n	80116c6 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80116bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116c0:	3301      	adds	r3, #1
 80116c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80116c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d060      	beq.n	8011790 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80116ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116d4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80116d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80116d8:	f000 fbfe 	bl	8011ed8 <tcp_pcb_purge>
      if (prev != NULL) {
 80116dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d010      	beq.n	8011704 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80116e2:	4b4f      	ldr	r3, [pc, #316]	@ (8011820 <tcp_slowtmr+0x594>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d106      	bne.n	80116fa <tcp_slowtmr+0x46e>
 80116ec:	4b4d      	ldr	r3, [pc, #308]	@ (8011824 <tcp_slowtmr+0x598>)
 80116ee:	f240 526d 	movw	r2, #1389	@ 0x56d
 80116f2:	494d      	ldr	r1, [pc, #308]	@ (8011828 <tcp_slowtmr+0x59c>)
 80116f4:	484d      	ldr	r0, [pc, #308]	@ (801182c <tcp_slowtmr+0x5a0>)
 80116f6:	f00a fd13 	bl	801c120 <iprintf>
        prev->next = pcb->next;
 80116fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fc:	68da      	ldr	r2, [r3, #12]
 80116fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011700:	60da      	str	r2, [r3, #12]
 8011702:	e00f      	b.n	8011724 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011704:	4b46      	ldr	r3, [pc, #280]	@ (8011820 <tcp_slowtmr+0x594>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801170a:	429a      	cmp	r2, r3
 801170c:	d006      	beq.n	801171c <tcp_slowtmr+0x490>
 801170e:	4b45      	ldr	r3, [pc, #276]	@ (8011824 <tcp_slowtmr+0x598>)
 8011710:	f240 5271 	movw	r2, #1393	@ 0x571
 8011714:	4946      	ldr	r1, [pc, #280]	@ (8011830 <tcp_slowtmr+0x5a4>)
 8011716:	4845      	ldr	r0, [pc, #276]	@ (801182c <tcp_slowtmr+0x5a0>)
 8011718:	f00a fd02 	bl	801c120 <iprintf>
        tcp_active_pcbs = pcb->next;
 801171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	4a3f      	ldr	r2, [pc, #252]	@ (8011820 <tcp_slowtmr+0x594>)
 8011722:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011724:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011728:	2b00      	cmp	r3, #0
 801172a:	d013      	beq.n	8011754 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801172c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801172e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011732:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011734:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011738:	3304      	adds	r3, #4
 801173a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801173c:	8ad2      	ldrh	r2, [r2, #22]
 801173e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011740:	8b09      	ldrh	r1, [r1, #24]
 8011742:	9102      	str	r1, [sp, #8]
 8011744:	9201      	str	r2, [sp, #4]
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	462b      	mov	r3, r5
 801174a:	4622      	mov	r2, r4
 801174c:	4601      	mov	r1, r0
 801174e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011750:	f004 f9d0 	bl	8015af4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801175a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175c:	7d1b      	ldrb	r3, [r3, #20]
 801175e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011762:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801176a:	6838      	ldr	r0, [r7, #0]
 801176c:	f7ff f9ee 	bl	8010b4c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011770:	4b30      	ldr	r3, [pc, #192]	@ (8011834 <tcp_slowtmr+0x5a8>)
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <tcp_slowtmr+0x4fa>
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f06f 010c 	mvn.w	r1, #12
 8011782:	68b8      	ldr	r0, [r7, #8]
 8011784:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011786:	4b2b      	ldr	r3, [pc, #172]	@ (8011834 <tcp_slowtmr+0x5a8>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d037      	beq.n	80117fe <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 801178e:	e590      	b.n	80112b2 <tcp_slowtmr+0x26>
      prev = pcb;
 8011790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011792:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801179a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179c:	7f1b      	ldrb	r3, [r3, #28]
 801179e:	3301      	adds	r3, #1
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80117a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a8:	7f1a      	ldrb	r2, [r3, #28]
 80117aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ac:	7f5b      	ldrb	r3, [r3, #29]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d325      	bcc.n	80117fe <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80117b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b4:	2200      	movs	r2, #0
 80117b6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80117b8:	4b1e      	ldr	r3, [pc, #120]	@ (8011834 <tcp_slowtmr+0x5a8>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80117be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00b      	beq.n	80117e0 <tcp_slowtmr+0x554>
 80117c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117d0:	6912      	ldr	r2, [r2, #16]
 80117d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117d4:	4610      	mov	r0, r2
 80117d6:	4798      	blx	r3
 80117d8:	4603      	mov	r3, r0
 80117da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80117de:	e002      	b.n	80117e6 <tcp_slowtmr+0x55a>
 80117e0:	2300      	movs	r3, #0
 80117e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80117e6:	4b13      	ldr	r3, [pc, #76]	@ (8011834 <tcp_slowtmr+0x5a8>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f47f ad60 	bne.w	80112b0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80117f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <tcp_slowtmr+0x572>
          tcp_output(prev);
 80117f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80117fa:	f003 fb99 	bl	8014f30 <tcp_output>
  while (pcb != NULL) {
 80117fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011800:	2b00      	cmp	r3, #0
 8011802:	f47f ad5c 	bne.w	80112be <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011806:	2300      	movs	r3, #0
 8011808:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801180a:	4b0b      	ldr	r3, [pc, #44]	@ (8011838 <tcp_slowtmr+0x5ac>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011810:	e067      	b.n	80118e2 <tcp_slowtmr+0x656>
 8011812:	bf00      	nop
 8011814:	20013d10 	.word	0x20013d10
 8011818:	10624dd3 	.word	0x10624dd3
 801181c:	000124f8 	.word	0x000124f8
 8011820:	20013d1c 	.word	0x20013d1c
 8011824:	0801f95c 	.word	0x0801f95c
 8011828:	0801fd94 	.word	0x0801fd94
 801182c:	0801f9a0 	.word	0x0801f9a0
 8011830:	0801fdc0 	.word	0x0801fdc0
 8011834:	20013d24 	.word	0x20013d24
 8011838:	20013d20 	.word	0x20013d20
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183e:	7d1b      	ldrb	r3, [r3, #20]
 8011840:	2b0a      	cmp	r3, #10
 8011842:	d006      	beq.n	8011852 <tcp_slowtmr+0x5c6>
 8011844:	4b2b      	ldr	r3, [pc, #172]	@ (80118f4 <tcp_slowtmr+0x668>)
 8011846:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801184a:	492b      	ldr	r1, [pc, #172]	@ (80118f8 <tcp_slowtmr+0x66c>)
 801184c:	482b      	ldr	r0, [pc, #172]	@ (80118fc <tcp_slowtmr+0x670>)
 801184e:	f00a fc67 	bl	801c120 <iprintf>
    pcb_remove = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011858:	4b29      	ldr	r3, [pc, #164]	@ (8011900 <tcp_slowtmr+0x674>)
 801185a:	681a      	ldr	r2, [r3, #0]
 801185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185e:	6a1b      	ldr	r3, [r3, #32]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	2bf0      	cmp	r3, #240	@ 0xf0
 8011864:	d904      	bls.n	8011870 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801186a:	3301      	adds	r3, #1
 801186c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011874:	2b00      	cmp	r3, #0
 8011876:	d02f      	beq.n	80118d8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801187a:	f000 fb2d 	bl	8011ed8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801187e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011880:	2b00      	cmp	r3, #0
 8011882:	d010      	beq.n	80118a6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011884:	4b1f      	ldr	r3, [pc, #124]	@ (8011904 <tcp_slowtmr+0x678>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801188a:	429a      	cmp	r2, r3
 801188c:	d106      	bne.n	801189c <tcp_slowtmr+0x610>
 801188e:	4b19      	ldr	r3, [pc, #100]	@ (80118f4 <tcp_slowtmr+0x668>)
 8011890:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011894:	491c      	ldr	r1, [pc, #112]	@ (8011908 <tcp_slowtmr+0x67c>)
 8011896:	4819      	ldr	r0, [pc, #100]	@ (80118fc <tcp_slowtmr+0x670>)
 8011898:	f00a fc42 	bl	801c120 <iprintf>
        prev->next = pcb->next;
 801189c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801189e:	68da      	ldr	r2, [r3, #12]
 80118a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a2:	60da      	str	r2, [r3, #12]
 80118a4:	e00f      	b.n	80118c6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80118a6:	4b17      	ldr	r3, [pc, #92]	@ (8011904 <tcp_slowtmr+0x678>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d006      	beq.n	80118be <tcp_slowtmr+0x632>
 80118b0:	4b10      	ldr	r3, [pc, #64]	@ (80118f4 <tcp_slowtmr+0x668>)
 80118b2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80118b6:	4915      	ldr	r1, [pc, #84]	@ (801190c <tcp_slowtmr+0x680>)
 80118b8:	4810      	ldr	r0, [pc, #64]	@ (80118fc <tcp_slowtmr+0x670>)
 80118ba:	f00a fc31 	bl	801c120 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80118be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	4a10      	ldr	r2, [pc, #64]	@ (8011904 <tcp_slowtmr+0x678>)
 80118c4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80118c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80118ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80118d0:	69f8      	ldr	r0, [r7, #28]
 80118d2:	f7ff f93b 	bl	8010b4c <tcp_free>
 80118d6:	e004      	b.n	80118e2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80118d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80118dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80118e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1a9      	bne.n	801183c <tcp_slowtmr+0x5b0>
    }
  }
}
 80118e8:	bf00      	nop
 80118ea:	bf00      	nop
 80118ec:	3730      	adds	r7, #48	@ 0x30
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bdb0      	pop	{r4, r5, r7, pc}
 80118f2:	bf00      	nop
 80118f4:	0801f95c 	.word	0x0801f95c
 80118f8:	0801fdec 	.word	0x0801fdec
 80118fc:	0801f9a0 	.word	0x0801f9a0
 8011900:	20013d10 	.word	0x20013d10
 8011904:	20013d20 	.word	0x20013d20
 8011908:	0801fe1c 	.word	0x0801fe1c
 801190c:	0801fe44 	.word	0x0801fe44

08011910 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011916:	4b2d      	ldr	r3, [pc, #180]	@ (80119cc <tcp_fasttmr+0xbc>)
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	3301      	adds	r3, #1
 801191c:	b2da      	uxtb	r2, r3
 801191e:	4b2b      	ldr	r3, [pc, #172]	@ (80119cc <tcp_fasttmr+0xbc>)
 8011920:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011922:	4b2b      	ldr	r3, [pc, #172]	@ (80119d0 <tcp_fasttmr+0xc0>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011928:	e048      	b.n	80119bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	7f9a      	ldrb	r2, [r3, #30]
 801192e:	4b27      	ldr	r3, [pc, #156]	@ (80119cc <tcp_fasttmr+0xbc>)
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	429a      	cmp	r2, r3
 8011934:	d03f      	beq.n	80119b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011936:	4b25      	ldr	r3, [pc, #148]	@ (80119cc <tcp_fasttmr+0xbc>)
 8011938:	781a      	ldrb	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f003 0301 	and.w	r3, r3, #1
 8011946:	2b00      	cmp	r3, #0
 8011948:	d010      	beq.n	801196c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	8b5b      	ldrh	r3, [r3, #26]
 801194e:	f043 0302 	orr.w	r3, r3, #2
 8011952:	b29a      	uxth	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f003 fae9 	bl	8014f30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	8b5b      	ldrh	r3, [r3, #26]
 8011962:	f023 0303 	bic.w	r3, r3, #3
 8011966:	b29a      	uxth	r2, r3
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	8b5b      	ldrh	r3, [r3, #26]
 8011970:	f003 0308 	and.w	r3, r3, #8
 8011974:	2b00      	cmp	r3, #0
 8011976:	d009      	beq.n	801198c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	8b5b      	ldrh	r3, [r3, #26]
 801197c:	f023 0308 	bic.w	r3, r3, #8
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f7ff fa74 	bl	8010e74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00a      	beq.n	80119b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801199a:	4b0e      	ldr	r3, [pc, #56]	@ (80119d4 <tcp_fasttmr+0xc4>)
 801199c:	2200      	movs	r2, #0
 801199e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 f819 	bl	80119d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80119a6:	4b0b      	ldr	r3, [pc, #44]	@ (80119d4 <tcp_fasttmr+0xc4>)
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d000      	beq.n	80119b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80119ae:	e7b8      	b.n	8011922 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	607b      	str	r3, [r7, #4]
 80119b4:	e002      	b.n	80119bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1b3      	bne.n	801192a <tcp_fasttmr+0x1a>
    }
  }
}
 80119c2:	bf00      	nop
 80119c4:	bf00      	nop
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	20013d26 	.word	0x20013d26
 80119d0:	20013d1c 	.word	0x20013d1c
 80119d4:	20013d24 	.word	0x20013d24

080119d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80119d8:	b590      	push	{r4, r7, lr}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d109      	bne.n	80119fa <tcp_process_refused_data+0x22>
 80119e6:	4b38      	ldr	r3, [pc, #224]	@ (8011ac8 <tcp_process_refused_data+0xf0>)
 80119e8:	f240 6209 	movw	r2, #1545	@ 0x609
 80119ec:	4937      	ldr	r1, [pc, #220]	@ (8011acc <tcp_process_refused_data+0xf4>)
 80119ee:	4838      	ldr	r0, [pc, #224]	@ (8011ad0 <tcp_process_refused_data+0xf8>)
 80119f0:	f00a fb96 	bl	801c120 <iprintf>
 80119f4:	f06f 030f 	mvn.w	r3, #15
 80119f8:	e061      	b.n	8011abe <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119fe:	7b5b      	ldrb	r3, [r3, #13]
 8011a00:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a06:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d00b      	beq.n	8011a30 <tcp_process_refused_data+0x58>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6918      	ldr	r0, [r3, #16]
 8011a22:	2300      	movs	r3, #0
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	6879      	ldr	r1, [r7, #4]
 8011a28:	47a0      	blx	r4
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	73fb      	strb	r3, [r7, #15]
 8011a2e:	e007      	b.n	8011a40 <tcp_process_refused_data+0x68>
 8011a30:	2300      	movs	r3, #0
 8011a32:	68ba      	ldr	r2, [r7, #8]
 8011a34:	6879      	ldr	r1, [r7, #4]
 8011a36:	2000      	movs	r0, #0
 8011a38:	f000 f8a6 	bl	8011b88 <tcp_recv_null>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d12b      	bne.n	8011aa0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	f003 0320 	and.w	r3, r3, #32
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d034      	beq.n	8011abc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a56:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d005      	beq.n	8011a6a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a62:	3301      	adds	r3, #1
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d00b      	beq.n	8011a8c <tcp_process_refused_data+0xb4>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6918      	ldr	r0, [r3, #16]
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2200      	movs	r2, #0
 8011a82:	6879      	ldr	r1, [r7, #4]
 8011a84:	47a0      	blx	r4
 8011a86:	4603      	mov	r3, r0
 8011a88:	73fb      	strb	r3, [r7, #15]
 8011a8a:	e001      	b.n	8011a90 <tcp_process_refused_data+0xb8>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a94:	f113 0f0d 	cmn.w	r3, #13
 8011a98:	d110      	bne.n	8011abc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8011a9a:	f06f 030c 	mvn.w	r3, #12
 8011a9e:	e00e      	b.n	8011abe <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8011aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aa4:	f113 0f0d 	cmn.w	r3, #13
 8011aa8:	d102      	bne.n	8011ab0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011aaa:	f06f 030c 	mvn.w	r3, #12
 8011aae:	e006      	b.n	8011abe <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011ab6:	f06f 0304 	mvn.w	r3, #4
 8011aba:	e000      	b.n	8011abe <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd90      	pop	{r4, r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	0801f95c 	.word	0x0801f95c
 8011acc:	0801fe6c 	.word	0x0801fe6c
 8011ad0:	0801f9a0 	.word	0x0801f9a0

08011ad4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011adc:	e007      	b.n	8011aee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f80a 	bl	8011afe <tcp_seg_free>
    seg = next;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1f4      	bne.n	8011ade <tcp_segs_free+0xa>
  }
}
 8011af4:	bf00      	nop
 8011af6:	bf00      	nop
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b082      	sub	sp, #8
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00c      	beq.n	8011b26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d004      	beq.n	8011b1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fe fcc3 	bl	80104a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011b1e:	6879      	ldr	r1, [r7, #4]
 8011b20:	2003      	movs	r0, #3
 8011b22:	f7fd fe1d 	bl	800f760 <memp_free>
  }
}
 8011b26:	bf00      	nop
 8011b28:	3708      	adds	r7, #8
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
	...

08011b30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d106      	bne.n	8011b4c <tcp_seg_copy+0x1c>
 8011b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011b7c <tcp_seg_copy+0x4c>)
 8011b40:	f240 6282 	movw	r2, #1666	@ 0x682
 8011b44:	490e      	ldr	r1, [pc, #56]	@ (8011b80 <tcp_seg_copy+0x50>)
 8011b46:	480f      	ldr	r0, [pc, #60]	@ (8011b84 <tcp_seg_copy+0x54>)
 8011b48:	f00a faea 	bl	801c120 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011b4c:	2003      	movs	r0, #3
 8011b4e:	f7fd fdb5 	bl	800f6bc <memp_malloc>
 8011b52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d101      	bne.n	8011b5e <tcp_seg_copy+0x2e>
    return NULL;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	e00a      	b.n	8011b74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011b5e:	2214      	movs	r2, #20
 8011b60:	6879      	ldr	r1, [r7, #4]
 8011b62:	68f8      	ldr	r0, [r7, #12]
 8011b64:	f00a fcfb 	bl	801c55e <memcpy>
  pbuf_ref(cseg->p);
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fe fd3f 	bl	80105f0 <pbuf_ref>
  return cseg;
 8011b72:	68fb      	ldr	r3, [r7, #12]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	0801f95c 	.word	0x0801f95c
 8011b80:	0801feb0 	.word	0x0801feb0
 8011b84:	0801f9a0 	.word	0x0801f9a0

08011b88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	607a      	str	r2, [r7, #4]
 8011b94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d109      	bne.n	8011bb0 <tcp_recv_null+0x28>
 8011b9c:	4b12      	ldr	r3, [pc, #72]	@ (8011be8 <tcp_recv_null+0x60>)
 8011b9e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011ba2:	4912      	ldr	r1, [pc, #72]	@ (8011bec <tcp_recv_null+0x64>)
 8011ba4:	4812      	ldr	r0, [pc, #72]	@ (8011bf0 <tcp_recv_null+0x68>)
 8011ba6:	f00a fabb 	bl	801c120 <iprintf>
 8011baa:	f06f 030f 	mvn.w	r3, #15
 8011bae:	e016      	b.n	8011bde <tcp_recv_null+0x56>

  if (p != NULL) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d009      	beq.n	8011bca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	891b      	ldrh	r3, [r3, #8]
 8011bba:	4619      	mov	r1, r3
 8011bbc:	68b8      	ldr	r0, [r7, #8]
 8011bbe:	f7ff fb13 	bl	80111e8 <tcp_recved>
    pbuf_free(p);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7fe fc6e 	bl	80104a4 <pbuf_free>
 8011bc8:	e008      	b.n	8011bdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d104      	bne.n	8011bdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011bd2:	68b8      	ldr	r0, [r7, #8]
 8011bd4:	f7ff f9b8 	bl	8010f48 <tcp_close>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	e000      	b.n	8011bde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	0801f95c 	.word	0x0801f95c
 8011bec:	0801fecc 	.word	0x0801fecc
 8011bf0:	0801f9a0 	.word	0x0801f9a0

08011bf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	db01      	blt.n	8011c0a <tcp_kill_prio+0x16>
 8011c06:	79fb      	ldrb	r3, [r7, #7]
 8011c08:	e000      	b.n	8011c0c <tcp_kill_prio+0x18>
 8011c0a:	237f      	movs	r3, #127	@ 0x7f
 8011c0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011c0e:	7afb      	ldrb	r3, [r7, #11]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d034      	beq.n	8011c7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011c14:	7afb      	ldrb	r3, [r7, #11]
 8011c16:	3b01      	subs	r3, #1
 8011c18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c22:	4b19      	ldr	r3, [pc, #100]	@ (8011c88 <tcp_kill_prio+0x94>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e01f      	b.n	8011c6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	7d5b      	ldrb	r3, [r3, #21]
 8011c2e:	7afa      	ldrb	r2, [r7, #11]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d80c      	bhi.n	8011c4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011c38:	7afa      	ldrb	r2, [r7, #11]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d112      	bne.n	8011c64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c3e:	4b13      	ldr	r3, [pc, #76]	@ (8011c8c <tcp_kill_prio+0x98>)
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	6a1b      	ldr	r3, [r3, #32]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d80a      	bhi.n	8011c64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8011c8c <tcp_kill_prio+0x98>)
 8011c50:	681a      	ldr	r2, [r3, #0]
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	6a1b      	ldr	r3, [r3, #32]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	7d5b      	ldrb	r3, [r3, #21]
 8011c62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	617b      	str	r3, [r7, #20]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d1dc      	bne.n	8011c2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d004      	beq.n	8011c80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c76:	6938      	ldr	r0, [r7, #16]
 8011c78:	f7ff fa50 	bl	801111c <tcp_abort>
 8011c7c:	e000      	b.n	8011c80 <tcp_kill_prio+0x8c>
    return;
 8011c7e:	bf00      	nop
  }
}
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	20013d1c 	.word	0x20013d1c
 8011c8c:	20013d10 	.word	0x20013d10

08011c90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b086      	sub	sp, #24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	4603      	mov	r3, r0
 8011c98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011c9a:	79fb      	ldrb	r3, [r7, #7]
 8011c9c:	2b08      	cmp	r3, #8
 8011c9e:	d009      	beq.n	8011cb4 <tcp_kill_state+0x24>
 8011ca0:	79fb      	ldrb	r3, [r7, #7]
 8011ca2:	2b09      	cmp	r3, #9
 8011ca4:	d006      	beq.n	8011cb4 <tcp_kill_state+0x24>
 8011ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8011d10 <tcp_kill_state+0x80>)
 8011ca8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011cac:	4919      	ldr	r1, [pc, #100]	@ (8011d14 <tcp_kill_state+0x84>)
 8011cae:	481a      	ldr	r0, [pc, #104]	@ (8011d18 <tcp_kill_state+0x88>)
 8011cb0:	f00a fa36 	bl	801c120 <iprintf>

  inactivity = 0;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cbc:	4b17      	ldr	r3, [pc, #92]	@ (8011d1c <tcp_kill_state+0x8c>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	617b      	str	r3, [r7, #20]
 8011cc2:	e017      	b.n	8011cf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	7d1b      	ldrb	r3, [r3, #20]
 8011cc8:	79fa      	ldrb	r2, [r7, #7]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d10f      	bne.n	8011cee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011cce:	4b14      	ldr	r3, [pc, #80]	@ (8011d20 <tcp_kill_state+0x90>)
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	6a1b      	ldr	r3, [r3, #32]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d807      	bhi.n	8011cee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011cde:	4b10      	ldr	r3, [pc, #64]	@ (8011d20 <tcp_kill_state+0x90>)
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	6a1b      	ldr	r3, [r3, #32]
 8011ce6:	1ad3      	subs	r3, r2, r3
 8011ce8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	617b      	str	r3, [r7, #20]
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1e4      	bne.n	8011cc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d003      	beq.n	8011d08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011d00:	2100      	movs	r1, #0
 8011d02:	6938      	ldr	r0, [r7, #16]
 8011d04:	f7ff f94c 	bl	8010fa0 <tcp_abandon>
  }
}
 8011d08:	bf00      	nop
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	0801f95c 	.word	0x0801f95c
 8011d14:	0801fee8 	.word	0x0801fee8
 8011d18:	0801f9a0 	.word	0x0801f9a0
 8011d1c:	20013d1c 	.word	0x20013d1c
 8011d20:	20013d10 	.word	0x20013d10

08011d24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d32:	4b12      	ldr	r3, [pc, #72]	@ (8011d7c <tcp_kill_timewait+0x58>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	60fb      	str	r3, [r7, #12]
 8011d38:	e012      	b.n	8011d60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011d3a:	4b11      	ldr	r3, [pc, #68]	@ (8011d80 <tcp_kill_timewait+0x5c>)
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	6a1b      	ldr	r3, [r3, #32]
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d807      	bhi.n	8011d5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d80 <tcp_kill_timewait+0x5c>)
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	6a1b      	ldr	r3, [r3, #32]
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1e9      	bne.n	8011d3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d002      	beq.n	8011d72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011d6c:	68b8      	ldr	r0, [r7, #8]
 8011d6e:	f7ff f9d5 	bl	801111c <tcp_abort>
  }
}
 8011d72:	bf00      	nop
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20013d20 	.word	0x20013d20
 8011d80:	20013d10 	.word	0x20013d10

08011d84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011d8a:	4b10      	ldr	r3, [pc, #64]	@ (8011dcc <tcp_handle_closepend+0x48>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011d90:	e014      	b.n	8011dbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	8b5b      	ldrh	r3, [r3, #26]
 8011d9c:	f003 0308 	and.w	r3, r3, #8
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d009      	beq.n	8011db8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	8b5b      	ldrh	r3, [r3, #26]
 8011da8:	f023 0308 	bic.w	r3, r3, #8
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff f85e 	bl	8010e74 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e7      	bne.n	8011d92 <tcp_handle_closepend+0xe>
  }
}
 8011dc2:	bf00      	nop
 8011dc4:	bf00      	nop
 8011dc6:	3708      	adds	r7, #8
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	20013d1c 	.word	0x20013d1c

08011dd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011dda:	2001      	movs	r0, #1
 8011ddc:	f7fd fc6e 	bl	800f6bc <memp_malloc>
 8011de0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d126      	bne.n	8011e36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011de8:	f7ff ffcc 	bl	8011d84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011dec:	f7ff ff9a 	bl	8011d24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011df0:	2001      	movs	r0, #1
 8011df2:	f7fd fc63 	bl	800f6bc <memp_malloc>
 8011df6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d11b      	bne.n	8011e36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011dfe:	2009      	movs	r0, #9
 8011e00:	f7ff ff46 	bl	8011c90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011e04:	2001      	movs	r0, #1
 8011e06:	f7fd fc59 	bl	800f6bc <memp_malloc>
 8011e0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d111      	bne.n	8011e36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011e12:	2008      	movs	r0, #8
 8011e14:	f7ff ff3c 	bl	8011c90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011e18:	2001      	movs	r0, #1
 8011e1a:	f7fd fc4f 	bl	800f6bc <memp_malloc>
 8011e1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d107      	bne.n	8011e36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011e26:	79fb      	ldrb	r3, [r7, #7]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fee3 	bl	8011bf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011e2e:	2001      	movs	r0, #1
 8011e30:	f7fd fc44 	bl	800f6bc <memp_malloc>
 8011e34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d03f      	beq.n	8011ebc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011e3c:	229c      	movs	r2, #156	@ 0x9c
 8011e3e:	2100      	movs	r1, #0
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	f00a facf 	bl	801c3e4 <memset>
    pcb->prio = prio;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	79fa      	ldrb	r2, [r7, #7]
 8011e4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011e52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	22ff      	movs	r2, #255	@ 0xff
 8011e6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011e72:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2206      	movs	r2, #6
 8011e78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2206      	movs	r2, #6
 8011e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e88:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2201      	movs	r2, #1
 8011e8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8011e92:	4b0d      	ldr	r3, [pc, #52]	@ (8011ec8 <tcp_alloc+0xf8>)
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8011ecc <tcp_alloc+0xfc>)
 8011e9c:	781a      	ldrb	r2, [r3, #0]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8011ea8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	4a08      	ldr	r2, [pc, #32]	@ (8011ed0 <tcp_alloc+0x100>)
 8011eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	4a07      	ldr	r2, [pc, #28]	@ (8011ed4 <tcp_alloc+0x104>)
 8011eb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	20013d10 	.word	0x20013d10
 8011ecc:	20013d26 	.word	0x20013d26
 8011ed0:	08011b89 	.word	0x08011b89
 8011ed4:	006ddd00 	.word	0x006ddd00

08011ed8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d107      	bne.n	8011ef6 <tcp_pcb_purge+0x1e>
 8011ee6:	4b21      	ldr	r3, [pc, #132]	@ (8011f6c <tcp_pcb_purge+0x94>)
 8011ee8:	f640 0251 	movw	r2, #2129	@ 0x851
 8011eec:	4920      	ldr	r1, [pc, #128]	@ (8011f70 <tcp_pcb_purge+0x98>)
 8011eee:	4821      	ldr	r0, [pc, #132]	@ (8011f74 <tcp_pcb_purge+0x9c>)
 8011ef0:	f00a f916 	bl	801c120 <iprintf>
 8011ef4:	e037      	b.n	8011f66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	7d1b      	ldrb	r3, [r3, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d033      	beq.n	8011f66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011f02:	2b0a      	cmp	r3, #10
 8011f04:	d02f      	beq.n	8011f66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d02b      	beq.n	8011f66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d007      	beq.n	8011f26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe fac2 	bl	80104a4 <pbuf_free>
      pcb->refused_data = NULL;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2200      	movs	r2, #0
 8011f24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d002      	beq.n	8011f34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 f986 	bl	8012240 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f3a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff fdc7 	bl	8011ad4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7ff fdc2 	bl	8011ad4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2200      	movs	r2, #0
 8011f54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	0801f95c 	.word	0x0801f95c
 8011f70:	0801ffa8 	.word	0x0801ffa8
 8011f74:	0801f9a0 	.word	0x0801f9a0

08011f78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <tcp_pcb_remove+0x1e>
 8011f88:	4b3e      	ldr	r3, [pc, #248]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8011f8a:	f640 0283 	movw	r2, #2179	@ 0x883
 8011f8e:	493e      	ldr	r1, [pc, #248]	@ (8012088 <tcp_pcb_remove+0x110>)
 8011f90:	483e      	ldr	r0, [pc, #248]	@ (801208c <tcp_pcb_remove+0x114>)
 8011f92:	f00a f8c5 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <tcp_pcb_remove+0x32>
 8011f9c:	4b39      	ldr	r3, [pc, #228]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8011f9e:	f640 0284 	movw	r2, #2180	@ 0x884
 8011fa2:	493b      	ldr	r1, [pc, #236]	@ (8012090 <tcp_pcb_remove+0x118>)
 8011fa4:	4839      	ldr	r0, [pc, #228]	@ (801208c <tcp_pcb_remove+0x114>)
 8011fa6:	f00a f8bb 	bl	801c120 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	683a      	ldr	r2, [r7, #0]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d105      	bne.n	8011fc0 <tcp_pcb_remove+0x48>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	68da      	ldr	r2, [r3, #12]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	e013      	b.n	8011fe8 <tcp_pcb_remove+0x70>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	60fb      	str	r3, [r7, #12]
 8011fc6:	e00c      	b.n	8011fe2 <tcp_pcb_remove+0x6a>
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	683a      	ldr	r2, [r7, #0]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d104      	bne.n	8011fdc <tcp_pcb_remove+0x64>
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	68da      	ldr	r2, [r3, #12]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	60da      	str	r2, [r3, #12]
 8011fda:	e005      	b.n	8011fe8 <tcp_pcb_remove+0x70>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	60fb      	str	r3, [r7, #12]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1ef      	bne.n	8011fc8 <tcp_pcb_remove+0x50>
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	2200      	movs	r2, #0
 8011fec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011fee:	6838      	ldr	r0, [r7, #0]
 8011ff0:	f7ff ff72 	bl	8011ed8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	7d1b      	ldrb	r3, [r3, #20]
 8011ff8:	2b0a      	cmp	r3, #10
 8011ffa:	d013      	beq.n	8012024 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012000:	2b01      	cmp	r3, #1
 8012002:	d00f      	beq.n	8012024 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	8b5b      	ldrh	r3, [r3, #26]
 8012008:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801200c:	2b00      	cmp	r3, #0
 801200e:	d009      	beq.n	8012024 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	8b5b      	ldrh	r3, [r3, #26]
 8012014:	f043 0302 	orr.w	r3, r3, #2
 8012018:	b29a      	uxth	r2, r3
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801201e:	6838      	ldr	r0, [r7, #0]
 8012020:	f002 ff86 	bl	8014f30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	7d1b      	ldrb	r3, [r3, #20]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d020      	beq.n	801206e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012030:	2b00      	cmp	r3, #0
 8012032:	d006      	beq.n	8012042 <tcp_pcb_remove+0xca>
 8012034:	4b13      	ldr	r3, [pc, #76]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8012036:	f640 0293 	movw	r2, #2195	@ 0x893
 801203a:	4916      	ldr	r1, [pc, #88]	@ (8012094 <tcp_pcb_remove+0x11c>)
 801203c:	4813      	ldr	r0, [pc, #76]	@ (801208c <tcp_pcb_remove+0x114>)
 801203e:	f00a f86f 	bl	801c120 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012046:	2b00      	cmp	r3, #0
 8012048:	d006      	beq.n	8012058 <tcp_pcb_remove+0xe0>
 801204a:	4b0e      	ldr	r3, [pc, #56]	@ (8012084 <tcp_pcb_remove+0x10c>)
 801204c:	f640 0294 	movw	r2, #2196	@ 0x894
 8012050:	4911      	ldr	r1, [pc, #68]	@ (8012098 <tcp_pcb_remove+0x120>)
 8012052:	480e      	ldr	r0, [pc, #56]	@ (801208c <tcp_pcb_remove+0x114>)
 8012054:	f00a f864 	bl	801c120 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801205c:	2b00      	cmp	r3, #0
 801205e:	d006      	beq.n	801206e <tcp_pcb_remove+0xf6>
 8012060:	4b08      	ldr	r3, [pc, #32]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8012062:	f640 0296 	movw	r2, #2198	@ 0x896
 8012066:	490d      	ldr	r1, [pc, #52]	@ (801209c <tcp_pcb_remove+0x124>)
 8012068:	4808      	ldr	r0, [pc, #32]	@ (801208c <tcp_pcb_remove+0x114>)
 801206a:	f00a f859 	bl	801c120 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	2200      	movs	r2, #0
 8012072:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	2200      	movs	r2, #0
 8012078:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801207a:	bf00      	nop
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	0801f95c 	.word	0x0801f95c
 8012088:	0801ffc4 	.word	0x0801ffc4
 801208c:	0801f9a0 	.word	0x0801f9a0
 8012090:	0801ffe0 	.word	0x0801ffe0
 8012094:	08020000 	.word	0x08020000
 8012098:	08020018 	.word	0x08020018
 801209c:	08020034 	.word	0x08020034

080120a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d106      	bne.n	80120bc <tcp_next_iss+0x1c>
 80120ae:	4b0a      	ldr	r3, [pc, #40]	@ (80120d8 <tcp_next_iss+0x38>)
 80120b0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80120b4:	4909      	ldr	r1, [pc, #36]	@ (80120dc <tcp_next_iss+0x3c>)
 80120b6:	480a      	ldr	r0, [pc, #40]	@ (80120e0 <tcp_next_iss+0x40>)
 80120b8:	f00a f832 	bl	801c120 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80120bc:	4b09      	ldr	r3, [pc, #36]	@ (80120e4 <tcp_next_iss+0x44>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	4b09      	ldr	r3, [pc, #36]	@ (80120e8 <tcp_next_iss+0x48>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4413      	add	r3, r2
 80120c6:	4a07      	ldr	r2, [pc, #28]	@ (80120e4 <tcp_next_iss+0x44>)
 80120c8:	6013      	str	r3, [r2, #0]
  return iss;
 80120ca:	4b06      	ldr	r3, [pc, #24]	@ (80120e4 <tcp_next_iss+0x44>)
 80120cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	0801f95c 	.word	0x0801f95c
 80120dc:	0802004c 	.word	0x0802004c
 80120e0:	0801f9a0 	.word	0x0801f9a0
 80120e4:	200000b4 	.word	0x200000b4
 80120e8:	20013d10 	.word	0x20013d10

080120ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	4603      	mov	r3, r0
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
 80120f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d106      	bne.n	801210e <tcp_eff_send_mss_netif+0x22>
 8012100:	4b14      	ldr	r3, [pc, #80]	@ (8012154 <tcp_eff_send_mss_netif+0x68>)
 8012102:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8012106:	4914      	ldr	r1, [pc, #80]	@ (8012158 <tcp_eff_send_mss_netif+0x6c>)
 8012108:	4814      	ldr	r0, [pc, #80]	@ (801215c <tcp_eff_send_mss_netif+0x70>)
 801210a:	f00a f809 	bl	801c120 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d101      	bne.n	8012118 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012114:	89fb      	ldrh	r3, [r7, #14]
 8012116:	e019      	b.n	801214c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801211c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801211e:	8afb      	ldrh	r3, [r7, #22]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d012      	beq.n	801214a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012124:	2328      	movs	r3, #40	@ 0x28
 8012126:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012128:	8afa      	ldrh	r2, [r7, #22]
 801212a:	8abb      	ldrh	r3, [r7, #20]
 801212c:	429a      	cmp	r2, r3
 801212e:	d904      	bls.n	801213a <tcp_eff_send_mss_netif+0x4e>
 8012130:	8afa      	ldrh	r2, [r7, #22]
 8012132:	8abb      	ldrh	r3, [r7, #20]
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	b29b      	uxth	r3, r3
 8012138:	e000      	b.n	801213c <tcp_eff_send_mss_netif+0x50>
 801213a:	2300      	movs	r3, #0
 801213c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801213e:	8a7a      	ldrh	r2, [r7, #18]
 8012140:	89fb      	ldrh	r3, [r7, #14]
 8012142:	4293      	cmp	r3, r2
 8012144:	bf28      	it	cs
 8012146:	4613      	movcs	r3, r2
 8012148:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801214a:	89fb      	ldrh	r3, [r7, #14]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3718      	adds	r7, #24
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	0801f95c 	.word	0x0801f95c
 8012158:	08020068 	.word	0x08020068
 801215c:	0801f9a0 	.word	0x0801f9a0

08012160 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d119      	bne.n	80121a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012174:	4b10      	ldr	r3, [pc, #64]	@ (80121b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012176:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801217a:	4910      	ldr	r1, [pc, #64]	@ (80121bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801217c:	4810      	ldr	r0, [pc, #64]	@ (80121c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801217e:	f009 ffcf 	bl	801c120 <iprintf>

  while (pcb != NULL) {
 8012182:	e011      	b.n	80121a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	429a      	cmp	r2, r3
 801218e:	d108      	bne.n	80121a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	f7fe ffc0 	bl	801111c <tcp_abort>
      pcb = next;
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	e002      	b.n	80121a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1ea      	bne.n	8012184 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80121ae:	bf00      	nop
 80121b0:	bf00      	nop
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	0801f95c 	.word	0x0801f95c
 80121bc:	08020090 	.word	0x08020090
 80121c0:	0801f9a0 	.word	0x0801f9a0

080121c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d02a      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d026      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80121dc:	4b15      	ldr	r3, [pc, #84]	@ (8012234 <tcp_netif_ip_addr_changed+0x70>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4619      	mov	r1, r3
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7ff ffbc 	bl	8012160 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80121e8:	4b13      	ldr	r3, [pc, #76]	@ (8012238 <tcp_netif_ip_addr_changed+0x74>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4619      	mov	r1, r3
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff ffb6 	bl	8012160 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d017      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d013      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012202:	4b0e      	ldr	r3, [pc, #56]	@ (801223c <tcp_netif_ip_addr_changed+0x78>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	60fb      	str	r3, [r7, #12]
 8012208:	e00c      	b.n	8012224 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	429a      	cmp	r2, r3
 8012214:	d103      	bne.n	801221e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	60fb      	str	r3, [r7, #12]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1ef      	bne.n	801220a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801222a:	bf00      	nop
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	20013d1c 	.word	0x20013d1c
 8012238:	20013d14 	.word	0x20013d14
 801223c:	20013d18 	.word	0x20013d18

08012240 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801224c:	2b00      	cmp	r3, #0
 801224e:	d007      	beq.n	8012260 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fc3d 	bl	8011ad4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012260:	bf00      	nop
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012268:	b590      	push	{r4, r7, lr}
 801226a:	b08d      	sub	sp, #52	@ 0x34
 801226c:	af04      	add	r7, sp, #16
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d105      	bne.n	8012284 <tcp_input+0x1c>
 8012278:	4b8b      	ldr	r3, [pc, #556]	@ (80124a8 <tcp_input+0x240>)
 801227a:	2283      	movs	r2, #131	@ 0x83
 801227c:	498b      	ldr	r1, [pc, #556]	@ (80124ac <tcp_input+0x244>)
 801227e:	488c      	ldr	r0, [pc, #560]	@ (80124b0 <tcp_input+0x248>)
 8012280:	f009 ff4e 	bl	801c120 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	4a8a      	ldr	r2, [pc, #552]	@ (80124b4 <tcp_input+0x24c>)
 801228a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	895b      	ldrh	r3, [r3, #10]
 8012290:	2b13      	cmp	r3, #19
 8012292:	f240 83e3 	bls.w	8012a5c <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012296:	4b88      	ldr	r3, [pc, #544]	@ (80124b8 <tcp_input+0x250>)
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	4a87      	ldr	r2, [pc, #540]	@ (80124b8 <tcp_input+0x250>)
 801229c:	6812      	ldr	r2, [r2, #0]
 801229e:	4611      	mov	r1, r2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f008 f81f 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f040 83d9 	bne.w	8012a60 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80122ae:	4b82      	ldr	r3, [pc, #520]	@ (80124b8 <tcp_input+0x250>)
 80122b0:	695b      	ldr	r3, [r3, #20]
 80122b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80122b6:	2be0      	cmp	r3, #224	@ 0xe0
 80122b8:	f000 83d2 	beq.w	8012a60 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	891a      	ldrh	r2, [r3, #8]
 80122c0:	4b7e      	ldr	r3, [pc, #504]	@ (80124bc <tcp_input+0x254>)
 80122c2:	9300      	str	r3, [sp, #0]
 80122c4:	4b7e      	ldr	r3, [pc, #504]	@ (80124c0 <tcp_input+0x258>)
 80122c6:	2106      	movs	r1, #6
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7fc fcfb 	bl	800ecc4 <ip_chksum_pseudo>
 80122ce:	4603      	mov	r3, r0
 80122d0:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80122d2:	8a3b      	ldrh	r3, [r7, #16]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f040 83c5 	bne.w	8012a64 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80122da:	4b76      	ldr	r3, [pc, #472]	@ (80124b4 <tcp_input+0x24c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	899b      	ldrh	r3, [r3, #12]
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fc fbbc 	bl	800ea60 <lwip_htons>
 80122e8:	4603      	mov	r3, r0
 80122ea:	0b1b      	lsrs	r3, r3, #12
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	009b      	lsls	r3, r3, #2
 80122f2:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80122f4:	7bfb      	ldrb	r3, [r7, #15]
 80122f6:	2b13      	cmp	r3, #19
 80122f8:	f240 83b6 	bls.w	8012a68 <tcp_input+0x800>
 80122fc:	7bfb      	ldrb	r3, [r7, #15]
 80122fe:	b29a      	uxth	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	891b      	ldrh	r3, [r3, #8]
 8012304:	429a      	cmp	r2, r3
 8012306:	f200 83af 	bhi.w	8012a68 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801230a:	7bfb      	ldrb	r3, [r7, #15]
 801230c:	b29b      	uxth	r3, r3
 801230e:	3b14      	subs	r3, #20
 8012310:	b29a      	uxth	r2, r3
 8012312:	4b6c      	ldr	r3, [pc, #432]	@ (80124c4 <tcp_input+0x25c>)
 8012314:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012316:	4b6c      	ldr	r3, [pc, #432]	@ (80124c8 <tcp_input+0x260>)
 8012318:	2200      	movs	r2, #0
 801231a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	895a      	ldrh	r2, [r3, #10]
 8012320:	7bfb      	ldrb	r3, [r7, #15]
 8012322:	b29b      	uxth	r3, r3
 8012324:	429a      	cmp	r2, r3
 8012326:	d309      	bcc.n	801233c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012328:	4b66      	ldr	r3, [pc, #408]	@ (80124c4 <tcp_input+0x25c>)
 801232a:	881a      	ldrh	r2, [r3, #0]
 801232c:	4b67      	ldr	r3, [pc, #412]	@ (80124cc <tcp_input+0x264>)
 801232e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012330:	7bfb      	ldrb	r3, [r7, #15]
 8012332:	4619      	mov	r1, r3
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7fe f82f 	bl	8010398 <pbuf_remove_header>
 801233a:	e04e      	b.n	80123da <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d105      	bne.n	8012350 <tcp_input+0xe8>
 8012344:	4b58      	ldr	r3, [pc, #352]	@ (80124a8 <tcp_input+0x240>)
 8012346:	22c2      	movs	r2, #194	@ 0xc2
 8012348:	4961      	ldr	r1, [pc, #388]	@ (80124d0 <tcp_input+0x268>)
 801234a:	4859      	ldr	r0, [pc, #356]	@ (80124b0 <tcp_input+0x248>)
 801234c:	f009 fee8 	bl	801c120 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012350:	2114      	movs	r1, #20
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7fe f820 	bl	8010398 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	895a      	ldrh	r2, [r3, #10]
 801235c:	4b5b      	ldr	r3, [pc, #364]	@ (80124cc <tcp_input+0x264>)
 801235e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012360:	4b58      	ldr	r3, [pc, #352]	@ (80124c4 <tcp_input+0x25c>)
 8012362:	881a      	ldrh	r2, [r3, #0]
 8012364:	4b59      	ldr	r3, [pc, #356]	@ (80124cc <tcp_input+0x264>)
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	1ad3      	subs	r3, r2, r3
 801236a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801236c:	4b57      	ldr	r3, [pc, #348]	@ (80124cc <tcp_input+0x264>)
 801236e:	881b      	ldrh	r3, [r3, #0]
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7fe f810 	bl	8010398 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	895b      	ldrh	r3, [r3, #10]
 801237e:	89ba      	ldrh	r2, [r7, #12]
 8012380:	429a      	cmp	r2, r3
 8012382:	f200 8373 	bhi.w	8012a6c <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	4a4e      	ldr	r2, [pc, #312]	@ (80124c8 <tcp_input+0x260>)
 801238e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	89ba      	ldrh	r2, [r7, #12]
 8012396:	4611      	mov	r1, r2
 8012398:	4618      	mov	r0, r3
 801239a:	f7fd fffd 	bl	8010398 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	891a      	ldrh	r2, [r3, #8]
 80123a2:	89bb      	ldrh	r3, [r7, #12]
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	b29a      	uxth	r2, r3
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	895b      	ldrh	r3, [r3, #10]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d005      	beq.n	80123c0 <tcp_input+0x158>
 80123b4:	4b3c      	ldr	r3, [pc, #240]	@ (80124a8 <tcp_input+0x240>)
 80123b6:	22df      	movs	r2, #223	@ 0xdf
 80123b8:	4946      	ldr	r1, [pc, #280]	@ (80124d4 <tcp_input+0x26c>)
 80123ba:	483d      	ldr	r0, [pc, #244]	@ (80124b0 <tcp_input+0x248>)
 80123bc:	f009 feb0 	bl	801c120 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	891a      	ldrh	r2, [r3, #8]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	891b      	ldrh	r3, [r3, #8]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d005      	beq.n	80123da <tcp_input+0x172>
 80123ce:	4b36      	ldr	r3, [pc, #216]	@ (80124a8 <tcp_input+0x240>)
 80123d0:	22e0      	movs	r2, #224	@ 0xe0
 80123d2:	4941      	ldr	r1, [pc, #260]	@ (80124d8 <tcp_input+0x270>)
 80123d4:	4836      	ldr	r0, [pc, #216]	@ (80124b0 <tcp_input+0x248>)
 80123d6:	f009 fea3 	bl	801c120 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80123da:	4b36      	ldr	r3, [pc, #216]	@ (80124b4 <tcp_input+0x24c>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	4a34      	ldr	r2, [pc, #208]	@ (80124b4 <tcp_input+0x24c>)
 80123e4:	6814      	ldr	r4, [r2, #0]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7fc fb3a 	bl	800ea60 <lwip_htons>
 80123ec:	4603      	mov	r3, r0
 80123ee:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80123f0:	4b30      	ldr	r3, [pc, #192]	@ (80124b4 <tcp_input+0x24c>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	885b      	ldrh	r3, [r3, #2]
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	4a2e      	ldr	r2, [pc, #184]	@ (80124b4 <tcp_input+0x24c>)
 80123fa:	6814      	ldr	r4, [r2, #0]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fc fb2f 	bl	800ea60 <lwip_htons>
 8012402:	4603      	mov	r3, r0
 8012404:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012406:	4b2b      	ldr	r3, [pc, #172]	@ (80124b4 <tcp_input+0x24c>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	4a29      	ldr	r2, [pc, #164]	@ (80124b4 <tcp_input+0x24c>)
 801240e:	6814      	ldr	r4, [r2, #0]
 8012410:	4618      	mov	r0, r3
 8012412:	f7fc fb3a 	bl	800ea8a <lwip_htonl>
 8012416:	4603      	mov	r3, r0
 8012418:	6063      	str	r3, [r4, #4]
 801241a:	6863      	ldr	r3, [r4, #4]
 801241c:	4a2f      	ldr	r2, [pc, #188]	@ (80124dc <tcp_input+0x274>)
 801241e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012420:	4b24      	ldr	r3, [pc, #144]	@ (80124b4 <tcp_input+0x24c>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	689b      	ldr	r3, [r3, #8]
 8012426:	4a23      	ldr	r2, [pc, #140]	@ (80124b4 <tcp_input+0x24c>)
 8012428:	6814      	ldr	r4, [r2, #0]
 801242a:	4618      	mov	r0, r3
 801242c:	f7fc fb2d 	bl	800ea8a <lwip_htonl>
 8012430:	4603      	mov	r3, r0
 8012432:	60a3      	str	r3, [r4, #8]
 8012434:	68a3      	ldr	r3, [r4, #8]
 8012436:	4a2a      	ldr	r2, [pc, #168]	@ (80124e0 <tcp_input+0x278>)
 8012438:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801243a:	4b1e      	ldr	r3, [pc, #120]	@ (80124b4 <tcp_input+0x24c>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	89db      	ldrh	r3, [r3, #14]
 8012440:	b29b      	uxth	r3, r3
 8012442:	4a1c      	ldr	r2, [pc, #112]	@ (80124b4 <tcp_input+0x24c>)
 8012444:	6814      	ldr	r4, [r2, #0]
 8012446:	4618      	mov	r0, r3
 8012448:	f7fc fb0a 	bl	800ea60 <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012450:	4b18      	ldr	r3, [pc, #96]	@ (80124b4 <tcp_input+0x24c>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	899b      	ldrh	r3, [r3, #12]
 8012456:	b29b      	uxth	r3, r3
 8012458:	4618      	mov	r0, r3
 801245a:	f7fc fb01 	bl	800ea60 <lwip_htons>
 801245e:	4603      	mov	r3, r0
 8012460:	b2db      	uxtb	r3, r3
 8012462:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012466:	b2da      	uxtb	r2, r3
 8012468:	4b1e      	ldr	r3, [pc, #120]	@ (80124e4 <tcp_input+0x27c>)
 801246a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	891a      	ldrh	r2, [r3, #8]
 8012470:	4b1d      	ldr	r3, [pc, #116]	@ (80124e8 <tcp_input+0x280>)
 8012472:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012474:	4b1b      	ldr	r3, [pc, #108]	@ (80124e4 <tcp_input+0x27c>)
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	f003 0303 	and.w	r3, r3, #3
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00c      	beq.n	801249a <tcp_input+0x232>
    tcplen++;
 8012480:	4b19      	ldr	r3, [pc, #100]	@ (80124e8 <tcp_input+0x280>)
 8012482:	881b      	ldrh	r3, [r3, #0]
 8012484:	3301      	adds	r3, #1
 8012486:	b29a      	uxth	r2, r3
 8012488:	4b17      	ldr	r3, [pc, #92]	@ (80124e8 <tcp_input+0x280>)
 801248a:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	891a      	ldrh	r2, [r3, #8]
 8012490:	4b15      	ldr	r3, [pc, #84]	@ (80124e8 <tcp_input+0x280>)
 8012492:	881b      	ldrh	r3, [r3, #0]
 8012494:	429a      	cmp	r2, r3
 8012496:	f200 82eb 	bhi.w	8012a70 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801249e:	4b13      	ldr	r3, [pc, #76]	@ (80124ec <tcp_input+0x284>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	61bb      	str	r3, [r7, #24]
 80124a4:	e09b      	b.n	80125de <tcp_input+0x376>
 80124a6:	bf00      	nop
 80124a8:	080200c4 	.word	0x080200c4
 80124ac:	080200f8 	.word	0x080200f8
 80124b0:	08020110 	.word	0x08020110
 80124b4:	20013d3c 	.word	0x20013d3c
 80124b8:	2000a29c 	.word	0x2000a29c
 80124bc:	2000a2b0 	.word	0x2000a2b0
 80124c0:	2000a2ac 	.word	0x2000a2ac
 80124c4:	20013d40 	.word	0x20013d40
 80124c8:	20013d44 	.word	0x20013d44
 80124cc:	20013d42 	.word	0x20013d42
 80124d0:	08020138 	.word	0x08020138
 80124d4:	08020148 	.word	0x08020148
 80124d8:	08020154 	.word	0x08020154
 80124dc:	20013d4c 	.word	0x20013d4c
 80124e0:	20013d50 	.word	0x20013d50
 80124e4:	20013d58 	.word	0x20013d58
 80124e8:	20013d56 	.word	0x20013d56
 80124ec:	20013d1c 	.word	0x20013d1c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80124f0:	69bb      	ldr	r3, [r7, #24]
 80124f2:	7d1b      	ldrb	r3, [r3, #20]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d105      	bne.n	8012504 <tcp_input+0x29c>
 80124f8:	4b88      	ldr	r3, [pc, #544]	@ (801271c <tcp_input+0x4b4>)
 80124fa:	22fb      	movs	r2, #251	@ 0xfb
 80124fc:	4988      	ldr	r1, [pc, #544]	@ (8012720 <tcp_input+0x4b8>)
 80124fe:	4889      	ldr	r0, [pc, #548]	@ (8012724 <tcp_input+0x4bc>)
 8012500:	f009 fe0e 	bl	801c120 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012504:	69bb      	ldr	r3, [r7, #24]
 8012506:	7d1b      	ldrb	r3, [r3, #20]
 8012508:	2b0a      	cmp	r3, #10
 801250a:	d105      	bne.n	8012518 <tcp_input+0x2b0>
 801250c:	4b83      	ldr	r3, [pc, #524]	@ (801271c <tcp_input+0x4b4>)
 801250e:	22fc      	movs	r2, #252	@ 0xfc
 8012510:	4985      	ldr	r1, [pc, #532]	@ (8012728 <tcp_input+0x4c0>)
 8012512:	4884      	ldr	r0, [pc, #528]	@ (8012724 <tcp_input+0x4bc>)
 8012514:	f009 fe04 	bl	801c120 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	7d1b      	ldrb	r3, [r3, #20]
 801251c:	2b01      	cmp	r3, #1
 801251e:	d105      	bne.n	801252c <tcp_input+0x2c4>
 8012520:	4b7e      	ldr	r3, [pc, #504]	@ (801271c <tcp_input+0x4b4>)
 8012522:	22fd      	movs	r2, #253	@ 0xfd
 8012524:	4981      	ldr	r1, [pc, #516]	@ (801272c <tcp_input+0x4c4>)
 8012526:	487f      	ldr	r0, [pc, #508]	@ (8012724 <tcp_input+0x4bc>)
 8012528:	f009 fdfa 	bl	801c120 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	7a1b      	ldrb	r3, [r3, #8]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d00c      	beq.n	801254e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	7a1a      	ldrb	r2, [r3, #8]
 8012538:	4b7d      	ldr	r3, [pc, #500]	@ (8012730 <tcp_input+0x4c8>)
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012540:	3301      	adds	r3, #1
 8012542:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012544:	429a      	cmp	r2, r3
 8012546:	d002      	beq.n	801254e <tcp_input+0x2e6>
      prev = pcb;
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	61fb      	str	r3, [r7, #28]
      continue;
 801254c:	e044      	b.n	80125d8 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	8b1a      	ldrh	r2, [r3, #24]
 8012552:	4b78      	ldr	r3, [pc, #480]	@ (8012734 <tcp_input+0x4cc>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	b29b      	uxth	r3, r3
 801255a:	429a      	cmp	r2, r3
 801255c:	d13a      	bne.n	80125d4 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	8ada      	ldrh	r2, [r3, #22]
 8012562:	4b74      	ldr	r3, [pc, #464]	@ (8012734 <tcp_input+0x4cc>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	885b      	ldrh	r3, [r3, #2]
 8012568:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801256a:	429a      	cmp	r2, r3
 801256c:	d132      	bne.n	80125d4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801256e:	69bb      	ldr	r3, [r7, #24]
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	4b6f      	ldr	r3, [pc, #444]	@ (8012730 <tcp_input+0x4c8>)
 8012574:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012576:	429a      	cmp	r2, r3
 8012578:	d12c      	bne.n	80125d4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	4b6c      	ldr	r3, [pc, #432]	@ (8012730 <tcp_input+0x4c8>)
 8012580:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012582:	429a      	cmp	r2, r3
 8012584:	d126      	bne.n	80125d4 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	69ba      	ldr	r2, [r7, #24]
 801258c:	429a      	cmp	r2, r3
 801258e:	d106      	bne.n	801259e <tcp_input+0x336>
 8012590:	4b62      	ldr	r3, [pc, #392]	@ (801271c <tcp_input+0x4b4>)
 8012592:	f240 120d 	movw	r2, #269	@ 0x10d
 8012596:	4968      	ldr	r1, [pc, #416]	@ (8012738 <tcp_input+0x4d0>)
 8012598:	4862      	ldr	r0, [pc, #392]	@ (8012724 <tcp_input+0x4bc>)
 801259a:	f009 fdc1 	bl	801c120 <iprintf>
      if (prev != NULL) {
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d00a      	beq.n	80125ba <tcp_input+0x352>
        prev->next = pcb->next;
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	68da      	ldr	r2, [r3, #12]
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80125ac:	4b63      	ldr	r3, [pc, #396]	@ (801273c <tcp_input+0x4d4>)
 80125ae:	681a      	ldr	r2, [r3, #0]
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80125b4:	4a61      	ldr	r2, [pc, #388]	@ (801273c <tcp_input+0x4d4>)
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	69ba      	ldr	r2, [r7, #24]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d110      	bne.n	80125e6 <tcp_input+0x37e>
 80125c4:	4b55      	ldr	r3, [pc, #340]	@ (801271c <tcp_input+0x4b4>)
 80125c6:	f240 1215 	movw	r2, #277	@ 0x115
 80125ca:	495d      	ldr	r1, [pc, #372]	@ (8012740 <tcp_input+0x4d8>)
 80125cc:	4855      	ldr	r0, [pc, #340]	@ (8012724 <tcp_input+0x4bc>)
 80125ce:	f009 fda7 	bl	801c120 <iprintf>
      break;
 80125d2:	e008      	b.n	80125e6 <tcp_input+0x37e>
    }
    prev = pcb;
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	61bb      	str	r3, [r7, #24]
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d185      	bne.n	80124f0 <tcp_input+0x288>
 80125e4:	e000      	b.n	80125e8 <tcp_input+0x380>
      break;
 80125e6:	bf00      	nop
  }

  if (pcb == NULL) {
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f040 80b0 	bne.w	8012750 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80125f0:	4b54      	ldr	r3, [pc, #336]	@ (8012744 <tcp_input+0x4dc>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	61bb      	str	r3, [r7, #24]
 80125f6:	e03f      	b.n	8012678 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	7d1b      	ldrb	r3, [r3, #20]
 80125fc:	2b0a      	cmp	r3, #10
 80125fe:	d006      	beq.n	801260e <tcp_input+0x3a6>
 8012600:	4b46      	ldr	r3, [pc, #280]	@ (801271c <tcp_input+0x4b4>)
 8012602:	f240 121f 	movw	r2, #287	@ 0x11f
 8012606:	4950      	ldr	r1, [pc, #320]	@ (8012748 <tcp_input+0x4e0>)
 8012608:	4846      	ldr	r0, [pc, #280]	@ (8012724 <tcp_input+0x4bc>)
 801260a:	f009 fd89 	bl	801c120 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	7a1b      	ldrb	r3, [r3, #8]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d009      	beq.n	801262a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	7a1a      	ldrb	r2, [r3, #8]
 801261a:	4b45      	ldr	r3, [pc, #276]	@ (8012730 <tcp_input+0x4c8>)
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012622:	3301      	adds	r3, #1
 8012624:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012626:	429a      	cmp	r2, r3
 8012628:	d122      	bne.n	8012670 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	8b1a      	ldrh	r2, [r3, #24]
 801262e:	4b41      	ldr	r3, [pc, #260]	@ (8012734 <tcp_input+0x4cc>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	881b      	ldrh	r3, [r3, #0]
 8012634:	b29b      	uxth	r3, r3
 8012636:	429a      	cmp	r2, r3
 8012638:	d11b      	bne.n	8012672 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	8ada      	ldrh	r2, [r3, #22]
 801263e:	4b3d      	ldr	r3, [pc, #244]	@ (8012734 <tcp_input+0x4cc>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	885b      	ldrh	r3, [r3, #2]
 8012644:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012646:	429a      	cmp	r2, r3
 8012648:	d113      	bne.n	8012672 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	4b38      	ldr	r3, [pc, #224]	@ (8012730 <tcp_input+0x4c8>)
 8012650:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012652:	429a      	cmp	r2, r3
 8012654:	d10d      	bne.n	8012672 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	4b35      	ldr	r3, [pc, #212]	@ (8012730 <tcp_input+0x4c8>)
 801265c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801265e:	429a      	cmp	r2, r3
 8012660:	d107      	bne.n	8012672 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012662:	69b8      	ldr	r0, [r7, #24]
 8012664:	f000 fb5e 	bl	8012d24 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7fd ff1b 	bl	80104a4 <pbuf_free>
        return;
 801266e:	e205      	b.n	8012a7c <tcp_input+0x814>
        continue;
 8012670:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	68db      	ldr	r3, [r3, #12]
 8012676:	61bb      	str	r3, [r7, #24]
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d1bc      	bne.n	80125f8 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801267e:	2300      	movs	r3, #0
 8012680:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012682:	4b32      	ldr	r3, [pc, #200]	@ (801274c <tcp_input+0x4e4>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	617b      	str	r3, [r7, #20]
 8012688:	e02a      	b.n	80126e0 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	7a1b      	ldrb	r3, [r3, #8]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d00c      	beq.n	80126ac <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	7a1a      	ldrb	r2, [r3, #8]
 8012696:	4b26      	ldr	r3, [pc, #152]	@ (8012730 <tcp_input+0x4c8>)
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801269e:	3301      	adds	r3, #1
 80126a0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d002      	beq.n	80126ac <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	61fb      	str	r3, [r7, #28]
        continue;
 80126aa:	e016      	b.n	80126da <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	8ada      	ldrh	r2, [r3, #22]
 80126b0:	4b20      	ldr	r3, [pc, #128]	@ (8012734 <tcp_input+0x4cc>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	885b      	ldrh	r3, [r3, #2]
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d10c      	bne.n	80126d6 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	681a      	ldr	r2, [r3, #0]
 80126c0:	4b1b      	ldr	r3, [pc, #108]	@ (8012730 <tcp_input+0x4c8>)
 80126c2:	695b      	ldr	r3, [r3, #20]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d00f      	beq.n	80126e8 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00d      	beq.n	80126ea <tcp_input+0x482>
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d009      	beq.n	80126ea <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1d1      	bne.n	801268a <tcp_input+0x422>
 80126e6:	e000      	b.n	80126ea <tcp_input+0x482>
            break;
 80126e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d02f      	beq.n	8012750 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00a      	beq.n	801270c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	68da      	ldr	r2, [r3, #12]
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80126fe:	4b13      	ldr	r3, [pc, #76]	@ (801274c <tcp_input+0x4e4>)
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012706:	4a11      	ldr	r2, [pc, #68]	@ (801274c <tcp_input+0x4e4>)
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801270c:	6978      	ldr	r0, [r7, #20]
 801270e:	f000 fa0b 	bl	8012b28 <tcp_listen_input>
      }
      pbuf_free(p);
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7fd fec6 	bl	80104a4 <pbuf_free>
      return;
 8012718:	e1b0      	b.n	8012a7c <tcp_input+0x814>
 801271a:	bf00      	nop
 801271c:	080200c4 	.word	0x080200c4
 8012720:	08020174 	.word	0x08020174
 8012724:	08020110 	.word	0x08020110
 8012728:	0802019c 	.word	0x0802019c
 801272c:	080201c8 	.word	0x080201c8
 8012730:	2000a29c 	.word	0x2000a29c
 8012734:	20013d3c 	.word	0x20013d3c
 8012738:	080201f0 	.word	0x080201f0
 801273c:	20013d1c 	.word	0x20013d1c
 8012740:	0802021c 	.word	0x0802021c
 8012744:	20013d20 	.word	0x20013d20
 8012748:	08020248 	.word	0x08020248
 801274c:	20013d18 	.word	0x20013d18
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	2b00      	cmp	r3, #0
 8012754:	f000 8158 	beq.w	8012a08 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012758:	4b95      	ldr	r3, [pc, #596]	@ (80129b0 <tcp_input+0x748>)
 801275a:	2200      	movs	r2, #0
 801275c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	891a      	ldrh	r2, [r3, #8]
 8012762:	4b93      	ldr	r3, [pc, #588]	@ (80129b0 <tcp_input+0x748>)
 8012764:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012766:	4a92      	ldr	r2, [pc, #584]	@ (80129b0 <tcp_input+0x748>)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801276c:	4b91      	ldr	r3, [pc, #580]	@ (80129b4 <tcp_input+0x74c>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4a8f      	ldr	r2, [pc, #572]	@ (80129b0 <tcp_input+0x748>)
 8012772:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8012774:	4b90      	ldr	r3, [pc, #576]	@ (80129b8 <tcp_input+0x750>)
 8012776:	2200      	movs	r2, #0
 8012778:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801277a:	4b90      	ldr	r3, [pc, #576]	@ (80129bc <tcp_input+0x754>)
 801277c:	2200      	movs	r2, #0
 801277e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012780:	4b8f      	ldr	r3, [pc, #572]	@ (80129c0 <tcp_input+0x758>)
 8012782:	2200      	movs	r2, #0
 8012784:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012786:	4b8f      	ldr	r3, [pc, #572]	@ (80129c4 <tcp_input+0x75c>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	f003 0308 	and.w	r3, r3, #8
 801278e:	2b00      	cmp	r3, #0
 8012790:	d006      	beq.n	80127a0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	7b5b      	ldrb	r3, [r3, #13]
 8012796:	f043 0301 	orr.w	r3, r3, #1
 801279a:	b2da      	uxtb	r2, r3
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d017      	beq.n	80127d8 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80127a8:	69b8      	ldr	r0, [r7, #24]
 80127aa:	f7ff f915 	bl	80119d8 <tcp_process_refused_data>
 80127ae:	4603      	mov	r3, r0
 80127b0:	f113 0f0d 	cmn.w	r3, #13
 80127b4:	d007      	beq.n	80127c6 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00c      	beq.n	80127d8 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80127be:	4b82      	ldr	r3, [pc, #520]	@ (80129c8 <tcp_input+0x760>)
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d008      	beq.n	80127d8 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80127c6:	69bb      	ldr	r3, [r7, #24]
 80127c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f040 80e4 	bne.w	8012998 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80127d0:	69b8      	ldr	r0, [r7, #24]
 80127d2:	f003 f9e1 	bl	8015b98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80127d6:	e0df      	b.n	8012998 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 80127d8:	4a7c      	ldr	r2, [pc, #496]	@ (80129cc <tcp_input+0x764>)
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80127de:	69b8      	ldr	r0, [r7, #24]
 80127e0:	f000 fb1a 	bl	8012e18 <tcp_process>
 80127e4:	4603      	mov	r3, r0
 80127e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80127e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127ec:	f113 0f0d 	cmn.w	r3, #13
 80127f0:	f000 80d4 	beq.w	801299c <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 80127f4:	4b71      	ldr	r3, [pc, #452]	@ (80129bc <tcp_input+0x754>)
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	f003 0308 	and.w	r3, r3, #8
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d015      	beq.n	801282c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012806:	2b00      	cmp	r3, #0
 8012808:	d008      	beq.n	801281c <tcp_input+0x5b4>
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012810:	69ba      	ldr	r2, [r7, #24]
 8012812:	6912      	ldr	r2, [r2, #16]
 8012814:	f06f 010d 	mvn.w	r1, #13
 8012818:	4610      	mov	r0, r2
 801281a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801281c:	69b9      	ldr	r1, [r7, #24]
 801281e:	486c      	ldr	r0, [pc, #432]	@ (80129d0 <tcp_input+0x768>)
 8012820:	f7ff fbaa 	bl	8011f78 <tcp_pcb_remove>
        tcp_free(pcb);
 8012824:	69b8      	ldr	r0, [r7, #24]
 8012826:	f7fe f991 	bl	8010b4c <tcp_free>
 801282a:	e0da      	b.n	80129e2 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 801282c:	2300      	movs	r3, #0
 801282e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012830:	4b63      	ldr	r3, [pc, #396]	@ (80129c0 <tcp_input+0x758>)
 8012832:	881b      	ldrh	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d01d      	beq.n	8012874 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012838:	4b61      	ldr	r3, [pc, #388]	@ (80129c0 <tcp_input+0x758>)
 801283a:	881b      	ldrh	r3, [r3, #0]
 801283c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012844:	2b00      	cmp	r3, #0
 8012846:	d00a      	beq.n	801285e <tcp_input+0x5f6>
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801284e:	69ba      	ldr	r2, [r7, #24]
 8012850:	6910      	ldr	r0, [r2, #16]
 8012852:	897a      	ldrh	r2, [r7, #10]
 8012854:	69b9      	ldr	r1, [r7, #24]
 8012856:	4798      	blx	r3
 8012858:	4603      	mov	r3, r0
 801285a:	74fb      	strb	r3, [r7, #19]
 801285c:	e001      	b.n	8012862 <tcp_input+0x5fa>
 801285e:	2300      	movs	r3, #0
 8012860:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012862:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012866:	f113 0f0d 	cmn.w	r3, #13
 801286a:	f000 8099 	beq.w	80129a0 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 801286e:	4b54      	ldr	r3, [pc, #336]	@ (80129c0 <tcp_input+0x758>)
 8012870:	2200      	movs	r2, #0
 8012872:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012874:	69b8      	ldr	r0, [r7, #24]
 8012876:	f000 f917 	bl	8012aa8 <tcp_input_delayed_close>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	f040 8091 	bne.w	80129a4 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012882:	4b4d      	ldr	r3, [pc, #308]	@ (80129b8 <tcp_input+0x750>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d041      	beq.n	801290e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801288e:	2b00      	cmp	r3, #0
 8012890:	d006      	beq.n	80128a0 <tcp_input+0x638>
 8012892:	4b50      	ldr	r3, [pc, #320]	@ (80129d4 <tcp_input+0x76c>)
 8012894:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012898:	494f      	ldr	r1, [pc, #316]	@ (80129d8 <tcp_input+0x770>)
 801289a:	4850      	ldr	r0, [pc, #320]	@ (80129dc <tcp_input+0x774>)
 801289c:	f009 fc40 	bl	801c120 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	8b5b      	ldrh	r3, [r3, #26]
 80128a4:	f003 0310 	and.w	r3, r3, #16
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d008      	beq.n	80128be <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80128ac:	4b42      	ldr	r3, [pc, #264]	@ (80129b8 <tcp_input+0x750>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fd fdf7 	bl	80104a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80128b6:	69b8      	ldr	r0, [r7, #24]
 80128b8:	f7fe fc30 	bl	801111c <tcp_abort>
            goto aborted;
 80128bc:	e091      	b.n	80129e2 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00c      	beq.n	80128e2 <tcp_input+0x67a>
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	6918      	ldr	r0, [r3, #16]
 80128d2:	4b39      	ldr	r3, [pc, #228]	@ (80129b8 <tcp_input+0x750>)
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	2300      	movs	r3, #0
 80128d8:	69b9      	ldr	r1, [r7, #24]
 80128da:	47a0      	blx	r4
 80128dc:	4603      	mov	r3, r0
 80128de:	74fb      	strb	r3, [r7, #19]
 80128e0:	e008      	b.n	80128f4 <tcp_input+0x68c>
 80128e2:	4b35      	ldr	r3, [pc, #212]	@ (80129b8 <tcp_input+0x750>)
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	2300      	movs	r3, #0
 80128e8:	69b9      	ldr	r1, [r7, #24]
 80128ea:	2000      	movs	r0, #0
 80128ec:	f7ff f94c 	bl	8011b88 <tcp_recv_null>
 80128f0:	4603      	mov	r3, r0
 80128f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80128f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80128f8:	f113 0f0d 	cmn.w	r3, #13
 80128fc:	d054      	beq.n	80129a8 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80128fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d003      	beq.n	801290e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012906:	4b2c      	ldr	r3, [pc, #176]	@ (80129b8 <tcp_input+0x750>)
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801290e:	4b2b      	ldr	r3, [pc, #172]	@ (80129bc <tcp_input+0x754>)
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	f003 0320 	and.w	r3, r3, #32
 8012916:	2b00      	cmp	r3, #0
 8012918:	d031      	beq.n	801297e <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801291e:	2b00      	cmp	r3, #0
 8012920:	d009      	beq.n	8012936 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012926:	7b5a      	ldrb	r2, [r3, #13]
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801292c:	f042 0220 	orr.w	r2, r2, #32
 8012930:	b2d2      	uxtb	r2, r2
 8012932:	735a      	strb	r2, [r3, #13]
 8012934:	e023      	b.n	801297e <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801293a:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801293e:	4293      	cmp	r3, r2
 8012940:	d005      	beq.n	801294e <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012946:	3301      	adds	r3, #1
 8012948:	b29a      	uxth	r2, r3
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012954:	2b00      	cmp	r3, #0
 8012956:	d00b      	beq.n	8012970 <tcp_input+0x708>
 8012958:	69bb      	ldr	r3, [r7, #24]
 801295a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801295e:	69bb      	ldr	r3, [r7, #24]
 8012960:	6918      	ldr	r0, [r3, #16]
 8012962:	2300      	movs	r3, #0
 8012964:	2200      	movs	r2, #0
 8012966:	69b9      	ldr	r1, [r7, #24]
 8012968:	47a0      	blx	r4
 801296a:	4603      	mov	r3, r0
 801296c:	74fb      	strb	r3, [r7, #19]
 801296e:	e001      	b.n	8012974 <tcp_input+0x70c>
 8012970:	2300      	movs	r3, #0
 8012972:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012974:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012978:	f113 0f0d 	cmn.w	r3, #13
 801297c:	d016      	beq.n	80129ac <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801297e:	4b13      	ldr	r3, [pc, #76]	@ (80129cc <tcp_input+0x764>)
 8012980:	2200      	movs	r2, #0
 8012982:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012984:	69b8      	ldr	r0, [r7, #24]
 8012986:	f000 f88f 	bl	8012aa8 <tcp_input_delayed_close>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	d127      	bne.n	80129e0 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012990:	69b8      	ldr	r0, [r7, #24]
 8012992:	f002 facd 	bl	8014f30 <tcp_output>
 8012996:	e024      	b.n	80129e2 <tcp_input+0x77a>
        goto aborted;
 8012998:	bf00      	nop
 801299a:	e022      	b.n	80129e2 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801299c:	bf00      	nop
 801299e:	e020      	b.n	80129e2 <tcp_input+0x77a>
              goto aborted;
 80129a0:	bf00      	nop
 80129a2:	e01e      	b.n	80129e2 <tcp_input+0x77a>
          goto aborted;
 80129a4:	bf00      	nop
 80129a6:	e01c      	b.n	80129e2 <tcp_input+0x77a>
            goto aborted;
 80129a8:	bf00      	nop
 80129aa:	e01a      	b.n	80129e2 <tcp_input+0x77a>
              goto aborted;
 80129ac:	bf00      	nop
 80129ae:	e018      	b.n	80129e2 <tcp_input+0x77a>
 80129b0:	20013d28 	.word	0x20013d28
 80129b4:	20013d3c 	.word	0x20013d3c
 80129b8:	20013d5c 	.word	0x20013d5c
 80129bc:	20013d59 	.word	0x20013d59
 80129c0:	20013d54 	.word	0x20013d54
 80129c4:	20013d58 	.word	0x20013d58
 80129c8:	20013d56 	.word	0x20013d56
 80129cc:	20013d60 	.word	0x20013d60
 80129d0:	20013d1c 	.word	0x20013d1c
 80129d4:	080200c4 	.word	0x080200c4
 80129d8:	08020278 	.word	0x08020278
 80129dc:	08020110 	.word	0x08020110
          goto aborted;
 80129e0:	bf00      	nop
    tcp_input_pcb = NULL;
 80129e2:	4b28      	ldr	r3, [pc, #160]	@ (8012a84 <tcp_input+0x81c>)
 80129e4:	2200      	movs	r2, #0
 80129e6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80129e8:	4b27      	ldr	r3, [pc, #156]	@ (8012a88 <tcp_input+0x820>)
 80129ea:	2200      	movs	r2, #0
 80129ec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80129ee:	4b27      	ldr	r3, [pc, #156]	@ (8012a8c <tcp_input+0x824>)
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d041      	beq.n	8012a7a <tcp_input+0x812>
      pbuf_free(inseg.p);
 80129f6:	4b25      	ldr	r3, [pc, #148]	@ (8012a8c <tcp_input+0x824>)
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7fd fd52 	bl	80104a4 <pbuf_free>
      inseg.p = NULL;
 8012a00:	4b22      	ldr	r3, [pc, #136]	@ (8012a8c <tcp_input+0x824>)
 8012a02:	2200      	movs	r2, #0
 8012a04:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012a06:	e038      	b.n	8012a7a <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012a08:	4b21      	ldr	r3, [pc, #132]	@ (8012a90 <tcp_input+0x828>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	899b      	ldrh	r3, [r3, #12]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fc f825 	bl	800ea60 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	f003 0304 	and.w	r3, r3, #4
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d118      	bne.n	8012a54 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a22:	4b1c      	ldr	r3, [pc, #112]	@ (8012a94 <tcp_input+0x82c>)
 8012a24:	6819      	ldr	r1, [r3, #0]
 8012a26:	4b1c      	ldr	r3, [pc, #112]	@ (8012a98 <tcp_input+0x830>)
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8012a9c <tcp_input+0x834>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a32:	4b17      	ldr	r3, [pc, #92]	@ (8012a90 <tcp_input+0x828>)
 8012a34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a36:	885b      	ldrh	r3, [r3, #2]
 8012a38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a3a:	4a15      	ldr	r2, [pc, #84]	@ (8012a90 <tcp_input+0x828>)
 8012a3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a3e:	8812      	ldrh	r2, [r2, #0]
 8012a40:	b292      	uxth	r2, r2
 8012a42:	9202      	str	r2, [sp, #8]
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	4b16      	ldr	r3, [pc, #88]	@ (8012aa0 <tcp_input+0x838>)
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	4b16      	ldr	r3, [pc, #88]	@ (8012aa4 <tcp_input+0x83c>)
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	2000      	movs	r0, #0
 8012a50:	f003 f850 	bl	8015af4 <tcp_rst>
    pbuf_free(p);
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7fd fd25 	bl	80104a4 <pbuf_free>
  return;
 8012a5a:	e00e      	b.n	8012a7a <tcp_input+0x812>
    goto dropped;
 8012a5c:	bf00      	nop
 8012a5e:	e008      	b.n	8012a72 <tcp_input+0x80a>
    goto dropped;
 8012a60:	bf00      	nop
 8012a62:	e006      	b.n	8012a72 <tcp_input+0x80a>
      goto dropped;
 8012a64:	bf00      	nop
 8012a66:	e004      	b.n	8012a72 <tcp_input+0x80a>
    goto dropped;
 8012a68:	bf00      	nop
 8012a6a:	e002      	b.n	8012a72 <tcp_input+0x80a>
      goto dropped;
 8012a6c:	bf00      	nop
 8012a6e:	e000      	b.n	8012a72 <tcp_input+0x80a>
      goto dropped;
 8012a70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7fd fd16 	bl	80104a4 <pbuf_free>
 8012a78:	e000      	b.n	8012a7c <tcp_input+0x814>
  return;
 8012a7a:	bf00      	nop
}
 8012a7c:	3724      	adds	r7, #36	@ 0x24
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd90      	pop	{r4, r7, pc}
 8012a82:	bf00      	nop
 8012a84:	20013d60 	.word	0x20013d60
 8012a88:	20013d5c 	.word	0x20013d5c
 8012a8c:	20013d28 	.word	0x20013d28
 8012a90:	20013d3c 	.word	0x20013d3c
 8012a94:	20013d50 	.word	0x20013d50
 8012a98:	20013d56 	.word	0x20013d56
 8012a9c:	20013d4c 	.word	0x20013d4c
 8012aa0:	2000a2ac 	.word	0x2000a2ac
 8012aa4:	2000a2b0 	.word	0x2000a2b0

08012aa8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <tcp_input_delayed_close+0x1c>
 8012ab6:	4b17      	ldr	r3, [pc, #92]	@ (8012b14 <tcp_input_delayed_close+0x6c>)
 8012ab8:	f240 225a 	movw	r2, #602	@ 0x25a
 8012abc:	4916      	ldr	r1, [pc, #88]	@ (8012b18 <tcp_input_delayed_close+0x70>)
 8012abe:	4817      	ldr	r0, [pc, #92]	@ (8012b1c <tcp_input_delayed_close+0x74>)
 8012ac0:	f009 fb2e 	bl	801c120 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012ac4:	4b16      	ldr	r3, [pc, #88]	@ (8012b20 <tcp_input_delayed_close+0x78>)
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	f003 0310 	and.w	r3, r3, #16
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d01c      	beq.n	8012b0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	8b5b      	ldrh	r3, [r3, #26]
 8012ad4:	f003 0310 	and.w	r3, r3, #16
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d10d      	bne.n	8012af8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d008      	beq.n	8012af8 <tcp_input_delayed_close+0x50>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	6912      	ldr	r2, [r2, #16]
 8012af0:	f06f 010e 	mvn.w	r1, #14
 8012af4:	4610      	mov	r0, r2
 8012af6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012af8:	6879      	ldr	r1, [r7, #4]
 8012afa:	480a      	ldr	r0, [pc, #40]	@ (8012b24 <tcp_input_delayed_close+0x7c>)
 8012afc:	f7ff fa3c 	bl	8011f78 <tcp_pcb_remove>
    tcp_free(pcb);
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7fe f823 	bl	8010b4c <tcp_free>
    return 1;
 8012b06:	2301      	movs	r3, #1
 8012b08:	e000      	b.n	8012b0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012b0a:	2300      	movs	r3, #0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	080200c4 	.word	0x080200c4
 8012b18:	08020294 	.word	0x08020294
 8012b1c:	08020110 	.word	0x08020110
 8012b20:	20013d59 	.word	0x20013d59
 8012b24:	20013d1c 	.word	0x20013d1c

08012b28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012b28:	b590      	push	{r4, r7, lr}
 8012b2a:	b08b      	sub	sp, #44	@ 0x2c
 8012b2c:	af04      	add	r7, sp, #16
 8012b2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012b30:	4b6f      	ldr	r3, [pc, #444]	@ (8012cf0 <tcp_listen_input+0x1c8>)
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	f003 0304 	and.w	r3, r3, #4
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f040 80d2 	bne.w	8012ce2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d106      	bne.n	8012b52 <tcp_listen_input+0x2a>
 8012b44:	4b6b      	ldr	r3, [pc, #428]	@ (8012cf4 <tcp_listen_input+0x1cc>)
 8012b46:	f240 2281 	movw	r2, #641	@ 0x281
 8012b4a:	496b      	ldr	r1, [pc, #428]	@ (8012cf8 <tcp_listen_input+0x1d0>)
 8012b4c:	486b      	ldr	r0, [pc, #428]	@ (8012cfc <tcp_listen_input+0x1d4>)
 8012b4e:	f009 fae7 	bl	801c120 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012b52:	4b67      	ldr	r3, [pc, #412]	@ (8012cf0 <tcp_listen_input+0x1c8>)
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	f003 0310 	and.w	r3, r3, #16
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d019      	beq.n	8012b92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b5e:	4b68      	ldr	r3, [pc, #416]	@ (8012d00 <tcp_listen_input+0x1d8>)
 8012b60:	6819      	ldr	r1, [r3, #0]
 8012b62:	4b68      	ldr	r3, [pc, #416]	@ (8012d04 <tcp_listen_input+0x1dc>)
 8012b64:	881b      	ldrh	r3, [r3, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	4b67      	ldr	r3, [pc, #412]	@ (8012d08 <tcp_listen_input+0x1e0>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b6e:	4b67      	ldr	r3, [pc, #412]	@ (8012d0c <tcp_listen_input+0x1e4>)
 8012b70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b72:	885b      	ldrh	r3, [r3, #2]
 8012b74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b76:	4a65      	ldr	r2, [pc, #404]	@ (8012d0c <tcp_listen_input+0x1e4>)
 8012b78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b7a:	8812      	ldrh	r2, [r2, #0]
 8012b7c:	b292      	uxth	r2, r2
 8012b7e:	9202      	str	r2, [sp, #8]
 8012b80:	9301      	str	r3, [sp, #4]
 8012b82:	4b63      	ldr	r3, [pc, #396]	@ (8012d10 <tcp_listen_input+0x1e8>)
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	4b63      	ldr	r3, [pc, #396]	@ (8012d14 <tcp_listen_input+0x1ec>)
 8012b88:	4602      	mov	r2, r0
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f002 ffb2 	bl	8015af4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012b90:	e0a9      	b.n	8012ce6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012b92:	4b57      	ldr	r3, [pc, #348]	@ (8012cf0 <tcp_listen_input+0x1c8>)
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	f003 0302 	and.w	r3, r3, #2
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 80a3 	beq.w	8012ce6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	7d5b      	ldrb	r3, [r3, #21]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ff f913 	bl	8011dd0 <tcp_alloc>
 8012baa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d111      	bne.n	8012bd6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	699b      	ldr	r3, [r3, #24]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <tcp_listen_input+0xa8>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	699b      	ldr	r3, [r3, #24]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	6910      	ldr	r0, [r2, #16]
 8012bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	4798      	blx	r3
 8012bca:	4603      	mov	r3, r0
 8012bcc:	73bb      	strb	r3, [r7, #14]
      return;
 8012bce:	e08b      	b.n	8012ce8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012bd0:	23f0      	movs	r3, #240	@ 0xf0
 8012bd2:	73bb      	strb	r3, [r7, #14]
      return;
 8012bd4:	e088      	b.n	8012ce8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012bd6:	4b50      	ldr	r3, [pc, #320]	@ (8012d18 <tcp_listen_input+0x1f0>)
 8012bd8:	695a      	ldr	r2, [r3, #20]
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012bde:	4b4e      	ldr	r3, [pc, #312]	@ (8012d18 <tcp_listen_input+0x1f0>)
 8012be0:	691a      	ldr	r2, [r3, #16]
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8ada      	ldrh	r2, [r3, #22]
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012bee:	4b47      	ldr	r3, [pc, #284]	@ (8012d0c <tcp_listen_input+0x1e4>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2203      	movs	r2, #3
 8012bfe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012c00:	4b41      	ldr	r3, [pc, #260]	@ (8012d08 <tcp_listen_input+0x1e0>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	1c5a      	adds	r2, r3, #1
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012c12:	6978      	ldr	r0, [r7, #20]
 8012c14:	f7ff fa44 	bl	80120a0 <tcp_next_iss>
 8012c18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	693a      	ldr	r2, [r7, #16]
 8012c1e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	693a      	ldr	r2, [r7, #16]
 8012c24:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	693a      	ldr	r2, [r7, #16]
 8012c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	693a      	ldr	r2, [r7, #16]
 8012c30:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012c32:	4b35      	ldr	r3, [pc, #212]	@ (8012d08 <tcp_listen_input+0x1e0>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	1e5a      	subs	r2, r3, #1
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	691a      	ldr	r2, [r3, #16]
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	7a5b      	ldrb	r3, [r3, #9]
 8012c4e:	f003 030c 	and.w	r3, r3, #12
 8012c52:	b2da      	uxtb	r2, r3
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	7a1a      	ldrb	r2, [r3, #8]
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012c60:	4b2e      	ldr	r3, [pc, #184]	@ (8012d1c <tcp_listen_input+0x1f4>)
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	60da      	str	r2, [r3, #12]
 8012c68:	4a2c      	ldr	r2, [pc, #176]	@ (8012d1c <tcp_listen_input+0x1f4>)
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	6013      	str	r3, [r2, #0]
 8012c6e:	f003 f903 	bl	8015e78 <tcp_timer_needed>
 8012c72:	4b2b      	ldr	r3, [pc, #172]	@ (8012d20 <tcp_listen_input+0x1f8>)
 8012c74:	2201      	movs	r2, #1
 8012c76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012c78:	6978      	ldr	r0, [r7, #20]
 8012c7a:	f001 fd8b 	bl	8014794 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012c7e:	4b23      	ldr	r3, [pc, #140]	@ (8012d0c <tcp_listen_input+0x1e4>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	89db      	ldrh	r3, [r3, #14]
 8012c84:	b29a      	uxth	r2, r3
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f006 fff9 	bl	8019c98 <ip4_route>
 8012ca6:	4601      	mov	r1, r0
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	3304      	adds	r3, #4
 8012cac:	461a      	mov	r2, r3
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f7ff fa1c 	bl	80120ec <tcp_eff_send_mss_netif>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012cbc:	2112      	movs	r1, #18
 8012cbe:	6978      	ldr	r0, [r7, #20]
 8012cc0:	f002 f848 	bl	8014d54 <tcp_enqueue_flags>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d004      	beq.n	8012cda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	6978      	ldr	r0, [r7, #20]
 8012cd4:	f7fe f964 	bl	8010fa0 <tcp_abandon>
      return;
 8012cd8:	e006      	b.n	8012ce8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012cda:	6978      	ldr	r0, [r7, #20]
 8012cdc:	f002 f928 	bl	8014f30 <tcp_output>
  return;
 8012ce0:	e001      	b.n	8012ce6 <tcp_listen_input+0x1be>
    return;
 8012ce2:	bf00      	nop
 8012ce4:	e000      	b.n	8012ce8 <tcp_listen_input+0x1c0>
  return;
 8012ce6:	bf00      	nop
}
 8012ce8:	371c      	adds	r7, #28
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd90      	pop	{r4, r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	20013d58 	.word	0x20013d58
 8012cf4:	080200c4 	.word	0x080200c4
 8012cf8:	080202bc 	.word	0x080202bc
 8012cfc:	08020110 	.word	0x08020110
 8012d00:	20013d50 	.word	0x20013d50
 8012d04:	20013d56 	.word	0x20013d56
 8012d08:	20013d4c 	.word	0x20013d4c
 8012d0c:	20013d3c 	.word	0x20013d3c
 8012d10:	2000a2ac 	.word	0x2000a2ac
 8012d14:	2000a2b0 	.word	0x2000a2b0
 8012d18:	2000a29c 	.word	0x2000a29c
 8012d1c:	20013d1c 	.word	0x20013d1c
 8012d20:	20013d24 	.word	0x20013d24

08012d24 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af04      	add	r7, sp, #16
 8012d2a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8012dec <tcp_timewait_input+0xc8>)
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	f003 0304 	and.w	r3, r3, #4
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d153      	bne.n	8012de0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <tcp_timewait_input+0x28>
 8012d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8012df0 <tcp_timewait_input+0xcc>)
 8012d40:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012d44:	492b      	ldr	r1, [pc, #172]	@ (8012df4 <tcp_timewait_input+0xd0>)
 8012d46:	482c      	ldr	r0, [pc, #176]	@ (8012df8 <tcp_timewait_input+0xd4>)
 8012d48:	f009 f9ea 	bl	801c120 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012d4c:	4b27      	ldr	r3, [pc, #156]	@ (8012dec <tcp_timewait_input+0xc8>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	f003 0302 	and.w	r3, r3, #2
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d02a      	beq.n	8012dae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012d58:	4b28      	ldr	r3, [pc, #160]	@ (8012dfc <tcp_timewait_input+0xd8>)
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	db2d      	blt.n	8012dc2 <tcp_timewait_input+0x9e>
 8012d66:	4b25      	ldr	r3, [pc, #148]	@ (8012dfc <tcp_timewait_input+0xd8>)
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d6e:	6879      	ldr	r1, [r7, #4]
 8012d70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012d72:	440b      	add	r3, r1
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	dc23      	bgt.n	8012dc2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d7a:	4b21      	ldr	r3, [pc, #132]	@ (8012e00 <tcp_timewait_input+0xdc>)
 8012d7c:	6819      	ldr	r1, [r3, #0]
 8012d7e:	4b21      	ldr	r3, [pc, #132]	@ (8012e04 <tcp_timewait_input+0xe0>)
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	461a      	mov	r2, r3
 8012d84:	4b1d      	ldr	r3, [pc, #116]	@ (8012dfc <tcp_timewait_input+0xd8>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8012e08 <tcp_timewait_input+0xe4>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d8e:	885b      	ldrh	r3, [r3, #2]
 8012d90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d92:	4a1d      	ldr	r2, [pc, #116]	@ (8012e08 <tcp_timewait_input+0xe4>)
 8012d94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d96:	8812      	ldrh	r2, [r2, #0]
 8012d98:	b292      	uxth	r2, r2
 8012d9a:	9202      	str	r2, [sp, #8]
 8012d9c:	9301      	str	r3, [sp, #4]
 8012d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8012e0c <tcp_timewait_input+0xe8>)
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	4b1b      	ldr	r3, [pc, #108]	@ (8012e10 <tcp_timewait_input+0xec>)
 8012da4:	4602      	mov	r2, r0
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f002 fea4 	bl	8015af4 <tcp_rst>
      return;
 8012dac:	e01b      	b.n	8012de6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012dae:	4b0f      	ldr	r3, [pc, #60]	@ (8012dec <tcp_timewait_input+0xc8>)
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	f003 0301 	and.w	r3, r3, #1
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d003      	beq.n	8012dc2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012dba:	4b16      	ldr	r3, [pc, #88]	@ (8012e14 <tcp_timewait_input+0xf0>)
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012dc2:	4b10      	ldr	r3, [pc, #64]	@ (8012e04 <tcp_timewait_input+0xe0>)
 8012dc4:	881b      	ldrh	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d00c      	beq.n	8012de4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	8b5b      	ldrh	r3, [r3, #26]
 8012dce:	f043 0302 	orr.w	r3, r3, #2
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f002 f8a9 	bl	8014f30 <tcp_output>
  }
  return;
 8012dde:	e001      	b.n	8012de4 <tcp_timewait_input+0xc0>
    return;
 8012de0:	bf00      	nop
 8012de2:	e000      	b.n	8012de6 <tcp_timewait_input+0xc2>
  return;
 8012de4:	bf00      	nop
}
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}
 8012dec:	20013d58 	.word	0x20013d58
 8012df0:	080200c4 	.word	0x080200c4
 8012df4:	080202dc 	.word	0x080202dc
 8012df8:	08020110 	.word	0x08020110
 8012dfc:	20013d4c 	.word	0x20013d4c
 8012e00:	20013d50 	.word	0x20013d50
 8012e04:	20013d56 	.word	0x20013d56
 8012e08:	20013d3c 	.word	0x20013d3c
 8012e0c:	2000a2ac 	.word	0x2000a2ac
 8012e10:	2000a2b0 	.word	0x2000a2b0
 8012e14:	20013d10 	.word	0x20013d10

08012e18 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012e18:	b590      	push	{r4, r7, lr}
 8012e1a:	b08d      	sub	sp, #52	@ 0x34
 8012e1c:	af04      	add	r7, sp, #16
 8012e1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8012e24:	2300      	movs	r3, #0
 8012e26:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d106      	bne.n	8012e3c <tcp_process+0x24>
 8012e2e:	4b9d      	ldr	r3, [pc, #628]	@ (80130a4 <tcp_process+0x28c>)
 8012e30:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012e34:	499c      	ldr	r1, [pc, #624]	@ (80130a8 <tcp_process+0x290>)
 8012e36:	489d      	ldr	r0, [pc, #628]	@ (80130ac <tcp_process+0x294>)
 8012e38:	f009 f972 	bl	801c120 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80130b0 <tcp_process+0x298>)
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 0304 	and.w	r3, r3, #4
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d04e      	beq.n	8012ee6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	7d1b      	ldrb	r3, [r3, #20]
 8012e4c:	2b02      	cmp	r3, #2
 8012e4e:	d108      	bne.n	8012e62 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012e54:	4b97      	ldr	r3, [pc, #604]	@ (80130b4 <tcp_process+0x29c>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d123      	bne.n	8012ea4 <tcp_process+0x8c>
        acceptable = 1;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	77fb      	strb	r3, [r7, #31]
 8012e60:	e020      	b.n	8012ea4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e66:	4b94      	ldr	r3, [pc, #592]	@ (80130b8 <tcp_process+0x2a0>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d102      	bne.n	8012e74 <tcp_process+0x5c>
        acceptable = 1;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	77fb      	strb	r3, [r7, #31]
 8012e72:	e017      	b.n	8012ea4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e74:	4b90      	ldr	r3, [pc, #576]	@ (80130b8 <tcp_process+0x2a0>)
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	db10      	blt.n	8012ea4 <tcp_process+0x8c>
 8012e82:	4b8d      	ldr	r3, [pc, #564]	@ (80130b8 <tcp_process+0x2a0>)
 8012e84:	681a      	ldr	r2, [r3, #0]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e8a:	6879      	ldr	r1, [r7, #4]
 8012e8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012e8e:	440b      	add	r3, r1
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	dc06      	bgt.n	8012ea4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	8b5b      	ldrh	r3, [r3, #26]
 8012e9a:	f043 0302 	orr.w	r3, r3, #2
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012ea4:	7ffb      	ldrb	r3, [r7, #31]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d01b      	beq.n	8012ee2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	7d1b      	ldrb	r3, [r3, #20]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d106      	bne.n	8012ec0 <tcp_process+0xa8>
 8012eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80130a4 <tcp_process+0x28c>)
 8012eb4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8012eb8:	4980      	ldr	r1, [pc, #512]	@ (80130bc <tcp_process+0x2a4>)
 8012eba:	487c      	ldr	r0, [pc, #496]	@ (80130ac <tcp_process+0x294>)
 8012ebc:	f009 f930 	bl	801c120 <iprintf>
      recv_flags |= TF_RESET;
 8012ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80130c0 <tcp_process+0x2a8>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	f043 0308 	orr.w	r3, r3, #8
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	4b7d      	ldr	r3, [pc, #500]	@ (80130c0 <tcp_process+0x2a8>)
 8012ecc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	8b5b      	ldrh	r3, [r3, #26]
 8012ed2:	f023 0301 	bic.w	r3, r3, #1
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012edc:	f06f 030d 	mvn.w	r3, #13
 8012ee0:	e37a      	b.n	80135d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e378      	b.n	80135d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012ee6:	4b72      	ldr	r3, [pc, #456]	@ (80130b0 <tcp_process+0x298>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	f003 0302 	and.w	r3, r3, #2
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d010      	beq.n	8012f14 <tcp_process+0xfc>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	7d1b      	ldrb	r3, [r3, #20]
 8012ef6:	2b02      	cmp	r3, #2
 8012ef8:	d00c      	beq.n	8012f14 <tcp_process+0xfc>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	7d1b      	ldrb	r3, [r3, #20]
 8012efe:	2b03      	cmp	r3, #3
 8012f00:	d008      	beq.n	8012f14 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	8b5b      	ldrh	r3, [r3, #26]
 8012f06:	f043 0302 	orr.w	r3, r3, #2
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012f10:	2300      	movs	r3, #0
 8012f12:	e361      	b.n	80135d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	8b5b      	ldrh	r3, [r3, #26]
 8012f18:	f003 0310 	and.w	r3, r3, #16
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d103      	bne.n	8012f28 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012f20:	4b68      	ldr	r3, [pc, #416]	@ (80130c4 <tcp_process+0x2ac>)
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2200      	movs	r2, #0
 8012f34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f001 fc2b 	bl	8014794 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	7d1b      	ldrb	r3, [r3, #20]
 8012f42:	3b02      	subs	r3, #2
 8012f44:	2b07      	cmp	r3, #7
 8012f46:	f200 8337 	bhi.w	80135b8 <tcp_process+0x7a0>
 8012f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f50 <tcp_process+0x138>)
 8012f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f50:	08012f71 	.word	0x08012f71
 8012f54:	080131a1 	.word	0x080131a1
 8012f58:	08013319 	.word	0x08013319
 8012f5c:	08013343 	.word	0x08013343
 8012f60:	08013467 	.word	0x08013467
 8012f64:	08013319 	.word	0x08013319
 8012f68:	080134f3 	.word	0x080134f3
 8012f6c:	08013583 	.word	0x08013583
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012f70:	4b4f      	ldr	r3, [pc, #316]	@ (80130b0 <tcp_process+0x298>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	f003 0310 	and.w	r3, r3, #16
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f000 80e4 	beq.w	8013146 <tcp_process+0x32e>
 8012f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80130b0 <tcp_process+0x298>)
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	f003 0302 	and.w	r3, r3, #2
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f000 80dd 	beq.w	8013146 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f90:	1c5a      	adds	r2, r3, #1
 8012f92:	4b48      	ldr	r3, [pc, #288]	@ (80130b4 <tcp_process+0x29c>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	f040 80d5 	bne.w	8013146 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012f9c:	4b46      	ldr	r3, [pc, #280]	@ (80130b8 <tcp_process+0x2a0>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	1c5a      	adds	r2, r3, #1
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8012fae:	4b41      	ldr	r3, [pc, #260]	@ (80130b4 <tcp_process+0x29c>)
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012fb6:	4b44      	ldr	r3, [pc, #272]	@ (80130c8 <tcp_process+0x2b0>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	89db      	ldrh	r3, [r3, #14]
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012fd0:	4b39      	ldr	r3, [pc, #228]	@ (80130b8 <tcp_process+0x2a0>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	1e5a      	subs	r2, r3, #1
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2204      	movs	r2, #4
 8012fde:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	3304      	adds	r3, #4
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f006 fe55 	bl	8019c98 <ip4_route>
 8012fee:	4601      	mov	r1, r0
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	3304      	adds	r3, #4
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f7ff f878 	bl	80120ec <tcp_eff_send_mss_netif>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	461a      	mov	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013008:	009a      	lsls	r2, r3, #2
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801300e:	005b      	lsls	r3, r3, #1
 8013010:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013014:	428b      	cmp	r3, r1
 8013016:	bf38      	it	cc
 8013018:	460b      	movcc	r3, r1
 801301a:	429a      	cmp	r2, r3
 801301c:	d204      	bcs.n	8013028 <tcp_process+0x210>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	b29b      	uxth	r3, r3
 8013026:	e00d      	b.n	8013044 <tcp_process+0x22c>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801302c:	005b      	lsls	r3, r3, #1
 801302e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013032:	4293      	cmp	r3, r2
 8013034:	d904      	bls.n	8013040 <tcp_process+0x228>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	b29b      	uxth	r3, r3
 801303e:	e001      	b.n	8013044 <tcp_process+0x22c>
 8013040:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013044:	687a      	ldr	r2, [r7, #4]
 8013046:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013050:	2b00      	cmp	r3, #0
 8013052:	d106      	bne.n	8013062 <tcp_process+0x24a>
 8013054:	4b13      	ldr	r3, [pc, #76]	@ (80130a4 <tcp_process+0x28c>)
 8013056:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801305a:	491c      	ldr	r1, [pc, #112]	@ (80130cc <tcp_process+0x2b4>)
 801305c:	4813      	ldr	r0, [pc, #76]	@ (80130ac <tcp_process+0x294>)
 801305e:	f009 f85f 	bl	801c120 <iprintf>
        --pcb->snd_queuelen;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013068:	3b01      	subs	r3, #1
 801306a:	b29a      	uxth	r2, r3
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013076:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d12a      	bne.n	80130d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013082:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d106      	bne.n	8013098 <tcp_process+0x280>
 801308a:	4b06      	ldr	r3, [pc, #24]	@ (80130a4 <tcp_process+0x28c>)
 801308c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8013090:	490f      	ldr	r1, [pc, #60]	@ (80130d0 <tcp_process+0x2b8>)
 8013092:	4806      	ldr	r0, [pc, #24]	@ (80130ac <tcp_process+0x294>)
 8013094:	f009 f844 	bl	801c120 <iprintf>
          pcb->unsent = rseg->next;
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	66da      	str	r2, [r3, #108]	@ 0x6c
 80130a0:	e01c      	b.n	80130dc <tcp_process+0x2c4>
 80130a2:	bf00      	nop
 80130a4:	080200c4 	.word	0x080200c4
 80130a8:	080202fc 	.word	0x080202fc
 80130ac:	08020110 	.word	0x08020110
 80130b0:	20013d58 	.word	0x20013d58
 80130b4:	20013d50 	.word	0x20013d50
 80130b8:	20013d4c 	.word	0x20013d4c
 80130bc:	08020318 	.word	0x08020318
 80130c0:	20013d59 	.word	0x20013d59
 80130c4:	20013d10 	.word	0x20013d10
 80130c8:	20013d3c 	.word	0x20013d3c
 80130cc:	08020338 	.word	0x08020338
 80130d0:	08020350 	.word	0x08020350
        } else {
          pcb->unacked = rseg->next;
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80130dc:	6978      	ldr	r0, [r7, #20]
 80130de:	f7fe fd0e 	bl	8011afe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d104      	bne.n	80130f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80130f2:	e006      	b.n	8013102 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013108:	2b00      	cmp	r3, #0
 801310a:	d00a      	beq.n	8013122 <tcp_process+0x30a>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	6910      	ldr	r0, [r2, #16]
 8013116:	2200      	movs	r2, #0
 8013118:	6879      	ldr	r1, [r7, #4]
 801311a:	4798      	blx	r3
 801311c:	4603      	mov	r3, r0
 801311e:	77bb      	strb	r3, [r7, #30]
 8013120:	e001      	b.n	8013126 <tcp_process+0x30e>
 8013122:	2300      	movs	r3, #0
 8013124:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8013126:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801312a:	f113 0f0d 	cmn.w	r3, #13
 801312e:	d102      	bne.n	8013136 <tcp_process+0x31e>
          return ERR_ABRT;
 8013130:	f06f 030c 	mvn.w	r3, #12
 8013134:	e250      	b.n	80135d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	8b5b      	ldrh	r3, [r3, #26]
 801313a:	f043 0302 	orr.w	r3, r3, #2
 801313e:	b29a      	uxth	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013144:	e23a      	b.n	80135bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013146:	4b98      	ldr	r3, [pc, #608]	@ (80133a8 <tcp_process+0x590>)
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	f003 0310 	and.w	r3, r3, #16
 801314e:	2b00      	cmp	r3, #0
 8013150:	f000 8234 	beq.w	80135bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013154:	4b95      	ldr	r3, [pc, #596]	@ (80133ac <tcp_process+0x594>)
 8013156:	6819      	ldr	r1, [r3, #0]
 8013158:	4b95      	ldr	r3, [pc, #596]	@ (80133b0 <tcp_process+0x598>)
 801315a:	881b      	ldrh	r3, [r3, #0]
 801315c:	461a      	mov	r2, r3
 801315e:	4b95      	ldr	r3, [pc, #596]	@ (80133b4 <tcp_process+0x59c>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013164:	4b94      	ldr	r3, [pc, #592]	@ (80133b8 <tcp_process+0x5a0>)
 8013166:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013168:	885b      	ldrh	r3, [r3, #2]
 801316a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801316c:	4a92      	ldr	r2, [pc, #584]	@ (80133b8 <tcp_process+0x5a0>)
 801316e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013170:	8812      	ldrh	r2, [r2, #0]
 8013172:	b292      	uxth	r2, r2
 8013174:	9202      	str	r2, [sp, #8]
 8013176:	9301      	str	r3, [sp, #4]
 8013178:	4b90      	ldr	r3, [pc, #576]	@ (80133bc <tcp_process+0x5a4>)
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	4b90      	ldr	r3, [pc, #576]	@ (80133c0 <tcp_process+0x5a8>)
 801317e:	4602      	mov	r2, r0
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f002 fcb7 	bl	8015af4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801318c:	2b05      	cmp	r3, #5
 801318e:	f200 8215 	bhi.w	80135bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f002 fa73 	bl	8015684 <tcp_rexmit_rto>
      break;
 801319e:	e20d      	b.n	80135bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80131a0:	4b81      	ldr	r3, [pc, #516]	@ (80133a8 <tcp_process+0x590>)
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	f003 0310 	and.w	r3, r3, #16
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	f000 80a1 	beq.w	80132f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131ae:	4b7f      	ldr	r3, [pc, #508]	@ (80133ac <tcp_process+0x594>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	3b01      	subs	r3, #1
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	db7e      	blt.n	80132bc <tcp_process+0x4a4>
 80131be:	4b7b      	ldr	r3, [pc, #492]	@ (80133ac <tcp_process+0x594>)
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131c6:	1ad3      	subs	r3, r2, r3
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	dc77      	bgt.n	80132bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2204      	movs	r2, #4
 80131d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d102      	bne.n	80131e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80131da:	23fa      	movs	r3, #250	@ 0xfa
 80131dc:	77bb      	strb	r3, [r7, #30]
 80131de:	e01d      	b.n	801321c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131e4:	699b      	ldr	r3, [r3, #24]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d106      	bne.n	80131f8 <tcp_process+0x3e0>
 80131ea:	4b76      	ldr	r3, [pc, #472]	@ (80133c4 <tcp_process+0x5ac>)
 80131ec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80131f0:	4975      	ldr	r1, [pc, #468]	@ (80133c8 <tcp_process+0x5b0>)
 80131f2:	4876      	ldr	r0, [pc, #472]	@ (80133cc <tcp_process+0x5b4>)
 80131f4:	f008 ff94 	bl	801c120 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131fc:	699b      	ldr	r3, [r3, #24]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d00a      	beq.n	8013218 <tcp_process+0x400>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013206:	699b      	ldr	r3, [r3, #24]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	6910      	ldr	r0, [r2, #16]
 801320c:	2200      	movs	r2, #0
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	4798      	blx	r3
 8013212:	4603      	mov	r3, r0
 8013214:	77bb      	strb	r3, [r7, #30]
 8013216:	e001      	b.n	801321c <tcp_process+0x404>
 8013218:	23f0      	movs	r3, #240	@ 0xf0
 801321a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 801321c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d00a      	beq.n	801323a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013224:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013228:	f113 0f0d 	cmn.w	r3, #13
 801322c:	d002      	beq.n	8013234 <tcp_process+0x41c>
              tcp_abort(pcb);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7fd ff74 	bl	801111c <tcp_abort>
            }
            return ERR_ABRT;
 8013234:	f06f 030c 	mvn.w	r3, #12
 8013238:	e1ce      	b.n	80135d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f000 fae0 	bl	8013800 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013240:	4b63      	ldr	r3, [pc, #396]	@ (80133d0 <tcp_process+0x5b8>)
 8013242:	881b      	ldrh	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d005      	beq.n	8013254 <tcp_process+0x43c>
            recv_acked--;
 8013248:	4b61      	ldr	r3, [pc, #388]	@ (80133d0 <tcp_process+0x5b8>)
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	3b01      	subs	r3, #1
 801324e:	b29a      	uxth	r2, r3
 8013250:	4b5f      	ldr	r3, [pc, #380]	@ (80133d0 <tcp_process+0x5b8>)
 8013252:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013258:	009a      	lsls	r2, r3, #2
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801325e:	005b      	lsls	r3, r3, #1
 8013260:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013264:	428b      	cmp	r3, r1
 8013266:	bf38      	it	cc
 8013268:	460b      	movcc	r3, r1
 801326a:	429a      	cmp	r2, r3
 801326c:	d204      	bcs.n	8013278 <tcp_process+0x460>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	b29b      	uxth	r3, r3
 8013276:	e00d      	b.n	8013294 <tcp_process+0x47c>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801327c:	005b      	lsls	r3, r3, #1
 801327e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013282:	4293      	cmp	r3, r2
 8013284:	d904      	bls.n	8013290 <tcp_process+0x478>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801328a:	005b      	lsls	r3, r3, #1
 801328c:	b29b      	uxth	r3, r3
 801328e:	e001      	b.n	8013294 <tcp_process+0x47c>
 8013290:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801329a:	4b4e      	ldr	r3, [pc, #312]	@ (80133d4 <tcp_process+0x5bc>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f003 0320 	and.w	r3, r3, #32
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d037      	beq.n	8013316 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	8b5b      	ldrh	r3, [r3, #26]
 80132aa:	f043 0302 	orr.w	r3, r3, #2
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2207      	movs	r2, #7
 80132b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80132ba:	e02c      	b.n	8013316 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132bc:	4b3b      	ldr	r3, [pc, #236]	@ (80133ac <tcp_process+0x594>)
 80132be:	6819      	ldr	r1, [r3, #0]
 80132c0:	4b3b      	ldr	r3, [pc, #236]	@ (80133b0 <tcp_process+0x598>)
 80132c2:	881b      	ldrh	r3, [r3, #0]
 80132c4:	461a      	mov	r2, r3
 80132c6:	4b3b      	ldr	r3, [pc, #236]	@ (80133b4 <tcp_process+0x59c>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132cc:	4b3a      	ldr	r3, [pc, #232]	@ (80133b8 <tcp_process+0x5a0>)
 80132ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132d0:	885b      	ldrh	r3, [r3, #2]
 80132d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132d4:	4a38      	ldr	r2, [pc, #224]	@ (80133b8 <tcp_process+0x5a0>)
 80132d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132d8:	8812      	ldrh	r2, [r2, #0]
 80132da:	b292      	uxth	r2, r2
 80132dc:	9202      	str	r2, [sp, #8]
 80132de:	9301      	str	r3, [sp, #4]
 80132e0:	4b36      	ldr	r3, [pc, #216]	@ (80133bc <tcp_process+0x5a4>)
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	4b36      	ldr	r3, [pc, #216]	@ (80133c0 <tcp_process+0x5a8>)
 80132e6:	4602      	mov	r2, r0
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f002 fc03 	bl	8015af4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80132ee:	e167      	b.n	80135c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80132f0:	4b2d      	ldr	r3, [pc, #180]	@ (80133a8 <tcp_process+0x590>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	f003 0302 	and.w	r3, r3, #2
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f000 8161 	beq.w	80135c0 <tcp_process+0x7a8>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013302:	1e5a      	subs	r2, r3, #1
 8013304:	4b2b      	ldr	r3, [pc, #172]	@ (80133b4 <tcp_process+0x59c>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	429a      	cmp	r2, r3
 801330a:	f040 8159 	bne.w	80135c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f002 f9da 	bl	80156c8 <tcp_rexmit>
      break;
 8013314:	e154      	b.n	80135c0 <tcp_process+0x7a8>
 8013316:	e153      	b.n	80135c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 fa71 	bl	8013800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801331e:	4b2d      	ldr	r3, [pc, #180]	@ (80133d4 <tcp_process+0x5bc>)
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	f003 0320 	and.w	r3, r3, #32
 8013326:	2b00      	cmp	r3, #0
 8013328:	f000 814c 	beq.w	80135c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	8b5b      	ldrh	r3, [r3, #26]
 8013330:	f043 0302 	orr.w	r3, r3, #2
 8013334:	b29a      	uxth	r2, r3
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2207      	movs	r2, #7
 801333e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013340:	e140      	b.n	80135c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f000 fa5c 	bl	8013800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013348:	4b22      	ldr	r3, [pc, #136]	@ (80133d4 <tcp_process+0x5bc>)
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	f003 0320 	and.w	r3, r3, #32
 8013350:	2b00      	cmp	r3, #0
 8013352:	d071      	beq.n	8013438 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013354:	4b14      	ldr	r3, [pc, #80]	@ (80133a8 <tcp_process+0x590>)
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 0310 	and.w	r3, r3, #16
 801335c:	2b00      	cmp	r3, #0
 801335e:	d060      	beq.n	8013422 <tcp_process+0x60a>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013364:	4b11      	ldr	r3, [pc, #68]	@ (80133ac <tcp_process+0x594>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	429a      	cmp	r2, r3
 801336a:	d15a      	bne.n	8013422 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013370:	2b00      	cmp	r3, #0
 8013372:	d156      	bne.n	8013422 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	8b5b      	ldrh	r3, [r3, #26]
 8013378:	f043 0302 	orr.w	r3, r3, #2
 801337c:	b29a      	uxth	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7fe fda8 	bl	8011ed8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013388:	4b13      	ldr	r3, [pc, #76]	@ (80133d8 <tcp_process+0x5c0>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	429a      	cmp	r2, r3
 8013390:	d105      	bne.n	801339e <tcp_process+0x586>
 8013392:	4b11      	ldr	r3, [pc, #68]	@ (80133d8 <tcp_process+0x5c0>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68db      	ldr	r3, [r3, #12]
 8013398:	4a0f      	ldr	r2, [pc, #60]	@ (80133d8 <tcp_process+0x5c0>)
 801339a:	6013      	str	r3, [r2, #0]
 801339c:	e02e      	b.n	80133fc <tcp_process+0x5e4>
 801339e:	4b0e      	ldr	r3, [pc, #56]	@ (80133d8 <tcp_process+0x5c0>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	613b      	str	r3, [r7, #16]
 80133a4:	e027      	b.n	80133f6 <tcp_process+0x5de>
 80133a6:	bf00      	nop
 80133a8:	20013d58 	.word	0x20013d58
 80133ac:	20013d50 	.word	0x20013d50
 80133b0:	20013d56 	.word	0x20013d56
 80133b4:	20013d4c 	.word	0x20013d4c
 80133b8:	20013d3c 	.word	0x20013d3c
 80133bc:	2000a2ac 	.word	0x2000a2ac
 80133c0:	2000a2b0 	.word	0x2000a2b0
 80133c4:	080200c4 	.word	0x080200c4
 80133c8:	08020364 	.word	0x08020364
 80133cc:	08020110 	.word	0x08020110
 80133d0:	20013d54 	.word	0x20013d54
 80133d4:	20013d59 	.word	0x20013d59
 80133d8:	20013d1c 	.word	0x20013d1c
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d104      	bne.n	80133f0 <tcp_process+0x5d8>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	68da      	ldr	r2, [r3, #12]
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	60da      	str	r2, [r3, #12]
 80133ee:	e005      	b.n	80133fc <tcp_process+0x5e4>
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	613b      	str	r3, [r7, #16]
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1ef      	bne.n	80133dc <tcp_process+0x5c4>
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2200      	movs	r2, #0
 8013400:	60da      	str	r2, [r3, #12]
 8013402:	4b77      	ldr	r3, [pc, #476]	@ (80135e0 <tcp_process+0x7c8>)
 8013404:	2201      	movs	r2, #1
 8013406:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	220a      	movs	r2, #10
 801340c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801340e:	4b75      	ldr	r3, [pc, #468]	@ (80135e4 <tcp_process+0x7cc>)
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	60da      	str	r2, [r3, #12]
 8013416:	4a73      	ldr	r2, [pc, #460]	@ (80135e4 <tcp_process+0x7cc>)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6013      	str	r3, [r2, #0]
 801341c:	f002 fd2c 	bl	8015e78 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013420:	e0d2      	b.n	80135c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	8b5b      	ldrh	r3, [r3, #26]
 8013426:	f043 0302 	orr.w	r3, r3, #2
 801342a:	b29a      	uxth	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2208      	movs	r2, #8
 8013434:	751a      	strb	r2, [r3, #20]
      break;
 8013436:	e0c7      	b.n	80135c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013438:	4b6b      	ldr	r3, [pc, #428]	@ (80135e8 <tcp_process+0x7d0>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	f003 0310 	and.w	r3, r3, #16
 8013440:	2b00      	cmp	r3, #0
 8013442:	f000 80c1 	beq.w	80135c8 <tcp_process+0x7b0>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801344a:	4b68      	ldr	r3, [pc, #416]	@ (80135ec <tcp_process+0x7d4>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	429a      	cmp	r2, r3
 8013450:	f040 80ba 	bne.w	80135c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013458:	2b00      	cmp	r3, #0
 801345a:	f040 80b5 	bne.w	80135c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2206      	movs	r2, #6
 8013462:	751a      	strb	r2, [r3, #20]
      break;
 8013464:	e0b0      	b.n	80135c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 f9ca 	bl	8013800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801346c:	4b60      	ldr	r3, [pc, #384]	@ (80135f0 <tcp_process+0x7d8>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	f003 0320 	and.w	r3, r3, #32
 8013474:	2b00      	cmp	r3, #0
 8013476:	f000 80a9 	beq.w	80135cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	8b5b      	ldrh	r3, [r3, #26]
 801347e:	f043 0302 	orr.w	r3, r3, #2
 8013482:	b29a      	uxth	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f7fe fd25 	bl	8011ed8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801348e:	4b59      	ldr	r3, [pc, #356]	@ (80135f4 <tcp_process+0x7dc>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	429a      	cmp	r2, r3
 8013496:	d105      	bne.n	80134a4 <tcp_process+0x68c>
 8013498:	4b56      	ldr	r3, [pc, #344]	@ (80135f4 <tcp_process+0x7dc>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	4a55      	ldr	r2, [pc, #340]	@ (80135f4 <tcp_process+0x7dc>)
 80134a0:	6013      	str	r3, [r2, #0]
 80134a2:	e013      	b.n	80134cc <tcp_process+0x6b4>
 80134a4:	4b53      	ldr	r3, [pc, #332]	@ (80135f4 <tcp_process+0x7dc>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	60fb      	str	r3, [r7, #12]
 80134aa:	e00c      	b.n	80134c6 <tcp_process+0x6ae>
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d104      	bne.n	80134c0 <tcp_process+0x6a8>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	68da      	ldr	r2, [r3, #12]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	60da      	str	r2, [r3, #12]
 80134be:	e005      	b.n	80134cc <tcp_process+0x6b4>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	60fb      	str	r3, [r7, #12]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d1ef      	bne.n	80134ac <tcp_process+0x694>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2200      	movs	r2, #0
 80134d0:	60da      	str	r2, [r3, #12]
 80134d2:	4b43      	ldr	r3, [pc, #268]	@ (80135e0 <tcp_process+0x7c8>)
 80134d4:	2201      	movs	r2, #1
 80134d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	220a      	movs	r2, #10
 80134dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134de:	4b41      	ldr	r3, [pc, #260]	@ (80135e4 <tcp_process+0x7cc>)
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	60da      	str	r2, [r3, #12]
 80134e6:	4a3f      	ldr	r2, [pc, #252]	@ (80135e4 <tcp_process+0x7cc>)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6013      	str	r3, [r2, #0]
 80134ec:	f002 fcc4 	bl	8015e78 <tcp_timer_needed>
      }
      break;
 80134f0:	e06c      	b.n	80135cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 f984 	bl	8013800 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80134f8:	4b3b      	ldr	r3, [pc, #236]	@ (80135e8 <tcp_process+0x7d0>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	f003 0310 	and.w	r3, r3, #16
 8013500:	2b00      	cmp	r3, #0
 8013502:	d065      	beq.n	80135d0 <tcp_process+0x7b8>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013508:	4b38      	ldr	r3, [pc, #224]	@ (80135ec <tcp_process+0x7d4>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	429a      	cmp	r2, r3
 801350e:	d15f      	bne.n	80135d0 <tcp_process+0x7b8>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013514:	2b00      	cmp	r3, #0
 8013516:	d15b      	bne.n	80135d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f7fe fcdd 	bl	8011ed8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801351e:	4b35      	ldr	r3, [pc, #212]	@ (80135f4 <tcp_process+0x7dc>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	429a      	cmp	r2, r3
 8013526:	d105      	bne.n	8013534 <tcp_process+0x71c>
 8013528:	4b32      	ldr	r3, [pc, #200]	@ (80135f4 <tcp_process+0x7dc>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	68db      	ldr	r3, [r3, #12]
 801352e:	4a31      	ldr	r2, [pc, #196]	@ (80135f4 <tcp_process+0x7dc>)
 8013530:	6013      	str	r3, [r2, #0]
 8013532:	e013      	b.n	801355c <tcp_process+0x744>
 8013534:	4b2f      	ldr	r3, [pc, #188]	@ (80135f4 <tcp_process+0x7dc>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	61bb      	str	r3, [r7, #24]
 801353a:	e00c      	b.n	8013556 <tcp_process+0x73e>
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	68db      	ldr	r3, [r3, #12]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	429a      	cmp	r2, r3
 8013544:	d104      	bne.n	8013550 <tcp_process+0x738>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	68da      	ldr	r2, [r3, #12]
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	60da      	str	r2, [r3, #12]
 801354e:	e005      	b.n	801355c <tcp_process+0x744>
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	61bb      	str	r3, [r7, #24]
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d1ef      	bne.n	801353c <tcp_process+0x724>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2200      	movs	r2, #0
 8013560:	60da      	str	r2, [r3, #12]
 8013562:	4b1f      	ldr	r3, [pc, #124]	@ (80135e0 <tcp_process+0x7c8>)
 8013564:	2201      	movs	r2, #1
 8013566:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	220a      	movs	r2, #10
 801356c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801356e:	4b1d      	ldr	r3, [pc, #116]	@ (80135e4 <tcp_process+0x7cc>)
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	60da      	str	r2, [r3, #12]
 8013576:	4a1b      	ldr	r2, [pc, #108]	@ (80135e4 <tcp_process+0x7cc>)
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6013      	str	r3, [r2, #0]
 801357c:	f002 fc7c 	bl	8015e78 <tcp_timer_needed>
      }
      break;
 8013580:	e026      	b.n	80135d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f000 f93c 	bl	8013800 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013588:	4b17      	ldr	r3, [pc, #92]	@ (80135e8 <tcp_process+0x7d0>)
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	f003 0310 	and.w	r3, r3, #16
 8013590:	2b00      	cmp	r3, #0
 8013592:	d01f      	beq.n	80135d4 <tcp_process+0x7bc>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013598:	4b14      	ldr	r3, [pc, #80]	@ (80135ec <tcp_process+0x7d4>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	429a      	cmp	r2, r3
 801359e:	d119      	bne.n	80135d4 <tcp_process+0x7bc>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d115      	bne.n	80135d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80135a8:	4b11      	ldr	r3, [pc, #68]	@ (80135f0 <tcp_process+0x7d8>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	f043 0310 	orr.w	r3, r3, #16
 80135b0:	b2da      	uxtb	r2, r3
 80135b2:	4b0f      	ldr	r3, [pc, #60]	@ (80135f0 <tcp_process+0x7d8>)
 80135b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80135b6:	e00d      	b.n	80135d4 <tcp_process+0x7bc>
    default:
      break;
 80135b8:	bf00      	nop
 80135ba:	e00c      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135bc:	bf00      	nop
 80135be:	e00a      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135c0:	bf00      	nop
 80135c2:	e008      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135c4:	bf00      	nop
 80135c6:	e006      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135c8:	bf00      	nop
 80135ca:	e004      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135cc:	bf00      	nop
 80135ce:	e002      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135d0:	bf00      	nop
 80135d2:	e000      	b.n	80135d6 <tcp_process+0x7be>
      break;
 80135d4:	bf00      	nop
  }
  return ERR_OK;
 80135d6:	2300      	movs	r3, #0
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3724      	adds	r7, #36	@ 0x24
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd90      	pop	{r4, r7, pc}
 80135e0:	20013d24 	.word	0x20013d24
 80135e4:	20013d20 	.word	0x20013d20
 80135e8:	20013d58 	.word	0x20013d58
 80135ec:	20013d50 	.word	0x20013d50
 80135f0:	20013d59 	.word	0x20013d59
 80135f4:	20013d1c 	.word	0x20013d1c

080135f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d106      	bne.n	8013616 <tcp_oos_insert_segment+0x1e>
 8013608:	4b3b      	ldr	r3, [pc, #236]	@ (80136f8 <tcp_oos_insert_segment+0x100>)
 801360a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801360e:	493b      	ldr	r1, [pc, #236]	@ (80136fc <tcp_oos_insert_segment+0x104>)
 8013610:	483b      	ldr	r0, [pc, #236]	@ (8013700 <tcp_oos_insert_segment+0x108>)
 8013612:	f008 fd85 	bl	801c120 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	691b      	ldr	r3, [r3, #16]
 801361a:	899b      	ldrh	r3, [r3, #12]
 801361c:	b29b      	uxth	r3, r3
 801361e:	4618      	mov	r0, r3
 8013620:	f7fb fa1e 	bl	800ea60 <lwip_htons>
 8013624:	4603      	mov	r3, r0
 8013626:	b2db      	uxtb	r3, r3
 8013628:	f003 0301 	and.w	r3, r3, #1
 801362c:	2b00      	cmp	r3, #0
 801362e:	d028      	beq.n	8013682 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013630:	6838      	ldr	r0, [r7, #0]
 8013632:	f7fe fa4f 	bl	8011ad4 <tcp_segs_free>
    next = NULL;
 8013636:	2300      	movs	r3, #0
 8013638:	603b      	str	r3, [r7, #0]
 801363a:	e056      	b.n	80136ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	691b      	ldr	r3, [r3, #16]
 8013640:	899b      	ldrh	r3, [r3, #12]
 8013642:	b29b      	uxth	r3, r3
 8013644:	4618      	mov	r0, r3
 8013646:	f7fb fa0b 	bl	800ea60 <lwip_htons>
 801364a:	4603      	mov	r3, r0
 801364c:	b2db      	uxtb	r3, r3
 801364e:	f003 0301 	and.w	r3, r3, #1
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00d      	beq.n	8013672 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	691b      	ldr	r3, [r3, #16]
 801365a:	899b      	ldrh	r3, [r3, #12]
 801365c:	b29c      	uxth	r4, r3
 801365e:	2001      	movs	r0, #1
 8013660:	f7fb f9fe 	bl	800ea60 <lwip_htons>
 8013664:	4603      	mov	r3, r0
 8013666:	461a      	mov	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	4322      	orrs	r2, r4
 801366e:	b292      	uxth	r2, r2
 8013670:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	f7fe fa3e 	bl	8011afe <tcp_seg_free>
    while (next &&
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00e      	beq.n	80136a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	891b      	ldrh	r3, [r3, #8]
 801368c:	461a      	mov	r2, r3
 801368e:	4b1d      	ldr	r3, [pc, #116]	@ (8013704 <tcp_oos_insert_segment+0x10c>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	441a      	add	r2, r3
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	691b      	ldr	r3, [r3, #16]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	6839      	ldr	r1, [r7, #0]
 801369c:	8909      	ldrh	r1, [r1, #8]
 801369e:	440b      	add	r3, r1
 80136a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	daca      	bge.n	801363c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d01e      	beq.n	80136ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	891b      	ldrh	r3, [r3, #8]
 80136b0:	461a      	mov	r2, r3
 80136b2:	4b14      	ldr	r3, [pc, #80]	@ (8013704 <tcp_oos_insert_segment+0x10c>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	441a      	add	r2, r3
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	691b      	ldr	r3, [r3, #16]
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	1ad3      	subs	r3, r2, r3
    if (next &&
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	dd12      	ble.n	80136ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	691b      	ldr	r3, [r3, #16]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	4b0d      	ldr	r3, [pc, #52]	@ (8013704 <tcp_oos_insert_segment+0x10c>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	1ad3      	subs	r3, r2, r3
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	685a      	ldr	r2, [r3, #4]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	891b      	ldrh	r3, [r3, #8]
 80136e2:	4619      	mov	r1, r3
 80136e4:	4610      	mov	r0, r2
 80136e6:	f7fc fd57 	bl	8010198 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	601a      	str	r2, [r3, #0]
}
 80136f0:	bf00      	nop
 80136f2:	3714      	adds	r7, #20
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd90      	pop	{r4, r7, pc}
 80136f8:	080200c4 	.word	0x080200c4
 80136fc:	08020384 	.word	0x08020384
 8013700:	08020110 	.word	0x08020110
 8013704:	20013d4c 	.word	0x20013d4c

08013708 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013708:	b5b0      	push	{r4, r5, r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
 8013714:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013716:	e03e      	b.n	8013796 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	4618      	mov	r0, r3
 8013728:	f7fc ff4a 	bl	80105c0 <pbuf_clen>
 801372c:	4603      	mov	r3, r0
 801372e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013736:	8a7a      	ldrh	r2, [r7, #18]
 8013738:	429a      	cmp	r2, r3
 801373a:	d906      	bls.n	801374a <tcp_free_acked_segments+0x42>
 801373c:	4b2a      	ldr	r3, [pc, #168]	@ (80137e8 <tcp_free_acked_segments+0xe0>)
 801373e:	f240 4257 	movw	r2, #1111	@ 0x457
 8013742:	492a      	ldr	r1, [pc, #168]	@ (80137ec <tcp_free_acked_segments+0xe4>)
 8013744:	482a      	ldr	r0, [pc, #168]	@ (80137f0 <tcp_free_acked_segments+0xe8>)
 8013746:	f008 fceb 	bl	801c120 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013750:	8a7b      	ldrh	r3, [r7, #18]
 8013752:	1ad3      	subs	r3, r2, r3
 8013754:	b29a      	uxth	r2, r3
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	891a      	ldrh	r2, [r3, #8]
 8013760:	4b24      	ldr	r3, [pc, #144]	@ (80137f4 <tcp_free_acked_segments+0xec>)
 8013762:	881b      	ldrh	r3, [r3, #0]
 8013764:	4413      	add	r3, r2
 8013766:	b29a      	uxth	r2, r3
 8013768:	4b22      	ldr	r3, [pc, #136]	@ (80137f4 <tcp_free_acked_segments+0xec>)
 801376a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801376c:	6978      	ldr	r0, [r7, #20]
 801376e:	f7fe f9c6 	bl	8011afe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00c      	beq.n	8013796 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d109      	bne.n	8013796 <tcp_free_acked_segments+0x8e>
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d106      	bne.n	8013796 <tcp_free_acked_segments+0x8e>
 8013788:	4b17      	ldr	r3, [pc, #92]	@ (80137e8 <tcp_free_acked_segments+0xe0>)
 801378a:	f240 4261 	movw	r2, #1121	@ 0x461
 801378e:	491a      	ldr	r1, [pc, #104]	@ (80137f8 <tcp_free_acked_segments+0xf0>)
 8013790:	4817      	ldr	r0, [pc, #92]	@ (80137f0 <tcp_free_acked_segments+0xe8>)
 8013792:	f008 fcc5 	bl	801c120 <iprintf>
  while (seg_list != NULL &&
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d020      	beq.n	80137de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	691b      	ldr	r3, [r3, #16]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fb f971 	bl	800ea8a <lwip_htonl>
 80137a8:	4604      	mov	r4, r0
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	891b      	ldrh	r3, [r3, #8]
 80137ae:	461d      	mov	r5, r3
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	691b      	ldr	r3, [r3, #16]
 80137b4:	899b      	ldrh	r3, [r3, #12]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fb f951 	bl	800ea60 <lwip_htons>
 80137be:	4603      	mov	r3, r0
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	f003 0303 	and.w	r3, r3, #3
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <tcp_free_acked_segments+0xc6>
 80137ca:	2301      	movs	r3, #1
 80137cc:	e000      	b.n	80137d0 <tcp_free_acked_segments+0xc8>
 80137ce:	2300      	movs	r3, #0
 80137d0:	442b      	add	r3, r5
 80137d2:	18e2      	adds	r2, r4, r3
 80137d4:	4b09      	ldr	r3, [pc, #36]	@ (80137fc <tcp_free_acked_segments+0xf4>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80137da:	2b00      	cmp	r3, #0
 80137dc:	dd9c      	ble.n	8013718 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80137de:	68bb      	ldr	r3, [r7, #8]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3718      	adds	r7, #24
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bdb0      	pop	{r4, r5, r7, pc}
 80137e8:	080200c4 	.word	0x080200c4
 80137ec:	080203ac 	.word	0x080203ac
 80137f0:	08020110 	.word	0x08020110
 80137f4:	20013d54 	.word	0x20013d54
 80137f8:	080203d4 	.word	0x080203d4
 80137fc:	20013d50 	.word	0x20013d50

08013800 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013800:	b5b0      	push	{r4, r5, r7, lr}
 8013802:	b094      	sub	sp, #80	@ 0x50
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013808:	2300      	movs	r3, #0
 801380a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_receive+0x20>
 8013812:	4b91      	ldr	r3, [pc, #580]	@ (8013a58 <tcp_receive+0x258>)
 8013814:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013818:	4990      	ldr	r1, [pc, #576]	@ (8013a5c <tcp_receive+0x25c>)
 801381a:	4891      	ldr	r0, [pc, #580]	@ (8013a60 <tcp_receive+0x260>)
 801381c:	f008 fc80 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	7d1b      	ldrb	r3, [r3, #20]
 8013824:	2b03      	cmp	r3, #3
 8013826:	d806      	bhi.n	8013836 <tcp_receive+0x36>
 8013828:	4b8b      	ldr	r3, [pc, #556]	@ (8013a58 <tcp_receive+0x258>)
 801382a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801382e:	498d      	ldr	r1, [pc, #564]	@ (8013a64 <tcp_receive+0x264>)
 8013830:	488b      	ldr	r0, [pc, #556]	@ (8013a60 <tcp_receive+0x260>)
 8013832:	f008 fc75 	bl	801c120 <iprintf>

  if (flags & TCP_ACK) {
 8013836:	4b8c      	ldr	r3, [pc, #560]	@ (8013a68 <tcp_receive+0x268>)
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	f003 0310 	and.w	r3, r3, #16
 801383e:	2b00      	cmp	r3, #0
 8013840:	f000 8264 	beq.w	8013d0c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801384a:	461a      	mov	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013850:	4413      	add	r3, r2
 8013852:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013858:	4b84      	ldr	r3, [pc, #528]	@ (8013a6c <tcp_receive+0x26c>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	1ad3      	subs	r3, r2, r3
 801385e:	2b00      	cmp	r3, #0
 8013860:	db1b      	blt.n	801389a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013866:	4b81      	ldr	r3, [pc, #516]	@ (8013a6c <tcp_receive+0x26c>)
 8013868:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801386a:	429a      	cmp	r2, r3
 801386c:	d106      	bne.n	801387c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013872:	4b7f      	ldr	r3, [pc, #508]	@ (8013a70 <tcp_receive+0x270>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	1ad3      	subs	r3, r2, r3
 8013878:	2b00      	cmp	r3, #0
 801387a:	db0e      	blt.n	801389a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013880:	4b7b      	ldr	r3, [pc, #492]	@ (8013a70 <tcp_receive+0x270>)
 8013882:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013884:	429a      	cmp	r2, r3
 8013886:	d125      	bne.n	80138d4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013888:	4b7a      	ldr	r3, [pc, #488]	@ (8013a74 <tcp_receive+0x274>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	89db      	ldrh	r3, [r3, #14]
 801388e:	b29a      	uxth	r2, r3
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013896:	429a      	cmp	r2, r3
 8013898:	d91c      	bls.n	80138d4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801389a:	4b76      	ldr	r3, [pc, #472]	@ (8013a74 <tcp_receive+0x274>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	89db      	ldrh	r3, [r3, #14]
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d205      	bcs.n	80138c4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80138c4:	4b69      	ldr	r3, [pc, #420]	@ (8013a6c <tcp_receive+0x26c>)
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80138cc:	4b68      	ldr	r3, [pc, #416]	@ (8013a70 <tcp_receive+0x270>)
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80138d4:	4b66      	ldr	r3, [pc, #408]	@ (8013a70 <tcp_receive+0x270>)
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	2b00      	cmp	r3, #0
 80138e0:	dc58      	bgt.n	8013994 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80138e2:	4b65      	ldr	r3, [pc, #404]	@ (8013a78 <tcp_receive+0x278>)
 80138e4:	881b      	ldrh	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d14b      	bne.n	8013982 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80138f4:	4413      	add	r3, r2
 80138f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d142      	bne.n	8013982 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013902:	2b00      	cmp	r3, #0
 8013904:	db3d      	blt.n	8013982 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801390a:	4b59      	ldr	r3, [pc, #356]	@ (8013a70 <tcp_receive+0x270>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	429a      	cmp	r2, r3
 8013910:	d137      	bne.n	8013982 <tcp_receive+0x182>
              found_dupack = 1;
 8013912:	2301      	movs	r3, #1
 8013914:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801391c:	2bff      	cmp	r3, #255	@ 0xff
 801391e:	d007      	beq.n	8013930 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013926:	3301      	adds	r3, #1
 8013928:	b2da      	uxtb	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013936:	2b03      	cmp	r3, #3
 8013938:	d91b      	bls.n	8013972 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013944:	4413      	add	r3, r2
 8013946:	b29a      	uxth	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801394e:	429a      	cmp	r2, r3
 8013950:	d30a      	bcc.n	8013968 <tcp_receive+0x168>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801395c:	4413      	add	r3, r2
 801395e:	b29a      	uxth	r2, r3
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013966:	e004      	b.n	8013972 <tcp_receive+0x172>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801396e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013978:	2b02      	cmp	r3, #2
 801397a:	d902      	bls.n	8013982 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f001 ff0f 	bl	80157a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013984:	2b00      	cmp	r3, #0
 8013986:	f040 8161 	bne.w	8013c4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2200      	movs	r2, #0
 801398e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013992:	e15b      	b.n	8013c4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013994:	4b36      	ldr	r3, [pc, #216]	@ (8013a70 <tcp_receive+0x270>)
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801399c:	1ad3      	subs	r3, r2, r3
 801399e:	3b01      	subs	r3, #1
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f2c0 814e 	blt.w	8013c42 <tcp_receive+0x442>
 80139a6:	4b32      	ldr	r3, [pc, #200]	@ (8013a70 <tcp_receive+0x270>)
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f300 8146 	bgt.w	8013c42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	8b5b      	ldrh	r3, [r3, #26]
 80139ba:	f003 0304 	and.w	r3, r3, #4
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d010      	beq.n	80139e4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	8b5b      	ldrh	r3, [r3, #26]
 80139c6:	f023 0304 	bic.w	r3, r3, #4
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80139f2:	10db      	asrs	r3, r3, #3
 80139f4:	b21b      	sxth	r3, r3
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	4413      	add	r3, r2
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	b21a      	sxth	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013a0c:	4b18      	ldr	r3, [pc, #96]	@ (8013a70 <tcp_receive+0x270>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	1ad3      	subs	r3, r2, r3
 8013a1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013a24:	4b12      	ldr	r3, [pc, #72]	@ (8013a70 <tcp_receive+0x270>)
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	7d1b      	ldrb	r3, [r3, #20]
 8013a30:	2b03      	cmp	r3, #3
 8013a32:	f240 8097 	bls.w	8013b64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d245      	bcs.n	8013ad2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	8b5b      	ldrh	r3, [r3, #26]
 8013a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d014      	beq.n	8013a7c <tcp_receive+0x27c>
 8013a52:	2301      	movs	r3, #1
 8013a54:	e013      	b.n	8013a7e <tcp_receive+0x27e>
 8013a56:	bf00      	nop
 8013a58:	080200c4 	.word	0x080200c4
 8013a5c:	080203f4 	.word	0x080203f4
 8013a60:	08020110 	.word	0x08020110
 8013a64:	08020410 	.word	0x08020410
 8013a68:	20013d58 	.word	0x20013d58
 8013a6c:	20013d4c 	.word	0x20013d4c
 8013a70:	20013d50 	.word	0x20013d50
 8013a74:	20013d3c 	.word	0x20013d3c
 8013a78:	20013d56 	.word	0x20013d56
 8013a7c:	2302      	movs	r3, #2
 8013a7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013a82:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a8c:	fb12 f303 	smulbb	r3, r2, r3
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a94:	4293      	cmp	r3, r2
 8013a96:	bf28      	it	cs
 8013a98:	4613      	movcs	r3, r2
 8013a9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013aa2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013aa4:	4413      	add	r3, r2
 8013aa6:	b29a      	uxth	r2, r3
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d309      	bcc.n	8013ac6 <tcp_receive+0x2c6>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013ab8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013aba:	4413      	add	r3, r2
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013ac4:	e04e      	b.n	8013b64 <tcp_receive+0x364>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013acc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013ad0:	e048      	b.n	8013b64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ad8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ada:	4413      	add	r3, r2
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d309      	bcc.n	8013afc <tcp_receive+0x2fc>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013aee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013af0:	4413      	add	r3, r2
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013afa:	e004      	b.n	8013b06 <tcp_receive+0x306>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d326      	bcc.n	8013b64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013b22:	1ad3      	subs	r3, r2, r3
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b36:	4413      	add	r3, r2
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d30a      	bcc.n	8013b5a <tcp_receive+0x35a>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b4e:	4413      	add	r3, r2
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013b58:	e004      	b.n	8013b64 <tcp_receive+0x364>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b6c:	4a98      	ldr	r2, [pc, #608]	@ (8013dd0 <tcp_receive+0x5d0>)
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7ff fdca 	bl	8013708 <tcp_free_acked_segments>
 8013b74:	4602      	mov	r2, r0
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b82:	4a94      	ldr	r2, [pc, #592]	@ (8013dd4 <tcp_receive+0x5d4>)
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7ff fdbf 	bl	8013708 <tcp_free_acked_segments>
 8013b8a:	4602      	mov	r2, r0
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d104      	bne.n	8013ba2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b9e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013ba0:	e002      	b.n	8013ba8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2200      	movs	r2, #0
 8013bac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d103      	bne.n	8013bbe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013bc4:	4b84      	ldr	r3, [pc, #528]	@ (8013dd8 <tcp_receive+0x5d8>)
 8013bc6:	881b      	ldrh	r3, [r3, #0]
 8013bc8:	4413      	add	r3, r2
 8013bca:	b29a      	uxth	r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	8b5b      	ldrh	r3, [r3, #26]
 8013bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d035      	beq.n	8013c4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d118      	bne.n	8013c18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d00c      	beq.n	8013c08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bf6:	691b      	ldr	r3, [r3, #16]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fa ff45 	bl	800ea8a <lwip_htonl>
 8013c00:	4603      	mov	r3, r0
 8013c02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	dc20      	bgt.n	8013c4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	8b5b      	ldrh	r3, [r3, #26]
 8013c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c16:	e018      	b.n	8013c4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c20:	691b      	ldr	r3, [r3, #16]
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fa ff30 	bl	800ea8a <lwip_htonl>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	1ae3      	subs	r3, r4, r3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	dc0b      	bgt.n	8013c4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	8b5b      	ldrh	r3, [r3, #26]
 8013c36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c40:	e003      	b.n	8013c4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f001 ffa8 	bl	8015b98 <tcp_send_empty_ack>
 8013c48:	e000      	b.n	8013c4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d05b      	beq.n	8013d0c <tcp_receive+0x50c>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c58:	4b60      	ldr	r3, [pc, #384]	@ (8013ddc <tcp_receive+0x5dc>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	da54      	bge.n	8013d0c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013c62:	4b5f      	ldr	r3, [pc, #380]	@ (8013de0 <tcp_receive+0x5e0>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013c76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013c80:	10db      	asrs	r3, r3, #3
 8013c82:	b21b      	sxth	r3, r3
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	1ad3      	subs	r3, r2, r3
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013c9a:	4413      	add	r3, r2
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	b21a      	sxth	r2, r3
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013ca4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	da05      	bge.n	8013cb8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013cb0:	425b      	negs	r3, r3
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013cb8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013cc2:	109b      	asrs	r3, r3, #2
 8013cc4:	b21b      	sxth	r3, r3
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013cdc:	4413      	add	r3, r2
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	b21a      	sxth	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013cec:	10db      	asrs	r3, r3, #3
 8013cee:	b21b      	sxth	r3, r3
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	4413      	add	r3, r2
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	b21a      	sxth	r2, r3
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013d0c:	4b35      	ldr	r3, [pc, #212]	@ (8013de4 <tcp_receive+0x5e4>)
 8013d0e:	881b      	ldrh	r3, [r3, #0]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f000 84df 	beq.w	80146d4 <tcp_receive+0xed4>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	7d1b      	ldrb	r3, [r3, #20]
 8013d1a:	2b06      	cmp	r3, #6
 8013d1c:	f200 84da 	bhi.w	80146d4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d24:	4b30      	ldr	r3, [pc, #192]	@ (8013de8 <tcp_receive+0x5e8>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	1ad3      	subs	r3, r2, r3
 8013d2a:	3b01      	subs	r3, #1
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f2c0 808f 	blt.w	8013e50 <tcp_receive+0x650>
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d36:	4b2b      	ldr	r3, [pc, #172]	@ (8013de4 <tcp_receive+0x5e4>)
 8013d38:	881b      	ldrh	r3, [r3, #0]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8013de8 <tcp_receive+0x5e8>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	440b      	add	r3, r1
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	3301      	adds	r3, #1
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f300 8082 	bgt.w	8013e50 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013d4c:	4b27      	ldr	r3, [pc, #156]	@ (8013dec <tcp_receive+0x5ec>)
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d56:	4b24      	ldr	r3, [pc, #144]	@ (8013de8 <tcp_receive+0x5e8>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	1ad3      	subs	r3, r2, r3
 8013d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013d5e:	4b23      	ldr	r3, [pc, #140]	@ (8013dec <tcp_receive+0x5ec>)
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d106      	bne.n	8013d74 <tcp_receive+0x574>
 8013d66:	4b22      	ldr	r3, [pc, #136]	@ (8013df0 <tcp_receive+0x5f0>)
 8013d68:	f240 5294 	movw	r2, #1428	@ 0x594
 8013d6c:	4921      	ldr	r1, [pc, #132]	@ (8013df4 <tcp_receive+0x5f4>)
 8013d6e:	4822      	ldr	r0, [pc, #136]	@ (8013df8 <tcp_receive+0x5f8>)
 8013d70:	f008 f9d6 	bl	801c120 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d906      	bls.n	8013d8c <tcp_receive+0x58c>
 8013d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8013df0 <tcp_receive+0x5f0>)
 8013d80:	f240 5295 	movw	r2, #1429	@ 0x595
 8013d84:	491d      	ldr	r1, [pc, #116]	@ (8013dfc <tcp_receive+0x5fc>)
 8013d86:	481c      	ldr	r0, [pc, #112]	@ (8013df8 <tcp_receive+0x5f8>)
 8013d88:	f008 f9ca 	bl	801c120 <iprintf>
      off = (u16_t)off32;
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013d92:	4b16      	ldr	r3, [pc, #88]	@ (8013dec <tcp_receive+0x5ec>)
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	891b      	ldrh	r3, [r3, #8]
 8013d98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d906      	bls.n	8013dae <tcp_receive+0x5ae>
 8013da0:	4b13      	ldr	r3, [pc, #76]	@ (8013df0 <tcp_receive+0x5f0>)
 8013da2:	f240 5297 	movw	r2, #1431	@ 0x597
 8013da6:	4916      	ldr	r1, [pc, #88]	@ (8013e00 <tcp_receive+0x600>)
 8013da8:	4813      	ldr	r0, [pc, #76]	@ (8013df8 <tcp_receive+0x5f8>)
 8013daa:	f008 f9b9 	bl	801c120 <iprintf>
      inseg.len -= off;
 8013dae:	4b0f      	ldr	r3, [pc, #60]	@ (8013dec <tcp_receive+0x5ec>)
 8013db0:	891a      	ldrh	r2, [r3, #8]
 8013db2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013db6:	1ad3      	subs	r3, r2, r3
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	4b0c      	ldr	r3, [pc, #48]	@ (8013dec <tcp_receive+0x5ec>)
 8013dbc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8013dec <tcp_receive+0x5ec>)
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	891a      	ldrh	r2, [r3, #8]
 8013dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8013dcc:	e02a      	b.n	8013e24 <tcp_receive+0x624>
 8013dce:	bf00      	nop
 8013dd0:	0802042c 	.word	0x0802042c
 8013dd4:	08020434 	.word	0x08020434
 8013dd8:	20013d54 	.word	0x20013d54
 8013ddc:	20013d50 	.word	0x20013d50
 8013de0:	20013d10 	.word	0x20013d10
 8013de4:	20013d56 	.word	0x20013d56
 8013de8:	20013d4c 	.word	0x20013d4c
 8013dec:	20013d28 	.word	0x20013d28
 8013df0:	080200c4 	.word	0x080200c4
 8013df4:	0802043c 	.word	0x0802043c
 8013df8:	08020110 	.word	0x08020110
 8013dfc:	0802044c 	.word	0x0802044c
 8013e00:	0802045c 	.word	0x0802045c
        off -= p->len;
 8013e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e06:	895b      	ldrh	r3, [r3, #10]
 8013e08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e0c:	1ad3      	subs	r3, r2, r3
 8013e0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013e16:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e26:	895b      	ldrh	r3, [r3, #10]
 8013e28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d8e9      	bhi.n	8013e04 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013e34:	4619      	mov	r1, r3
 8013e36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013e38:	f7fc faae 	bl	8010398 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e40:	4a90      	ldr	r2, [pc, #576]	@ (8014084 <tcp_receive+0x884>)
 8013e42:	6013      	str	r3, [r2, #0]
 8013e44:	4b90      	ldr	r3, [pc, #576]	@ (8014088 <tcp_receive+0x888>)
 8013e46:	691b      	ldr	r3, [r3, #16]
 8013e48:	4a8e      	ldr	r2, [pc, #568]	@ (8014084 <tcp_receive+0x884>)
 8013e4a:	6812      	ldr	r2, [r2, #0]
 8013e4c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013e4e:	e00d      	b.n	8013e6c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013e50:	4b8c      	ldr	r3, [pc, #560]	@ (8014084 <tcp_receive+0x884>)
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	da06      	bge.n	8013e6c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8b5b      	ldrh	r3, [r3, #26]
 8013e62:	f043 0302 	orr.w	r3, r3, #2
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e6c:	4b85      	ldr	r3, [pc, #532]	@ (8014084 <tcp_receive+0x884>)
 8013e6e:	681a      	ldr	r2, [r3, #0]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e74:	1ad3      	subs	r3, r2, r3
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f2c0 8427 	blt.w	80146ca <tcp_receive+0xeca>
 8013e7c:	4b81      	ldr	r3, [pc, #516]	@ (8014084 <tcp_receive+0x884>)
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e84:	6879      	ldr	r1, [r7, #4]
 8013e86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013e88:	440b      	add	r3, r1
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f300 841b 	bgt.w	80146ca <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e98:	4b7a      	ldr	r3, [pc, #488]	@ (8014084 <tcp_receive+0x884>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	f040 8298 	bne.w	80143d2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013ea2:	4b79      	ldr	r3, [pc, #484]	@ (8014088 <tcp_receive+0x888>)
 8013ea4:	891c      	ldrh	r4, [r3, #8]
 8013ea6:	4b78      	ldr	r3, [pc, #480]	@ (8014088 <tcp_receive+0x888>)
 8013ea8:	691b      	ldr	r3, [r3, #16]
 8013eaa:	899b      	ldrh	r3, [r3, #12]
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fa fdd6 	bl	800ea60 <lwip_htons>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	f003 0303 	and.w	r3, r3, #3
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d001      	beq.n	8013ec4 <tcp_receive+0x6c4>
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	e000      	b.n	8013ec6 <tcp_receive+0x6c6>
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	4423      	add	r3, r4
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	4b70      	ldr	r3, [pc, #448]	@ (801408c <tcp_receive+0x88c>)
 8013ecc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013ed2:	4b6e      	ldr	r3, [pc, #440]	@ (801408c <tcp_receive+0x88c>)
 8013ed4:	881b      	ldrh	r3, [r3, #0]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d274      	bcs.n	8013fc4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013eda:	4b6b      	ldr	r3, [pc, #428]	@ (8014088 <tcp_receive+0x888>)
 8013edc:	691b      	ldr	r3, [r3, #16]
 8013ede:	899b      	ldrh	r3, [r3, #12]
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7fa fdbc 	bl	800ea60 <lwip_htons>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	f003 0301 	and.w	r3, r3, #1
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d01e      	beq.n	8013f32 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013ef4:	4b64      	ldr	r3, [pc, #400]	@ (8014088 <tcp_receive+0x888>)
 8013ef6:	691b      	ldr	r3, [r3, #16]
 8013ef8:	899b      	ldrh	r3, [r3, #12]
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	b21b      	sxth	r3, r3
 8013efe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013f02:	b21c      	sxth	r4, r3
 8013f04:	4b60      	ldr	r3, [pc, #384]	@ (8014088 <tcp_receive+0x888>)
 8013f06:	691b      	ldr	r3, [r3, #16]
 8013f08:	899b      	ldrh	r3, [r3, #12]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fa fda7 	bl	800ea60 <lwip_htons>
 8013f12:	4603      	mov	r3, r0
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7fa fd9f 	bl	800ea60 <lwip_htons>
 8013f22:	4603      	mov	r3, r0
 8013f24:	b21b      	sxth	r3, r3
 8013f26:	4323      	orrs	r3, r4
 8013f28:	b21a      	sxth	r2, r3
 8013f2a:	4b57      	ldr	r3, [pc, #348]	@ (8014088 <tcp_receive+0x888>)
 8013f2c:	691b      	ldr	r3, [r3, #16]
 8013f2e:	b292      	uxth	r2, r2
 8013f30:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013f36:	4b54      	ldr	r3, [pc, #336]	@ (8014088 <tcp_receive+0x888>)
 8013f38:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013f3a:	4b53      	ldr	r3, [pc, #332]	@ (8014088 <tcp_receive+0x888>)
 8013f3c:	691b      	ldr	r3, [r3, #16]
 8013f3e:	899b      	ldrh	r3, [r3, #12]
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fa fd8c 	bl	800ea60 <lwip_htons>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	f003 0302 	and.w	r3, r3, #2
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d005      	beq.n	8013f60 <tcp_receive+0x760>
            inseg.len -= 1;
 8013f54:	4b4c      	ldr	r3, [pc, #304]	@ (8014088 <tcp_receive+0x888>)
 8013f56:	891b      	ldrh	r3, [r3, #8]
 8013f58:	3b01      	subs	r3, #1
 8013f5a:	b29a      	uxth	r2, r3
 8013f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8014088 <tcp_receive+0x888>)
 8013f5e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013f60:	4b49      	ldr	r3, [pc, #292]	@ (8014088 <tcp_receive+0x888>)
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	4a48      	ldr	r2, [pc, #288]	@ (8014088 <tcp_receive+0x888>)
 8013f66:	8912      	ldrh	r2, [r2, #8]
 8013f68:	4611      	mov	r1, r2
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fc f914 	bl	8010198 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013f70:	4b45      	ldr	r3, [pc, #276]	@ (8014088 <tcp_receive+0x888>)
 8013f72:	891c      	ldrh	r4, [r3, #8]
 8013f74:	4b44      	ldr	r3, [pc, #272]	@ (8014088 <tcp_receive+0x888>)
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	899b      	ldrh	r3, [r3, #12]
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fa fd6f 	bl	800ea60 <lwip_htons>
 8013f82:	4603      	mov	r3, r0
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	f003 0303 	and.w	r3, r3, #3
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d001      	beq.n	8013f92 <tcp_receive+0x792>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	e000      	b.n	8013f94 <tcp_receive+0x794>
 8013f92:	2300      	movs	r3, #0
 8013f94:	4423      	add	r3, r4
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	4b3c      	ldr	r3, [pc, #240]	@ (801408c <tcp_receive+0x88c>)
 8013f9a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013f9c:	4b3b      	ldr	r3, [pc, #236]	@ (801408c <tcp_receive+0x88c>)
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	4b38      	ldr	r3, [pc, #224]	@ (8014084 <tcp_receive+0x884>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	441a      	add	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013fb0:	440b      	add	r3, r1
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d006      	beq.n	8013fc4 <tcp_receive+0x7c4>
 8013fb6:	4b36      	ldr	r3, [pc, #216]	@ (8014090 <tcp_receive+0x890>)
 8013fb8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8013fbc:	4935      	ldr	r1, [pc, #212]	@ (8014094 <tcp_receive+0x894>)
 8013fbe:	4836      	ldr	r0, [pc, #216]	@ (8014098 <tcp_receive+0x898>)
 8013fc0:	f008 f8ae 	bl	801c120 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f000 80e6 	beq.w	801419a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013fce:	4b2e      	ldr	r3, [pc, #184]	@ (8014088 <tcp_receive+0x888>)
 8013fd0:	691b      	ldr	r3, [r3, #16]
 8013fd2:	899b      	ldrh	r3, [r3, #12]
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fa fd42 	bl	800ea60 <lwip_htons>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	f003 0301 	and.w	r3, r3, #1
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d010      	beq.n	801400a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013fe8:	e00a      	b.n	8014000 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fee:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f7fd fd7f 	bl	8011afe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014004:	2b00      	cmp	r3, #0
 8014006:	d1f0      	bne.n	8013fea <tcp_receive+0x7ea>
 8014008:	e0c7      	b.n	801419a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014010:	e051      	b.n	80140b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014014:	691b      	ldr	r3, [r3, #16]
 8014016:	899b      	ldrh	r3, [r3, #12]
 8014018:	b29b      	uxth	r3, r3
 801401a:	4618      	mov	r0, r3
 801401c:	f7fa fd20 	bl	800ea60 <lwip_htons>
 8014020:	4603      	mov	r3, r0
 8014022:	b2db      	uxtb	r3, r3
 8014024:	f003 0301 	and.w	r3, r3, #1
 8014028:	2b00      	cmp	r3, #0
 801402a:	d03c      	beq.n	80140a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801402c:	4b16      	ldr	r3, [pc, #88]	@ (8014088 <tcp_receive+0x888>)
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	899b      	ldrh	r3, [r3, #12]
 8014032:	b29b      	uxth	r3, r3
 8014034:	4618      	mov	r0, r3
 8014036:	f7fa fd13 	bl	800ea60 <lwip_htons>
 801403a:	4603      	mov	r3, r0
 801403c:	b2db      	uxtb	r3, r3
 801403e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014042:	2b00      	cmp	r3, #0
 8014044:	d12f      	bne.n	80140a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014046:	4b10      	ldr	r3, [pc, #64]	@ (8014088 <tcp_receive+0x888>)
 8014048:	691b      	ldr	r3, [r3, #16]
 801404a:	899b      	ldrh	r3, [r3, #12]
 801404c:	b29c      	uxth	r4, r3
 801404e:	2001      	movs	r0, #1
 8014050:	f7fa fd06 	bl	800ea60 <lwip_htons>
 8014054:	4603      	mov	r3, r0
 8014056:	461a      	mov	r2, r3
 8014058:	4b0b      	ldr	r3, [pc, #44]	@ (8014088 <tcp_receive+0x888>)
 801405a:	691b      	ldr	r3, [r3, #16]
 801405c:	4322      	orrs	r2, r4
 801405e:	b292      	uxth	r2, r2
 8014060:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014062:	4b09      	ldr	r3, [pc, #36]	@ (8014088 <tcp_receive+0x888>)
 8014064:	891c      	ldrh	r4, [r3, #8]
 8014066:	4b08      	ldr	r3, [pc, #32]	@ (8014088 <tcp_receive+0x888>)
 8014068:	691b      	ldr	r3, [r3, #16]
 801406a:	899b      	ldrh	r3, [r3, #12]
 801406c:	b29b      	uxth	r3, r3
 801406e:	4618      	mov	r0, r3
 8014070:	f7fa fcf6 	bl	800ea60 <lwip_htons>
 8014074:	4603      	mov	r3, r0
 8014076:	b2db      	uxtb	r3, r3
 8014078:	f003 0303 	and.w	r3, r3, #3
 801407c:	2b00      	cmp	r3, #0
 801407e:	d00d      	beq.n	801409c <tcp_receive+0x89c>
 8014080:	2301      	movs	r3, #1
 8014082:	e00c      	b.n	801409e <tcp_receive+0x89e>
 8014084:	20013d4c 	.word	0x20013d4c
 8014088:	20013d28 	.word	0x20013d28
 801408c:	20013d56 	.word	0x20013d56
 8014090:	080200c4 	.word	0x080200c4
 8014094:	0802046c 	.word	0x0802046c
 8014098:	08020110 	.word	0x08020110
 801409c:	2300      	movs	r3, #0
 801409e:	4423      	add	r3, r4
 80140a0:	b29a      	uxth	r2, r3
 80140a2:	4b98      	ldr	r3, [pc, #608]	@ (8014304 <tcp_receive+0xb04>)
 80140a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80140a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80140aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80140b0:	6938      	ldr	r0, [r7, #16]
 80140b2:	f7fd fd24 	bl	8011afe <tcp_seg_free>
            while (next &&
 80140b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00e      	beq.n	80140da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80140bc:	4b91      	ldr	r3, [pc, #580]	@ (8014304 <tcp_receive+0xb04>)
 80140be:	881b      	ldrh	r3, [r3, #0]
 80140c0:	461a      	mov	r2, r3
 80140c2:	4b91      	ldr	r3, [pc, #580]	@ (8014308 <tcp_receive+0xb08>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	441a      	add	r2, r3
 80140c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140ca:	691b      	ldr	r3, [r3, #16]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80140d0:	8909      	ldrh	r1, [r1, #8]
 80140d2:	440b      	add	r3, r1
 80140d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	da9b      	bge.n	8014012 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80140da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d059      	beq.n	8014194 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80140e0:	4b88      	ldr	r3, [pc, #544]	@ (8014304 <tcp_receive+0xb04>)
 80140e2:	881b      	ldrh	r3, [r3, #0]
 80140e4:	461a      	mov	r2, r3
 80140e6:	4b88      	ldr	r3, [pc, #544]	@ (8014308 <tcp_receive+0xb08>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	441a      	add	r2, r3
 80140ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140ee:	691b      	ldr	r3, [r3, #16]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	dd4d      	ble.n	8014194 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80140f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140fa:	691b      	ldr	r3, [r3, #16]
 80140fc:	685b      	ldr	r3, [r3, #4]
 80140fe:	b29a      	uxth	r2, r3
 8014100:	4b81      	ldr	r3, [pc, #516]	@ (8014308 <tcp_receive+0xb08>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	b29b      	uxth	r3, r3
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	b29a      	uxth	r2, r3
 801410a:	4b80      	ldr	r3, [pc, #512]	@ (801430c <tcp_receive+0xb0c>)
 801410c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801410e:	4b7f      	ldr	r3, [pc, #508]	@ (801430c <tcp_receive+0xb0c>)
 8014110:	691b      	ldr	r3, [r3, #16]
 8014112:	899b      	ldrh	r3, [r3, #12]
 8014114:	b29b      	uxth	r3, r3
 8014116:	4618      	mov	r0, r3
 8014118:	f7fa fca2 	bl	800ea60 <lwip_htons>
 801411c:	4603      	mov	r3, r0
 801411e:	b2db      	uxtb	r3, r3
 8014120:	f003 0302 	and.w	r3, r3, #2
 8014124:	2b00      	cmp	r3, #0
 8014126:	d005      	beq.n	8014134 <tcp_receive+0x934>
                inseg.len -= 1;
 8014128:	4b78      	ldr	r3, [pc, #480]	@ (801430c <tcp_receive+0xb0c>)
 801412a:	891b      	ldrh	r3, [r3, #8]
 801412c:	3b01      	subs	r3, #1
 801412e:	b29a      	uxth	r2, r3
 8014130:	4b76      	ldr	r3, [pc, #472]	@ (801430c <tcp_receive+0xb0c>)
 8014132:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014134:	4b75      	ldr	r3, [pc, #468]	@ (801430c <tcp_receive+0xb0c>)
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	4a74      	ldr	r2, [pc, #464]	@ (801430c <tcp_receive+0xb0c>)
 801413a:	8912      	ldrh	r2, [r2, #8]
 801413c:	4611      	mov	r1, r2
 801413e:	4618      	mov	r0, r3
 8014140:	f7fc f82a 	bl	8010198 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014144:	4b71      	ldr	r3, [pc, #452]	@ (801430c <tcp_receive+0xb0c>)
 8014146:	891c      	ldrh	r4, [r3, #8]
 8014148:	4b70      	ldr	r3, [pc, #448]	@ (801430c <tcp_receive+0xb0c>)
 801414a:	691b      	ldr	r3, [r3, #16]
 801414c:	899b      	ldrh	r3, [r3, #12]
 801414e:	b29b      	uxth	r3, r3
 8014150:	4618      	mov	r0, r3
 8014152:	f7fa fc85 	bl	800ea60 <lwip_htons>
 8014156:	4603      	mov	r3, r0
 8014158:	b2db      	uxtb	r3, r3
 801415a:	f003 0303 	and.w	r3, r3, #3
 801415e:	2b00      	cmp	r3, #0
 8014160:	d001      	beq.n	8014166 <tcp_receive+0x966>
 8014162:	2301      	movs	r3, #1
 8014164:	e000      	b.n	8014168 <tcp_receive+0x968>
 8014166:	2300      	movs	r3, #0
 8014168:	4423      	add	r3, r4
 801416a:	b29a      	uxth	r2, r3
 801416c:	4b65      	ldr	r3, [pc, #404]	@ (8014304 <tcp_receive+0xb04>)
 801416e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014170:	4b64      	ldr	r3, [pc, #400]	@ (8014304 <tcp_receive+0xb04>)
 8014172:	881b      	ldrh	r3, [r3, #0]
 8014174:	461a      	mov	r2, r3
 8014176:	4b64      	ldr	r3, [pc, #400]	@ (8014308 <tcp_receive+0xb08>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	441a      	add	r2, r3
 801417c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801417e:	691b      	ldr	r3, [r3, #16]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	429a      	cmp	r2, r3
 8014184:	d006      	beq.n	8014194 <tcp_receive+0x994>
 8014186:	4b62      	ldr	r3, [pc, #392]	@ (8014310 <tcp_receive+0xb10>)
 8014188:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801418c:	4961      	ldr	r1, [pc, #388]	@ (8014314 <tcp_receive+0xb14>)
 801418e:	4862      	ldr	r0, [pc, #392]	@ (8014318 <tcp_receive+0xb18>)
 8014190:	f007 ffc6 	bl	801c120 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014198:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801419a:	4b5a      	ldr	r3, [pc, #360]	@ (8014304 <tcp_receive+0xb04>)
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	461a      	mov	r2, r3
 80141a0:	4b59      	ldr	r3, [pc, #356]	@ (8014308 <tcp_receive+0xb08>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	441a      	add	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80141ae:	4b55      	ldr	r3, [pc, #340]	@ (8014304 <tcp_receive+0xb04>)
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d206      	bcs.n	80141c4 <tcp_receive+0x9c4>
 80141b6:	4b56      	ldr	r3, [pc, #344]	@ (8014310 <tcp_receive+0xb10>)
 80141b8:	f240 6207 	movw	r2, #1543	@ 0x607
 80141bc:	4957      	ldr	r1, [pc, #348]	@ (801431c <tcp_receive+0xb1c>)
 80141be:	4856      	ldr	r0, [pc, #344]	@ (8014318 <tcp_receive+0xb18>)
 80141c0:	f007 ffae 	bl	801c120 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80141c8:	4b4e      	ldr	r3, [pc, #312]	@ (8014304 <tcp_receive+0xb04>)
 80141ca:	881b      	ldrh	r3, [r3, #0]
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7fc ffad 	bl	8011134 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80141da:	4b4c      	ldr	r3, [pc, #304]	@ (801430c <tcp_receive+0xb0c>)
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	891b      	ldrh	r3, [r3, #8]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d006      	beq.n	80141f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80141e4:	4b49      	ldr	r3, [pc, #292]	@ (801430c <tcp_receive+0xb0c>)
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	4a4d      	ldr	r2, [pc, #308]	@ (8014320 <tcp_receive+0xb20>)
 80141ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80141ec:	4b47      	ldr	r3, [pc, #284]	@ (801430c <tcp_receive+0xb0c>)
 80141ee:	2200      	movs	r2, #0
 80141f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80141f2:	4b46      	ldr	r3, [pc, #280]	@ (801430c <tcp_receive+0xb0c>)
 80141f4:	691b      	ldr	r3, [r3, #16]
 80141f6:	899b      	ldrh	r3, [r3, #12]
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fa fc30 	bl	800ea60 <lwip_htons>
 8014200:	4603      	mov	r3, r0
 8014202:	b2db      	uxtb	r3, r3
 8014204:	f003 0301 	and.w	r3, r3, #1
 8014208:	2b00      	cmp	r3, #0
 801420a:	f000 80b8 	beq.w	801437e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801420e:	4b45      	ldr	r3, [pc, #276]	@ (8014324 <tcp_receive+0xb24>)
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	f043 0320 	orr.w	r3, r3, #32
 8014216:	b2da      	uxtb	r2, r3
 8014218:	4b42      	ldr	r3, [pc, #264]	@ (8014324 <tcp_receive+0xb24>)
 801421a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801421c:	e0af      	b.n	801437e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014222:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014228:	691b      	ldr	r3, [r3, #16]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	4a36      	ldr	r2, [pc, #216]	@ (8014308 <tcp_receive+0xb08>)
 801422e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	891b      	ldrh	r3, [r3, #8]
 8014234:	461c      	mov	r4, r3
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	691b      	ldr	r3, [r3, #16]
 801423a:	899b      	ldrh	r3, [r3, #12]
 801423c:	b29b      	uxth	r3, r3
 801423e:	4618      	mov	r0, r3
 8014240:	f7fa fc0e 	bl	800ea60 <lwip_htons>
 8014244:	4603      	mov	r3, r0
 8014246:	b2db      	uxtb	r3, r3
 8014248:	f003 0303 	and.w	r3, r3, #3
 801424c:	2b00      	cmp	r3, #0
 801424e:	d001      	beq.n	8014254 <tcp_receive+0xa54>
 8014250:	2301      	movs	r3, #1
 8014252:	e000      	b.n	8014256 <tcp_receive+0xa56>
 8014254:	2300      	movs	r3, #0
 8014256:	191a      	adds	r2, r3, r4
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801425c:	441a      	add	r2, r3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014266:	461c      	mov	r4, r3
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	891b      	ldrh	r3, [r3, #8]
 801426c:	461d      	mov	r5, r3
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	691b      	ldr	r3, [r3, #16]
 8014272:	899b      	ldrh	r3, [r3, #12]
 8014274:	b29b      	uxth	r3, r3
 8014276:	4618      	mov	r0, r3
 8014278:	f7fa fbf2 	bl	800ea60 <lwip_htons>
 801427c:	4603      	mov	r3, r0
 801427e:	b2db      	uxtb	r3, r3
 8014280:	f003 0303 	and.w	r3, r3, #3
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <tcp_receive+0xa8c>
 8014288:	2301      	movs	r3, #1
 801428a:	e000      	b.n	801428e <tcp_receive+0xa8e>
 801428c:	2300      	movs	r3, #0
 801428e:	442b      	add	r3, r5
 8014290:	429c      	cmp	r4, r3
 8014292:	d206      	bcs.n	80142a2 <tcp_receive+0xaa2>
 8014294:	4b1e      	ldr	r3, [pc, #120]	@ (8014310 <tcp_receive+0xb10>)
 8014296:	f240 622b 	movw	r2, #1579	@ 0x62b
 801429a:	4923      	ldr	r1, [pc, #140]	@ (8014328 <tcp_receive+0xb28>)
 801429c:	481e      	ldr	r0, [pc, #120]	@ (8014318 <tcp_receive+0xb18>)
 801429e:	f007 ff3f 	bl	801c120 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	891b      	ldrh	r3, [r3, #8]
 80142a6:	461c      	mov	r4, r3
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	691b      	ldr	r3, [r3, #16]
 80142ac:	899b      	ldrh	r3, [r3, #12]
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fa fbd5 	bl	800ea60 <lwip_htons>
 80142b6:	4603      	mov	r3, r0
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	f003 0303 	and.w	r3, r3, #3
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d001      	beq.n	80142c6 <tcp_receive+0xac6>
 80142c2:	2301      	movs	r3, #1
 80142c4:	e000      	b.n	80142c8 <tcp_receive+0xac8>
 80142c6:	2300      	movs	r3, #0
 80142c8:	1919      	adds	r1, r3, r4
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80142ce:	b28b      	uxth	r3, r1
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7fc ff2b 	bl	8011134 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	891b      	ldrh	r3, [r3, #8]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d028      	beq.n	801433a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80142e8:	4b0d      	ldr	r3, [pc, #52]	@ (8014320 <tcp_receive+0xb20>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d01d      	beq.n	801432c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80142f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014320 <tcp_receive+0xb20>)
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	4619      	mov	r1, r3
 80142fa:	4610      	mov	r0, r2
 80142fc:	f7fc f9a0 	bl	8010640 <pbuf_cat>
 8014300:	e018      	b.n	8014334 <tcp_receive+0xb34>
 8014302:	bf00      	nop
 8014304:	20013d56 	.word	0x20013d56
 8014308:	20013d4c 	.word	0x20013d4c
 801430c:	20013d28 	.word	0x20013d28
 8014310:	080200c4 	.word	0x080200c4
 8014314:	080204a4 	.word	0x080204a4
 8014318:	08020110 	.word	0x08020110
 801431c:	080204e0 	.word	0x080204e0
 8014320:	20013d5c 	.word	0x20013d5c
 8014324:	20013d59 	.word	0x20013d59
 8014328:	08020500 	.word	0x08020500
            } else {
              recv_data = cseg->p;
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	4a70      	ldr	r2, [pc, #448]	@ (80144f4 <tcp_receive+0xcf4>)
 8014332:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	2200      	movs	r2, #0
 8014338:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	691b      	ldr	r3, [r3, #16]
 801433e:	899b      	ldrh	r3, [r3, #12]
 8014340:	b29b      	uxth	r3, r3
 8014342:	4618      	mov	r0, r3
 8014344:	f7fa fb8c 	bl	800ea60 <lwip_htons>
 8014348:	4603      	mov	r3, r0
 801434a:	b2db      	uxtb	r3, r3
 801434c:	f003 0301 	and.w	r3, r3, #1
 8014350:	2b00      	cmp	r3, #0
 8014352:	d00d      	beq.n	8014370 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014354:	4b68      	ldr	r3, [pc, #416]	@ (80144f8 <tcp_receive+0xcf8>)
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	f043 0320 	orr.w	r3, r3, #32
 801435c:	b2da      	uxtb	r2, r3
 801435e:	4b66      	ldr	r3, [pc, #408]	@ (80144f8 <tcp_receive+0xcf8>)
 8014360:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	7d1b      	ldrb	r3, [r3, #20]
 8014366:	2b04      	cmp	r3, #4
 8014368:	d102      	bne.n	8014370 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2207      	movs	r2, #7
 801436e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014378:	68b8      	ldr	r0, [r7, #8]
 801437a:	f7fd fbc0 	bl	8011afe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014382:	2b00      	cmp	r3, #0
 8014384:	d008      	beq.n	8014398 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	685a      	ldr	r2, [r3, #4]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8014392:	429a      	cmp	r2, r3
 8014394:	f43f af43 	beq.w	801421e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	8b5b      	ldrh	r3, [r3, #26]
 801439c:	f003 0301 	and.w	r3, r3, #1
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d00e      	beq.n	80143c2 <tcp_receive+0xbc2>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	8b5b      	ldrh	r3, [r3, #26]
 80143a8:	f023 0301 	bic.w	r3, r3, #1
 80143ac:	b29a      	uxth	r2, r3
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	835a      	strh	r2, [r3, #26]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	8b5b      	ldrh	r3, [r3, #26]
 80143b6:	f043 0302 	orr.w	r3, r3, #2
 80143ba:	b29a      	uxth	r2, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80143c0:	e187      	b.n	80146d2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	8b5b      	ldrh	r3, [r3, #26]
 80143c6:	f043 0301 	orr.w	r3, r3, #1
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80143d0:	e17f      	b.n	80146d2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d106      	bne.n	80143e8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80143da:	4848      	ldr	r0, [pc, #288]	@ (80144fc <tcp_receive+0xcfc>)
 80143dc:	f7fd fba8 	bl	8011b30 <tcp_seg_copy>
 80143e0:	4602      	mov	r2, r0
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80143e6:	e16c      	b.n	80146c2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80143e8:	2300      	movs	r3, #0
 80143ea:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80143f2:	e156      	b.n	80146a2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80143f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f6:	691b      	ldr	r3, [r3, #16]
 80143f8:	685a      	ldr	r2, [r3, #4]
 80143fa:	4b41      	ldr	r3, [pc, #260]	@ (8014500 <tcp_receive+0xd00>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d11d      	bne.n	801443e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014402:	4b3e      	ldr	r3, [pc, #248]	@ (80144fc <tcp_receive+0xcfc>)
 8014404:	891a      	ldrh	r2, [r3, #8]
 8014406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014408:	891b      	ldrh	r3, [r3, #8]
 801440a:	429a      	cmp	r2, r3
 801440c:	f240 814e 	bls.w	80146ac <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014410:	483a      	ldr	r0, [pc, #232]	@ (80144fc <tcp_receive+0xcfc>)
 8014412:	f7fd fb8d 	bl	8011b30 <tcp_seg_copy>
 8014416:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	2b00      	cmp	r3, #0
 801441c:	f000 8148 	beq.w	80146b0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8014420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014422:	2b00      	cmp	r3, #0
 8014424:	d003      	beq.n	801442e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014428:	697a      	ldr	r2, [r7, #20]
 801442a:	601a      	str	r2, [r3, #0]
 801442c:	e002      	b.n	8014434 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	697a      	ldr	r2, [r7, #20]
 8014432:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014434:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014436:	6978      	ldr	r0, [r7, #20]
 8014438:	f7ff f8de 	bl	80135f8 <tcp_oos_insert_segment>
                }
                break;
 801443c:	e138      	b.n	80146b0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014440:	2b00      	cmp	r3, #0
 8014442:	d117      	bne.n	8014474 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014444:	4b2e      	ldr	r3, [pc, #184]	@ (8014500 <tcp_receive+0xd00>)
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801444a:	691b      	ldr	r3, [r3, #16]
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	1ad3      	subs	r3, r2, r3
 8014450:	2b00      	cmp	r3, #0
 8014452:	da57      	bge.n	8014504 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014454:	4829      	ldr	r0, [pc, #164]	@ (80144fc <tcp_receive+0xcfc>)
 8014456:	f7fd fb6b 	bl	8011b30 <tcp_seg_copy>
 801445a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	2b00      	cmp	r3, #0
 8014460:	f000 8128 	beq.w	80146b4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	69ba      	ldr	r2, [r7, #24]
 8014468:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801446a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801446c:	69b8      	ldr	r0, [r7, #24]
 801446e:	f7ff f8c3 	bl	80135f8 <tcp_oos_insert_segment>
                  }
                  break;
 8014472:	e11f      	b.n	80146b4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014474:	4b22      	ldr	r3, [pc, #136]	@ (8014500 <tcp_receive+0xd00>)
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801447a:	691b      	ldr	r3, [r3, #16]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	1ad3      	subs	r3, r2, r3
 8014480:	3b01      	subs	r3, #1
 8014482:	2b00      	cmp	r3, #0
 8014484:	db3e      	blt.n	8014504 <tcp_receive+0xd04>
 8014486:	4b1e      	ldr	r3, [pc, #120]	@ (8014500 <tcp_receive+0xd00>)
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801448c:	691b      	ldr	r3, [r3, #16]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	3301      	adds	r3, #1
 8014494:	2b00      	cmp	r3, #0
 8014496:	dc35      	bgt.n	8014504 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014498:	4818      	ldr	r0, [pc, #96]	@ (80144fc <tcp_receive+0xcfc>)
 801449a:	f7fd fb49 	bl	8011b30 <tcp_seg_copy>
 801449e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80144a0:	69fb      	ldr	r3, [r7, #28]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	f000 8108 	beq.w	80146b8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80144a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144aa:	691b      	ldr	r3, [r3, #16]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144b0:	8912      	ldrh	r2, [r2, #8]
 80144b2:	441a      	add	r2, r3
 80144b4:	4b12      	ldr	r3, [pc, #72]	@ (8014500 <tcp_receive+0xd00>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	1ad3      	subs	r3, r2, r3
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	dd12      	ble.n	80144e4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80144be:	4b10      	ldr	r3, [pc, #64]	@ (8014500 <tcp_receive+0xd00>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144c6:	691b      	ldr	r3, [r3, #16]
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80144d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144d6:	685a      	ldr	r2, [r3, #4]
 80144d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144da:	891b      	ldrh	r3, [r3, #8]
 80144dc:	4619      	mov	r1, r3
 80144de:	4610      	mov	r0, r2
 80144e0:	f7fb fe5a 	bl	8010198 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80144e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144e6:	69fa      	ldr	r2, [r7, #28]
 80144e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80144ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80144ec:	69f8      	ldr	r0, [r7, #28]
 80144ee:	f7ff f883 	bl	80135f8 <tcp_oos_insert_segment>
                  }
                  break;
 80144f2:	e0e1      	b.n	80146b8 <tcp_receive+0xeb8>
 80144f4:	20013d5c 	.word	0x20013d5c
 80144f8:	20013d59 	.word	0x20013d59
 80144fc:	20013d28 	.word	0x20013d28
 8014500:	20013d4c 	.word	0x20013d4c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014506:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	f040 80c5 	bne.w	801469c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014512:	4b7f      	ldr	r3, [pc, #508]	@ (8014710 <tcp_receive+0xf10>)
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014518:	691b      	ldr	r3, [r3, #16]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801451e:	2b00      	cmp	r3, #0
 8014520:	f340 80bc 	ble.w	801469c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014526:	691b      	ldr	r3, [r3, #16]
 8014528:	899b      	ldrh	r3, [r3, #12]
 801452a:	b29b      	uxth	r3, r3
 801452c:	4618      	mov	r0, r3
 801452e:	f7fa fa97 	bl	800ea60 <lwip_htons>
 8014532:	4603      	mov	r3, r0
 8014534:	b2db      	uxtb	r3, r3
 8014536:	f003 0301 	and.w	r3, r3, #1
 801453a:	2b00      	cmp	r3, #0
 801453c:	f040 80be 	bne.w	80146bc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014540:	4874      	ldr	r0, [pc, #464]	@ (8014714 <tcp_receive+0xf14>)
 8014542:	f7fd faf5 	bl	8011b30 <tcp_seg_copy>
 8014546:	4602      	mov	r2, r0
 8014548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	2b00      	cmp	r3, #0
 8014552:	f000 80b5 	beq.w	80146c0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014558:	691b      	ldr	r3, [r3, #16]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801455e:	8912      	ldrh	r2, [r2, #8]
 8014560:	441a      	add	r2, r3
 8014562:	4b6b      	ldr	r3, [pc, #428]	@ (8014710 <tcp_receive+0xf10>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	2b00      	cmp	r3, #0
 801456a:	dd12      	ble.n	8014592 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801456c:	4b68      	ldr	r3, [pc, #416]	@ (8014710 <tcp_receive+0xf10>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	b29a      	uxth	r2, r3
 8014572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014574:	691b      	ldr	r3, [r3, #16]
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	b29b      	uxth	r3, r3
 801457a:	1ad3      	subs	r3, r2, r3
 801457c:	b29a      	uxth	r2, r3
 801457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014580:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014584:	685a      	ldr	r2, [r3, #4]
 8014586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014588:	891b      	ldrh	r3, [r3, #8]
 801458a:	4619      	mov	r1, r3
 801458c:	4610      	mov	r0, r2
 801458e:	f7fb fe03 	bl	8010198 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014592:	4b61      	ldr	r3, [pc, #388]	@ (8014718 <tcp_receive+0xf18>)
 8014594:	881b      	ldrh	r3, [r3, #0]
 8014596:	461a      	mov	r2, r3
 8014598:	4b5d      	ldr	r3, [pc, #372]	@ (8014710 <tcp_receive+0xf10>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	441a      	add	r2, r3
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145a2:	6879      	ldr	r1, [r7, #4]
 80145a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80145a6:	440b      	add	r3, r1
 80145a8:	1ad3      	subs	r3, r2, r3
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	f340 8088 	ble.w	80146c0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80145b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	691b      	ldr	r3, [r3, #16]
 80145b6:	899b      	ldrh	r3, [r3, #12]
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fa fa50 	bl	800ea60 <lwip_htons>
 80145c0:	4603      	mov	r3, r0
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	f003 0301 	and.w	r3, r3, #1
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d021      	beq.n	8014610 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80145cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	691b      	ldr	r3, [r3, #16]
 80145d2:	899b      	ldrh	r3, [r3, #12]
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	b21b      	sxth	r3, r3
 80145d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80145dc:	b21c      	sxth	r4, r3
 80145de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	691b      	ldr	r3, [r3, #16]
 80145e4:	899b      	ldrh	r3, [r3, #12]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fa fa39 	bl	800ea60 <lwip_htons>
 80145ee:	4603      	mov	r3, r0
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80145f6:	b29b      	uxth	r3, r3
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fa fa31 	bl	800ea60 <lwip_htons>
 80145fe:	4603      	mov	r3, r0
 8014600:	b21b      	sxth	r3, r3
 8014602:	4323      	orrs	r3, r4
 8014604:	b21a      	sxth	r2, r3
 8014606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	691b      	ldr	r3, [r3, #16]
 801460c:	b292      	uxth	r2, r2
 801460e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014614:	b29a      	uxth	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801461a:	4413      	add	r3, r2
 801461c:	b299      	uxth	r1, r3
 801461e:	4b3c      	ldr	r3, [pc, #240]	@ (8014710 <tcp_receive+0xf10>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	b29a      	uxth	r2, r3
 8014624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	1a8a      	subs	r2, r1, r2
 801462a:	b292      	uxth	r2, r2
 801462c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	685a      	ldr	r2, [r3, #4]
 8014634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	891b      	ldrh	r3, [r3, #8]
 801463a:	4619      	mov	r1, r3
 801463c:	4610      	mov	r0, r2
 801463e:	f7fb fdab 	bl	8010198 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	891c      	ldrh	r4, [r3, #8]
 8014648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	691b      	ldr	r3, [r3, #16]
 801464e:	899b      	ldrh	r3, [r3, #12]
 8014650:	b29b      	uxth	r3, r3
 8014652:	4618      	mov	r0, r3
 8014654:	f7fa fa04 	bl	800ea60 <lwip_htons>
 8014658:	4603      	mov	r3, r0
 801465a:	b2db      	uxtb	r3, r3
 801465c:	f003 0303 	and.w	r3, r3, #3
 8014660:	2b00      	cmp	r3, #0
 8014662:	d001      	beq.n	8014668 <tcp_receive+0xe68>
 8014664:	2301      	movs	r3, #1
 8014666:	e000      	b.n	801466a <tcp_receive+0xe6a>
 8014668:	2300      	movs	r3, #0
 801466a:	4423      	add	r3, r4
 801466c:	b29a      	uxth	r2, r3
 801466e:	4b2a      	ldr	r3, [pc, #168]	@ (8014718 <tcp_receive+0xf18>)
 8014670:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014672:	4b29      	ldr	r3, [pc, #164]	@ (8014718 <tcp_receive+0xf18>)
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	461a      	mov	r2, r3
 8014678:	4b25      	ldr	r3, [pc, #148]	@ (8014710 <tcp_receive+0xf10>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	441a      	add	r2, r3
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014682:	6879      	ldr	r1, [r7, #4]
 8014684:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014686:	440b      	add	r3, r1
 8014688:	429a      	cmp	r2, r3
 801468a:	d019      	beq.n	80146c0 <tcp_receive+0xec0>
 801468c:	4b23      	ldr	r3, [pc, #140]	@ (801471c <tcp_receive+0xf1c>)
 801468e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014692:	4923      	ldr	r1, [pc, #140]	@ (8014720 <tcp_receive+0xf20>)
 8014694:	4823      	ldr	r0, [pc, #140]	@ (8014724 <tcp_receive+0xf24>)
 8014696:	f007 fd43 	bl	801c120 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801469a:	e011      	b.n	80146c0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80146a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	f47f aea5 	bne.w	80143f4 <tcp_receive+0xbf4>
 80146aa:	e00a      	b.n	80146c2 <tcp_receive+0xec2>
                break;
 80146ac:	bf00      	nop
 80146ae:	e008      	b.n	80146c2 <tcp_receive+0xec2>
                break;
 80146b0:	bf00      	nop
 80146b2:	e006      	b.n	80146c2 <tcp_receive+0xec2>
                  break;
 80146b4:	bf00      	nop
 80146b6:	e004      	b.n	80146c2 <tcp_receive+0xec2>
                  break;
 80146b8:	bf00      	nop
 80146ba:	e002      	b.n	80146c2 <tcp_receive+0xec2>
                  break;
 80146bc:	bf00      	nop
 80146be:	e000      	b.n	80146c2 <tcp_receive+0xec2>
                break;
 80146c0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f001 fa68 	bl	8015b98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80146c8:	e003      	b.n	80146d2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f001 fa64 	bl	8015b98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80146d0:	e01a      	b.n	8014708 <tcp_receive+0xf08>
 80146d2:	e019      	b.n	8014708 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80146d4:	4b0e      	ldr	r3, [pc, #56]	@ (8014710 <tcp_receive+0xf10>)
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146dc:	1ad3      	subs	r3, r2, r3
 80146de:	2b00      	cmp	r3, #0
 80146e0:	db0a      	blt.n	80146f8 <tcp_receive+0xef8>
 80146e2:	4b0b      	ldr	r3, [pc, #44]	@ (8014710 <tcp_receive+0xf10>)
 80146e4:	681a      	ldr	r2, [r3, #0]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ea:	6879      	ldr	r1, [r7, #4]
 80146ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80146ee:	440b      	add	r3, r1
 80146f0:	1ad3      	subs	r3, r2, r3
 80146f2:	3301      	adds	r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	dd07      	ble.n	8014708 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	8b5b      	ldrh	r3, [r3, #26]
 80146fc:	f043 0302 	orr.w	r3, r3, #2
 8014700:	b29a      	uxth	r2, r3
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014706:	e7ff      	b.n	8014708 <tcp_receive+0xf08>
 8014708:	bf00      	nop
 801470a:	3750      	adds	r7, #80	@ 0x50
 801470c:	46bd      	mov	sp, r7
 801470e:	bdb0      	pop	{r4, r5, r7, pc}
 8014710:	20013d4c 	.word	0x20013d4c
 8014714:	20013d28 	.word	0x20013d28
 8014718:	20013d56 	.word	0x20013d56
 801471c:	080200c4 	.word	0x080200c4
 8014720:	0802046c 	.word	0x0802046c
 8014724:	08020110 	.word	0x08020110

08014728 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014728:	b480      	push	{r7}
 801472a:	b083      	sub	sp, #12
 801472c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801472e:	4b15      	ldr	r3, [pc, #84]	@ (8014784 <tcp_get_next_optbyte+0x5c>)
 8014730:	881b      	ldrh	r3, [r3, #0]
 8014732:	1c5a      	adds	r2, r3, #1
 8014734:	b291      	uxth	r1, r2
 8014736:	4a13      	ldr	r2, [pc, #76]	@ (8014784 <tcp_get_next_optbyte+0x5c>)
 8014738:	8011      	strh	r1, [r2, #0]
 801473a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801473c:	4b12      	ldr	r3, [pc, #72]	@ (8014788 <tcp_get_next_optbyte+0x60>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d004      	beq.n	801474e <tcp_get_next_optbyte+0x26>
 8014744:	4b11      	ldr	r3, [pc, #68]	@ (801478c <tcp_get_next_optbyte+0x64>)
 8014746:	881b      	ldrh	r3, [r3, #0]
 8014748:	88fa      	ldrh	r2, [r7, #6]
 801474a:	429a      	cmp	r2, r3
 801474c:	d208      	bcs.n	8014760 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801474e:	4b10      	ldr	r3, [pc, #64]	@ (8014790 <tcp_get_next_optbyte+0x68>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	3314      	adds	r3, #20
 8014754:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014756:	88fb      	ldrh	r3, [r7, #6]
 8014758:	683a      	ldr	r2, [r7, #0]
 801475a:	4413      	add	r3, r2
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	e00b      	b.n	8014778 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014760:	88fb      	ldrh	r3, [r7, #6]
 8014762:	b2da      	uxtb	r2, r3
 8014764:	4b09      	ldr	r3, [pc, #36]	@ (801478c <tcp_get_next_optbyte+0x64>)
 8014766:	881b      	ldrh	r3, [r3, #0]
 8014768:	b2db      	uxtb	r3, r3
 801476a:	1ad3      	subs	r3, r2, r3
 801476c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801476e:	4b06      	ldr	r3, [pc, #24]	@ (8014788 <tcp_get_next_optbyte+0x60>)
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	797b      	ldrb	r3, [r7, #5]
 8014774:	4413      	add	r3, r2
 8014776:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014778:	4618      	mov	r0, r3
 801477a:	370c      	adds	r7, #12
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr
 8014784:	20013d48 	.word	0x20013d48
 8014788:	20013d44 	.word	0x20013d44
 801478c:	20013d42 	.word	0x20013d42
 8014790:	20013d3c 	.word	0x20013d3c

08014794 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d106      	bne.n	80147b0 <tcp_parseopt+0x1c>
 80147a2:	4b33      	ldr	r3, [pc, #204]	@ (8014870 <tcp_parseopt+0xdc>)
 80147a4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80147a8:	4932      	ldr	r1, [pc, #200]	@ (8014874 <tcp_parseopt+0xe0>)
 80147aa:	4833      	ldr	r0, [pc, #204]	@ (8014878 <tcp_parseopt+0xe4>)
 80147ac:	f007 fcb8 	bl	801c120 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80147b0:	4b32      	ldr	r3, [pc, #200]	@ (801487c <tcp_parseopt+0xe8>)
 80147b2:	881b      	ldrh	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d057      	beq.n	8014868 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80147b8:	4b31      	ldr	r3, [pc, #196]	@ (8014880 <tcp_parseopt+0xec>)
 80147ba:	2200      	movs	r2, #0
 80147bc:	801a      	strh	r2, [r3, #0]
 80147be:	e047      	b.n	8014850 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 80147c0:	f7ff ffb2 	bl	8014728 <tcp_get_next_optbyte>
 80147c4:	4603      	mov	r3, r0
 80147c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80147c8:	7bfb      	ldrb	r3, [r7, #15]
 80147ca:	2b02      	cmp	r3, #2
 80147cc:	d006      	beq.n	80147dc <tcp_parseopt+0x48>
 80147ce:	2b02      	cmp	r3, #2
 80147d0:	dc2b      	bgt.n	801482a <tcp_parseopt+0x96>
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d043      	beq.n	801485e <tcp_parseopt+0xca>
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d039      	beq.n	801484e <tcp_parseopt+0xba>
 80147da:	e026      	b.n	801482a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80147dc:	f7ff ffa4 	bl	8014728 <tcp_get_next_optbyte>
 80147e0:	4603      	mov	r3, r0
 80147e2:	2b04      	cmp	r3, #4
 80147e4:	d13d      	bne.n	8014862 <tcp_parseopt+0xce>
 80147e6:	4b26      	ldr	r3, [pc, #152]	@ (8014880 <tcp_parseopt+0xec>)
 80147e8:	881b      	ldrh	r3, [r3, #0]
 80147ea:	3301      	adds	r3, #1
 80147ec:	4a23      	ldr	r2, [pc, #140]	@ (801487c <tcp_parseopt+0xe8>)
 80147ee:	8812      	ldrh	r2, [r2, #0]
 80147f0:	4293      	cmp	r3, r2
 80147f2:	da36      	bge.n	8014862 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80147f4:	f7ff ff98 	bl	8014728 <tcp_get_next_optbyte>
 80147f8:	4603      	mov	r3, r0
 80147fa:	021b      	lsls	r3, r3, #8
 80147fc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80147fe:	f7ff ff93 	bl	8014728 <tcp_get_next_optbyte>
 8014802:	4603      	mov	r3, r0
 8014804:	461a      	mov	r2, r3
 8014806:	89bb      	ldrh	r3, [r7, #12]
 8014808:	4313      	orrs	r3, r2
 801480a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801480c:	89bb      	ldrh	r3, [r7, #12]
 801480e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014812:	4293      	cmp	r3, r2
 8014814:	d804      	bhi.n	8014820 <tcp_parseopt+0x8c>
 8014816:	89bb      	ldrh	r3, [r7, #12]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d001      	beq.n	8014820 <tcp_parseopt+0x8c>
 801481c:	89ba      	ldrh	r2, [r7, #12]
 801481e:	e001      	b.n	8014824 <tcp_parseopt+0x90>
 8014820:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014828:	e012      	b.n	8014850 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801482a:	f7ff ff7d 	bl	8014728 <tcp_get_next_optbyte>
 801482e:	4603      	mov	r3, r0
 8014830:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014832:	7afb      	ldrb	r3, [r7, #11]
 8014834:	2b01      	cmp	r3, #1
 8014836:	d916      	bls.n	8014866 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014838:	7afb      	ldrb	r3, [r7, #11]
 801483a:	b29a      	uxth	r2, r3
 801483c:	4b10      	ldr	r3, [pc, #64]	@ (8014880 <tcp_parseopt+0xec>)
 801483e:	881b      	ldrh	r3, [r3, #0]
 8014840:	4413      	add	r3, r2
 8014842:	b29b      	uxth	r3, r3
 8014844:	3b02      	subs	r3, #2
 8014846:	b29a      	uxth	r2, r3
 8014848:	4b0d      	ldr	r3, [pc, #52]	@ (8014880 <tcp_parseopt+0xec>)
 801484a:	801a      	strh	r2, [r3, #0]
 801484c:	e000      	b.n	8014850 <tcp_parseopt+0xbc>
          break;
 801484e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014850:	4b0b      	ldr	r3, [pc, #44]	@ (8014880 <tcp_parseopt+0xec>)
 8014852:	881a      	ldrh	r2, [r3, #0]
 8014854:	4b09      	ldr	r3, [pc, #36]	@ (801487c <tcp_parseopt+0xe8>)
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	429a      	cmp	r2, r3
 801485a:	d3b1      	bcc.n	80147c0 <tcp_parseopt+0x2c>
 801485c:	e004      	b.n	8014868 <tcp_parseopt+0xd4>
          return;
 801485e:	bf00      	nop
 8014860:	e002      	b.n	8014868 <tcp_parseopt+0xd4>
            return;
 8014862:	bf00      	nop
 8014864:	e000      	b.n	8014868 <tcp_parseopt+0xd4>
            return;
 8014866:	bf00      	nop
      }
    }
  }
}
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	080200c4 	.word	0x080200c4
 8014874:	08020528 	.word	0x08020528
 8014878:	08020110 	.word	0x08020110
 801487c:	20013d40 	.word	0x20013d40
 8014880:	20013d48 	.word	0x20013d48

08014884 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014884:	b480      	push	{r7}
 8014886:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014888:	4b05      	ldr	r3, [pc, #20]	@ (80148a0 <tcp_trigger_input_pcb_close+0x1c>)
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	f043 0310 	orr.w	r3, r3, #16
 8014890:	b2da      	uxtb	r2, r3
 8014892:	4b03      	ldr	r3, [pc, #12]	@ (80148a0 <tcp_trigger_input_pcb_close+0x1c>)
 8014894:	701a      	strb	r2, [r3, #0]
}
 8014896:	bf00      	nop
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr
 80148a0:	20013d59 	.word	0x20013d59

080148a4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b084      	sub	sp, #16
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	60f8      	str	r0, [r7, #12]
 80148ac:	60b9      	str	r1, [r7, #8]
 80148ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d00a      	beq.n	80148cc <tcp_route+0x28>
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	7a1b      	ldrb	r3, [r3, #8]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d006      	beq.n	80148cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	7a1b      	ldrb	r3, [r3, #8]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7fb fa5c 	bl	800fd80 <netif_get_by_index>
 80148c8:	4603      	mov	r3, r0
 80148ca:	e003      	b.n	80148d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f005 f9e3 	bl	8019c98 <ip4_route>
 80148d2:	4603      	mov	r3, r0
  }
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80148dc:	b590      	push	{r4, r7, lr}
 80148de:	b087      	sub	sp, #28
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	603b      	str	r3, [r7, #0]
 80148e8:	4613      	mov	r3, r2
 80148ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d105      	bne.n	80148fe <tcp_create_segment+0x22>
 80148f2:	4b45      	ldr	r3, [pc, #276]	@ (8014a08 <tcp_create_segment+0x12c>)
 80148f4:	22a3      	movs	r2, #163	@ 0xa3
 80148f6:	4945      	ldr	r1, [pc, #276]	@ (8014a0c <tcp_create_segment+0x130>)
 80148f8:	4845      	ldr	r0, [pc, #276]	@ (8014a10 <tcp_create_segment+0x134>)
 80148fa:	f007 fc11 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d105      	bne.n	8014910 <tcp_create_segment+0x34>
 8014904:	4b40      	ldr	r3, [pc, #256]	@ (8014a08 <tcp_create_segment+0x12c>)
 8014906:	22a4      	movs	r2, #164	@ 0xa4
 8014908:	4942      	ldr	r1, [pc, #264]	@ (8014a14 <tcp_create_segment+0x138>)
 801490a:	4841      	ldr	r0, [pc, #260]	@ (8014a10 <tcp_create_segment+0x134>)
 801490c:	f007 fc08 	bl	801c120 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014910:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	b2db      	uxtb	r3, r3
 8014918:	f003 0304 	and.w	r3, r3, #4
 801491c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801491e:	2003      	movs	r0, #3
 8014920:	f7fa fecc 	bl	800f6bc <memp_malloc>
 8014924:	6138      	str	r0, [r7, #16]
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d104      	bne.n	8014936 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801492c:	68b8      	ldr	r0, [r7, #8]
 801492e:	f7fb fdb9 	bl	80104a4 <pbuf_free>
    return NULL;
 8014932:	2300      	movs	r3, #0
 8014934:	e063      	b.n	80149fe <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801493c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	68ba      	ldr	r2, [r7, #8]
 8014948:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	891a      	ldrh	r2, [r3, #8]
 801494e:	7dfb      	ldrb	r3, [r7, #23]
 8014950:	b29b      	uxth	r3, r3
 8014952:	429a      	cmp	r2, r3
 8014954:	d205      	bcs.n	8014962 <tcp_create_segment+0x86>
 8014956:	4b2c      	ldr	r3, [pc, #176]	@ (8014a08 <tcp_create_segment+0x12c>)
 8014958:	22b0      	movs	r2, #176	@ 0xb0
 801495a:	492f      	ldr	r1, [pc, #188]	@ (8014a18 <tcp_create_segment+0x13c>)
 801495c:	482c      	ldr	r0, [pc, #176]	@ (8014a10 <tcp_create_segment+0x134>)
 801495e:	f007 fbdf 	bl	801c120 <iprintf>
  seg->len = p->tot_len - optlen;
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	891a      	ldrh	r2, [r3, #8]
 8014966:	7dfb      	ldrb	r3, [r7, #23]
 8014968:	b29b      	uxth	r3, r3
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	b29a      	uxth	r2, r3
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	2200      	movs	r2, #0
 8014976:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014978:	2114      	movs	r1, #20
 801497a:	68b8      	ldr	r0, [r7, #8]
 801497c:	f7fb fcfc 	bl	8010378 <pbuf_add_header>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d004      	beq.n	8014990 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014986:	6938      	ldr	r0, [r7, #16]
 8014988:	f7fd f8b9 	bl	8011afe <tcp_seg_free>
    return NULL;
 801498c:	2300      	movs	r3, #0
 801498e:	e036      	b.n	80149fe <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	685a      	ldr	r2, [r3, #4]
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	8ada      	ldrh	r2, [r3, #22]
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	691c      	ldr	r4, [r3, #16]
 80149a2:	4610      	mov	r0, r2
 80149a4:	f7fa f85c 	bl	800ea60 <lwip_htons>
 80149a8:	4603      	mov	r3, r0
 80149aa:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	8b1a      	ldrh	r2, [r3, #24]
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	691c      	ldr	r4, [r3, #16]
 80149b4:	4610      	mov	r0, r2
 80149b6:	f7fa f853 	bl	800ea60 <lwip_htons>
 80149ba:	4603      	mov	r3, r0
 80149bc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	691c      	ldr	r4, [r3, #16]
 80149c2:	6838      	ldr	r0, [r7, #0]
 80149c4:	f7fa f861 	bl	800ea8a <lwip_htonl>
 80149c8:	4603      	mov	r3, r0
 80149ca:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80149cc:	7dfb      	ldrb	r3, [r7, #23]
 80149ce:	089b      	lsrs	r3, r3, #2
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	3305      	adds	r3, #5
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	031b      	lsls	r3, r3, #12
 80149d8:	b29a      	uxth	r2, r3
 80149da:	79fb      	ldrb	r3, [r7, #7]
 80149dc:	b29b      	uxth	r3, r3
 80149de:	4313      	orrs	r3, r2
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	691c      	ldr	r4, [r3, #16]
 80149e6:	4610      	mov	r0, r2
 80149e8:	f7fa f83a 	bl	800ea60 <lwip_htons>
 80149ec:	4603      	mov	r3, r0
 80149ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	691b      	ldr	r3, [r3, #16]
 80149f4:	2200      	movs	r2, #0
 80149f6:	749a      	strb	r2, [r3, #18]
 80149f8:	2200      	movs	r2, #0
 80149fa:	74da      	strb	r2, [r3, #19]
  return seg;
 80149fc:	693b      	ldr	r3, [r7, #16]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	371c      	adds	r7, #28
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd90      	pop	{r4, r7, pc}
 8014a06:	bf00      	nop
 8014a08:	08020544 	.word	0x08020544
 8014a0c:	08020578 	.word	0x08020578
 8014a10:	08020598 	.word	0x08020598
 8014a14:	080205c0 	.word	0x080205c0
 8014a18:	080205e4 	.word	0x080205e4

08014a1c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014a1c:	b590      	push	{r4, r7, lr}
 8014a1e:	b08b      	sub	sp, #44	@ 0x2c
 8014a20:	af02      	add	r7, sp, #8
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	460b      	mov	r3, r1
 8014a26:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	61bb      	str	r3, [r7, #24]
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014a30:	2300      	movs	r3, #0
 8014a32:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d106      	bne.n	8014a48 <tcp_split_unsent_seg+0x2c>
 8014a3a:	4b97      	ldr	r3, [pc, #604]	@ (8014c98 <tcp_split_unsent_seg+0x27c>)
 8014a3c:	f240 324b 	movw	r2, #843	@ 0x34b
 8014a40:	4996      	ldr	r1, [pc, #600]	@ (8014c9c <tcp_split_unsent_seg+0x280>)
 8014a42:	4897      	ldr	r0, [pc, #604]	@ (8014ca0 <tcp_split_unsent_seg+0x284>)
 8014a44:	f007 fb6c 	bl	801c120 <iprintf>

  useg = pcb->unsent;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a4c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d102      	bne.n	8014a5a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014a54:	f04f 33ff 	mov.w	r3, #4294967295
 8014a58:	e119      	b.n	8014c8e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8014a5a:	887b      	ldrh	r3, [r7, #2]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d109      	bne.n	8014a74 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014a60:	4b8d      	ldr	r3, [pc, #564]	@ (8014c98 <tcp_split_unsent_seg+0x27c>)
 8014a62:	f240 3253 	movw	r2, #851	@ 0x353
 8014a66:	498f      	ldr	r1, [pc, #572]	@ (8014ca4 <tcp_split_unsent_seg+0x288>)
 8014a68:	488d      	ldr	r0, [pc, #564]	@ (8014ca0 <tcp_split_unsent_seg+0x284>)
 8014a6a:	f007 fb59 	bl	801c120 <iprintf>
    return ERR_VAL;
 8014a6e:	f06f 0305 	mvn.w	r3, #5
 8014a72:	e10c      	b.n	8014c8e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	891b      	ldrh	r3, [r3, #8]
 8014a78:	887a      	ldrh	r2, [r7, #2]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d301      	bcc.n	8014a82 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	e105      	b.n	8014c8e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a86:	887a      	ldrh	r2, [r7, #2]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d906      	bls.n	8014a9a <tcp_split_unsent_seg+0x7e>
 8014a8c:	4b82      	ldr	r3, [pc, #520]	@ (8014c98 <tcp_split_unsent_seg+0x27c>)
 8014a8e:	f240 325b 	movw	r2, #859	@ 0x35b
 8014a92:	4985      	ldr	r1, [pc, #532]	@ (8014ca8 <tcp_split_unsent_seg+0x28c>)
 8014a94:	4882      	ldr	r0, [pc, #520]	@ (8014ca0 <tcp_split_unsent_seg+0x284>)
 8014a96:	f007 fb43 	bl	801c120 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	891b      	ldrh	r3, [r3, #8]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d106      	bne.n	8014ab0 <tcp_split_unsent_seg+0x94>
 8014aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8014c98 <tcp_split_unsent_seg+0x27c>)
 8014aa4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014aa8:	4980      	ldr	r1, [pc, #512]	@ (8014cac <tcp_split_unsent_seg+0x290>)
 8014aaa:	487d      	ldr	r0, [pc, #500]	@ (8014ca0 <tcp_split_unsent_seg+0x284>)
 8014aac:	f007 fb38 	bl	801c120 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	7b1b      	ldrb	r3, [r3, #12]
 8014ab4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014ab6:	7bfb      	ldrb	r3, [r7, #15]
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	b2db      	uxtb	r3, r3
 8014abc:	f003 0304 	and.w	r3, r3, #4
 8014ac0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	891a      	ldrh	r2, [r3, #8]
 8014ac6:	887b      	ldrh	r3, [r7, #2]
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014acc:	7bbb      	ldrb	r3, [r7, #14]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	89bb      	ldrh	r3, [r7, #12]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	b29b      	uxth	r3, r3
 8014ad6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014ada:	4619      	mov	r1, r3
 8014adc:	2036      	movs	r0, #54	@ 0x36
 8014ade:	f7fb f9f9 	bl	800fed4 <pbuf_alloc>
 8014ae2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ae4:	693b      	ldr	r3, [r7, #16]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	f000 80ba 	beq.w	8014c60 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	891a      	ldrh	r2, [r3, #8]
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	891b      	ldrh	r3, [r3, #8]
 8014af6:	1ad3      	subs	r3, r2, r3
 8014af8:	b29a      	uxth	r2, r3
 8014afa:	887b      	ldrh	r3, [r7, #2]
 8014afc:	4413      	add	r3, r2
 8014afe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	6858      	ldr	r0, [r3, #4]
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	685a      	ldr	r2, [r3, #4]
 8014b08:	7bbb      	ldrb	r3, [r7, #14]
 8014b0a:	18d1      	adds	r1, r2, r3
 8014b0c:	897b      	ldrh	r3, [r7, #10]
 8014b0e:	89ba      	ldrh	r2, [r7, #12]
 8014b10:	f7fb fece 	bl	80108b0 <pbuf_copy_partial>
 8014b14:	4603      	mov	r3, r0
 8014b16:	461a      	mov	r2, r3
 8014b18:	89bb      	ldrh	r3, [r7, #12]
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	f040 80a2 	bne.w	8014c64 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	691b      	ldr	r3, [r3, #16]
 8014b24:	899b      	ldrh	r3, [r3, #12]
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7f9 ff99 	bl	800ea60 <lwip_htons>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014b36:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014b38:	2300      	movs	r3, #0
 8014b3a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8014b3c:	7ffb      	ldrb	r3, [r7, #31]
 8014b3e:	f003 0308 	and.w	r3, r3, #8
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d007      	beq.n	8014b56 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014b46:	7ffb      	ldrb	r3, [r7, #31]
 8014b48:	f023 0308 	bic.w	r3, r3, #8
 8014b4c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8014b4e:	7fbb      	ldrb	r3, [r7, #30]
 8014b50:	f043 0308 	orr.w	r3, r3, #8
 8014b54:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8014b56:	7ffb      	ldrb	r3, [r7, #31]
 8014b58:	f003 0301 	and.w	r3, r3, #1
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d007      	beq.n	8014b70 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014b60:	7ffb      	ldrb	r3, [r7, #31]
 8014b62:	f023 0301 	bic.w	r3, r3, #1
 8014b66:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8014b68:	7fbb      	ldrb	r3, [r7, #30]
 8014b6a:	f043 0301 	orr.w	r3, r3, #1
 8014b6e:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	691b      	ldr	r3, [r3, #16]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7f9 ff87 	bl	800ea8a <lwip_htonl>
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	887b      	ldrh	r3, [r7, #2]
 8014b80:	18d1      	adds	r1, r2, r3
 8014b82:	7fba      	ldrb	r2, [r7, #30]
 8014b84:	7bfb      	ldrb	r3, [r7, #15]
 8014b86:	9300      	str	r3, [sp, #0]
 8014b88:	460b      	mov	r3, r1
 8014b8a:	6939      	ldr	r1, [r7, #16]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f7ff fea5 	bl	80148dc <tcp_create_segment>
 8014b92:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d066      	beq.n	8014c68 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7fb fd0e 	bl	80105c0 <pbuf_clen>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	461a      	mov	r2, r3
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014bae:	1a9b      	subs	r3, r3, r2
 8014bb0:	b29a      	uxth	r2, r3
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	6858      	ldr	r0, [r3, #4]
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	891a      	ldrh	r2, [r3, #8]
 8014bc2:	89bb      	ldrh	r3, [r7, #12]
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	4619      	mov	r1, r3
 8014bca:	f7fb fae5 	bl	8010198 <pbuf_realloc>
  useg->len -= remainder;
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	891a      	ldrh	r2, [r3, #8]
 8014bd2:	89bb      	ldrh	r3, [r7, #12]
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	691b      	ldr	r3, [r3, #16]
 8014be0:	899b      	ldrh	r3, [r3, #12]
 8014be2:	b29c      	uxth	r4, r3
 8014be4:	7ffb      	ldrb	r3, [r7, #31]
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7f9 ff39 	bl	800ea60 <lwip_htons>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	691b      	ldr	r3, [r3, #16]
 8014bf6:	4322      	orrs	r2, r4
 8014bf8:	b292      	uxth	r2, r2
 8014bfa:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014c02:	697b      	ldr	r3, [r7, #20]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7fb fcda 	bl	80105c0 <pbuf_clen>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	461a      	mov	r2, r3
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014c16:	4413      	add	r3, r2
 8014c18:	b29a      	uxth	r2, r3
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014c20:	69bb      	ldr	r3, [r7, #24]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fb fccb 	bl	80105c0 <pbuf_clen>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014c34:	4413      	add	r3, r2
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	69bb      	ldr	r3, [r7, #24]
 8014c44:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	69ba      	ldr	r2, [r7, #24]
 8014c4a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014c4c:	69bb      	ldr	r3, [r7, #24]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d103      	bne.n	8014c5c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	e016      	b.n	8014c8e <tcp_split_unsent_seg+0x272>
    goto memerr;
 8014c60:	bf00      	nop
 8014c62:	e002      	b.n	8014c6a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8014c64:	bf00      	nop
 8014c66:	e000      	b.n	8014c6a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8014c68:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d006      	beq.n	8014c7e <tcp_split_unsent_seg+0x262>
 8014c70:	4b09      	ldr	r3, [pc, #36]	@ (8014c98 <tcp_split_unsent_seg+0x27c>)
 8014c72:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014c76:	490e      	ldr	r1, [pc, #56]	@ (8014cb0 <tcp_split_unsent_seg+0x294>)
 8014c78:	4809      	ldr	r0, [pc, #36]	@ (8014ca0 <tcp_split_unsent_seg+0x284>)
 8014c7a:	f007 fa51 	bl	801c120 <iprintf>
  if (p != NULL) {
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d002      	beq.n	8014c8a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8014c84:	6938      	ldr	r0, [r7, #16]
 8014c86:	f7fb fc0d 	bl	80104a4 <pbuf_free>
  }

  return ERR_MEM;
 8014c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3724      	adds	r7, #36	@ 0x24
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd90      	pop	{r4, r7, pc}
 8014c96:	bf00      	nop
 8014c98:	08020544 	.word	0x08020544
 8014c9c:	08020934 	.word	0x08020934
 8014ca0:	08020598 	.word	0x08020598
 8014ca4:	08020958 	.word	0x08020958
 8014ca8:	0802097c 	.word	0x0802097c
 8014cac:	0802098c 	.word	0x0802098c
 8014cb0:	0802099c 	.word	0x0802099c

08014cb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014cb4:	b590      	push	{r4, r7, lr}
 8014cb6:	b085      	sub	sp, #20
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d106      	bne.n	8014cd0 <tcp_send_fin+0x1c>
 8014cc2:	4b21      	ldr	r3, [pc, #132]	@ (8014d48 <tcp_send_fin+0x94>)
 8014cc4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014cc8:	4920      	ldr	r1, [pc, #128]	@ (8014d4c <tcp_send_fin+0x98>)
 8014cca:	4821      	ldr	r0, [pc, #132]	@ (8014d50 <tcp_send_fin+0x9c>)
 8014ccc:	f007 fa28 	bl	801c120 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d02e      	beq.n	8014d36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cdc:	60fb      	str	r3, [r7, #12]
 8014cde:	e002      	b.n	8014ce6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d1f8      	bne.n	8014ce0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	691b      	ldr	r3, [r3, #16]
 8014cf2:	899b      	ldrh	r3, [r3, #12]
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7f9 feb2 	bl	800ea60 <lwip_htons>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	b2db      	uxtb	r3, r3
 8014d00:	f003 0307 	and.w	r3, r3, #7
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d116      	bne.n	8014d36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	691b      	ldr	r3, [r3, #16]
 8014d0c:	899b      	ldrh	r3, [r3, #12]
 8014d0e:	b29c      	uxth	r4, r3
 8014d10:	2001      	movs	r0, #1
 8014d12:	f7f9 fea5 	bl	800ea60 <lwip_htons>
 8014d16:	4603      	mov	r3, r0
 8014d18:	461a      	mov	r2, r3
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	691b      	ldr	r3, [r3, #16]
 8014d1e:	4322      	orrs	r2, r4
 8014d20:	b292      	uxth	r2, r2
 8014d22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	8b5b      	ldrh	r3, [r3, #26]
 8014d28:	f043 0320 	orr.w	r3, r3, #32
 8014d2c:	b29a      	uxth	r2, r3
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	e004      	b.n	8014d40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014d36:	2101      	movs	r1, #1
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 f80b 	bl	8014d54 <tcp_enqueue_flags>
 8014d3e:	4603      	mov	r3, r0
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3714      	adds	r7, #20
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd90      	pop	{r4, r7, pc}
 8014d48:	08020544 	.word	0x08020544
 8014d4c:	080209a8 	.word	0x080209a8
 8014d50:	08020598 	.word	0x08020598

08014d54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b088      	sub	sp, #32
 8014d58:	af02      	add	r7, sp, #8
 8014d5a:	6078      	str	r0, [r7, #4]
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014d60:	2300      	movs	r3, #0
 8014d62:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8014d64:	2300      	movs	r3, #0
 8014d66:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014d68:	78fb      	ldrb	r3, [r7, #3]
 8014d6a:	f003 0303 	and.w	r3, r3, #3
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d106      	bne.n	8014d80 <tcp_enqueue_flags+0x2c>
 8014d72:	4b67      	ldr	r3, [pc, #412]	@ (8014f10 <tcp_enqueue_flags+0x1bc>)
 8014d74:	f240 4211 	movw	r2, #1041	@ 0x411
 8014d78:	4966      	ldr	r1, [pc, #408]	@ (8014f14 <tcp_enqueue_flags+0x1c0>)
 8014d7a:	4867      	ldr	r0, [pc, #412]	@ (8014f18 <tcp_enqueue_flags+0x1c4>)
 8014d7c:	f007 f9d0 	bl	801c120 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d106      	bne.n	8014d94 <tcp_enqueue_flags+0x40>
 8014d86:	4b62      	ldr	r3, [pc, #392]	@ (8014f10 <tcp_enqueue_flags+0x1bc>)
 8014d88:	f240 4213 	movw	r2, #1043	@ 0x413
 8014d8c:	4963      	ldr	r1, [pc, #396]	@ (8014f1c <tcp_enqueue_flags+0x1c8>)
 8014d8e:	4862      	ldr	r0, [pc, #392]	@ (8014f18 <tcp_enqueue_flags+0x1c4>)
 8014d90:	f007 f9c6 	bl	801c120 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014d94:	78fb      	ldrb	r3, [r7, #3]
 8014d96:	f003 0302 	and.w	r3, r3, #2
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d001      	beq.n	8014da2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014da2:	7dfb      	ldrb	r3, [r7, #23]
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	f003 0304 	and.w	r3, r3, #4
 8014dac:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014dae:	7dbb      	ldrb	r3, [r7, #22]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014db6:	4619      	mov	r1, r3
 8014db8:	2036      	movs	r0, #54	@ 0x36
 8014dba:	f7fb f88b 	bl	800fed4 <pbuf_alloc>
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d109      	bne.n	8014dda <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	8b5b      	ldrh	r3, [r3, #26]
 8014dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd8:	e095      	b.n	8014f06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	895a      	ldrh	r2, [r3, #10]
 8014dde:	7dbb      	ldrb	r3, [r7, #22]
 8014de0:	b29b      	uxth	r3, r3
 8014de2:	429a      	cmp	r2, r3
 8014de4:	d206      	bcs.n	8014df4 <tcp_enqueue_flags+0xa0>
 8014de6:	4b4a      	ldr	r3, [pc, #296]	@ (8014f10 <tcp_enqueue_flags+0x1bc>)
 8014de8:	f240 4239 	movw	r2, #1081	@ 0x439
 8014dec:	494c      	ldr	r1, [pc, #304]	@ (8014f20 <tcp_enqueue_flags+0x1cc>)
 8014dee:	484a      	ldr	r0, [pc, #296]	@ (8014f18 <tcp_enqueue_flags+0x1c4>)
 8014df0:	f007 f996 	bl	801c120 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014df8:	78fa      	ldrb	r2, [r7, #3]
 8014dfa:	7dfb      	ldrb	r3, [r7, #23]
 8014dfc:	9300      	str	r3, [sp, #0]
 8014dfe:	460b      	mov	r3, r1
 8014e00:	68f9      	ldr	r1, [r7, #12]
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7ff fd6a 	bl	80148dc <tcp_create_segment>
 8014e08:	60b8      	str	r0, [r7, #8]
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d109      	bne.n	8014e24 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	8b5b      	ldrh	r3, [r3, #26]
 8014e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e18:	b29a      	uxth	r2, r3
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e22:	e070      	b.n	8014f06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	691b      	ldr	r3, [r3, #16]
 8014e28:	f003 0303 	and.w	r3, r3, #3
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d006      	beq.n	8014e3e <tcp_enqueue_flags+0xea>
 8014e30:	4b37      	ldr	r3, [pc, #220]	@ (8014f10 <tcp_enqueue_flags+0x1bc>)
 8014e32:	f240 4242 	movw	r2, #1090	@ 0x442
 8014e36:	493b      	ldr	r1, [pc, #236]	@ (8014f24 <tcp_enqueue_flags+0x1d0>)
 8014e38:	4837      	ldr	r0, [pc, #220]	@ (8014f18 <tcp_enqueue_flags+0x1c4>)
 8014e3a:	f007 f971 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	891b      	ldrh	r3, [r3, #8]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d006      	beq.n	8014e54 <tcp_enqueue_flags+0x100>
 8014e46:	4b32      	ldr	r3, [pc, #200]	@ (8014f10 <tcp_enqueue_flags+0x1bc>)
 8014e48:	f240 4243 	movw	r2, #1091	@ 0x443
 8014e4c:	4936      	ldr	r1, [pc, #216]	@ (8014f28 <tcp_enqueue_flags+0x1d4>)
 8014e4e:	4832      	ldr	r0, [pc, #200]	@ (8014f18 <tcp_enqueue_flags+0x1c4>)
 8014e50:	f007 f966 	bl	801c120 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d103      	bne.n	8014e64 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	68ba      	ldr	r2, [r7, #8]
 8014e60:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014e62:	e00d      	b.n	8014e80 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e68:	613b      	str	r3, [r7, #16]
 8014e6a:	e002      	b.n	8014e72 <tcp_enqueue_flags+0x11e>
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	613b      	str	r3, [r7, #16]
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d1f8      	bne.n	8014e6c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	68ba      	ldr	r2, [r7, #8]
 8014e7e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2200      	movs	r2, #0
 8014e84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014e88:	78fb      	ldrb	r3, [r7, #3]
 8014e8a:	f003 0302 	and.w	r3, r3, #2
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d104      	bne.n	8014e9c <tcp_enqueue_flags+0x148>
 8014e92:	78fb      	ldrb	r3, [r7, #3]
 8014e94:	f003 0301 	and.w	r3, r3, #1
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d004      	beq.n	8014ea6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ea0:	1c5a      	adds	r2, r3, #1
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014ea6:	78fb      	ldrb	r3, [r7, #3]
 8014ea8:	f003 0301 	and.w	r3, r3, #1
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d006      	beq.n	8014ebe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	8b5b      	ldrh	r3, [r3, #26]
 8014eb4:	f043 0320 	orr.w	r3, r3, #32
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7fb fb7c 	bl	80105c0 <pbuf_clen>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	461a      	mov	r2, r3
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ed2:	4413      	add	r3, r2
 8014ed4:	b29a      	uxth	r2, r3
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00e      	beq.n	8014f04 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10a      	bne.n	8014f04 <tcp_enqueue_flags+0x1b0>
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d106      	bne.n	8014f04 <tcp_enqueue_flags+0x1b0>
 8014ef6:	4b06      	ldr	r3, [pc, #24]	@ (8014f10 <tcp_enqueue_flags+0x1bc>)
 8014ef8:	f240 4265 	movw	r2, #1125	@ 0x465
 8014efc:	490b      	ldr	r1, [pc, #44]	@ (8014f2c <tcp_enqueue_flags+0x1d8>)
 8014efe:	4806      	ldr	r0, [pc, #24]	@ (8014f18 <tcp_enqueue_flags+0x1c4>)
 8014f00:	f007 f90e 	bl	801c120 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014f04:	2300      	movs	r3, #0
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3718      	adds	r7, #24
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	08020544 	.word	0x08020544
 8014f14:	080209c4 	.word	0x080209c4
 8014f18:	08020598 	.word	0x08020598
 8014f1c:	08020a1c 	.word	0x08020a1c
 8014f20:	08020a3c 	.word	0x08020a3c
 8014f24:	08020a78 	.word	0x08020a78
 8014f28:	08020a90 	.word	0x08020a90
 8014f2c:	08020abc 	.word	0x08020abc

08014f30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014f30:	b5b0      	push	{r4, r5, r7, lr}
 8014f32:	b08a      	sub	sp, #40	@ 0x28
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <tcp_output+0x1c>
 8014f3e:	4b8a      	ldr	r3, [pc, #552]	@ (8015168 <tcp_output+0x238>)
 8014f40:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014f44:	4989      	ldr	r1, [pc, #548]	@ (801516c <tcp_output+0x23c>)
 8014f46:	488a      	ldr	r0, [pc, #552]	@ (8015170 <tcp_output+0x240>)
 8014f48:	f007 f8ea 	bl	801c120 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	7d1b      	ldrb	r3, [r3, #20]
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d106      	bne.n	8014f62 <tcp_output+0x32>
 8014f54:	4b84      	ldr	r3, [pc, #528]	@ (8015168 <tcp_output+0x238>)
 8014f56:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014f5a:	4986      	ldr	r1, [pc, #536]	@ (8015174 <tcp_output+0x244>)
 8014f5c:	4884      	ldr	r0, [pc, #528]	@ (8015170 <tcp_output+0x240>)
 8014f5e:	f007 f8df 	bl	801c120 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014f62:	4b85      	ldr	r3, [pc, #532]	@ (8015178 <tcp_output+0x248>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	687a      	ldr	r2, [r7, #4]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d101      	bne.n	8014f70 <tcp_output+0x40>
    return ERR_OK;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	e1d1      	b.n	8015314 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014f7c:	4293      	cmp	r3, r2
 8014f7e:	bf28      	it	cs
 8014f80:	4613      	movcs	r3, r2
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d10b      	bne.n	8014faa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	8b5b      	ldrh	r3, [r3, #26]
 8014f96:	f003 0302 	and.w	r3, r3, #2
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	f000 81ad 	beq.w	80152fa <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f000 fdf9 	bl	8015b98 <tcp_send_empty_ack>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	e1b4      	b.n	8015314 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014faa:	6879      	ldr	r1, [r7, #4]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	3304      	adds	r3, #4
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff fc76 	bl	80148a4 <tcp_route>
 8014fb8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d102      	bne.n	8014fc6 <tcp_output+0x96>
    return ERR_RTE;
 8014fc0:	f06f 0303 	mvn.w	r3, #3
 8014fc4:	e1a6      	b.n	8015314 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d003      	beq.n	8014fd4 <tcp_output+0xa4>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d111      	bne.n	8014ff8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d002      	beq.n	8014fe0 <tcp_output+0xb0>
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	3304      	adds	r3, #4
 8014fde:	e000      	b.n	8014fe2 <tcp_output+0xb2>
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d102      	bne.n	8014ff0 <tcp_output+0xc0>
      return ERR_RTE;
 8014fea:	f06f 0303 	mvn.w	r3, #3
 8014fee:	e191      	b.n	8015314 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffa:	691b      	ldr	r3, [r3, #16]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7f9 fd43 	bl	800ea8a <lwip_htonl>
 8015004:	4602      	mov	r2, r0
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801500a:	1ad3      	subs	r3, r2, r3
 801500c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801500e:	8912      	ldrh	r2, [r2, #8]
 8015010:	4413      	add	r3, r2
 8015012:	69ba      	ldr	r2, [r7, #24]
 8015014:	429a      	cmp	r2, r3
 8015016:	d227      	bcs.n	8015068 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801501e:	461a      	mov	r2, r3
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	4293      	cmp	r3, r2
 8015024:	d114      	bne.n	8015050 <tcp_output+0x120>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801502a:	2b00      	cmp	r3, #0
 801502c:	d110      	bne.n	8015050 <tcp_output+0x120>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015034:	2b00      	cmp	r3, #0
 8015036:	d10b      	bne.n	8015050 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2200      	movs	r2, #0
 801503c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2201      	movs	r2, #1
 8015044:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2200      	movs	r2, #0
 801504c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	8b5b      	ldrh	r3, [r3, #26]
 8015054:	f003 0302 	and.w	r3, r3, #2
 8015058:	2b00      	cmp	r3, #0
 801505a:	f000 8150 	beq.w	80152fe <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f000 fd9a 	bl	8015b98 <tcp_send_empty_ack>
 8015064:	4603      	mov	r3, r0
 8015066:	e155      	b.n	8015314 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2200      	movs	r2, #0
 801506c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015074:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015076:	6a3b      	ldr	r3, [r7, #32]
 8015078:	2b00      	cmp	r3, #0
 801507a:	f000 811f 	beq.w	80152bc <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801507e:	e002      	b.n	8015086 <tcp_output+0x156>
 8015080:	6a3b      	ldr	r3, [r7, #32]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	623b      	str	r3, [r7, #32]
 8015086:	6a3b      	ldr	r3, [r7, #32]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d1f8      	bne.n	8015080 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801508e:	e115      	b.n	80152bc <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015092:	691b      	ldr	r3, [r3, #16]
 8015094:	899b      	ldrh	r3, [r3, #12]
 8015096:	b29b      	uxth	r3, r3
 8015098:	4618      	mov	r0, r3
 801509a:	f7f9 fce1 	bl	800ea60 <lwip_htons>
 801509e:	4603      	mov	r3, r0
 80150a0:	b2db      	uxtb	r3, r3
 80150a2:	f003 0304 	and.w	r3, r3, #4
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d006      	beq.n	80150b8 <tcp_output+0x188>
 80150aa:	4b2f      	ldr	r3, [pc, #188]	@ (8015168 <tcp_output+0x238>)
 80150ac:	f240 5236 	movw	r2, #1334	@ 0x536
 80150b0:	4932      	ldr	r1, [pc, #200]	@ (801517c <tcp_output+0x24c>)
 80150b2:	482f      	ldr	r0, [pc, #188]	@ (8015170 <tcp_output+0x240>)
 80150b4:	f007 f834 	bl	801c120 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d01f      	beq.n	8015100 <tcp_output+0x1d0>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	8b5b      	ldrh	r3, [r3, #26]
 80150c4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d119      	bne.n	8015100 <tcp_output+0x1d0>
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d00b      	beq.n	80150ec <tcp_output+0x1bc>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d110      	bne.n	8015100 <tcp_output+0x1d0>
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150e2:	891a      	ldrh	r2, [r3, #8]
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d209      	bcs.n	8015100 <tcp_output+0x1d0>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d004      	beq.n	8015100 <tcp_output+0x1d0>
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150fc:	2b0f      	cmp	r3, #15
 80150fe:	d901      	bls.n	8015104 <tcp_output+0x1d4>
 8015100:	2301      	movs	r3, #1
 8015102:	e000      	b.n	8015106 <tcp_output+0x1d6>
 8015104:	2300      	movs	r3, #0
 8015106:	2b00      	cmp	r3, #0
 8015108:	d106      	bne.n	8015118 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	8b5b      	ldrh	r3, [r3, #26]
 801510e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015112:	2b00      	cmp	r3, #0
 8015114:	f000 80e7 	beq.w	80152e6 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	7d1b      	ldrb	r3, [r3, #20]
 801511c:	2b02      	cmp	r3, #2
 801511e:	d00d      	beq.n	801513c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015122:	691b      	ldr	r3, [r3, #16]
 8015124:	899b      	ldrh	r3, [r3, #12]
 8015126:	b29c      	uxth	r4, r3
 8015128:	2010      	movs	r0, #16
 801512a:	f7f9 fc99 	bl	800ea60 <lwip_htons>
 801512e:	4603      	mov	r3, r0
 8015130:	461a      	mov	r2, r3
 8015132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015134:	691b      	ldr	r3, [r3, #16]
 8015136:	4322      	orrs	r2, r4
 8015138:	b292      	uxth	r2, r2
 801513a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801513c:	697a      	ldr	r2, [r7, #20]
 801513e:	6879      	ldr	r1, [r7, #4]
 8015140:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015142:	f000 f90b 	bl	801535c <tcp_output_segment>
 8015146:	4603      	mov	r3, r0
 8015148:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801514a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d016      	beq.n	8015180 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	8b5b      	ldrh	r3, [r3, #26]
 8015156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801515a:	b29a      	uxth	r2, r3
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	835a      	strh	r2, [r3, #26]
      return err;
 8015160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015164:	e0d6      	b.n	8015314 <tcp_output+0x3e4>
 8015166:	bf00      	nop
 8015168:	08020544 	.word	0x08020544
 801516c:	08020ae4 	.word	0x08020ae4
 8015170:	08020598 	.word	0x08020598
 8015174:	08020afc 	.word	0x08020afc
 8015178:	20013d60 	.word	0x20013d60
 801517c:	08020b24 	.word	0x08020b24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8015180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015182:	2200      	movs	r2, #0
 8015184:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	7d1b      	ldrb	r3, [r3, #20]
 8015192:	2b02      	cmp	r3, #2
 8015194:	d006      	beq.n	80151a4 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	8b5b      	ldrh	r3, [r3, #26]
 801519a:	f023 0303 	bic.w	r3, r3, #3
 801519e:	b29a      	uxth	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80151a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a6:	691b      	ldr	r3, [r3, #16]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f9 fc6d 	bl	800ea8a <lwip_htonl>
 80151b0:	4604      	mov	r4, r0
 80151b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b4:	891b      	ldrh	r3, [r3, #8]
 80151b6:	461d      	mov	r5, r3
 80151b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ba:	691b      	ldr	r3, [r3, #16]
 80151bc:	899b      	ldrh	r3, [r3, #12]
 80151be:	b29b      	uxth	r3, r3
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7f9 fc4d 	bl	800ea60 <lwip_htons>
 80151c6:	4603      	mov	r3, r0
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	f003 0303 	and.w	r3, r3, #3
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <tcp_output+0x2a6>
 80151d2:	2301      	movs	r3, #1
 80151d4:	e000      	b.n	80151d8 <tcp_output+0x2a8>
 80151d6:	2300      	movs	r3, #0
 80151d8:	442b      	add	r3, r5
 80151da:	4423      	add	r3, r4
 80151dc:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	da02      	bge.n	80151f0 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80151f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f2:	891b      	ldrh	r3, [r3, #8]
 80151f4:	461c      	mov	r4, r3
 80151f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	899b      	ldrh	r3, [r3, #12]
 80151fc:	b29b      	uxth	r3, r3
 80151fe:	4618      	mov	r0, r3
 8015200:	f7f9 fc2e 	bl	800ea60 <lwip_htons>
 8015204:	4603      	mov	r3, r0
 8015206:	b2db      	uxtb	r3, r3
 8015208:	f003 0303 	and.w	r3, r3, #3
 801520c:	2b00      	cmp	r3, #0
 801520e:	d001      	beq.n	8015214 <tcp_output+0x2e4>
 8015210:	2301      	movs	r3, #1
 8015212:	e000      	b.n	8015216 <tcp_output+0x2e6>
 8015214:	2300      	movs	r3, #0
 8015216:	4423      	add	r3, r4
 8015218:	2b00      	cmp	r3, #0
 801521a:	d049      	beq.n	80152b0 <tcp_output+0x380>
      seg->next = NULL;
 801521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801521e:	2200      	movs	r2, #0
 8015220:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015226:	2b00      	cmp	r3, #0
 8015228:	d105      	bne.n	8015236 <tcp_output+0x306>
        pcb->unacked = seg;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801522e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015232:	623b      	str	r3, [r7, #32]
 8015234:	e03f      	b.n	80152b6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015238:	691b      	ldr	r3, [r3, #16]
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	4618      	mov	r0, r3
 801523e:	f7f9 fc24 	bl	800ea8a <lwip_htonl>
 8015242:	4604      	mov	r4, r0
 8015244:	6a3b      	ldr	r3, [r7, #32]
 8015246:	691b      	ldr	r3, [r3, #16]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	4618      	mov	r0, r3
 801524c:	f7f9 fc1d 	bl	800ea8a <lwip_htonl>
 8015250:	4603      	mov	r3, r0
 8015252:	1ae3      	subs	r3, r4, r3
 8015254:	2b00      	cmp	r3, #0
 8015256:	da24      	bge.n	80152a2 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	3370      	adds	r3, #112	@ 0x70
 801525c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801525e:	e002      	b.n	8015266 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d011      	beq.n	8015292 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801526e:	69fb      	ldr	r3, [r7, #28]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	691b      	ldr	r3, [r3, #16]
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	4618      	mov	r0, r3
 8015278:	f7f9 fc07 	bl	800ea8a <lwip_htonl>
 801527c:	4604      	mov	r4, r0
 801527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015280:	691b      	ldr	r3, [r3, #16]
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	4618      	mov	r0, r3
 8015286:	f7f9 fc00 	bl	800ea8a <lwip_htonl>
 801528a:	4603      	mov	r3, r0
 801528c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801528e:	2b00      	cmp	r3, #0
 8015290:	dbe6      	blt.n	8015260 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015298:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801529e:	601a      	str	r2, [r3, #0]
 80152a0:	e009      	b.n	80152b6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80152a2:	6a3b      	ldr	r3, [r7, #32]
 80152a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152a6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80152a8:	6a3b      	ldr	r3, [r7, #32]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	623b      	str	r3, [r7, #32]
 80152ae:	e002      	b.n	80152b6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80152b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80152b2:	f7fc fc24 	bl	8011afe <tcp_seg_free>
    }
    seg = pcb->unsent;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80152bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d012      	beq.n	80152e8 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80152c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c4:	691b      	ldr	r3, [r3, #16]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7f9 fbde 	bl	800ea8a <lwip_htonl>
 80152ce:	4602      	mov	r2, r0
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152d4:	1ad3      	subs	r3, r2, r3
 80152d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152d8:	8912      	ldrh	r2, [r2, #8]
 80152da:	4413      	add	r3, r2
  while (seg != NULL &&
 80152dc:	69ba      	ldr	r2, [r7, #24]
 80152de:	429a      	cmp	r2, r3
 80152e0:	f4bf aed6 	bcs.w	8015090 <tcp_output+0x160>
 80152e4:	e000      	b.n	80152e8 <tcp_output+0x3b8>
      break;
 80152e6:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d108      	bne.n	8015302 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2200      	movs	r2, #0
 80152f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80152f8:	e004      	b.n	8015304 <tcp_output+0x3d4>
    goto output_done;
 80152fa:	bf00      	nop
 80152fc:	e002      	b.n	8015304 <tcp_output+0x3d4>
    goto output_done;
 80152fe:	bf00      	nop
 8015300:	e000      	b.n	8015304 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015302:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	8b5b      	ldrh	r3, [r3, #26]
 8015308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801530c:	b29a      	uxth	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3728      	adds	r7, #40	@ 0x28
 8015318:	46bd      	mov	sp, r7
 801531a:	bdb0      	pop	{r4, r5, r7, pc}

0801531c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d106      	bne.n	8015338 <tcp_output_segment_busy+0x1c>
 801532a:	4b09      	ldr	r3, [pc, #36]	@ (8015350 <tcp_output_segment_busy+0x34>)
 801532c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015330:	4908      	ldr	r1, [pc, #32]	@ (8015354 <tcp_output_segment_busy+0x38>)
 8015332:	4809      	ldr	r0, [pc, #36]	@ (8015358 <tcp_output_segment_busy+0x3c>)
 8015334:	f006 fef4 	bl	801c120 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	7b9b      	ldrb	r3, [r3, #14]
 801533e:	2b01      	cmp	r3, #1
 8015340:	d001      	beq.n	8015346 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015342:	2301      	movs	r3, #1
 8015344:	e000      	b.n	8015348 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015346:	2300      	movs	r3, #0
}
 8015348:	4618      	mov	r0, r3
 801534a:	3708      	adds	r7, #8
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	08020544 	.word	0x08020544
 8015354:	08020b3c 	.word	0x08020b3c
 8015358:	08020598 	.word	0x08020598

0801535c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801535c:	b5b0      	push	{r4, r5, r7, lr}
 801535e:	b08c      	sub	sp, #48	@ 0x30
 8015360:	af04      	add	r7, sp, #16
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d106      	bne.n	801537c <tcp_output_segment+0x20>
 801536e:	4b6d      	ldr	r3, [pc, #436]	@ (8015524 <tcp_output_segment+0x1c8>)
 8015370:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015374:	496c      	ldr	r1, [pc, #432]	@ (8015528 <tcp_output_segment+0x1cc>)
 8015376:	486d      	ldr	r0, [pc, #436]	@ (801552c <tcp_output_segment+0x1d0>)
 8015378:	f006 fed2 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d106      	bne.n	8015390 <tcp_output_segment+0x34>
 8015382:	4b68      	ldr	r3, [pc, #416]	@ (8015524 <tcp_output_segment+0x1c8>)
 8015384:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015388:	4969      	ldr	r1, [pc, #420]	@ (8015530 <tcp_output_segment+0x1d4>)
 801538a:	4868      	ldr	r0, [pc, #416]	@ (801552c <tcp_output_segment+0x1d0>)
 801538c:	f006 fec8 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d106      	bne.n	80153a4 <tcp_output_segment+0x48>
 8015396:	4b63      	ldr	r3, [pc, #396]	@ (8015524 <tcp_output_segment+0x1c8>)
 8015398:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801539c:	4965      	ldr	r1, [pc, #404]	@ (8015534 <tcp_output_segment+0x1d8>)
 801539e:	4863      	ldr	r0, [pc, #396]	@ (801552c <tcp_output_segment+0x1d0>)
 80153a0:	f006 febe 	bl	801c120 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f7ff ffb9 	bl	801531c <tcp_output_segment_busy>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d001      	beq.n	80153b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	e0b3      	b.n	801551c <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	691c      	ldr	r4, [r3, #16]
 80153bc:	4610      	mov	r0, r2
 80153be:	f7f9 fb64 	bl	800ea8a <lwip_htonl>
 80153c2:	4603      	mov	r3, r0
 80153c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	691c      	ldr	r4, [r3, #16]
 80153ce:	4610      	mov	r0, r2
 80153d0:	f7f9 fb46 	bl	800ea60 <lwip_htons>
 80153d4:	4603      	mov	r3, r0
 80153d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153dc:	68ba      	ldr	r2, [r7, #8]
 80153de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80153e0:	441a      	add	r2, r3
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	691b      	ldr	r3, [r3, #16]
 80153ea:	3314      	adds	r3, #20
 80153ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	7b1b      	ldrb	r3, [r3, #12]
 80153f2:	f003 0301 	and.w	r3, r3, #1
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d015      	beq.n	8015426 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	3304      	adds	r3, #4
 80153fe:	461a      	mov	r2, r3
 8015400:	6879      	ldr	r1, [r7, #4]
 8015402:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8015406:	f7fc fe71 	bl	80120ec <tcp_eff_send_mss_netif>
 801540a:	4603      	mov	r3, r0
 801540c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801540e:	8b7b      	ldrh	r3, [r7, #26]
 8015410:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015414:	4618      	mov	r0, r3
 8015416:	f7f9 fb38 	bl	800ea8a <lwip_htonl>
 801541a:	4602      	mov	r2, r0
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	3304      	adds	r3, #4
 8015424:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801542c:	2b00      	cmp	r3, #0
 801542e:	da02      	bge.n	8015436 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	2200      	movs	r2, #0
 8015434:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801543a:	2b00      	cmp	r3, #0
 801543c:	d10c      	bne.n	8015458 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801543e:	4b3e      	ldr	r3, [pc, #248]	@ (8015538 <tcp_output_segment+0x1dc>)
 8015440:	681a      	ldr	r2, [r3, #0]
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	691b      	ldr	r3, [r3, #16]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	4618      	mov	r0, r3
 801544e:	f7f9 fb1c 	bl	800ea8a <lwip_htonl>
 8015452:	4602      	mov	r2, r0
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	691a      	ldr	r2, [r3, #16]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	1ad3      	subs	r3, r2, r3
 8015464:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	8959      	ldrh	r1, [r3, #10]
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	8b3a      	ldrh	r2, [r7, #24]
 8015472:	1a8a      	subs	r2, r1, r2
 8015474:	b292      	uxth	r2, r2
 8015476:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	685b      	ldr	r3, [r3, #4]
 801547c:	8919      	ldrh	r1, [r3, #8]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	8b3a      	ldrh	r2, [r7, #24]
 8015484:	1a8a      	subs	r2, r1, r2
 8015486:	b292      	uxth	r2, r2
 8015488:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	685b      	ldr	r3, [r3, #4]
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	6912      	ldr	r2, [r2, #16]
 8015492:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	691b      	ldr	r3, [r3, #16]
 8015498:	2200      	movs	r2, #0
 801549a:	741a      	strb	r2, [r3, #16]
 801549c:	2200      	movs	r2, #0
 801549e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	691a      	ldr	r2, [r3, #16]
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	7b1b      	ldrb	r3, [r3, #12]
 80154a8:	f003 0301 	and.w	r3, r3, #1
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d001      	beq.n	80154b4 <tcp_output_segment+0x158>
 80154b0:	2318      	movs	r3, #24
 80154b2:	e000      	b.n	80154b6 <tcp_output_segment+0x15a>
 80154b4:	2314      	movs	r3, #20
 80154b6:	4413      	add	r3, r2
 80154b8:	69fa      	ldr	r2, [r7, #28]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d006      	beq.n	80154cc <tcp_output_segment+0x170>
 80154be:	4b19      	ldr	r3, [pc, #100]	@ (8015524 <tcp_output_segment+0x1c8>)
 80154c0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80154c4:	491d      	ldr	r1, [pc, #116]	@ (801553c <tcp_output_segment+0x1e0>)
 80154c6:	4819      	ldr	r0, [pc, #100]	@ (801552c <tcp_output_segment+0x1d0>)
 80154c8:	f006 fe2a 	bl	801c120 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80154d4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80154d6:	68bd      	ldr	r5, [r7, #8]
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80154dc:	68fa      	ldr	r2, [r7, #12]
 80154de:	6914      	ldr	r4, [r2, #16]
 80154e0:	9300      	str	r3, [sp, #0]
 80154e2:	462b      	mov	r3, r5
 80154e4:	460a      	mov	r2, r1
 80154e6:	2106      	movs	r1, #6
 80154e8:	f7f9 fbec 	bl	800ecc4 <ip_chksum_pseudo>
 80154ec:	4603      	mov	r3, r0
 80154ee:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	6858      	ldr	r0, [r3, #4]
 80154f4:	68b9      	ldr	r1, [r7, #8]
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	1d1c      	adds	r4, r3, #4
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	7add      	ldrb	r5, [r3, #11]
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	7a9b      	ldrb	r3, [r3, #10]
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	9202      	str	r2, [sp, #8]
 8015506:	2206      	movs	r2, #6
 8015508:	9201      	str	r2, [sp, #4]
 801550a:	9300      	str	r3, [sp, #0]
 801550c:	462b      	mov	r3, r5
 801550e:	4622      	mov	r2, r4
 8015510:	f004 fdaa 	bl	801a068 <ip4_output_if>
 8015514:	4603      	mov	r3, r0
 8015516:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015518:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3720      	adds	r7, #32
 8015520:	46bd      	mov	sp, r7
 8015522:	bdb0      	pop	{r4, r5, r7, pc}
 8015524:	08020544 	.word	0x08020544
 8015528:	08020b64 	.word	0x08020b64
 801552c:	08020598 	.word	0x08020598
 8015530:	08020b84 	.word	0x08020b84
 8015534:	08020ba4 	.word	0x08020ba4
 8015538:	20013d10 	.word	0x20013d10
 801553c:	08020bc8 	.word	0x08020bc8

08015540 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015540:	b5b0      	push	{r4, r5, r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d106      	bne.n	801555c <tcp_rexmit_rto_prepare+0x1c>
 801554e:	4b36      	ldr	r3, [pc, #216]	@ (8015628 <tcp_rexmit_rto_prepare+0xe8>)
 8015550:	f240 6263 	movw	r2, #1635	@ 0x663
 8015554:	4935      	ldr	r1, [pc, #212]	@ (801562c <tcp_rexmit_rto_prepare+0xec>)
 8015556:	4836      	ldr	r0, [pc, #216]	@ (8015630 <tcp_rexmit_rto_prepare+0xf0>)
 8015558:	f006 fde2 	bl	801c120 <iprintf>

  if (pcb->unacked == NULL) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015560:	2b00      	cmp	r3, #0
 8015562:	d102      	bne.n	801556a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015564:	f06f 0305 	mvn.w	r3, #5
 8015568:	e059      	b.n	801561e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801556e:	60fb      	str	r3, [r7, #12]
 8015570:	e00b      	b.n	801558a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f7ff fed2 	bl	801531c <tcp_output_segment_busy>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d002      	beq.n	8015584 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801557e:	f06f 0305 	mvn.w	r3, #5
 8015582:	e04c      	b.n	801561e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	60fb      	str	r3, [r7, #12]
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d1ef      	bne.n	8015572 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015592:	68f8      	ldr	r0, [r7, #12]
 8015594:	f7ff fec2 	bl	801531c <tcp_output_segment_busy>
 8015598:	4603      	mov	r3, r0
 801559a:	2b00      	cmp	r3, #0
 801559c:	d002      	beq.n	80155a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801559e:	f06f 0305 	mvn.w	r3, #5
 80155a2:	e03c      	b.n	801561e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d104      	bne.n	80155be <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	895a      	ldrh	r2, [r3, #10]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2200      	movs	r2, #0
 80155ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	8b5b      	ldrh	r3, [r3, #26]
 80155d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	691b      	ldr	r3, [r3, #16]
 80155de:	685b      	ldr	r3, [r3, #4]
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7f9 fa52 	bl	800ea8a <lwip_htonl>
 80155e6:	4604      	mov	r4, r0
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	891b      	ldrh	r3, [r3, #8]
 80155ec:	461d      	mov	r5, r3
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	691b      	ldr	r3, [r3, #16]
 80155f2:	899b      	ldrh	r3, [r3, #12]
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7f9 fa32 	bl	800ea60 <lwip_htons>
 80155fc:	4603      	mov	r3, r0
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	f003 0303 	and.w	r3, r3, #3
 8015604:	2b00      	cmp	r3, #0
 8015606:	d001      	beq.n	801560c <tcp_rexmit_rto_prepare+0xcc>
 8015608:	2301      	movs	r3, #1
 801560a:	e000      	b.n	801560e <tcp_rexmit_rto_prepare+0xce>
 801560c:	2300      	movs	r3, #0
 801560e:	442b      	add	r3, r5
 8015610:	18e2      	adds	r2, r4, r3
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2200      	movs	r2, #0
 801561a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801561c:	2300      	movs	r3, #0
}
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bdb0      	pop	{r4, r5, r7, pc}
 8015626:	bf00      	nop
 8015628:	08020544 	.word	0x08020544
 801562c:	08020bdc 	.word	0x08020bdc
 8015630:	08020598 	.word	0x08020598

08015634 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d106      	bne.n	8015650 <tcp_rexmit_rto_commit+0x1c>
 8015642:	4b0d      	ldr	r3, [pc, #52]	@ (8015678 <tcp_rexmit_rto_commit+0x44>)
 8015644:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015648:	490c      	ldr	r1, [pc, #48]	@ (801567c <tcp_rexmit_rto_commit+0x48>)
 801564a:	480d      	ldr	r0, [pc, #52]	@ (8015680 <tcp_rexmit_rto_commit+0x4c>)
 801564c:	f006 fd68 	bl	801c120 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015656:	2bff      	cmp	r3, #255	@ 0xff
 8015658:	d007      	beq.n	801566a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015660:	3301      	adds	r3, #1
 8015662:	b2da      	uxtb	r2, r3
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f7ff fc60 	bl	8014f30 <tcp_output>
}
 8015670:	bf00      	nop
 8015672:	3708      	adds	r7, #8
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	08020544 	.word	0x08020544
 801567c:	08020c00 	.word	0x08020c00
 8015680:	08020598 	.word	0x08020598

08015684 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d106      	bne.n	80156a0 <tcp_rexmit_rto+0x1c>
 8015692:	4b0a      	ldr	r3, [pc, #40]	@ (80156bc <tcp_rexmit_rto+0x38>)
 8015694:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015698:	4909      	ldr	r1, [pc, #36]	@ (80156c0 <tcp_rexmit_rto+0x3c>)
 801569a:	480a      	ldr	r0, [pc, #40]	@ (80156c4 <tcp_rexmit_rto+0x40>)
 801569c:	f006 fd40 	bl	801c120 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff ff4d 	bl	8015540 <tcp_rexmit_rto_prepare>
 80156a6:	4603      	mov	r3, r0
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d102      	bne.n	80156b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f7ff ffc1 	bl	8015634 <tcp_rexmit_rto_commit>
  }
}
 80156b2:	bf00      	nop
 80156b4:	3708      	adds	r7, #8
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	bf00      	nop
 80156bc:	08020544 	.word	0x08020544
 80156c0:	08020c24 	.word	0x08020c24
 80156c4:	08020598 	.word	0x08020598

080156c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80156c8:	b590      	push	{r4, r7, lr}
 80156ca:	b085      	sub	sp, #20
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d106      	bne.n	80156e4 <tcp_rexmit+0x1c>
 80156d6:	4b2f      	ldr	r3, [pc, #188]	@ (8015794 <tcp_rexmit+0xcc>)
 80156d8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80156dc:	492e      	ldr	r1, [pc, #184]	@ (8015798 <tcp_rexmit+0xd0>)
 80156de:	482f      	ldr	r0, [pc, #188]	@ (801579c <tcp_rexmit+0xd4>)
 80156e0:	f006 fd1e 	bl	801c120 <iprintf>

  if (pcb->unacked == NULL) {
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d102      	bne.n	80156f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80156ec:	f06f 0305 	mvn.w	r3, #5
 80156f0:	e04c      	b.n	801578c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80156f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80156f8:	68b8      	ldr	r0, [r7, #8]
 80156fa:	f7ff fe0f 	bl	801531c <tcp_output_segment_busy>
 80156fe:	4603      	mov	r3, r0
 8015700:	2b00      	cmp	r3, #0
 8015702:	d002      	beq.n	801570a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015704:	f06f 0305 	mvn.w	r3, #5
 8015708:	e040      	b.n	801578c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	336c      	adds	r3, #108	@ 0x6c
 8015716:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015718:	e002      	b.n	8015720 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d011      	beq.n	801574c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	685b      	ldr	r3, [r3, #4]
 8015730:	4618      	mov	r0, r3
 8015732:	f7f9 f9aa 	bl	800ea8a <lwip_htonl>
 8015736:	4604      	mov	r4, r0
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	691b      	ldr	r3, [r3, #16]
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	4618      	mov	r0, r3
 8015740:	f7f9 f9a3 	bl	800ea8a <lwip_htonl>
 8015744:	4603      	mov	r3, r0
 8015746:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015748:	2b00      	cmp	r3, #0
 801574a:	dbe6      	blt.n	801571a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	68ba      	ldr	r2, [r7, #8]
 8015758:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801575a:	68bb      	ldr	r3, [r7, #8]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d103      	bne.n	801576a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2200      	movs	r2, #0
 8015766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015770:	2bff      	cmp	r3, #255	@ 0xff
 8015772:	d007      	beq.n	8015784 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801577a:	3301      	adds	r3, #1
 801577c:	b2da      	uxtb	r2, r3
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801578a:	2300      	movs	r3, #0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3714      	adds	r7, #20
 8015790:	46bd      	mov	sp, r7
 8015792:	bd90      	pop	{r4, r7, pc}
 8015794:	08020544 	.word	0x08020544
 8015798:	08020c40 	.word	0x08020c40
 801579c:	08020598 	.word	0x08020598

080157a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d106      	bne.n	80157bc <tcp_rexmit_fast+0x1c>
 80157ae:	4b2a      	ldr	r3, [pc, #168]	@ (8015858 <tcp_rexmit_fast+0xb8>)
 80157b0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80157b4:	4929      	ldr	r1, [pc, #164]	@ (801585c <tcp_rexmit_fast+0xbc>)
 80157b6:	482a      	ldr	r0, [pc, #168]	@ (8015860 <tcp_rexmit_fast+0xc0>)
 80157b8:	f006 fcb2 	bl	801c120 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d044      	beq.n	801584e <tcp_rexmit_fast+0xae>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	8b5b      	ldrh	r3, [r3, #26]
 80157c8:	f003 0304 	and.w	r3, r3, #4
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d13e      	bne.n	801584e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f7ff ff79 	bl	80156c8 <tcp_rexmit>
 80157d6:	4603      	mov	r3, r0
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d138      	bne.n	801584e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80157e8:	4293      	cmp	r3, r2
 80157ea:	bf28      	it	cs
 80157ec:	4613      	movcs	r3, r2
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	0fda      	lsrs	r2, r3, #31
 80157f2:	4413      	add	r3, r2
 80157f4:	105b      	asrs	r3, r3, #1
 80157f6:	b29a      	uxth	r2, r3
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015804:	461a      	mov	r2, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	429a      	cmp	r2, r3
 801580e:	d206      	bcs.n	801581e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	b29a      	uxth	r2, r3
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015828:	4619      	mov	r1, r3
 801582a:	0049      	lsls	r1, r1, #1
 801582c:	440b      	add	r3, r1
 801582e:	b29b      	uxth	r3, r3
 8015830:	4413      	add	r3, r2
 8015832:	b29a      	uxth	r2, r3
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	8b5b      	ldrh	r3, [r3, #26]
 801583e:	f043 0304 	orr.w	r3, r3, #4
 8015842:	b29a      	uxth	r2, r3
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2200      	movs	r2, #0
 801584c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801584e:	bf00      	nop
 8015850:	3708      	adds	r7, #8
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	08020544 	.word	0x08020544
 801585c:	08020c58 	.word	0x08020c58
 8015860:	08020598 	.word	0x08020598

08015864 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	607b      	str	r3, [r7, #4]
 801586e:	460b      	mov	r3, r1
 8015870:	817b      	strh	r3, [r7, #10]
 8015872:	4613      	mov	r3, r2
 8015874:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015876:	897a      	ldrh	r2, [r7, #10]
 8015878:	893b      	ldrh	r3, [r7, #8]
 801587a:	4413      	add	r3, r2
 801587c:	b29b      	uxth	r3, r3
 801587e:	3314      	adds	r3, #20
 8015880:	b29b      	uxth	r3, r3
 8015882:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015886:	4619      	mov	r1, r3
 8015888:	2022      	movs	r0, #34	@ 0x22
 801588a:	f7fa fb23 	bl	800fed4 <pbuf_alloc>
 801588e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d04d      	beq.n	8015932 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015896:	897b      	ldrh	r3, [r7, #10]
 8015898:	3313      	adds	r3, #19
 801589a:	697a      	ldr	r2, [r7, #20]
 801589c:	8952      	ldrh	r2, [r2, #10]
 801589e:	4293      	cmp	r3, r2
 80158a0:	db06      	blt.n	80158b0 <tcp_output_alloc_header_common+0x4c>
 80158a2:	4b26      	ldr	r3, [pc, #152]	@ (801593c <tcp_output_alloc_header_common+0xd8>)
 80158a4:	f240 7223 	movw	r2, #1827	@ 0x723
 80158a8:	4925      	ldr	r1, [pc, #148]	@ (8015940 <tcp_output_alloc_header_common+0xdc>)
 80158aa:	4826      	ldr	r0, [pc, #152]	@ (8015944 <tcp_output_alloc_header_common+0xe0>)
 80158ac:	f006 fc38 	bl	801c120 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80158b6:	8c3b      	ldrh	r3, [r7, #32]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7f9 f8d1 	bl	800ea60 <lwip_htons>
 80158be:	4603      	mov	r3, r0
 80158c0:	461a      	mov	r2, r3
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80158c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f9 f8c9 	bl	800ea60 <lwip_htons>
 80158ce:	4603      	mov	r3, r0
 80158d0:	461a      	mov	r2, r3
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	687a      	ldr	r2, [r7, #4]
 80158da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f7f9 f8d4 	bl	800ea8a <lwip_htonl>
 80158e2:	4602      	mov	r2, r0
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80158e8:	897b      	ldrh	r3, [r7, #10]
 80158ea:	089b      	lsrs	r3, r3, #2
 80158ec:	b29b      	uxth	r3, r3
 80158ee:	3305      	adds	r3, #5
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	031b      	lsls	r3, r3, #12
 80158f4:	b29a      	uxth	r2, r3
 80158f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	4313      	orrs	r3, r2
 80158fe:	b29b      	uxth	r3, r3
 8015900:	4618      	mov	r0, r3
 8015902:	f7f9 f8ad 	bl	800ea60 <lwip_htons>
 8015906:	4603      	mov	r3, r0
 8015908:	461a      	mov	r2, r3
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801590e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015910:	4618      	mov	r0, r3
 8015912:	f7f9 f8a5 	bl	800ea60 <lwip_htons>
 8015916:	4603      	mov	r3, r0
 8015918:	461a      	mov	r2, r3
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	2200      	movs	r2, #0
 8015922:	741a      	strb	r2, [r3, #16]
 8015924:	2200      	movs	r2, #0
 8015926:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	2200      	movs	r2, #0
 801592c:	749a      	strb	r2, [r3, #18]
 801592e:	2200      	movs	r2, #0
 8015930:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015932:	697b      	ldr	r3, [r7, #20]
}
 8015934:	4618      	mov	r0, r3
 8015936:	3718      	adds	r7, #24
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	08020544 	.word	0x08020544
 8015940:	08020c78 	.word	0x08020c78
 8015944:	08020598 	.word	0x08020598

08015948 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015948:	b5b0      	push	{r4, r5, r7, lr}
 801594a:	b08a      	sub	sp, #40	@ 0x28
 801594c:	af04      	add	r7, sp, #16
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	607b      	str	r3, [r7, #4]
 8015952:	460b      	mov	r3, r1
 8015954:	817b      	strh	r3, [r7, #10]
 8015956:	4613      	mov	r3, r2
 8015958:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d106      	bne.n	801596e <tcp_output_alloc_header+0x26>
 8015960:	4b15      	ldr	r3, [pc, #84]	@ (80159b8 <tcp_output_alloc_header+0x70>)
 8015962:	f240 7242 	movw	r2, #1858	@ 0x742
 8015966:	4915      	ldr	r1, [pc, #84]	@ (80159bc <tcp_output_alloc_header+0x74>)
 8015968:	4815      	ldr	r0, [pc, #84]	@ (80159c0 <tcp_output_alloc_header+0x78>)
 801596a:	f006 fbd9 	bl	801c120 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	8adb      	ldrh	r3, [r3, #22]
 8015976:	68fa      	ldr	r2, [r7, #12]
 8015978:	8b12      	ldrh	r2, [r2, #24]
 801597a:	68f9      	ldr	r1, [r7, #12]
 801597c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801597e:	893d      	ldrh	r5, [r7, #8]
 8015980:	897c      	ldrh	r4, [r7, #10]
 8015982:	9103      	str	r1, [sp, #12]
 8015984:	2110      	movs	r1, #16
 8015986:	9102      	str	r1, [sp, #8]
 8015988:	9201      	str	r2, [sp, #4]
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	462a      	mov	r2, r5
 8015990:	4621      	mov	r1, r4
 8015992:	f7ff ff67 	bl	8015864 <tcp_output_alloc_header_common>
 8015996:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d006      	beq.n	80159ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159a2:	68fa      	ldr	r2, [r7, #12]
 80159a4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80159a6:	441a      	add	r2, r3
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80159ac:	697b      	ldr	r3, [r7, #20]
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3718      	adds	r7, #24
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bdb0      	pop	{r4, r5, r7, pc}
 80159b6:	bf00      	nop
 80159b8:	08020544 	.word	0x08020544
 80159bc:	08020ca8 	.word	0x08020ca8
 80159c0:	08020598 	.word	0x08020598

080159c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b088      	sub	sp, #32
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	4611      	mov	r1, r2
 80159d0:	461a      	mov	r2, r3
 80159d2:	460b      	mov	r3, r1
 80159d4:	71fb      	strb	r3, [r7, #7]
 80159d6:	4613      	mov	r3, r2
 80159d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80159da:	2300      	movs	r3, #0
 80159dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d106      	bne.n	80159f2 <tcp_output_fill_options+0x2e>
 80159e4:	4b12      	ldr	r3, [pc, #72]	@ (8015a30 <tcp_output_fill_options+0x6c>)
 80159e6:	f240 7256 	movw	r2, #1878	@ 0x756
 80159ea:	4912      	ldr	r1, [pc, #72]	@ (8015a34 <tcp_output_fill_options+0x70>)
 80159ec:	4812      	ldr	r0, [pc, #72]	@ (8015a38 <tcp_output_fill_options+0x74>)
 80159ee:	f006 fb97 	bl	801c120 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80159f8:	69bb      	ldr	r3, [r7, #24]
 80159fa:	3314      	adds	r3, #20
 80159fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80159fe:	8bfb      	ldrh	r3, [r7, #30]
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	461a      	mov	r2, r3
 8015a04:	79fb      	ldrb	r3, [r7, #7]
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	f003 0304 	and.w	r3, r3, #4
 8015a0c:	4413      	add	r3, r2
 8015a0e:	3314      	adds	r3, #20
 8015a10:	69ba      	ldr	r2, [r7, #24]
 8015a12:	4413      	add	r3, r2
 8015a14:	697a      	ldr	r2, [r7, #20]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d006      	beq.n	8015a28 <tcp_output_fill_options+0x64>
 8015a1a:	4b05      	ldr	r3, [pc, #20]	@ (8015a30 <tcp_output_fill_options+0x6c>)
 8015a1c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015a20:	4906      	ldr	r1, [pc, #24]	@ (8015a3c <tcp_output_fill_options+0x78>)
 8015a22:	4805      	ldr	r0, [pc, #20]	@ (8015a38 <tcp_output_fill_options+0x74>)
 8015a24:	f006 fb7c 	bl	801c120 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015a28:	bf00      	nop
 8015a2a:	3720      	adds	r7, #32
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	08020544 	.word	0x08020544
 8015a34:	08020cd0 	.word	0x08020cd0
 8015a38:	08020598 	.word	0x08020598
 8015a3c:	08020bc8 	.word	0x08020bc8

08015a40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b08c      	sub	sp, #48	@ 0x30
 8015a44:	af04      	add	r7, sp, #16
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	607a      	str	r2, [r7, #4]
 8015a4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d106      	bne.n	8015a62 <tcp_output_control_segment+0x22>
 8015a54:	4b24      	ldr	r3, [pc, #144]	@ (8015ae8 <tcp_output_control_segment+0xa8>)
 8015a56:	f240 7287 	movw	r2, #1927	@ 0x787
 8015a5a:	4924      	ldr	r1, [pc, #144]	@ (8015aec <tcp_output_control_segment+0xac>)
 8015a5c:	4824      	ldr	r0, [pc, #144]	@ (8015af0 <tcp_output_control_segment+0xb0>)
 8015a5e:	f006 fb5f 	bl	801c120 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015a62:	683a      	ldr	r2, [r7, #0]
 8015a64:	6879      	ldr	r1, [r7, #4]
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f7fe ff1c 	bl	80148a4 <tcp_route>
 8015a6c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d102      	bne.n	8015a7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015a74:	23fc      	movs	r3, #252	@ 0xfc
 8015a76:	77fb      	strb	r3, [r7, #31]
 8015a78:	e02c      	b.n	8015ad4 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	891a      	ldrh	r2, [r3, #8]
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2106      	movs	r1, #6
 8015a8c:	68b8      	ldr	r0, [r7, #8]
 8015a8e:	f7f9 f919 	bl	800ecc4 <ip_chksum_pseudo>
 8015a92:	4603      	mov	r3, r0
 8015a94:	461a      	mov	r2, r3
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d006      	beq.n	8015aae <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	7adb      	ldrb	r3, [r3, #11]
 8015aa4:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	7a9b      	ldrb	r3, [r3, #10]
 8015aaa:	777b      	strb	r3, [r7, #29]
 8015aac:	e003      	b.n	8015ab6 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015aae:	23ff      	movs	r3, #255	@ 0xff
 8015ab0:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015ab6:	7fba      	ldrb	r2, [r7, #30]
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	9302      	str	r3, [sp, #8]
 8015abc:	2306      	movs	r3, #6
 8015abe:	9301      	str	r3, [sp, #4]
 8015ac0:	7f7b      	ldrb	r3, [r7, #29]
 8015ac2:	9300      	str	r3, [sp, #0]
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	683a      	ldr	r2, [r7, #0]
 8015ac8:	6879      	ldr	r1, [r7, #4]
 8015aca:	68b8      	ldr	r0, [r7, #8]
 8015acc:	f004 facc 	bl	801a068 <ip4_output_if>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015ad4:	68b8      	ldr	r0, [r7, #8]
 8015ad6:	f7fa fce5 	bl	80104a4 <pbuf_free>
  return err;
 8015ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3720      	adds	r7, #32
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	08020544 	.word	0x08020544
 8015aec:	08020cf8 	.word	0x08020cf8
 8015af0:	08020598 	.word	0x08020598

08015af4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015af4:	b590      	push	{r4, r7, lr}
 8015af6:	b08b      	sub	sp, #44	@ 0x2c
 8015af8:	af04      	add	r7, sp, #16
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	60b9      	str	r1, [r7, #8]
 8015afe:	607a      	str	r2, [r7, #4]
 8015b00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d106      	bne.n	8015b16 <tcp_rst+0x22>
 8015b08:	4b1f      	ldr	r3, [pc, #124]	@ (8015b88 <tcp_rst+0x94>)
 8015b0a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015b0e:	491f      	ldr	r1, [pc, #124]	@ (8015b8c <tcp_rst+0x98>)
 8015b10:	481f      	ldr	r0, [pc, #124]	@ (8015b90 <tcp_rst+0x9c>)
 8015b12:	f006 fb05 	bl	801c120 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d106      	bne.n	8015b2a <tcp_rst+0x36>
 8015b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8015b88 <tcp_rst+0x94>)
 8015b1e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015b22:	491c      	ldr	r1, [pc, #112]	@ (8015b94 <tcp_rst+0xa0>)
 8015b24:	481a      	ldr	r0, [pc, #104]	@ (8015b90 <tcp_rst+0x9c>)
 8015b26:	f006 fafb 	bl	801c120 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015b2e:	f24a 032d 	movw	r3, #41005	@ 0xa02d
 8015b32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015b34:	7dfb      	ldrb	r3, [r7, #23]
 8015b36:	b29c      	uxth	r4, r3
 8015b38:	68b8      	ldr	r0, [r7, #8]
 8015b3a:	f7f8 ffa6 	bl	800ea8a <lwip_htonl>
 8015b3e:	4602      	mov	r2, r0
 8015b40:	8abb      	ldrh	r3, [r7, #20]
 8015b42:	9303      	str	r3, [sp, #12]
 8015b44:	2314      	movs	r3, #20
 8015b46:	9302      	str	r3, [sp, #8]
 8015b48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015b4a:	9301      	str	r3, [sp, #4]
 8015b4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	4613      	mov	r3, r2
 8015b52:	2200      	movs	r2, #0
 8015b54:	4621      	mov	r1, r4
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	f7ff fe84 	bl	8015864 <tcp_output_alloc_header_common>
 8015b5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00c      	beq.n	8015b7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015b64:	7dfb      	ldrb	r3, [r7, #23]
 8015b66:	2200      	movs	r2, #0
 8015b68:	6939      	ldr	r1, [r7, #16]
 8015b6a:	68f8      	ldr	r0, [r7, #12]
 8015b6c:	f7ff ff2a 	bl	80159c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b72:	683a      	ldr	r2, [r7, #0]
 8015b74:	6939      	ldr	r1, [r7, #16]
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	f7ff ff62 	bl	8015a40 <tcp_output_control_segment>
 8015b7c:	e000      	b.n	8015b80 <tcp_rst+0x8c>
    return;
 8015b7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015b80:	371c      	adds	r7, #28
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd90      	pop	{r4, r7, pc}
 8015b86:	bf00      	nop
 8015b88:	08020544 	.word	0x08020544
 8015b8c:	08020d24 	.word	0x08020d24
 8015b90:	08020598 	.word	0x08020598
 8015b94:	08020d40 	.word	0x08020d40

08015b98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015b98:	b590      	push	{r4, r7, lr}
 8015b9a:	b087      	sub	sp, #28
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d106      	bne.n	8015bbc <tcp_send_empty_ack+0x24>
 8015bae:	4b28      	ldr	r3, [pc, #160]	@ (8015c50 <tcp_send_empty_ack+0xb8>)
 8015bb0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015bb4:	4927      	ldr	r1, [pc, #156]	@ (8015c54 <tcp_send_empty_ack+0xbc>)
 8015bb6:	4828      	ldr	r0, [pc, #160]	@ (8015c58 <tcp_send_empty_ack+0xc0>)
 8015bb8:	f006 fab2 	bl	801c120 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015bbc:	7dfb      	ldrb	r3, [r7, #23]
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	f003 0304 	and.w	r3, r3, #4
 8015bc6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015bc8:	7d7b      	ldrb	r3, [r7, #21]
 8015bca:	b29c      	uxth	r4, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7f8 ff5a 	bl	800ea8a <lwip_htonl>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2200      	movs	r2, #0
 8015bda:	4621      	mov	r1, r4
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f7ff feb3 	bl	8015948 <tcp_output_alloc_header>
 8015be2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d109      	bne.n	8015bfe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	8b5b      	ldrh	r3, [r3, #26]
 8015bee:	f043 0303 	orr.w	r3, r3, #3
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015bf8:	f06f 0301 	mvn.w	r3, #1
 8015bfc:	e023      	b.n	8015c46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015bfe:	7dbb      	ldrb	r3, [r7, #22]
 8015c00:	7dfa      	ldrb	r2, [r7, #23]
 8015c02:	6939      	ldr	r1, [r7, #16]
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f7ff fedd 	bl	80159c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c0a:	687a      	ldr	r2, [r7, #4]
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	3304      	adds	r3, #4
 8015c10:	6939      	ldr	r1, [r7, #16]
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f7ff ff14 	bl	8015a40 <tcp_output_control_segment>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d007      	beq.n	8015c34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	8b5b      	ldrh	r3, [r3, #26]
 8015c28:	f043 0303 	orr.w	r3, r3, #3
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	835a      	strh	r2, [r3, #26]
 8015c32:	e006      	b.n	8015c42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	8b5b      	ldrh	r3, [r3, #26]
 8015c38:	f023 0303 	bic.w	r3, r3, #3
 8015c3c:	b29a      	uxth	r2, r3
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	371c      	adds	r7, #28
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd90      	pop	{r4, r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	08020544 	.word	0x08020544
 8015c54:	08020d5c 	.word	0x08020d5c
 8015c58:	08020598 	.word	0x08020598

08015c5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015c5c:	b590      	push	{r4, r7, lr}
 8015c5e:	b085      	sub	sp, #20
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c64:	2300      	movs	r3, #0
 8015c66:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d106      	bne.n	8015c7c <tcp_keepalive+0x20>
 8015c6e:	4b18      	ldr	r3, [pc, #96]	@ (8015cd0 <tcp_keepalive+0x74>)
 8015c70:	f640 0224 	movw	r2, #2084	@ 0x824
 8015c74:	4917      	ldr	r1, [pc, #92]	@ (8015cd4 <tcp_keepalive+0x78>)
 8015c76:	4818      	ldr	r0, [pc, #96]	@ (8015cd8 <tcp_keepalive+0x7c>)
 8015c78:	f006 fa52 	bl	801c120 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015c7c:	7abb      	ldrb	r3, [r7, #10]
 8015c7e:	b29c      	uxth	r4, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c84:	3b01      	subs	r3, #1
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f8 feff 	bl	800ea8a <lwip_htonl>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2200      	movs	r2, #0
 8015c90:	4621      	mov	r1, r4
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f7ff fe58 	bl	8015948 <tcp_output_alloc_header>
 8015c98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d102      	bne.n	8015ca6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca4:	e010      	b.n	8015cc8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ca6:	7abb      	ldrb	r3, [r7, #10]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	68f9      	ldr	r1, [r7, #12]
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7ff fe89 	bl	80159c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015cb2:	687a      	ldr	r2, [r7, #4]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	3304      	adds	r3, #4
 8015cb8:	68f9      	ldr	r1, [r7, #12]
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f7ff fec0 	bl	8015a40 <tcp_output_control_segment>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015cc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3714      	adds	r7, #20
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd90      	pop	{r4, r7, pc}
 8015cd0:	08020544 	.word	0x08020544
 8015cd4:	08020d7c 	.word	0x08020d7c
 8015cd8:	08020598 	.word	0x08020598

08015cdc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015cdc:	b590      	push	{r4, r7, lr}
 8015cde:	b08b      	sub	sp, #44	@ 0x2c
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d106      	bne.n	8015cfc <tcp_zero_window_probe+0x20>
 8015cee:	4b4d      	ldr	r3, [pc, #308]	@ (8015e24 <tcp_zero_window_probe+0x148>)
 8015cf0:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015cf4:	494c      	ldr	r1, [pc, #304]	@ (8015e28 <tcp_zero_window_probe+0x14c>)
 8015cf6:	484d      	ldr	r0, [pc, #308]	@ (8015e2c <tcp_zero_window_probe+0x150>)
 8015cf8:	f006 fa12 	bl	801c120 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8015d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d101      	bne.n	8015d0c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e087      	b.n	8015e1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015d12:	2bff      	cmp	r3, #255	@ 0xff
 8015d14:	d007      	beq.n	8015d26 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	b2da      	uxtb	r2, r3
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	899b      	ldrh	r3, [r3, #12]
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7f8 fe96 	bl	800ea60 <lwip_htons>
 8015d34:	4603      	mov	r3, r0
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	f003 0301 	and.w	r3, r3, #1
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d005      	beq.n	8015d4c <tcp_zero_window_probe+0x70>
 8015d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d42:	891b      	ldrh	r3, [r3, #8]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d101      	bne.n	8015d4c <tcp_zero_window_probe+0x70>
 8015d48:	2301      	movs	r3, #1
 8015d4a:	e000      	b.n	8015d4e <tcp_zero_window_probe+0x72>
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015d52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	bf0c      	ite	eq
 8015d5a:	2301      	moveq	r3, #1
 8015d5c:	2300      	movne	r3, #0
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015d62:	7cfb      	ldrb	r3, [r7, #19]
 8015d64:	b299      	uxth	r1, r3
 8015d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d68:	691b      	ldr	r3, [r3, #16]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	8c3a      	ldrh	r2, [r7, #32]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f7ff fdea 	bl	8015948 <tcp_output_alloc_header>
 8015d74:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d102      	bne.n	8015d82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d80:	e04c      	b.n	8015e1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015d82:	69fb      	ldr	r3, [r7, #28]
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8015d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d011      	beq.n	8015db4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015d90:	69bb      	ldr	r3, [r7, #24]
 8015d92:	899b      	ldrh	r3, [r3, #12]
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	b21b      	sxth	r3, r3
 8015d98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015d9c:	b21c      	sxth	r4, r3
 8015d9e:	2011      	movs	r0, #17
 8015da0:	f7f8 fe5e 	bl	800ea60 <lwip_htons>
 8015da4:	4603      	mov	r3, r0
 8015da6:	b21b      	sxth	r3, r3
 8015da8:	4323      	orrs	r3, r4
 8015daa:	b21b      	sxth	r3, r3
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	69bb      	ldr	r3, [r7, #24]
 8015db0:	819a      	strh	r2, [r3, #12]
 8015db2:	e010      	b.n	8015dd6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015db4:	69fb      	ldr	r3, [r7, #28]
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	3314      	adds	r3, #20
 8015dba:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dbe:	6858      	ldr	r0, [r3, #4]
 8015dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	891a      	ldrh	r2, [r3, #8]
 8015dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc8:	891b      	ldrh	r3, [r3, #8]
 8015dca:	1ad3      	subs	r3, r2, r3
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	2201      	movs	r2, #1
 8015dd0:	6979      	ldr	r1, [r7, #20]
 8015dd2:	f7fa fd6d 	bl	80108b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dd8:	691b      	ldr	r3, [r3, #16]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f8 fe54 	bl	800ea8a <lwip_htonl>
 8015de2:	4603      	mov	r3, r0
 8015de4:	3301      	adds	r3, #1
 8015de6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	1ad3      	subs	r3, r2, r3
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	da02      	bge.n	8015dfa <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	68fa      	ldr	r2, [r7, #12]
 8015df8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015dfa:	7cfb      	ldrb	r3, [r7, #19]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	69f9      	ldr	r1, [r7, #28]
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f7ff fddf 	bl	80159c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015e06:	687a      	ldr	r2, [r7, #4]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	69f9      	ldr	r1, [r7, #28]
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f7ff fe16 	bl	8015a40 <tcp_output_control_segment>
 8015e14:	4603      	mov	r3, r0
 8015e16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015e18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	372c      	adds	r7, #44	@ 0x2c
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd90      	pop	{r4, r7, pc}
 8015e24:	08020544 	.word	0x08020544
 8015e28:	08020d98 	.word	0x08020d98
 8015e2c:	08020598 	.word	0x08020598

08015e30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015e38:	f7fa fec0 	bl	8010bbc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8015e68 <tcpip_tcp_timer+0x38>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d103      	bne.n	8015e4c <tcpip_tcp_timer+0x1c>
 8015e44:	4b09      	ldr	r3, [pc, #36]	@ (8015e6c <tcpip_tcp_timer+0x3c>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d005      	beq.n	8015e58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	4908      	ldr	r1, [pc, #32]	@ (8015e70 <tcpip_tcp_timer+0x40>)
 8015e50:	20fa      	movs	r0, #250	@ 0xfa
 8015e52:	f000 f8f3 	bl	801603c <sys_timeout>
 8015e56:	e003      	b.n	8015e60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015e58:	4b06      	ldr	r3, [pc, #24]	@ (8015e74 <tcpip_tcp_timer+0x44>)
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	601a      	str	r2, [r3, #0]
  }
}
 8015e5e:	bf00      	nop
 8015e60:	bf00      	nop
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	20013d1c 	.word	0x20013d1c
 8015e6c:	20013d20 	.word	0x20013d20
 8015e70:	08015e31 	.word	0x08015e31
 8015e74:	20013d6c 	.word	0x20013d6c

08015e78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015ea8 <tcp_timer_needed+0x30>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d10f      	bne.n	8015ea4 <tcp_timer_needed+0x2c>
 8015e84:	4b09      	ldr	r3, [pc, #36]	@ (8015eac <tcp_timer_needed+0x34>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d103      	bne.n	8015e94 <tcp_timer_needed+0x1c>
 8015e8c:	4b08      	ldr	r3, [pc, #32]	@ (8015eb0 <tcp_timer_needed+0x38>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d007      	beq.n	8015ea4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015e94:	4b04      	ldr	r3, [pc, #16]	@ (8015ea8 <tcp_timer_needed+0x30>)
 8015e96:	2201      	movs	r2, #1
 8015e98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	4905      	ldr	r1, [pc, #20]	@ (8015eb4 <tcp_timer_needed+0x3c>)
 8015e9e:	20fa      	movs	r0, #250	@ 0xfa
 8015ea0:	f000 f8cc 	bl	801603c <sys_timeout>
  }
}
 8015ea4:	bf00      	nop
 8015ea6:	bd80      	pop	{r7, pc}
 8015ea8:	20013d6c 	.word	0x20013d6c
 8015eac:	20013d1c 	.word	0x20013d1c
 8015eb0:	20013d20 	.word	0x20013d20
 8015eb4:	08015e31 	.word	0x08015e31

08015eb8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015ec4:	200a      	movs	r0, #10
 8015ec6:	f7f9 fbf9 	bl	800f6bc <memp_malloc>
 8015eca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d109      	bne.n	8015ee6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d151      	bne.n	8015f7c <sys_timeout_abs+0xc4>
 8015ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8015f84 <sys_timeout_abs+0xcc>)
 8015eda:	22be      	movs	r2, #190	@ 0xbe
 8015edc:	492a      	ldr	r1, [pc, #168]	@ (8015f88 <sys_timeout_abs+0xd0>)
 8015ede:	482b      	ldr	r0, [pc, #172]	@ (8015f8c <sys_timeout_abs+0xd4>)
 8015ee0:	f006 f91e 	bl	801c120 <iprintf>
    return;
 8015ee4:	e04a      	b.n	8015f7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	68ba      	ldr	r2, [r7, #8]
 8015ef0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	68fa      	ldr	r2, [r7, #12]
 8015efc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015efe:	4b24      	ldr	r3, [pc, #144]	@ (8015f90 <sys_timeout_abs+0xd8>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d103      	bne.n	8015f0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015f06:	4a22      	ldr	r2, [pc, #136]	@ (8015f90 <sys_timeout_abs+0xd8>)
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	6013      	str	r3, [r2, #0]
    return;
 8015f0c:	e037      	b.n	8015f7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	685a      	ldr	r2, [r3, #4]
 8015f12:	4b1f      	ldr	r3, [pc, #124]	@ (8015f90 <sys_timeout_abs+0xd8>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	1ad3      	subs	r3, r2, r3
 8015f1a:	0fdb      	lsrs	r3, r3, #31
 8015f1c:	f003 0301 	and.w	r3, r3, #1
 8015f20:	b2db      	uxtb	r3, r3
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d007      	beq.n	8015f36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015f26:	4b1a      	ldr	r3, [pc, #104]	@ (8015f90 <sys_timeout_abs+0xd8>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015f2e:	4a18      	ldr	r2, [pc, #96]	@ (8015f90 <sys_timeout_abs+0xd8>)
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	6013      	str	r3, [r2, #0]
 8015f34:	e023      	b.n	8015f7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015f36:	4b16      	ldr	r3, [pc, #88]	@ (8015f90 <sys_timeout_abs+0xd8>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	617b      	str	r3, [r7, #20]
 8015f3c:	e01a      	b.n	8015f74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00b      	beq.n	8015f5e <sys_timeout_abs+0xa6>
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	685a      	ldr	r2, [r3, #4]
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	685b      	ldr	r3, [r3, #4]
 8015f50:	1ad3      	subs	r3, r2, r3
 8015f52:	0fdb      	lsrs	r3, r3, #31
 8015f54:	f003 0301 	and.w	r3, r3, #1
 8015f58:	b2db      	uxtb	r3, r3
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d007      	beq.n	8015f6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	693a      	ldr	r2, [r7, #16]
 8015f6a:	601a      	str	r2, [r3, #0]
        break;
 8015f6c:	e007      	b.n	8015f7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	617b      	str	r3, [r7, #20]
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d1e1      	bne.n	8015f3e <sys_timeout_abs+0x86>
 8015f7a:	e000      	b.n	8015f7e <sys_timeout_abs+0xc6>
    return;
 8015f7c:	bf00      	nop
      }
    }
  }
}
 8015f7e:	3718      	adds	r7, #24
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	08020dbc 	.word	0x08020dbc
 8015f88:	08020df0 	.word	0x08020df0
 8015f8c:	08020e30 	.word	0x08020e30
 8015f90:	20013d64 	.word	0x20013d64

08015f94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b086      	sub	sp, #24
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	4798      	blx	r3

  now = sys_now();
 8015fa6:	f7ee f995 	bl	80042d4 <sys_now>
 8015faa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	681a      	ldr	r2, [r3, #0]
 8015fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8015ff0 <lwip_cyclic_timer+0x5c>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4413      	add	r3, r2
 8015fb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015fb8:	68fa      	ldr	r2, [r7, #12]
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	1ad3      	subs	r3, r2, r3
 8015fbe:	0fdb      	lsrs	r3, r3, #31
 8015fc0:	f003 0301 	and.w	r3, r3, #1
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d009      	beq.n	8015fde <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015fca:	697b      	ldr	r3, [r7, #20]
 8015fcc:	681a      	ldr	r2, [r3, #0]
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	4413      	add	r3, r2
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	4907      	ldr	r1, [pc, #28]	@ (8015ff4 <lwip_cyclic_timer+0x60>)
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f7ff ff6e 	bl	8015eb8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015fdc:	e004      	b.n	8015fe8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	4904      	ldr	r1, [pc, #16]	@ (8015ff4 <lwip_cyclic_timer+0x60>)
 8015fe2:	68f8      	ldr	r0, [r7, #12]
 8015fe4:	f7ff ff68 	bl	8015eb8 <sys_timeout_abs>
}
 8015fe8:	bf00      	nop
 8015fea:	3718      	adds	r7, #24
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	20013d68 	.word	0x20013d68
 8015ff4:	08015f95 	.word	0x08015f95

08015ff8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015ffe:	2301      	movs	r3, #1
 8016000:	607b      	str	r3, [r7, #4]
 8016002:	e00e      	b.n	8016022 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016004:	4a0b      	ldr	r2, [pc, #44]	@ (8016034 <sys_timeouts_init+0x3c>)
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	00db      	lsls	r3, r3, #3
 8016010:	4a08      	ldr	r2, [pc, #32]	@ (8016034 <sys_timeouts_init+0x3c>)
 8016012:	4413      	add	r3, r2
 8016014:	461a      	mov	r2, r3
 8016016:	4908      	ldr	r1, [pc, #32]	@ (8016038 <sys_timeouts_init+0x40>)
 8016018:	f000 f810 	bl	801603c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	3301      	adds	r3, #1
 8016020:	607b      	str	r3, [r7, #4]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2b04      	cmp	r3, #4
 8016026:	d9ed      	bls.n	8016004 <sys_timeouts_init+0xc>
  }
}
 8016028:	bf00      	nop
 801602a:	bf00      	nop
 801602c:	3708      	adds	r7, #8
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}
 8016032:	bf00      	nop
 8016034:	0806da38 	.word	0x0806da38
 8016038:	08015f95 	.word	0x08015f95

0801603c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b086      	sub	sp, #24
 8016040:	af00      	add	r7, sp, #0
 8016042:	60f8      	str	r0, [r7, #12]
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801604e:	d306      	bcc.n	801605e <sys_timeout+0x22>
 8016050:	4b0a      	ldr	r3, [pc, #40]	@ (801607c <sys_timeout+0x40>)
 8016052:	f240 1229 	movw	r2, #297	@ 0x129
 8016056:	490a      	ldr	r1, [pc, #40]	@ (8016080 <sys_timeout+0x44>)
 8016058:	480a      	ldr	r0, [pc, #40]	@ (8016084 <sys_timeout+0x48>)
 801605a:	f006 f861 	bl	801c120 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801605e:	f7ee f939 	bl	80042d4 <sys_now>
 8016062:	4602      	mov	r2, r0
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	4413      	add	r3, r2
 8016068:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	68b9      	ldr	r1, [r7, #8]
 801606e:	6978      	ldr	r0, [r7, #20]
 8016070:	f7ff ff22 	bl	8015eb8 <sys_timeout_abs>
#endif
}
 8016074:	bf00      	nop
 8016076:	3718      	adds	r7, #24
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	08020dbc 	.word	0x08020dbc
 8016080:	08020e58 	.word	0x08020e58
 8016084:	08020e30 	.word	0x08020e30

08016088 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801608e:	f7ee f921 	bl	80042d4 <sys_now>
 8016092:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016094:	4b17      	ldr	r3, [pc, #92]	@ (80160f4 <sys_check_timeouts+0x6c>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d022      	beq.n	80160e6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	68fa      	ldr	r2, [r7, #12]
 80160a6:	1ad3      	subs	r3, r2, r3
 80160a8:	0fdb      	lsrs	r3, r3, #31
 80160aa:	f003 0301 	and.w	r3, r3, #1
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d11a      	bne.n	80160ea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	4a0e      	ldr	r2, [pc, #56]	@ (80160f4 <sys_check_timeouts+0x6c>)
 80160ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	689b      	ldr	r3, [r3, #8]
 80160c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	685b      	ldr	r3, [r3, #4]
 80160cc:	4a0a      	ldr	r2, [pc, #40]	@ (80160f8 <sys_check_timeouts+0x70>)
 80160ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80160d0:	68b9      	ldr	r1, [r7, #8]
 80160d2:	200a      	movs	r0, #10
 80160d4:	f7f9 fb44 	bl	800f760 <memp_free>
    if (handler != NULL) {
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d0da      	beq.n	8016094 <sys_check_timeouts+0xc>
      handler(arg);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	6838      	ldr	r0, [r7, #0]
 80160e2:	4798      	blx	r3
  do {
 80160e4:	e7d6      	b.n	8016094 <sys_check_timeouts+0xc>
      return;
 80160e6:	bf00      	nop
 80160e8:	e000      	b.n	80160ec <sys_check_timeouts+0x64>
      return;
 80160ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	20013d64 	.word	0x20013d64
 80160f8:	20013d68 	.word	0x20013d68

080160fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b082      	sub	sp, #8
 8016100:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016102:	4b16      	ldr	r3, [pc, #88]	@ (801615c <sys_timeouts_sleeptime+0x60>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d102      	bne.n	8016110 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801610a:	f04f 33ff 	mov.w	r3, #4294967295
 801610e:	e020      	b.n	8016152 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016110:	f7ee f8e0 	bl	80042d4 <sys_now>
 8016114:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016116:	4b11      	ldr	r3, [pc, #68]	@ (801615c <sys_timeouts_sleeptime+0x60>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	685a      	ldr	r2, [r3, #4]
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	1ad3      	subs	r3, r2, r3
 8016120:	0fdb      	lsrs	r3, r3, #31
 8016122:	f003 0301 	and.w	r3, r3, #1
 8016126:	b2db      	uxtb	r3, r3
 8016128:	2b00      	cmp	r3, #0
 801612a:	d001      	beq.n	8016130 <sys_timeouts_sleeptime+0x34>
    return 0;
 801612c:	2300      	movs	r3, #0
 801612e:	e010      	b.n	8016152 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016130:	4b0a      	ldr	r3, [pc, #40]	@ (801615c <sys_timeouts_sleeptime+0x60>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	685a      	ldr	r2, [r3, #4]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	1ad3      	subs	r3, r2, r3
 801613a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	da06      	bge.n	8016150 <sys_timeouts_sleeptime+0x54>
 8016142:	4b07      	ldr	r3, [pc, #28]	@ (8016160 <sys_timeouts_sleeptime+0x64>)
 8016144:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016148:	4906      	ldr	r1, [pc, #24]	@ (8016164 <sys_timeouts_sleeptime+0x68>)
 801614a:	4807      	ldr	r0, [pc, #28]	@ (8016168 <sys_timeouts_sleeptime+0x6c>)
 801614c:	f005 ffe8 	bl	801c120 <iprintf>
    return ret;
 8016150:	683b      	ldr	r3, [r7, #0]
  }
}
 8016152:	4618      	mov	r0, r3
 8016154:	3708      	adds	r7, #8
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
 801615a:	bf00      	nop
 801615c:	20013d64 	.word	0x20013d64
 8016160:	08020dbc 	.word	0x08020dbc
 8016164:	08020e90 	.word	0x08020e90
 8016168:	08020e30 	.word	0x08020e30

0801616c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016170:	f005 fa06 	bl	801b580 <rand>
 8016174:	4603      	mov	r3, r0
 8016176:	b29b      	uxth	r3, r3
 8016178:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801617c:	b29b      	uxth	r3, r3
 801617e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016182:	b29a      	uxth	r2, r3
 8016184:	4b01      	ldr	r3, [pc, #4]	@ (801618c <udp_init+0x20>)
 8016186:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016188:	bf00      	nop
 801618a:	bd80      	pop	{r7, pc}
 801618c:	200000b8 	.word	0x200000b8

08016190 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016190:	b480      	push	{r7}
 8016192:	b083      	sub	sp, #12
 8016194:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016196:	2300      	movs	r3, #0
 8016198:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801619a:	4b17      	ldr	r3, [pc, #92]	@ (80161f8 <udp_new_port+0x68>)
 801619c:	881b      	ldrh	r3, [r3, #0]
 801619e:	1c5a      	adds	r2, r3, #1
 80161a0:	b291      	uxth	r1, r2
 80161a2:	4a15      	ldr	r2, [pc, #84]	@ (80161f8 <udp_new_port+0x68>)
 80161a4:	8011      	strh	r1, [r2, #0]
 80161a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80161aa:	4293      	cmp	r3, r2
 80161ac:	d103      	bne.n	80161b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80161ae:	4b12      	ldr	r3, [pc, #72]	@ (80161f8 <udp_new_port+0x68>)
 80161b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80161b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80161b6:	4b11      	ldr	r3, [pc, #68]	@ (80161fc <udp_new_port+0x6c>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	603b      	str	r3, [r7, #0]
 80161bc:	e011      	b.n	80161e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	8a5a      	ldrh	r2, [r3, #18]
 80161c2:	4b0d      	ldr	r3, [pc, #52]	@ (80161f8 <udp_new_port+0x68>)
 80161c4:	881b      	ldrh	r3, [r3, #0]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d108      	bne.n	80161dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80161ca:	88fb      	ldrh	r3, [r7, #6]
 80161cc:	3301      	adds	r3, #1
 80161ce:	80fb      	strh	r3, [r7, #6]
 80161d0:	88fb      	ldrh	r3, [r7, #6]
 80161d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80161d6:	d3e0      	bcc.n	801619a <udp_new_port+0xa>
        return 0;
 80161d8:	2300      	movs	r3, #0
 80161da:	e007      	b.n	80161ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	68db      	ldr	r3, [r3, #12]
 80161e0:	603b      	str	r3, [r7, #0]
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d1ea      	bne.n	80161be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80161e8:	4b03      	ldr	r3, [pc, #12]	@ (80161f8 <udp_new_port+0x68>)
 80161ea:	881b      	ldrh	r3, [r3, #0]
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	370c      	adds	r7, #12
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr
 80161f8:	200000b8 	.word	0x200000b8
 80161fc:	20013d70 	.word	0x20013d70

08016200 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	4613      	mov	r3, r2
 801620c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d105      	bne.n	8016220 <udp_input_local_match+0x20>
 8016214:	4b27      	ldr	r3, [pc, #156]	@ (80162b4 <udp_input_local_match+0xb4>)
 8016216:	2287      	movs	r2, #135	@ 0x87
 8016218:	4927      	ldr	r1, [pc, #156]	@ (80162b8 <udp_input_local_match+0xb8>)
 801621a:	4828      	ldr	r0, [pc, #160]	@ (80162bc <udp_input_local_match+0xbc>)
 801621c:	f005 ff80 	bl	801c120 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d105      	bne.n	8016232 <udp_input_local_match+0x32>
 8016226:	4b23      	ldr	r3, [pc, #140]	@ (80162b4 <udp_input_local_match+0xb4>)
 8016228:	2288      	movs	r2, #136	@ 0x88
 801622a:	4925      	ldr	r1, [pc, #148]	@ (80162c0 <udp_input_local_match+0xc0>)
 801622c:	4823      	ldr	r0, [pc, #140]	@ (80162bc <udp_input_local_match+0xbc>)
 801622e:	f005 ff77 	bl	801c120 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	7a1b      	ldrb	r3, [r3, #8]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d00b      	beq.n	8016252 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	7a1a      	ldrb	r2, [r3, #8]
 801623e:	4b21      	ldr	r3, [pc, #132]	@ (80162c4 <udp_input_local_match+0xc4>)
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016246:	3301      	adds	r3, #1
 8016248:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801624a:	429a      	cmp	r2, r3
 801624c:	d001      	beq.n	8016252 <udp_input_local_match+0x52>
    return 0;
 801624e:	2300      	movs	r3, #0
 8016250:	e02b      	b.n	80162aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016252:	79fb      	ldrb	r3, [r7, #7]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d018      	beq.n	801628a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d013      	beq.n	8016286 <udp_input_local_match+0x86>
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d00f      	beq.n	8016286 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016266:	4b17      	ldr	r3, [pc, #92]	@ (80162c4 <udp_input_local_match+0xc4>)
 8016268:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801626e:	d00a      	beq.n	8016286 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	4b13      	ldr	r3, [pc, #76]	@ (80162c4 <udp_input_local_match+0xc4>)
 8016276:	695b      	ldr	r3, [r3, #20]
 8016278:	405a      	eors	r2, r3
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	3308      	adds	r3, #8
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016282:	2b00      	cmp	r3, #0
 8016284:	d110      	bne.n	80162a8 <udp_input_local_match+0xa8>
          return 1;
 8016286:	2301      	movs	r3, #1
 8016288:	e00f      	b.n	80162aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d009      	beq.n	80162a4 <udp_input_local_match+0xa4>
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d005      	beq.n	80162a4 <udp_input_local_match+0xa4>
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	4b09      	ldr	r3, [pc, #36]	@ (80162c4 <udp_input_local_match+0xc4>)
 801629e:	695b      	ldr	r3, [r3, #20]
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d101      	bne.n	80162a8 <udp_input_local_match+0xa8>
        return 1;
 80162a4:	2301      	movs	r3, #1
 80162a6:	e000      	b.n	80162aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80162a8:	2300      	movs	r3, #0
}
 80162aa:	4618      	mov	r0, r3
 80162ac:	3710      	adds	r7, #16
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
 80162b2:	bf00      	nop
 80162b4:	08020ea4 	.word	0x08020ea4
 80162b8:	08020ed4 	.word	0x08020ed4
 80162bc:	08020ef8 	.word	0x08020ef8
 80162c0:	08020f20 	.word	0x08020f20
 80162c4:	2000a29c 	.word	0x2000a29c

080162c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80162c8:	b590      	push	{r4, r7, lr}
 80162ca:	b08d      	sub	sp, #52	@ 0x34
 80162cc:	af02      	add	r7, sp, #8
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80162d2:	2300      	movs	r3, #0
 80162d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d105      	bne.n	80162e8 <udp_input+0x20>
 80162dc:	4b87      	ldr	r3, [pc, #540]	@ (80164fc <udp_input+0x234>)
 80162de:	22cf      	movs	r2, #207	@ 0xcf
 80162e0:	4987      	ldr	r1, [pc, #540]	@ (8016500 <udp_input+0x238>)
 80162e2:	4888      	ldr	r0, [pc, #544]	@ (8016504 <udp_input+0x23c>)
 80162e4:	f005 ff1c 	bl	801c120 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80162e8:	683b      	ldr	r3, [r7, #0]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d105      	bne.n	80162fa <udp_input+0x32>
 80162ee:	4b83      	ldr	r3, [pc, #524]	@ (80164fc <udp_input+0x234>)
 80162f0:	22d0      	movs	r2, #208	@ 0xd0
 80162f2:	4985      	ldr	r1, [pc, #532]	@ (8016508 <udp_input+0x240>)
 80162f4:	4883      	ldr	r0, [pc, #524]	@ (8016504 <udp_input+0x23c>)
 80162f6:	f005 ff13 	bl	801c120 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	895b      	ldrh	r3, [r3, #10]
 80162fe:	2b07      	cmp	r3, #7
 8016300:	d803      	bhi.n	801630a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f7fa f8ce 	bl	80104a4 <pbuf_free>
    goto end;
 8016308:	e0f0      	b.n	80164ec <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016310:	4b7e      	ldr	r3, [pc, #504]	@ (801650c <udp_input+0x244>)
 8016312:	695b      	ldr	r3, [r3, #20]
 8016314:	4a7d      	ldr	r2, [pc, #500]	@ (801650c <udp_input+0x244>)
 8016316:	6812      	ldr	r2, [r2, #0]
 8016318:	4611      	mov	r1, r2
 801631a:	4618      	mov	r0, r3
 801631c:	f003 ffe2 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 8016320:	4603      	mov	r3, r0
 8016322:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	881b      	ldrh	r3, [r3, #0]
 8016328:	b29b      	uxth	r3, r3
 801632a:	4618      	mov	r0, r3
 801632c:	f7f8 fb98 	bl	800ea60 <lwip_htons>
 8016330:	4603      	mov	r3, r0
 8016332:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	885b      	ldrh	r3, [r3, #2]
 8016338:	b29b      	uxth	r3, r3
 801633a:	4618      	mov	r0, r3
 801633c:	f7f8 fb90 	bl	800ea60 <lwip_htons>
 8016340:	4603      	mov	r3, r0
 8016342:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016344:	2300      	movs	r3, #0
 8016346:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8016348:	2300      	movs	r3, #0
 801634a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801634c:	2300      	movs	r3, #0
 801634e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016350:	4b6f      	ldr	r3, [pc, #444]	@ (8016510 <udp_input+0x248>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	61fb      	str	r3, [r7, #28]
 8016356:	e054      	b.n	8016402 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016358:	69fb      	ldr	r3, [r7, #28]
 801635a:	8a5b      	ldrh	r3, [r3, #18]
 801635c:	89fa      	ldrh	r2, [r7, #14]
 801635e:	429a      	cmp	r2, r3
 8016360:	d14a      	bne.n	80163f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016362:	7cfb      	ldrb	r3, [r7, #19]
 8016364:	461a      	mov	r2, r3
 8016366:	6839      	ldr	r1, [r7, #0]
 8016368:	69f8      	ldr	r0, [r7, #28]
 801636a:	f7ff ff49 	bl	8016200 <udp_input_local_match>
 801636e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016370:	2b00      	cmp	r3, #0
 8016372:	d041      	beq.n	80163f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016374:	69fb      	ldr	r3, [r7, #28]
 8016376:	7c1b      	ldrb	r3, [r3, #16]
 8016378:	f003 0304 	and.w	r3, r3, #4
 801637c:	2b00      	cmp	r3, #0
 801637e:	d11d      	bne.n	80163bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016382:	2b00      	cmp	r3, #0
 8016384:	d102      	bne.n	801638c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	627b      	str	r3, [r7, #36]	@ 0x24
 801638a:	e017      	b.n	80163bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801638c:	7cfb      	ldrb	r3, [r7, #19]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d014      	beq.n	80163bc <udp_input+0xf4>
 8016392:	4b5e      	ldr	r3, [pc, #376]	@ (801650c <udp_input+0x244>)
 8016394:	695b      	ldr	r3, [r3, #20]
 8016396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801639a:	d10f      	bne.n	80163bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	3304      	adds	r3, #4
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d008      	beq.n	80163bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80163aa:	69fb      	ldr	r3, [r7, #28]
 80163ac:	681a      	ldr	r2, [r3, #0]
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	3304      	adds	r3, #4
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d101      	bne.n	80163bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80163b8:	69fb      	ldr	r3, [r7, #28]
 80163ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80163bc:	69fb      	ldr	r3, [r7, #28]
 80163be:	8a9b      	ldrh	r3, [r3, #20]
 80163c0:	8a3a      	ldrh	r2, [r7, #16]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d118      	bne.n	80163f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80163c6:	69fb      	ldr	r3, [r7, #28]
 80163c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d005      	beq.n	80163da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80163ce:	69fb      	ldr	r3, [r7, #28]
 80163d0:	685a      	ldr	r2, [r3, #4]
 80163d2:	4b4e      	ldr	r3, [pc, #312]	@ (801650c <udp_input+0x244>)
 80163d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d10e      	bne.n	80163f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80163da:	6a3b      	ldr	r3, [r7, #32]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d014      	beq.n	801640a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80163e0:	69fb      	ldr	r3, [r7, #28]
 80163e2:	68da      	ldr	r2, [r3, #12]
 80163e4:	6a3b      	ldr	r3, [r7, #32]
 80163e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80163e8:	4b49      	ldr	r3, [pc, #292]	@ (8016510 <udp_input+0x248>)
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80163f0:	4a47      	ldr	r2, [pc, #284]	@ (8016510 <udp_input+0x248>)
 80163f2:	69fb      	ldr	r3, [r7, #28]
 80163f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80163f6:	e008      	b.n	801640a <udp_input+0x142>
      }
    }

    prev = pcb;
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	61fb      	str	r3, [r7, #28]
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d1a7      	bne.n	8016358 <udp_input+0x90>
 8016408:	e000      	b.n	801640c <udp_input+0x144>
        break;
 801640a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801640c:	69fb      	ldr	r3, [r7, #28]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d101      	bne.n	8016416 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016414:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016416:	69fb      	ldr	r3, [r7, #28]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d002      	beq.n	8016422 <udp_input+0x15a>
    for_us = 1;
 801641c:	2301      	movs	r3, #1
 801641e:	76fb      	strb	r3, [r7, #27]
 8016420:	e00a      	b.n	8016438 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	3304      	adds	r3, #4
 8016426:	681a      	ldr	r2, [r3, #0]
 8016428:	4b38      	ldr	r3, [pc, #224]	@ (801650c <udp_input+0x244>)
 801642a:	695b      	ldr	r3, [r3, #20]
 801642c:	429a      	cmp	r2, r3
 801642e:	bf0c      	ite	eq
 8016430:	2301      	moveq	r3, #1
 8016432:	2300      	movne	r3, #0
 8016434:	b2db      	uxtb	r3, r3
 8016436:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016438:	7efb      	ldrb	r3, [r7, #27]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d052      	beq.n	80164e4 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	88db      	ldrh	r3, [r3, #6]
 8016442:	b29b      	uxth	r3, r3
 8016444:	2b00      	cmp	r3, #0
 8016446:	d00b      	beq.n	8016460 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	891a      	ldrh	r2, [r3, #8]
 801644c:	4b31      	ldr	r3, [pc, #196]	@ (8016514 <udp_input+0x24c>)
 801644e:	9300      	str	r3, [sp, #0]
 8016450:	4b31      	ldr	r3, [pc, #196]	@ (8016518 <udp_input+0x250>)
 8016452:	2111      	movs	r1, #17
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7f8 fc35 	bl	800ecc4 <ip_chksum_pseudo>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d146      	bne.n	80164ee <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016460:	2108      	movs	r1, #8
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f7f9 ff98 	bl	8010398 <pbuf_remove_header>
 8016468:	4603      	mov	r3, r0
 801646a:	2b00      	cmp	r3, #0
 801646c:	d00a      	beq.n	8016484 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801646e:	4b23      	ldr	r3, [pc, #140]	@ (80164fc <udp_input+0x234>)
 8016470:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016474:	4929      	ldr	r1, [pc, #164]	@ (801651c <udp_input+0x254>)
 8016476:	4823      	ldr	r0, [pc, #140]	@ (8016504 <udp_input+0x23c>)
 8016478:	f005 fe52 	bl	801c120 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f7fa f811 	bl	80104a4 <pbuf_free>
      goto end;
 8016482:	e033      	b.n	80164ec <udp_input+0x224>
    }

    if (pcb != NULL) {
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d012      	beq.n	80164b0 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801648a:	69fb      	ldr	r3, [r7, #28]
 801648c:	699b      	ldr	r3, [r3, #24]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d00a      	beq.n	80164a8 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	699c      	ldr	r4, [r3, #24]
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	69d8      	ldr	r0, [r3, #28]
 801649a:	8a3b      	ldrh	r3, [r7, #16]
 801649c:	9300      	str	r3, [sp, #0]
 801649e:	4b1e      	ldr	r3, [pc, #120]	@ (8016518 <udp_input+0x250>)
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	69f9      	ldr	r1, [r7, #28]
 80164a4:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80164a6:	e026      	b.n	80164f6 <udp_input+0x22e>
        pbuf_free(p);
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f7f9 fffb 	bl	80104a4 <pbuf_free>
        goto end;
 80164ae:	e01d      	b.n	80164ec <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80164b0:	7cfb      	ldrb	r3, [r7, #19]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d112      	bne.n	80164dc <udp_input+0x214>
 80164b6:	4b15      	ldr	r3, [pc, #84]	@ (801650c <udp_input+0x244>)
 80164b8:	695b      	ldr	r3, [r3, #20]
 80164ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80164be:	2be0      	cmp	r3, #224	@ 0xe0
 80164c0:	d00c      	beq.n	80164dc <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80164c2:	4b12      	ldr	r3, [pc, #72]	@ (801650c <udp_input+0x244>)
 80164c4:	899b      	ldrh	r3, [r3, #12]
 80164c6:	3308      	adds	r3, #8
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	b21b      	sxth	r3, r3
 80164cc:	4619      	mov	r1, r3
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f7f9 ffd5 	bl	801047e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80164d4:	2103      	movs	r1, #3
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f003 fb4a 	bl	8019b70 <icmp_dest_unreach>
      pbuf_free(p);
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7f9 ffe1 	bl	80104a4 <pbuf_free>
  return;
 80164e2:	e008      	b.n	80164f6 <udp_input+0x22e>
    pbuf_free(p);
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f7f9 ffdd 	bl	80104a4 <pbuf_free>
  return;
 80164ea:	e004      	b.n	80164f6 <udp_input+0x22e>
 80164ec:	e003      	b.n	80164f6 <udp_input+0x22e>
            goto chkerr;
 80164ee:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f7f9 ffd7 	bl	80104a4 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80164f6:	372c      	adds	r7, #44	@ 0x2c
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd90      	pop	{r4, r7, pc}
 80164fc:	08020ea4 	.word	0x08020ea4
 8016500:	08020f48 	.word	0x08020f48
 8016504:	08020ef8 	.word	0x08020ef8
 8016508:	08020f60 	.word	0x08020f60
 801650c:	2000a29c 	.word	0x2000a29c
 8016510:	20013d70 	.word	0x20013d70
 8016514:	2000a2b0 	.word	0x2000a2b0
 8016518:	2000a2ac 	.word	0x2000a2ac
 801651c:	08020f7c 	.word	0x08020f7c

08016520 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b088      	sub	sp, #32
 8016524:	af02      	add	r7, sp, #8
 8016526:	60f8      	str	r0, [r7, #12]
 8016528:	60b9      	str	r1, [r7, #8]
 801652a:	607a      	str	r2, [r7, #4]
 801652c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d109      	bne.n	8016548 <udp_sendto+0x28>
 8016534:	4b23      	ldr	r3, [pc, #140]	@ (80165c4 <udp_sendto+0xa4>)
 8016536:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801653a:	4923      	ldr	r1, [pc, #140]	@ (80165c8 <udp_sendto+0xa8>)
 801653c:	4823      	ldr	r0, [pc, #140]	@ (80165cc <udp_sendto+0xac>)
 801653e:	f005 fdef 	bl	801c120 <iprintf>
 8016542:	f06f 030f 	mvn.w	r3, #15
 8016546:	e038      	b.n	80165ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d109      	bne.n	8016562 <udp_sendto+0x42>
 801654e:	4b1d      	ldr	r3, [pc, #116]	@ (80165c4 <udp_sendto+0xa4>)
 8016550:	f240 2219 	movw	r2, #537	@ 0x219
 8016554:	491e      	ldr	r1, [pc, #120]	@ (80165d0 <udp_sendto+0xb0>)
 8016556:	481d      	ldr	r0, [pc, #116]	@ (80165cc <udp_sendto+0xac>)
 8016558:	f005 fde2 	bl	801c120 <iprintf>
 801655c:	f06f 030f 	mvn.w	r3, #15
 8016560:	e02b      	b.n	80165ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d109      	bne.n	801657c <udp_sendto+0x5c>
 8016568:	4b16      	ldr	r3, [pc, #88]	@ (80165c4 <udp_sendto+0xa4>)
 801656a:	f240 221a 	movw	r2, #538	@ 0x21a
 801656e:	4919      	ldr	r1, [pc, #100]	@ (80165d4 <udp_sendto+0xb4>)
 8016570:	4816      	ldr	r0, [pc, #88]	@ (80165cc <udp_sendto+0xac>)
 8016572:	f005 fdd5 	bl	801c120 <iprintf>
 8016576:	f06f 030f 	mvn.w	r3, #15
 801657a:	e01e      	b.n	80165ba <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	7a1b      	ldrb	r3, [r3, #8]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d006      	beq.n	8016592 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	7a1b      	ldrb	r3, [r3, #8]
 8016588:	4618      	mov	r0, r3
 801658a:	f7f9 fbf9 	bl	800fd80 <netif_get_by_index>
 801658e:	6178      	str	r0, [r7, #20]
 8016590:	e003      	b.n	801659a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f003 fb80 	bl	8019c98 <ip4_route>
 8016598:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d102      	bne.n	80165a6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80165a0:	f06f 0303 	mvn.w	r3, #3
 80165a4:	e009      	b.n	80165ba <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80165a6:	887a      	ldrh	r2, [r7, #2]
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	9300      	str	r3, [sp, #0]
 80165ac:	4613      	mov	r3, r2
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	68b9      	ldr	r1, [r7, #8]
 80165b2:	68f8      	ldr	r0, [r7, #12]
 80165b4:	f000 f810 	bl	80165d8 <udp_sendto_if>
 80165b8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3718      	adds	r7, #24
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	08020ea4 	.word	0x08020ea4
 80165c8:	08020fc8 	.word	0x08020fc8
 80165cc:	08020ef8 	.word	0x08020ef8
 80165d0:	08020fe0 	.word	0x08020fe0
 80165d4:	08020ffc 	.word	0x08020ffc

080165d8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b088      	sub	sp, #32
 80165dc:	af02      	add	r7, sp, #8
 80165de:	60f8      	str	r0, [r7, #12]
 80165e0:	60b9      	str	r1, [r7, #8]
 80165e2:	607a      	str	r2, [r7, #4]
 80165e4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d109      	bne.n	8016600 <udp_sendto_if+0x28>
 80165ec:	4b2e      	ldr	r3, [pc, #184]	@ (80166a8 <udp_sendto_if+0xd0>)
 80165ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80165f2:	492e      	ldr	r1, [pc, #184]	@ (80166ac <udp_sendto_if+0xd4>)
 80165f4:	482e      	ldr	r0, [pc, #184]	@ (80166b0 <udp_sendto_if+0xd8>)
 80165f6:	f005 fd93 	bl	801c120 <iprintf>
 80165fa:	f06f 030f 	mvn.w	r3, #15
 80165fe:	e04f      	b.n	80166a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d109      	bne.n	801661a <udp_sendto_if+0x42>
 8016606:	4b28      	ldr	r3, [pc, #160]	@ (80166a8 <udp_sendto_if+0xd0>)
 8016608:	f240 2281 	movw	r2, #641	@ 0x281
 801660c:	4929      	ldr	r1, [pc, #164]	@ (80166b4 <udp_sendto_if+0xdc>)
 801660e:	4828      	ldr	r0, [pc, #160]	@ (80166b0 <udp_sendto_if+0xd8>)
 8016610:	f005 fd86 	bl	801c120 <iprintf>
 8016614:	f06f 030f 	mvn.w	r3, #15
 8016618:	e042      	b.n	80166a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d109      	bne.n	8016634 <udp_sendto_if+0x5c>
 8016620:	4b21      	ldr	r3, [pc, #132]	@ (80166a8 <udp_sendto_if+0xd0>)
 8016622:	f240 2282 	movw	r2, #642	@ 0x282
 8016626:	4924      	ldr	r1, [pc, #144]	@ (80166b8 <udp_sendto_if+0xe0>)
 8016628:	4821      	ldr	r0, [pc, #132]	@ (80166b0 <udp_sendto_if+0xd8>)
 801662a:	f005 fd79 	bl	801c120 <iprintf>
 801662e:	f06f 030f 	mvn.w	r3, #15
 8016632:	e035      	b.n	80166a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016634:	6a3b      	ldr	r3, [r7, #32]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d109      	bne.n	801664e <udp_sendto_if+0x76>
 801663a:	4b1b      	ldr	r3, [pc, #108]	@ (80166a8 <udp_sendto_if+0xd0>)
 801663c:	f240 2283 	movw	r2, #643	@ 0x283
 8016640:	491e      	ldr	r1, [pc, #120]	@ (80166bc <udp_sendto_if+0xe4>)
 8016642:	481b      	ldr	r0, [pc, #108]	@ (80166b0 <udp_sendto_if+0xd8>)
 8016644:	f005 fd6c 	bl	801c120 <iprintf>
 8016648:	f06f 030f 	mvn.w	r3, #15
 801664c:	e028      	b.n	80166a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d009      	beq.n	8016668 <udp_sendto_if+0x90>
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d005      	beq.n	8016668 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016664:	2be0      	cmp	r3, #224	@ 0xe0
 8016666:	d103      	bne.n	8016670 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016668:	6a3b      	ldr	r3, [r7, #32]
 801666a:	3304      	adds	r3, #4
 801666c:	617b      	str	r3, [r7, #20]
 801666e:	e00b      	b.n	8016688 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	6a3b      	ldr	r3, [r7, #32]
 8016676:	3304      	adds	r3, #4
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	429a      	cmp	r2, r3
 801667c:	d002      	beq.n	8016684 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801667e:	f06f 0303 	mvn.w	r3, #3
 8016682:	e00d      	b.n	80166a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016688:	887a      	ldrh	r2, [r7, #2]
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	9301      	str	r3, [sp, #4]
 801668e:	6a3b      	ldr	r3, [r7, #32]
 8016690:	9300      	str	r3, [sp, #0]
 8016692:	4613      	mov	r3, r2
 8016694:	687a      	ldr	r2, [r7, #4]
 8016696:	68b9      	ldr	r1, [r7, #8]
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	f000 f811 	bl	80166c0 <udp_sendto_if_src>
 801669e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3718      	adds	r7, #24
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	08020ea4 	.word	0x08020ea4
 80166ac:	08021018 	.word	0x08021018
 80166b0:	08020ef8 	.word	0x08020ef8
 80166b4:	08021034 	.word	0x08021034
 80166b8:	08021050 	.word	0x08021050
 80166bc:	08021070 	.word	0x08021070

080166c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b08c      	sub	sp, #48	@ 0x30
 80166c4:	af04      	add	r7, sp, #16
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
 80166cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d109      	bne.n	80166e8 <udp_sendto_if_src+0x28>
 80166d4:	4b65      	ldr	r3, [pc, #404]	@ (801686c <udp_sendto_if_src+0x1ac>)
 80166d6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80166da:	4965      	ldr	r1, [pc, #404]	@ (8016870 <udp_sendto_if_src+0x1b0>)
 80166dc:	4865      	ldr	r0, [pc, #404]	@ (8016874 <udp_sendto_if_src+0x1b4>)
 80166de:	f005 fd1f 	bl	801c120 <iprintf>
 80166e2:	f06f 030f 	mvn.w	r3, #15
 80166e6:	e0bc      	b.n	8016862 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d109      	bne.n	8016702 <udp_sendto_if_src+0x42>
 80166ee:	4b5f      	ldr	r3, [pc, #380]	@ (801686c <udp_sendto_if_src+0x1ac>)
 80166f0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80166f4:	4960      	ldr	r1, [pc, #384]	@ (8016878 <udp_sendto_if_src+0x1b8>)
 80166f6:	485f      	ldr	r0, [pc, #380]	@ (8016874 <udp_sendto_if_src+0x1b4>)
 80166f8:	f005 fd12 	bl	801c120 <iprintf>
 80166fc:	f06f 030f 	mvn.w	r3, #15
 8016700:	e0af      	b.n	8016862 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d109      	bne.n	801671c <udp_sendto_if_src+0x5c>
 8016708:	4b58      	ldr	r3, [pc, #352]	@ (801686c <udp_sendto_if_src+0x1ac>)
 801670a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801670e:	495b      	ldr	r1, [pc, #364]	@ (801687c <udp_sendto_if_src+0x1bc>)
 8016710:	4858      	ldr	r0, [pc, #352]	@ (8016874 <udp_sendto_if_src+0x1b4>)
 8016712:	f005 fd05 	bl	801c120 <iprintf>
 8016716:	f06f 030f 	mvn.w	r3, #15
 801671a:	e0a2      	b.n	8016862 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801671e:	2b00      	cmp	r3, #0
 8016720:	d109      	bne.n	8016736 <udp_sendto_if_src+0x76>
 8016722:	4b52      	ldr	r3, [pc, #328]	@ (801686c <udp_sendto_if_src+0x1ac>)
 8016724:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8016728:	4955      	ldr	r1, [pc, #340]	@ (8016880 <udp_sendto_if_src+0x1c0>)
 801672a:	4852      	ldr	r0, [pc, #328]	@ (8016874 <udp_sendto_if_src+0x1b4>)
 801672c:	f005 fcf8 	bl	801c120 <iprintf>
 8016730:	f06f 030f 	mvn.w	r3, #15
 8016734:	e095      	b.n	8016862 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016738:	2b00      	cmp	r3, #0
 801673a:	d109      	bne.n	8016750 <udp_sendto_if_src+0x90>
 801673c:	4b4b      	ldr	r3, [pc, #300]	@ (801686c <udp_sendto_if_src+0x1ac>)
 801673e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8016742:	4950      	ldr	r1, [pc, #320]	@ (8016884 <udp_sendto_if_src+0x1c4>)
 8016744:	484b      	ldr	r0, [pc, #300]	@ (8016874 <udp_sendto_if_src+0x1b4>)
 8016746:	f005 fceb 	bl	801c120 <iprintf>
 801674a:	f06f 030f 	mvn.w	r3, #15
 801674e:	e088      	b.n	8016862 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	8a5b      	ldrh	r3, [r3, #18]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d10f      	bne.n	8016778 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016758:	68f9      	ldr	r1, [r7, #12]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	8a5b      	ldrh	r3, [r3, #18]
 801675e:	461a      	mov	r2, r3
 8016760:	68f8      	ldr	r0, [r7, #12]
 8016762:	f000 f893 	bl	801688c <udp_bind>
 8016766:	4603      	mov	r3, r0
 8016768:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801676a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d002      	beq.n	8016778 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016772:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016776:	e074      	b.n	8016862 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	891b      	ldrh	r3, [r3, #8]
 801677c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016780:	4293      	cmp	r3, r2
 8016782:	d902      	bls.n	801678a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016784:	f04f 33ff 	mov.w	r3, #4294967295
 8016788:	e06b      	b.n	8016862 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801678a:	2108      	movs	r1, #8
 801678c:	68b8      	ldr	r0, [r7, #8]
 801678e:	f7f9 fdf3 	bl	8010378 <pbuf_add_header>
 8016792:	4603      	mov	r3, r0
 8016794:	2b00      	cmp	r3, #0
 8016796:	d015      	beq.n	80167c4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016798:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801679c:	2108      	movs	r1, #8
 801679e:	2022      	movs	r0, #34	@ 0x22
 80167a0:	f7f9 fb98 	bl	800fed4 <pbuf_alloc>
 80167a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80167a6:	69fb      	ldr	r3, [r7, #28]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d102      	bne.n	80167b2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80167ac:	f04f 33ff 	mov.w	r3, #4294967295
 80167b0:	e057      	b.n	8016862 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	891b      	ldrh	r3, [r3, #8]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d006      	beq.n	80167c8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80167ba:	68b9      	ldr	r1, [r7, #8]
 80167bc:	69f8      	ldr	r0, [r7, #28]
 80167be:	f7f9 ff95 	bl	80106ec <pbuf_chain>
 80167c2:	e001      	b.n	80167c8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80167c8:	69fb      	ldr	r3, [r7, #28]
 80167ca:	895b      	ldrh	r3, [r3, #10]
 80167cc:	2b07      	cmp	r3, #7
 80167ce:	d806      	bhi.n	80167de <udp_sendto_if_src+0x11e>
 80167d0:	4b26      	ldr	r3, [pc, #152]	@ (801686c <udp_sendto_if_src+0x1ac>)
 80167d2:	f240 320d 	movw	r2, #781	@ 0x30d
 80167d6:	492c      	ldr	r1, [pc, #176]	@ (8016888 <udp_sendto_if_src+0x1c8>)
 80167d8:	4826      	ldr	r0, [pc, #152]	@ (8016874 <udp_sendto_if_src+0x1b4>)
 80167da:	f005 fca1 	bl	801c120 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80167de:	69fb      	ldr	r3, [r7, #28]
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	8a5b      	ldrh	r3, [r3, #18]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7f8 f939 	bl	800ea60 <lwip_htons>
 80167ee:	4603      	mov	r3, r0
 80167f0:	461a      	mov	r2, r3
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80167f6:	887b      	ldrh	r3, [r7, #2]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7f8 f931 	bl	800ea60 <lwip_htons>
 80167fe:	4603      	mov	r3, r0
 8016800:	461a      	mov	r2, r3
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	2200      	movs	r2, #0
 801680a:	719a      	strb	r2, [r3, #6]
 801680c:	2200      	movs	r2, #0
 801680e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	891b      	ldrh	r3, [r3, #8]
 8016814:	4618      	mov	r0, r3
 8016816:	f7f8 f923 	bl	800ea60 <lwip_htons>
 801681a:	4603      	mov	r3, r0
 801681c:	461a      	mov	r2, r3
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016822:	2311      	movs	r3, #17
 8016824:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	7adb      	ldrb	r3, [r3, #11]
 801682a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	7a9b      	ldrb	r3, [r3, #10]
 8016830:	7cb9      	ldrb	r1, [r7, #18]
 8016832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016834:	9202      	str	r2, [sp, #8]
 8016836:	7cfa      	ldrb	r2, [r7, #19]
 8016838:	9201      	str	r2, [sp, #4]
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	460b      	mov	r3, r1
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016842:	69f8      	ldr	r0, [r7, #28]
 8016844:	f003 fc3a 	bl	801a0bc <ip4_output_if_src>
 8016848:	4603      	mov	r3, r0
 801684a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801684c:	69fa      	ldr	r2, [r7, #28]
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	429a      	cmp	r2, r3
 8016852:	d004      	beq.n	801685e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016854:	69f8      	ldr	r0, [r7, #28]
 8016856:	f7f9 fe25 	bl	80104a4 <pbuf_free>
    q = NULL;
 801685a:	2300      	movs	r3, #0
 801685c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801685e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016862:	4618      	mov	r0, r3
 8016864:	3720      	adds	r7, #32
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	08020ea4 	.word	0x08020ea4
 8016870:	08021090 	.word	0x08021090
 8016874:	08020ef8 	.word	0x08020ef8
 8016878:	080210b0 	.word	0x080210b0
 801687c:	080210d0 	.word	0x080210d0
 8016880:	080210f4 	.word	0x080210f4
 8016884:	08021118 	.word	0x08021118
 8016888:	0802113c 	.word	0x0802113c

0801688c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b086      	sub	sp, #24
 8016890:	af00      	add	r7, sp, #0
 8016892:	60f8      	str	r0, [r7, #12]
 8016894:	60b9      	str	r1, [r7, #8]
 8016896:	4613      	mov	r3, r2
 8016898:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d101      	bne.n	80168a4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80168a0:	4b39      	ldr	r3, [pc, #228]	@ (8016988 <udp_bind+0xfc>)
 80168a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d109      	bne.n	80168be <udp_bind+0x32>
 80168aa:	4b38      	ldr	r3, [pc, #224]	@ (801698c <udp_bind+0x100>)
 80168ac:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80168b0:	4937      	ldr	r1, [pc, #220]	@ (8016990 <udp_bind+0x104>)
 80168b2:	4838      	ldr	r0, [pc, #224]	@ (8016994 <udp_bind+0x108>)
 80168b4:	f005 fc34 	bl	801c120 <iprintf>
 80168b8:	f06f 030f 	mvn.w	r3, #15
 80168bc:	e060      	b.n	8016980 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80168be:	2300      	movs	r3, #0
 80168c0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80168c2:	4b35      	ldr	r3, [pc, #212]	@ (8016998 <udp_bind+0x10c>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	617b      	str	r3, [r7, #20]
 80168c8:	e009      	b.n	80168de <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80168ca:	68fa      	ldr	r2, [r7, #12]
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d102      	bne.n	80168d8 <udp_bind+0x4c>
      rebind = 1;
 80168d2:	2301      	movs	r3, #1
 80168d4:	74fb      	strb	r3, [r7, #19]
      break;
 80168d6:	e005      	b.n	80168e4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	617b      	str	r3, [r7, #20]
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d1f2      	bne.n	80168ca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80168e4:	88fb      	ldrh	r3, [r7, #6]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d109      	bne.n	80168fe <udp_bind+0x72>
    port = udp_new_port();
 80168ea:	f7ff fc51 	bl	8016190 <udp_new_port>
 80168ee:	4603      	mov	r3, r0
 80168f0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80168f2:	88fb      	ldrh	r3, [r7, #6]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d12c      	bne.n	8016952 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80168f8:	f06f 0307 	mvn.w	r3, #7
 80168fc:	e040      	b.n	8016980 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80168fe:	4b26      	ldr	r3, [pc, #152]	@ (8016998 <udp_bind+0x10c>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	617b      	str	r3, [r7, #20]
 8016904:	e022      	b.n	801694c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016906:	68fa      	ldr	r2, [r7, #12]
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	429a      	cmp	r2, r3
 801690c:	d01b      	beq.n	8016946 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	8a5b      	ldrh	r3, [r3, #18]
 8016912:	88fa      	ldrh	r2, [r7, #6]
 8016914:	429a      	cmp	r2, r3
 8016916:	d116      	bne.n	8016946 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	681a      	ldr	r2, [r3, #0]
 801691c:	68bb      	ldr	r3, [r7, #8]
 801691e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016920:	429a      	cmp	r2, r3
 8016922:	d00d      	beq.n	8016940 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d00a      	beq.n	8016940 <udp_bind+0xb4>
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d006      	beq.n	8016940 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016932:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016934:	2b00      	cmp	r3, #0
 8016936:	d003      	beq.n	8016940 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d102      	bne.n	8016946 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016940:	f06f 0307 	mvn.w	r3, #7
 8016944:	e01c      	b.n	8016980 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	68db      	ldr	r3, [r3, #12]
 801694a:	617b      	str	r3, [r7, #20]
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d1d9      	bne.n	8016906 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <udp_bind+0xd2>
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	e000      	b.n	8016960 <udp_bind+0xd4>
 801695e:	2300      	movs	r3, #0
 8016960:	68fa      	ldr	r2, [r7, #12]
 8016962:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	88fa      	ldrh	r2, [r7, #6]
 8016968:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801696a:	7cfb      	ldrb	r3, [r7, #19]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d106      	bne.n	801697e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016970:	4b09      	ldr	r3, [pc, #36]	@ (8016998 <udp_bind+0x10c>)
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016978:	4a07      	ldr	r2, [pc, #28]	@ (8016998 <udp_bind+0x10c>)
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801697e:	2300      	movs	r3, #0
}
 8016980:	4618      	mov	r0, r3
 8016982:	3718      	adds	r7, #24
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}
 8016988:	0806da60 	.word	0x0806da60
 801698c:	08020ea4 	.word	0x08020ea4
 8016990:	0802116c 	.word	0x0802116c
 8016994:	08020ef8 	.word	0x08020ef8
 8016998:	20013d70 	.word	0x20013d70

0801699c <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 801699c:	b480      	push	{r7}
 801699e:	b083      	sub	sp, #12
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d007      	beq.n	80169bc <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80169b2:	3301      	adds	r3, #1
 80169b4:	b2da      	uxtb	r2, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80169ba:	e002      	b.n	80169c2 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2200      	movs	r2, #0
 80169c0:	721a      	strb	r2, [r3, #8]
}
 80169c2:	bf00      	nop
 80169c4:	370c      	adds	r7, #12
 80169c6:	46bd      	mov	sp, r7
 80169c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169cc:	4770      	bx	lr
	...

080169d0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b086      	sub	sp, #24
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	4613      	mov	r3, r2
 80169dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d109      	bne.n	80169f8 <udp_connect+0x28>
 80169e4:	4b2c      	ldr	r3, [pc, #176]	@ (8016a98 <udp_connect+0xc8>)
 80169e6:	f240 4235 	movw	r2, #1077	@ 0x435
 80169ea:	492c      	ldr	r1, [pc, #176]	@ (8016a9c <udp_connect+0xcc>)
 80169ec:	482c      	ldr	r0, [pc, #176]	@ (8016aa0 <udp_connect+0xd0>)
 80169ee:	f005 fb97 	bl	801c120 <iprintf>
 80169f2:	f06f 030f 	mvn.w	r3, #15
 80169f6:	e04b      	b.n	8016a90 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d109      	bne.n	8016a12 <udp_connect+0x42>
 80169fe:	4b26      	ldr	r3, [pc, #152]	@ (8016a98 <udp_connect+0xc8>)
 8016a00:	f240 4236 	movw	r2, #1078	@ 0x436
 8016a04:	4927      	ldr	r1, [pc, #156]	@ (8016aa4 <udp_connect+0xd4>)
 8016a06:	4826      	ldr	r0, [pc, #152]	@ (8016aa0 <udp_connect+0xd0>)
 8016a08:	f005 fb8a 	bl	801c120 <iprintf>
 8016a0c:	f06f 030f 	mvn.w	r3, #15
 8016a10:	e03e      	b.n	8016a90 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	8a5b      	ldrh	r3, [r3, #18]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d10f      	bne.n	8016a3a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016a1a:	68f9      	ldr	r1, [r7, #12]
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	8a5b      	ldrh	r3, [r3, #18]
 8016a20:	461a      	mov	r2, r3
 8016a22:	68f8      	ldr	r0, [r7, #12]
 8016a24:	f7ff ff32 	bl	801688c <udp_bind>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8016a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d002      	beq.n	8016a3a <udp_connect+0x6a>
      return err;
 8016a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016a38:	e02a      	b.n	8016a90 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <udp_connect+0x76>
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	e000      	b.n	8016a48 <udp_connect+0x78>
 8016a46:	2300      	movs	r3, #0
 8016a48:	68fa      	ldr	r2, [r7, #12]
 8016a4a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	88fa      	ldrh	r2, [r7, #6]
 8016a50:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	7c1b      	ldrb	r3, [r3, #16]
 8016a56:	f043 0304 	orr.w	r3, r3, #4
 8016a5a:	b2da      	uxtb	r2, r3
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a60:	4b11      	ldr	r3, [pc, #68]	@ (8016aa8 <udp_connect+0xd8>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	613b      	str	r3, [r7, #16]
 8016a66:	e008      	b.n	8016a7a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d101      	bne.n	8016a74 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016a70:	2300      	movs	r3, #0
 8016a72:	e00d      	b.n	8016a90 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	68db      	ldr	r3, [r3, #12]
 8016a78:	613b      	str	r3, [r7, #16]
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d1f3      	bne.n	8016a68 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016a80:	4b09      	ldr	r3, [pc, #36]	@ (8016aa8 <udp_connect+0xd8>)
 8016a82:	681a      	ldr	r2, [r3, #0]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016a88:	4a07      	ldr	r2, [pc, #28]	@ (8016aa8 <udp_connect+0xd8>)
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016a8e:	2300      	movs	r3, #0
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3718      	adds	r7, #24
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	08020ea4 	.word	0x08020ea4
 8016a9c:	08021184 	.word	0x08021184
 8016aa0:	08020ef8 	.word	0x08020ef8
 8016aa4:	080211a0 	.word	0x080211a0
 8016aa8:	20013d70 	.word	0x20013d70

08016aac <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d107      	bne.n	8016aca <udp_disconnect+0x1e>
 8016aba:	4b0d      	ldr	r3, [pc, #52]	@ (8016af0 <udp_disconnect+0x44>)
 8016abc:	f240 426a 	movw	r2, #1130	@ 0x46a
 8016ac0:	490c      	ldr	r1, [pc, #48]	@ (8016af4 <udp_disconnect+0x48>)
 8016ac2:	480d      	ldr	r0, [pc, #52]	@ (8016af8 <udp_disconnect+0x4c>)
 8016ac4:	f005 fb2c 	bl	801c120 <iprintf>
 8016ac8:	e00f      	b.n	8016aea <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2200      	movs	r2, #0
 8016ace:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	2200      	movs	r2, #0
 8016ada:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	7c1b      	ldrb	r3, [r3, #16]
 8016ae0:	f023 0304 	bic.w	r3, r3, #4
 8016ae4:	b2da      	uxtb	r2, r3
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	741a      	strb	r2, [r3, #16]
}
 8016aea:	3708      	adds	r7, #8
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}
 8016af0:	08020ea4 	.word	0x08020ea4
 8016af4:	080211bc 	.word	0x080211bc
 8016af8:	08020ef8 	.word	0x08020ef8

08016afc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b084      	sub	sp, #16
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	60f8      	str	r0, [r7, #12]
 8016b04:	60b9      	str	r1, [r7, #8]
 8016b06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d107      	bne.n	8016b1e <udp_recv+0x22>
 8016b0e:	4b08      	ldr	r3, [pc, #32]	@ (8016b30 <udp_recv+0x34>)
 8016b10:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016b14:	4907      	ldr	r1, [pc, #28]	@ (8016b34 <udp_recv+0x38>)
 8016b16:	4808      	ldr	r0, [pc, #32]	@ (8016b38 <udp_recv+0x3c>)
 8016b18:	f005 fb02 	bl	801c120 <iprintf>
 8016b1c:	e005      	b.n	8016b2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	68ba      	ldr	r2, [r7, #8]
 8016b22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	687a      	ldr	r2, [r7, #4]
 8016b28:	61da      	str	r2, [r3, #28]
}
 8016b2a:	3710      	adds	r7, #16
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	08020ea4 	.word	0x08020ea4
 8016b34:	080211d8 	.word	0x080211d8
 8016b38:	08020ef8 	.word	0x08020ef8

08016b3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d107      	bne.n	8016b5a <udp_remove+0x1e>
 8016b4a:	4b19      	ldr	r3, [pc, #100]	@ (8016bb0 <udp_remove+0x74>)
 8016b4c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8016b50:	4918      	ldr	r1, [pc, #96]	@ (8016bb4 <udp_remove+0x78>)
 8016b52:	4819      	ldr	r0, [pc, #100]	@ (8016bb8 <udp_remove+0x7c>)
 8016b54:	f005 fae4 	bl	801c120 <iprintf>
 8016b58:	e026      	b.n	8016ba8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016b5a:	4b18      	ldr	r3, [pc, #96]	@ (8016bbc <udp_remove+0x80>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d105      	bne.n	8016b70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016b64:	4b15      	ldr	r3, [pc, #84]	@ (8016bbc <udp_remove+0x80>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	68db      	ldr	r3, [r3, #12]
 8016b6a:	4a14      	ldr	r2, [pc, #80]	@ (8016bbc <udp_remove+0x80>)
 8016b6c:	6013      	str	r3, [r2, #0]
 8016b6e:	e017      	b.n	8016ba0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b70:	4b12      	ldr	r3, [pc, #72]	@ (8016bbc <udp_remove+0x80>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	60fb      	str	r3, [r7, #12]
 8016b76:	e010      	b.n	8016b9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d009      	beq.n	8016b94 <udp_remove+0x58>
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	68db      	ldr	r3, [r3, #12]
 8016b84:	687a      	ldr	r2, [r7, #4]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d104      	bne.n	8016b94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	68da      	ldr	r2, [r3, #12]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	60da      	str	r2, [r3, #12]
        break;
 8016b92:	e005      	b.n	8016ba0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	68db      	ldr	r3, [r3, #12]
 8016b98:	60fb      	str	r3, [r7, #12]
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d1eb      	bne.n	8016b78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016ba0:	6879      	ldr	r1, [r7, #4]
 8016ba2:	2000      	movs	r0, #0
 8016ba4:	f7f8 fddc 	bl	800f760 <memp_free>
}
 8016ba8:	3710      	adds	r7, #16
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
 8016bae:	bf00      	nop
 8016bb0:	08020ea4 	.word	0x08020ea4
 8016bb4:	080211f0 	.word	0x080211f0
 8016bb8:	08020ef8 	.word	0x08020ef8
 8016bbc:	20013d70 	.word	0x20013d70

08016bc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016bc6:	2000      	movs	r0, #0
 8016bc8:	f7f8 fd78 	bl	800f6bc <memp_malloc>
 8016bcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d007      	beq.n	8016be4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016bd4:	2220      	movs	r2, #32
 8016bd6:	2100      	movs	r1, #0
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	f005 fc03 	bl	801c3e4 <memset>
    pcb->ttl = UDP_TTL;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	22ff      	movs	r2, #255	@ 0xff
 8016be2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016be4:	687b      	ldr	r3, [r7, #4]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3708      	adds	r7, #8
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
	...

08016bf0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d01e      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d01a      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d017      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d013      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c16:	4b0d      	ldr	r3, [pc, #52]	@ (8016c4c <udp_netif_ip_addr_changed+0x5c>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	60fb      	str	r3, [r7, #12]
 8016c1c:	e00c      	b.n	8016c38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d103      	bne.n	8016c32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	681a      	ldr	r2, [r3, #0]
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	60fb      	str	r3, [r7, #12]
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1ef      	bne.n	8016c1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016c3e:	bf00      	nop
 8016c40:	3714      	adds	r7, #20
 8016c42:	46bd      	mov	sp, r7
 8016c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	20013d70 	.word	0x20013d70

08016c50 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8016c54:	4b20      	ldr	r3, [pc, #128]	@ (8016cd8 <dhcp_inc_pcb_refcount+0x88>)
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d133      	bne.n	8016cc4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8016c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d005      	beq.n	8016c70 <dhcp_inc_pcb_refcount+0x20>
 8016c64:	4b1e      	ldr	r3, [pc, #120]	@ (8016ce0 <dhcp_inc_pcb_refcount+0x90>)
 8016c66:	22e5      	movs	r2, #229	@ 0xe5
 8016c68:	491e      	ldr	r1, [pc, #120]	@ (8016ce4 <dhcp_inc_pcb_refcount+0x94>)
 8016c6a:	481f      	ldr	r0, [pc, #124]	@ (8016ce8 <dhcp_inc_pcb_refcount+0x98>)
 8016c6c:	f005 fa58 	bl	801c120 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8016c70:	f7ff ffa6 	bl	8016bc0 <udp_new>
 8016c74:	4603      	mov	r3, r0
 8016c76:	4a19      	ldr	r2, [pc, #100]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016c78:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8016c7a:	4b18      	ldr	r3, [pc, #96]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d102      	bne.n	8016c88 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016c82:	f04f 33ff 	mov.w	r3, #4294967295
 8016c86:	e024      	b.n	8016cd2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8016c88:	4b14      	ldr	r3, [pc, #80]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	7a5a      	ldrb	r2, [r3, #9]
 8016c8e:	4b13      	ldr	r3, [pc, #76]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f042 0220 	orr.w	r2, r2, #32
 8016c96:	b2d2      	uxtb	r2, r2
 8016c98:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8016c9a:	4b10      	ldr	r3, [pc, #64]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2244      	movs	r2, #68	@ 0x44
 8016ca0:	4912      	ldr	r1, [pc, #72]	@ (8016cec <dhcp_inc_pcb_refcount+0x9c>)
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7ff fdf2 	bl	801688c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8016ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2243      	movs	r2, #67	@ 0x43
 8016cae:	490f      	ldr	r1, [pc, #60]	@ (8016cec <dhcp_inc_pcb_refcount+0x9c>)
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7ff fe8d 	bl	80169d0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8016cb6:	4b09      	ldr	r3, [pc, #36]	@ (8016cdc <dhcp_inc_pcb_refcount+0x8c>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	490c      	ldr	r1, [pc, #48]	@ (8016cf0 <dhcp_inc_pcb_refcount+0xa0>)
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7ff ff1c 	bl	8016afc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016cc4:	4b04      	ldr	r3, [pc, #16]	@ (8016cd8 <dhcp_inc_pcb_refcount+0x88>)
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	3301      	adds	r3, #1
 8016cca:	b2da      	uxtb	r2, r3
 8016ccc:	4b02      	ldr	r3, [pc, #8]	@ (8016cd8 <dhcp_inc_pcb_refcount+0x88>)
 8016cce:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8016cd0:	2300      	movs	r3, #0
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	bf00      	nop
 8016cd8:	20013da0 	.word	0x20013da0
 8016cdc:	20013d9c 	.word	0x20013d9c
 8016ce0:	08021208 	.word	0x08021208
 8016ce4:	08021240 	.word	0x08021240
 8016ce8:	08021268 	.word	0x08021268
 8016cec:	0806da60 	.word	0x0806da60
 8016cf0:	080185b1 	.word	0x080185b1

08016cf4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8016cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8016d34 <dhcp_dec_pcb_refcount+0x40>)
 8016cfa:	781b      	ldrb	r3, [r3, #0]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d105      	bne.n	8016d0c <dhcp_dec_pcb_refcount+0x18>
 8016d00:	4b0d      	ldr	r3, [pc, #52]	@ (8016d38 <dhcp_dec_pcb_refcount+0x44>)
 8016d02:	22ff      	movs	r2, #255	@ 0xff
 8016d04:	490d      	ldr	r1, [pc, #52]	@ (8016d3c <dhcp_dec_pcb_refcount+0x48>)
 8016d06:	480e      	ldr	r0, [pc, #56]	@ (8016d40 <dhcp_dec_pcb_refcount+0x4c>)
 8016d08:	f005 fa0a 	bl	801c120 <iprintf>
  dhcp_pcb_refcount--;
 8016d0c:	4b09      	ldr	r3, [pc, #36]	@ (8016d34 <dhcp_dec_pcb_refcount+0x40>)
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	3b01      	subs	r3, #1
 8016d12:	b2da      	uxtb	r2, r3
 8016d14:	4b07      	ldr	r3, [pc, #28]	@ (8016d34 <dhcp_dec_pcb_refcount+0x40>)
 8016d16:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8016d18:	4b06      	ldr	r3, [pc, #24]	@ (8016d34 <dhcp_dec_pcb_refcount+0x40>)
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d107      	bne.n	8016d30 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8016d20:	4b08      	ldr	r3, [pc, #32]	@ (8016d44 <dhcp_dec_pcb_refcount+0x50>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7ff ff09 	bl	8016b3c <udp_remove>
    dhcp_pcb = NULL;
 8016d2a:	4b06      	ldr	r3, [pc, #24]	@ (8016d44 <dhcp_dec_pcb_refcount+0x50>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	601a      	str	r2, [r3, #0]
  }
}
 8016d30:	bf00      	nop
 8016d32:	bd80      	pop	{r7, pc}
 8016d34:	20013da0 	.word	0x20013da0
 8016d38:	08021208 	.word	0x08021208
 8016d3c:	08021290 	.word	0x08021290
 8016d40:	08021268 	.word	0x08021268
 8016d44:	20013d9c 	.word	0x20013d9c

08016d48 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b084      	sub	sp, #16
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016d56:	210c      	movs	r1, #12
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f001 f85a 	bl	8017e12 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016d5e:	4b06      	ldr	r3, [pc, #24]	@ (8016d78 <dhcp_handle_nak+0x30>)
 8016d60:	4a05      	ldr	r2, [pc, #20]	@ (8016d78 <dhcp_handle_nak+0x30>)
 8016d62:	4905      	ldr	r1, [pc, #20]	@ (8016d78 <dhcp_handle_nak+0x30>)
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f7f8 fe9d 	bl	800faa4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f000 fc48 	bl	8017600 <dhcp_discover>
}
 8016d70:	bf00      	nop
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	0806da60 	.word	0x0806da60

08016d7c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d88:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8016d8a:	2108      	movs	r1, #8
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f001 f840 	bl	8017e12 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	331c      	adds	r3, #28
 8016d96:	2200      	movs	r2, #0
 8016d98:	4619      	mov	r1, r3
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f002 fbbc 	bl	8019518 <etharp_query>
 8016da0:	4603      	mov	r3, r0
 8016da2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	799b      	ldrb	r3, [r3, #6]
 8016da8:	2bff      	cmp	r3, #255	@ 0xff
 8016daa:	d005      	beq.n	8016db8 <dhcp_check+0x3c>
    dhcp->tries++;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	799b      	ldrb	r3, [r3, #6]
 8016db0:	3301      	adds	r3, #1
 8016db2:	b2da      	uxtb	r2, r3
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8016db8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8016dbc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016dbe:	893b      	ldrh	r3, [r7, #8]
 8016dc0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016dc4:	4a06      	ldr	r2, [pc, #24]	@ (8016de0 <dhcp_check+0x64>)
 8016dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8016dca:	1152      	asrs	r2, r2, #5
 8016dcc:	17db      	asrs	r3, r3, #31
 8016dce:	1ad3      	subs	r3, r2, r3
 8016dd0:	b29a      	uxth	r2, r3
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016dd6:	bf00      	nop
 8016dd8:	3710      	adds	r7, #16
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
 8016dde:	bf00      	nop
 8016de0:	10624dd3 	.word	0x10624dd3

08016de4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b084      	sub	sp, #16
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016df2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016df4:	4b0c      	ldr	r3, [pc, #48]	@ (8016e28 <dhcp_handle_offer+0x44>)
 8016df6:	789b      	ldrb	r3, [r3, #2]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d011      	beq.n	8016e20 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016e02:	4b0a      	ldr	r3, [pc, #40]	@ (8016e2c <dhcp_handle_offer+0x48>)
 8016e04:	689b      	ldr	r3, [r3, #8]
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7f7 fe3f 	bl	800ea8a <lwip_htonl>
 8016e0c:	4602      	mov	r2, r0
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	691a      	ldr	r2, [r3, #16]
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f000 f808 	bl	8016e30 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8016e20:	bf00      	nop
 8016e22:	3710      	adds	r7, #16
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	20013d94 	.word	0x20013d94
 8016e2c:	20013d74 	.word	0x20013d74

08016e30 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016e30:	b5b0      	push	{r4, r5, r7, lr}
 8016e32:	b08a      	sub	sp, #40	@ 0x28
 8016e34:	af02      	add	r7, sp, #8
 8016e36:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d109      	bne.n	8016e52 <dhcp_select+0x22>
 8016e3e:	4b71      	ldr	r3, [pc, #452]	@ (8017004 <dhcp_select+0x1d4>)
 8016e40:	f240 1277 	movw	r2, #375	@ 0x177
 8016e44:	4970      	ldr	r1, [pc, #448]	@ (8017008 <dhcp_select+0x1d8>)
 8016e46:	4871      	ldr	r0, [pc, #452]	@ (801700c <dhcp_select+0x1dc>)
 8016e48:	f005 f96a 	bl	801c120 <iprintf>
 8016e4c:	f06f 030f 	mvn.w	r3, #15
 8016e50:	e0d3      	b.n	8016ffa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e56:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d109      	bne.n	8016e72 <dhcp_select+0x42>
 8016e5e:	4b69      	ldr	r3, [pc, #420]	@ (8017004 <dhcp_select+0x1d4>)
 8016e60:	f240 1279 	movw	r2, #377	@ 0x179
 8016e64:	496a      	ldr	r1, [pc, #424]	@ (8017010 <dhcp_select+0x1e0>)
 8016e66:	4869      	ldr	r0, [pc, #420]	@ (801700c <dhcp_select+0x1dc>)
 8016e68:	f005 f95a 	bl	801c120 <iprintf>
 8016e6c:	f06f 0305 	mvn.w	r3, #5
 8016e70:	e0c3      	b.n	8016ffa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016e72:	2101      	movs	r1, #1
 8016e74:	69b8      	ldr	r0, [r7, #24]
 8016e76:	f000 ffcc 	bl	8017e12 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016e7a:	f107 030c 	add.w	r3, r7, #12
 8016e7e:	2203      	movs	r2, #3
 8016e80:	69b9      	ldr	r1, [r7, #24]
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f001 fc5e 	bl	8018744 <dhcp_create_msg>
 8016e88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016e8a:	697b      	ldr	r3, [r7, #20]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	f000 8085 	beq.w	8016f9c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016e92:	697b      	ldr	r3, [r7, #20]
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016e98:	89b8      	ldrh	r0, [r7, #12]
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016ea0:	2302      	movs	r3, #2
 8016ea2:	2239      	movs	r2, #57	@ 0x39
 8016ea4:	f000 ffd0 	bl	8017e48 <dhcp_option>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016eac:	89b8      	ldrh	r0, [r7, #12]
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016eb8:	461a      	mov	r2, r3
 8016eba:	f001 f81f 	bl	8017efc <dhcp_option_short>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016ec2:	89b8      	ldrh	r0, [r7, #12]
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016eca:	2304      	movs	r3, #4
 8016ecc:	2232      	movs	r2, #50	@ 0x32
 8016ece:	f000 ffbb 	bl	8017e48 <dhcp_option>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016ed6:	89bc      	ldrh	r4, [r7, #12]
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	69db      	ldr	r3, [r3, #28]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7f7 fdd1 	bl	800ea8a <lwip_htonl>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	461a      	mov	r2, r3
 8016eec:	4629      	mov	r1, r5
 8016eee:	4620      	mov	r0, r4
 8016ef0:	f001 f836 	bl	8017f60 <dhcp_option_long>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016ef8:	89b8      	ldrh	r0, [r7, #12]
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016f00:	2304      	movs	r3, #4
 8016f02:	2236      	movs	r2, #54	@ 0x36
 8016f04:	f000 ffa0 	bl	8017e48 <dhcp_option>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016f0c:	89bc      	ldrh	r4, [r7, #12]
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	699b      	ldr	r3, [r3, #24]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f7 fdb6 	bl	800ea8a <lwip_htonl>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	461a      	mov	r2, r3
 8016f22:	4629      	mov	r1, r5
 8016f24:	4620      	mov	r0, r4
 8016f26:	f001 f81b 	bl	8017f60 <dhcp_option_long>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f2e:	89b8      	ldrh	r0, [r7, #12]
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016f36:	2303      	movs	r3, #3
 8016f38:	2237      	movs	r2, #55	@ 0x37
 8016f3a:	f000 ff85 	bl	8017e48 <dhcp_option>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f42:	2300      	movs	r3, #0
 8016f44:	77fb      	strb	r3, [r7, #31]
 8016f46:	e00e      	b.n	8016f66 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016f48:	89b8      	ldrh	r0, [r7, #12]
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016f50:	7ffb      	ldrb	r3, [r7, #31]
 8016f52:	4a30      	ldr	r2, [pc, #192]	@ (8017014 <dhcp_select+0x1e4>)
 8016f54:	5cd3      	ldrb	r3, [r2, r3]
 8016f56:	461a      	mov	r2, r3
 8016f58:	f000 ffaa 	bl	8017eb0 <dhcp_option_byte>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f60:	7ffb      	ldrb	r3, [r7, #31]
 8016f62:	3301      	adds	r3, #1
 8016f64:	77fb      	strb	r3, [r7, #31]
 8016f66:	7ffb      	ldrb	r3, [r7, #31]
 8016f68:	2b02      	cmp	r3, #2
 8016f6a:	d9ed      	bls.n	8016f48 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016f6c:	89b8      	ldrh	r0, [r7, #12]
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	33f0      	adds	r3, #240	@ 0xf0
 8016f72:	697a      	ldr	r2, [r7, #20]
 8016f74:	4619      	mov	r1, r3
 8016f76:	f001 fcbb 	bl	80188f0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016f7a:	4b27      	ldr	r3, [pc, #156]	@ (8017018 <dhcp_select+0x1e8>)
 8016f7c:	6818      	ldr	r0, [r3, #0]
 8016f7e:	4b27      	ldr	r3, [pc, #156]	@ (801701c <dhcp_select+0x1ec>)
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	2343      	movs	r3, #67	@ 0x43
 8016f88:	4a25      	ldr	r2, [pc, #148]	@ (8017020 <dhcp_select+0x1f0>)
 8016f8a:	6979      	ldr	r1, [r7, #20]
 8016f8c:	f7ff fb98 	bl	80166c0 <udp_sendto_if_src>
 8016f90:	4603      	mov	r3, r0
 8016f92:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8016f94:	6978      	ldr	r0, [r7, #20]
 8016f96:	f7f9 fa85 	bl	80104a4 <pbuf_free>
 8016f9a:	e001      	b.n	8016fa0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016f9c:	23ff      	movs	r3, #255	@ 0xff
 8016f9e:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	799b      	ldrb	r3, [r3, #6]
 8016fa4:	2bff      	cmp	r3, #255	@ 0xff
 8016fa6:	d005      	beq.n	8016fb4 <dhcp_select+0x184>
    dhcp->tries++;
 8016fa8:	69bb      	ldr	r3, [r7, #24]
 8016faa:	799b      	ldrb	r3, [r3, #6]
 8016fac:	3301      	adds	r3, #1
 8016fae:	b2da      	uxtb	r2, r3
 8016fb0:	69bb      	ldr	r3, [r7, #24]
 8016fb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016fb4:	69bb      	ldr	r3, [r7, #24]
 8016fb6:	799b      	ldrb	r3, [r3, #6]
 8016fb8:	2b05      	cmp	r3, #5
 8016fba:	d80d      	bhi.n	8016fd8 <dhcp_select+0x1a8>
 8016fbc:	69bb      	ldr	r3, [r7, #24]
 8016fbe:	799b      	ldrb	r3, [r3, #6]
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	4093      	lsls	r3, r2
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	461a      	mov	r2, r3
 8016fca:	0152      	lsls	r2, r2, #5
 8016fcc:	1ad2      	subs	r2, r2, r3
 8016fce:	0092      	lsls	r2, r2, #2
 8016fd0:	4413      	add	r3, r2
 8016fd2:	00db      	lsls	r3, r3, #3
 8016fd4:	b29b      	uxth	r3, r3
 8016fd6:	e001      	b.n	8016fdc <dhcp_select+0x1ac>
 8016fd8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8016fdc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016fde:	89fb      	ldrh	r3, [r7, #14]
 8016fe0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8017024 <dhcp_select+0x1f4>)
 8016fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8016fea:	1152      	asrs	r2, r2, #5
 8016fec:	17db      	asrs	r3, r3, #31
 8016fee:	1ad3      	subs	r3, r2, r3
 8016ff0:	b29a      	uxth	r2, r3
 8016ff2:	69bb      	ldr	r3, [r7, #24]
 8016ff4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016ff6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3720      	adds	r7, #32
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bdb0      	pop	{r4, r5, r7, pc}
 8017002:	bf00      	nop
 8017004:	08021208 	.word	0x08021208
 8017008:	080212b4 	.word	0x080212b4
 801700c:	08021268 	.word	0x08021268
 8017010:	080212d0 	.word	0x080212d0
 8017014:	200000bc 	.word	0x200000bc
 8017018:	20013d9c 	.word	0x20013d9c
 801701c:	0806da60 	.word	0x0806da60
 8017020:	0806da64 	.word	0x0806da64
 8017024:	10624dd3 	.word	0x10624dd3

08017028 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801702e:	4b27      	ldr	r3, [pc, #156]	@ (80170cc <dhcp_coarse_tmr+0xa4>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	607b      	str	r3, [r7, #4]
 8017034:	e042      	b.n	80170bc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801703a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d039      	beq.n	80170b6 <dhcp_coarse_tmr+0x8e>
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	795b      	ldrb	r3, [r3, #5]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d035      	beq.n	80170b6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	8a9b      	ldrh	r3, [r3, #20]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d012      	beq.n	8017078 <dhcp_coarse_tmr+0x50>
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	8a5b      	ldrh	r3, [r3, #18]
 8017056:	3301      	adds	r3, #1
 8017058:	b29a      	uxth	r2, r3
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	825a      	strh	r2, [r3, #18]
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	8a5a      	ldrh	r2, [r3, #18]
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	8a9b      	ldrh	r3, [r3, #20]
 8017066:	429a      	cmp	r2, r3
 8017068:	d106      	bne.n	8017078 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 fe2c 	bl	8017cc8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f000 f969 	bl	8017348 <dhcp_start>
 8017076:	e01e      	b.n	80170b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	8a1b      	ldrh	r3, [r3, #16]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d00b      	beq.n	8017098 <dhcp_coarse_tmr+0x70>
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	8a1b      	ldrh	r3, [r3, #16]
 8017084:	1e5a      	subs	r2, r3, #1
 8017086:	b291      	uxth	r1, r2
 8017088:	683a      	ldr	r2, [r7, #0]
 801708a:	8211      	strh	r1, [r2, #16]
 801708c:	2b01      	cmp	r3, #1
 801708e:	d103      	bne.n	8017098 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f000 f8c6 	bl	8017222 <dhcp_t2_timeout>
 8017096:	e00e      	b.n	80170b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	89db      	ldrh	r3, [r3, #14]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d00a      	beq.n	80170b6 <dhcp_coarse_tmr+0x8e>
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	89db      	ldrh	r3, [r3, #14]
 80170a4:	1e5a      	subs	r2, r3, #1
 80170a6:	b291      	uxth	r1, r2
 80170a8:	683a      	ldr	r2, [r7, #0]
 80170aa:	81d1      	strh	r1, [r2, #14]
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d102      	bne.n	80170b6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f000 f888 	bl	80171c6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	607b      	str	r3, [r7, #4]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d1b9      	bne.n	8017036 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80170c2:	bf00      	nop
 80170c4:	bf00      	nop
 80170c6:	3708      	adds	r7, #8
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}
 80170cc:	20013d04 	.word	0x20013d04

080170d0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80170d6:	4b16      	ldr	r3, [pc, #88]	@ (8017130 <dhcp_fine_tmr+0x60>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	607b      	str	r3, [r7, #4]
 80170dc:	e020      	b.n	8017120 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170e2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d017      	beq.n	801711a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80170ea:	683b      	ldr	r3, [r7, #0]
 80170ec:	891b      	ldrh	r3, [r3, #8]
 80170ee:	2b01      	cmp	r3, #1
 80170f0:	d906      	bls.n	8017100 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	891b      	ldrh	r3, [r3, #8]
 80170f6:	3b01      	subs	r3, #1
 80170f8:	b29a      	uxth	r2, r3
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	811a      	strh	r2, [r3, #8]
 80170fe:	e00c      	b.n	801711a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	891b      	ldrh	r3, [r3, #8]
 8017104:	2b01      	cmp	r3, #1
 8017106:	d108      	bne.n	801711a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	891b      	ldrh	r3, [r3, #8]
 801710c:	3b01      	subs	r3, #1
 801710e:	b29a      	uxth	r2, r3
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f000 f80d 	bl	8017134 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	607b      	str	r3, [r7, #4]
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d1db      	bne.n	80170de <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8017126:	bf00      	nop
 8017128:	bf00      	nop
 801712a:	3708      	adds	r7, #8
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}
 8017130:	20013d04 	.word	0x20013d04

08017134 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b084      	sub	sp, #16
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017140:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	795b      	ldrb	r3, [r3, #5]
 8017146:	2b0c      	cmp	r3, #12
 8017148:	d003      	beq.n	8017152 <dhcp_timeout+0x1e>
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	795b      	ldrb	r3, [r3, #5]
 801714e:	2b06      	cmp	r3, #6
 8017150:	d103      	bne.n	801715a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 fa54 	bl	8017600 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8017158:	e031      	b.n	80171be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	795b      	ldrb	r3, [r3, #5]
 801715e:	2b01      	cmp	r3, #1
 8017160:	d10e      	bne.n	8017180 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	799b      	ldrb	r3, [r3, #6]
 8017166:	2b05      	cmp	r3, #5
 8017168:	d803      	bhi.n	8017172 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801716a:	6878      	ldr	r0, [r7, #4]
 801716c:	f7ff fe60 	bl	8016e30 <dhcp_select>
}
 8017170:	e025      	b.n	80171be <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f000 fda8 	bl	8017cc8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f000 f8e5 	bl	8017348 <dhcp_start>
}
 801717e:	e01e      	b.n	80171be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	795b      	ldrb	r3, [r3, #5]
 8017184:	2b08      	cmp	r3, #8
 8017186:	d10b      	bne.n	80171a0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	799b      	ldrb	r3, [r3, #6]
 801718c:	2b01      	cmp	r3, #1
 801718e:	d803      	bhi.n	8017198 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8017190:	6878      	ldr	r0, [r7, #4]
 8017192:	f7ff fdf3 	bl	8016d7c <dhcp_check>
}
 8017196:	e012      	b.n	80171be <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f000 fad3 	bl	8017744 <dhcp_bind>
}
 801719e:	e00e      	b.n	80171be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	795b      	ldrb	r3, [r3, #5]
 80171a4:	2b03      	cmp	r3, #3
 80171a6:	d10a      	bne.n	80171be <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	799b      	ldrb	r3, [r3, #6]
 80171ac:	2b01      	cmp	r3, #1
 80171ae:	d803      	bhi.n	80171b8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f000 fcd5 	bl	8017b60 <dhcp_reboot>
}
 80171b6:	e002      	b.n	80171be <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f000 fa21 	bl	8017600 <dhcp_discover>
}
 80171be:	bf00      	nop
 80171c0:	3710      	adds	r7, #16
 80171c2:	46bd      	mov	sp, r7
 80171c4:	bd80      	pop	{r7, pc}

080171c6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80171c6:	b580      	push	{r7, lr}
 80171c8:	b084      	sub	sp, #16
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	795b      	ldrb	r3, [r3, #5]
 80171d8:	2b01      	cmp	r3, #1
 80171da:	d007      	beq.n	80171ec <dhcp_t1_timeout+0x26>
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	795b      	ldrb	r3, [r3, #5]
 80171e0:	2b0a      	cmp	r3, #10
 80171e2:	d003      	beq.n	80171ec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80171e8:	2b05      	cmp	r3, #5
 80171ea:	d116      	bne.n	801721a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f000 fb83 	bl	80178f8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	899b      	ldrh	r3, [r3, #12]
 80171f6:	461a      	mov	r2, r3
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	8a5b      	ldrh	r3, [r3, #18]
 80171fc:	1ad3      	subs	r3, r2, r3
 80171fe:	2b01      	cmp	r3, #1
 8017200:	dd0b      	ble.n	801721a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	899b      	ldrh	r3, [r3, #12]
 8017206:	461a      	mov	r2, r3
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	8a5b      	ldrh	r3, [r3, #18]
 801720c:	1ad3      	subs	r3, r2, r3
 801720e:	0fda      	lsrs	r2, r3, #31
 8017210:	4413      	add	r3, r2
 8017212:	105b      	asrs	r3, r3, #1
 8017214:	b29a      	uxth	r2, r3
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801721a:	bf00      	nop
 801721c:	3710      	adds	r7, #16
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}

08017222 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8017222:	b580      	push	{r7, lr}
 8017224:	b084      	sub	sp, #16
 8017226:	af00      	add	r7, sp, #0
 8017228:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801722e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	795b      	ldrb	r3, [r3, #5]
 8017234:	2b01      	cmp	r3, #1
 8017236:	d00b      	beq.n	8017250 <dhcp_t2_timeout+0x2e>
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	795b      	ldrb	r3, [r3, #5]
 801723c:	2b0a      	cmp	r3, #10
 801723e:	d007      	beq.n	8017250 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017244:	2b05      	cmp	r3, #5
 8017246:	d003      	beq.n	8017250 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	795b      	ldrb	r3, [r3, #5]
 801724c:	2b04      	cmp	r3, #4
 801724e:	d116      	bne.n	801727e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f000 fbeb 	bl	8017a2c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	8a9b      	ldrh	r3, [r3, #20]
 801725a:	461a      	mov	r2, r3
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	8a5b      	ldrh	r3, [r3, #18]
 8017260:	1ad3      	subs	r3, r2, r3
 8017262:	2b01      	cmp	r3, #1
 8017264:	dd0b      	ble.n	801727e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	8a9b      	ldrh	r3, [r3, #20]
 801726a:	461a      	mov	r2, r3
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	8a5b      	ldrh	r3, [r3, #18]
 8017270:	1ad3      	subs	r3, r2, r3
 8017272:	0fda      	lsrs	r2, r3, #31
 8017274:	4413      	add	r3, r2
 8017276:	105b      	asrs	r3, r3, #1
 8017278:	b29a      	uxth	r2, r3
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801727e:	bf00      	nop
 8017280:	3710      	adds	r7, #16
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}
	...

08017288 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017296:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	2200      	movs	r2, #0
 801729c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	2200      	movs	r2, #0
 80172a2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80172a4:	4b26      	ldr	r3, [pc, #152]	@ (8017340 <dhcp_handle_ack+0xb8>)
 80172a6:	78db      	ldrb	r3, [r3, #3]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d003      	beq.n	80172b4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80172ac:	4b25      	ldr	r3, [pc, #148]	@ (8017344 <dhcp_handle_ack+0xbc>)
 80172ae:	68da      	ldr	r2, [r3, #12]
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80172b4:	4b22      	ldr	r3, [pc, #136]	@ (8017340 <dhcp_handle_ack+0xb8>)
 80172b6:	791b      	ldrb	r3, [r3, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d004      	beq.n	80172c6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80172bc:	4b21      	ldr	r3, [pc, #132]	@ (8017344 <dhcp_handle_ack+0xbc>)
 80172be:	691a      	ldr	r2, [r3, #16]
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80172c4:	e004      	b.n	80172d0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172ca:	085a      	lsrs	r2, r3, #1
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80172d0:	4b1b      	ldr	r3, [pc, #108]	@ (8017340 <dhcp_handle_ack+0xb8>)
 80172d2:	795b      	ldrb	r3, [r3, #5]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d004      	beq.n	80172e2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80172d8:	4b1a      	ldr	r3, [pc, #104]	@ (8017344 <dhcp_handle_ack+0xbc>)
 80172da:	695a      	ldr	r2, [r3, #20]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	631a      	str	r2, [r3, #48]	@ 0x30
 80172e0:	e007      	b.n	80172f2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80172e6:	4613      	mov	r3, r2
 80172e8:	00db      	lsls	r3, r3, #3
 80172ea:	1a9b      	subs	r3, r3, r2
 80172ec:	08da      	lsrs	r2, r3, #3
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	691a      	ldr	r2, [r3, #16]
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80172fa:	4b11      	ldr	r3, [pc, #68]	@ (8017340 <dhcp_handle_ack+0xb8>)
 80172fc:	799b      	ldrb	r3, [r3, #6]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d00b      	beq.n	801731a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017302:	4b10      	ldr	r3, [pc, #64]	@ (8017344 <dhcp_handle_ack+0xbc>)
 8017304:	699b      	ldr	r3, [r3, #24]
 8017306:	4618      	mov	r0, r3
 8017308:	f7f7 fbbf 	bl	800ea8a <lwip_htonl>
 801730c:	4602      	mov	r2, r0
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	2201      	movs	r2, #1
 8017316:	71da      	strb	r2, [r3, #7]
 8017318:	e002      	b.n	8017320 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	2200      	movs	r2, #0
 801731e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017320:	4b07      	ldr	r3, [pc, #28]	@ (8017340 <dhcp_handle_ack+0xb8>)
 8017322:	79db      	ldrb	r3, [r3, #7]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d007      	beq.n	8017338 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017328:	4b06      	ldr	r3, [pc, #24]	@ (8017344 <dhcp_handle_ack+0xbc>)
 801732a:	69db      	ldr	r3, [r3, #28]
 801732c:	4618      	mov	r0, r3
 801732e:	f7f7 fbac 	bl	800ea8a <lwip_htonl>
 8017332:	4602      	mov	r2, r0
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8017338:	bf00      	nop
 801733a:	3710      	adds	r7, #16
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}
 8017340:	20013d94 	.word	0x20013d94
 8017344:	20013d74 	.word	0x20013d74

08017348 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b084      	sub	sp, #16
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d109      	bne.n	801736a <dhcp_start+0x22>
 8017356:	4b37      	ldr	r3, [pc, #220]	@ (8017434 <dhcp_start+0xec>)
 8017358:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801735c:	4936      	ldr	r1, [pc, #216]	@ (8017438 <dhcp_start+0xf0>)
 801735e:	4837      	ldr	r0, [pc, #220]	@ (801743c <dhcp_start+0xf4>)
 8017360:	f004 fede 	bl	801c120 <iprintf>
 8017364:	f06f 030f 	mvn.w	r3, #15
 8017368:	e060      	b.n	801742c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017370:	f003 0301 	and.w	r3, r3, #1
 8017374:	2b00      	cmp	r3, #0
 8017376:	d109      	bne.n	801738c <dhcp_start+0x44>
 8017378:	4b2e      	ldr	r3, [pc, #184]	@ (8017434 <dhcp_start+0xec>)
 801737a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801737e:	4930      	ldr	r1, [pc, #192]	@ (8017440 <dhcp_start+0xf8>)
 8017380:	482e      	ldr	r0, [pc, #184]	@ (801743c <dhcp_start+0xf4>)
 8017382:	f004 fecd 	bl	801c120 <iprintf>
 8017386:	f06f 030f 	mvn.w	r3, #15
 801738a:	e04f      	b.n	801742c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017390:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017396:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801739a:	d202      	bcs.n	80173a2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801739c:	f04f 33ff 	mov.w	r3, #4294967295
 80173a0:	e044      	b.n	801742c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d10d      	bne.n	80173c4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80173a8:	2034      	movs	r0, #52	@ 0x34
 80173aa:	f7f8 f805 	bl	800f3b8 <mem_malloc>
 80173ae:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d102      	bne.n	80173bc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80173b6:	f04f 33ff 	mov.w	r3, #4294967295
 80173ba:	e037      	b.n	801742c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	68fa      	ldr	r2, [r7, #12]
 80173c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80173c2:	e005      	b.n	80173d0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	791b      	ldrb	r3, [r3, #4]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d001      	beq.n	80173d0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80173cc:	f7ff fc92 	bl	8016cf4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80173d0:	2234      	movs	r2, #52	@ 0x34
 80173d2:	2100      	movs	r1, #0
 80173d4:	68f8      	ldr	r0, [r7, #12]
 80173d6:	f005 f805 	bl	801c3e4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80173da:	f7ff fc39 	bl	8016c50 <dhcp_inc_pcb_refcount>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d002      	beq.n	80173ea <dhcp_start+0xa2>
    return ERR_MEM;
 80173e4:	f04f 33ff 	mov.w	r3, #4294967295
 80173e8:	e020      	b.n	801742c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	2201      	movs	r2, #1
 80173ee:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80173f6:	f003 0304 	and.w	r3, r3, #4
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d105      	bne.n	801740a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80173fe:	2102      	movs	r1, #2
 8017400:	68f8      	ldr	r0, [r7, #12]
 8017402:	f000 fd06 	bl	8017e12 <dhcp_set_state>
    return ERR_OK;
 8017406:	2300      	movs	r3, #0
 8017408:	e010      	b.n	801742c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f000 f8f8 	bl	8017600 <dhcp_discover>
 8017410:	4603      	mov	r3, r0
 8017412:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017414:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d005      	beq.n	8017428 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f000 fc53 	bl	8017cc8 <dhcp_release_and_stop>
    return ERR_MEM;
 8017422:	f04f 33ff 	mov.w	r3, #4294967295
 8017426:	e001      	b.n	801742c <dhcp_start+0xe4>
  }
  return result;
 8017428:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801742c:	4618      	mov	r0, r3
 801742e:	3710      	adds	r7, #16
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}
 8017434:	08021208 	.word	0x08021208
 8017438:	080212ec 	.word	0x080212ec
 801743c:	08021268 	.word	0x08021268
 8017440:	08021330 	.word	0x08021330

08017444 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b084      	sub	sp, #16
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017450:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d025      	beq.n	80174a4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	795b      	ldrb	r3, [r3, #5]
 801745c:	2b0a      	cmp	r3, #10
 801745e:	d008      	beq.n	8017472 <dhcp_network_changed+0x2e>
 8017460:	2b0a      	cmp	r3, #10
 8017462:	dc0d      	bgt.n	8017480 <dhcp_network_changed+0x3c>
 8017464:	2b00      	cmp	r3, #0
 8017466:	d01f      	beq.n	80174a8 <dhcp_network_changed+0x64>
 8017468:	2b00      	cmp	r3, #0
 801746a:	db09      	blt.n	8017480 <dhcp_network_changed+0x3c>
 801746c:	3b03      	subs	r3, #3
 801746e:	2b02      	cmp	r3, #2
 8017470:	d806      	bhi.n	8017480 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	2200      	movs	r2, #0
 8017476:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f000 fb71 	bl	8017b60 <dhcp_reboot>
      break;
 801747e:	e014      	b.n	80174aa <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	795b      	ldrb	r3, [r3, #5]
 8017484:	2b0c      	cmp	r3, #12
 8017486:	d906      	bls.n	8017496 <dhcp_network_changed+0x52>
 8017488:	4b09      	ldr	r3, [pc, #36]	@ (80174b0 <dhcp_network_changed+0x6c>)
 801748a:	f240 326d 	movw	r2, #877	@ 0x36d
 801748e:	4909      	ldr	r1, [pc, #36]	@ (80174b4 <dhcp_network_changed+0x70>)
 8017490:	4809      	ldr	r0, [pc, #36]	@ (80174b8 <dhcp_network_changed+0x74>)
 8017492:	f004 fe45 	bl	801c120 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	2200      	movs	r2, #0
 801749a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f000 f8af 	bl	8017600 <dhcp_discover>
      break;
 80174a2:	e002      	b.n	80174aa <dhcp_network_changed+0x66>
    return;
 80174a4:	bf00      	nop
 80174a6:	e000      	b.n	80174aa <dhcp_network_changed+0x66>
      break;
 80174a8:	bf00      	nop
  }
}
 80174aa:	3710      	adds	r7, #16
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	08021208 	.word	0x08021208
 80174b4:	08021354 	.word	0x08021354
 80174b8:	08021268 	.word	0x08021268

080174bc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d107      	bne.n	80174dc <dhcp_arp_reply+0x20>
 80174cc:	4b0e      	ldr	r3, [pc, #56]	@ (8017508 <dhcp_arp_reply+0x4c>)
 80174ce:	f240 328b 	movw	r2, #907	@ 0x38b
 80174d2:	490e      	ldr	r1, [pc, #56]	@ (801750c <dhcp_arp_reply+0x50>)
 80174d4:	480e      	ldr	r0, [pc, #56]	@ (8017510 <dhcp_arp_reply+0x54>)
 80174d6:	f004 fe23 	bl	801c120 <iprintf>
 80174da:	e012      	b.n	8017502 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174e0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d00c      	beq.n	8017502 <dhcp_arp_reply+0x46>
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	795b      	ldrb	r3, [r3, #5]
 80174ec:	2b08      	cmp	r3, #8
 80174ee:	d108      	bne.n	8017502 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	681a      	ldr	r2, [r3, #0]
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	69db      	ldr	r3, [r3, #28]
 80174f8:	429a      	cmp	r2, r3
 80174fa:	d102      	bne.n	8017502 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f000 f809 	bl	8017514 <dhcp_decline>
    }
  }
}
 8017502:	3710      	adds	r7, #16
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}
 8017508:	08021208 	.word	0x08021208
 801750c:	080212ec 	.word	0x080212ec
 8017510:	08021268 	.word	0x08021268

08017514 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017514:	b5b0      	push	{r4, r5, r7, lr}
 8017516:	b08a      	sub	sp, #40	@ 0x28
 8017518:	af02      	add	r7, sp, #8
 801751a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017520:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017522:	210c      	movs	r1, #12
 8017524:	69b8      	ldr	r0, [r7, #24]
 8017526:	f000 fc74 	bl	8017e12 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801752a:	f107 030c 	add.w	r3, r7, #12
 801752e:	2204      	movs	r2, #4
 8017530:	69b9      	ldr	r1, [r7, #24]
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f001 f906 	bl	8018744 <dhcp_create_msg>
 8017538:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d035      	beq.n	80175ac <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017540:	697b      	ldr	r3, [r7, #20]
 8017542:	685b      	ldr	r3, [r3, #4]
 8017544:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017546:	89b8      	ldrh	r0, [r7, #12]
 8017548:	693b      	ldr	r3, [r7, #16]
 801754a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801754e:	2304      	movs	r3, #4
 8017550:	2232      	movs	r2, #50	@ 0x32
 8017552:	f000 fc79 	bl	8017e48 <dhcp_option>
 8017556:	4603      	mov	r3, r0
 8017558:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801755a:	89bc      	ldrh	r4, [r7, #12]
 801755c:	693b      	ldr	r3, [r7, #16]
 801755e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	69db      	ldr	r3, [r3, #28]
 8017566:	4618      	mov	r0, r3
 8017568:	f7f7 fa8f 	bl	800ea8a <lwip_htonl>
 801756c:	4603      	mov	r3, r0
 801756e:	461a      	mov	r2, r3
 8017570:	4629      	mov	r1, r5
 8017572:	4620      	mov	r0, r4
 8017574:	f000 fcf4 	bl	8017f60 <dhcp_option_long>
 8017578:	4603      	mov	r3, r0
 801757a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801757c:	89b8      	ldrh	r0, [r7, #12]
 801757e:	693b      	ldr	r3, [r7, #16]
 8017580:	33f0      	adds	r3, #240	@ 0xf0
 8017582:	697a      	ldr	r2, [r7, #20]
 8017584:	4619      	mov	r1, r3
 8017586:	f001 f9b3 	bl	80188f0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801758a:	4b19      	ldr	r3, [pc, #100]	@ (80175f0 <dhcp_decline+0xdc>)
 801758c:	6818      	ldr	r0, [r3, #0]
 801758e:	4b19      	ldr	r3, [pc, #100]	@ (80175f4 <dhcp_decline+0xe0>)
 8017590:	9301      	str	r3, [sp, #4]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	2343      	movs	r3, #67	@ 0x43
 8017598:	4a17      	ldr	r2, [pc, #92]	@ (80175f8 <dhcp_decline+0xe4>)
 801759a:	6979      	ldr	r1, [r7, #20]
 801759c:	f7ff f890 	bl	80166c0 <udp_sendto_if_src>
 80175a0:	4603      	mov	r3, r0
 80175a2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80175a4:	6978      	ldr	r0, [r7, #20]
 80175a6:	f7f8 ff7d 	bl	80104a4 <pbuf_free>
 80175aa:	e001      	b.n	80175b0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80175ac:	23ff      	movs	r3, #255	@ 0xff
 80175ae:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80175b0:	69bb      	ldr	r3, [r7, #24]
 80175b2:	799b      	ldrb	r3, [r3, #6]
 80175b4:	2bff      	cmp	r3, #255	@ 0xff
 80175b6:	d005      	beq.n	80175c4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	799b      	ldrb	r3, [r3, #6]
 80175bc:	3301      	adds	r3, #1
 80175be:	b2da      	uxtb	r2, r3
 80175c0:	69bb      	ldr	r3, [r7, #24]
 80175c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80175c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80175c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80175ca:	89fb      	ldrh	r3, [r7, #14]
 80175cc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80175d0:	4a0a      	ldr	r2, [pc, #40]	@ (80175fc <dhcp_decline+0xe8>)
 80175d2:	fb82 1203 	smull	r1, r2, r2, r3
 80175d6:	1152      	asrs	r2, r2, #5
 80175d8:	17db      	asrs	r3, r3, #31
 80175da:	1ad3      	subs	r3, r2, r3
 80175dc:	b29a      	uxth	r2, r3
 80175de:	69bb      	ldr	r3, [r7, #24]
 80175e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80175e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175e6:	4618      	mov	r0, r3
 80175e8:	3720      	adds	r7, #32
 80175ea:	46bd      	mov	sp, r7
 80175ec:	bdb0      	pop	{r4, r5, r7, pc}
 80175ee:	bf00      	nop
 80175f0:	20013d9c 	.word	0x20013d9c
 80175f4:	0806da60 	.word	0x0806da60
 80175f8:	0806da64 	.word	0x0806da64
 80175fc:	10624dd3 	.word	0x10624dd3

08017600 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b08a      	sub	sp, #40	@ 0x28
 8017604:	af02      	add	r7, sp, #8
 8017606:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801760c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801760e:	2300      	movs	r3, #0
 8017610:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017612:	69bb      	ldr	r3, [r7, #24]
 8017614:	2200      	movs	r2, #0
 8017616:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8017618:	2106      	movs	r1, #6
 801761a:	69b8      	ldr	r0, [r7, #24]
 801761c:	f000 fbf9 	bl	8017e12 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017620:	f107 0308 	add.w	r3, r7, #8
 8017624:	2201      	movs	r2, #1
 8017626:	69b9      	ldr	r1, [r7, #24]
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f001 f88b 	bl	8018744 <dhcp_create_msg>
 801762e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d04b      	beq.n	80176ce <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801763c:	8938      	ldrh	r0, [r7, #8]
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017644:	2302      	movs	r3, #2
 8017646:	2239      	movs	r2, #57	@ 0x39
 8017648:	f000 fbfe 	bl	8017e48 <dhcp_option>
 801764c:	4603      	mov	r3, r0
 801764e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017650:	8938      	ldrh	r0, [r7, #8]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801765c:	461a      	mov	r2, r3
 801765e:	f000 fc4d 	bl	8017efc <dhcp_option_short>
 8017662:	4603      	mov	r3, r0
 8017664:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017666:	8938      	ldrh	r0, [r7, #8]
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801766e:	2303      	movs	r3, #3
 8017670:	2237      	movs	r2, #55	@ 0x37
 8017672:	f000 fbe9 	bl	8017e48 <dhcp_option>
 8017676:	4603      	mov	r3, r0
 8017678:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801767a:	2300      	movs	r3, #0
 801767c:	77fb      	strb	r3, [r7, #31]
 801767e:	e00e      	b.n	801769e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017680:	8938      	ldrh	r0, [r7, #8]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017688:	7ffb      	ldrb	r3, [r7, #31]
 801768a:	4a29      	ldr	r2, [pc, #164]	@ (8017730 <dhcp_discover+0x130>)
 801768c:	5cd3      	ldrb	r3, [r2, r3]
 801768e:	461a      	mov	r2, r3
 8017690:	f000 fc0e 	bl	8017eb0 <dhcp_option_byte>
 8017694:	4603      	mov	r3, r0
 8017696:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017698:	7ffb      	ldrb	r3, [r7, #31]
 801769a:	3301      	adds	r3, #1
 801769c:	77fb      	strb	r3, [r7, #31]
 801769e:	7ffb      	ldrb	r3, [r7, #31]
 80176a0:	2b02      	cmp	r3, #2
 80176a2:	d9ed      	bls.n	8017680 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80176a4:	8938      	ldrh	r0, [r7, #8]
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	33f0      	adds	r3, #240	@ 0xf0
 80176aa:	693a      	ldr	r2, [r7, #16]
 80176ac:	4619      	mov	r1, r3
 80176ae:	f001 f91f 	bl	80188f0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80176b2:	4b20      	ldr	r3, [pc, #128]	@ (8017734 <dhcp_discover+0x134>)
 80176b4:	6818      	ldr	r0, [r3, #0]
 80176b6:	4b20      	ldr	r3, [pc, #128]	@ (8017738 <dhcp_discover+0x138>)
 80176b8:	9301      	str	r3, [sp, #4]
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	9300      	str	r3, [sp, #0]
 80176be:	2343      	movs	r3, #67	@ 0x43
 80176c0:	4a1e      	ldr	r2, [pc, #120]	@ (801773c <dhcp_discover+0x13c>)
 80176c2:	6939      	ldr	r1, [r7, #16]
 80176c4:	f7fe fffc 	bl	80166c0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80176c8:	6938      	ldr	r0, [r7, #16]
 80176ca:	f7f8 feeb 	bl	80104a4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80176ce:	69bb      	ldr	r3, [r7, #24]
 80176d0:	799b      	ldrb	r3, [r3, #6]
 80176d2:	2bff      	cmp	r3, #255	@ 0xff
 80176d4:	d005      	beq.n	80176e2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80176d6:	69bb      	ldr	r3, [r7, #24]
 80176d8:	799b      	ldrb	r3, [r3, #6]
 80176da:	3301      	adds	r3, #1
 80176dc:	b2da      	uxtb	r2, r3
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80176e2:	69bb      	ldr	r3, [r7, #24]
 80176e4:	799b      	ldrb	r3, [r3, #6]
 80176e6:	2b05      	cmp	r3, #5
 80176e8:	d80d      	bhi.n	8017706 <dhcp_discover+0x106>
 80176ea:	69bb      	ldr	r3, [r7, #24]
 80176ec:	799b      	ldrb	r3, [r3, #6]
 80176ee:	461a      	mov	r2, r3
 80176f0:	2301      	movs	r3, #1
 80176f2:	4093      	lsls	r3, r2
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	461a      	mov	r2, r3
 80176f8:	0152      	lsls	r2, r2, #5
 80176fa:	1ad2      	subs	r2, r2, r3
 80176fc:	0092      	lsls	r2, r2, #2
 80176fe:	4413      	add	r3, r2
 8017700:	00db      	lsls	r3, r3, #3
 8017702:	b29b      	uxth	r3, r3
 8017704:	e001      	b.n	801770a <dhcp_discover+0x10a>
 8017706:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801770a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801770c:	897b      	ldrh	r3, [r7, #10]
 801770e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017712:	4a0b      	ldr	r2, [pc, #44]	@ (8017740 <dhcp_discover+0x140>)
 8017714:	fb82 1203 	smull	r1, r2, r2, r3
 8017718:	1152      	asrs	r2, r2, #5
 801771a:	17db      	asrs	r3, r3, #31
 801771c:	1ad3      	subs	r3, r2, r3
 801771e:	b29a      	uxth	r2, r3
 8017720:	69bb      	ldr	r3, [r7, #24]
 8017722:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017728:	4618      	mov	r0, r3
 801772a:	3720      	adds	r7, #32
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	200000bc 	.word	0x200000bc
 8017734:	20013d9c 	.word	0x20013d9c
 8017738:	0806da60 	.word	0x0806da60
 801773c:	0806da64 	.word	0x0806da64
 8017740:	10624dd3 	.word	0x10624dd3

08017744 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b088      	sub	sp, #32
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d107      	bne.n	8017762 <dhcp_bind+0x1e>
 8017752:	4b64      	ldr	r3, [pc, #400]	@ (80178e4 <dhcp_bind+0x1a0>)
 8017754:	f240 4215 	movw	r2, #1045	@ 0x415
 8017758:	4963      	ldr	r1, [pc, #396]	@ (80178e8 <dhcp_bind+0x1a4>)
 801775a:	4864      	ldr	r0, [pc, #400]	@ (80178ec <dhcp_bind+0x1a8>)
 801775c:	f004 fce0 	bl	801c120 <iprintf>
 8017760:	e0bc      	b.n	80178dc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017766:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017768:	69fb      	ldr	r3, [r7, #28]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d107      	bne.n	801777e <dhcp_bind+0x3a>
 801776e:	4b5d      	ldr	r3, [pc, #372]	@ (80178e4 <dhcp_bind+0x1a0>)
 8017770:	f240 4217 	movw	r2, #1047	@ 0x417
 8017774:	495e      	ldr	r1, [pc, #376]	@ (80178f0 <dhcp_bind+0x1ac>)
 8017776:	485d      	ldr	r0, [pc, #372]	@ (80178ec <dhcp_bind+0x1a8>)
 8017778:	f004 fcd2 	bl	801c120 <iprintf>
 801777c:	e0ae      	b.n	80178dc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801777e:	69fb      	ldr	r3, [r7, #28]
 8017780:	2200      	movs	r2, #0
 8017782:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801778c:	d019      	beq.n	80177c2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801778e:	69fb      	ldr	r3, [r7, #28]
 8017790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017792:	331e      	adds	r3, #30
 8017794:	4a57      	ldr	r2, [pc, #348]	@ (80178f4 <dhcp_bind+0x1b0>)
 8017796:	fba2 2303 	umull	r2, r3, r2, r3
 801779a:	095b      	lsrs	r3, r3, #5
 801779c:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801779e:	69bb      	ldr	r3, [r7, #24]
 80177a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80177a4:	d302      	bcc.n	80177ac <dhcp_bind+0x68>
      timeout = 0xffff;
 80177a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80177aa:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80177ac:	69bb      	ldr	r3, [r7, #24]
 80177ae:	b29a      	uxth	r2, r3
 80177b0:	69fb      	ldr	r3, [r7, #28]
 80177b2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	8a9b      	ldrh	r3, [r3, #20]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d102      	bne.n	80177c2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80177bc:	69fb      	ldr	r3, [r7, #28]
 80177be:	2201      	movs	r2, #1
 80177c0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177ca:	d01d      	beq.n	8017808 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80177cc:	69fb      	ldr	r3, [r7, #28]
 80177ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177d0:	331e      	adds	r3, #30
 80177d2:	4a48      	ldr	r2, [pc, #288]	@ (80178f4 <dhcp_bind+0x1b0>)
 80177d4:	fba2 2303 	umull	r2, r3, r2, r3
 80177d8:	095b      	lsrs	r3, r3, #5
 80177da:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80177dc:	69bb      	ldr	r3, [r7, #24]
 80177de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80177e2:	d302      	bcc.n	80177ea <dhcp_bind+0xa6>
      timeout = 0xffff;
 80177e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80177e8:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	b29a      	uxth	r2, r3
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80177f2:	69fb      	ldr	r3, [r7, #28]
 80177f4:	895b      	ldrh	r3, [r3, #10]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d102      	bne.n	8017800 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80177fa:	69fb      	ldr	r3, [r7, #28]
 80177fc:	2201      	movs	r2, #1
 80177fe:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017800:	69fb      	ldr	r3, [r7, #28]
 8017802:	895a      	ldrh	r2, [r3, #10]
 8017804:	69fb      	ldr	r3, [r7, #28]
 8017806:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017808:	69fb      	ldr	r3, [r7, #28]
 801780a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017810:	d01d      	beq.n	801784e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017812:	69fb      	ldr	r3, [r7, #28]
 8017814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017816:	331e      	adds	r3, #30
 8017818:	4a36      	ldr	r2, [pc, #216]	@ (80178f4 <dhcp_bind+0x1b0>)
 801781a:	fba2 2303 	umull	r2, r3, r2, r3
 801781e:	095b      	lsrs	r3, r3, #5
 8017820:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017822:	69bb      	ldr	r3, [r7, #24]
 8017824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017828:	d302      	bcc.n	8017830 <dhcp_bind+0xec>
      timeout = 0xffff;
 801782a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801782e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017830:	69bb      	ldr	r3, [r7, #24]
 8017832:	b29a      	uxth	r2, r3
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017838:	69fb      	ldr	r3, [r7, #28]
 801783a:	899b      	ldrh	r3, [r3, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d102      	bne.n	8017846 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017840:	69fb      	ldr	r3, [r7, #28]
 8017842:	2201      	movs	r2, #1
 8017844:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	899a      	ldrh	r2, [r3, #12]
 801784a:	69fb      	ldr	r3, [r7, #28]
 801784c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801784e:	69fb      	ldr	r3, [r7, #28]
 8017850:	895a      	ldrh	r2, [r3, #10]
 8017852:	69fb      	ldr	r3, [r7, #28]
 8017854:	899b      	ldrh	r3, [r3, #12]
 8017856:	429a      	cmp	r2, r3
 8017858:	d306      	bcc.n	8017868 <dhcp_bind+0x124>
 801785a:	69fb      	ldr	r3, [r7, #28]
 801785c:	899b      	ldrh	r3, [r3, #12]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d002      	beq.n	8017868 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017862:	69fb      	ldr	r3, [r7, #28]
 8017864:	2200      	movs	r2, #0
 8017866:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017868:	69fb      	ldr	r3, [r7, #28]
 801786a:	79db      	ldrb	r3, [r3, #7]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d003      	beq.n	8017878 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017870:	69fb      	ldr	r3, [r7, #28]
 8017872:	6a1b      	ldr	r3, [r3, #32]
 8017874:	613b      	str	r3, [r7, #16]
 8017876:	e014      	b.n	80178a2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017878:	69fb      	ldr	r3, [r7, #28]
 801787a:	331c      	adds	r3, #28
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017884:	2b00      	cmp	r3, #0
 8017886:	db02      	blt.n	801788e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017888:	23ff      	movs	r3, #255	@ 0xff
 801788a:	613b      	str	r3, [r7, #16]
 801788c:	e009      	b.n	80178a2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801788e:	7dfb      	ldrb	r3, [r7, #23]
 8017890:	2bbf      	cmp	r3, #191	@ 0xbf
 8017892:	d903      	bls.n	801789c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017894:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8017898:	613b      	str	r3, [r7, #16]
 801789a:	e002      	b.n	80178a2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801789c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80178a0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80178a2:	69fb      	ldr	r3, [r7, #28]
 80178a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178a6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d108      	bne.n	80178c0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80178ae:	69fb      	ldr	r3, [r7, #28]
 80178b0:	69da      	ldr	r2, [r3, #28]
 80178b2:	693b      	ldr	r3, [r7, #16]
 80178b4:	4013      	ands	r3, r2
 80178b6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80178be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80178c0:	210a      	movs	r1, #10
 80178c2:	69f8      	ldr	r0, [r7, #28]
 80178c4:	f000 faa5 	bl	8017e12 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80178c8:	69fb      	ldr	r3, [r7, #28]
 80178ca:	f103 011c 	add.w	r1, r3, #28
 80178ce:	f107 030c 	add.w	r3, r7, #12
 80178d2:	f107 0210 	add.w	r2, r7, #16
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f7f8 f8e4 	bl	800faa4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80178dc:	3720      	adds	r7, #32
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	08021208 	.word	0x08021208
 80178e8:	08021368 	.word	0x08021368
 80178ec:	08021268 	.word	0x08021268
 80178f0:	08021384 	.word	0x08021384
 80178f4:	88888889 	.word	0x88888889

080178f8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b08a      	sub	sp, #40	@ 0x28
 80178fc:	af02      	add	r7, sp, #8
 80178fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017904:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017906:	2105      	movs	r1, #5
 8017908:	69b8      	ldr	r0, [r7, #24]
 801790a:	f000 fa82 	bl	8017e12 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801790e:	f107 030c 	add.w	r3, r7, #12
 8017912:	2203      	movs	r2, #3
 8017914:	69b9      	ldr	r1, [r7, #24]
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f000 ff14 	bl	8018744 <dhcp_create_msg>
 801791c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d04e      	beq.n	80179c2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	685b      	ldr	r3, [r3, #4]
 8017928:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801792a:	89b8      	ldrh	r0, [r7, #12]
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017932:	2302      	movs	r3, #2
 8017934:	2239      	movs	r2, #57	@ 0x39
 8017936:	f000 fa87 	bl	8017e48 <dhcp_option>
 801793a:	4603      	mov	r3, r0
 801793c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801793e:	89b8      	ldrh	r0, [r7, #12]
 8017940:	693b      	ldr	r3, [r7, #16]
 8017942:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801794a:	461a      	mov	r2, r3
 801794c:	f000 fad6 	bl	8017efc <dhcp_option_short>
 8017950:	4603      	mov	r3, r0
 8017952:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017954:	89b8      	ldrh	r0, [r7, #12]
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801795c:	2303      	movs	r3, #3
 801795e:	2237      	movs	r2, #55	@ 0x37
 8017960:	f000 fa72 	bl	8017e48 <dhcp_option>
 8017964:	4603      	mov	r3, r0
 8017966:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017968:	2300      	movs	r3, #0
 801796a:	77bb      	strb	r3, [r7, #30]
 801796c:	e00e      	b.n	801798c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801796e:	89b8      	ldrh	r0, [r7, #12]
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017976:	7fbb      	ldrb	r3, [r7, #30]
 8017978:	4a29      	ldr	r2, [pc, #164]	@ (8017a20 <dhcp_renew+0x128>)
 801797a:	5cd3      	ldrb	r3, [r2, r3]
 801797c:	461a      	mov	r2, r3
 801797e:	f000 fa97 	bl	8017eb0 <dhcp_option_byte>
 8017982:	4603      	mov	r3, r0
 8017984:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017986:	7fbb      	ldrb	r3, [r7, #30]
 8017988:	3301      	adds	r3, #1
 801798a:	77bb      	strb	r3, [r7, #30]
 801798c:	7fbb      	ldrb	r3, [r7, #30]
 801798e:	2b02      	cmp	r3, #2
 8017990:	d9ed      	bls.n	801796e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017992:	89b8      	ldrh	r0, [r7, #12]
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	33f0      	adds	r3, #240	@ 0xf0
 8017998:	697a      	ldr	r2, [r7, #20]
 801799a:	4619      	mov	r1, r3
 801799c:	f000 ffa8 	bl	80188f0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80179a0:	4b20      	ldr	r3, [pc, #128]	@ (8017a24 <dhcp_renew+0x12c>)
 80179a2:	6818      	ldr	r0, [r3, #0]
 80179a4:	69bb      	ldr	r3, [r7, #24]
 80179a6:	f103 0218 	add.w	r2, r3, #24
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	2343      	movs	r3, #67	@ 0x43
 80179b0:	6979      	ldr	r1, [r7, #20]
 80179b2:	f7fe fe11 	bl	80165d8 <udp_sendto_if>
 80179b6:	4603      	mov	r3, r0
 80179b8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80179ba:	6978      	ldr	r0, [r7, #20]
 80179bc:	f7f8 fd72 	bl	80104a4 <pbuf_free>
 80179c0:	e001      	b.n	80179c6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80179c2:	23ff      	movs	r3, #255	@ 0xff
 80179c4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80179c6:	69bb      	ldr	r3, [r7, #24]
 80179c8:	799b      	ldrb	r3, [r3, #6]
 80179ca:	2bff      	cmp	r3, #255	@ 0xff
 80179cc:	d005      	beq.n	80179da <dhcp_renew+0xe2>
    dhcp->tries++;
 80179ce:	69bb      	ldr	r3, [r7, #24]
 80179d0:	799b      	ldrb	r3, [r3, #6]
 80179d2:	3301      	adds	r3, #1
 80179d4:	b2da      	uxtb	r2, r3
 80179d6:	69bb      	ldr	r3, [r7, #24]
 80179d8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80179da:	69bb      	ldr	r3, [r7, #24]
 80179dc:	799b      	ldrb	r3, [r3, #6]
 80179de:	2b09      	cmp	r3, #9
 80179e0:	d809      	bhi.n	80179f6 <dhcp_renew+0xfe>
 80179e2:	69bb      	ldr	r3, [r7, #24]
 80179e4:	799b      	ldrb	r3, [r3, #6]
 80179e6:	461a      	mov	r2, r3
 80179e8:	0152      	lsls	r2, r2, #5
 80179ea:	1ad2      	subs	r2, r2, r3
 80179ec:	0092      	lsls	r2, r2, #2
 80179ee:	4413      	add	r3, r2
 80179f0:	011b      	lsls	r3, r3, #4
 80179f2:	b29b      	uxth	r3, r3
 80179f4:	e001      	b.n	80179fa <dhcp_renew+0x102>
 80179f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80179fa:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80179fc:	89fb      	ldrh	r3, [r7, #14]
 80179fe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017a02:	4a09      	ldr	r2, [pc, #36]	@ (8017a28 <dhcp_renew+0x130>)
 8017a04:	fb82 1203 	smull	r1, r2, r2, r3
 8017a08:	1152      	asrs	r2, r2, #5
 8017a0a:	17db      	asrs	r3, r3, #31
 8017a0c:	1ad3      	subs	r3, r2, r3
 8017a0e:	b29a      	uxth	r2, r3
 8017a10:	69bb      	ldr	r3, [r7, #24]
 8017a12:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3720      	adds	r7, #32
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	200000bc 	.word	0x200000bc
 8017a24:	20013d9c 	.word	0x20013d9c
 8017a28:	10624dd3 	.word	0x10624dd3

08017a2c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b08a      	sub	sp, #40	@ 0x28
 8017a30:	af02      	add	r7, sp, #8
 8017a32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a38:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8017a3a:	2104      	movs	r1, #4
 8017a3c:	69b8      	ldr	r0, [r7, #24]
 8017a3e:	f000 f9e8 	bl	8017e12 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017a42:	f107 030c 	add.w	r3, r7, #12
 8017a46:	2203      	movs	r2, #3
 8017a48:	69b9      	ldr	r1, [r7, #24]
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f000 fe7a 	bl	8018744 <dhcp_create_msg>
 8017a50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d04c      	beq.n	8017af2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017a58:	697b      	ldr	r3, [r7, #20]
 8017a5a:	685b      	ldr	r3, [r3, #4]
 8017a5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017a5e:	89b8      	ldrh	r0, [r7, #12]
 8017a60:	693b      	ldr	r3, [r7, #16]
 8017a62:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017a66:	2302      	movs	r3, #2
 8017a68:	2239      	movs	r2, #57	@ 0x39
 8017a6a:	f000 f9ed 	bl	8017e48 <dhcp_option>
 8017a6e:	4603      	mov	r3, r0
 8017a70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017a72:	89b8      	ldrh	r0, [r7, #12]
 8017a74:	693b      	ldr	r3, [r7, #16]
 8017a76:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a7e:	461a      	mov	r2, r3
 8017a80:	f000 fa3c 	bl	8017efc <dhcp_option_short>
 8017a84:	4603      	mov	r3, r0
 8017a86:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017a88:	89b8      	ldrh	r0, [r7, #12]
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017a90:	2303      	movs	r3, #3
 8017a92:	2237      	movs	r2, #55	@ 0x37
 8017a94:	f000 f9d8 	bl	8017e48 <dhcp_option>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	77bb      	strb	r3, [r7, #30]
 8017aa0:	e00e      	b.n	8017ac0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017aa2:	89b8      	ldrh	r0, [r7, #12]
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017aaa:	7fbb      	ldrb	r3, [r7, #30]
 8017aac:	4a28      	ldr	r2, [pc, #160]	@ (8017b50 <dhcp_rebind+0x124>)
 8017aae:	5cd3      	ldrb	r3, [r2, r3]
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	f000 f9fd 	bl	8017eb0 <dhcp_option_byte>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017aba:	7fbb      	ldrb	r3, [r7, #30]
 8017abc:	3301      	adds	r3, #1
 8017abe:	77bb      	strb	r3, [r7, #30]
 8017ac0:	7fbb      	ldrb	r3, [r7, #30]
 8017ac2:	2b02      	cmp	r3, #2
 8017ac4:	d9ed      	bls.n	8017aa2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017ac6:	89b8      	ldrh	r0, [r7, #12]
 8017ac8:	693b      	ldr	r3, [r7, #16]
 8017aca:	33f0      	adds	r3, #240	@ 0xf0
 8017acc:	697a      	ldr	r2, [r7, #20]
 8017ace:	4619      	mov	r1, r3
 8017ad0:	f000 ff0e 	bl	80188f0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8017b54 <dhcp_rebind+0x128>)
 8017ad6:	6818      	ldr	r0, [r3, #0]
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	9300      	str	r3, [sp, #0]
 8017adc:	2343      	movs	r3, #67	@ 0x43
 8017ade:	4a1e      	ldr	r2, [pc, #120]	@ (8017b58 <dhcp_rebind+0x12c>)
 8017ae0:	6979      	ldr	r1, [r7, #20]
 8017ae2:	f7fe fd79 	bl	80165d8 <udp_sendto_if>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017aea:	6978      	ldr	r0, [r7, #20]
 8017aec:	f7f8 fcda 	bl	80104a4 <pbuf_free>
 8017af0:	e001      	b.n	8017af6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017af2:	23ff      	movs	r3, #255	@ 0xff
 8017af4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017af6:	69bb      	ldr	r3, [r7, #24]
 8017af8:	799b      	ldrb	r3, [r3, #6]
 8017afa:	2bff      	cmp	r3, #255	@ 0xff
 8017afc:	d005      	beq.n	8017b0a <dhcp_rebind+0xde>
    dhcp->tries++;
 8017afe:	69bb      	ldr	r3, [r7, #24]
 8017b00:	799b      	ldrb	r3, [r3, #6]
 8017b02:	3301      	adds	r3, #1
 8017b04:	b2da      	uxtb	r2, r3
 8017b06:	69bb      	ldr	r3, [r7, #24]
 8017b08:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017b0a:	69bb      	ldr	r3, [r7, #24]
 8017b0c:	799b      	ldrb	r3, [r3, #6]
 8017b0e:	2b09      	cmp	r3, #9
 8017b10:	d809      	bhi.n	8017b26 <dhcp_rebind+0xfa>
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	799b      	ldrb	r3, [r3, #6]
 8017b16:	461a      	mov	r2, r3
 8017b18:	0152      	lsls	r2, r2, #5
 8017b1a:	1ad2      	subs	r2, r2, r3
 8017b1c:	0092      	lsls	r2, r2, #2
 8017b1e:	4413      	add	r3, r2
 8017b20:	00db      	lsls	r3, r3, #3
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	e001      	b.n	8017b2a <dhcp_rebind+0xfe>
 8017b26:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017b2a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017b2c:	89fb      	ldrh	r3, [r7, #14]
 8017b2e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017b32:	4a0a      	ldr	r2, [pc, #40]	@ (8017b5c <dhcp_rebind+0x130>)
 8017b34:	fb82 1203 	smull	r1, r2, r2, r3
 8017b38:	1152      	asrs	r2, r2, #5
 8017b3a:	17db      	asrs	r3, r3, #31
 8017b3c:	1ad3      	subs	r3, r2, r3
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	69bb      	ldr	r3, [r7, #24]
 8017b42:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3720      	adds	r7, #32
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	200000bc 	.word	0x200000bc
 8017b54:	20013d9c 	.word	0x20013d9c
 8017b58:	0806da64 	.word	0x0806da64
 8017b5c:	10624dd3 	.word	0x10624dd3

08017b60 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017b60:	b5b0      	push	{r4, r5, r7, lr}
 8017b62:	b08a      	sub	sp, #40	@ 0x28
 8017b64:	af02      	add	r7, sp, #8
 8017b66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b6c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017b6e:	2103      	movs	r1, #3
 8017b70:	69b8      	ldr	r0, [r7, #24]
 8017b72:	f000 f94e 	bl	8017e12 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017b76:	f107 030c 	add.w	r3, r7, #12
 8017b7a:	2203      	movs	r2, #3
 8017b7c:	69b9      	ldr	r1, [r7, #24]
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	f000 fde0 	bl	8018744 <dhcp_create_msg>
 8017b84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d066      	beq.n	8017c5a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017b92:	89b8      	ldrh	r0, [r7, #12]
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017b9a:	2302      	movs	r3, #2
 8017b9c:	2239      	movs	r2, #57	@ 0x39
 8017b9e:	f000 f953 	bl	8017e48 <dhcp_option>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8017ba6:	89b8      	ldrh	r0, [r7, #12]
 8017ba8:	693b      	ldr	r3, [r7, #16]
 8017baa:	33f0      	adds	r3, #240	@ 0xf0
 8017bac:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	f000 f9a3 	bl	8017efc <dhcp_option_short>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017bba:	89b8      	ldrh	r0, [r7, #12]
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017bc2:	2304      	movs	r3, #4
 8017bc4:	2232      	movs	r2, #50	@ 0x32
 8017bc6:	f000 f93f 	bl	8017e48 <dhcp_option>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017bce:	89bc      	ldrh	r4, [r7, #12]
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	69db      	ldr	r3, [r3, #28]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7f6 ff55 	bl	800ea8a <lwip_htonl>
 8017be0:	4603      	mov	r3, r0
 8017be2:	461a      	mov	r2, r3
 8017be4:	4629      	mov	r1, r5
 8017be6:	4620      	mov	r0, r4
 8017be8:	f000 f9ba 	bl	8017f60 <dhcp_option_long>
 8017bec:	4603      	mov	r3, r0
 8017bee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017bf0:	89b8      	ldrh	r0, [r7, #12]
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017bf8:	2303      	movs	r3, #3
 8017bfa:	2237      	movs	r2, #55	@ 0x37
 8017bfc:	f000 f924 	bl	8017e48 <dhcp_option>
 8017c00:	4603      	mov	r3, r0
 8017c02:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c04:	2300      	movs	r3, #0
 8017c06:	77bb      	strb	r3, [r7, #30]
 8017c08:	e00e      	b.n	8017c28 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017c0a:	89b8      	ldrh	r0, [r7, #12]
 8017c0c:	693b      	ldr	r3, [r7, #16]
 8017c0e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017c12:	7fbb      	ldrb	r3, [r7, #30]
 8017c14:	4a28      	ldr	r2, [pc, #160]	@ (8017cb8 <dhcp_reboot+0x158>)
 8017c16:	5cd3      	ldrb	r3, [r2, r3]
 8017c18:	461a      	mov	r2, r3
 8017c1a:	f000 f949 	bl	8017eb0 <dhcp_option_byte>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c22:	7fbb      	ldrb	r3, [r7, #30]
 8017c24:	3301      	adds	r3, #1
 8017c26:	77bb      	strb	r3, [r7, #30]
 8017c28:	7fbb      	ldrb	r3, [r7, #30]
 8017c2a:	2b02      	cmp	r3, #2
 8017c2c:	d9ed      	bls.n	8017c0a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017c2e:	89b8      	ldrh	r0, [r7, #12]
 8017c30:	693b      	ldr	r3, [r7, #16]
 8017c32:	33f0      	adds	r3, #240	@ 0xf0
 8017c34:	697a      	ldr	r2, [r7, #20]
 8017c36:	4619      	mov	r1, r3
 8017c38:	f000 fe5a 	bl	80188f0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8017cbc <dhcp_reboot+0x15c>)
 8017c3e:	6818      	ldr	r0, [r3, #0]
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	9300      	str	r3, [sp, #0]
 8017c44:	2343      	movs	r3, #67	@ 0x43
 8017c46:	4a1e      	ldr	r2, [pc, #120]	@ (8017cc0 <dhcp_reboot+0x160>)
 8017c48:	6979      	ldr	r1, [r7, #20]
 8017c4a:	f7fe fcc5 	bl	80165d8 <udp_sendto_if>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017c52:	6978      	ldr	r0, [r7, #20]
 8017c54:	f7f8 fc26 	bl	80104a4 <pbuf_free>
 8017c58:	e001      	b.n	8017c5e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017c5a:	23ff      	movs	r3, #255	@ 0xff
 8017c5c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017c5e:	69bb      	ldr	r3, [r7, #24]
 8017c60:	799b      	ldrb	r3, [r3, #6]
 8017c62:	2bff      	cmp	r3, #255	@ 0xff
 8017c64:	d005      	beq.n	8017c72 <dhcp_reboot+0x112>
    dhcp->tries++;
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	799b      	ldrb	r3, [r3, #6]
 8017c6a:	3301      	adds	r3, #1
 8017c6c:	b2da      	uxtb	r2, r3
 8017c6e:	69bb      	ldr	r3, [r7, #24]
 8017c70:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017c72:	69bb      	ldr	r3, [r7, #24]
 8017c74:	799b      	ldrb	r3, [r3, #6]
 8017c76:	2b09      	cmp	r3, #9
 8017c78:	d809      	bhi.n	8017c8e <dhcp_reboot+0x12e>
 8017c7a:	69bb      	ldr	r3, [r7, #24]
 8017c7c:	799b      	ldrb	r3, [r3, #6]
 8017c7e:	461a      	mov	r2, r3
 8017c80:	0152      	lsls	r2, r2, #5
 8017c82:	1ad2      	subs	r2, r2, r3
 8017c84:	0092      	lsls	r2, r2, #2
 8017c86:	4413      	add	r3, r2
 8017c88:	00db      	lsls	r3, r3, #3
 8017c8a:	b29b      	uxth	r3, r3
 8017c8c:	e001      	b.n	8017c92 <dhcp_reboot+0x132>
 8017c8e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017c92:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017c94:	89fb      	ldrh	r3, [r7, #14]
 8017c96:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8017cc4 <dhcp_reboot+0x164>)
 8017c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8017ca0:	1152      	asrs	r2, r2, #5
 8017ca2:	17db      	asrs	r3, r3, #31
 8017ca4:	1ad3      	subs	r3, r2, r3
 8017ca6:	b29a      	uxth	r2, r3
 8017ca8:	69bb      	ldr	r3, [r7, #24]
 8017caa:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017cac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3720      	adds	r7, #32
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8017cb8:	200000bc 	.word	0x200000bc
 8017cbc:	20013d9c 	.word	0x20013d9c
 8017cc0:	0806da64 	.word	0x0806da64
 8017cc4:	10624dd3 	.word	0x10624dd3

08017cc8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017cc8:	b5b0      	push	{r4, r5, r7, lr}
 8017cca:	b08a      	sub	sp, #40	@ 0x28
 8017ccc:	af02      	add	r7, sp, #8
 8017cce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cd4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	f000 8084 	beq.w	8017de6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8017cde:	69fb      	ldr	r3, [r7, #28]
 8017ce0:	795b      	ldrb	r3, [r3, #5]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	f000 8081 	beq.w	8017dea <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017ce8:	69fb      	ldr	r3, [r7, #28]
 8017cea:	699b      	ldr	r3, [r3, #24]
 8017cec:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017cee:	69fb      	ldr	r3, [r7, #28]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8017cf4:	69fb      	ldr	r3, [r7, #28]
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017d00:	69fb      	ldr	r3, [r7, #28]
 8017d02:	2200      	movs	r2, #0
 8017d04:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8017d06:	69fb      	ldr	r3, [r7, #28]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017d10:	69fb      	ldr	r3, [r7, #28]
 8017d12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8017d14:	69fb      	ldr	r3, [r7, #28]
 8017d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d18:	69fb      	ldr	r3, [r7, #28]
 8017d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017d1c:	69fb      	ldr	r3, [r7, #28]
 8017d1e:	2200      	movs	r2, #0
 8017d20:	829a      	strh	r2, [r3, #20]
 8017d22:	69fb      	ldr	r3, [r7, #28]
 8017d24:	8a9a      	ldrh	r2, [r3, #20]
 8017d26:	69fb      	ldr	r3, [r7, #28]
 8017d28:	825a      	strh	r2, [r3, #18]
 8017d2a:	69fb      	ldr	r3, [r7, #28]
 8017d2c:	8a5a      	ldrh	r2, [r3, #18]
 8017d2e:	69fb      	ldr	r3, [r7, #28]
 8017d30:	821a      	strh	r2, [r3, #16]
 8017d32:	69fb      	ldr	r3, [r7, #28]
 8017d34:	8a1a      	ldrh	r2, [r3, #16]
 8017d36:	69fb      	ldr	r3, [r7, #28]
 8017d38:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f000 fe06 	bl	801894c <dhcp_supplied_address>
 8017d40:	4603      	mov	r3, r0
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d03b      	beq.n	8017dbe <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8017d46:	f107 030e 	add.w	r3, r7, #14
 8017d4a:	2207      	movs	r2, #7
 8017d4c:	69f9      	ldr	r1, [r7, #28]
 8017d4e:	6878      	ldr	r0, [r7, #4]
 8017d50:	f000 fcf8 	bl	8018744 <dhcp_create_msg>
 8017d54:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017d56:	69bb      	ldr	r3, [r7, #24]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d030      	beq.n	8017dbe <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	685b      	ldr	r3, [r3, #4]
 8017d60:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017d62:	89f8      	ldrh	r0, [r7, #14]
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d6a:	2304      	movs	r3, #4
 8017d6c:	2236      	movs	r2, #54	@ 0x36
 8017d6e:	f000 f86b 	bl	8017e48 <dhcp_option>
 8017d72:	4603      	mov	r3, r0
 8017d74:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017d76:	89fc      	ldrh	r4, [r7, #14]
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	4618      	mov	r0, r3
 8017d82:	f7f6 fe82 	bl	800ea8a <lwip_htonl>
 8017d86:	4603      	mov	r3, r0
 8017d88:	461a      	mov	r2, r3
 8017d8a:	4629      	mov	r1, r5
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	f000 f8e7 	bl	8017f60 <dhcp_option_long>
 8017d92:	4603      	mov	r3, r0
 8017d94:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017d96:	89f8      	ldrh	r0, [r7, #14]
 8017d98:	697b      	ldr	r3, [r7, #20]
 8017d9a:	33f0      	adds	r3, #240	@ 0xf0
 8017d9c:	69ba      	ldr	r2, [r7, #24]
 8017d9e:	4619      	mov	r1, r3
 8017da0:	f000 fda6 	bl	80188f0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017da4:	4b13      	ldr	r3, [pc, #76]	@ (8017df4 <dhcp_release_and_stop+0x12c>)
 8017da6:	6818      	ldr	r0, [r3, #0]
 8017da8:	f107 0210 	add.w	r2, r7, #16
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	9300      	str	r3, [sp, #0]
 8017db0:	2343      	movs	r3, #67	@ 0x43
 8017db2:	69b9      	ldr	r1, [r7, #24]
 8017db4:	f7fe fc10 	bl	80165d8 <udp_sendto_if>
      pbuf_free(p_out);
 8017db8:	69b8      	ldr	r0, [r7, #24]
 8017dba:	f7f8 fb73 	bl	80104a4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8017df8 <dhcp_release_and_stop+0x130>)
 8017dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8017df8 <dhcp_release_and_stop+0x130>)
 8017dc2:	490d      	ldr	r1, [pc, #52]	@ (8017df8 <dhcp_release_and_stop+0x130>)
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7f7 fe6d 	bl	800faa4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017dca:	2100      	movs	r1, #0
 8017dcc:	69f8      	ldr	r0, [r7, #28]
 8017dce:	f000 f820 	bl	8017e12 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	791b      	ldrb	r3, [r3, #4]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d008      	beq.n	8017dec <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017dda:	f7fe ff8b 	bl	8016cf4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8017dde:	69fb      	ldr	r3, [r7, #28]
 8017de0:	2200      	movs	r2, #0
 8017de2:	711a      	strb	r2, [r3, #4]
 8017de4:	e002      	b.n	8017dec <dhcp_release_and_stop+0x124>
    return;
 8017de6:	bf00      	nop
 8017de8:	e000      	b.n	8017dec <dhcp_release_and_stop+0x124>
    return;
 8017dea:	bf00      	nop
  }
}
 8017dec:	3720      	adds	r7, #32
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bdb0      	pop	{r4, r5, r7, pc}
 8017df2:	bf00      	nop
 8017df4:	20013d9c 	.word	0x20013d9c
 8017df8:	0806da60 	.word	0x0806da60

08017dfc <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b082      	sub	sp, #8
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8017e04:	6878      	ldr	r0, [r7, #4]
 8017e06:	f7ff ff5f 	bl	8017cc8 <dhcp_release_and_stop>
}
 8017e0a:	bf00      	nop
 8017e0c:	3708      	adds	r7, #8
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017e12:	b480      	push	{r7}
 8017e14:	b083      	sub	sp, #12
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	6078      	str	r0, [r7, #4]
 8017e1a:	460b      	mov	r3, r1
 8017e1c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	795b      	ldrb	r3, [r3, #5]
 8017e22:	78fa      	ldrb	r2, [r7, #3]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d008      	beq.n	8017e3a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	78fa      	ldrb	r2, [r7, #3]
 8017e2c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	2200      	movs	r2, #0
 8017e32:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	2200      	movs	r2, #0
 8017e38:	811a      	strh	r2, [r3, #8]
  }
}
 8017e3a:	bf00      	nop
 8017e3c:	370c      	adds	r7, #12
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e44:	4770      	bx	lr
	...

08017e48 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6039      	str	r1, [r7, #0]
 8017e50:	4611      	mov	r1, r2
 8017e52:	461a      	mov	r2, r3
 8017e54:	4603      	mov	r3, r0
 8017e56:	80fb      	strh	r3, [r7, #6]
 8017e58:	460b      	mov	r3, r1
 8017e5a:	717b      	strb	r3, [r7, #5]
 8017e5c:	4613      	mov	r3, r2
 8017e5e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017e60:	88fa      	ldrh	r2, [r7, #6]
 8017e62:	793b      	ldrb	r3, [r7, #4]
 8017e64:	4413      	add	r3, r2
 8017e66:	3302      	adds	r3, #2
 8017e68:	2b44      	cmp	r3, #68	@ 0x44
 8017e6a:	d906      	bls.n	8017e7a <dhcp_option+0x32>
 8017e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8017ea4 <dhcp_option+0x5c>)
 8017e6e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017e72:	490d      	ldr	r1, [pc, #52]	@ (8017ea8 <dhcp_option+0x60>)
 8017e74:	480d      	ldr	r0, [pc, #52]	@ (8017eac <dhcp_option+0x64>)
 8017e76:	f004 f953 	bl	801c120 <iprintf>
  options[options_out_len++] = option_type;
 8017e7a:	88fb      	ldrh	r3, [r7, #6]
 8017e7c:	1c5a      	adds	r2, r3, #1
 8017e7e:	80fa      	strh	r2, [r7, #6]
 8017e80:	461a      	mov	r2, r3
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	4413      	add	r3, r2
 8017e86:	797a      	ldrb	r2, [r7, #5]
 8017e88:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8017e8a:	88fb      	ldrh	r3, [r7, #6]
 8017e8c:	1c5a      	adds	r2, r3, #1
 8017e8e:	80fa      	strh	r2, [r7, #6]
 8017e90:	461a      	mov	r2, r3
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	4413      	add	r3, r2
 8017e96:	793a      	ldrb	r2, [r7, #4]
 8017e98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017e9a:	88fb      	ldrh	r3, [r7, #6]
}
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	3708      	adds	r7, #8
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd80      	pop	{r7, pc}
 8017ea4:	08021208 	.word	0x08021208
 8017ea8:	0802139c 	.word	0x0802139c
 8017eac:	08021268 	.word	0x08021268

08017eb0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b082      	sub	sp, #8
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	6039      	str	r1, [r7, #0]
 8017eba:	80fb      	strh	r3, [r7, #6]
 8017ebc:	4613      	mov	r3, r2
 8017ebe:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017ec0:	88fb      	ldrh	r3, [r7, #6]
 8017ec2:	2b43      	cmp	r3, #67	@ 0x43
 8017ec4:	d906      	bls.n	8017ed4 <dhcp_option_byte+0x24>
 8017ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8017ef0 <dhcp_option_byte+0x40>)
 8017ec8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8017ecc:	4909      	ldr	r1, [pc, #36]	@ (8017ef4 <dhcp_option_byte+0x44>)
 8017ece:	480a      	ldr	r0, [pc, #40]	@ (8017ef8 <dhcp_option_byte+0x48>)
 8017ed0:	f004 f926 	bl	801c120 <iprintf>
  options[options_out_len++] = value;
 8017ed4:	88fb      	ldrh	r3, [r7, #6]
 8017ed6:	1c5a      	adds	r2, r3, #1
 8017ed8:	80fa      	strh	r2, [r7, #6]
 8017eda:	461a      	mov	r2, r3
 8017edc:	683b      	ldr	r3, [r7, #0]
 8017ede:	4413      	add	r3, r2
 8017ee0:	797a      	ldrb	r2, [r7, #5]
 8017ee2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017ee4:	88fb      	ldrh	r3, [r7, #6]
}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	3708      	adds	r7, #8
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	08021208 	.word	0x08021208
 8017ef4:	080213e0 	.word	0x080213e0
 8017ef8:	08021268 	.word	0x08021268

08017efc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b082      	sub	sp, #8
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	4603      	mov	r3, r0
 8017f04:	6039      	str	r1, [r7, #0]
 8017f06:	80fb      	strh	r3, [r7, #6]
 8017f08:	4613      	mov	r3, r2
 8017f0a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017f0c:	88fb      	ldrh	r3, [r7, #6]
 8017f0e:	3302      	adds	r3, #2
 8017f10:	2b44      	cmp	r3, #68	@ 0x44
 8017f12:	d906      	bls.n	8017f22 <dhcp_option_short+0x26>
 8017f14:	4b0f      	ldr	r3, [pc, #60]	@ (8017f54 <dhcp_option_short+0x58>)
 8017f16:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8017f1a:	490f      	ldr	r1, [pc, #60]	@ (8017f58 <dhcp_option_short+0x5c>)
 8017f1c:	480f      	ldr	r0, [pc, #60]	@ (8017f5c <dhcp_option_short+0x60>)
 8017f1e:	f004 f8ff 	bl	801c120 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017f22:	88bb      	ldrh	r3, [r7, #4]
 8017f24:	0a1b      	lsrs	r3, r3, #8
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	88fb      	ldrh	r3, [r7, #6]
 8017f2a:	1c59      	adds	r1, r3, #1
 8017f2c:	80f9      	strh	r1, [r7, #6]
 8017f2e:	4619      	mov	r1, r3
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	440b      	add	r3, r1
 8017f34:	b2d2      	uxtb	r2, r2
 8017f36:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017f38:	88fb      	ldrh	r3, [r7, #6]
 8017f3a:	1c5a      	adds	r2, r3, #1
 8017f3c:	80fa      	strh	r2, [r7, #6]
 8017f3e:	461a      	mov	r2, r3
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	4413      	add	r3, r2
 8017f44:	88ba      	ldrh	r2, [r7, #4]
 8017f46:	b2d2      	uxtb	r2, r2
 8017f48:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017f4a:	88fb      	ldrh	r3, [r7, #6]
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3708      	adds	r7, #8
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}
 8017f54:	08021208 	.word	0x08021208
 8017f58:	08021418 	.word	0x08021418
 8017f5c:	08021268 	.word	0x08021268

08017f60 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	4603      	mov	r3, r0
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
 8017f6c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8017f6e:	89fb      	ldrh	r3, [r7, #14]
 8017f70:	3304      	adds	r3, #4
 8017f72:	2b44      	cmp	r3, #68	@ 0x44
 8017f74:	d906      	bls.n	8017f84 <dhcp_option_long+0x24>
 8017f76:	4b19      	ldr	r3, [pc, #100]	@ (8017fdc <dhcp_option_long+0x7c>)
 8017f78:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8017f7c:	4918      	ldr	r1, [pc, #96]	@ (8017fe0 <dhcp_option_long+0x80>)
 8017f7e:	4819      	ldr	r0, [pc, #100]	@ (8017fe4 <dhcp_option_long+0x84>)
 8017f80:	f004 f8ce 	bl	801c120 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	0e1a      	lsrs	r2, r3, #24
 8017f88:	89fb      	ldrh	r3, [r7, #14]
 8017f8a:	1c59      	adds	r1, r3, #1
 8017f8c:	81f9      	strh	r1, [r7, #14]
 8017f8e:	4619      	mov	r1, r3
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	440b      	add	r3, r1
 8017f94:	b2d2      	uxtb	r2, r2
 8017f96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	0c1a      	lsrs	r2, r3, #16
 8017f9c:	89fb      	ldrh	r3, [r7, #14]
 8017f9e:	1c59      	adds	r1, r3, #1
 8017fa0:	81f9      	strh	r1, [r7, #14]
 8017fa2:	4619      	mov	r1, r3
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	440b      	add	r3, r1
 8017fa8:	b2d2      	uxtb	r2, r2
 8017faa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	0a1a      	lsrs	r2, r3, #8
 8017fb0:	89fb      	ldrh	r3, [r7, #14]
 8017fb2:	1c59      	adds	r1, r3, #1
 8017fb4:	81f9      	strh	r1, [r7, #14]
 8017fb6:	4619      	mov	r1, r3
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	440b      	add	r3, r1
 8017fbc:	b2d2      	uxtb	r2, r2
 8017fbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017fc0:	89fb      	ldrh	r3, [r7, #14]
 8017fc2:	1c5a      	adds	r2, r3, #1
 8017fc4:	81fa      	strh	r2, [r7, #14]
 8017fc6:	461a      	mov	r2, r3
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	4413      	add	r3, r2
 8017fcc:	687a      	ldr	r2, [r7, #4]
 8017fce:	b2d2      	uxtb	r2, r2
 8017fd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3710      	adds	r7, #16
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	08021208 	.word	0x08021208
 8017fe0:	08021454 	.word	0x08021454
 8017fe4:	08021268 	.word	0x08021268

08017fe8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b092      	sub	sp, #72	@ 0x48
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8017ffa:	2208      	movs	r2, #8
 8017ffc:	2100      	movs	r1, #0
 8017ffe:	48b8      	ldr	r0, [pc, #736]	@ (80182e0 <dhcp_parse_reply+0x2f8>)
 8018000:	f004 f9f0 	bl	801c3e4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	895b      	ldrh	r3, [r3, #10]
 8018008:	2b2b      	cmp	r3, #43	@ 0x2b
 801800a:	d802      	bhi.n	8018012 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801800c:	f06f 0301 	mvn.w	r3, #1
 8018010:	e2b8      	b.n	8018584 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	685b      	ldr	r3, [r3, #4]
 8018016:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8018018:	23f0      	movs	r3, #240	@ 0xf0
 801801a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	891b      	ldrh	r3, [r3, #8]
 8018020:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8018026:	e00c      	b.n	8018042 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8018028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801802a:	895b      	ldrh	r3, [r3, #10]
 801802c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801802e:	1ad3      	subs	r3, r2, r3
 8018030:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8018032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018034:	895b      	ldrh	r3, [r3, #10]
 8018036:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018038:	1ad3      	subs	r3, r2, r3
 801803a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 801803c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8018042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018044:	2b00      	cmp	r3, #0
 8018046:	d004      	beq.n	8018052 <dhcp_parse_reply+0x6a>
 8018048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801804a:	895b      	ldrh	r3, [r3, #10]
 801804c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801804e:	429a      	cmp	r2, r3
 8018050:	d2ea      	bcs.n	8018028 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8018052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018054:	2b00      	cmp	r3, #0
 8018056:	d102      	bne.n	801805e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8018058:	f06f 0301 	mvn.w	r3, #1
 801805c:	e292      	b.n	8018584 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 801805e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018060:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 8018064:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018066:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 8018068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801806e:	e247      	b.n	8018500 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8018070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018076:	4413      	add	r3, r2
 8018078:	781b      	ldrb	r3, [r3, #0]
 801807a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801807c:	2300      	movs	r3, #0
 801807e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 8018082:	f04f 33ff 	mov.w	r3, #4294967295
 8018086:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8018088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801808c:	3302      	adds	r3, #2
 801808e:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 8018090:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018092:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018096:	429a      	cmp	r2, r3
 8018098:	d202      	bcs.n	80180a0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801809a:	f06f 0301 	mvn.w	r3, #1
 801809e:	e271      	b.n	8018584 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80180a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80180a4:	3301      	adds	r3, #1
 80180a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180a8:	8952      	ldrh	r2, [r2, #10]
 80180aa:	4293      	cmp	r3, r2
 80180ac:	da08      	bge.n	80180c0 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 80180ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80180b2:	3301      	adds	r3, #1
 80180b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80180b6:	4413      	add	r3, r2
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80180be:	e00b      	b.n	80180d8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80180c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d004      	beq.n	80180d2 <dhcp_parse_reply+0xea>
 80180c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	e000      	b.n	80180d4 <dhcp_parse_reply+0xec>
 80180d2:	2300      	movs	r3, #0
 80180d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80180d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80180dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 80180e0:	7efb      	ldrb	r3, [r7, #27]
 80180e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80180e4:	f200 812c 	bhi.w	8018340 <dhcp_parse_reply+0x358>
 80180e8:	a201      	add	r2, pc, #4	@ (adr r2, 80180f0 <dhcp_parse_reply+0x108>)
 80180ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180ee:	bf00      	nop
 80180f0:	080181e1 	.word	0x080181e1
 80180f4:	080181f1 	.word	0x080181f1
 80180f8:	08018341 	.word	0x08018341
 80180fc:	08018213 	.word	0x08018213
 8018100:	08018341 	.word	0x08018341
 8018104:	08018341 	.word	0x08018341
 8018108:	08018341 	.word	0x08018341
 801810c:	08018341 	.word	0x08018341
 8018110:	08018341 	.word	0x08018341
 8018114:	08018341 	.word	0x08018341
 8018118:	08018341 	.word	0x08018341
 801811c:	08018341 	.word	0x08018341
 8018120:	08018341 	.word	0x08018341
 8018124:	08018341 	.word	0x08018341
 8018128:	08018341 	.word	0x08018341
 801812c:	08018341 	.word	0x08018341
 8018130:	08018341 	.word	0x08018341
 8018134:	08018341 	.word	0x08018341
 8018138:	08018341 	.word	0x08018341
 801813c:	08018341 	.word	0x08018341
 8018140:	08018341 	.word	0x08018341
 8018144:	08018341 	.word	0x08018341
 8018148:	08018341 	.word	0x08018341
 801814c:	08018341 	.word	0x08018341
 8018150:	08018341 	.word	0x08018341
 8018154:	08018341 	.word	0x08018341
 8018158:	08018341 	.word	0x08018341
 801815c:	08018341 	.word	0x08018341
 8018160:	08018341 	.word	0x08018341
 8018164:	08018341 	.word	0x08018341
 8018168:	08018341 	.word	0x08018341
 801816c:	08018341 	.word	0x08018341
 8018170:	08018341 	.word	0x08018341
 8018174:	08018341 	.word	0x08018341
 8018178:	08018341 	.word	0x08018341
 801817c:	08018341 	.word	0x08018341
 8018180:	08018341 	.word	0x08018341
 8018184:	08018341 	.word	0x08018341
 8018188:	08018341 	.word	0x08018341
 801818c:	08018341 	.word	0x08018341
 8018190:	08018341 	.word	0x08018341
 8018194:	08018341 	.word	0x08018341
 8018198:	08018341 	.word	0x08018341
 801819c:	08018341 	.word	0x08018341
 80181a0:	08018341 	.word	0x08018341
 80181a4:	08018341 	.word	0x08018341
 80181a8:	08018341 	.word	0x08018341
 80181ac:	08018341 	.word	0x08018341
 80181b0:	08018341 	.word	0x08018341
 80181b4:	08018341 	.word	0x08018341
 80181b8:	08018341 	.word	0x08018341
 80181bc:	0801823f 	.word	0x0801823f
 80181c0:	08018261 	.word	0x08018261
 80181c4:	0801829d 	.word	0x0801829d
 80181c8:	080182bf 	.word	0x080182bf
 80181cc:	08018341 	.word	0x08018341
 80181d0:	08018341 	.word	0x08018341
 80181d4:	08018341 	.word	0x08018341
 80181d8:	080182fd 	.word	0x080182fd
 80181dc:	0801831f 	.word	0x0801831f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80181e0:	2300      	movs	r3, #0
 80181e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80181e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80181ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 80181ee:	e0ab      	b.n	8018348 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80181f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80181f4:	2b04      	cmp	r3, #4
 80181f6:	d009      	beq.n	801820c <dhcp_parse_reply+0x224>
 80181f8:	4b3a      	ldr	r3, [pc, #232]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 80181fa:	f240 622e 	movw	r2, #1582	@ 0x62e
 80181fe:	493a      	ldr	r1, [pc, #232]	@ (80182e8 <dhcp_parse_reply+0x300>)
 8018200:	483a      	ldr	r0, [pc, #232]	@ (80182ec <dhcp_parse_reply+0x304>)
 8018202:	f003 ff8d 	bl	801c120 <iprintf>
 8018206:	f06f 0305 	mvn.w	r3, #5
 801820a:	e1bb      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801820c:	2306      	movs	r3, #6
 801820e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8018210:	e09a      	b.n	8018348 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8018212:	2304      	movs	r3, #4
 8018214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8018218:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801821c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018220:	429a      	cmp	r2, r3
 8018222:	d209      	bcs.n	8018238 <dhcp_parse_reply+0x250>
 8018224:	4b2f      	ldr	r3, [pc, #188]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 8018226:	f240 6233 	movw	r2, #1587	@ 0x633
 801822a:	4931      	ldr	r1, [pc, #196]	@ (80182f0 <dhcp_parse_reply+0x308>)
 801822c:	482f      	ldr	r0, [pc, #188]	@ (80182ec <dhcp_parse_reply+0x304>)
 801822e:	f003 ff77 	bl	801c120 <iprintf>
 8018232:	f06f 0305 	mvn.w	r3, #5
 8018236:	e1a5      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8018238:	2307      	movs	r3, #7
 801823a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801823c:	e084      	b.n	8018348 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801823e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018242:	2b04      	cmp	r3, #4
 8018244:	d009      	beq.n	801825a <dhcp_parse_reply+0x272>
 8018246:	4b27      	ldr	r3, [pc, #156]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 8018248:	f240 6241 	movw	r2, #1601	@ 0x641
 801824c:	4926      	ldr	r1, [pc, #152]	@ (80182e8 <dhcp_parse_reply+0x300>)
 801824e:	4827      	ldr	r0, [pc, #156]	@ (80182ec <dhcp_parse_reply+0x304>)
 8018250:	f003 ff66 	bl	801c120 <iprintf>
 8018254:	f06f 0305 	mvn.w	r3, #5
 8018258:	e194      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801825a:	2303      	movs	r3, #3
 801825c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801825e:	e073      	b.n	8018348 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018260:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018264:	2b01      	cmp	r3, #1
 8018266:	d009      	beq.n	801827c <dhcp_parse_reply+0x294>
 8018268:	4b1e      	ldr	r3, [pc, #120]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 801826a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801826e:	4921      	ldr	r1, [pc, #132]	@ (80182f4 <dhcp_parse_reply+0x30c>)
 8018270:	481e      	ldr	r0, [pc, #120]	@ (80182ec <dhcp_parse_reply+0x304>)
 8018272:	f003 ff55 	bl	801c120 <iprintf>
 8018276:	f06f 0305 	mvn.w	r3, #5
 801827a:	e183      	b.n	8018584 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801827c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801827e:	2bf0      	cmp	r3, #240	@ 0xf0
 8018280:	d009      	beq.n	8018296 <dhcp_parse_reply+0x2ae>
 8018282:	4b18      	ldr	r3, [pc, #96]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 8018284:	f240 6251 	movw	r2, #1617	@ 0x651
 8018288:	491b      	ldr	r1, [pc, #108]	@ (80182f8 <dhcp_parse_reply+0x310>)
 801828a:	4818      	ldr	r0, [pc, #96]	@ (80182ec <dhcp_parse_reply+0x304>)
 801828c:	f003 ff48 	bl	801c120 <iprintf>
 8018290:	f06f 0305 	mvn.w	r3, #5
 8018294:	e176      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8018296:	2300      	movs	r3, #0
 8018298:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801829a:	e055      	b.n	8018348 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801829c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	d009      	beq.n	80182b8 <dhcp_parse_reply+0x2d0>
 80182a4:	4b0f      	ldr	r3, [pc, #60]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 80182a6:	f240 6255 	movw	r2, #1621	@ 0x655
 80182aa:	4912      	ldr	r1, [pc, #72]	@ (80182f4 <dhcp_parse_reply+0x30c>)
 80182ac:	480f      	ldr	r0, [pc, #60]	@ (80182ec <dhcp_parse_reply+0x304>)
 80182ae:	f003 ff37 	bl	801c120 <iprintf>
 80182b2:	f06f 0305 	mvn.w	r3, #5
 80182b6:	e165      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80182b8:	2301      	movs	r3, #1
 80182ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80182bc:	e044      	b.n	8018348 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80182be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80182c2:	2b04      	cmp	r3, #4
 80182c4:	d009      	beq.n	80182da <dhcp_parse_reply+0x2f2>
 80182c6:	4b07      	ldr	r3, [pc, #28]	@ (80182e4 <dhcp_parse_reply+0x2fc>)
 80182c8:	f240 6259 	movw	r2, #1625	@ 0x659
 80182cc:	4906      	ldr	r1, [pc, #24]	@ (80182e8 <dhcp_parse_reply+0x300>)
 80182ce:	4807      	ldr	r0, [pc, #28]	@ (80182ec <dhcp_parse_reply+0x304>)
 80182d0:	f003 ff26 	bl	801c120 <iprintf>
 80182d4:	f06f 0305 	mvn.w	r3, #5
 80182d8:	e154      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80182da:	2302      	movs	r3, #2
 80182dc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80182de:	e033      	b.n	8018348 <dhcp_parse_reply+0x360>
 80182e0:	20013d94 	.word	0x20013d94
 80182e4:	08021208 	.word	0x08021208
 80182e8:	08021490 	.word	0x08021490
 80182ec:	08021268 	.word	0x08021268
 80182f0:	0802149c 	.word	0x0802149c
 80182f4:	080214b0 	.word	0x080214b0
 80182f8:	080214bc 	.word	0x080214bc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80182fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018300:	2b04      	cmp	r3, #4
 8018302:	d009      	beq.n	8018318 <dhcp_parse_reply+0x330>
 8018304:	4ba1      	ldr	r3, [pc, #644]	@ (801858c <dhcp_parse_reply+0x5a4>)
 8018306:	f240 625d 	movw	r2, #1629	@ 0x65d
 801830a:	49a1      	ldr	r1, [pc, #644]	@ (8018590 <dhcp_parse_reply+0x5a8>)
 801830c:	48a1      	ldr	r0, [pc, #644]	@ (8018594 <dhcp_parse_reply+0x5ac>)
 801830e:	f003 ff07 	bl	801c120 <iprintf>
 8018312:	f06f 0305 	mvn.w	r3, #5
 8018316:	e135      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8018318:	2304      	movs	r3, #4
 801831a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801831c:	e014      	b.n	8018348 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801831e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018322:	2b04      	cmp	r3, #4
 8018324:	d009      	beq.n	801833a <dhcp_parse_reply+0x352>
 8018326:	4b99      	ldr	r3, [pc, #612]	@ (801858c <dhcp_parse_reply+0x5a4>)
 8018328:	f240 6261 	movw	r2, #1633	@ 0x661
 801832c:	4998      	ldr	r1, [pc, #608]	@ (8018590 <dhcp_parse_reply+0x5a8>)
 801832e:	4899      	ldr	r0, [pc, #612]	@ (8018594 <dhcp_parse_reply+0x5ac>)
 8018330:	f003 fef6 	bl	801c120 <iprintf>
 8018334:	f06f 0305 	mvn.w	r3, #5
 8018338:	e124      	b.n	8018584 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801833a:	2305      	movs	r3, #5
 801833c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801833e:	e003      	b.n	8018348 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8018340:	2300      	movs	r3, #0
 8018342:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8018346:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8018348:	7efb      	ldrb	r3, [r7, #27]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d105      	bne.n	801835a <dhcp_parse_reply+0x372>
      offset++;
 801834e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018352:	3301      	adds	r3, #1
 8018354:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8018358:	e0a4      	b.n	80184a4 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801835a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801835e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018362:	4413      	add	r3, r2
 8018364:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8018368:	4293      	cmp	r3, r2
 801836a:	dd02      	ble.n	8018372 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 801836c:	f06f 0301 	mvn.w	r3, #1
 8018370:	e108      	b.n	8018584 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8018372:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018376:	b29a      	uxth	r2, r3
 8018378:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801837c:	4413      	add	r3, r2
 801837e:	b29b      	uxth	r3, r3
 8018380:	3302      	adds	r3, #2
 8018382:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 8018386:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801838a:	2b00      	cmp	r3, #0
 801838c:	f000 808a 	beq.w	80184a4 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8018390:	2300      	movs	r3, #0
 8018392:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8018394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018396:	2b00      	cmp	r3, #0
 8018398:	db02      	blt.n	80183a0 <dhcp_parse_reply+0x3b8>
 801839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801839c:	2b07      	cmp	r3, #7
 801839e:	dd06      	ble.n	80183ae <dhcp_parse_reply+0x3c6>
 80183a0:	4b7a      	ldr	r3, [pc, #488]	@ (801858c <dhcp_parse_reply+0x5a4>)
 80183a2:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80183a6:	497c      	ldr	r1, [pc, #496]	@ (8018598 <dhcp_parse_reply+0x5b0>)
 80183a8:	487a      	ldr	r0, [pc, #488]	@ (8018594 <dhcp_parse_reply+0x5ac>)
 80183aa:	f003 feb9 	bl	801c120 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80183ae:	4a7b      	ldr	r2, [pc, #492]	@ (801859c <dhcp_parse_reply+0x5b4>)
 80183b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183b2:	4413      	add	r3, r2
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d174      	bne.n	80184a4 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 80183ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80183be:	2b04      	cmp	r3, #4
 80183c0:	bf28      	it	cs
 80183c2:	2304      	movcs	r3, #4
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80183c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80183ca:	8b3a      	ldrh	r2, [r7, #24]
 80183cc:	f107 010c 	add.w	r1, r7, #12
 80183d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80183d2:	f7f8 fa6d 	bl	80108b0 <pbuf_copy_partial>
 80183d6:	4603      	mov	r3, r0
 80183d8:	461a      	mov	r2, r3
 80183da:	8b3b      	ldrh	r3, [r7, #24]
 80183dc:	4293      	cmp	r3, r2
 80183de:	d002      	beq.n	80183e6 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 80183e0:	f06f 0301 	mvn.w	r3, #1
 80183e4:	e0ce      	b.n	8018584 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 80183e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80183ea:	2b04      	cmp	r3, #4
 80183ec:	d933      	bls.n	8018456 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80183ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80183f2:	f003 0303 	and.w	r3, r3, #3
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d009      	beq.n	8018410 <dhcp_parse_reply+0x428>
 80183fc:	4b63      	ldr	r3, [pc, #396]	@ (801858c <dhcp_parse_reply+0x5a4>)
 80183fe:	f240 6281 	movw	r2, #1665	@ 0x681
 8018402:	4967      	ldr	r1, [pc, #412]	@ (80185a0 <dhcp_parse_reply+0x5b8>)
 8018404:	4863      	ldr	r0, [pc, #396]	@ (8018594 <dhcp_parse_reply+0x5ac>)
 8018406:	f003 fe8b 	bl	801c120 <iprintf>
 801840a:	f06f 0305 	mvn.w	r3, #5
 801840e:	e0b9      	b.n	8018584 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8018410:	4a62      	ldr	r2, [pc, #392]	@ (801859c <dhcp_parse_reply+0x5b4>)
 8018412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018414:	4413      	add	r3, r2
 8018416:	2201      	movs	r2, #1
 8018418:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	4618      	mov	r0, r3
 801841e:	f7f6 fb34 	bl	800ea8a <lwip_htonl>
 8018422:	4602      	mov	r2, r0
 8018424:	495f      	ldr	r1, [pc, #380]	@ (80185a4 <dhcp_parse_reply+0x5bc>)
 8018426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801842c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018430:	3b04      	subs	r3, #4
 8018432:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8018436:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018438:	3304      	adds	r3, #4
 801843a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801843c:	8afa      	ldrh	r2, [r7, #22]
 801843e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018440:	429a      	cmp	r2, r3
 8018442:	d202      	bcs.n	801844a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8018444:	f06f 0301 	mvn.w	r3, #1
 8018448:	e09c      	b.n	8018584 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 801844a:	8afb      	ldrh	r3, [r7, #22]
 801844c:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 801844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018450:	3301      	adds	r3, #1
 8018452:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 8018454:	e79e      	b.n	8018394 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8018456:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801845a:	2b04      	cmp	r3, #4
 801845c:	d106      	bne.n	801846c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	4618      	mov	r0, r3
 8018462:	f7f6 fb12 	bl	800ea8a <lwip_htonl>
 8018466:	4603      	mov	r3, r0
 8018468:	60fb      	str	r3, [r7, #12]
 801846a:	e011      	b.n	8018490 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801846c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018470:	2b01      	cmp	r3, #1
 8018472:	d009      	beq.n	8018488 <dhcp_parse_reply+0x4a0>
 8018474:	4b45      	ldr	r3, [pc, #276]	@ (801858c <dhcp_parse_reply+0x5a4>)
 8018476:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801847a:	494b      	ldr	r1, [pc, #300]	@ (80185a8 <dhcp_parse_reply+0x5c0>)
 801847c:	4845      	ldr	r0, [pc, #276]	@ (8018594 <dhcp_parse_reply+0x5ac>)
 801847e:	f003 fe4f 	bl	801c120 <iprintf>
 8018482:	f06f 0305 	mvn.w	r3, #5
 8018486:	e07d      	b.n	8018584 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8018488:	f107 030c 	add.w	r3, r7, #12
 801848c:	781b      	ldrb	r3, [r3, #0]
 801848e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8018490:	4a42      	ldr	r2, [pc, #264]	@ (801859c <dhcp_parse_reply+0x5b4>)
 8018492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018494:	4413      	add	r3, r2
 8018496:	2201      	movs	r2, #1
 8018498:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801849a:	68fa      	ldr	r2, [r7, #12]
 801849c:	4941      	ldr	r1, [pc, #260]	@ (80185a4 <dhcp_parse_reply+0x5bc>)
 801849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80184a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184a6:	895b      	ldrh	r3, [r3, #10]
 80184a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d327      	bcc.n	8018500 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 80184b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184b2:	895b      	ldrh	r3, [r3, #10]
 80184b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80184b8:	1ad3      	subs	r3, r2, r3
 80184ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 80184be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184c0:	895b      	ldrh	r3, [r3, #10]
 80184c2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80184c4:	1ad3      	subs	r3, r2, r3
 80184c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 80184c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80184cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80184ce:	429a      	cmp	r2, r3
 80184d0:	d213      	bcs.n	80184fa <dhcp_parse_reply+0x512>
        q = q->next;
 80184d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80184d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d109      	bne.n	80184f2 <dhcp_parse_reply+0x50a>
 80184de:	4b2b      	ldr	r3, [pc, #172]	@ (801858c <dhcp_parse_reply+0x5a4>)
 80184e0:	f240 629d 	movw	r2, #1693	@ 0x69d
 80184e4:	4931      	ldr	r1, [pc, #196]	@ (80185ac <dhcp_parse_reply+0x5c4>)
 80184e6:	482b      	ldr	r0, [pc, #172]	@ (8018594 <dhcp_parse_reply+0x5ac>)
 80184e8:	f003 fe1a 	bl	801c120 <iprintf>
 80184ec:	f06f 0305 	mvn.w	r3, #5
 80184f0:	e048      	b.n	8018584 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 80184f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80184f8:	e002      	b.n	8018500 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80184fa:	f06f 0301 	mvn.w	r3, #1
 80184fe:	e041      	b.n	8018584 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018502:	2b00      	cmp	r3, #0
 8018504:	d00c      	beq.n	8018520 <dhcp_parse_reply+0x538>
 8018506:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801850a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801850c:	429a      	cmp	r2, r3
 801850e:	d207      	bcs.n	8018520 <dhcp_parse_reply+0x538>
 8018510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018516:	4413      	add	r3, r2
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	2bff      	cmp	r3, #255	@ 0xff
 801851c:	f47f ada8 	bne.w	8018070 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018520:	4b1e      	ldr	r3, [pc, #120]	@ (801859c <dhcp_parse_reply+0x5b4>)
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d018      	beq.n	801855a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018528:	4b1e      	ldr	r3, [pc, #120]	@ (80185a4 <dhcp_parse_reply+0x5bc>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801852e:	4b1b      	ldr	r3, [pc, #108]	@ (801859c <dhcp_parse_reply+0x5b4>)
 8018530:	2200      	movs	r2, #0
 8018532:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	2b01      	cmp	r3, #1
 8018538:	d102      	bne.n	8018540 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 801853a:	2301      	movs	r3, #1
 801853c:	633b      	str	r3, [r7, #48]	@ 0x30
 801853e:	e00c      	b.n	801855a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	2b02      	cmp	r3, #2
 8018544:	d102      	bne.n	801854c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8018546:	2301      	movs	r3, #1
 8018548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801854a:	e006      	b.n	801855a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801854c:	693b      	ldr	r3, [r7, #16]
 801854e:	2b03      	cmp	r3, #3
 8018550:	d103      	bne.n	801855a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8018552:	2301      	movs	r3, #1
 8018554:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 8018556:	2301      	movs	r3, #1
 8018558:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801855c:	2b00      	cmp	r3, #0
 801855e:	d006      	beq.n	801856e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018560:	2300      	movs	r3, #0
 8018562:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 8018564:	236c      	movs	r3, #108	@ 0x6c
 8018566:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018568:	23ec      	movs	r3, #236	@ 0xec
 801856a:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801856c:	e559      	b.n	8018022 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801856e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018570:	2b00      	cmp	r3, #0
 8018572:	d006      	beq.n	8018582 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8018574:	2300      	movs	r3, #0
 8018576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 8018578:	232c      	movs	r3, #44	@ 0x2c
 801857a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801857c:	236c      	movs	r3, #108	@ 0x6c
 801857e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 8018580:	e54f      	b.n	8018022 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018582:	2300      	movs	r3, #0
}
 8018584:	4618      	mov	r0, r3
 8018586:	3748      	adds	r7, #72	@ 0x48
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}
 801858c:	08021208 	.word	0x08021208
 8018590:	08021490 	.word	0x08021490
 8018594:	08021268 	.word	0x08021268
 8018598:	080214d4 	.word	0x080214d4
 801859c:	20013d94 	.word	0x20013d94
 80185a0:	080214e8 	.word	0x080214e8
 80185a4:	20013d74 	.word	0x20013d74
 80185a8:	08021500 	.word	0x08021500
 80185ac:	08021514 	.word	0x08021514

080185b0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b08a      	sub	sp, #40	@ 0x28
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
 80185bc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80185be:	4b5e      	ldr	r3, [pc, #376]	@ (8018738 <dhcp_recv+0x188>)
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80185c4:	69fb      	ldr	r3, [r7, #28]
 80185c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185c8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	685b      	ldr	r3, [r3, #4]
 80185ce:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80185d0:	69bb      	ldr	r3, [r7, #24]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	f000 809a 	beq.w	801870c <dhcp_recv+0x15c>
 80185d8:	69bb      	ldr	r3, [r7, #24]
 80185da:	791b      	ldrb	r3, [r3, #4]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	f000 8095 	beq.w	801870c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	895b      	ldrh	r3, [r3, #10]
 80185e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80185e8:	f240 8092 	bls.w	8018710 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	2b02      	cmp	r3, #2
 80185f2:	f040 808f 	bne.w	8018714 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80185f6:	2300      	movs	r3, #0
 80185f8:	74fb      	strb	r3, [r7, #19]
 80185fa:	e00e      	b.n	801861a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80185fc:	7cfb      	ldrb	r3, [r7, #19]
 80185fe:	69fa      	ldr	r2, [r7, #28]
 8018600:	4413      	add	r3, r2
 8018602:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8018606:	7cfb      	ldrb	r3, [r7, #19]
 8018608:	6979      	ldr	r1, [r7, #20]
 801860a:	440b      	add	r3, r1
 801860c:	7f1b      	ldrb	r3, [r3, #28]
 801860e:	429a      	cmp	r2, r3
 8018610:	f040 8082 	bne.w	8018718 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018614:	7cfb      	ldrb	r3, [r7, #19]
 8018616:	3301      	adds	r3, #1
 8018618:	74fb      	strb	r3, [r7, #19]
 801861a:	69fb      	ldr	r3, [r7, #28]
 801861c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018620:	7cfa      	ldrb	r2, [r7, #19]
 8018622:	429a      	cmp	r2, r3
 8018624:	d202      	bcs.n	801862c <dhcp_recv+0x7c>
 8018626:	7cfb      	ldrb	r3, [r7, #19]
 8018628:	2b05      	cmp	r3, #5
 801862a:	d9e7      	bls.n	80185fc <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	4618      	mov	r0, r3
 8018632:	f7f6 fa2a 	bl	800ea8a <lwip_htonl>
 8018636:	4602      	mov	r2, r0
 8018638:	69bb      	ldr	r3, [r7, #24]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	429a      	cmp	r2, r3
 801863e:	d16d      	bne.n	801871c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018640:	69b9      	ldr	r1, [r7, #24]
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f7ff fcd0 	bl	8017fe8 <dhcp_parse_reply>
 8018648:	4603      	mov	r3, r0
 801864a:	2b00      	cmp	r3, #0
 801864c:	d168      	bne.n	8018720 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801864e:	4b3b      	ldr	r3, [pc, #236]	@ (801873c <dhcp_recv+0x18c>)
 8018650:	785b      	ldrb	r3, [r3, #1]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d066      	beq.n	8018724 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	685b      	ldr	r3, [r3, #4]
 801865a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801865c:	4b38      	ldr	r3, [pc, #224]	@ (8018740 <dhcp_recv+0x190>)
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018664:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018668:	2b05      	cmp	r3, #5
 801866a:	d12a      	bne.n	80186c2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801866c:	69bb      	ldr	r3, [r7, #24]
 801866e:	795b      	ldrb	r3, [r3, #5]
 8018670:	2b01      	cmp	r3, #1
 8018672:	d112      	bne.n	801869a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8018674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018676:	69f8      	ldr	r0, [r7, #28]
 8018678:	f7fe fe06 	bl	8017288 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801867c:	69fb      	ldr	r3, [r7, #28]
 801867e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018682:	f003 0308 	and.w	r3, r3, #8
 8018686:	2b00      	cmp	r3, #0
 8018688:	d003      	beq.n	8018692 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801868a:	69f8      	ldr	r0, [r7, #28]
 801868c:	f7fe fb76 	bl	8016d7c <dhcp_check>
 8018690:	e04b      	b.n	801872a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018692:	69f8      	ldr	r0, [r7, #28]
 8018694:	f7ff f856 	bl	8017744 <dhcp_bind>
 8018698:	e047      	b.n	801872a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801869a:	69bb      	ldr	r3, [r7, #24]
 801869c:	795b      	ldrb	r3, [r3, #5]
 801869e:	2b03      	cmp	r3, #3
 80186a0:	d007      	beq.n	80186b2 <dhcp_recv+0x102>
 80186a2:	69bb      	ldr	r3, [r7, #24]
 80186a4:	795b      	ldrb	r3, [r3, #5]
 80186a6:	2b04      	cmp	r3, #4
 80186a8:	d003      	beq.n	80186b2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80186aa:	69bb      	ldr	r3, [r7, #24]
 80186ac:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80186ae:	2b05      	cmp	r3, #5
 80186b0:	d13b      	bne.n	801872a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 80186b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80186b4:	69f8      	ldr	r0, [r7, #28]
 80186b6:	f7fe fde7 	bl	8017288 <dhcp_handle_ack>
      dhcp_bind(netif);
 80186ba:	69f8      	ldr	r0, [r7, #28]
 80186bc:	f7ff f842 	bl	8017744 <dhcp_bind>
 80186c0:	e033      	b.n	801872a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80186c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80186c6:	2b06      	cmp	r3, #6
 80186c8:	d113      	bne.n	80186f2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80186ca:	69bb      	ldr	r3, [r7, #24]
 80186cc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80186ce:	2b03      	cmp	r3, #3
 80186d0:	d00b      	beq.n	80186ea <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80186d2:	69bb      	ldr	r3, [r7, #24]
 80186d4:	795b      	ldrb	r3, [r3, #5]
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d007      	beq.n	80186ea <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80186da:	69bb      	ldr	r3, [r7, #24]
 80186dc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80186de:	2b04      	cmp	r3, #4
 80186e0:	d003      	beq.n	80186ea <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	795b      	ldrb	r3, [r3, #5]
 80186e6:	2b05      	cmp	r3, #5
 80186e8:	d103      	bne.n	80186f2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80186ea:	69f8      	ldr	r0, [r7, #28]
 80186ec:	f7fe fb2c 	bl	8016d48 <dhcp_handle_nak>
 80186f0:	e01b      	b.n	801872a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80186f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80186f6:	2b02      	cmp	r3, #2
 80186f8:	d116      	bne.n	8018728 <dhcp_recv+0x178>
 80186fa:	69bb      	ldr	r3, [r7, #24]
 80186fc:	795b      	ldrb	r3, [r3, #5]
 80186fe:	2b06      	cmp	r3, #6
 8018700:	d112      	bne.n	8018728 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018702:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018704:	69f8      	ldr	r0, [r7, #28]
 8018706:	f7fe fb6d 	bl	8016de4 <dhcp_handle_offer>
 801870a:	e00e      	b.n	801872a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801870c:	bf00      	nop
 801870e:	e00c      	b.n	801872a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018710:	bf00      	nop
 8018712:	e00a      	b.n	801872a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018714:	bf00      	nop
 8018716:	e008      	b.n	801872a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8018718:	bf00      	nop
 801871a:	e006      	b.n	801872a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801871c:	bf00      	nop
 801871e:	e004      	b.n	801872a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018720:	bf00      	nop
 8018722:	e002      	b.n	801872a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8018724:	bf00      	nop
 8018726:	e000      	b.n	801872a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8018728:	bf00      	nop
  pbuf_free(p);
 801872a:	6878      	ldr	r0, [r7, #4]
 801872c:	f7f7 feba 	bl	80104a4 <pbuf_free>
}
 8018730:	bf00      	nop
 8018732:	3728      	adds	r7, #40	@ 0x28
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	2000a29c 	.word	0x2000a29c
 801873c:	20013d94 	.word	0x20013d94
 8018740:	20013d74 	.word	0x20013d74

08018744 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b088      	sub	sp, #32
 8018748:	af00      	add	r7, sp, #0
 801874a:	60f8      	str	r0, [r7, #12]
 801874c:	60b9      	str	r1, [r7, #8]
 801874e:	603b      	str	r3, [r7, #0]
 8018750:	4613      	mov	r3, r2
 8018752:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d108      	bne.n	801876c <dhcp_create_msg+0x28>
 801875a:	4b5f      	ldr	r3, [pc, #380]	@ (80188d8 <dhcp_create_msg+0x194>)
 801875c:	f240 7269 	movw	r2, #1897	@ 0x769
 8018760:	495e      	ldr	r1, [pc, #376]	@ (80188dc <dhcp_create_msg+0x198>)
 8018762:	485f      	ldr	r0, [pc, #380]	@ (80188e0 <dhcp_create_msg+0x19c>)
 8018764:	f003 fcdc 	bl	801c120 <iprintf>
 8018768:	2300      	movs	r3, #0
 801876a:	e0b1      	b.n	80188d0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d108      	bne.n	8018784 <dhcp_create_msg+0x40>
 8018772:	4b59      	ldr	r3, [pc, #356]	@ (80188d8 <dhcp_create_msg+0x194>)
 8018774:	f240 726a 	movw	r2, #1898	@ 0x76a
 8018778:	495a      	ldr	r1, [pc, #360]	@ (80188e4 <dhcp_create_msg+0x1a0>)
 801877a:	4859      	ldr	r0, [pc, #356]	@ (80188e0 <dhcp_create_msg+0x19c>)
 801877c:	f003 fcd0 	bl	801c120 <iprintf>
 8018780:	2300      	movs	r3, #0
 8018782:	e0a5      	b.n	80188d0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018784:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018788:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801878c:	2036      	movs	r0, #54	@ 0x36
 801878e:	f7f7 fba1 	bl	800fed4 <pbuf_alloc>
 8018792:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018794:	69bb      	ldr	r3, [r7, #24]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d101      	bne.n	801879e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801879a:	2300      	movs	r3, #0
 801879c:	e098      	b.n	80188d0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	895b      	ldrh	r3, [r3, #10]
 80187a2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80187a6:	d206      	bcs.n	80187b6 <dhcp_create_msg+0x72>
 80187a8:	4b4b      	ldr	r3, [pc, #300]	@ (80188d8 <dhcp_create_msg+0x194>)
 80187aa:	f240 7271 	movw	r2, #1905	@ 0x771
 80187ae:	494e      	ldr	r1, [pc, #312]	@ (80188e8 <dhcp_create_msg+0x1a4>)
 80187b0:	484b      	ldr	r0, [pc, #300]	@ (80188e0 <dhcp_create_msg+0x19c>)
 80187b2:	f003 fcb5 	bl	801c120 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80187b6:	79fb      	ldrb	r3, [r7, #7]
 80187b8:	2b03      	cmp	r3, #3
 80187ba:	d103      	bne.n	80187c4 <dhcp_create_msg+0x80>
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	795b      	ldrb	r3, [r3, #5]
 80187c0:	2b03      	cmp	r3, #3
 80187c2:	d10d      	bne.n	80187e0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80187c4:	68bb      	ldr	r3, [r7, #8]
 80187c6:	799b      	ldrb	r3, [r3, #6]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d105      	bne.n	80187d8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80187cc:	f002 fed8 	bl	801b580 <rand>
 80187d0:	4603      	mov	r3, r0
 80187d2:	461a      	mov	r2, r3
 80187d4:	4b45      	ldr	r3, [pc, #276]	@ (80188ec <dhcp_create_msg+0x1a8>)
 80187d6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80187d8:	4b44      	ldr	r3, [pc, #272]	@ (80188ec <dhcp_create_msg+0x1a8>)
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	68bb      	ldr	r3, [r7, #8]
 80187de:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80187e0:	69bb      	ldr	r3, [r7, #24]
 80187e2:	685b      	ldr	r3, [r3, #4]
 80187e4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80187e6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80187ea:	2100      	movs	r1, #0
 80187ec:	6978      	ldr	r0, [r7, #20]
 80187ee:	f003 fdf9 	bl	801c3e4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80187f2:	697b      	ldr	r3, [r7, #20]
 80187f4:	2201      	movs	r2, #1
 80187f6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80187f8:	697b      	ldr	r3, [r7, #20]
 80187fa:	2201      	movs	r2, #1
 80187fc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018804:	697b      	ldr	r3, [r7, #20]
 8018806:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	4618      	mov	r0, r3
 801880e:	f7f6 f93c 	bl	800ea8a <lwip_htonl>
 8018812:	4602      	mov	r2, r0
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018818:	79fb      	ldrb	r3, [r7, #7]
 801881a:	2b08      	cmp	r3, #8
 801881c:	d010      	beq.n	8018840 <dhcp_create_msg+0xfc>
 801881e:	79fb      	ldrb	r3, [r7, #7]
 8018820:	2b04      	cmp	r3, #4
 8018822:	d00d      	beq.n	8018840 <dhcp_create_msg+0xfc>
 8018824:	79fb      	ldrb	r3, [r7, #7]
 8018826:	2b07      	cmp	r3, #7
 8018828:	d00a      	beq.n	8018840 <dhcp_create_msg+0xfc>
 801882a:	79fb      	ldrb	r3, [r7, #7]
 801882c:	2b03      	cmp	r3, #3
 801882e:	d10c      	bne.n	801884a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018834:	2b05      	cmp	r3, #5
 8018836:	d003      	beq.n	8018840 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	795b      	ldrb	r3, [r3, #5]
 801883c:	2b04      	cmp	r3, #4
 801883e:	d104      	bne.n	801884a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	3304      	adds	r3, #4
 8018844:	681a      	ldr	r2, [r3, #0]
 8018846:	697b      	ldr	r3, [r7, #20]
 8018848:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801884a:	2300      	movs	r3, #0
 801884c:	83fb      	strh	r3, [r7, #30]
 801884e:	e00c      	b.n	801886a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018850:	8bfa      	ldrh	r2, [r7, #30]
 8018852:	8bfb      	ldrh	r3, [r7, #30]
 8018854:	68f9      	ldr	r1, [r7, #12]
 8018856:	440a      	add	r2, r1
 8018858:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801885c:	697a      	ldr	r2, [r7, #20]
 801885e:	4413      	add	r3, r2
 8018860:	460a      	mov	r2, r1
 8018862:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018864:	8bfb      	ldrh	r3, [r7, #30]
 8018866:	3301      	adds	r3, #1
 8018868:	83fb      	strh	r3, [r7, #30]
 801886a:	8bfb      	ldrh	r3, [r7, #30]
 801886c:	2b05      	cmp	r3, #5
 801886e:	d9ef      	bls.n	8018850 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018870:	697b      	ldr	r3, [r7, #20]
 8018872:	2200      	movs	r2, #0
 8018874:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8018878:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801887c:	2200      	movs	r2, #0
 801887e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8018882:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8018886:	2200      	movs	r2, #0
 8018888:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801888c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8018890:	2200      	movs	r2, #0
 8018892:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8018896:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801889a:	697b      	ldr	r3, [r7, #20]
 801889c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80188a0:	2301      	movs	r3, #1
 80188a2:	2235      	movs	r2, #53	@ 0x35
 80188a4:	2000      	movs	r0, #0
 80188a6:	f7ff facf 	bl	8017e48 <dhcp_option>
 80188aa:	4603      	mov	r3, r0
 80188ac:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80188ae:	697b      	ldr	r3, [r7, #20]
 80188b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80188b4:	79fa      	ldrb	r2, [r7, #7]
 80188b6:	8a7b      	ldrh	r3, [r7, #18]
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7ff faf9 	bl	8017eb0 <dhcp_option_byte>
 80188be:	4603      	mov	r3, r0
 80188c0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d002      	beq.n	80188ce <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	8a7a      	ldrh	r2, [r7, #18]
 80188cc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80188ce:	69bb      	ldr	r3, [r7, #24]
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3720      	adds	r7, #32
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	08021208 	.word	0x08021208
 80188dc:	08021528 	.word	0x08021528
 80188e0:	08021268 	.word	0x08021268
 80188e4:	08021548 	.word	0x08021548
 80188e8:	08021568 	.word	0x08021568
 80188ec:	20013da4 	.word	0x20013da4

080188f0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b084      	sub	sp, #16
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	4603      	mov	r3, r0
 80188f8:	60b9      	str	r1, [r7, #8]
 80188fa:	607a      	str	r2, [r7, #4]
 80188fc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80188fe:	89fb      	ldrh	r3, [r7, #14]
 8018900:	1c5a      	adds	r2, r3, #1
 8018902:	81fa      	strh	r2, [r7, #14]
 8018904:	461a      	mov	r2, r3
 8018906:	68bb      	ldr	r3, [r7, #8]
 8018908:	4413      	add	r3, r2
 801890a:	22ff      	movs	r2, #255	@ 0xff
 801890c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801890e:	e007      	b.n	8018920 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8018910:	89fb      	ldrh	r3, [r7, #14]
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	81fa      	strh	r2, [r7, #14]
 8018916:	461a      	mov	r2, r3
 8018918:	68bb      	ldr	r3, [r7, #8]
 801891a:	4413      	add	r3, r2
 801891c:	2200      	movs	r2, #0
 801891e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018920:	89fb      	ldrh	r3, [r7, #14]
 8018922:	2b43      	cmp	r3, #67	@ 0x43
 8018924:	d904      	bls.n	8018930 <dhcp_option_trailer+0x40>
 8018926:	89fb      	ldrh	r3, [r7, #14]
 8018928:	f003 0303 	and.w	r3, r3, #3
 801892c:	2b00      	cmp	r3, #0
 801892e:	d002      	beq.n	8018936 <dhcp_option_trailer+0x46>
 8018930:	89fb      	ldrh	r3, [r7, #14]
 8018932:	2b43      	cmp	r3, #67	@ 0x43
 8018934:	d9ec      	bls.n	8018910 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8018936:	89fb      	ldrh	r3, [r7, #14]
 8018938:	33f0      	adds	r3, #240	@ 0xf0
 801893a:	b29b      	uxth	r3, r3
 801893c:	4619      	mov	r1, r3
 801893e:	6878      	ldr	r0, [r7, #4]
 8018940:	f7f7 fc2a 	bl	8010198 <pbuf_realloc>
}
 8018944:	bf00      	nop
 8018946:	3710      	adds	r7, #16
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}

0801894c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801894c:	b480      	push	{r7}
 801894e:	b085      	sub	sp, #20
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d017      	beq.n	801898a <dhcp_supplied_address+0x3e>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801895e:	2b00      	cmp	r3, #0
 8018960:	d013      	beq.n	801898a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018966:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	795b      	ldrb	r3, [r3, #5]
 801896c:	2b0a      	cmp	r3, #10
 801896e:	d007      	beq.n	8018980 <dhcp_supplied_address+0x34>
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	795b      	ldrb	r3, [r3, #5]
 8018974:	2b05      	cmp	r3, #5
 8018976:	d003      	beq.n	8018980 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801897c:	2b04      	cmp	r3, #4
 801897e:	d101      	bne.n	8018984 <dhcp_supplied_address+0x38>
 8018980:	2301      	movs	r3, #1
 8018982:	e000      	b.n	8018986 <dhcp_supplied_address+0x3a>
 8018984:	2300      	movs	r3, #0
 8018986:	b2db      	uxtb	r3, r3
 8018988:	e000      	b.n	801898c <dhcp_supplied_address+0x40>
  }
  return 0;
 801898a:	2300      	movs	r3, #0
}
 801898c:	4618      	mov	r0, r3
 801898e:	3714      	adds	r7, #20
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr

08018998 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80189a0:	492b      	ldr	r1, [pc, #172]	@ (8018a50 <etharp_free_entry+0xb8>)
 80189a2:	687a      	ldr	r2, [r7, #4]
 80189a4:	4613      	mov	r3, r2
 80189a6:	005b      	lsls	r3, r3, #1
 80189a8:	4413      	add	r3, r2
 80189aa:	00db      	lsls	r3, r3, #3
 80189ac:	440b      	add	r3, r1
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d013      	beq.n	80189dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80189b4:	4926      	ldr	r1, [pc, #152]	@ (8018a50 <etharp_free_entry+0xb8>)
 80189b6:	687a      	ldr	r2, [r7, #4]
 80189b8:	4613      	mov	r3, r2
 80189ba:	005b      	lsls	r3, r3, #1
 80189bc:	4413      	add	r3, r2
 80189be:	00db      	lsls	r3, r3, #3
 80189c0:	440b      	add	r3, r1
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	4618      	mov	r0, r3
 80189c6:	f7f7 fd6d 	bl	80104a4 <pbuf_free>
    arp_table[i].q = NULL;
 80189ca:	4921      	ldr	r1, [pc, #132]	@ (8018a50 <etharp_free_entry+0xb8>)
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	4613      	mov	r3, r2
 80189d0:	005b      	lsls	r3, r3, #1
 80189d2:	4413      	add	r3, r2
 80189d4:	00db      	lsls	r3, r3, #3
 80189d6:	440b      	add	r3, r1
 80189d8:	2200      	movs	r2, #0
 80189da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80189dc:	491c      	ldr	r1, [pc, #112]	@ (8018a50 <etharp_free_entry+0xb8>)
 80189de:	687a      	ldr	r2, [r7, #4]
 80189e0:	4613      	mov	r3, r2
 80189e2:	005b      	lsls	r3, r3, #1
 80189e4:	4413      	add	r3, r2
 80189e6:	00db      	lsls	r3, r3, #3
 80189e8:	440b      	add	r3, r1
 80189ea:	3314      	adds	r3, #20
 80189ec:	2200      	movs	r2, #0
 80189ee:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80189f0:	4917      	ldr	r1, [pc, #92]	@ (8018a50 <etharp_free_entry+0xb8>)
 80189f2:	687a      	ldr	r2, [r7, #4]
 80189f4:	4613      	mov	r3, r2
 80189f6:	005b      	lsls	r3, r3, #1
 80189f8:	4413      	add	r3, r2
 80189fa:	00db      	lsls	r3, r3, #3
 80189fc:	440b      	add	r3, r1
 80189fe:	3312      	adds	r3, #18
 8018a00:	2200      	movs	r2, #0
 8018a02:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8018a04:	4912      	ldr	r1, [pc, #72]	@ (8018a50 <etharp_free_entry+0xb8>)
 8018a06:	687a      	ldr	r2, [r7, #4]
 8018a08:	4613      	mov	r3, r2
 8018a0a:	005b      	lsls	r3, r3, #1
 8018a0c:	4413      	add	r3, r2
 8018a0e:	00db      	lsls	r3, r3, #3
 8018a10:	440b      	add	r3, r1
 8018a12:	3308      	adds	r3, #8
 8018a14:	2200      	movs	r2, #0
 8018a16:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8018a18:	490d      	ldr	r1, [pc, #52]	@ (8018a50 <etharp_free_entry+0xb8>)
 8018a1a:	687a      	ldr	r2, [r7, #4]
 8018a1c:	4613      	mov	r3, r2
 8018a1e:	005b      	lsls	r3, r3, #1
 8018a20:	4413      	add	r3, r2
 8018a22:	00db      	lsls	r3, r3, #3
 8018a24:	440b      	add	r3, r1
 8018a26:	3304      	adds	r3, #4
 8018a28:	2200      	movs	r2, #0
 8018a2a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8018a2c:	4908      	ldr	r1, [pc, #32]	@ (8018a50 <etharp_free_entry+0xb8>)
 8018a2e:	687a      	ldr	r2, [r7, #4]
 8018a30:	4613      	mov	r3, r2
 8018a32:	005b      	lsls	r3, r3, #1
 8018a34:	4413      	add	r3, r2
 8018a36:	00db      	lsls	r3, r3, #3
 8018a38:	440b      	add	r3, r1
 8018a3a:	3308      	adds	r3, #8
 8018a3c:	4a05      	ldr	r2, [pc, #20]	@ (8018a54 <etharp_free_entry+0xbc>)
 8018a3e:	3304      	adds	r3, #4
 8018a40:	6810      	ldr	r0, [r2, #0]
 8018a42:	6018      	str	r0, [r3, #0]
 8018a44:	8892      	ldrh	r2, [r2, #4]
 8018a46:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8018a48:	bf00      	nop
 8018a4a:	3708      	adds	r7, #8
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd80      	pop	{r7, pc}
 8018a50:	20013da8 	.word	0x20013da8
 8018a54:	0806da70 	.word	0x0806da70

08018a58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b082      	sub	sp, #8
 8018a5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a5e:	2300      	movs	r3, #0
 8018a60:	607b      	str	r3, [r7, #4]
 8018a62:	e09a      	b.n	8018b9a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8018a64:	4951      	ldr	r1, [pc, #324]	@ (8018bac <etharp_tmr+0x154>)
 8018a66:	687a      	ldr	r2, [r7, #4]
 8018a68:	4613      	mov	r3, r2
 8018a6a:	005b      	lsls	r3, r3, #1
 8018a6c:	4413      	add	r3, r2
 8018a6e:	00db      	lsls	r3, r3, #3
 8018a70:	440b      	add	r3, r1
 8018a72:	3314      	adds	r3, #20
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018a78:	78fb      	ldrb	r3, [r7, #3]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	f000 808a 	beq.w	8018b94 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8018a80:	78fb      	ldrb	r3, [r7, #3]
 8018a82:	2b05      	cmp	r3, #5
 8018a84:	f000 8086 	beq.w	8018b94 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018a88:	4948      	ldr	r1, [pc, #288]	@ (8018bac <etharp_tmr+0x154>)
 8018a8a:	687a      	ldr	r2, [r7, #4]
 8018a8c:	4613      	mov	r3, r2
 8018a8e:	005b      	lsls	r3, r3, #1
 8018a90:	4413      	add	r3, r2
 8018a92:	00db      	lsls	r3, r3, #3
 8018a94:	440b      	add	r3, r1
 8018a96:	3312      	adds	r3, #18
 8018a98:	881b      	ldrh	r3, [r3, #0]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	b298      	uxth	r0, r3
 8018a9e:	4943      	ldr	r1, [pc, #268]	@ (8018bac <etharp_tmr+0x154>)
 8018aa0:	687a      	ldr	r2, [r7, #4]
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	005b      	lsls	r3, r3, #1
 8018aa6:	4413      	add	r3, r2
 8018aa8:	00db      	lsls	r3, r3, #3
 8018aaa:	440b      	add	r3, r1
 8018aac:	3312      	adds	r3, #18
 8018aae:	4602      	mov	r2, r0
 8018ab0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018ab2:	493e      	ldr	r1, [pc, #248]	@ (8018bac <etharp_tmr+0x154>)
 8018ab4:	687a      	ldr	r2, [r7, #4]
 8018ab6:	4613      	mov	r3, r2
 8018ab8:	005b      	lsls	r3, r3, #1
 8018aba:	4413      	add	r3, r2
 8018abc:	00db      	lsls	r3, r3, #3
 8018abe:	440b      	add	r3, r1
 8018ac0:	3312      	adds	r3, #18
 8018ac2:	881b      	ldrh	r3, [r3, #0]
 8018ac4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8018ac8:	d215      	bcs.n	8018af6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018aca:	4938      	ldr	r1, [pc, #224]	@ (8018bac <etharp_tmr+0x154>)
 8018acc:	687a      	ldr	r2, [r7, #4]
 8018ace:	4613      	mov	r3, r2
 8018ad0:	005b      	lsls	r3, r3, #1
 8018ad2:	4413      	add	r3, r2
 8018ad4:	00db      	lsls	r3, r3, #3
 8018ad6:	440b      	add	r3, r1
 8018ad8:	3314      	adds	r3, #20
 8018ada:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018adc:	2b01      	cmp	r3, #1
 8018ade:	d10e      	bne.n	8018afe <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018ae0:	4932      	ldr	r1, [pc, #200]	@ (8018bac <etharp_tmr+0x154>)
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	4613      	mov	r3, r2
 8018ae6:	005b      	lsls	r3, r3, #1
 8018ae8:	4413      	add	r3, r2
 8018aea:	00db      	lsls	r3, r3, #3
 8018aec:	440b      	add	r3, r1
 8018aee:	3312      	adds	r3, #18
 8018af0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018af2:	2b04      	cmp	r3, #4
 8018af4:	d903      	bls.n	8018afe <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	f7ff ff4e 	bl	8018998 <etharp_free_entry>
 8018afc:	e04a      	b.n	8018b94 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018afe:	492b      	ldr	r1, [pc, #172]	@ (8018bac <etharp_tmr+0x154>)
 8018b00:	687a      	ldr	r2, [r7, #4]
 8018b02:	4613      	mov	r3, r2
 8018b04:	005b      	lsls	r3, r3, #1
 8018b06:	4413      	add	r3, r2
 8018b08:	00db      	lsls	r3, r3, #3
 8018b0a:	440b      	add	r3, r1
 8018b0c:	3314      	adds	r3, #20
 8018b0e:	781b      	ldrb	r3, [r3, #0]
 8018b10:	2b03      	cmp	r3, #3
 8018b12:	d10a      	bne.n	8018b2a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018b14:	4925      	ldr	r1, [pc, #148]	@ (8018bac <etharp_tmr+0x154>)
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	4613      	mov	r3, r2
 8018b1a:	005b      	lsls	r3, r3, #1
 8018b1c:	4413      	add	r3, r2
 8018b1e:	00db      	lsls	r3, r3, #3
 8018b20:	440b      	add	r3, r1
 8018b22:	3314      	adds	r3, #20
 8018b24:	2204      	movs	r2, #4
 8018b26:	701a      	strb	r2, [r3, #0]
 8018b28:	e034      	b.n	8018b94 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018b2a:	4920      	ldr	r1, [pc, #128]	@ (8018bac <etharp_tmr+0x154>)
 8018b2c:	687a      	ldr	r2, [r7, #4]
 8018b2e:	4613      	mov	r3, r2
 8018b30:	005b      	lsls	r3, r3, #1
 8018b32:	4413      	add	r3, r2
 8018b34:	00db      	lsls	r3, r3, #3
 8018b36:	440b      	add	r3, r1
 8018b38:	3314      	adds	r3, #20
 8018b3a:	781b      	ldrb	r3, [r3, #0]
 8018b3c:	2b04      	cmp	r3, #4
 8018b3e:	d10a      	bne.n	8018b56 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018b40:	491a      	ldr	r1, [pc, #104]	@ (8018bac <etharp_tmr+0x154>)
 8018b42:	687a      	ldr	r2, [r7, #4]
 8018b44:	4613      	mov	r3, r2
 8018b46:	005b      	lsls	r3, r3, #1
 8018b48:	4413      	add	r3, r2
 8018b4a:	00db      	lsls	r3, r3, #3
 8018b4c:	440b      	add	r3, r1
 8018b4e:	3314      	adds	r3, #20
 8018b50:	2202      	movs	r2, #2
 8018b52:	701a      	strb	r2, [r3, #0]
 8018b54:	e01e      	b.n	8018b94 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018b56:	4915      	ldr	r1, [pc, #84]	@ (8018bac <etharp_tmr+0x154>)
 8018b58:	687a      	ldr	r2, [r7, #4]
 8018b5a:	4613      	mov	r3, r2
 8018b5c:	005b      	lsls	r3, r3, #1
 8018b5e:	4413      	add	r3, r2
 8018b60:	00db      	lsls	r3, r3, #3
 8018b62:	440b      	add	r3, r1
 8018b64:	3314      	adds	r3, #20
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	2b01      	cmp	r3, #1
 8018b6a:	d113      	bne.n	8018b94 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018b6c:	490f      	ldr	r1, [pc, #60]	@ (8018bac <etharp_tmr+0x154>)
 8018b6e:	687a      	ldr	r2, [r7, #4]
 8018b70:	4613      	mov	r3, r2
 8018b72:	005b      	lsls	r3, r3, #1
 8018b74:	4413      	add	r3, r2
 8018b76:	00db      	lsls	r3, r3, #3
 8018b78:	440b      	add	r3, r1
 8018b7a:	3308      	adds	r3, #8
 8018b7c:	6818      	ldr	r0, [r3, #0]
 8018b7e:	687a      	ldr	r2, [r7, #4]
 8018b80:	4613      	mov	r3, r2
 8018b82:	005b      	lsls	r3, r3, #1
 8018b84:	4413      	add	r3, r2
 8018b86:	00db      	lsls	r3, r3, #3
 8018b88:	4a08      	ldr	r2, [pc, #32]	@ (8018bac <etharp_tmr+0x154>)
 8018b8a:	4413      	add	r3, r2
 8018b8c:	3304      	adds	r3, #4
 8018b8e:	4619      	mov	r1, r3
 8018b90:	f000 feae 	bl	80198f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	3301      	adds	r3, #1
 8018b98:	607b      	str	r3, [r7, #4]
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	2b09      	cmp	r3, #9
 8018b9e:	f77f af61 	ble.w	8018a64 <etharp_tmr+0xc>
      }
    }
  }
}
 8018ba2:	bf00      	nop
 8018ba4:	bf00      	nop
 8018ba6:	3708      	adds	r7, #8
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	bd80      	pop	{r7, pc}
 8018bac:	20013da8 	.word	0x20013da8

08018bb0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b08a      	sub	sp, #40	@ 0x28
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	60f8      	str	r0, [r7, #12]
 8018bb8:	460b      	mov	r3, r1
 8018bba:	607a      	str	r2, [r7, #4]
 8018bbc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018bbe:	230a      	movs	r3, #10
 8018bc0:	843b      	strh	r3, [r7, #32]
 8018bc2:	230a      	movs	r3, #10
 8018bc4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8018bc6:	230a      	movs	r3, #10
 8018bc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 8018bca:	2300      	movs	r3, #0
 8018bcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018bce:	230a      	movs	r3, #10
 8018bd0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	83bb      	strh	r3, [r7, #28]
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	837b      	strh	r3, [r7, #26]
 8018bda:	2300      	movs	r3, #0
 8018bdc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018bde:	2300      	movs	r3, #0
 8018be0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018be2:	e0b1      	b.n	8018d48 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8018be4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018be8:	49a7      	ldr	r1, [pc, #668]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018bea:	4613      	mov	r3, r2
 8018bec:	005b      	lsls	r3, r3, #1
 8018bee:	4413      	add	r3, r2
 8018bf0:	00db      	lsls	r3, r3, #3
 8018bf2:	440b      	add	r3, r1
 8018bf4:	3314      	adds	r3, #20
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018bfa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018bfe:	2b0a      	cmp	r3, #10
 8018c00:	d105      	bne.n	8018c0e <etharp_find_entry+0x5e>
 8018c02:	7dfb      	ldrb	r3, [r7, #23]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d102      	bne.n	8018c0e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018c08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018c0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018c0c:	e098      	b.n	8018d40 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018c0e:	7dfb      	ldrb	r3, [r7, #23]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	f000 8095 	beq.w	8018d40 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018c16:	7dfb      	ldrb	r3, [r7, #23]
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	d009      	beq.n	8018c30 <etharp_find_entry+0x80>
 8018c1c:	7dfb      	ldrb	r3, [r7, #23]
 8018c1e:	2b01      	cmp	r3, #1
 8018c20:	d806      	bhi.n	8018c30 <etharp_find_entry+0x80>
 8018c22:	4b9a      	ldr	r3, [pc, #616]	@ (8018e8c <etharp_find_entry+0x2dc>)
 8018c24:	f240 1223 	movw	r2, #291	@ 0x123
 8018c28:	4999      	ldr	r1, [pc, #612]	@ (8018e90 <etharp_find_entry+0x2e0>)
 8018c2a:	489a      	ldr	r0, [pc, #616]	@ (8018e94 <etharp_find_entry+0x2e4>)
 8018c2c:	f003 fa78 	bl	801c120 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d020      	beq.n	8018c78 <etharp_find_entry+0xc8>
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	6819      	ldr	r1, [r3, #0]
 8018c3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018c3e:	4892      	ldr	r0, [pc, #584]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018c40:	4613      	mov	r3, r2
 8018c42:	005b      	lsls	r3, r3, #1
 8018c44:	4413      	add	r3, r2
 8018c46:	00db      	lsls	r3, r3, #3
 8018c48:	4403      	add	r3, r0
 8018c4a:	3304      	adds	r3, #4
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	4299      	cmp	r1, r3
 8018c50:	d112      	bne.n	8018c78 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d00c      	beq.n	8018c72 <etharp_find_entry+0xc2>
 8018c58:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018c5c:	498a      	ldr	r1, [pc, #552]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018c5e:	4613      	mov	r3, r2
 8018c60:	005b      	lsls	r3, r3, #1
 8018c62:	4413      	add	r3, r2
 8018c64:	00db      	lsls	r3, r3, #3
 8018c66:	440b      	add	r3, r1
 8018c68:	3308      	adds	r3, #8
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d102      	bne.n	8018c78 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018c72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018c76:	e103      	b.n	8018e80 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018c78:	7dfb      	ldrb	r3, [r7, #23]
 8018c7a:	2b01      	cmp	r3, #1
 8018c7c:	d140      	bne.n	8018d00 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018c7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018c82:	4981      	ldr	r1, [pc, #516]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018c84:	4613      	mov	r3, r2
 8018c86:	005b      	lsls	r3, r3, #1
 8018c88:	4413      	add	r3, r2
 8018c8a:	00db      	lsls	r3, r3, #3
 8018c8c:	440b      	add	r3, r1
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d01a      	beq.n	8018cca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018c94:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018c98:	497b      	ldr	r1, [pc, #492]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018c9a:	4613      	mov	r3, r2
 8018c9c:	005b      	lsls	r3, r3, #1
 8018c9e:	4413      	add	r3, r2
 8018ca0:	00db      	lsls	r3, r3, #3
 8018ca2:	440b      	add	r3, r1
 8018ca4:	3312      	adds	r3, #18
 8018ca6:	881b      	ldrh	r3, [r3, #0]
 8018ca8:	8bba      	ldrh	r2, [r7, #28]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d848      	bhi.n	8018d40 <etharp_find_entry+0x190>
            old_queue = i;
 8018cae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018cb0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018cb2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018cb6:	4974      	ldr	r1, [pc, #464]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018cb8:	4613      	mov	r3, r2
 8018cba:	005b      	lsls	r3, r3, #1
 8018cbc:	4413      	add	r3, r2
 8018cbe:	00db      	lsls	r3, r3, #3
 8018cc0:	440b      	add	r3, r1
 8018cc2:	3312      	adds	r3, #18
 8018cc4:	881b      	ldrh	r3, [r3, #0]
 8018cc6:	83bb      	strh	r3, [r7, #28]
 8018cc8:	e03a      	b.n	8018d40 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018cca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018cce:	496e      	ldr	r1, [pc, #440]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	005b      	lsls	r3, r3, #1
 8018cd4:	4413      	add	r3, r2
 8018cd6:	00db      	lsls	r3, r3, #3
 8018cd8:	440b      	add	r3, r1
 8018cda:	3312      	adds	r3, #18
 8018cdc:	881b      	ldrh	r3, [r3, #0]
 8018cde:	8b7a      	ldrh	r2, [r7, #26]
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	d82d      	bhi.n	8018d40 <etharp_find_entry+0x190>
            old_pending = i;
 8018ce4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018ce6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8018ce8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018cec:	4966      	ldr	r1, [pc, #408]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018cee:	4613      	mov	r3, r2
 8018cf0:	005b      	lsls	r3, r3, #1
 8018cf2:	4413      	add	r3, r2
 8018cf4:	00db      	lsls	r3, r3, #3
 8018cf6:	440b      	add	r3, r1
 8018cf8:	3312      	adds	r3, #18
 8018cfa:	881b      	ldrh	r3, [r3, #0]
 8018cfc:	837b      	strh	r3, [r7, #26]
 8018cfe:	e01f      	b.n	8018d40 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018d00:	7dfb      	ldrb	r3, [r7, #23]
 8018d02:	2b01      	cmp	r3, #1
 8018d04:	d91c      	bls.n	8018d40 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8018d06:	7dfb      	ldrb	r3, [r7, #23]
 8018d08:	2b04      	cmp	r3, #4
 8018d0a:	d819      	bhi.n	8018d40 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018d0c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018d10:	495d      	ldr	r1, [pc, #372]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018d12:	4613      	mov	r3, r2
 8018d14:	005b      	lsls	r3, r3, #1
 8018d16:	4413      	add	r3, r2
 8018d18:	00db      	lsls	r3, r3, #3
 8018d1a:	440b      	add	r3, r1
 8018d1c:	3312      	adds	r3, #18
 8018d1e:	881b      	ldrh	r3, [r3, #0]
 8018d20:	8b3a      	ldrh	r2, [r7, #24]
 8018d22:	429a      	cmp	r2, r3
 8018d24:	d80c      	bhi.n	8018d40 <etharp_find_entry+0x190>
            old_stable = i;
 8018d26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018d28:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8018d2a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018d2e:	4956      	ldr	r1, [pc, #344]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018d30:	4613      	mov	r3, r2
 8018d32:	005b      	lsls	r3, r3, #1
 8018d34:	4413      	add	r3, r2
 8018d36:	00db      	lsls	r3, r3, #3
 8018d38:	440b      	add	r3, r1
 8018d3a:	3312      	adds	r3, #18
 8018d3c:	881b      	ldrh	r3, [r3, #0]
 8018d3e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018d40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018d42:	3301      	adds	r3, #1
 8018d44:	b29b      	uxth	r3, r3
 8018d46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018d48:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018d4c:	2b09      	cmp	r3, #9
 8018d4e:	f77f af49 	ble.w	8018be4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018d52:	7afb      	ldrb	r3, [r7, #11]
 8018d54:	f003 0302 	and.w	r3, r3, #2
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d108      	bne.n	8018d6e <etharp_find_entry+0x1be>
 8018d5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018d60:	2b0a      	cmp	r3, #10
 8018d62:	d107      	bne.n	8018d74 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018d64:	7afb      	ldrb	r3, [r7, #11]
 8018d66:	f003 0301 	and.w	r3, r3, #1
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d102      	bne.n	8018d74 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d72:	e085      	b.n	8018e80 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018d74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018d78:	2b09      	cmp	r3, #9
 8018d7a:	dc02      	bgt.n	8018d82 <etharp_find_entry+0x1d2>
    i = empty;
 8018d7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018d80:	e039      	b.n	8018df6 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018d82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018d86:	2b09      	cmp	r3, #9
 8018d88:	dc14      	bgt.n	8018db4 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 8018d8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018d8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018d8e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018d92:	493d      	ldr	r1, [pc, #244]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018d94:	4613      	mov	r3, r2
 8018d96:	005b      	lsls	r3, r3, #1
 8018d98:	4413      	add	r3, r2
 8018d9a:	00db      	lsls	r3, r3, #3
 8018d9c:	440b      	add	r3, r1
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d018      	beq.n	8018dd6 <etharp_find_entry+0x226>
 8018da4:	4b39      	ldr	r3, [pc, #228]	@ (8018e8c <etharp_find_entry+0x2dc>)
 8018da6:	f240 126d 	movw	r2, #365	@ 0x16d
 8018daa:	493b      	ldr	r1, [pc, #236]	@ (8018e98 <etharp_find_entry+0x2e8>)
 8018dac:	4839      	ldr	r0, [pc, #228]	@ (8018e94 <etharp_find_entry+0x2e4>)
 8018dae:	f003 f9b7 	bl	801c120 <iprintf>
 8018db2:	e010      	b.n	8018dd6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018db4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018db8:	2b09      	cmp	r3, #9
 8018dba:	dc02      	bgt.n	8018dc2 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 8018dbc:	8c3b      	ldrh	r3, [r7, #32]
 8018dbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018dc0:	e009      	b.n	8018dd6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018dc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018dc6:	2b09      	cmp	r3, #9
 8018dc8:	dc02      	bgt.n	8018dd0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018dca:	8bfb      	ldrh	r3, [r7, #30]
 8018dcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018dce:	e002      	b.n	8018dd6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd4:	e054      	b.n	8018e80 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018dd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018dda:	2b09      	cmp	r3, #9
 8018ddc:	dd06      	ble.n	8018dec <etharp_find_entry+0x23c>
 8018dde:	4b2b      	ldr	r3, [pc, #172]	@ (8018e8c <etharp_find_entry+0x2dc>)
 8018de0:	f240 127f 	movw	r2, #383	@ 0x17f
 8018de4:	492d      	ldr	r1, [pc, #180]	@ (8018e9c <etharp_find_entry+0x2ec>)
 8018de6:	482b      	ldr	r0, [pc, #172]	@ (8018e94 <etharp_find_entry+0x2e4>)
 8018de8:	f003 f99a 	bl	801c120 <iprintf>
    etharp_free_entry(i);
 8018dec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018df0:	4618      	mov	r0, r3
 8018df2:	f7ff fdd1 	bl	8018998 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018df6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018dfa:	2b09      	cmp	r3, #9
 8018dfc:	dd06      	ble.n	8018e0c <etharp_find_entry+0x25c>
 8018dfe:	4b23      	ldr	r3, [pc, #140]	@ (8018e8c <etharp_find_entry+0x2dc>)
 8018e00:	f240 1283 	movw	r2, #387	@ 0x183
 8018e04:	4925      	ldr	r1, [pc, #148]	@ (8018e9c <etharp_find_entry+0x2ec>)
 8018e06:	4823      	ldr	r0, [pc, #140]	@ (8018e94 <etharp_find_entry+0x2e4>)
 8018e08:	f003 f98a 	bl	801c120 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018e0c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018e10:	491d      	ldr	r1, [pc, #116]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018e12:	4613      	mov	r3, r2
 8018e14:	005b      	lsls	r3, r3, #1
 8018e16:	4413      	add	r3, r2
 8018e18:	00db      	lsls	r3, r3, #3
 8018e1a:	440b      	add	r3, r1
 8018e1c:	3314      	adds	r3, #20
 8018e1e:	781b      	ldrb	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d006      	beq.n	8018e32 <etharp_find_entry+0x282>
 8018e24:	4b19      	ldr	r3, [pc, #100]	@ (8018e8c <etharp_find_entry+0x2dc>)
 8018e26:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018e2a:	491d      	ldr	r1, [pc, #116]	@ (8018ea0 <etharp_find_entry+0x2f0>)
 8018e2c:	4819      	ldr	r0, [pc, #100]	@ (8018e94 <etharp_find_entry+0x2e4>)
 8018e2e:	f003 f977 	bl	801c120 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d00b      	beq.n	8018e50 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018e38:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	6819      	ldr	r1, [r3, #0]
 8018e40:	4811      	ldr	r0, [pc, #68]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018e42:	4613      	mov	r3, r2
 8018e44:	005b      	lsls	r3, r3, #1
 8018e46:	4413      	add	r3, r2
 8018e48:	00db      	lsls	r3, r3, #3
 8018e4a:	4403      	add	r3, r0
 8018e4c:	3304      	adds	r3, #4
 8018e4e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018e50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018e54:	490c      	ldr	r1, [pc, #48]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018e56:	4613      	mov	r3, r2
 8018e58:	005b      	lsls	r3, r3, #1
 8018e5a:	4413      	add	r3, r2
 8018e5c:	00db      	lsls	r3, r3, #3
 8018e5e:	440b      	add	r3, r1
 8018e60:	3312      	adds	r3, #18
 8018e62:	2200      	movs	r2, #0
 8018e64:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018e66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8018e6a:	4907      	ldr	r1, [pc, #28]	@ (8018e88 <etharp_find_entry+0x2d8>)
 8018e6c:	4613      	mov	r3, r2
 8018e6e:	005b      	lsls	r3, r3, #1
 8018e70:	4413      	add	r3, r2
 8018e72:	00db      	lsls	r3, r3, #3
 8018e74:	440b      	add	r3, r1
 8018e76:	3308      	adds	r3, #8
 8018e78:	687a      	ldr	r2, [r7, #4]
 8018e7a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018e7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3728      	adds	r7, #40	@ 0x28
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	20013da8 	.word	0x20013da8
 8018e8c:	080215a8 	.word	0x080215a8
 8018e90:	080215e0 	.word	0x080215e0
 8018e94:	08021620 	.word	0x08021620
 8018e98:	08021648 	.word	0x08021648
 8018e9c:	08021660 	.word	0x08021660
 8018ea0:	08021674 	.word	0x08021674

08018ea4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b088      	sub	sp, #32
 8018ea8:	af02      	add	r7, sp, #8
 8018eaa:	60f8      	str	r0, [r7, #12]
 8018eac:	60b9      	str	r1, [r7, #8]
 8018eae:	607a      	str	r2, [r7, #4]
 8018eb0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018eb8:	2b06      	cmp	r3, #6
 8018eba:	d006      	beq.n	8018eca <etharp_update_arp_entry+0x26>
 8018ebc:	4b58      	ldr	r3, [pc, #352]	@ (8019020 <etharp_update_arp_entry+0x17c>)
 8018ebe:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018ec2:	4958      	ldr	r1, [pc, #352]	@ (8019024 <etharp_update_arp_entry+0x180>)
 8018ec4:	4858      	ldr	r0, [pc, #352]	@ (8019028 <etharp_update_arp_entry+0x184>)
 8018ec6:	f003 f92b 	bl	801c120 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d012      	beq.n	8018ef6 <etharp_update_arp_entry+0x52>
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d00e      	beq.n	8018ef6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	68f9      	ldr	r1, [r7, #12]
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f001 fa00 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 8018ee4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d105      	bne.n	8018ef6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018eea:	68bb      	ldr	r3, [r7, #8]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ef2:	2be0      	cmp	r3, #224	@ 0xe0
 8018ef4:	d102      	bne.n	8018efc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018ef6:	f06f 030f 	mvn.w	r3, #15
 8018efa:	e08c      	b.n	8019016 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018efc:	78fb      	ldrb	r3, [r7, #3]
 8018efe:	68fa      	ldr	r2, [r7, #12]
 8018f00:	4619      	mov	r1, r3
 8018f02:	68b8      	ldr	r0, [r7, #8]
 8018f04:	f7ff fe54 	bl	8018bb0 <etharp_find_entry>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018f0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	da02      	bge.n	8018f1a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018f14:	8afb      	ldrh	r3, [r7, #22]
 8018f16:	b25b      	sxtb	r3, r3
 8018f18:	e07d      	b.n	8019016 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8018f1a:	78fb      	ldrb	r3, [r7, #3]
 8018f1c:	f003 0304 	and.w	r3, r3, #4
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d00b      	beq.n	8018f3c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8018f24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f28:	4940      	ldr	r1, [pc, #256]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018f2a:	4613      	mov	r3, r2
 8018f2c:	005b      	lsls	r3, r3, #1
 8018f2e:	4413      	add	r3, r2
 8018f30:	00db      	lsls	r3, r3, #3
 8018f32:	440b      	add	r3, r1
 8018f34:	3314      	adds	r3, #20
 8018f36:	2205      	movs	r2, #5
 8018f38:	701a      	strb	r2, [r3, #0]
 8018f3a:	e019      	b.n	8018f70 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8018f3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f40:	493a      	ldr	r1, [pc, #232]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018f42:	4613      	mov	r3, r2
 8018f44:	005b      	lsls	r3, r3, #1
 8018f46:	4413      	add	r3, r2
 8018f48:	00db      	lsls	r3, r3, #3
 8018f4a:	440b      	add	r3, r1
 8018f4c:	3314      	adds	r3, #20
 8018f4e:	781b      	ldrb	r3, [r3, #0]
 8018f50:	2b05      	cmp	r3, #5
 8018f52:	d102      	bne.n	8018f5a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8018f54:	f06f 0305 	mvn.w	r3, #5
 8018f58:	e05d      	b.n	8019016 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018f5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f5e:	4933      	ldr	r1, [pc, #204]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018f60:	4613      	mov	r3, r2
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	4413      	add	r3, r2
 8018f66:	00db      	lsls	r3, r3, #3
 8018f68:	440b      	add	r3, r1
 8018f6a:	3314      	adds	r3, #20
 8018f6c:	2202      	movs	r2, #2
 8018f6e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018f70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f74:	492d      	ldr	r1, [pc, #180]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018f76:	4613      	mov	r3, r2
 8018f78:	005b      	lsls	r3, r3, #1
 8018f7a:	4413      	add	r3, r2
 8018f7c:	00db      	lsls	r3, r3, #3
 8018f7e:	440b      	add	r3, r1
 8018f80:	3308      	adds	r3, #8
 8018f82:	68fa      	ldr	r2, [r7, #12]
 8018f84:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018f86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	4413      	add	r3, r2
 8018f90:	00db      	lsls	r3, r3, #3
 8018f92:	3308      	adds	r3, #8
 8018f94:	4a25      	ldr	r2, [pc, #148]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018f96:	4413      	add	r3, r2
 8018f98:	3304      	adds	r3, #4
 8018f9a:	2206      	movs	r2, #6
 8018f9c:	6879      	ldr	r1, [r7, #4]
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f003 fadd 	bl	801c55e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018fa4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fa8:	4920      	ldr	r1, [pc, #128]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018faa:	4613      	mov	r3, r2
 8018fac:	005b      	lsls	r3, r3, #1
 8018fae:	4413      	add	r3, r2
 8018fb0:	00db      	lsls	r3, r3, #3
 8018fb2:	440b      	add	r3, r1
 8018fb4:	3312      	adds	r3, #18
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018fba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fbe:	491b      	ldr	r1, [pc, #108]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	005b      	lsls	r3, r3, #1
 8018fc4:	4413      	add	r3, r2
 8018fc6:	00db      	lsls	r3, r3, #3
 8018fc8:	440b      	add	r3, r1
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d021      	beq.n	8019014 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8018fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fd4:	4915      	ldr	r1, [pc, #84]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018fd6:	4613      	mov	r3, r2
 8018fd8:	005b      	lsls	r3, r3, #1
 8018fda:	4413      	add	r3, r2
 8018fdc:	00db      	lsls	r3, r3, #3
 8018fde:	440b      	add	r3, r1
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fe8:	4910      	ldr	r1, [pc, #64]	@ (801902c <etharp_update_arp_entry+0x188>)
 8018fea:	4613      	mov	r3, r2
 8018fec:	005b      	lsls	r3, r3, #1
 8018fee:	4413      	add	r3, r2
 8018ff0:	00db      	lsls	r3, r3, #3
 8018ff2:	440b      	add	r3, r1
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8018ffe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019002:	9300      	str	r3, [sp, #0]
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6939      	ldr	r1, [r7, #16]
 8019008:	68f8      	ldr	r0, [r7, #12]
 801900a:	f002 f889 	bl	801b120 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801900e:	6938      	ldr	r0, [r7, #16]
 8019010:	f7f7 fa48 	bl	80104a4 <pbuf_free>
  }
  return ERR_OK;
 8019014:	2300      	movs	r3, #0
}
 8019016:	4618      	mov	r0, r3
 8019018:	3718      	adds	r7, #24
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	080215a8 	.word	0x080215a8
 8019024:	080216a0 	.word	0x080216a0
 8019028:	08021620 	.word	0x08021620
 801902c:	20013da8 	.word	0x20013da8

08019030 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b084      	sub	sp, #16
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f000 fe2c 	bl	8019c98 <ip4_route>
 8019040:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d102      	bne.n	801904e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8019048:	f06f 0303 	mvn.w	r3, #3
 801904c:	e006      	b.n	801905c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 801904e:	2305      	movs	r3, #5
 8019050:	683a      	ldr	r2, [r7, #0]
 8019052:	6879      	ldr	r1, [r7, #4]
 8019054:	68f8      	ldr	r0, [r7, #12]
 8019056:	f7ff ff25 	bl	8018ea4 <etharp_update_arp_entry>
 801905a:	4603      	mov	r3, r0
}
 801905c:	4618      	mov	r0, r3
 801905e:	3710      	adds	r7, #16
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}

08019064 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b084      	sub	sp, #16
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801906c:	2300      	movs	r3, #0
 801906e:	60fb      	str	r3, [r7, #12]
 8019070:	e01e      	b.n	80190b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019072:	4913      	ldr	r1, [pc, #76]	@ (80190c0 <etharp_cleanup_netif+0x5c>)
 8019074:	68fa      	ldr	r2, [r7, #12]
 8019076:	4613      	mov	r3, r2
 8019078:	005b      	lsls	r3, r3, #1
 801907a:	4413      	add	r3, r2
 801907c:	00db      	lsls	r3, r3, #3
 801907e:	440b      	add	r3, r1
 8019080:	3314      	adds	r3, #20
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019086:	7afb      	ldrb	r3, [r7, #11]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d00e      	beq.n	80190aa <etharp_cleanup_netif+0x46>
 801908c:	490c      	ldr	r1, [pc, #48]	@ (80190c0 <etharp_cleanup_netif+0x5c>)
 801908e:	68fa      	ldr	r2, [r7, #12]
 8019090:	4613      	mov	r3, r2
 8019092:	005b      	lsls	r3, r3, #1
 8019094:	4413      	add	r3, r2
 8019096:	00db      	lsls	r3, r3, #3
 8019098:	440b      	add	r3, r1
 801909a:	3308      	adds	r3, #8
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	687a      	ldr	r2, [r7, #4]
 80190a0:	429a      	cmp	r2, r3
 80190a2:	d102      	bne.n	80190aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80190a4:	68f8      	ldr	r0, [r7, #12]
 80190a6:	f7ff fc77 	bl	8018998 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	3301      	adds	r3, #1
 80190ae:	60fb      	str	r3, [r7, #12]
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	2b09      	cmp	r3, #9
 80190b4:	dddd      	ble.n	8019072 <etharp_cleanup_netif+0xe>
    }
  }
}
 80190b6:	bf00      	nop
 80190b8:	bf00      	nop
 80190ba:	3710      	adds	r7, #16
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	20013da8 	.word	0x20013da8

080190c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80190c4:	b5b0      	push	{r4, r5, r7, lr}
 80190c6:	b08a      	sub	sp, #40	@ 0x28
 80190c8:	af04      	add	r7, sp, #16
 80190ca:	6078      	str	r0, [r7, #4]
 80190cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d107      	bne.n	80190e4 <etharp_input+0x20>
 80190d4:	4b3f      	ldr	r3, [pc, #252]	@ (80191d4 <etharp_input+0x110>)
 80190d6:	f240 228a 	movw	r2, #650	@ 0x28a
 80190da:	493f      	ldr	r1, [pc, #252]	@ (80191d8 <etharp_input+0x114>)
 80190dc:	483f      	ldr	r0, [pc, #252]	@ (80191dc <etharp_input+0x118>)
 80190de:	f003 f81f 	bl	801c120 <iprintf>
 80190e2:	e074      	b.n	80191ce <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	685b      	ldr	r3, [r3, #4]
 80190e8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80190ea:	697b      	ldr	r3, [r7, #20]
 80190ec:	881b      	ldrh	r3, [r3, #0]
 80190ee:	b29b      	uxth	r3, r3
 80190f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80190f4:	d10c      	bne.n	8019110 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80190fa:	2b06      	cmp	r3, #6
 80190fc:	d108      	bne.n	8019110 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019102:	2b04      	cmp	r3, #4
 8019104:	d104      	bne.n	8019110 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	885b      	ldrh	r3, [r3, #2]
 801910a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801910c:	2b08      	cmp	r3, #8
 801910e:	d003      	beq.n	8019118 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019110:	6878      	ldr	r0, [r7, #4]
 8019112:	f7f7 f9c7 	bl	80104a4 <pbuf_free>
    return;
 8019116:	e05a      	b.n	80191ce <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	330e      	adds	r3, #14
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019120:	697b      	ldr	r3, [r7, #20]
 8019122:	3318      	adds	r3, #24
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	3304      	adds	r3, #4
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d102      	bne.n	8019138 <etharp_input+0x74>
    for_us = 0;
 8019132:	2300      	movs	r3, #0
 8019134:	74fb      	strb	r3, [r7, #19]
 8019136:	e009      	b.n	801914c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019138:	68ba      	ldr	r2, [r7, #8]
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	3304      	adds	r3, #4
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	429a      	cmp	r2, r3
 8019142:	bf0c      	ite	eq
 8019144:	2301      	moveq	r3, #1
 8019146:	2300      	movne	r3, #0
 8019148:	b2db      	uxtb	r3, r3
 801914a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801914c:	697b      	ldr	r3, [r7, #20]
 801914e:	f103 0208 	add.w	r2, r3, #8
 8019152:	7cfb      	ldrb	r3, [r7, #19]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d001      	beq.n	801915c <etharp_input+0x98>
 8019158:	2301      	movs	r3, #1
 801915a:	e000      	b.n	801915e <etharp_input+0x9a>
 801915c:	2302      	movs	r3, #2
 801915e:	f107 010c 	add.w	r1, r7, #12
 8019162:	6838      	ldr	r0, [r7, #0]
 8019164:	f7ff fe9e 	bl	8018ea4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	88db      	ldrh	r3, [r3, #6]
 801916c:	b29b      	uxth	r3, r3
 801916e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019172:	d003      	beq.n	801917c <etharp_input+0xb8>
 8019174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019178:	d01e      	beq.n	80191b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801917a:	e025      	b.n	80191c8 <etharp_input+0x104>
      if (for_us) {
 801917c:	7cfb      	ldrb	r3, [r7, #19]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d021      	beq.n	80191c6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801918e:	683b      	ldr	r3, [r7, #0]
 8019190:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019198:	697a      	ldr	r2, [r7, #20]
 801919a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801919c:	2102      	movs	r1, #2
 801919e:	9103      	str	r1, [sp, #12]
 80191a0:	f107 010c 	add.w	r1, r7, #12
 80191a4:	9102      	str	r1, [sp, #8]
 80191a6:	9201      	str	r2, [sp, #4]
 80191a8:	9300      	str	r3, [sp, #0]
 80191aa:	462b      	mov	r3, r5
 80191ac:	4622      	mov	r2, r4
 80191ae:	4601      	mov	r1, r0
 80191b0:	6838      	ldr	r0, [r7, #0]
 80191b2:	f000 faef 	bl	8019794 <etharp_raw>
      break;
 80191b6:	e006      	b.n	80191c6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80191b8:	f107 030c 	add.w	r3, r7, #12
 80191bc:	4619      	mov	r1, r3
 80191be:	6838      	ldr	r0, [r7, #0]
 80191c0:	f7fe f97c 	bl	80174bc <dhcp_arp_reply>
      break;
 80191c4:	e000      	b.n	80191c8 <etharp_input+0x104>
      break;
 80191c6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80191c8:	6878      	ldr	r0, [r7, #4]
 80191ca:	f7f7 f96b 	bl	80104a4 <pbuf_free>
}
 80191ce:	3718      	adds	r7, #24
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bdb0      	pop	{r4, r5, r7, pc}
 80191d4:	080215a8 	.word	0x080215a8
 80191d8:	080216f8 	.word	0x080216f8
 80191dc:	08021620 	.word	0x08021620

080191e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b086      	sub	sp, #24
 80191e4:	af02      	add	r7, sp, #8
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	60b9      	str	r1, [r7, #8]
 80191ea:	4613      	mov	r3, r2
 80191ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80191ee:	79fa      	ldrb	r2, [r7, #7]
 80191f0:	4944      	ldr	r1, [pc, #272]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 80191f2:	4613      	mov	r3, r2
 80191f4:	005b      	lsls	r3, r3, #1
 80191f6:	4413      	add	r3, r2
 80191f8:	00db      	lsls	r3, r3, #3
 80191fa:	440b      	add	r3, r1
 80191fc:	3314      	adds	r3, #20
 80191fe:	781b      	ldrb	r3, [r3, #0]
 8019200:	2b01      	cmp	r3, #1
 8019202:	d806      	bhi.n	8019212 <etharp_output_to_arp_index+0x32>
 8019204:	4b40      	ldr	r3, [pc, #256]	@ (8019308 <etharp_output_to_arp_index+0x128>)
 8019206:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801920a:	4940      	ldr	r1, [pc, #256]	@ (801930c <etharp_output_to_arp_index+0x12c>)
 801920c:	4840      	ldr	r0, [pc, #256]	@ (8019310 <etharp_output_to_arp_index+0x130>)
 801920e:	f002 ff87 	bl	801c120 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019212:	79fa      	ldrb	r2, [r7, #7]
 8019214:	493b      	ldr	r1, [pc, #236]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 8019216:	4613      	mov	r3, r2
 8019218:	005b      	lsls	r3, r3, #1
 801921a:	4413      	add	r3, r2
 801921c:	00db      	lsls	r3, r3, #3
 801921e:	440b      	add	r3, r1
 8019220:	3314      	adds	r3, #20
 8019222:	781b      	ldrb	r3, [r3, #0]
 8019224:	2b02      	cmp	r3, #2
 8019226:	d153      	bne.n	80192d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019228:	79fa      	ldrb	r2, [r7, #7]
 801922a:	4936      	ldr	r1, [pc, #216]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 801922c:	4613      	mov	r3, r2
 801922e:	005b      	lsls	r3, r3, #1
 8019230:	4413      	add	r3, r2
 8019232:	00db      	lsls	r3, r3, #3
 8019234:	440b      	add	r3, r1
 8019236:	3312      	adds	r3, #18
 8019238:	881b      	ldrh	r3, [r3, #0]
 801923a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801923e:	d919      	bls.n	8019274 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019240:	79fa      	ldrb	r2, [r7, #7]
 8019242:	4613      	mov	r3, r2
 8019244:	005b      	lsls	r3, r3, #1
 8019246:	4413      	add	r3, r2
 8019248:	00db      	lsls	r3, r3, #3
 801924a:	4a2e      	ldr	r2, [pc, #184]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 801924c:	4413      	add	r3, r2
 801924e:	3304      	adds	r3, #4
 8019250:	4619      	mov	r1, r3
 8019252:	68f8      	ldr	r0, [r7, #12]
 8019254:	f000 fb4c 	bl	80198f0 <etharp_request>
 8019258:	4603      	mov	r3, r0
 801925a:	2b00      	cmp	r3, #0
 801925c:	d138      	bne.n	80192d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801925e:	79fa      	ldrb	r2, [r7, #7]
 8019260:	4928      	ldr	r1, [pc, #160]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 8019262:	4613      	mov	r3, r2
 8019264:	005b      	lsls	r3, r3, #1
 8019266:	4413      	add	r3, r2
 8019268:	00db      	lsls	r3, r3, #3
 801926a:	440b      	add	r3, r1
 801926c:	3314      	adds	r3, #20
 801926e:	2203      	movs	r2, #3
 8019270:	701a      	strb	r2, [r3, #0]
 8019272:	e02d      	b.n	80192d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019274:	79fa      	ldrb	r2, [r7, #7]
 8019276:	4923      	ldr	r1, [pc, #140]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 8019278:	4613      	mov	r3, r2
 801927a:	005b      	lsls	r3, r3, #1
 801927c:	4413      	add	r3, r2
 801927e:	00db      	lsls	r3, r3, #3
 8019280:	440b      	add	r3, r1
 8019282:	3312      	adds	r3, #18
 8019284:	881b      	ldrh	r3, [r3, #0]
 8019286:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801928a:	d321      	bcc.n	80192d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801928c:	79fa      	ldrb	r2, [r7, #7]
 801928e:	4613      	mov	r3, r2
 8019290:	005b      	lsls	r3, r3, #1
 8019292:	4413      	add	r3, r2
 8019294:	00db      	lsls	r3, r3, #3
 8019296:	4a1b      	ldr	r2, [pc, #108]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 8019298:	4413      	add	r3, r2
 801929a:	1d19      	adds	r1, r3, #4
 801929c:	79fa      	ldrb	r2, [r7, #7]
 801929e:	4613      	mov	r3, r2
 80192a0:	005b      	lsls	r3, r3, #1
 80192a2:	4413      	add	r3, r2
 80192a4:	00db      	lsls	r3, r3, #3
 80192a6:	3308      	adds	r3, #8
 80192a8:	4a16      	ldr	r2, [pc, #88]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 80192aa:	4413      	add	r3, r2
 80192ac:	3304      	adds	r3, #4
 80192ae:	461a      	mov	r2, r3
 80192b0:	68f8      	ldr	r0, [r7, #12]
 80192b2:	f000 fafb 	bl	80198ac <etharp_request_dst>
 80192b6:	4603      	mov	r3, r0
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d109      	bne.n	80192d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80192bc:	79fa      	ldrb	r2, [r7, #7]
 80192be:	4911      	ldr	r1, [pc, #68]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 80192c0:	4613      	mov	r3, r2
 80192c2:	005b      	lsls	r3, r3, #1
 80192c4:	4413      	add	r3, r2
 80192c6:	00db      	lsls	r3, r3, #3
 80192c8:	440b      	add	r3, r1
 80192ca:	3314      	adds	r3, #20
 80192cc:	2203      	movs	r2, #3
 80192ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80192d6:	79fa      	ldrb	r2, [r7, #7]
 80192d8:	4613      	mov	r3, r2
 80192da:	005b      	lsls	r3, r3, #1
 80192dc:	4413      	add	r3, r2
 80192de:	00db      	lsls	r3, r3, #3
 80192e0:	3308      	adds	r3, #8
 80192e2:	4a08      	ldr	r2, [pc, #32]	@ (8019304 <etharp_output_to_arp_index+0x124>)
 80192e4:	4413      	add	r3, r2
 80192e6:	3304      	adds	r3, #4
 80192e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80192ec:	9200      	str	r2, [sp, #0]
 80192ee:	460a      	mov	r2, r1
 80192f0:	68b9      	ldr	r1, [r7, #8]
 80192f2:	68f8      	ldr	r0, [r7, #12]
 80192f4:	f001 ff14 	bl	801b120 <ethernet_output>
 80192f8:	4603      	mov	r3, r0
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3710      	adds	r7, #16
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}
 8019302:	bf00      	nop
 8019304:	20013da8 	.word	0x20013da8
 8019308:	080215a8 	.word	0x080215a8
 801930c:	08021718 	.word	0x08021718
 8019310:	08021620 	.word	0x08021620

08019314 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b08a      	sub	sp, #40	@ 0x28
 8019318:	af02      	add	r7, sp, #8
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d106      	bne.n	8019338 <etharp_output+0x24>
 801932a:	4b73      	ldr	r3, [pc, #460]	@ (80194f8 <etharp_output+0x1e4>)
 801932c:	f240 321e 	movw	r2, #798	@ 0x31e
 8019330:	4972      	ldr	r1, [pc, #456]	@ (80194fc <etharp_output+0x1e8>)
 8019332:	4873      	ldr	r0, [pc, #460]	@ (8019500 <etharp_output+0x1ec>)
 8019334:	f002 fef4 	bl	801c120 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019338:	68bb      	ldr	r3, [r7, #8]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d106      	bne.n	801934c <etharp_output+0x38>
 801933e:	4b6e      	ldr	r3, [pc, #440]	@ (80194f8 <etharp_output+0x1e4>)
 8019340:	f240 321f 	movw	r2, #799	@ 0x31f
 8019344:	496f      	ldr	r1, [pc, #444]	@ (8019504 <etharp_output+0x1f0>)
 8019346:	486e      	ldr	r0, [pc, #440]	@ (8019500 <etharp_output+0x1ec>)
 8019348:	f002 feea 	bl	801c120 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d106      	bne.n	8019360 <etharp_output+0x4c>
 8019352:	4b69      	ldr	r3, [pc, #420]	@ (80194f8 <etharp_output+0x1e4>)
 8019354:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8019358:	496b      	ldr	r1, [pc, #428]	@ (8019508 <etharp_output+0x1f4>)
 801935a:	4869      	ldr	r0, [pc, #420]	@ (8019500 <etharp_output+0x1ec>)
 801935c:	f002 fee0 	bl	801c120 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	68f9      	ldr	r1, [r7, #12]
 8019366:	4618      	mov	r0, r3
 8019368:	f000 ffbc 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 801936c:	4603      	mov	r3, r0
 801936e:	2b00      	cmp	r3, #0
 8019370:	d002      	beq.n	8019378 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019372:	4b66      	ldr	r3, [pc, #408]	@ (801950c <etharp_output+0x1f8>)
 8019374:	61fb      	str	r3, [r7, #28]
 8019376:	e0af      	b.n	80194d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019380:	2be0      	cmp	r3, #224	@ 0xe0
 8019382:	d118      	bne.n	80193b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019384:	2301      	movs	r3, #1
 8019386:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019388:	2300      	movs	r3, #0
 801938a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801938c:	235e      	movs	r3, #94	@ 0x5e
 801938e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	3301      	adds	r3, #1
 8019394:	781b      	ldrb	r3, [r3, #0]
 8019396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801939a:	b2db      	uxtb	r3, r3
 801939c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	3302      	adds	r3, #2
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	3303      	adds	r3, #3
 80193aa:	781b      	ldrb	r3, [r3, #0]
 80193ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80193ae:	f107 0310 	add.w	r3, r7, #16
 80193b2:	61fb      	str	r3, [r7, #28]
 80193b4:	e090      	b.n	80194d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681a      	ldr	r2, [r3, #0]
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	3304      	adds	r3, #4
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	405a      	eors	r2, r3
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	3308      	adds	r3, #8
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	4013      	ands	r3, r2
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d012      	beq.n	80193f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80193d4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80193d8:	4293      	cmp	r3, r2
 80193da:	d00b      	beq.n	80193f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	330c      	adds	r3, #12
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d003      	beq.n	80193ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	330c      	adds	r3, #12
 80193ea:	61bb      	str	r3, [r7, #24]
 80193ec:	e002      	b.n	80193f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80193ee:	f06f 0303 	mvn.w	r3, #3
 80193f2:	e07d      	b.n	80194f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80193f4:	4b46      	ldr	r3, [pc, #280]	@ (8019510 <etharp_output+0x1fc>)
 80193f6:	781b      	ldrb	r3, [r3, #0]
 80193f8:	4619      	mov	r1, r3
 80193fa:	4a46      	ldr	r2, [pc, #280]	@ (8019514 <etharp_output+0x200>)
 80193fc:	460b      	mov	r3, r1
 80193fe:	005b      	lsls	r3, r3, #1
 8019400:	440b      	add	r3, r1
 8019402:	00db      	lsls	r3, r3, #3
 8019404:	4413      	add	r3, r2
 8019406:	3314      	adds	r3, #20
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	2b01      	cmp	r3, #1
 801940c:	d925      	bls.n	801945a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801940e:	4b40      	ldr	r3, [pc, #256]	@ (8019510 <etharp_output+0x1fc>)
 8019410:	781b      	ldrb	r3, [r3, #0]
 8019412:	4619      	mov	r1, r3
 8019414:	4a3f      	ldr	r2, [pc, #252]	@ (8019514 <etharp_output+0x200>)
 8019416:	460b      	mov	r3, r1
 8019418:	005b      	lsls	r3, r3, #1
 801941a:	440b      	add	r3, r1
 801941c:	00db      	lsls	r3, r3, #3
 801941e:	4413      	add	r3, r2
 8019420:	3308      	adds	r3, #8
 8019422:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019424:	68fa      	ldr	r2, [r7, #12]
 8019426:	429a      	cmp	r2, r3
 8019428:	d117      	bne.n	801945a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801942a:	69bb      	ldr	r3, [r7, #24]
 801942c:	681a      	ldr	r2, [r3, #0]
 801942e:	4b38      	ldr	r3, [pc, #224]	@ (8019510 <etharp_output+0x1fc>)
 8019430:	781b      	ldrb	r3, [r3, #0]
 8019432:	4618      	mov	r0, r3
 8019434:	4937      	ldr	r1, [pc, #220]	@ (8019514 <etharp_output+0x200>)
 8019436:	4603      	mov	r3, r0
 8019438:	005b      	lsls	r3, r3, #1
 801943a:	4403      	add	r3, r0
 801943c:	00db      	lsls	r3, r3, #3
 801943e:	440b      	add	r3, r1
 8019440:	3304      	adds	r3, #4
 8019442:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019444:	429a      	cmp	r2, r3
 8019446:	d108      	bne.n	801945a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019448:	4b31      	ldr	r3, [pc, #196]	@ (8019510 <etharp_output+0x1fc>)
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	461a      	mov	r2, r3
 801944e:	68b9      	ldr	r1, [r7, #8]
 8019450:	68f8      	ldr	r0, [r7, #12]
 8019452:	f7ff fec5 	bl	80191e0 <etharp_output_to_arp_index>
 8019456:	4603      	mov	r3, r0
 8019458:	e04a      	b.n	80194f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801945a:	2300      	movs	r3, #0
 801945c:	75fb      	strb	r3, [r7, #23]
 801945e:	e031      	b.n	80194c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019460:	7dfa      	ldrb	r2, [r7, #23]
 8019462:	492c      	ldr	r1, [pc, #176]	@ (8019514 <etharp_output+0x200>)
 8019464:	4613      	mov	r3, r2
 8019466:	005b      	lsls	r3, r3, #1
 8019468:	4413      	add	r3, r2
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	440b      	add	r3, r1
 801946e:	3314      	adds	r3, #20
 8019470:	781b      	ldrb	r3, [r3, #0]
 8019472:	2b01      	cmp	r3, #1
 8019474:	d923      	bls.n	80194be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019476:	7dfa      	ldrb	r2, [r7, #23]
 8019478:	4926      	ldr	r1, [pc, #152]	@ (8019514 <etharp_output+0x200>)
 801947a:	4613      	mov	r3, r2
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4413      	add	r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	440b      	add	r3, r1
 8019484:	3308      	adds	r3, #8
 8019486:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019488:	68fa      	ldr	r2, [r7, #12]
 801948a:	429a      	cmp	r2, r3
 801948c:	d117      	bne.n	80194be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801948e:	69bb      	ldr	r3, [r7, #24]
 8019490:	6819      	ldr	r1, [r3, #0]
 8019492:	7dfa      	ldrb	r2, [r7, #23]
 8019494:	481f      	ldr	r0, [pc, #124]	@ (8019514 <etharp_output+0x200>)
 8019496:	4613      	mov	r3, r2
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	4413      	add	r3, r2
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	4403      	add	r3, r0
 80194a0:	3304      	adds	r3, #4
 80194a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80194a4:	4299      	cmp	r1, r3
 80194a6:	d10a      	bne.n	80194be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80194a8:	4a19      	ldr	r2, [pc, #100]	@ (8019510 <etharp_output+0x1fc>)
 80194aa:	7dfb      	ldrb	r3, [r7, #23]
 80194ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80194ae:	7dfb      	ldrb	r3, [r7, #23]
 80194b0:	461a      	mov	r2, r3
 80194b2:	68b9      	ldr	r1, [r7, #8]
 80194b4:	68f8      	ldr	r0, [r7, #12]
 80194b6:	f7ff fe93 	bl	80191e0 <etharp_output_to_arp_index>
 80194ba:	4603      	mov	r3, r0
 80194bc:	e018      	b.n	80194f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80194be:	7dfb      	ldrb	r3, [r7, #23]
 80194c0:	3301      	adds	r3, #1
 80194c2:	75fb      	strb	r3, [r7, #23]
 80194c4:	7dfb      	ldrb	r3, [r7, #23]
 80194c6:	2b09      	cmp	r3, #9
 80194c8:	d9ca      	bls.n	8019460 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80194ca:	68ba      	ldr	r2, [r7, #8]
 80194cc:	69b9      	ldr	r1, [r7, #24]
 80194ce:	68f8      	ldr	r0, [r7, #12]
 80194d0:	f000 f822 	bl	8019518 <etharp_query>
 80194d4:	4603      	mov	r3, r0
 80194d6:	e00b      	b.n	80194f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80194de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80194e2:	9300      	str	r3, [sp, #0]
 80194e4:	69fb      	ldr	r3, [r7, #28]
 80194e6:	68b9      	ldr	r1, [r7, #8]
 80194e8:	68f8      	ldr	r0, [r7, #12]
 80194ea:	f001 fe19 	bl	801b120 <ethernet_output>
 80194ee:	4603      	mov	r3, r0
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3720      	adds	r7, #32
 80194f4:	46bd      	mov	sp, r7
 80194f6:	bd80      	pop	{r7, pc}
 80194f8:	080215a8 	.word	0x080215a8
 80194fc:	080216f8 	.word	0x080216f8
 8019500:	08021620 	.word	0x08021620
 8019504:	08021748 	.word	0x08021748
 8019508:	080216e8 	.word	0x080216e8
 801950c:	0806da68 	.word	0x0806da68
 8019510:	20013e98 	.word	0x20013e98
 8019514:	20013da8 	.word	0x20013da8

08019518 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b08c      	sub	sp, #48	@ 0x30
 801951c:	af02      	add	r7, sp, #8
 801951e:	60f8      	str	r0, [r7, #12]
 8019520:	60b9      	str	r1, [r7, #8]
 8019522:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	332a      	adds	r3, #42	@ 0x2a
 8019528:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801952a:	23ff      	movs	r3, #255	@ 0xff
 801952c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8019530:	2300      	movs	r3, #0
 8019532:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019534:	68bb      	ldr	r3, [r7, #8]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	68f9      	ldr	r1, [r7, #12]
 801953a:	4618      	mov	r0, r3
 801953c:	f000 fed2 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 8019540:	4603      	mov	r3, r0
 8019542:	2b00      	cmp	r3, #0
 8019544:	d10c      	bne.n	8019560 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801954e:	2be0      	cmp	r3, #224	@ 0xe0
 8019550:	d006      	beq.n	8019560 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d003      	beq.n	8019560 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d102      	bne.n	8019566 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019560:	f06f 030f 	mvn.w	r3, #15
 8019564:	e101      	b.n	801976a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019566:	68fa      	ldr	r2, [r7, #12]
 8019568:	2101      	movs	r1, #1
 801956a:	68b8      	ldr	r0, [r7, #8]
 801956c:	f7ff fb20 	bl	8018bb0 <etharp_find_entry>
 8019570:	4603      	mov	r3, r0
 8019572:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019574:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019578:	2b00      	cmp	r3, #0
 801957a:	da02      	bge.n	8019582 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801957c:	8a7b      	ldrh	r3, [r7, #18]
 801957e:	b25b      	sxtb	r3, r3
 8019580:	e0f3      	b.n	801976a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019582:	8a7b      	ldrh	r3, [r7, #18]
 8019584:	2b7e      	cmp	r3, #126	@ 0x7e
 8019586:	d906      	bls.n	8019596 <etharp_query+0x7e>
 8019588:	4b7a      	ldr	r3, [pc, #488]	@ (8019774 <etharp_query+0x25c>)
 801958a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801958e:	497a      	ldr	r1, [pc, #488]	@ (8019778 <etharp_query+0x260>)
 8019590:	487a      	ldr	r0, [pc, #488]	@ (801977c <etharp_query+0x264>)
 8019592:	f002 fdc5 	bl	801c120 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019596:	8a7b      	ldrh	r3, [r7, #18]
 8019598:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801959a:	7c7a      	ldrb	r2, [r7, #17]
 801959c:	4978      	ldr	r1, [pc, #480]	@ (8019780 <etharp_query+0x268>)
 801959e:	4613      	mov	r3, r2
 80195a0:	005b      	lsls	r3, r3, #1
 80195a2:	4413      	add	r3, r2
 80195a4:	00db      	lsls	r3, r3, #3
 80195a6:	440b      	add	r3, r1
 80195a8:	3314      	adds	r3, #20
 80195aa:	781b      	ldrb	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d115      	bne.n	80195dc <etharp_query+0xc4>
    is_new_entry = 1;
 80195b0:	2301      	movs	r3, #1
 80195b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80195b4:	7c7a      	ldrb	r2, [r7, #17]
 80195b6:	4972      	ldr	r1, [pc, #456]	@ (8019780 <etharp_query+0x268>)
 80195b8:	4613      	mov	r3, r2
 80195ba:	005b      	lsls	r3, r3, #1
 80195bc:	4413      	add	r3, r2
 80195be:	00db      	lsls	r3, r3, #3
 80195c0:	440b      	add	r3, r1
 80195c2:	3314      	adds	r3, #20
 80195c4:	2201      	movs	r2, #1
 80195c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80195c8:	7c7a      	ldrb	r2, [r7, #17]
 80195ca:	496d      	ldr	r1, [pc, #436]	@ (8019780 <etharp_query+0x268>)
 80195cc:	4613      	mov	r3, r2
 80195ce:	005b      	lsls	r3, r3, #1
 80195d0:	4413      	add	r3, r2
 80195d2:	00db      	lsls	r3, r3, #3
 80195d4:	440b      	add	r3, r1
 80195d6:	3308      	adds	r3, #8
 80195d8:	68fa      	ldr	r2, [r7, #12]
 80195da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80195dc:	7c7a      	ldrb	r2, [r7, #17]
 80195de:	4968      	ldr	r1, [pc, #416]	@ (8019780 <etharp_query+0x268>)
 80195e0:	4613      	mov	r3, r2
 80195e2:	005b      	lsls	r3, r3, #1
 80195e4:	4413      	add	r3, r2
 80195e6:	00db      	lsls	r3, r3, #3
 80195e8:	440b      	add	r3, r1
 80195ea:	3314      	adds	r3, #20
 80195ec:	781b      	ldrb	r3, [r3, #0]
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d011      	beq.n	8019616 <etharp_query+0xfe>
 80195f2:	7c7a      	ldrb	r2, [r7, #17]
 80195f4:	4962      	ldr	r1, [pc, #392]	@ (8019780 <etharp_query+0x268>)
 80195f6:	4613      	mov	r3, r2
 80195f8:	005b      	lsls	r3, r3, #1
 80195fa:	4413      	add	r3, r2
 80195fc:	00db      	lsls	r3, r3, #3
 80195fe:	440b      	add	r3, r1
 8019600:	3314      	adds	r3, #20
 8019602:	781b      	ldrb	r3, [r3, #0]
 8019604:	2b01      	cmp	r3, #1
 8019606:	d806      	bhi.n	8019616 <etharp_query+0xfe>
 8019608:	4b5a      	ldr	r3, [pc, #360]	@ (8019774 <etharp_query+0x25c>)
 801960a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801960e:	495d      	ldr	r1, [pc, #372]	@ (8019784 <etharp_query+0x26c>)
 8019610:	485a      	ldr	r0, [pc, #360]	@ (801977c <etharp_query+0x264>)
 8019612:	f002 fd85 	bl	801c120 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019616:	6a3b      	ldr	r3, [r7, #32]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d102      	bne.n	8019622 <etharp_query+0x10a>
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d10c      	bne.n	801963c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019622:	68b9      	ldr	r1, [r7, #8]
 8019624:	68f8      	ldr	r0, [r7, #12]
 8019626:	f000 f963 	bl	80198f0 <etharp_request>
 801962a:	4603      	mov	r3, r0
 801962c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d102      	bne.n	801963c <etharp_query+0x124>
      return result;
 8019636:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801963a:	e096      	b.n	801976a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d106      	bne.n	8019650 <etharp_query+0x138>
 8019642:	4b4c      	ldr	r3, [pc, #304]	@ (8019774 <etharp_query+0x25c>)
 8019644:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8019648:	494f      	ldr	r1, [pc, #316]	@ (8019788 <etharp_query+0x270>)
 801964a:	484c      	ldr	r0, [pc, #304]	@ (801977c <etharp_query+0x264>)
 801964c:	f002 fd68 	bl	801c120 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019650:	7c7a      	ldrb	r2, [r7, #17]
 8019652:	494b      	ldr	r1, [pc, #300]	@ (8019780 <etharp_query+0x268>)
 8019654:	4613      	mov	r3, r2
 8019656:	005b      	lsls	r3, r3, #1
 8019658:	4413      	add	r3, r2
 801965a:	00db      	lsls	r3, r3, #3
 801965c:	440b      	add	r3, r1
 801965e:	3314      	adds	r3, #20
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	2b01      	cmp	r3, #1
 8019664:	d917      	bls.n	8019696 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019666:	4a49      	ldr	r2, [pc, #292]	@ (801978c <etharp_query+0x274>)
 8019668:	7c7b      	ldrb	r3, [r7, #17]
 801966a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801966c:	7c7a      	ldrb	r2, [r7, #17]
 801966e:	4613      	mov	r3, r2
 8019670:	005b      	lsls	r3, r3, #1
 8019672:	4413      	add	r3, r2
 8019674:	00db      	lsls	r3, r3, #3
 8019676:	3308      	adds	r3, #8
 8019678:	4a41      	ldr	r2, [pc, #260]	@ (8019780 <etharp_query+0x268>)
 801967a:	4413      	add	r3, r2
 801967c:	3304      	adds	r3, #4
 801967e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019682:	9200      	str	r2, [sp, #0]
 8019684:	697a      	ldr	r2, [r7, #20]
 8019686:	6879      	ldr	r1, [r7, #4]
 8019688:	68f8      	ldr	r0, [r7, #12]
 801968a:	f001 fd49 	bl	801b120 <ethernet_output>
 801968e:	4603      	mov	r3, r0
 8019690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019694:	e067      	b.n	8019766 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019696:	7c7a      	ldrb	r2, [r7, #17]
 8019698:	4939      	ldr	r1, [pc, #228]	@ (8019780 <etharp_query+0x268>)
 801969a:	4613      	mov	r3, r2
 801969c:	005b      	lsls	r3, r3, #1
 801969e:	4413      	add	r3, r2
 80196a0:	00db      	lsls	r3, r3, #3
 80196a2:	440b      	add	r3, r1
 80196a4:	3314      	adds	r3, #20
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d15c      	bne.n	8019766 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80196ac:	2300      	movs	r3, #0
 80196ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80196b4:	e01c      	b.n	80196f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80196b6:	69fb      	ldr	r3, [r7, #28]
 80196b8:	895a      	ldrh	r2, [r3, #10]
 80196ba:	69fb      	ldr	r3, [r7, #28]
 80196bc:	891b      	ldrh	r3, [r3, #8]
 80196be:	429a      	cmp	r2, r3
 80196c0:	d10a      	bne.n	80196d8 <etharp_query+0x1c0>
 80196c2:	69fb      	ldr	r3, [r7, #28]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d006      	beq.n	80196d8 <etharp_query+0x1c0>
 80196ca:	4b2a      	ldr	r3, [pc, #168]	@ (8019774 <etharp_query+0x25c>)
 80196cc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80196d0:	492f      	ldr	r1, [pc, #188]	@ (8019790 <etharp_query+0x278>)
 80196d2:	482a      	ldr	r0, [pc, #168]	@ (801977c <etharp_query+0x264>)
 80196d4:	f002 fd24 	bl	801c120 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80196d8:	69fb      	ldr	r3, [r7, #28]
 80196da:	7b1b      	ldrb	r3, [r3, #12]
 80196dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d002      	beq.n	80196ea <etharp_query+0x1d2>
        copy_needed = 1;
 80196e4:	2301      	movs	r3, #1
 80196e6:	61bb      	str	r3, [r7, #24]
        break;
 80196e8:	e005      	b.n	80196f6 <etharp_query+0x1de>
      }
      p = p->next;
 80196ea:	69fb      	ldr	r3, [r7, #28]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80196f0:	69fb      	ldr	r3, [r7, #28]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d1df      	bne.n	80196b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80196f6:	69bb      	ldr	r3, [r7, #24]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d007      	beq.n	801970c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80196fc:	687a      	ldr	r2, [r7, #4]
 80196fe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8019702:	200e      	movs	r0, #14
 8019704:	f7f7 f982 	bl	8010a0c <pbuf_clone>
 8019708:	61f8      	str	r0, [r7, #28]
 801970a:	e004      	b.n	8019716 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019710:	69f8      	ldr	r0, [r7, #28]
 8019712:	f7f6 ff6d 	bl	80105f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019716:	69fb      	ldr	r3, [r7, #28]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d021      	beq.n	8019760 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801971c:	7c7a      	ldrb	r2, [r7, #17]
 801971e:	4918      	ldr	r1, [pc, #96]	@ (8019780 <etharp_query+0x268>)
 8019720:	4613      	mov	r3, r2
 8019722:	005b      	lsls	r3, r3, #1
 8019724:	4413      	add	r3, r2
 8019726:	00db      	lsls	r3, r3, #3
 8019728:	440b      	add	r3, r1
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d00a      	beq.n	8019746 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019730:	7c7a      	ldrb	r2, [r7, #17]
 8019732:	4913      	ldr	r1, [pc, #76]	@ (8019780 <etharp_query+0x268>)
 8019734:	4613      	mov	r3, r2
 8019736:	005b      	lsls	r3, r3, #1
 8019738:	4413      	add	r3, r2
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	440b      	add	r3, r1
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	4618      	mov	r0, r3
 8019742:	f7f6 feaf 	bl	80104a4 <pbuf_free>
      }
      arp_table[i].q = p;
 8019746:	7c7a      	ldrb	r2, [r7, #17]
 8019748:	490d      	ldr	r1, [pc, #52]	@ (8019780 <etharp_query+0x268>)
 801974a:	4613      	mov	r3, r2
 801974c:	005b      	lsls	r3, r3, #1
 801974e:	4413      	add	r3, r2
 8019750:	00db      	lsls	r3, r3, #3
 8019752:	440b      	add	r3, r1
 8019754:	69fa      	ldr	r2, [r7, #28]
 8019756:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019758:	2300      	movs	r3, #0
 801975a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801975e:	e002      	b.n	8019766 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019760:	23ff      	movs	r3, #255	@ 0xff
 8019762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8019766:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801976a:	4618      	mov	r0, r3
 801976c:	3728      	adds	r7, #40	@ 0x28
 801976e:	46bd      	mov	sp, r7
 8019770:	bd80      	pop	{r7, pc}
 8019772:	bf00      	nop
 8019774:	080215a8 	.word	0x080215a8
 8019778:	08021754 	.word	0x08021754
 801977c:	08021620 	.word	0x08021620
 8019780:	20013da8 	.word	0x20013da8
 8019784:	08021764 	.word	0x08021764
 8019788:	08021748 	.word	0x08021748
 801978c:	20013e98 	.word	0x20013e98
 8019790:	0802178c 	.word	0x0802178c

08019794 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b08a      	sub	sp, #40	@ 0x28
 8019798:	af02      	add	r7, sp, #8
 801979a:	60f8      	str	r0, [r7, #12]
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	607a      	str	r2, [r7, #4]
 80197a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80197a2:	2300      	movs	r3, #0
 80197a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d106      	bne.n	80197ba <etharp_raw+0x26>
 80197ac:	4b3a      	ldr	r3, [pc, #232]	@ (8019898 <etharp_raw+0x104>)
 80197ae:	f240 4257 	movw	r2, #1111	@ 0x457
 80197b2:	493a      	ldr	r1, [pc, #232]	@ (801989c <etharp_raw+0x108>)
 80197b4:	483a      	ldr	r0, [pc, #232]	@ (80198a0 <etharp_raw+0x10c>)
 80197b6:	f002 fcb3 	bl	801c120 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80197ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80197be:	211c      	movs	r1, #28
 80197c0:	200e      	movs	r0, #14
 80197c2:	f7f6 fb87 	bl	800fed4 <pbuf_alloc>
 80197c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80197c8:	69bb      	ldr	r3, [r7, #24]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d102      	bne.n	80197d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80197ce:	f04f 33ff 	mov.w	r3, #4294967295
 80197d2:	e05d      	b.n	8019890 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	895b      	ldrh	r3, [r3, #10]
 80197d8:	2b1b      	cmp	r3, #27
 80197da:	d806      	bhi.n	80197ea <etharp_raw+0x56>
 80197dc:	4b2e      	ldr	r3, [pc, #184]	@ (8019898 <etharp_raw+0x104>)
 80197de:	f240 4262 	movw	r2, #1122	@ 0x462
 80197e2:	4930      	ldr	r1, [pc, #192]	@ (80198a4 <etharp_raw+0x110>)
 80197e4:	482e      	ldr	r0, [pc, #184]	@ (80198a0 <etharp_raw+0x10c>)
 80197e6:	f002 fc9b 	bl	801c120 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80197ea:	69bb      	ldr	r3, [r7, #24]
 80197ec:	685b      	ldr	r3, [r3, #4]
 80197ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80197f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7f5 f934 	bl	800ea60 <lwip_htons>
 80197f8:	4603      	mov	r3, r0
 80197fa:	461a      	mov	r2, r3
 80197fc:	697b      	ldr	r3, [r7, #20]
 80197fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019806:	2b06      	cmp	r3, #6
 8019808:	d006      	beq.n	8019818 <etharp_raw+0x84>
 801980a:	4b23      	ldr	r3, [pc, #140]	@ (8019898 <etharp_raw+0x104>)
 801980c:	f240 4269 	movw	r2, #1129	@ 0x469
 8019810:	4925      	ldr	r1, [pc, #148]	@ (80198a8 <etharp_raw+0x114>)
 8019812:	4823      	ldr	r0, [pc, #140]	@ (80198a0 <etharp_raw+0x10c>)
 8019814:	f002 fc84 	bl	801c120 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	3308      	adds	r3, #8
 801981c:	2206      	movs	r2, #6
 801981e:	6839      	ldr	r1, [r7, #0]
 8019820:	4618      	mov	r0, r3
 8019822:	f002 fe9c 	bl	801c55e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019826:	697b      	ldr	r3, [r7, #20]
 8019828:	3312      	adds	r3, #18
 801982a:	2206      	movs	r2, #6
 801982c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801982e:	4618      	mov	r0, r3
 8019830:	f002 fe95 	bl	801c55e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019834:	697b      	ldr	r3, [r7, #20]
 8019836:	330e      	adds	r3, #14
 8019838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801983a:	6812      	ldr	r2, [r2, #0]
 801983c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	3318      	adds	r3, #24
 8019842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019844:	6812      	ldr	r2, [r2, #0]
 8019846:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019848:	697b      	ldr	r3, [r7, #20]
 801984a:	2200      	movs	r2, #0
 801984c:	701a      	strb	r2, [r3, #0]
 801984e:	2200      	movs	r2, #0
 8019850:	f042 0201 	orr.w	r2, r2, #1
 8019854:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019856:	697b      	ldr	r3, [r7, #20]
 8019858:	2200      	movs	r2, #0
 801985a:	f042 0208 	orr.w	r2, r2, #8
 801985e:	709a      	strb	r2, [r3, #2]
 8019860:	2200      	movs	r2, #0
 8019862:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	2206      	movs	r2, #6
 8019868:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	2204      	movs	r2, #4
 801986e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019870:	f640 0306 	movw	r3, #2054	@ 0x806
 8019874:	9300      	str	r3, [sp, #0]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	68ba      	ldr	r2, [r7, #8]
 801987a:	69b9      	ldr	r1, [r7, #24]
 801987c:	68f8      	ldr	r0, [r7, #12]
 801987e:	f001 fc4f 	bl	801b120 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019882:	69b8      	ldr	r0, [r7, #24]
 8019884:	f7f6 fe0e 	bl	80104a4 <pbuf_free>
  p = NULL;
 8019888:	2300      	movs	r3, #0
 801988a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801988c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019890:	4618      	mov	r0, r3
 8019892:	3720      	adds	r7, #32
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}
 8019898:	080215a8 	.word	0x080215a8
 801989c:	080216f8 	.word	0x080216f8
 80198a0:	08021620 	.word	0x08021620
 80198a4:	080217a8 	.word	0x080217a8
 80198a8:	080217dc 	.word	0x080217dc

080198ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b088      	sub	sp, #32
 80198b0:	af04      	add	r7, sp, #16
 80198b2:	60f8      	str	r0, [r7, #12]
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80198c8:	2201      	movs	r2, #1
 80198ca:	9203      	str	r2, [sp, #12]
 80198cc:	68ba      	ldr	r2, [r7, #8]
 80198ce:	9202      	str	r2, [sp, #8]
 80198d0:	4a06      	ldr	r2, [pc, #24]	@ (80198ec <etharp_request_dst+0x40>)
 80198d2:	9201      	str	r2, [sp, #4]
 80198d4:	9300      	str	r3, [sp, #0]
 80198d6:	4603      	mov	r3, r0
 80198d8:	687a      	ldr	r2, [r7, #4]
 80198da:	68f8      	ldr	r0, [r7, #12]
 80198dc:	f7ff ff5a 	bl	8019794 <etharp_raw>
 80198e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80198e2:	4618      	mov	r0, r3
 80198e4:	3710      	adds	r7, #16
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	bf00      	nop
 80198ec:	0806da70 	.word	0x0806da70

080198f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b082      	sub	sp, #8
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80198fa:	4a05      	ldr	r2, [pc, #20]	@ (8019910 <etharp_request+0x20>)
 80198fc:	6839      	ldr	r1, [r7, #0]
 80198fe:	6878      	ldr	r0, [r7, #4]
 8019900:	f7ff ffd4 	bl	80198ac <etharp_request_dst>
 8019904:	4603      	mov	r3, r0
}
 8019906:	4618      	mov	r0, r3
 8019908:	3708      	adds	r7, #8
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}
 801990e:	bf00      	nop
 8019910:	0806da68 	.word	0x0806da68

08019914 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b08e      	sub	sp, #56	@ 0x38
 8019918:	af04      	add	r7, sp, #16
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801991e:	4b8e      	ldr	r3, [pc, #568]	@ (8019b58 <icmp_input+0x244>)
 8019920:	689b      	ldr	r3, [r3, #8]
 8019922:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019926:	781b      	ldrb	r3, [r3, #0]
 8019928:	f003 030f 	and.w	r3, r3, #15
 801992c:	b2db      	uxtb	r3, r3
 801992e:	009b      	lsls	r3, r3, #2
 8019930:	b2db      	uxtb	r3, r3
 8019932:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8019934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019936:	2b13      	cmp	r3, #19
 8019938:	f240 80f6 	bls.w	8019b28 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	895b      	ldrh	r3, [r3, #10]
 8019940:	2b03      	cmp	r3, #3
 8019942:	f240 80f3 	bls.w	8019b2c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	685b      	ldr	r3, [r3, #4]
 801994a:	781b      	ldrb	r3, [r3, #0]
 801994c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	685b      	ldr	r3, [r3, #4]
 8019954:	785b      	ldrb	r3, [r3, #1]
 8019956:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801995a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801995e:	2b00      	cmp	r3, #0
 8019960:	f000 80db 	beq.w	8019b1a <icmp_input+0x206>
 8019964:	2b08      	cmp	r3, #8
 8019966:	f040 80db 	bne.w	8019b20 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801996a:	4b7c      	ldr	r3, [pc, #496]	@ (8019b5c <icmp_input+0x248>)
 801996c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801996e:	4b7a      	ldr	r3, [pc, #488]	@ (8019b58 <icmp_input+0x244>)
 8019970:	695b      	ldr	r3, [r3, #20]
 8019972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019976:	2be0      	cmp	r3, #224	@ 0xe0
 8019978:	f000 80df 	beq.w	8019b3a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801997c:	4b76      	ldr	r3, [pc, #472]	@ (8019b58 <icmp_input+0x244>)
 801997e:	695b      	ldr	r3, [r3, #20]
 8019980:	4a75      	ldr	r2, [pc, #468]	@ (8019b58 <icmp_input+0x244>)
 8019982:	6812      	ldr	r2, [r2, #0]
 8019984:	4611      	mov	r1, r2
 8019986:	4618      	mov	r0, r3
 8019988:	f000 fcac 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 801998c:	4603      	mov	r3, r0
 801998e:	2b00      	cmp	r3, #0
 8019990:	f040 80d5 	bne.w	8019b3e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	891b      	ldrh	r3, [r3, #8]
 8019998:	2b07      	cmp	r3, #7
 801999a:	f240 80c9 	bls.w	8019b30 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801999e:	6878      	ldr	r0, [r7, #4]
 80199a0:	f7f5 f9b8 	bl	800ed14 <inet_chksum_pbuf>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d003      	beq.n	80199b2 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80199aa:	6878      	ldr	r0, [r7, #4]
 80199ac:	f7f6 fd7a 	bl	80104a4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80199b0:	e0ce      	b.n	8019b50 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80199b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80199b4:	330e      	adds	r3, #14
 80199b6:	4619      	mov	r1, r3
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	f7f6 fcdd 	bl	8010378 <pbuf_add_header>
 80199be:	4603      	mov	r3, r0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d04b      	beq.n	8019a5c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	891a      	ldrh	r2, [r3, #8]
 80199c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80199ca:	4413      	add	r3, r2
 80199cc:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	891b      	ldrh	r3, [r3, #8]
 80199d2:	8b7a      	ldrh	r2, [r7, #26]
 80199d4:	429a      	cmp	r2, r3
 80199d6:	f0c0 80b4 	bcc.w	8019b42 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80199da:	8b7b      	ldrh	r3, [r7, #26]
 80199dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80199e0:	4619      	mov	r1, r3
 80199e2:	200e      	movs	r0, #14
 80199e4:	f7f6 fa76 	bl	800fed4 <pbuf_alloc>
 80199e8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	f000 80aa 	beq.w	8019b46 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80199f2:	697b      	ldr	r3, [r7, #20]
 80199f4:	895b      	ldrh	r3, [r3, #10]
 80199f6:	461a      	mov	r2, r3
 80199f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80199fa:	3308      	adds	r3, #8
 80199fc:	429a      	cmp	r2, r3
 80199fe:	d203      	bcs.n	8019a08 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019a00:	6978      	ldr	r0, [r7, #20]
 8019a02:	f7f6 fd4f 	bl	80104a4 <pbuf_free>
          goto icmperr;
 8019a06:	e09f      	b.n	8019b48 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	685b      	ldr	r3, [r3, #4]
 8019a0c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019a10:	4618      	mov	r0, r3
 8019a12:	f002 fda4 	bl	801c55e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019a16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019a18:	4619      	mov	r1, r3
 8019a1a:	6978      	ldr	r0, [r7, #20]
 8019a1c:	f7f6 fcbc 	bl	8010398 <pbuf_remove_header>
 8019a20:	4603      	mov	r3, r0
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d009      	beq.n	8019a3a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019a26:	4b4e      	ldr	r3, [pc, #312]	@ (8019b60 <icmp_input+0x24c>)
 8019a28:	22b6      	movs	r2, #182	@ 0xb6
 8019a2a:	494e      	ldr	r1, [pc, #312]	@ (8019b64 <icmp_input+0x250>)
 8019a2c:	484e      	ldr	r0, [pc, #312]	@ (8019b68 <icmp_input+0x254>)
 8019a2e:	f002 fb77 	bl	801c120 <iprintf>
          pbuf_free(r);
 8019a32:	6978      	ldr	r0, [r7, #20]
 8019a34:	f7f6 fd36 	bl	80104a4 <pbuf_free>
          goto icmperr;
 8019a38:	e086      	b.n	8019b48 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019a3a:	6879      	ldr	r1, [r7, #4]
 8019a3c:	6978      	ldr	r0, [r7, #20]
 8019a3e:	f7f6 fe65 	bl	801070c <pbuf_copy>
 8019a42:	4603      	mov	r3, r0
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d003      	beq.n	8019a50 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019a48:	6978      	ldr	r0, [r7, #20]
 8019a4a:	f7f6 fd2b 	bl	80104a4 <pbuf_free>
          goto icmperr;
 8019a4e:	e07b      	b.n	8019b48 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8019a50:	6878      	ldr	r0, [r7, #4]
 8019a52:	f7f6 fd27 	bl	80104a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	607b      	str	r3, [r7, #4]
 8019a5a:	e00f      	b.n	8019a7c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019a5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019a5e:	330e      	adds	r3, #14
 8019a60:	4619      	mov	r1, r3
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f7f6 fc98 	bl	8010398 <pbuf_remove_header>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d006      	beq.n	8019a7c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8019b60 <icmp_input+0x24c>)
 8019a70:	22c7      	movs	r2, #199	@ 0xc7
 8019a72:	493e      	ldr	r1, [pc, #248]	@ (8019b6c <icmp_input+0x258>)
 8019a74:	483c      	ldr	r0, [pc, #240]	@ (8019b68 <icmp_input+0x254>)
 8019a76:	f002 fb53 	bl	801c120 <iprintf>
          goto icmperr;
 8019a7a:	e065      	b.n	8019b48 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	685b      	ldr	r3, [r3, #4]
 8019a80:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019a82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019a84:	4619      	mov	r1, r3
 8019a86:	6878      	ldr	r0, [r7, #4]
 8019a88:	f7f6 fc76 	bl	8010378 <pbuf_add_header>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d145      	bne.n	8019b1e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	685b      	ldr	r3, [r3, #4]
 8019a96:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019a98:	69fb      	ldr	r3, [r7, #28]
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8019b58 <icmp_input+0x244>)
 8019aa2:	691a      	ldr	r2, [r3, #16]
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019aa8:	693b      	ldr	r3, [r7, #16]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019aae:	693b      	ldr	r3, [r7, #16]
 8019ab0:	885b      	ldrh	r3, [r3, #2]
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019ab8:	4293      	cmp	r3, r2
 8019aba:	d907      	bls.n	8019acc <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	885b      	ldrh	r3, [r3, #2]
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	3309      	adds	r3, #9
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	805a      	strh	r2, [r3, #2]
 8019aca:	e006      	b.n	8019ada <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019acc:	693b      	ldr	r3, [r7, #16]
 8019ace:	885b      	ldrh	r3, [r3, #2]
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	3308      	adds	r3, #8
 8019ad4:	b29a      	uxth	r2, r3
 8019ad6:	693b      	ldr	r3, [r7, #16]
 8019ad8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	22ff      	movs	r2, #255	@ 0xff
 8019ade:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	729a      	strb	r2, [r3, #10]
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8019aea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019aec:	4619      	mov	r1, r3
 8019aee:	68f8      	ldr	r0, [r7, #12]
 8019af0:	f7f5 f8fe 	bl	800ecf0 <inet_chksum>
 8019af4:	4603      	mov	r3, r0
 8019af6:	461a      	mov	r2, r3
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	9302      	str	r3, [sp, #8]
 8019b00:	2301      	movs	r3, #1
 8019b02:	9301      	str	r3, [sp, #4]
 8019b04:	2300      	movs	r3, #0
 8019b06:	9300      	str	r3, [sp, #0]
 8019b08:	23ff      	movs	r3, #255	@ 0xff
 8019b0a:	2200      	movs	r2, #0
 8019b0c:	69f9      	ldr	r1, [r7, #28]
 8019b0e:	6878      	ldr	r0, [r7, #4]
 8019b10:	f000 faaa 	bl	801a068 <ip4_output_if>
 8019b14:	4603      	mov	r3, r0
 8019b16:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019b18:	e001      	b.n	8019b1e <icmp_input+0x20a>
      break;
 8019b1a:	bf00      	nop
 8019b1c:	e000      	b.n	8019b20 <icmp_input+0x20c>
      break;
 8019b1e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f7f6 fcbf 	bl	80104a4 <pbuf_free>
  return;
 8019b26:	e013      	b.n	8019b50 <icmp_input+0x23c>
    goto lenerr;
 8019b28:	bf00      	nop
 8019b2a:	e002      	b.n	8019b32 <icmp_input+0x21e>
    goto lenerr;
 8019b2c:	bf00      	nop
 8019b2e:	e000      	b.n	8019b32 <icmp_input+0x21e>
        goto lenerr;
 8019b30:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f7f6 fcb6 	bl	80104a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019b38:	e00a      	b.n	8019b50 <icmp_input+0x23c>
        goto icmperr;
 8019b3a:	bf00      	nop
 8019b3c:	e004      	b.n	8019b48 <icmp_input+0x234>
        goto icmperr;
 8019b3e:	bf00      	nop
 8019b40:	e002      	b.n	8019b48 <icmp_input+0x234>
          goto icmperr;
 8019b42:	bf00      	nop
 8019b44:	e000      	b.n	8019b48 <icmp_input+0x234>
          goto icmperr;
 8019b46:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019b48:	6878      	ldr	r0, [r7, #4]
 8019b4a:	f7f6 fcab 	bl	80104a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019b4e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019b50:	3728      	adds	r7, #40	@ 0x28
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bd80      	pop	{r7, pc}
 8019b56:	bf00      	nop
 8019b58:	2000a29c 	.word	0x2000a29c
 8019b5c:	2000a2b0 	.word	0x2000a2b0
 8019b60:	08021820 	.word	0x08021820
 8019b64:	08021858 	.word	0x08021858
 8019b68:	08021890 	.word	0x08021890
 8019b6c:	080218b8 	.word	0x080218b8

08019b70 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	460b      	mov	r3, r1
 8019b7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019b7c:	78fb      	ldrb	r3, [r7, #3]
 8019b7e:	461a      	mov	r2, r3
 8019b80:	2103      	movs	r1, #3
 8019b82:	6878      	ldr	r0, [r7, #4]
 8019b84:	f000 f814 	bl	8019bb0 <icmp_send_response>
}
 8019b88:	bf00      	nop
 8019b8a:	3708      	adds	r7, #8
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	bd80      	pop	{r7, pc}

08019b90 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b082      	sub	sp, #8
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	460b      	mov	r3, r1
 8019b9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019b9c:	78fb      	ldrb	r3, [r7, #3]
 8019b9e:	461a      	mov	r2, r3
 8019ba0:	210b      	movs	r1, #11
 8019ba2:	6878      	ldr	r0, [r7, #4]
 8019ba4:	f000 f804 	bl	8019bb0 <icmp_send_response>
}
 8019ba8:	bf00      	nop
 8019baa:	3708      	adds	r7, #8
 8019bac:	46bd      	mov	sp, r7
 8019bae:	bd80      	pop	{r7, pc}

08019bb0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b08c      	sub	sp, #48	@ 0x30
 8019bb4:	af04      	add	r7, sp, #16
 8019bb6:	6078      	str	r0, [r7, #4]
 8019bb8:	460b      	mov	r3, r1
 8019bba:	70fb      	strb	r3, [r7, #3]
 8019bbc:	4613      	mov	r3, r2
 8019bbe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019bc0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019bc4:	2124      	movs	r1, #36	@ 0x24
 8019bc6:	2022      	movs	r0, #34	@ 0x22
 8019bc8:	f7f6 f984 	bl	800fed4 <pbuf_alloc>
 8019bcc:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8019bce:	69bb      	ldr	r3, [r7, #24]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d056      	beq.n	8019c82 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019bd4:	69bb      	ldr	r3, [r7, #24]
 8019bd6:	895b      	ldrh	r3, [r3, #10]
 8019bd8:	2b23      	cmp	r3, #35	@ 0x23
 8019bda:	d806      	bhi.n	8019bea <icmp_send_response+0x3a>
 8019bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8019c8c <icmp_send_response+0xdc>)
 8019bde:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8019be2:	492b      	ldr	r1, [pc, #172]	@ (8019c90 <icmp_send_response+0xe0>)
 8019be4:	482b      	ldr	r0, [pc, #172]	@ (8019c94 <icmp_send_response+0xe4>)
 8019be6:	f002 fa9b 	bl	801c120 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	685b      	ldr	r3, [r3, #4]
 8019bee:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019bf0:	69bb      	ldr	r3, [r7, #24]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	78fa      	ldrb	r2, [r7, #3]
 8019bfa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019bfc:	693b      	ldr	r3, [r7, #16]
 8019bfe:	78ba      	ldrb	r2, [r7, #2]
 8019c00:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019c02:	693b      	ldr	r3, [r7, #16]
 8019c04:	2200      	movs	r2, #0
 8019c06:	711a      	strb	r2, [r3, #4]
 8019c08:	2200      	movs	r2, #0
 8019c0a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019c0c:	693b      	ldr	r3, [r7, #16]
 8019c0e:	2200      	movs	r2, #0
 8019c10:	719a      	strb	r2, [r3, #6]
 8019c12:	2200      	movs	r2, #0
 8019c14:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019c16:	69bb      	ldr	r3, [r7, #24]
 8019c18:	685b      	ldr	r3, [r3, #4]
 8019c1a:	f103 0008 	add.w	r0, r3, #8
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	685b      	ldr	r3, [r3, #4]
 8019c22:	221c      	movs	r2, #28
 8019c24:	4619      	mov	r1, r3
 8019c26:	f002 fc9a 	bl	801c55e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019c2a:	697b      	ldr	r3, [r7, #20]
 8019c2c:	68db      	ldr	r3, [r3, #12]
 8019c2e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019c30:	f107 030c 	add.w	r3, r7, #12
 8019c34:	4618      	mov	r0, r3
 8019c36:	f000 f82f 	bl	8019c98 <ip4_route>
 8019c3a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8019c3c:	69fb      	ldr	r3, [r7, #28]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d01b      	beq.n	8019c7a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019c42:	693b      	ldr	r3, [r7, #16]
 8019c44:	2200      	movs	r2, #0
 8019c46:	709a      	strb	r2, [r3, #2]
 8019c48:	2200      	movs	r2, #0
 8019c4a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019c4c:	69bb      	ldr	r3, [r7, #24]
 8019c4e:	895b      	ldrh	r3, [r3, #10]
 8019c50:	4619      	mov	r1, r3
 8019c52:	6938      	ldr	r0, [r7, #16]
 8019c54:	f7f5 f84c 	bl	800ecf0 <inet_chksum>
 8019c58:	4603      	mov	r3, r0
 8019c5a:	461a      	mov	r2, r3
 8019c5c:	693b      	ldr	r3, [r7, #16]
 8019c5e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019c60:	f107 020c 	add.w	r2, r7, #12
 8019c64:	69fb      	ldr	r3, [r7, #28]
 8019c66:	9302      	str	r3, [sp, #8]
 8019c68:	2301      	movs	r3, #1
 8019c6a:	9301      	str	r3, [sp, #4]
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	9300      	str	r3, [sp, #0]
 8019c70:	23ff      	movs	r3, #255	@ 0xff
 8019c72:	2100      	movs	r1, #0
 8019c74:	69b8      	ldr	r0, [r7, #24]
 8019c76:	f000 f9f7 	bl	801a068 <ip4_output_if>
  }
  pbuf_free(q);
 8019c7a:	69b8      	ldr	r0, [r7, #24]
 8019c7c:	f7f6 fc12 	bl	80104a4 <pbuf_free>
 8019c80:	e000      	b.n	8019c84 <icmp_send_response+0xd4>
    return;
 8019c82:	bf00      	nop
}
 8019c84:	3720      	adds	r7, #32
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}
 8019c8a:	bf00      	nop
 8019c8c:	08021820 	.word	0x08021820
 8019c90:	080218ec 	.word	0x080218ec
 8019c94:	08021890 	.word	0x08021890

08019c98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019c98:	b480      	push	{r7}
 8019c9a:	b085      	sub	sp, #20
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019ca0:	4b33      	ldr	r3, [pc, #204]	@ (8019d70 <ip4_route+0xd8>)
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	60fb      	str	r3, [r7, #12]
 8019ca6:	e036      	b.n	8019d16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019cae:	f003 0301 	and.w	r3, r3, #1
 8019cb2:	b2db      	uxtb	r3, r3
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d02b      	beq.n	8019d10 <ip4_route+0x78>
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019cbe:	089b      	lsrs	r3, r3, #2
 8019cc0:	f003 0301 	and.w	r3, r3, #1
 8019cc4:	b2db      	uxtb	r3, r3
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d022      	beq.n	8019d10 <ip4_route+0x78>
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	3304      	adds	r3, #4
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d01d      	beq.n	8019d10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681a      	ldr	r2, [r3, #0]
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	3304      	adds	r3, #4
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	405a      	eors	r2, r3
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	3308      	adds	r3, #8
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	4013      	ands	r3, r2
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d101      	bne.n	8019cf0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	e038      	b.n	8019d62 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019cf6:	f003 0302 	and.w	r3, r3, #2
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d108      	bne.n	8019d10 <ip4_route+0x78>
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	681a      	ldr	r2, [r3, #0]
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	330c      	adds	r3, #12
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	d101      	bne.n	8019d10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	e028      	b.n	8019d62 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	60fb      	str	r3, [r7, #12]
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d1c5      	bne.n	8019ca8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019d1c:	4b15      	ldr	r3, [pc, #84]	@ (8019d74 <ip4_route+0xdc>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d01a      	beq.n	8019d5a <ip4_route+0xc2>
 8019d24:	4b13      	ldr	r3, [pc, #76]	@ (8019d74 <ip4_route+0xdc>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019d2c:	f003 0301 	and.w	r3, r3, #1
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d012      	beq.n	8019d5a <ip4_route+0xc2>
 8019d34:	4b0f      	ldr	r3, [pc, #60]	@ (8019d74 <ip4_route+0xdc>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019d3c:	f003 0304 	and.w	r3, r3, #4
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d00a      	beq.n	8019d5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019d44:	4b0b      	ldr	r3, [pc, #44]	@ (8019d74 <ip4_route+0xdc>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	3304      	adds	r3, #4
 8019d4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d004      	beq.n	8019d5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	b2db      	uxtb	r3, r3
 8019d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8019d58:	d101      	bne.n	8019d5e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	e001      	b.n	8019d62 <ip4_route+0xca>
  }

  return netif_default;
 8019d5e:	4b05      	ldr	r3, [pc, #20]	@ (8019d74 <ip4_route+0xdc>)
 8019d60:	681b      	ldr	r3, [r3, #0]
}
 8019d62:	4618      	mov	r0, r3
 8019d64:	3714      	adds	r7, #20
 8019d66:	46bd      	mov	sp, r7
 8019d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6c:	4770      	bx	lr
 8019d6e:	bf00      	nop
 8019d70:	20013d04 	.word	0x20013d04
 8019d74:	20013d08 	.word	0x20013d08

08019d78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b082      	sub	sp, #8
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019d86:	f003 0301 	and.w	r3, r3, #1
 8019d8a:	b2db      	uxtb	r3, r3
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d016      	beq.n	8019dbe <ip4_input_accept+0x46>
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	3304      	adds	r3, #4
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d011      	beq.n	8019dbe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8019dc8 <ip4_input_accept+0x50>)
 8019d9c:	695a      	ldr	r2, [r3, #20]
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	3304      	adds	r3, #4
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d008      	beq.n	8019dba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019da8:	4b07      	ldr	r3, [pc, #28]	@ (8019dc8 <ip4_input_accept+0x50>)
 8019daa:	695b      	ldr	r3, [r3, #20]
 8019dac:	6879      	ldr	r1, [r7, #4]
 8019dae:	4618      	mov	r0, r3
 8019db0:	f000 fa98 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 8019db4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d001      	beq.n	8019dbe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019dba:	2301      	movs	r3, #1
 8019dbc:	e000      	b.n	8019dc0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019dbe:	2300      	movs	r3, #0
}
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	3708      	adds	r7, #8
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd80      	pop	{r7, pc}
 8019dc8:	2000a29c 	.word	0x2000a29c

08019dcc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b088      	sub	sp, #32
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
 8019dd4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	685b      	ldr	r3, [r3, #4]
 8019dde:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8019de0:	693b      	ldr	r3, [r7, #16]
 8019de2:	781b      	ldrb	r3, [r3, #0]
 8019de4:	091b      	lsrs	r3, r3, #4
 8019de6:	b2db      	uxtb	r3, r3
 8019de8:	2b04      	cmp	r3, #4
 8019dea:	d004      	beq.n	8019df6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f7f6 fb59 	bl	80104a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019df2:	2300      	movs	r3, #0
 8019df4:	e130      	b.n	801a058 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	781b      	ldrb	r3, [r3, #0]
 8019dfa:	f003 030f 	and.w	r3, r3, #15
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	009b      	lsls	r3, r3, #2
 8019e02:	b2db      	uxtb	r3, r3
 8019e04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	885b      	ldrh	r3, [r3, #2]
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7f4 fe27 	bl	800ea60 <lwip_htons>
 8019e12:	4603      	mov	r3, r0
 8019e14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	891b      	ldrh	r3, [r3, #8]
 8019e1a:	89ba      	ldrh	r2, [r7, #12]
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	d204      	bcs.n	8019e2a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8019e20:	89bb      	ldrh	r3, [r7, #12]
 8019e22:	4619      	mov	r1, r3
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f7f6 f9b7 	bl	8010198 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	895b      	ldrh	r3, [r3, #10]
 8019e2e:	89fa      	ldrh	r2, [r7, #14]
 8019e30:	429a      	cmp	r2, r3
 8019e32:	d807      	bhi.n	8019e44 <ip4_input+0x78>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	891b      	ldrh	r3, [r3, #8]
 8019e38:	89ba      	ldrh	r2, [r7, #12]
 8019e3a:	429a      	cmp	r2, r3
 8019e3c:	d802      	bhi.n	8019e44 <ip4_input+0x78>
 8019e3e:	89fb      	ldrh	r3, [r7, #14]
 8019e40:	2b13      	cmp	r3, #19
 8019e42:	d804      	bhi.n	8019e4e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019e44:	6878      	ldr	r0, [r7, #4]
 8019e46:	f7f6 fb2d 	bl	80104a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	e104      	b.n	801a058 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8019e4e:	89fb      	ldrh	r3, [r7, #14]
 8019e50:	4619      	mov	r1, r3
 8019e52:	6938      	ldr	r0, [r7, #16]
 8019e54:	f7f4 ff4c 	bl	800ecf0 <inet_chksum>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d004      	beq.n	8019e68 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8019e5e:	6878      	ldr	r0, [r7, #4]
 8019e60:	f7f6 fb20 	bl	80104a4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8019e64:	2300      	movs	r3, #0
 8019e66:	e0f7      	b.n	801a058 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019e68:	693b      	ldr	r3, [r7, #16]
 8019e6a:	691b      	ldr	r3, [r3, #16]
 8019e6c:	4a7c      	ldr	r2, [pc, #496]	@ (801a060 <ip4_input+0x294>)
 8019e6e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019e70:	693b      	ldr	r3, [r7, #16]
 8019e72:	68db      	ldr	r3, [r3, #12]
 8019e74:	4a7a      	ldr	r2, [pc, #488]	@ (801a060 <ip4_input+0x294>)
 8019e76:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019e78:	4b79      	ldr	r3, [pc, #484]	@ (801a060 <ip4_input+0x294>)
 8019e7a:	695b      	ldr	r3, [r3, #20]
 8019e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019e80:	2be0      	cmp	r3, #224	@ 0xe0
 8019e82:	d112      	bne.n	8019eaa <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019e84:	683b      	ldr	r3, [r7, #0]
 8019e86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019e8a:	f003 0301 	and.w	r3, r3, #1
 8019e8e:	b2db      	uxtb	r3, r3
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d007      	beq.n	8019ea4 <ip4_input+0xd8>
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	3304      	adds	r3, #4
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d002      	beq.n	8019ea4 <ip4_input+0xd8>
      netif = inp;
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	61fb      	str	r3, [r7, #28]
 8019ea2:	e02a      	b.n	8019efa <ip4_input+0x12e>
    } else {
      netif = NULL;
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	61fb      	str	r3, [r7, #28]
 8019ea8:	e027      	b.n	8019efa <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019eaa:	6838      	ldr	r0, [r7, #0]
 8019eac:	f7ff ff64 	bl	8019d78 <ip4_input_accept>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d002      	beq.n	8019ebc <ip4_input+0xf0>
      netif = inp;
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	61fb      	str	r3, [r7, #28]
 8019eba:	e01e      	b.n	8019efa <ip4_input+0x12e>
    } else {
      netif = NULL;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019ec0:	4b67      	ldr	r3, [pc, #412]	@ (801a060 <ip4_input+0x294>)
 8019ec2:	695b      	ldr	r3, [r3, #20]
 8019ec4:	b2db      	uxtb	r3, r3
 8019ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8019ec8:	d017      	beq.n	8019efa <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019eca:	4b66      	ldr	r3, [pc, #408]	@ (801a064 <ip4_input+0x298>)
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	61fb      	str	r3, [r7, #28]
 8019ed0:	e00e      	b.n	8019ef0 <ip4_input+0x124>
          if (netif == inp) {
 8019ed2:	69fa      	ldr	r2, [r7, #28]
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	429a      	cmp	r2, r3
 8019ed8:	d006      	beq.n	8019ee8 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019eda:	69f8      	ldr	r0, [r7, #28]
 8019edc:	f7ff ff4c 	bl	8019d78 <ip4_input_accept>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d108      	bne.n	8019ef8 <ip4_input+0x12c>
 8019ee6:	e000      	b.n	8019eea <ip4_input+0x11e>
            continue;
 8019ee8:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019eea:	69fb      	ldr	r3, [r7, #28]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	61fb      	str	r3, [r7, #28]
 8019ef0:	69fb      	ldr	r3, [r7, #28]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d1ed      	bne.n	8019ed2 <ip4_input+0x106>
 8019ef6:	e000      	b.n	8019efa <ip4_input+0x12e>
            break;
 8019ef8:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8019efa:	69fb      	ldr	r3, [r7, #28]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d111      	bne.n	8019f24 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	7a5b      	ldrb	r3, [r3, #9]
 8019f04:	2b11      	cmp	r3, #17
 8019f06:	d10d      	bne.n	8019f24 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8019f08:	89fb      	ldrh	r3, [r7, #14]
 8019f0a:	693a      	ldr	r2, [r7, #16]
 8019f0c:	4413      	add	r3, r2
 8019f0e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8019f10:	69bb      	ldr	r3, [r7, #24]
 8019f12:	885b      	ldrh	r3, [r3, #2]
 8019f14:	b29b      	uxth	r3, r3
 8019f16:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8019f1a:	d103      	bne.n	8019f24 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8019f1c:	683b      	ldr	r3, [r7, #0]
 8019f1e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8019f20:	2300      	movs	r3, #0
 8019f22:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8019f24:	697b      	ldr	r3, [r7, #20]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d017      	beq.n	8019f5a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8019f2a:	4b4d      	ldr	r3, [pc, #308]	@ (801a060 <ip4_input+0x294>)
 8019f2c:	691b      	ldr	r3, [r3, #16]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d013      	beq.n	8019f5a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019f32:	4b4b      	ldr	r3, [pc, #300]	@ (801a060 <ip4_input+0x294>)
 8019f34:	691b      	ldr	r3, [r3, #16]
 8019f36:	6839      	ldr	r1, [r7, #0]
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f000 f9d3 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d105      	bne.n	8019f50 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019f44:	4b46      	ldr	r3, [pc, #280]	@ (801a060 <ip4_input+0x294>)
 8019f46:	691b      	ldr	r3, [r3, #16]
 8019f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019f4c:	2be0      	cmp	r3, #224	@ 0xe0
 8019f4e:	d104      	bne.n	8019f5a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019f50:	6878      	ldr	r0, [r7, #4]
 8019f52:	f7f6 faa7 	bl	80104a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019f56:	2300      	movs	r3, #0
 8019f58:	e07e      	b.n	801a058 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019f5a:	69fb      	ldr	r3, [r7, #28]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d104      	bne.n	8019f6a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019f60:	6878      	ldr	r0, [r7, #4]
 8019f62:	f7f6 fa9f 	bl	80104a4 <pbuf_free>
    return ERR_OK;
 8019f66:	2300      	movs	r3, #0
 8019f68:	e076      	b.n	801a058 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019f6a:	693b      	ldr	r3, [r7, #16]
 8019f6c:	88db      	ldrh	r3, [r3, #6]
 8019f6e:	b29b      	uxth	r3, r3
 8019f70:	461a      	mov	r2, r3
 8019f72:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019f76:	4013      	ands	r3, r2
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d00b      	beq.n	8019f94 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019f7c:	6878      	ldr	r0, [r7, #4]
 8019f7e:	f000 fcf7 	bl	801a970 <ip4_reass>
 8019f82:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d101      	bne.n	8019f8e <ip4_input+0x1c2>
      return ERR_OK;
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	e064      	b.n	801a058 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019f94:	4a32      	ldr	r2, [pc, #200]	@ (801a060 <ip4_input+0x294>)
 8019f96:	69fb      	ldr	r3, [r7, #28]
 8019f98:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019f9a:	4a31      	ldr	r2, [pc, #196]	@ (801a060 <ip4_input+0x294>)
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019fa0:	4a2f      	ldr	r2, [pc, #188]	@ (801a060 <ip4_input+0x294>)
 8019fa2:	693b      	ldr	r3, [r7, #16]
 8019fa4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	781b      	ldrb	r3, [r3, #0]
 8019faa:	f003 030f 	and.w	r3, r3, #15
 8019fae:	b2db      	uxtb	r3, r3
 8019fb0:	009b      	lsls	r3, r3, #2
 8019fb2:	b2db      	uxtb	r3, r3
 8019fb4:	461a      	mov	r2, r3
 8019fb6:	4b2a      	ldr	r3, [pc, #168]	@ (801a060 <ip4_input+0x294>)
 8019fb8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019fba:	89fb      	ldrh	r3, [r7, #14]
 8019fbc:	4619      	mov	r1, r3
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f7f6 f9ea 	bl	8010398 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019fc4:	693b      	ldr	r3, [r7, #16]
 8019fc6:	7a5b      	ldrb	r3, [r3, #9]
 8019fc8:	2b11      	cmp	r3, #17
 8019fca:	d006      	beq.n	8019fda <ip4_input+0x20e>
 8019fcc:	2b11      	cmp	r3, #17
 8019fce:	dc13      	bgt.n	8019ff8 <ip4_input+0x22c>
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d00c      	beq.n	8019fee <ip4_input+0x222>
 8019fd4:	2b06      	cmp	r3, #6
 8019fd6:	d005      	beq.n	8019fe4 <ip4_input+0x218>
 8019fd8:	e00e      	b.n	8019ff8 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019fda:	6839      	ldr	r1, [r7, #0]
 8019fdc:	6878      	ldr	r0, [r7, #4]
 8019fde:	f7fc f973 	bl	80162c8 <udp_input>
        break;
 8019fe2:	e026      	b.n	801a032 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019fe4:	6839      	ldr	r1, [r7, #0]
 8019fe6:	6878      	ldr	r0, [r7, #4]
 8019fe8:	f7f8 f93e 	bl	8012268 <tcp_input>
        break;
 8019fec:	e021      	b.n	801a032 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019fee:	6839      	ldr	r1, [r7, #0]
 8019ff0:	6878      	ldr	r0, [r7, #4]
 8019ff2:	f7ff fc8f 	bl	8019914 <icmp_input>
        break;
 8019ff6:	e01c      	b.n	801a032 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019ff8:	4b19      	ldr	r3, [pc, #100]	@ (801a060 <ip4_input+0x294>)
 8019ffa:	695b      	ldr	r3, [r3, #20]
 8019ffc:	69f9      	ldr	r1, [r7, #28]
 8019ffe:	4618      	mov	r0, r3
 801a000:	f000 f970 	bl	801a2e4 <ip4_addr_isbroadcast_u32>
 801a004:	4603      	mov	r3, r0
 801a006:	2b00      	cmp	r3, #0
 801a008:	d10f      	bne.n	801a02a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a00a:	4b15      	ldr	r3, [pc, #84]	@ (801a060 <ip4_input+0x294>)
 801a00c:	695b      	ldr	r3, [r3, #20]
 801a00e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a012:	2be0      	cmp	r3, #224	@ 0xe0
 801a014:	d009      	beq.n	801a02a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a01a:	4619      	mov	r1, r3
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f7f6 fa2e 	bl	801047e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a022:	2102      	movs	r1, #2
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f7ff fda3 	bl	8019b70 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a02a:	6878      	ldr	r0, [r7, #4]
 801a02c:	f7f6 fa3a 	bl	80104a4 <pbuf_free>
        break;
 801a030:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a032:	4b0b      	ldr	r3, [pc, #44]	@ (801a060 <ip4_input+0x294>)
 801a034:	2200      	movs	r2, #0
 801a036:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a038:	4b09      	ldr	r3, [pc, #36]	@ (801a060 <ip4_input+0x294>)
 801a03a:	2200      	movs	r2, #0
 801a03c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a03e:	4b08      	ldr	r3, [pc, #32]	@ (801a060 <ip4_input+0x294>)
 801a040:	2200      	movs	r2, #0
 801a042:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a044:	4b06      	ldr	r3, [pc, #24]	@ (801a060 <ip4_input+0x294>)
 801a046:	2200      	movs	r2, #0
 801a048:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a04a:	4b05      	ldr	r3, [pc, #20]	@ (801a060 <ip4_input+0x294>)
 801a04c:	2200      	movs	r2, #0
 801a04e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a050:	4b03      	ldr	r3, [pc, #12]	@ (801a060 <ip4_input+0x294>)
 801a052:	2200      	movs	r2, #0
 801a054:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a056:	2300      	movs	r3, #0
}
 801a058:	4618      	mov	r0, r3
 801a05a:	3720      	adds	r7, #32
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}
 801a060:	2000a29c 	.word	0x2000a29c
 801a064:	20013d04 	.word	0x20013d04

0801a068 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b08a      	sub	sp, #40	@ 0x28
 801a06c:	af04      	add	r7, sp, #16
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	607a      	str	r2, [r7, #4]
 801a074:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d009      	beq.n	801a094 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d003      	beq.n	801a08e <ip4_output_if+0x26>
 801a086:	68bb      	ldr	r3, [r7, #8]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d102      	bne.n	801a094 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a090:	3304      	adds	r3, #4
 801a092:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a094:	78fa      	ldrb	r2, [r7, #3]
 801a096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a098:	9302      	str	r3, [sp, #8]
 801a09a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a09e:	9301      	str	r3, [sp, #4]
 801a0a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a0a4:	9300      	str	r3, [sp, #0]
 801a0a6:	4613      	mov	r3, r2
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	6979      	ldr	r1, [r7, #20]
 801a0ac:	68f8      	ldr	r0, [r7, #12]
 801a0ae:	f000 f805 	bl	801a0bc <ip4_output_if_src>
 801a0b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	3718      	adds	r7, #24
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}

0801a0bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b088      	sub	sp, #32
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	60f8      	str	r0, [r7, #12]
 801a0c4:	60b9      	str	r1, [r7, #8]
 801a0c6:	607a      	str	r2, [r7, #4]
 801a0c8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	7b9b      	ldrb	r3, [r3, #14]
 801a0d2:	2b01      	cmp	r3, #1
 801a0d4:	d006      	beq.n	801a0e4 <ip4_output_if_src+0x28>
 801a0d6:	4b7d      	ldr	r3, [pc, #500]	@ (801a2cc <ip4_output_if_src+0x210>)
 801a0d8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801a0dc:	497c      	ldr	r1, [pc, #496]	@ (801a2d0 <ip4_output_if_src+0x214>)
 801a0de:	487d      	ldr	r0, [pc, #500]	@ (801a2d4 <ip4_output_if_src+0x218>)
 801a0e0:	f002 f81e 	bl	801c120 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f000 80c4 	beq.w	801a274 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801a0ec:	2314      	movs	r3, #20
 801a0ee:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a0f0:	2114      	movs	r1, #20
 801a0f2:	68f8      	ldr	r0, [r7, #12]
 801a0f4:	f7f6 f940 	bl	8010378 <pbuf_add_header>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d002      	beq.n	801a104 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a0fe:	f06f 0301 	mvn.w	r3, #1
 801a102:	e0df      	b.n	801a2c4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	685b      	ldr	r3, [r3, #4]
 801a108:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	895b      	ldrh	r3, [r3, #10]
 801a10e:	2b13      	cmp	r3, #19
 801a110:	d806      	bhi.n	801a120 <ip4_output_if_src+0x64>
 801a112:	4b6e      	ldr	r3, [pc, #440]	@ (801a2cc <ip4_output_if_src+0x210>)
 801a114:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801a118:	496f      	ldr	r1, [pc, #444]	@ (801a2d8 <ip4_output_if_src+0x21c>)
 801a11a:	486e      	ldr	r0, [pc, #440]	@ (801a2d4 <ip4_output_if_src+0x218>)
 801a11c:	f002 f800 	bl	801c120 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a120:	69bb      	ldr	r3, [r7, #24]
 801a122:	78fa      	ldrb	r2, [r7, #3]
 801a124:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a126:	69bb      	ldr	r3, [r7, #24]
 801a128:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a12c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801a12e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a132:	78fb      	ldrb	r3, [r7, #3]
 801a134:	021b      	lsls	r3, r3, #8
 801a136:	4313      	orrs	r3, r2
 801a138:	021b      	lsls	r3, r3, #8
 801a13a:	b21a      	sxth	r2, r3
 801a13c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 801a140:	78fb      	ldrb	r3, [r7, #3]
 801a142:	021b      	lsls	r3, r3, #8
 801a144:	430b      	orrs	r3, r1
 801a146:	121b      	asrs	r3, r3, #8
 801a148:	b21b      	sxth	r3, r3
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	b21b      	sxth	r3, r3
 801a14e:	4313      	orrs	r3, r2
 801a150:	b21b      	sxth	r3, r3
 801a152:	b29b      	uxth	r3, r3
 801a154:	461a      	mov	r2, r3
 801a156:	69fb      	ldr	r3, [r7, #28]
 801a158:	4413      	add	r3, r2
 801a15a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681a      	ldr	r2, [r3, #0]
 801a160:	69bb      	ldr	r3, [r7, #24]
 801a162:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 801a164:	69bb      	ldr	r3, [r7, #24]
 801a166:	691b      	ldr	r3, [r3, #16]
 801a168:	b29b      	uxth	r3, r3
 801a16a:	69fa      	ldr	r2, [r7, #28]
 801a16c:	4413      	add	r3, r2
 801a16e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801a170:	69bb      	ldr	r3, [r7, #24]
 801a172:	691b      	ldr	r3, [r3, #16]
 801a174:	0c1b      	lsrs	r3, r3, #16
 801a176:	69fa      	ldr	r2, [r7, #28]
 801a178:	4413      	add	r3, r2
 801a17a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a17c:	8afb      	ldrh	r3, [r7, #22]
 801a17e:	089b      	lsrs	r3, r3, #2
 801a180:	b29b      	uxth	r3, r3
 801a182:	b2db      	uxtb	r3, r3
 801a184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a188:	b2da      	uxtb	r2, r3
 801a18a:	69bb      	ldr	r3, [r7, #24]
 801a18c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a18e:	69bb      	ldr	r3, [r7, #24]
 801a190:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a194:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801a196:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a19a:	69bb      	ldr	r3, [r7, #24]
 801a19c:	781b      	ldrb	r3, [r3, #0]
 801a19e:	021b      	lsls	r3, r3, #8
 801a1a0:	4313      	orrs	r3, r2
 801a1a2:	021b      	lsls	r3, r3, #8
 801a1a4:	b21a      	sxth	r2, r3
 801a1a6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 801a1aa:	69bb      	ldr	r3, [r7, #24]
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	021b      	lsls	r3, r3, #8
 801a1b0:	430b      	orrs	r3, r1
 801a1b2:	121b      	asrs	r3, r3, #8
 801a1b4:	b21b      	sxth	r3, r3
 801a1b6:	b2db      	uxtb	r3, r3
 801a1b8:	b21b      	sxth	r3, r3
 801a1ba:	4313      	orrs	r3, r2
 801a1bc:	b21b      	sxth	r3, r3
 801a1be:	b29b      	uxth	r3, r3
 801a1c0:	461a      	mov	r2, r3
 801a1c2:	69fb      	ldr	r3, [r7, #28]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	891b      	ldrh	r3, [r3, #8]
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f7f4 fc47 	bl	800ea60 <lwip_htons>
 801a1d2:	4603      	mov	r3, r0
 801a1d4:	461a      	mov	r2, r3
 801a1d6:	69bb      	ldr	r3, [r7, #24]
 801a1d8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801a1da:	69bb      	ldr	r3, [r7, #24]
 801a1dc:	885b      	ldrh	r3, [r3, #2]
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	461a      	mov	r2, r3
 801a1e2:	69fb      	ldr	r3, [r7, #28]
 801a1e4:	4413      	add	r3, r2
 801a1e6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a1e8:	69bb      	ldr	r3, [r7, #24]
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	719a      	strb	r2, [r3, #6]
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a1f2:	4b3a      	ldr	r3, [pc, #232]	@ (801a2dc <ip4_output_if_src+0x220>)
 801a1f4:	881b      	ldrh	r3, [r3, #0]
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f7f4 fc32 	bl	800ea60 <lwip_htons>
 801a1fc:	4603      	mov	r3, r0
 801a1fe:	461a      	mov	r2, r3
 801a200:	69bb      	ldr	r3, [r7, #24]
 801a202:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 801a204:	69bb      	ldr	r3, [r7, #24]
 801a206:	889b      	ldrh	r3, [r3, #4]
 801a208:	b29b      	uxth	r3, r3
 801a20a:	461a      	mov	r2, r3
 801a20c:	69fb      	ldr	r3, [r7, #28]
 801a20e:	4413      	add	r3, r2
 801a210:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a212:	4b32      	ldr	r3, [pc, #200]	@ (801a2dc <ip4_output_if_src+0x220>)
 801a214:	881b      	ldrh	r3, [r3, #0]
 801a216:	3301      	adds	r3, #1
 801a218:	b29a      	uxth	r2, r3
 801a21a:	4b30      	ldr	r3, [pc, #192]	@ (801a2dc <ip4_output_if_src+0x220>)
 801a21c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a21e:	68bb      	ldr	r3, [r7, #8]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d104      	bne.n	801a22e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a224:	4b2e      	ldr	r3, [pc, #184]	@ (801a2e0 <ip4_output_if_src+0x224>)
 801a226:	681a      	ldr	r2, [r3, #0]
 801a228:	69bb      	ldr	r3, [r7, #24]
 801a22a:	60da      	str	r2, [r3, #12]
 801a22c:	e003      	b.n	801a236 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	681a      	ldr	r2, [r3, #0]
 801a232:	69bb      	ldr	r3, [r7, #24]
 801a234:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801a236:	69bb      	ldr	r3, [r7, #24]
 801a238:	68db      	ldr	r3, [r3, #12]
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	69fa      	ldr	r2, [r7, #28]
 801a23e:	4413      	add	r3, r2
 801a240:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801a242:	69bb      	ldr	r3, [r7, #24]
 801a244:	68db      	ldr	r3, [r3, #12]
 801a246:	0c1b      	lsrs	r3, r3, #16
 801a248:	69fa      	ldr	r2, [r7, #28]
 801a24a:	4413      	add	r3, r2
 801a24c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801a24e:	69fb      	ldr	r3, [r7, #28]
 801a250:	0c1a      	lsrs	r2, r3, #16
 801a252:	69fb      	ldr	r3, [r7, #28]
 801a254:	b29b      	uxth	r3, r3
 801a256:	4413      	add	r3, r2
 801a258:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801a25a:	69fb      	ldr	r3, [r7, #28]
 801a25c:	0c1b      	lsrs	r3, r3, #16
 801a25e:	69fa      	ldr	r2, [r7, #28]
 801a260:	4413      	add	r3, r2
 801a262:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 801a264:	69fb      	ldr	r3, [r7, #28]
 801a266:	43db      	mvns	r3, r3
 801a268:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801a26a:	69fb      	ldr	r3, [r7, #28]
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	69bb      	ldr	r3, [r7, #24]
 801a270:	815a      	strh	r2, [r3, #10]
 801a272:	e00f      	b.n	801a294 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	895b      	ldrh	r3, [r3, #10]
 801a278:	2b13      	cmp	r3, #19
 801a27a:	d802      	bhi.n	801a282 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a27c:	f06f 0301 	mvn.w	r3, #1
 801a280:	e020      	b.n	801a2c4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	685b      	ldr	r3, [r3, #4]
 801a286:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a288:	69bb      	ldr	r3, [r7, #24]
 801a28a:	691b      	ldr	r3, [r3, #16]
 801a28c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801a28e:	f107 0310 	add.w	r3, r7, #16
 801a292:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d00c      	beq.n	801a2b6 <ip4_output_if_src+0x1fa>
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	891a      	ldrh	r2, [r3, #8]
 801a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	d906      	bls.n	801a2b6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 801a2a8:	687a      	ldr	r2, [r7, #4]
 801a2aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a2ac:	68f8      	ldr	r0, [r7, #12]
 801a2ae:	f000 fd5b 	bl	801ad68 <ip4_frag>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	e006      	b.n	801a2c4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2b8:	695b      	ldr	r3, [r3, #20]
 801a2ba:	687a      	ldr	r2, [r7, #4]
 801a2bc:	68f9      	ldr	r1, [r7, #12]
 801a2be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a2c0:	4798      	blx	r3
 801a2c2:	4603      	mov	r3, r0
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	3720      	adds	r7, #32
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}
 801a2cc:	08021918 	.word	0x08021918
 801a2d0:	0802194c 	.word	0x0802194c
 801a2d4:	08021958 	.word	0x08021958
 801a2d8:	08021980 	.word	0x08021980
 801a2dc:	20013e9a 	.word	0x20013e9a
 801a2e0:	0806da60 	.word	0x0806da60

0801a2e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a2e4:	b480      	push	{r7}
 801a2e6:	b085      	sub	sp, #20
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
 801a2ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2f8:	d002      	beq.n	801a300 <ip4_addr_isbroadcast_u32+0x1c>
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d101      	bne.n	801a304 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a300:	2301      	movs	r3, #1
 801a302:	e02a      	b.n	801a35a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a30a:	f003 0302 	and.w	r3, r3, #2
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d101      	bne.n	801a316 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a312:	2300      	movs	r3, #0
 801a314:	e021      	b.n	801a35a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a316:	683b      	ldr	r3, [r7, #0]
 801a318:	3304      	adds	r3, #4
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	687a      	ldr	r2, [r7, #4]
 801a31e:	429a      	cmp	r2, r3
 801a320:	d101      	bne.n	801a326 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a322:	2300      	movs	r3, #0
 801a324:	e019      	b.n	801a35a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a326:	68fa      	ldr	r2, [r7, #12]
 801a328:	683b      	ldr	r3, [r7, #0]
 801a32a:	3304      	adds	r3, #4
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	405a      	eors	r2, r3
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	3308      	adds	r3, #8
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	4013      	ands	r3, r2
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d10d      	bne.n	801a358 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a33c:	683b      	ldr	r3, [r7, #0]
 801a33e:	3308      	adds	r3, #8
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	43da      	mvns	r2, r3
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a348:	683b      	ldr	r3, [r7, #0]
 801a34a:	3308      	adds	r3, #8
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a350:	429a      	cmp	r2, r3
 801a352:	d101      	bne.n	801a358 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a354:	2301      	movs	r3, #1
 801a356:	e000      	b.n	801a35a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a358:	2300      	movs	r3, #0
  }
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	3714      	adds	r7, #20
 801a35e:	46bd      	mov	sp, r7
 801a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a364:	4770      	bx	lr
	...

0801a368 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b084      	sub	sp, #16
 801a36c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a36e:	2300      	movs	r3, #0
 801a370:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a372:	4b12      	ldr	r3, [pc, #72]	@ (801a3bc <ip_reass_tmr+0x54>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a378:	e018      	b.n	801a3ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	7fdb      	ldrb	r3, [r3, #31]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d00b      	beq.n	801a39a <ip_reass_tmr+0x32>
      r->timer--;
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	7fdb      	ldrb	r3, [r3, #31]
 801a386:	3b01      	subs	r3, #1
 801a388:	b2da      	uxtb	r2, r3
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	60fb      	str	r3, [r7, #12]
 801a398:	e008      	b.n	801a3ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a3a4:	68b9      	ldr	r1, [r7, #8]
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	f000 f80a 	bl	801a3c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d1e3      	bne.n	801a37a <ip_reass_tmr+0x12>
    }
  }
}
 801a3b2:	bf00      	nop
 801a3b4:	bf00      	nop
 801a3b6:	3710      	adds	r7, #16
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}
 801a3bc:	20013e9c 	.word	0x20013e9c

0801a3c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b088      	sub	sp, #32
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
 801a3c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a3ce:	683a      	ldr	r2, [r7, #0]
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	429a      	cmp	r2, r3
 801a3d4:	d105      	bne.n	801a3e2 <ip_reass_free_complete_datagram+0x22>
 801a3d6:	4b45      	ldr	r3, [pc, #276]	@ (801a4ec <ip_reass_free_complete_datagram+0x12c>)
 801a3d8:	22ab      	movs	r2, #171	@ 0xab
 801a3da:	4945      	ldr	r1, [pc, #276]	@ (801a4f0 <ip_reass_free_complete_datagram+0x130>)
 801a3dc:	4845      	ldr	r0, [pc, #276]	@ (801a4f4 <ip_reass_free_complete_datagram+0x134>)
 801a3de:	f001 fe9f 	bl	801c120 <iprintf>
  if (prev != NULL) {
 801a3e2:	683b      	ldr	r3, [r7, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d00a      	beq.n	801a3fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	687a      	ldr	r2, [r7, #4]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	d005      	beq.n	801a3fe <ip_reass_free_complete_datagram+0x3e>
 801a3f2:	4b3e      	ldr	r3, [pc, #248]	@ (801a4ec <ip_reass_free_complete_datagram+0x12c>)
 801a3f4:	22ad      	movs	r2, #173	@ 0xad
 801a3f6:	4940      	ldr	r1, [pc, #256]	@ (801a4f8 <ip_reass_free_complete_datagram+0x138>)
 801a3f8:	483e      	ldr	r0, [pc, #248]	@ (801a4f4 <ip_reass_free_complete_datagram+0x134>)
 801a3fa:	f001 fe91 	bl	801c120 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	685b      	ldr	r3, [r3, #4]
 801a402:	685b      	ldr	r3, [r3, #4]
 801a404:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a406:	697b      	ldr	r3, [r7, #20]
 801a408:	889b      	ldrh	r3, [r3, #4]
 801a40a:	b29b      	uxth	r3, r3
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d12a      	bne.n	801a466 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	685b      	ldr	r3, [r3, #4]
 801a414:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a416:	697b      	ldr	r3, [r7, #20]
 801a418:	681a      	ldr	r2, [r3, #0]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a41e:	69bb      	ldr	r3, [r7, #24]
 801a420:	6858      	ldr	r0, [r3, #4]
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	3308      	adds	r3, #8
 801a426:	2214      	movs	r2, #20
 801a428:	4619      	mov	r1, r3
 801a42a:	f002 f898 	bl	801c55e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a42e:	2101      	movs	r1, #1
 801a430:	69b8      	ldr	r0, [r7, #24]
 801a432:	f7ff fbad 	bl	8019b90 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a436:	69b8      	ldr	r0, [r7, #24]
 801a438:	f7f6 f8c2 	bl	80105c0 <pbuf_clen>
 801a43c:	4603      	mov	r3, r0
 801a43e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a440:	8bfa      	ldrh	r2, [r7, #30]
 801a442:	8a7b      	ldrh	r3, [r7, #18]
 801a444:	4413      	add	r3, r2
 801a446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a44a:	db05      	blt.n	801a458 <ip_reass_free_complete_datagram+0x98>
 801a44c:	4b27      	ldr	r3, [pc, #156]	@ (801a4ec <ip_reass_free_complete_datagram+0x12c>)
 801a44e:	22bc      	movs	r2, #188	@ 0xbc
 801a450:	492a      	ldr	r1, [pc, #168]	@ (801a4fc <ip_reass_free_complete_datagram+0x13c>)
 801a452:	4828      	ldr	r0, [pc, #160]	@ (801a4f4 <ip_reass_free_complete_datagram+0x134>)
 801a454:	f001 fe64 	bl	801c120 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a458:	8bfa      	ldrh	r2, [r7, #30]
 801a45a:	8a7b      	ldrh	r3, [r7, #18]
 801a45c:	4413      	add	r3, r2
 801a45e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a460:	69b8      	ldr	r0, [r7, #24]
 801a462:	f7f6 f81f 	bl	80104a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	685b      	ldr	r3, [r3, #4]
 801a46a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a46c:	e01f      	b.n	801a4ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a46e:	69bb      	ldr	r3, [r7, #24]
 801a470:	685b      	ldr	r3, [r3, #4]
 801a472:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a474:	69bb      	ldr	r3, [r7, #24]
 801a476:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a47e:	68f8      	ldr	r0, [r7, #12]
 801a480:	f7f6 f89e 	bl	80105c0 <pbuf_clen>
 801a484:	4603      	mov	r3, r0
 801a486:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a488:	8bfa      	ldrh	r2, [r7, #30]
 801a48a:	8a7b      	ldrh	r3, [r7, #18]
 801a48c:	4413      	add	r3, r2
 801a48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a492:	db05      	blt.n	801a4a0 <ip_reass_free_complete_datagram+0xe0>
 801a494:	4b15      	ldr	r3, [pc, #84]	@ (801a4ec <ip_reass_free_complete_datagram+0x12c>)
 801a496:	22cc      	movs	r2, #204	@ 0xcc
 801a498:	4918      	ldr	r1, [pc, #96]	@ (801a4fc <ip_reass_free_complete_datagram+0x13c>)
 801a49a:	4816      	ldr	r0, [pc, #88]	@ (801a4f4 <ip_reass_free_complete_datagram+0x134>)
 801a49c:	f001 fe40 	bl	801c120 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a4a0:	8bfa      	ldrh	r2, [r7, #30]
 801a4a2:	8a7b      	ldrh	r3, [r7, #18]
 801a4a4:	4413      	add	r3, r2
 801a4a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a4a8:	68f8      	ldr	r0, [r7, #12]
 801a4aa:	f7f5 fffb 	bl	80104a4 <pbuf_free>
  while (p != NULL) {
 801a4ae:	69bb      	ldr	r3, [r7, #24]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d1dc      	bne.n	801a46e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a4b4:	6839      	ldr	r1, [r7, #0]
 801a4b6:	6878      	ldr	r0, [r7, #4]
 801a4b8:	f000 f8c2 	bl	801a640 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a4bc:	4b10      	ldr	r3, [pc, #64]	@ (801a500 <ip_reass_free_complete_datagram+0x140>)
 801a4be:	881b      	ldrh	r3, [r3, #0]
 801a4c0:	8bfa      	ldrh	r2, [r7, #30]
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	d905      	bls.n	801a4d2 <ip_reass_free_complete_datagram+0x112>
 801a4c6:	4b09      	ldr	r3, [pc, #36]	@ (801a4ec <ip_reass_free_complete_datagram+0x12c>)
 801a4c8:	22d2      	movs	r2, #210	@ 0xd2
 801a4ca:	490e      	ldr	r1, [pc, #56]	@ (801a504 <ip_reass_free_complete_datagram+0x144>)
 801a4cc:	4809      	ldr	r0, [pc, #36]	@ (801a4f4 <ip_reass_free_complete_datagram+0x134>)
 801a4ce:	f001 fe27 	bl	801c120 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a4d2:	4b0b      	ldr	r3, [pc, #44]	@ (801a500 <ip_reass_free_complete_datagram+0x140>)
 801a4d4:	881a      	ldrh	r2, [r3, #0]
 801a4d6:	8bfb      	ldrh	r3, [r7, #30]
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	b29a      	uxth	r2, r3
 801a4dc:	4b08      	ldr	r3, [pc, #32]	@ (801a500 <ip_reass_free_complete_datagram+0x140>)
 801a4de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a4e0:	8bfb      	ldrh	r3, [r7, #30]
}
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	3720      	adds	r7, #32
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	bd80      	pop	{r7, pc}
 801a4ea:	bf00      	nop
 801a4ec:	080219b0 	.word	0x080219b0
 801a4f0:	080219ec 	.word	0x080219ec
 801a4f4:	080219f8 	.word	0x080219f8
 801a4f8:	08021a20 	.word	0x08021a20
 801a4fc:	08021a34 	.word	0x08021a34
 801a500:	20013ea0 	.word	0x20013ea0
 801a504:	08021a54 	.word	0x08021a54

0801a508 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b08a      	sub	sp, #40	@ 0x28
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
 801a510:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a512:	2300      	movs	r3, #0
 801a514:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a516:	2300      	movs	r3, #0
 801a518:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a51a:	2300      	movs	r3, #0
 801a51c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a51e:	2300      	movs	r3, #0
 801a520:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a522:	2300      	movs	r3, #0
 801a524:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a526:	4b28      	ldr	r3, [pc, #160]	@ (801a5c8 <ip_reass_remove_oldest_datagram+0xc0>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a52c:	e030      	b.n	801a590 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a530:	695a      	ldr	r2, [r3, #20]
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	68db      	ldr	r3, [r3, #12]
 801a536:	429a      	cmp	r2, r3
 801a538:	d10c      	bne.n	801a554 <ip_reass_remove_oldest_datagram+0x4c>
 801a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a53c:	699a      	ldr	r2, [r3, #24]
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	691b      	ldr	r3, [r3, #16]
 801a542:	429a      	cmp	r2, r3
 801a544:	d106      	bne.n	801a554 <ip_reass_remove_oldest_datagram+0x4c>
 801a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a548:	899a      	ldrh	r2, [r3, #12]
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	889b      	ldrh	r3, [r3, #4]
 801a54e:	b29b      	uxth	r3, r3
 801a550:	429a      	cmp	r2, r3
 801a552:	d014      	beq.n	801a57e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a554:	693b      	ldr	r3, [r7, #16]
 801a556:	3301      	adds	r3, #1
 801a558:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a55a:	6a3b      	ldr	r3, [r7, #32]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d104      	bne.n	801a56a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a562:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a564:	69fb      	ldr	r3, [r7, #28]
 801a566:	61bb      	str	r3, [r7, #24]
 801a568:	e009      	b.n	801a57e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a56c:	7fda      	ldrb	r2, [r3, #31]
 801a56e:	6a3b      	ldr	r3, [r7, #32]
 801a570:	7fdb      	ldrb	r3, [r3, #31]
 801a572:	429a      	cmp	r2, r3
 801a574:	d803      	bhi.n	801a57e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a578:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a57a:	69fb      	ldr	r3, [r7, #28]
 801a57c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d001      	beq.n	801a58a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a588:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a592:	2b00      	cmp	r3, #0
 801a594:	d1cb      	bne.n	801a52e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a596:	6a3b      	ldr	r3, [r7, #32]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d008      	beq.n	801a5ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a59c:	69b9      	ldr	r1, [r7, #24]
 801a59e:	6a38      	ldr	r0, [r7, #32]
 801a5a0:	f7ff ff0e 	bl	801a3c0 <ip_reass_free_complete_datagram>
 801a5a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a5a6:	697a      	ldr	r2, [r7, #20]
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	4413      	add	r3, r2
 801a5ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a5ae:	697a      	ldr	r2, [r7, #20]
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	429a      	cmp	r2, r3
 801a5b4:	da02      	bge.n	801a5bc <ip_reass_remove_oldest_datagram+0xb4>
 801a5b6:	693b      	ldr	r3, [r7, #16]
 801a5b8:	2b01      	cmp	r3, #1
 801a5ba:	dcac      	bgt.n	801a516 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a5bc:	697b      	ldr	r3, [r7, #20]
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3728      	adds	r7, #40	@ 0x28
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	20013e9c 	.word	0x20013e9c

0801a5cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a5d6:	2004      	movs	r0, #4
 801a5d8:	f7f5 f870 	bl	800f6bc <memp_malloc>
 801a5dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d110      	bne.n	801a606 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a5e4:	6839      	ldr	r1, [r7, #0]
 801a5e6:	6878      	ldr	r0, [r7, #4]
 801a5e8:	f7ff ff8e 	bl	801a508 <ip_reass_remove_oldest_datagram>
 801a5ec:	4602      	mov	r2, r0
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	dc03      	bgt.n	801a5fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a5f4:	2004      	movs	r0, #4
 801a5f6:	f7f5 f861 	bl	800f6bc <memp_malloc>
 801a5fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d101      	bne.n	801a606 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a602:	2300      	movs	r3, #0
 801a604:	e016      	b.n	801a634 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a606:	2220      	movs	r2, #32
 801a608:	2100      	movs	r1, #0
 801a60a:	68f8      	ldr	r0, [r7, #12]
 801a60c:	f001 feea 	bl	801c3e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	220f      	movs	r2, #15
 801a614:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a616:	4b09      	ldr	r3, [pc, #36]	@ (801a63c <ip_reass_enqueue_new_datagram+0x70>)
 801a618:	681a      	ldr	r2, [r3, #0]
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a61e:	4a07      	ldr	r2, [pc, #28]	@ (801a63c <ip_reass_enqueue_new_datagram+0x70>)
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	3308      	adds	r3, #8
 801a628:	2214      	movs	r2, #20
 801a62a:	6879      	ldr	r1, [r7, #4]
 801a62c:	4618      	mov	r0, r3
 801a62e:	f001 ff96 	bl	801c55e <memcpy>
  return ipr;
 801a632:	68fb      	ldr	r3, [r7, #12]
}
 801a634:	4618      	mov	r0, r3
 801a636:	3710      	adds	r7, #16
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}
 801a63c:	20013e9c 	.word	0x20013e9c

0801a640 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b082      	sub	sp, #8
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
 801a648:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a64a:	4b10      	ldr	r3, [pc, #64]	@ (801a68c <ip_reass_dequeue_datagram+0x4c>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	687a      	ldr	r2, [r7, #4]
 801a650:	429a      	cmp	r2, r3
 801a652:	d104      	bne.n	801a65e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	4a0c      	ldr	r2, [pc, #48]	@ (801a68c <ip_reass_dequeue_datagram+0x4c>)
 801a65a:	6013      	str	r3, [r2, #0]
 801a65c:	e00d      	b.n	801a67a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	2b00      	cmp	r3, #0
 801a662:	d106      	bne.n	801a672 <ip_reass_dequeue_datagram+0x32>
 801a664:	4b0a      	ldr	r3, [pc, #40]	@ (801a690 <ip_reass_dequeue_datagram+0x50>)
 801a666:	f240 1245 	movw	r2, #325	@ 0x145
 801a66a:	490a      	ldr	r1, [pc, #40]	@ (801a694 <ip_reass_dequeue_datagram+0x54>)
 801a66c:	480a      	ldr	r0, [pc, #40]	@ (801a698 <ip_reass_dequeue_datagram+0x58>)
 801a66e:	f001 fd57 	bl	801c120 <iprintf>
    prev->next = ipr->next;
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681a      	ldr	r2, [r3, #0]
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a67a:	6879      	ldr	r1, [r7, #4]
 801a67c:	2004      	movs	r0, #4
 801a67e:	f7f5 f86f 	bl	800f760 <memp_free>
}
 801a682:	bf00      	nop
 801a684:	3708      	adds	r7, #8
 801a686:	46bd      	mov	sp, r7
 801a688:	bd80      	pop	{r7, pc}
 801a68a:	bf00      	nop
 801a68c:	20013e9c 	.word	0x20013e9c
 801a690:	080219b0 	.word	0x080219b0
 801a694:	08021a78 	.word	0x08021a78
 801a698:	080219f8 	.word	0x080219f8

0801a69c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b08c      	sub	sp, #48	@ 0x30
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	60f8      	str	r0, [r7, #12]
 801a6a4:	60b9      	str	r1, [r7, #8]
 801a6a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	685b      	ldr	r3, [r3, #4]
 801a6b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a6b6:	69fb      	ldr	r3, [r7, #28]
 801a6b8:	885b      	ldrh	r3, [r3, #2]
 801a6ba:	b29b      	uxth	r3, r3
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f7f4 f9cf 	bl	800ea60 <lwip_htons>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a6c6:	69fb      	ldr	r3, [r7, #28]
 801a6c8:	781b      	ldrb	r3, [r3, #0]
 801a6ca:	f003 030f 	and.w	r3, r3, #15
 801a6ce:	b2db      	uxtb	r3, r3
 801a6d0:	009b      	lsls	r3, r3, #2
 801a6d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a6d4:	7e7b      	ldrb	r3, [r7, #25]
 801a6d6:	b29b      	uxth	r3, r3
 801a6d8:	8b7a      	ldrh	r2, [r7, #26]
 801a6da:	429a      	cmp	r2, r3
 801a6dc:	d202      	bcs.n	801a6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a6de:	f04f 33ff 	mov.w	r3, #4294967295
 801a6e2:	e135      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a6e4:	7e7b      	ldrb	r3, [r7, #25]
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	8b7a      	ldrh	r2, [r7, #26]
 801a6ea:	1ad3      	subs	r3, r2, r3
 801a6ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a6ee:	69fb      	ldr	r3, [r7, #28]
 801a6f0:	88db      	ldrh	r3, [r3, #6]
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	f7f4 f9b3 	bl	800ea60 <lwip_htons>
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a700:	b29b      	uxth	r3, r3
 801a702:	00db      	lsls	r3, r3, #3
 801a704:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	685b      	ldr	r3, [r3, #4]
 801a70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801a70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a70e:	2200      	movs	r2, #0
 801a710:	701a      	strb	r2, [r3, #0]
 801a712:	2200      	movs	r2, #0
 801a714:	705a      	strb	r2, [r3, #1]
 801a716:	2200      	movs	r2, #0
 801a718:	709a      	strb	r2, [r3, #2]
 801a71a:	2200      	movs	r2, #0
 801a71c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a720:	8afa      	ldrh	r2, [r7, #22]
 801a722:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a724:	8afa      	ldrh	r2, [r7, #22]
 801a726:	8b7b      	ldrh	r3, [r7, #26]
 801a728:	4413      	add	r3, r2
 801a72a:	b29a      	uxth	r2, r3
 801a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a72e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a732:	88db      	ldrh	r3, [r3, #6]
 801a734:	b29b      	uxth	r3, r3
 801a736:	8afa      	ldrh	r2, [r7, #22]
 801a738:	429a      	cmp	r2, r3
 801a73a:	d902      	bls.n	801a742 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a73c:	f04f 33ff 	mov.w	r3, #4294967295
 801a740:	e106      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	685b      	ldr	r3, [r3, #4]
 801a746:	627b      	str	r3, [r7, #36]	@ 0x24
 801a748:	e068      	b.n	801a81c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a74c:	685b      	ldr	r3, [r3, #4]
 801a74e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a752:	889b      	ldrh	r3, [r3, #4]
 801a754:	b29a      	uxth	r2, r3
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	889b      	ldrh	r3, [r3, #4]
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d235      	bcs.n	801a7cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a764:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d020      	beq.n	801a7ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a76e:	889b      	ldrh	r3, [r3, #4]
 801a770:	b29a      	uxth	r2, r3
 801a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a774:	88db      	ldrh	r3, [r3, #6]
 801a776:	b29b      	uxth	r3, r3
 801a778:	429a      	cmp	r2, r3
 801a77a:	d307      	bcc.n	801a78c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a77e:	88db      	ldrh	r3, [r3, #6]
 801a780:	b29a      	uxth	r2, r3
 801a782:	693b      	ldr	r3, [r7, #16]
 801a784:	889b      	ldrh	r3, [r3, #4]
 801a786:	b29b      	uxth	r3, r3
 801a788:	429a      	cmp	r2, r3
 801a78a:	d902      	bls.n	801a792 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a78c:	f04f 33ff 	mov.w	r3, #4294967295
 801a790:	e0de      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a794:	68ba      	ldr	r2, [r7, #8]
 801a796:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a79a:	88db      	ldrh	r3, [r3, #6]
 801a79c:	b29a      	uxth	r2, r3
 801a79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7a0:	889b      	ldrh	r3, [r3, #4]
 801a7a2:	b29b      	uxth	r3, r3
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d03d      	beq.n	801a824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a7ac:	e03a      	b.n	801a824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7b0:	88db      	ldrh	r3, [r3, #6]
 801a7b2:	b29a      	uxth	r2, r3
 801a7b4:	693b      	ldr	r3, [r7, #16]
 801a7b6:	889b      	ldrh	r3, [r3, #4]
 801a7b8:	b29b      	uxth	r3, r3
 801a7ba:	429a      	cmp	r2, r3
 801a7bc:	d902      	bls.n	801a7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a7be:	f04f 33ff 	mov.w	r3, #4294967295
 801a7c2:	e0c5      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	68ba      	ldr	r2, [r7, #8]
 801a7c8:	605a      	str	r2, [r3, #4]
      break;
 801a7ca:	e02b      	b.n	801a824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ce:	889b      	ldrh	r3, [r3, #4]
 801a7d0:	b29a      	uxth	r2, r3
 801a7d2:	693b      	ldr	r3, [r7, #16]
 801a7d4:	889b      	ldrh	r3, [r3, #4]
 801a7d6:	b29b      	uxth	r3, r3
 801a7d8:	429a      	cmp	r2, r3
 801a7da:	d102      	bne.n	801a7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a7dc:	f04f 33ff 	mov.w	r3, #4294967295
 801a7e0:	e0b6      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7e4:	889b      	ldrh	r3, [r3, #4]
 801a7e6:	b29a      	uxth	r2, r3
 801a7e8:	693b      	ldr	r3, [r7, #16]
 801a7ea:	88db      	ldrh	r3, [r3, #6]
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	429a      	cmp	r2, r3
 801a7f0:	d202      	bcs.n	801a7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a7f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a7f6:	e0ab      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d009      	beq.n	801a812 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a800:	88db      	ldrh	r3, [r3, #6]
 801a802:	b29a      	uxth	r2, r3
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	889b      	ldrh	r3, [r3, #4]
 801a808:	b29b      	uxth	r3, r3
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d001      	beq.n	801a812 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a80e:	2300      	movs	r3, #0
 801a810:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a812:	693b      	ldr	r3, [r7, #16]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a818:	693b      	ldr	r3, [r7, #16]
 801a81a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d193      	bne.n	801a74a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a822:	e000      	b.n	801a826 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a824:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d12d      	bne.n	801a888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d01c      	beq.n	801a86c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a834:	88db      	ldrh	r3, [r3, #6]
 801a836:	b29a      	uxth	r2, r3
 801a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a83a:	889b      	ldrh	r3, [r3, #4]
 801a83c:	b29b      	uxth	r3, r3
 801a83e:	429a      	cmp	r2, r3
 801a840:	d906      	bls.n	801a850 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a842:	4b45      	ldr	r3, [pc, #276]	@ (801a958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a844:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a848:	4944      	ldr	r1, [pc, #272]	@ (801a95c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a84a:	4845      	ldr	r0, [pc, #276]	@ (801a960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a84c:	f001 fc68 	bl	801c120 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a852:	68ba      	ldr	r2, [r7, #8]
 801a854:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a858:	88db      	ldrh	r3, [r3, #6]
 801a85a:	b29a      	uxth	r2, r3
 801a85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a85e:	889b      	ldrh	r3, [r3, #4]
 801a860:	b29b      	uxth	r3, r3
 801a862:	429a      	cmp	r2, r3
 801a864:	d010      	beq.n	801a888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a866:	2300      	movs	r3, #0
 801a868:	623b      	str	r3, [r7, #32]
 801a86a:	e00d      	b.n	801a888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	685b      	ldr	r3, [r3, #4]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d006      	beq.n	801a882 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a874:	4b38      	ldr	r3, [pc, #224]	@ (801a958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a876:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a87a:	493a      	ldr	r1, [pc, #232]	@ (801a964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a87c:	4838      	ldr	r0, [pc, #224]	@ (801a960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a87e:	f001 fc4f 	bl	801c120 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	68ba      	ldr	r2, [r7, #8]
 801a886:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d105      	bne.n	801a89a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	7f9b      	ldrb	r3, [r3, #30]
 801a892:	f003 0301 	and.w	r3, r3, #1
 801a896:	2b00      	cmp	r3, #0
 801a898:	d059      	beq.n	801a94e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a89a:	6a3b      	ldr	r3, [r7, #32]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d04f      	beq.n	801a940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d006      	beq.n	801a8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	685b      	ldr	r3, [r3, #4]
 801a8ac:	685b      	ldr	r3, [r3, #4]
 801a8ae:	889b      	ldrh	r3, [r3, #4]
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d002      	beq.n	801a8bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	623b      	str	r3, [r7, #32]
 801a8ba:	e041      	b.n	801a940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8be:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a8c6:	e012      	b.n	801a8ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8d0:	88db      	ldrh	r3, [r3, #6]
 801a8d2:	b29a      	uxth	r2, r3
 801a8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8d6:	889b      	ldrh	r3, [r3, #4]
 801a8d8:	b29b      	uxth	r3, r3
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d002      	beq.n	801a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a8de:	2300      	movs	r3, #0
 801a8e0:	623b      	str	r3, [r7, #32]
            break;
 801a8e2:	e007      	b.n	801a8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d1e9      	bne.n	801a8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a8f4:	6a3b      	ldr	r3, [r7, #32]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d022      	beq.n	801a940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	685b      	ldr	r3, [r3, #4]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d106      	bne.n	801a910 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a902:	4b15      	ldr	r3, [pc, #84]	@ (801a958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a904:	f240 12df 	movw	r2, #479	@ 0x1df
 801a908:	4917      	ldr	r1, [pc, #92]	@ (801a968 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a90a:	4815      	ldr	r0, [pc, #84]	@ (801a960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a90c:	f001 fc08 	bl	801c120 <iprintf>
          LWIP_ASSERT("sanity check",
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	685b      	ldr	r3, [r3, #4]
 801a914:	685b      	ldr	r3, [r3, #4]
 801a916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a918:	429a      	cmp	r2, r3
 801a91a:	d106      	bne.n	801a92a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a91c:	4b0e      	ldr	r3, [pc, #56]	@ (801a958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a91e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a922:	4911      	ldr	r1, [pc, #68]	@ (801a968 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a924:	480e      	ldr	r0, [pc, #56]	@ (801a960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a926:	f001 fbfb 	bl	801c120 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d006      	beq.n	801a940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a932:	4b09      	ldr	r3, [pc, #36]	@ (801a958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a934:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a938:	490c      	ldr	r1, [pc, #48]	@ (801a96c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a93a:	4809      	ldr	r0, [pc, #36]	@ (801a960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a93c:	f001 fbf0 	bl	801c120 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a940:	6a3b      	ldr	r3, [r7, #32]
 801a942:	2b00      	cmp	r3, #0
 801a944:	bf14      	ite	ne
 801a946:	2301      	movne	r3, #1
 801a948:	2300      	moveq	r3, #0
 801a94a:	b2db      	uxtb	r3, r3
 801a94c:	e000      	b.n	801a950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a94e:	2300      	movs	r3, #0
}
 801a950:	4618      	mov	r0, r3
 801a952:	3730      	adds	r7, #48	@ 0x30
 801a954:	46bd      	mov	sp, r7
 801a956:	bd80      	pop	{r7, pc}
 801a958:	080219b0 	.word	0x080219b0
 801a95c:	08021a94 	.word	0x08021a94
 801a960:	080219f8 	.word	0x080219f8
 801a964:	08021ab4 	.word	0x08021ab4
 801a968:	08021aec 	.word	0x08021aec
 801a96c:	08021afc 	.word	0x08021afc

0801a970 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b08e      	sub	sp, #56	@ 0x38
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	685b      	ldr	r3, [r3, #4]
 801a97c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a980:	781b      	ldrb	r3, [r3, #0]
 801a982:	f003 030f 	and.w	r3, r3, #15
 801a986:	b2db      	uxtb	r3, r3
 801a988:	009b      	lsls	r3, r3, #2
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	2b14      	cmp	r3, #20
 801a98e:	f040 8179 	bne.w	801ac84 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a994:	88db      	ldrh	r3, [r3, #6]
 801a996:	b29b      	uxth	r3, r3
 801a998:	4618      	mov	r0, r3
 801a99a:	f7f4 f861 	bl	800ea60 <lwip_htons>
 801a99e:	4603      	mov	r3, r0
 801a9a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9a4:	b29b      	uxth	r3, r3
 801a9a6:	00db      	lsls	r3, r3, #3
 801a9a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9ac:	885b      	ldrh	r3, [r3, #2]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	f7f4 f855 	bl	800ea60 <lwip_htons>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9bc:	781b      	ldrb	r3, [r3, #0]
 801a9be:	f003 030f 	and.w	r3, r3, #15
 801a9c2:	b2db      	uxtb	r3, r3
 801a9c4:	009b      	lsls	r3, r3, #2
 801a9c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a9ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	f0c0 8158 	bcc.w	801ac88 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a9d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a9dc:	b29b      	uxth	r3, r3
 801a9de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a9e0:	1ad3      	subs	r3, r2, r3
 801a9e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a9e4:	6878      	ldr	r0, [r7, #4]
 801a9e6:	f7f5 fdeb 	bl	80105c0 <pbuf_clen>
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a9ee:	4b90      	ldr	r3, [pc, #576]	@ (801ac30 <ip4_reass+0x2c0>)
 801a9f0:	881b      	ldrh	r3, [r3, #0]
 801a9f2:	461a      	mov	r2, r3
 801a9f4:	8c3b      	ldrh	r3, [r7, #32]
 801a9f6:	4413      	add	r3, r2
 801a9f8:	2b0a      	cmp	r3, #10
 801a9fa:	dd10      	ble.n	801aa1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a9fc:	8c3b      	ldrh	r3, [r7, #32]
 801a9fe:	4619      	mov	r1, r3
 801aa00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801aa02:	f7ff fd81 	bl	801a508 <ip_reass_remove_oldest_datagram>
 801aa06:	4603      	mov	r3, r0
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	f000 813f 	beq.w	801ac8c <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801aa0e:	4b88      	ldr	r3, [pc, #544]	@ (801ac30 <ip4_reass+0x2c0>)
 801aa10:	881b      	ldrh	r3, [r3, #0]
 801aa12:	461a      	mov	r2, r3
 801aa14:	8c3b      	ldrh	r3, [r7, #32]
 801aa16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801aa18:	2b0a      	cmp	r3, #10
 801aa1a:	f300 8137 	bgt.w	801ac8c <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801aa1e:	4b85      	ldr	r3, [pc, #532]	@ (801ac34 <ip4_reass+0x2c4>)
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	633b      	str	r3, [r7, #48]	@ 0x30
 801aa24:	e015      	b.n	801aa52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa28:	695a      	ldr	r2, [r3, #20]
 801aa2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa2c:	68db      	ldr	r3, [r3, #12]
 801aa2e:	429a      	cmp	r2, r3
 801aa30:	d10c      	bne.n	801aa4c <ip4_reass+0xdc>
 801aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa34:	699a      	ldr	r2, [r3, #24]
 801aa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa38:	691b      	ldr	r3, [r3, #16]
 801aa3a:	429a      	cmp	r2, r3
 801aa3c:	d106      	bne.n	801aa4c <ip4_reass+0xdc>
 801aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa40:	899a      	ldrh	r2, [r3, #12]
 801aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa44:	889b      	ldrh	r3, [r3, #4]
 801aa46:	b29b      	uxth	r3, r3
 801aa48:	429a      	cmp	r2, r3
 801aa4a:	d006      	beq.n	801aa5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	633b      	str	r3, [r7, #48]	@ 0x30
 801aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d1e6      	bne.n	801aa26 <ip4_reass+0xb6>
 801aa58:	e000      	b.n	801aa5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801aa5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d109      	bne.n	801aa76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801aa62:	8c3b      	ldrh	r3, [r7, #32]
 801aa64:	4619      	mov	r1, r3
 801aa66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801aa68:	f7ff fdb0 	bl	801a5cc <ip_reass_enqueue_new_datagram>
 801aa6c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d11c      	bne.n	801aaae <ip4_reass+0x13e>
      goto nullreturn;
 801aa74:	e10d      	b.n	801ac92 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aa76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa78:	88db      	ldrh	r3, [r3, #6]
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	f7f3 ffef 	bl	800ea60 <lwip_htons>
 801aa82:	4603      	mov	r3, r0
 801aa84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d110      	bne.n	801aaae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801aa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa8e:	89db      	ldrh	r3, [r3, #14]
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7f3 ffe5 	bl	800ea60 <lwip_htons>
 801aa96:	4603      	mov	r3, r0
 801aa98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d006      	beq.n	801aaae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaa2:	3308      	adds	r3, #8
 801aaa4:	2214      	movs	r2, #20
 801aaa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f001 fd58 	bl	801c55e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801aaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aab0:	88db      	ldrh	r3, [r3, #6]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	f003 0320 	and.w	r3, r3, #32
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	bf0c      	ite	eq
 801aabc:	2301      	moveq	r3, #1
 801aabe:	2300      	movne	r3, #0
 801aac0:	b2db      	uxtb	r3, r3
 801aac2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801aac4:	69fb      	ldr	r3, [r7, #28]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d00e      	beq.n	801aae8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801aaca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801aacc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aace:	4413      	add	r3, r2
 801aad0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801aad2:	8b7a      	ldrh	r2, [r7, #26]
 801aad4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801aad6:	429a      	cmp	r2, r3
 801aad8:	f0c0 80a8 	bcc.w	801ac2c <ip4_reass+0x2bc>
 801aadc:	8b7b      	ldrh	r3, [r7, #26]
 801aade:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801aae2:	4293      	cmp	r3, r2
 801aae4:	f200 80a2 	bhi.w	801ac2c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801aae8:	69fa      	ldr	r2, [r7, #28]
 801aaea:	6879      	ldr	r1, [r7, #4]
 801aaec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801aaee:	f7ff fdd5 	bl	801a69c <ip_reass_chain_frag_into_datagram_and_validate>
 801aaf2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801aaf4:	697b      	ldr	r3, [r7, #20]
 801aaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aafa:	f000 80a3 	beq.w	801ac44 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801aafe:	4b4c      	ldr	r3, [pc, #304]	@ (801ac30 <ip4_reass+0x2c0>)
 801ab00:	881a      	ldrh	r2, [r3, #0]
 801ab02:	8c3b      	ldrh	r3, [r7, #32]
 801ab04:	4413      	add	r3, r2
 801ab06:	b29a      	uxth	r2, r3
 801ab08:	4b49      	ldr	r3, [pc, #292]	@ (801ac30 <ip4_reass+0x2c0>)
 801ab0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ab0c:	69fb      	ldr	r3, [r7, #28]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d00d      	beq.n	801ab2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ab12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ab14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab16:	4413      	add	r3, r2
 801ab18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab1c:	8a7a      	ldrh	r2, [r7, #18]
 801ab1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ab20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab22:	7f9b      	ldrb	r3, [r3, #30]
 801ab24:	f043 0301 	orr.w	r3, r3, #1
 801ab28:	b2da      	uxtb	r2, r3
 801ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ab2e:	697b      	ldr	r3, [r7, #20]
 801ab30:	2b01      	cmp	r3, #1
 801ab32:	d179      	bne.n	801ac28 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab36:	8b9b      	ldrh	r3, [r3, #28]
 801ab38:	3314      	adds	r3, #20
 801ab3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ab3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab3e:	685b      	ldr	r3, [r3, #4]
 801ab40:	685b      	ldr	r3, [r3, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ab46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab48:	685b      	ldr	r3, [r3, #4]
 801ab4a:	685b      	ldr	r3, [r3, #4]
 801ab4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab50:	3308      	adds	r3, #8
 801ab52:	2214      	movs	r2, #20
 801ab54:	4619      	mov	r1, r3
 801ab56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ab58:	f001 fd01 	bl	801c55e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ab5c:	8a3b      	ldrh	r3, [r7, #16]
 801ab5e:	4618      	mov	r0, r3
 801ab60:	f7f3 ff7e 	bl	800ea60 <lwip_htons>
 801ab64:	4603      	mov	r3, r0
 801ab66:	461a      	mov	r2, r3
 801ab68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab6e:	2200      	movs	r2, #0
 801ab70:	719a      	strb	r2, [r3, #6]
 801ab72:	2200      	movs	r2, #0
 801ab74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ab76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab78:	2200      	movs	r2, #0
 801ab7a:	729a      	strb	r2, [r3, #10]
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801ab80:	2114      	movs	r1, #20
 801ab82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ab84:	f7f4 f8b4 	bl	800ecf0 <inet_chksum>
 801ab88:	4603      	mov	r3, r0
 801ab8a:	461a      	mov	r2, r3
 801ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab8e:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ab90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab92:	685b      	ldr	r3, [r3, #4]
 801ab94:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ab96:	e00d      	b.n	801abb4 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801ab98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab9a:	685b      	ldr	r3, [r3, #4]
 801ab9c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ab9e:	2114      	movs	r1, #20
 801aba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801aba2:	f7f5 fbf9 	bl	8010398 <pbuf_remove_header>
      pbuf_cat(p, r);
 801aba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aba8:	6878      	ldr	r0, [r7, #4]
 801abaa:	f7f5 fd49 	bl	8010640 <pbuf_cat>
      r = iprh->next_pbuf;
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801abb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d1ee      	bne.n	801ab98 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801abba:	4b1e      	ldr	r3, [pc, #120]	@ (801ac34 <ip4_reass+0x2c4>)
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801abc0:	429a      	cmp	r2, r3
 801abc2:	d102      	bne.n	801abca <ip4_reass+0x25a>
      ipr_prev = NULL;
 801abc4:	2300      	movs	r3, #0
 801abc6:	637b      	str	r3, [r7, #52]	@ 0x34
 801abc8:	e010      	b.n	801abec <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801abca:	4b1a      	ldr	r3, [pc, #104]	@ (801ac34 <ip4_reass+0x2c4>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	637b      	str	r3, [r7, #52]	@ 0x34
 801abd0:	e007      	b.n	801abe2 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801abd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801abd8:	429a      	cmp	r2, r3
 801abda:	d006      	beq.n	801abea <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801abdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	637b      	str	r3, [r7, #52]	@ 0x34
 801abe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d1f4      	bne.n	801abd2 <ip4_reass+0x262>
 801abe8:	e000      	b.n	801abec <ip4_reass+0x27c>
          break;
 801abea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801abec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801abee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801abf0:	f7ff fd26 	bl	801a640 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801abf4:	6878      	ldr	r0, [r7, #4]
 801abf6:	f7f5 fce3 	bl	80105c0 <pbuf_clen>
 801abfa:	4603      	mov	r3, r0
 801abfc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801abfe:	4b0c      	ldr	r3, [pc, #48]	@ (801ac30 <ip4_reass+0x2c0>)
 801ac00:	881b      	ldrh	r3, [r3, #0]
 801ac02:	8c3a      	ldrh	r2, [r7, #32]
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d906      	bls.n	801ac16 <ip4_reass+0x2a6>
 801ac08:	4b0b      	ldr	r3, [pc, #44]	@ (801ac38 <ip4_reass+0x2c8>)
 801ac0a:	f240 229b 	movw	r2, #667	@ 0x29b
 801ac0e:	490b      	ldr	r1, [pc, #44]	@ (801ac3c <ip4_reass+0x2cc>)
 801ac10:	480b      	ldr	r0, [pc, #44]	@ (801ac40 <ip4_reass+0x2d0>)
 801ac12:	f001 fa85 	bl	801c120 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ac16:	4b06      	ldr	r3, [pc, #24]	@ (801ac30 <ip4_reass+0x2c0>)
 801ac18:	881a      	ldrh	r2, [r3, #0]
 801ac1a:	8c3b      	ldrh	r3, [r7, #32]
 801ac1c:	1ad3      	subs	r3, r2, r3
 801ac1e:	b29a      	uxth	r2, r3
 801ac20:	4b03      	ldr	r3, [pc, #12]	@ (801ac30 <ip4_reass+0x2c0>)
 801ac22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	e038      	b.n	801ac9a <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ac28:	2300      	movs	r3, #0
 801ac2a:	e036      	b.n	801ac9a <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801ac2c:	bf00      	nop
 801ac2e:	e00a      	b.n	801ac46 <ip4_reass+0x2d6>
 801ac30:	20013ea0 	.word	0x20013ea0
 801ac34:	20013e9c 	.word	0x20013e9c
 801ac38:	080219b0 	.word	0x080219b0
 801ac3c:	08021b20 	.word	0x08021b20
 801ac40:	080219f8 	.word	0x080219f8
    goto nullreturn_ipr;
 801ac44:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ac46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d106      	bne.n	801ac5a <ip4_reass+0x2ea>
 801ac4c:	4b15      	ldr	r3, [pc, #84]	@ (801aca4 <ip4_reass+0x334>)
 801ac4e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801ac52:	4915      	ldr	r1, [pc, #84]	@ (801aca8 <ip4_reass+0x338>)
 801ac54:	4815      	ldr	r0, [pc, #84]	@ (801acac <ip4_reass+0x33c>)
 801ac56:	f001 fa63 	bl	801c120 <iprintf>
  if (ipr->p == NULL) {
 801ac5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac5c:	685b      	ldr	r3, [r3, #4]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d116      	bne.n	801ac90 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ac62:	4b13      	ldr	r3, [pc, #76]	@ (801acb0 <ip4_reass+0x340>)
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	d006      	beq.n	801ac7a <ip4_reass+0x30a>
 801ac6c:	4b0d      	ldr	r3, [pc, #52]	@ (801aca4 <ip4_reass+0x334>)
 801ac6e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801ac72:	4910      	ldr	r1, [pc, #64]	@ (801acb4 <ip4_reass+0x344>)
 801ac74:	480d      	ldr	r0, [pc, #52]	@ (801acac <ip4_reass+0x33c>)
 801ac76:	f001 fa53 	bl	801c120 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ac7a:	2100      	movs	r1, #0
 801ac7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ac7e:	f7ff fcdf 	bl	801a640 <ip_reass_dequeue_datagram>
 801ac82:	e006      	b.n	801ac92 <ip4_reass+0x322>
    goto nullreturn;
 801ac84:	bf00      	nop
 801ac86:	e004      	b.n	801ac92 <ip4_reass+0x322>
    goto nullreturn;
 801ac88:	bf00      	nop
 801ac8a:	e002      	b.n	801ac92 <ip4_reass+0x322>
      goto nullreturn;
 801ac8c:	bf00      	nop
 801ac8e:	e000      	b.n	801ac92 <ip4_reass+0x322>
  }

nullreturn:
 801ac90:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ac92:	6878      	ldr	r0, [r7, #4]
 801ac94:	f7f5 fc06 	bl	80104a4 <pbuf_free>
  return NULL;
 801ac98:	2300      	movs	r3, #0
}
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	3738      	adds	r7, #56	@ 0x38
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bd80      	pop	{r7, pc}
 801aca2:	bf00      	nop
 801aca4:	080219b0 	.word	0x080219b0
 801aca8:	08021b3c 	.word	0x08021b3c
 801acac:	080219f8 	.word	0x080219f8
 801acb0:	20013e9c 	.word	0x20013e9c
 801acb4:	08021b48 	.word	0x08021b48

0801acb8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801acbc:	2005      	movs	r0, #5
 801acbe:	f7f4 fcfd 	bl	800f6bc <memp_malloc>
 801acc2:	4603      	mov	r3, r0
}
 801acc4:	4618      	mov	r0, r3
 801acc6:	bd80      	pop	{r7, pc}

0801acc8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b082      	sub	sp, #8
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d106      	bne.n	801ace4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801acd6:	4b07      	ldr	r3, [pc, #28]	@ (801acf4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801acd8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801acdc:	4906      	ldr	r1, [pc, #24]	@ (801acf8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801acde:	4807      	ldr	r0, [pc, #28]	@ (801acfc <ip_frag_free_pbuf_custom_ref+0x34>)
 801ace0:	f001 fa1e 	bl	801c120 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ace4:	6879      	ldr	r1, [r7, #4]
 801ace6:	2005      	movs	r0, #5
 801ace8:	f7f4 fd3a 	bl	800f760 <memp_free>
}
 801acec:	bf00      	nop
 801acee:	3708      	adds	r7, #8
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	080219b0 	.word	0x080219b0
 801acf8:	08021b68 	.word	0x08021b68
 801acfc:	080219f8 	.word	0x080219f8

0801ad00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b084      	sub	sp, #16
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d106      	bne.n	801ad20 <ipfrag_free_pbuf_custom+0x20>
 801ad12:	4b11      	ldr	r3, [pc, #68]	@ (801ad58 <ipfrag_free_pbuf_custom+0x58>)
 801ad14:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801ad18:	4910      	ldr	r1, [pc, #64]	@ (801ad5c <ipfrag_free_pbuf_custom+0x5c>)
 801ad1a:	4811      	ldr	r0, [pc, #68]	@ (801ad60 <ipfrag_free_pbuf_custom+0x60>)
 801ad1c:	f001 fa00 	bl	801c120 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ad20:	68fa      	ldr	r2, [r7, #12]
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	429a      	cmp	r2, r3
 801ad26:	d006      	beq.n	801ad36 <ipfrag_free_pbuf_custom+0x36>
 801ad28:	4b0b      	ldr	r3, [pc, #44]	@ (801ad58 <ipfrag_free_pbuf_custom+0x58>)
 801ad2a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801ad2e:	490d      	ldr	r1, [pc, #52]	@ (801ad64 <ipfrag_free_pbuf_custom+0x64>)
 801ad30:	480b      	ldr	r0, [pc, #44]	@ (801ad60 <ipfrag_free_pbuf_custom+0x60>)
 801ad32:	f001 f9f5 	bl	801c120 <iprintf>
  if (pcr->original != NULL) {
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	695b      	ldr	r3, [r3, #20]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d004      	beq.n	801ad48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	695b      	ldr	r3, [r3, #20]
 801ad42:	4618      	mov	r0, r3
 801ad44:	f7f5 fbae 	bl	80104a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ad48:	68f8      	ldr	r0, [r7, #12]
 801ad4a:	f7ff ffbd 	bl	801acc8 <ip_frag_free_pbuf_custom_ref>
}
 801ad4e:	bf00      	nop
 801ad50:	3710      	adds	r7, #16
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
 801ad56:	bf00      	nop
 801ad58:	080219b0 	.word	0x080219b0
 801ad5c:	08021b74 	.word	0x08021b74
 801ad60:	080219f8 	.word	0x080219f8
 801ad64:	08021b80 	.word	0x08021b80

0801ad68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b094      	sub	sp, #80	@ 0x50
 801ad6c:	af02      	add	r7, sp, #8
 801ad6e:	60f8      	str	r0, [r7, #12]
 801ad70:	60b9      	str	r1, [r7, #8]
 801ad72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ad74:	2300      	movs	r3, #0
 801ad76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ad7e:	3b14      	subs	r3, #20
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	da00      	bge.n	801ad86 <ip4_frag+0x1e>
 801ad84:	3307      	adds	r3, #7
 801ad86:	10db      	asrs	r3, r3, #3
 801ad88:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ad8a:	2314      	movs	r3, #20
 801ad8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	685b      	ldr	r3, [r3, #4]
 801ad92:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad96:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ad98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad9a:	781b      	ldrb	r3, [r3, #0]
 801ad9c:	f003 030f 	and.w	r3, r3, #15
 801ada0:	b2db      	uxtb	r3, r3
 801ada2:	009b      	lsls	r3, r3, #2
 801ada4:	b2db      	uxtb	r3, r3
 801ada6:	2b14      	cmp	r3, #20
 801ada8:	d002      	beq.n	801adb0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801adaa:	f06f 0305 	mvn.w	r3, #5
 801adae:	e118      	b.n	801afe2 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	895b      	ldrh	r3, [r3, #10]
 801adb4:	2b13      	cmp	r3, #19
 801adb6:	d809      	bhi.n	801adcc <ip4_frag+0x64>
 801adb8:	4b8c      	ldr	r3, [pc, #560]	@ (801afec <ip4_frag+0x284>)
 801adba:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801adbe:	498c      	ldr	r1, [pc, #560]	@ (801aff0 <ip4_frag+0x288>)
 801adc0:	488c      	ldr	r0, [pc, #560]	@ (801aff4 <ip4_frag+0x28c>)
 801adc2:	f001 f9ad 	bl	801c120 <iprintf>
 801adc6:	f06f 0305 	mvn.w	r3, #5
 801adca:	e10a      	b.n	801afe2 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801adcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adce:	88db      	ldrh	r3, [r3, #6]
 801add0:	b29b      	uxth	r3, r3
 801add2:	4618      	mov	r0, r3
 801add4:	f7f3 fe44 	bl	800ea60 <lwip_htons>
 801add8:	4603      	mov	r3, r0
 801adda:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801addc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801adde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ade2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ade6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ade8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801adec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	891b      	ldrh	r3, [r3, #8]
 801adf2:	3b14      	subs	r3, #20
 801adf4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801adf8:	e0e9      	b.n	801afce <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801adfa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801adfc:	00db      	lsls	r3, r3, #3
 801adfe:	b29b      	uxth	r3, r3
 801ae00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ae04:	4293      	cmp	r3, r2
 801ae06:	bf28      	it	cs
 801ae08:	4613      	movcs	r3, r2
 801ae0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ae0c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae10:	2114      	movs	r1, #20
 801ae12:	200e      	movs	r0, #14
 801ae14:	f7f5 f85e 	bl	800fed4 <pbuf_alloc>
 801ae18:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	f000 80dd 	beq.w	801afdc <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae24:	895b      	ldrh	r3, [r3, #10]
 801ae26:	2b13      	cmp	r3, #19
 801ae28:	d806      	bhi.n	801ae38 <ip4_frag+0xd0>
 801ae2a:	4b70      	ldr	r3, [pc, #448]	@ (801afec <ip4_frag+0x284>)
 801ae2c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ae30:	4971      	ldr	r1, [pc, #452]	@ (801aff8 <ip4_frag+0x290>)
 801ae32:	4870      	ldr	r0, [pc, #448]	@ (801aff4 <ip4_frag+0x28c>)
 801ae34:	f001 f974 	bl	801c120 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae3a:	685b      	ldr	r3, [r3, #4]
 801ae3c:	2214      	movs	r2, #20
 801ae3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ae40:	4618      	mov	r0, r3
 801ae42:	f001 fb8c 	bl	801c55e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ae46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae48:	685b      	ldr	r3, [r3, #4]
 801ae4a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ae4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ae4e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ae52:	e064      	b.n	801af1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	895a      	ldrh	r2, [r3, #10]
 801ae58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ae5a:	1ad3      	subs	r3, r2, r3
 801ae5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	895b      	ldrh	r3, [r3, #10]
 801ae62:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ae64:	429a      	cmp	r2, r3
 801ae66:	d906      	bls.n	801ae76 <ip4_frag+0x10e>
 801ae68:	4b60      	ldr	r3, [pc, #384]	@ (801afec <ip4_frag+0x284>)
 801ae6a:	f240 322d 	movw	r2, #813	@ 0x32d
 801ae6e:	4963      	ldr	r1, [pc, #396]	@ (801affc <ip4_frag+0x294>)
 801ae70:	4860      	ldr	r0, [pc, #384]	@ (801aff4 <ip4_frag+0x28c>)
 801ae72:	f001 f955 	bl	801c120 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ae76:	8bfa      	ldrh	r2, [r7, #30]
 801ae78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	bf28      	it	cs
 801ae80:	4613      	movcs	r3, r2
 801ae82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ae86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d105      	bne.n	801ae9a <ip4_frag+0x132>
        poff = 0;
 801ae8e:	2300      	movs	r3, #0
 801ae90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	60fb      	str	r3, [r7, #12]
        continue;
 801ae98:	e041      	b.n	801af1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ae9a:	f7ff ff0d 	bl	801acb8 <ip_frag_alloc_pbuf_custom_ref>
 801ae9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801aea0:	69bb      	ldr	r3, [r7, #24]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d103      	bne.n	801aeae <ip4_frag+0x146>
        pbuf_free(rambuf);
 801aea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aea8:	f7f5 fafc 	bl	80104a4 <pbuf_free>
        goto memerr;
 801aeac:	e097      	b.n	801afde <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aeae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aeb4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801aeb6:	4413      	add	r3, r2
 801aeb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801aebc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801aec0:	9201      	str	r2, [sp, #4]
 801aec2:	9300      	str	r3, [sp, #0]
 801aec4:	4603      	mov	r3, r0
 801aec6:	2241      	movs	r2, #65	@ 0x41
 801aec8:	2000      	movs	r0, #0
 801aeca:	f7f5 f931 	bl	8010130 <pbuf_alloced_custom>
 801aece:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d106      	bne.n	801aee4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801aed6:	69b8      	ldr	r0, [r7, #24]
 801aed8:	f7ff fef6 	bl	801acc8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801aedc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aede:	f7f5 fae1 	bl	80104a4 <pbuf_free>
        goto memerr;
 801aee2:	e07c      	b.n	801afde <ip4_frag+0x276>
      }
      pbuf_ref(p);
 801aee4:	68f8      	ldr	r0, [r7, #12]
 801aee6:	f7f5 fb83 	bl	80105f0 <pbuf_ref>
      pcr->original = p;
 801aeea:	69bb      	ldr	r3, [r7, #24]
 801aeec:	68fa      	ldr	r2, [r7, #12]
 801aeee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801aef0:	69bb      	ldr	r3, [r7, #24]
 801aef2:	4a43      	ldr	r2, [pc, #268]	@ (801b000 <ip4_frag+0x298>)
 801aef4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801aef6:	6979      	ldr	r1, [r7, #20]
 801aef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aefa:	f7f5 fba1 	bl	8010640 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801aefe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801af02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801af06:	1ad3      	subs	r3, r2, r3
 801af08:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801af0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801af10:	2b00      	cmp	r3, #0
 801af12:	d004      	beq.n	801af1e <ip4_frag+0x1b6>
        poff = 0;
 801af14:	2300      	movs	r3, #0
 801af16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801af1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801af22:	2b00      	cmp	r3, #0
 801af24:	d196      	bne.n	801ae54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801af26:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801af28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801af2c:	4413      	add	r3, r2
 801af2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801af34:	f1a3 0213 	sub.w	r2, r3, #19
 801af38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af3c:	429a      	cmp	r2, r3
 801af3e:	bfcc      	ite	gt
 801af40:	2301      	movgt	r3, #1
 801af42:	2300      	movle	r3, #0
 801af44:	b2db      	uxtb	r3, r3
 801af46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801af48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801af4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af50:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801af52:	6a3b      	ldr	r3, [r7, #32]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d002      	beq.n	801af5e <ip4_frag+0x1f6>
 801af58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d003      	beq.n	801af66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801af5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801af60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801af64:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801af66:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801af68:	4618      	mov	r0, r3
 801af6a:	f7f3 fd79 	bl	800ea60 <lwip_htons>
 801af6e:	4603      	mov	r3, r0
 801af70:	461a      	mov	r2, r3
 801af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801af76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801af78:	3314      	adds	r3, #20
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	4618      	mov	r0, r3
 801af7e:	f7f3 fd6f 	bl	800ea60 <lwip_htons>
 801af82:	4603      	mov	r3, r0
 801af84:	461a      	mov	r2, r3
 801af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af8c:	2200      	movs	r2, #0
 801af8e:	729a      	strb	r2, [r3, #10]
 801af90:	2200      	movs	r2, #0
 801af92:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801af94:	2114      	movs	r1, #20
 801af96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af98:	f7f3 feaa 	bl	800ecf0 <inet_chksum>
 801af9c:	4603      	mov	r3, r0
 801af9e:	461a      	mov	r2, r3
 801afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801afa2:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801afa4:	68bb      	ldr	r3, [r7, #8]
 801afa6:	695b      	ldr	r3, [r3, #20]
 801afa8:	687a      	ldr	r2, [r7, #4]
 801afaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801afac:	68b8      	ldr	r0, [r7, #8]
 801afae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801afb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801afb2:	f7f5 fa77 	bl	80104a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801afb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801afba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801afbc:	1ad3      	subs	r3, r2, r3
 801afbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801afc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801afc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801afc8:	4413      	add	r3, r2
 801afca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801afce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	f47f af11 	bne.w	801adfa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801afd8:	2300      	movs	r3, #0
 801afda:	e002      	b.n	801afe2 <ip4_frag+0x27a>
      goto memerr;
 801afdc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801afde:	f04f 33ff 	mov.w	r3, #4294967295
}
 801afe2:	4618      	mov	r0, r3
 801afe4:	3748      	adds	r7, #72	@ 0x48
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd80      	pop	{r7, pc}
 801afea:	bf00      	nop
 801afec:	080219b0 	.word	0x080219b0
 801aff0:	08021b8c 	.word	0x08021b8c
 801aff4:	080219f8 	.word	0x080219f8
 801aff8:	08021ba8 	.word	0x08021ba8
 801affc:	08021bc8 	.word	0x08021bc8
 801b000:	0801ad01 	.word	0x0801ad01

0801b004 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b086      	sub	sp, #24
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
 801b00c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b00e:	230e      	movs	r3, #14
 801b010:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	895b      	ldrh	r3, [r3, #10]
 801b016:	2b0e      	cmp	r3, #14
 801b018:	d96e      	bls.n	801b0f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	7bdb      	ldrb	r3, [r3, #15]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d106      	bne.n	801b030 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b022:	683b      	ldr	r3, [r7, #0]
 801b024:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b028:	3301      	adds	r3, #1
 801b02a:	b2da      	uxtb	r2, r3
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b036:	693b      	ldr	r3, [r7, #16]
 801b038:	7b1a      	ldrb	r2, [r3, #12]
 801b03a:	7b5b      	ldrb	r3, [r3, #13]
 801b03c:	021b      	lsls	r3, r3, #8
 801b03e:	4313      	orrs	r3, r2
 801b040:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b042:	693b      	ldr	r3, [r7, #16]
 801b044:	781b      	ldrb	r3, [r3, #0]
 801b046:	f003 0301 	and.w	r3, r3, #1
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d023      	beq.n	801b096 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b04e:	693b      	ldr	r3, [r7, #16]
 801b050:	781b      	ldrb	r3, [r3, #0]
 801b052:	2b01      	cmp	r3, #1
 801b054:	d10f      	bne.n	801b076 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b056:	693b      	ldr	r3, [r7, #16]
 801b058:	785b      	ldrb	r3, [r3, #1]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d11b      	bne.n	801b096 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b05e:	693b      	ldr	r3, [r7, #16]
 801b060:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b062:	2b5e      	cmp	r3, #94	@ 0x5e
 801b064:	d117      	bne.n	801b096 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	7b5b      	ldrb	r3, [r3, #13]
 801b06a:	f043 0310 	orr.w	r3, r3, #16
 801b06e:	b2da      	uxtb	r2, r3
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	735a      	strb	r2, [r3, #13]
 801b074:	e00f      	b.n	801b096 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b076:	693b      	ldr	r3, [r7, #16]
 801b078:	2206      	movs	r2, #6
 801b07a:	4928      	ldr	r1, [pc, #160]	@ (801b11c <ethernet_input+0x118>)
 801b07c:	4618      	mov	r0, r3
 801b07e:	f001 f9a1 	bl	801c3c4 <memcmp>
 801b082:	4603      	mov	r3, r0
 801b084:	2b00      	cmp	r3, #0
 801b086:	d106      	bne.n	801b096 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	7b5b      	ldrb	r3, [r3, #13]
 801b08c:	f043 0308 	orr.w	r3, r3, #8
 801b090:	b2da      	uxtb	r2, r3
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b096:	89fb      	ldrh	r3, [r7, #14]
 801b098:	2b08      	cmp	r3, #8
 801b09a:	d003      	beq.n	801b0a4 <ethernet_input+0xa0>
 801b09c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801b0a0:	d014      	beq.n	801b0cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b0a2:	e032      	b.n	801b10a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b0aa:	f003 0308 	and.w	r3, r3, #8
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d024      	beq.n	801b0fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b0b2:	8afb      	ldrh	r3, [r7, #22]
 801b0b4:	4619      	mov	r1, r3
 801b0b6:	6878      	ldr	r0, [r7, #4]
 801b0b8:	f7f5 f96e 	bl	8010398 <pbuf_remove_header>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d11e      	bne.n	801b100 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b0c2:	6839      	ldr	r1, [r7, #0]
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	f7fe fe81 	bl	8019dcc <ip4_input>
      break;
 801b0ca:	e013      	b.n	801b0f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b0d2:	f003 0308 	and.w	r3, r3, #8
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d014      	beq.n	801b104 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b0da:	8afb      	ldrh	r3, [r7, #22]
 801b0dc:	4619      	mov	r1, r3
 801b0de:	6878      	ldr	r0, [r7, #4]
 801b0e0:	f7f5 f95a 	bl	8010398 <pbuf_remove_header>
 801b0e4:	4603      	mov	r3, r0
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d10e      	bne.n	801b108 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b0ea:	6839      	ldr	r1, [r7, #0]
 801b0ec:	6878      	ldr	r0, [r7, #4]
 801b0ee:	f7fd ffe9 	bl	80190c4 <etharp_input>
      break;
 801b0f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	e00c      	b.n	801b112 <ethernet_input+0x10e>
    goto free_and_return;
 801b0f8:	bf00      	nop
 801b0fa:	e006      	b.n	801b10a <ethernet_input+0x106>
        goto free_and_return;
 801b0fc:	bf00      	nop
 801b0fe:	e004      	b.n	801b10a <ethernet_input+0x106>
        goto free_and_return;
 801b100:	bf00      	nop
 801b102:	e002      	b.n	801b10a <ethernet_input+0x106>
        goto free_and_return;
 801b104:	bf00      	nop
 801b106:	e000      	b.n	801b10a <ethernet_input+0x106>
        goto free_and_return;
 801b108:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b10a:	6878      	ldr	r0, [r7, #4]
 801b10c:	f7f5 f9ca 	bl	80104a4 <pbuf_free>
  return ERR_OK;
 801b110:	2300      	movs	r3, #0
}
 801b112:	4618      	mov	r0, r3
 801b114:	3718      	adds	r7, #24
 801b116:	46bd      	mov	sp, r7
 801b118:	bd80      	pop	{r7, pc}
 801b11a:	bf00      	nop
 801b11c:	0806da68 	.word	0x0806da68

0801b120 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b120:	b580      	push	{r7, lr}
 801b122:	b086      	sub	sp, #24
 801b124:	af00      	add	r7, sp, #0
 801b126:	60f8      	str	r0, [r7, #12]
 801b128:	60b9      	str	r1, [r7, #8]
 801b12a:	607a      	str	r2, [r7, #4]
 801b12c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b12e:	8c3b      	ldrh	r3, [r7, #32]
 801b130:	4618      	mov	r0, r3
 801b132:	f7f3 fc95 	bl	800ea60 <lwip_htons>
 801b136:	4603      	mov	r3, r0
 801b138:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b13a:	210e      	movs	r1, #14
 801b13c:	68b8      	ldr	r0, [r7, #8]
 801b13e:	f7f5 f91b 	bl	8010378 <pbuf_add_header>
 801b142:	4603      	mov	r3, r0
 801b144:	2b00      	cmp	r3, #0
 801b146:	d125      	bne.n	801b194 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	685b      	ldr	r3, [r3, #4]
 801b14c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	8afa      	ldrh	r2, [r7, #22]
 801b152:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b154:	693b      	ldr	r3, [r7, #16]
 801b156:	2206      	movs	r2, #6
 801b158:	6839      	ldr	r1, [r7, #0]
 801b15a:	4618      	mov	r0, r3
 801b15c:	f001 f9ff 	bl	801c55e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	3306      	adds	r3, #6
 801b164:	2206      	movs	r2, #6
 801b166:	6879      	ldr	r1, [r7, #4]
 801b168:	4618      	mov	r0, r3
 801b16a:	f001 f9f8 	bl	801c55e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b174:	2b06      	cmp	r3, #6
 801b176:	d006      	beq.n	801b186 <ethernet_output+0x66>
 801b178:	4b0a      	ldr	r3, [pc, #40]	@ (801b1a4 <ethernet_output+0x84>)
 801b17a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801b17e:	490a      	ldr	r1, [pc, #40]	@ (801b1a8 <ethernet_output+0x88>)
 801b180:	480a      	ldr	r0, [pc, #40]	@ (801b1ac <ethernet_output+0x8c>)
 801b182:	f000 ffcd 	bl	801c120 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	699b      	ldr	r3, [r3, #24]
 801b18a:	68b9      	ldr	r1, [r7, #8]
 801b18c:	68f8      	ldr	r0, [r7, #12]
 801b18e:	4798      	blx	r3
 801b190:	4603      	mov	r3, r0
 801b192:	e002      	b.n	801b19a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b194:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b196:	f06f 0301 	mvn.w	r3, #1
}
 801b19a:	4618      	mov	r0, r3
 801b19c:	3718      	adds	r7, #24
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd80      	pop	{r7, pc}
 801b1a2:	bf00      	nop
 801b1a4:	08021bd8 	.word	0x08021bd8
 801b1a8:	08021c10 	.word	0x08021c10
 801b1ac:	08021c44 	.word	0x08021c44

0801b1b0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b084      	sub	sp, #16
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	6078      	str	r0, [r7, #4]
 801b1b8:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801b1ba:	683b      	ldr	r3, [r7, #0]
 801b1bc:	60bb      	str	r3, [r7, #8]
 801b1be:	2304      	movs	r3, #4
 801b1c0:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b1c2:	f107 0308 	add.w	r3, r7, #8
 801b1c6:	2100      	movs	r1, #0
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	f7ef fef4 	bl	800afb6 <osMessageCreate>
 801b1ce:	4602      	mov	r2, r0
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d102      	bne.n	801b1e2 <sys_mbox_new+0x32>
  return ERR_MEM;
 801b1dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b1e0:	e000      	b.n	801b1e4 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801b1e2:	2300      	movs	r3, #0
}
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	3710      	adds	r7, #16
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801b1f6:	bf00      	nop
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	6839      	ldr	r1, [r7, #0]
 801b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 801b202:	4618      	mov	r0, r3
 801b204:	f7ef feea 	bl	800afdc <osMessagePut>
 801b208:	4603      	mov	r3, r0
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d1f4      	bne.n	801b1f8 <sys_mbox_post+0xc>
}
 801b20e:	bf00      	nop
 801b210:	bf00      	nop
 801b212:	3708      	adds	r7, #8
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}

0801b218 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b084      	sub	sp, #16
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	6839      	ldr	r1, [r7, #0]
 801b228:	2200      	movs	r2, #0
 801b22a:	4618      	mov	r0, r3
 801b22c:	f7ef fed6 	bl	800afdc <osMessagePut>
 801b230:	4603      	mov	r3, r0
 801b232:	2b00      	cmp	r3, #0
 801b234:	d102      	bne.n	801b23c <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801b236:	2300      	movs	r3, #0
 801b238:	73fb      	strb	r3, [r7, #15]
 801b23a:	e001      	b.n	801b240 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801b23c:	23ff      	movs	r3, #255	@ 0xff
 801b23e:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801b240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b244:	4618      	mov	r0, r3
 801b246:	3710      	adds	r7, #16
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd80      	pop	{r7, pc}

0801b24c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b08c      	sub	sp, #48	@ 0x30
 801b250:	af00      	add	r7, sp, #0
 801b252:	61f8      	str	r0, [r7, #28]
 801b254:	61b9      	str	r1, [r7, #24]
 801b256:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801b258:	f7ef fdb1 	bl	800adbe <osKernelSysTick>
 801b25c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  
  if(timeout != 0)
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d017      	beq.n	801b294 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801b264:	69fb      	ldr	r3, [r7, #28]
 801b266:	6819      	ldr	r1, [r3, #0]
 801b268:	f107 0320 	add.w	r3, r7, #32
 801b26c:	697a      	ldr	r2, [r7, #20]
 801b26e:	4618      	mov	r0, r3
 801b270:	f7ef fef6 	bl	800b060 <osMessageGet>
    
    if(event.status == osEventMessage)
 801b274:	6a3b      	ldr	r3, [r7, #32]
 801b276:	2b10      	cmp	r3, #16
 801b278:	d109      	bne.n	801b28e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b27c:	461a      	mov	r2, r3
 801b27e:	69bb      	ldr	r3, [r7, #24]
 801b280:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b282:	f7ef fd9c 	bl	800adbe <osKernelSysTick>
 801b286:	4602      	mov	r2, r0
 801b288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b28a:	1ad3      	subs	r3, r2, r3
 801b28c:	e019      	b.n	801b2c2 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b28e:	f04f 33ff 	mov.w	r3, #4294967295
 801b292:	e016      	b.n	801b2c2 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801b294:	69fb      	ldr	r3, [r7, #28]
 801b296:	6819      	ldr	r1, [r3, #0]
 801b298:	463b      	mov	r3, r7
 801b29a:	f04f 32ff 	mov.w	r2, #4294967295
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f7ef fede 	bl	800b060 <osMessageGet>
 801b2a4:	f107 0320 	add.w	r3, r7, #32
 801b2a8:	463a      	mov	r2, r7
 801b2aa:	ca07      	ldmia	r2, {r0, r1, r2}
 801b2ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2b2:	461a      	mov	r2, r3
 801b2b4:	69bb      	ldr	r3, [r7, #24]
 801b2b6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b2b8:	f7ef fd81 	bl	800adbe <osKernelSysTick>
 801b2bc:	4602      	mov	r2, r0
 801b2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2c0:	1ad3      	subs	r3, r2, r3
  }
}
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	3730      	adds	r7, #48	@ 0x30
 801b2c6:	46bd      	mov	sp, r7
 801b2c8:	bd80      	pop	{r7, pc}

0801b2ca <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801b2ca:	b480      	push	{r7}
 801b2cc:	b083      	sub	sp, #12
 801b2ce:	af00      	add	r7, sp, #0
 801b2d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d101      	bne.n	801b2de <sys_mbox_valid+0x14>
    return 0;
 801b2da:	2300      	movs	r3, #0
 801b2dc:	e000      	b.n	801b2e0 <sys_mbox_valid+0x16>
  else
    return 1;
 801b2de:	2301      	movs	r3, #1
}                                             
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	370c      	adds	r7, #12
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ea:	4770      	bx	lr

0801b2ec <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b2f0:	4803      	ldr	r0, [pc, #12]	@ (801b300 <sys_init+0x14>)
 801b2f2:	f7ef fdbc 	bl	800ae6e <osMutexCreate>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	4a02      	ldr	r2, [pc, #8]	@ (801b304 <sys_init+0x18>)
 801b2fa:	6013      	str	r3, [r2, #0]
}
 801b2fc:	bf00      	nop
 801b2fe:	bd80      	pop	{r7, pc}
 801b300:	0806da78 	.word	0x0806da78
 801b304:	20013ea4 	.word	0x20013ea4

0801b308 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b308:	b580      	push	{r7, lr}
 801b30a:	b084      	sub	sp, #16
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801b310:	2300      	movs	r3, #0
 801b312:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b314:	f107 030c 	add.w	r3, r7, #12
 801b318:	4618      	mov	r0, r3
 801b31a:	f7ef fda8 	bl	800ae6e <osMutexCreate>
 801b31e:	4602      	mov	r2, r0
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d102      	bne.n	801b332 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801b32c:	f04f 33ff 	mov.w	r3, #4294967295
 801b330:	e000      	b.n	801b334 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b332:	2300      	movs	r3, #0
}
 801b334:	4618      	mov	r0, r3
 801b336:	3710      	adds	r7, #16
 801b338:	46bd      	mov	sp, r7
 801b33a:	bd80      	pop	{r7, pc}

0801b33c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b082      	sub	sp, #8
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	f04f 31ff 	mov.w	r1, #4294967295
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7ef fd9b 	bl	800ae88 <osMutexWait>
}
 801b352:	bf00      	nop
 801b354:	3708      	adds	r7, #8
 801b356:	46bd      	mov	sp, r7
 801b358:	bd80      	pop	{r7, pc}

0801b35a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b35a:	b580      	push	{r7, lr}
 801b35c:	b082      	sub	sp, #8
 801b35e:	af00      	add	r7, sp, #0
 801b360:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	4618      	mov	r0, r3
 801b368:	f7ef fddc 	bl	800af24 <osMutexRelease>
}
 801b36c:	bf00      	nop
 801b36e:	3708      	adds	r7, #8
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}

0801b374 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b08a      	sub	sp, #40	@ 0x28
 801b378:	af00      	add	r7, sp, #0
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	607a      	str	r2, [r7, #4]
 801b380:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	617b      	str	r3, [r7, #20]
 801b386:	68bb      	ldr	r3, [r7, #8]
 801b388:	61bb      	str	r3, [r7, #24]
 801b38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b38c:	b21b      	sxth	r3, r3
 801b38e:	83bb      	strh	r3, [r7, #28]
 801b390:	2300      	movs	r3, #0
 801b392:	623b      	str	r3, [r7, #32]
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b398:	f107 0314 	add.w	r3, r7, #20
 801b39c:	6879      	ldr	r1, [r7, #4]
 801b39e:	4618      	mov	r0, r3
 801b3a0:	f7ef fd1d 	bl	800adde <osThreadCreate>
 801b3a4:	4603      	mov	r3, r0
}
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	3728      	adds	r7, #40	@ 0x28
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	bd80      	pop	{r7, pc}
	...

0801b3b0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b3b4:	4b04      	ldr	r3, [pc, #16]	@ (801b3c8 <sys_arch_protect+0x18>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	f04f 31ff 	mov.w	r1, #4294967295
 801b3bc:	4618      	mov	r0, r3
 801b3be:	f7ef fd63 	bl	800ae88 <osMutexWait>
  return (sys_prot_t)1;
 801b3c2:	2301      	movs	r3, #1
}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	bd80      	pop	{r7, pc}
 801b3c8:	20013ea4 	.word	0x20013ea4

0801b3cc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b082      	sub	sp, #8
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b3d4:	4b04      	ldr	r3, [pc, #16]	@ (801b3e8 <sys_arch_unprotect+0x1c>)
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	4618      	mov	r0, r3
 801b3da:	f7ef fda3 	bl	800af24 <osMutexRelease>
}
 801b3de:	bf00      	nop
 801b3e0:	3708      	adds	r7, #8
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	bd80      	pop	{r7, pc}
 801b3e6:	bf00      	nop
 801b3e8:	20013ea4 	.word	0x20013ea4

0801b3ec <_calloc_r>:
 801b3ec:	b570      	push	{r4, r5, r6, lr}
 801b3ee:	fba1 5402 	umull	r5, r4, r1, r2
 801b3f2:	b93c      	cbnz	r4, 801b404 <_calloc_r+0x18>
 801b3f4:	4629      	mov	r1, r5
 801b3f6:	f000 f837 	bl	801b468 <_malloc_r>
 801b3fa:	4606      	mov	r6, r0
 801b3fc:	b928      	cbnz	r0, 801b40a <_calloc_r+0x1e>
 801b3fe:	2600      	movs	r6, #0
 801b400:	4630      	mov	r0, r6
 801b402:	bd70      	pop	{r4, r5, r6, pc}
 801b404:	220c      	movs	r2, #12
 801b406:	6002      	str	r2, [r0, #0]
 801b408:	e7f9      	b.n	801b3fe <_calloc_r+0x12>
 801b40a:	462a      	mov	r2, r5
 801b40c:	4621      	mov	r1, r4
 801b40e:	f000 ffe9 	bl	801c3e4 <memset>
 801b412:	e7f5      	b.n	801b400 <_calloc_r+0x14>

0801b414 <malloc>:
 801b414:	4b02      	ldr	r3, [pc, #8]	@ (801b420 <malloc+0xc>)
 801b416:	4601      	mov	r1, r0
 801b418:	6818      	ldr	r0, [r3, #0]
 801b41a:	f000 b825 	b.w	801b468 <_malloc_r>
 801b41e:	bf00      	nop
 801b420:	200000cc 	.word	0x200000cc

0801b424 <sbrk_aligned>:
 801b424:	b570      	push	{r4, r5, r6, lr}
 801b426:	4e0f      	ldr	r6, [pc, #60]	@ (801b464 <sbrk_aligned+0x40>)
 801b428:	460c      	mov	r4, r1
 801b42a:	6831      	ldr	r1, [r6, #0]
 801b42c:	4605      	mov	r5, r0
 801b42e:	b911      	cbnz	r1, 801b436 <sbrk_aligned+0x12>
 801b430:	f001 f83e 	bl	801c4b0 <_sbrk_r>
 801b434:	6030      	str	r0, [r6, #0]
 801b436:	4621      	mov	r1, r4
 801b438:	4628      	mov	r0, r5
 801b43a:	f001 f839 	bl	801c4b0 <_sbrk_r>
 801b43e:	1c43      	adds	r3, r0, #1
 801b440:	d103      	bne.n	801b44a <sbrk_aligned+0x26>
 801b442:	f04f 34ff 	mov.w	r4, #4294967295
 801b446:	4620      	mov	r0, r4
 801b448:	bd70      	pop	{r4, r5, r6, pc}
 801b44a:	1cc4      	adds	r4, r0, #3
 801b44c:	f024 0403 	bic.w	r4, r4, #3
 801b450:	42a0      	cmp	r0, r4
 801b452:	d0f8      	beq.n	801b446 <sbrk_aligned+0x22>
 801b454:	1a21      	subs	r1, r4, r0
 801b456:	4628      	mov	r0, r5
 801b458:	f001 f82a 	bl	801c4b0 <_sbrk_r>
 801b45c:	3001      	adds	r0, #1
 801b45e:	d1f2      	bne.n	801b446 <sbrk_aligned+0x22>
 801b460:	e7ef      	b.n	801b442 <sbrk_aligned+0x1e>
 801b462:	bf00      	nop
 801b464:	20013ea8 	.word	0x20013ea8

0801b468 <_malloc_r>:
 801b468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b46c:	1ccd      	adds	r5, r1, #3
 801b46e:	f025 0503 	bic.w	r5, r5, #3
 801b472:	3508      	adds	r5, #8
 801b474:	2d0c      	cmp	r5, #12
 801b476:	bf38      	it	cc
 801b478:	250c      	movcc	r5, #12
 801b47a:	2d00      	cmp	r5, #0
 801b47c:	4606      	mov	r6, r0
 801b47e:	db01      	blt.n	801b484 <_malloc_r+0x1c>
 801b480:	42a9      	cmp	r1, r5
 801b482:	d904      	bls.n	801b48e <_malloc_r+0x26>
 801b484:	230c      	movs	r3, #12
 801b486:	6033      	str	r3, [r6, #0]
 801b488:	2000      	movs	r0, #0
 801b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b48e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b564 <_malloc_r+0xfc>
 801b492:	f000 f869 	bl	801b568 <__malloc_lock>
 801b496:	f8d8 3000 	ldr.w	r3, [r8]
 801b49a:	461c      	mov	r4, r3
 801b49c:	bb44      	cbnz	r4, 801b4f0 <_malloc_r+0x88>
 801b49e:	4629      	mov	r1, r5
 801b4a0:	4630      	mov	r0, r6
 801b4a2:	f7ff ffbf 	bl	801b424 <sbrk_aligned>
 801b4a6:	1c43      	adds	r3, r0, #1
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	d158      	bne.n	801b55e <_malloc_r+0xf6>
 801b4ac:	f8d8 4000 	ldr.w	r4, [r8]
 801b4b0:	4627      	mov	r7, r4
 801b4b2:	2f00      	cmp	r7, #0
 801b4b4:	d143      	bne.n	801b53e <_malloc_r+0xd6>
 801b4b6:	2c00      	cmp	r4, #0
 801b4b8:	d04b      	beq.n	801b552 <_malloc_r+0xea>
 801b4ba:	6823      	ldr	r3, [r4, #0]
 801b4bc:	4639      	mov	r1, r7
 801b4be:	4630      	mov	r0, r6
 801b4c0:	eb04 0903 	add.w	r9, r4, r3
 801b4c4:	f000 fff4 	bl	801c4b0 <_sbrk_r>
 801b4c8:	4581      	cmp	r9, r0
 801b4ca:	d142      	bne.n	801b552 <_malloc_r+0xea>
 801b4cc:	6821      	ldr	r1, [r4, #0]
 801b4ce:	1a6d      	subs	r5, r5, r1
 801b4d0:	4629      	mov	r1, r5
 801b4d2:	4630      	mov	r0, r6
 801b4d4:	f7ff ffa6 	bl	801b424 <sbrk_aligned>
 801b4d8:	3001      	adds	r0, #1
 801b4da:	d03a      	beq.n	801b552 <_malloc_r+0xea>
 801b4dc:	6823      	ldr	r3, [r4, #0]
 801b4de:	442b      	add	r3, r5
 801b4e0:	6023      	str	r3, [r4, #0]
 801b4e2:	f8d8 3000 	ldr.w	r3, [r8]
 801b4e6:	685a      	ldr	r2, [r3, #4]
 801b4e8:	bb62      	cbnz	r2, 801b544 <_malloc_r+0xdc>
 801b4ea:	f8c8 7000 	str.w	r7, [r8]
 801b4ee:	e00f      	b.n	801b510 <_malloc_r+0xa8>
 801b4f0:	6822      	ldr	r2, [r4, #0]
 801b4f2:	1b52      	subs	r2, r2, r5
 801b4f4:	d420      	bmi.n	801b538 <_malloc_r+0xd0>
 801b4f6:	2a0b      	cmp	r2, #11
 801b4f8:	d917      	bls.n	801b52a <_malloc_r+0xc2>
 801b4fa:	1961      	adds	r1, r4, r5
 801b4fc:	42a3      	cmp	r3, r4
 801b4fe:	6025      	str	r5, [r4, #0]
 801b500:	bf18      	it	ne
 801b502:	6059      	strne	r1, [r3, #4]
 801b504:	6863      	ldr	r3, [r4, #4]
 801b506:	bf08      	it	eq
 801b508:	f8c8 1000 	streq.w	r1, [r8]
 801b50c:	5162      	str	r2, [r4, r5]
 801b50e:	604b      	str	r3, [r1, #4]
 801b510:	4630      	mov	r0, r6
 801b512:	f000 f82f 	bl	801b574 <__malloc_unlock>
 801b516:	f104 000b 	add.w	r0, r4, #11
 801b51a:	1d23      	adds	r3, r4, #4
 801b51c:	f020 0007 	bic.w	r0, r0, #7
 801b520:	1ac2      	subs	r2, r0, r3
 801b522:	bf1c      	itt	ne
 801b524:	1a1b      	subne	r3, r3, r0
 801b526:	50a3      	strne	r3, [r4, r2]
 801b528:	e7af      	b.n	801b48a <_malloc_r+0x22>
 801b52a:	6862      	ldr	r2, [r4, #4]
 801b52c:	42a3      	cmp	r3, r4
 801b52e:	bf0c      	ite	eq
 801b530:	f8c8 2000 	streq.w	r2, [r8]
 801b534:	605a      	strne	r2, [r3, #4]
 801b536:	e7eb      	b.n	801b510 <_malloc_r+0xa8>
 801b538:	4623      	mov	r3, r4
 801b53a:	6864      	ldr	r4, [r4, #4]
 801b53c:	e7ae      	b.n	801b49c <_malloc_r+0x34>
 801b53e:	463c      	mov	r4, r7
 801b540:	687f      	ldr	r7, [r7, #4]
 801b542:	e7b6      	b.n	801b4b2 <_malloc_r+0x4a>
 801b544:	461a      	mov	r2, r3
 801b546:	685b      	ldr	r3, [r3, #4]
 801b548:	42a3      	cmp	r3, r4
 801b54a:	d1fb      	bne.n	801b544 <_malloc_r+0xdc>
 801b54c:	2300      	movs	r3, #0
 801b54e:	6053      	str	r3, [r2, #4]
 801b550:	e7de      	b.n	801b510 <_malloc_r+0xa8>
 801b552:	230c      	movs	r3, #12
 801b554:	6033      	str	r3, [r6, #0]
 801b556:	4630      	mov	r0, r6
 801b558:	f000 f80c 	bl	801b574 <__malloc_unlock>
 801b55c:	e794      	b.n	801b488 <_malloc_r+0x20>
 801b55e:	6005      	str	r5, [r0, #0]
 801b560:	e7d6      	b.n	801b510 <_malloc_r+0xa8>
 801b562:	bf00      	nop
 801b564:	20013eac 	.word	0x20013eac

0801b568 <__malloc_lock>:
 801b568:	4801      	ldr	r0, [pc, #4]	@ (801b570 <__malloc_lock+0x8>)
 801b56a:	f000 bfee 	b.w	801c54a <__retarget_lock_acquire_recursive>
 801b56e:	bf00      	nop
 801b570:	20013ff0 	.word	0x20013ff0

0801b574 <__malloc_unlock>:
 801b574:	4801      	ldr	r0, [pc, #4]	@ (801b57c <__malloc_unlock+0x8>)
 801b576:	f000 bfe9 	b.w	801c54c <__retarget_lock_release_recursive>
 801b57a:	bf00      	nop
 801b57c:	20013ff0 	.word	0x20013ff0

0801b580 <rand>:
 801b580:	4b16      	ldr	r3, [pc, #88]	@ (801b5dc <rand+0x5c>)
 801b582:	b510      	push	{r4, lr}
 801b584:	681c      	ldr	r4, [r3, #0]
 801b586:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b588:	b9b3      	cbnz	r3, 801b5b8 <rand+0x38>
 801b58a:	2018      	movs	r0, #24
 801b58c:	f7ff ff42 	bl	801b414 <malloc>
 801b590:	4602      	mov	r2, r0
 801b592:	6320      	str	r0, [r4, #48]	@ 0x30
 801b594:	b920      	cbnz	r0, 801b5a0 <rand+0x20>
 801b596:	4b12      	ldr	r3, [pc, #72]	@ (801b5e0 <rand+0x60>)
 801b598:	4812      	ldr	r0, [pc, #72]	@ (801b5e4 <rand+0x64>)
 801b59a:	2152      	movs	r1, #82	@ 0x52
 801b59c:	f000 ffee 	bl	801c57c <__assert_func>
 801b5a0:	4911      	ldr	r1, [pc, #68]	@ (801b5e8 <rand+0x68>)
 801b5a2:	4b12      	ldr	r3, [pc, #72]	@ (801b5ec <rand+0x6c>)
 801b5a4:	e9c0 1300 	strd	r1, r3, [r0]
 801b5a8:	4b11      	ldr	r3, [pc, #68]	@ (801b5f0 <rand+0x70>)
 801b5aa:	6083      	str	r3, [r0, #8]
 801b5ac:	230b      	movs	r3, #11
 801b5ae:	8183      	strh	r3, [r0, #12]
 801b5b0:	2100      	movs	r1, #0
 801b5b2:	2001      	movs	r0, #1
 801b5b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b5b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b5ba:	480e      	ldr	r0, [pc, #56]	@ (801b5f4 <rand+0x74>)
 801b5bc:	690b      	ldr	r3, [r1, #16]
 801b5be:	694c      	ldr	r4, [r1, #20]
 801b5c0:	4a0d      	ldr	r2, [pc, #52]	@ (801b5f8 <rand+0x78>)
 801b5c2:	4358      	muls	r0, r3
 801b5c4:	fb02 0004 	mla	r0, r2, r4, r0
 801b5c8:	fba3 3202 	umull	r3, r2, r3, r2
 801b5cc:	3301      	adds	r3, #1
 801b5ce:	eb40 0002 	adc.w	r0, r0, r2
 801b5d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b5d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b5da:	bd10      	pop	{r4, pc}
 801b5dc:	200000cc 	.word	0x200000cc
 801b5e0:	0806da7c 	.word	0x0806da7c
 801b5e4:	0806da93 	.word	0x0806da93
 801b5e8:	abcd330e 	.word	0xabcd330e
 801b5ec:	e66d1234 	.word	0xe66d1234
 801b5f0:	0005deec 	.word	0x0005deec
 801b5f4:	5851f42d 	.word	0x5851f42d
 801b5f8:	4c957f2d 	.word	0x4c957f2d

0801b5fc <_strtoul_l.constprop.0>:
 801b5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b600:	4e34      	ldr	r6, [pc, #208]	@ (801b6d4 <_strtoul_l.constprop.0+0xd8>)
 801b602:	4686      	mov	lr, r0
 801b604:	460d      	mov	r5, r1
 801b606:	4628      	mov	r0, r5
 801b608:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b60c:	5d37      	ldrb	r7, [r6, r4]
 801b60e:	f017 0708 	ands.w	r7, r7, #8
 801b612:	d1f8      	bne.n	801b606 <_strtoul_l.constprop.0+0xa>
 801b614:	2c2d      	cmp	r4, #45	@ 0x2d
 801b616:	d12f      	bne.n	801b678 <_strtoul_l.constprop.0+0x7c>
 801b618:	782c      	ldrb	r4, [r5, #0]
 801b61a:	2701      	movs	r7, #1
 801b61c:	1c85      	adds	r5, r0, #2
 801b61e:	f033 0010 	bics.w	r0, r3, #16
 801b622:	d109      	bne.n	801b638 <_strtoul_l.constprop.0+0x3c>
 801b624:	2c30      	cmp	r4, #48	@ 0x30
 801b626:	d12c      	bne.n	801b682 <_strtoul_l.constprop.0+0x86>
 801b628:	7828      	ldrb	r0, [r5, #0]
 801b62a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b62e:	2858      	cmp	r0, #88	@ 0x58
 801b630:	d127      	bne.n	801b682 <_strtoul_l.constprop.0+0x86>
 801b632:	786c      	ldrb	r4, [r5, #1]
 801b634:	2310      	movs	r3, #16
 801b636:	3502      	adds	r5, #2
 801b638:	f04f 38ff 	mov.w	r8, #4294967295
 801b63c:	2600      	movs	r6, #0
 801b63e:	fbb8 f8f3 	udiv	r8, r8, r3
 801b642:	fb03 f908 	mul.w	r9, r3, r8
 801b646:	ea6f 0909 	mvn.w	r9, r9
 801b64a:	4630      	mov	r0, r6
 801b64c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b650:	f1bc 0f09 	cmp.w	ip, #9
 801b654:	d81c      	bhi.n	801b690 <_strtoul_l.constprop.0+0x94>
 801b656:	4664      	mov	r4, ip
 801b658:	42a3      	cmp	r3, r4
 801b65a:	dd2a      	ble.n	801b6b2 <_strtoul_l.constprop.0+0xb6>
 801b65c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801b660:	d007      	beq.n	801b672 <_strtoul_l.constprop.0+0x76>
 801b662:	4580      	cmp	r8, r0
 801b664:	d322      	bcc.n	801b6ac <_strtoul_l.constprop.0+0xb0>
 801b666:	d101      	bne.n	801b66c <_strtoul_l.constprop.0+0x70>
 801b668:	45a1      	cmp	r9, r4
 801b66a:	db1f      	blt.n	801b6ac <_strtoul_l.constprop.0+0xb0>
 801b66c:	fb00 4003 	mla	r0, r0, r3, r4
 801b670:	2601      	movs	r6, #1
 801b672:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b676:	e7e9      	b.n	801b64c <_strtoul_l.constprop.0+0x50>
 801b678:	2c2b      	cmp	r4, #43	@ 0x2b
 801b67a:	bf04      	itt	eq
 801b67c:	782c      	ldrbeq	r4, [r5, #0]
 801b67e:	1c85      	addeq	r5, r0, #2
 801b680:	e7cd      	b.n	801b61e <_strtoul_l.constprop.0+0x22>
 801b682:	2b00      	cmp	r3, #0
 801b684:	d1d8      	bne.n	801b638 <_strtoul_l.constprop.0+0x3c>
 801b686:	2c30      	cmp	r4, #48	@ 0x30
 801b688:	bf0c      	ite	eq
 801b68a:	2308      	moveq	r3, #8
 801b68c:	230a      	movne	r3, #10
 801b68e:	e7d3      	b.n	801b638 <_strtoul_l.constprop.0+0x3c>
 801b690:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b694:	f1bc 0f19 	cmp.w	ip, #25
 801b698:	d801      	bhi.n	801b69e <_strtoul_l.constprop.0+0xa2>
 801b69a:	3c37      	subs	r4, #55	@ 0x37
 801b69c:	e7dc      	b.n	801b658 <_strtoul_l.constprop.0+0x5c>
 801b69e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b6a2:	f1bc 0f19 	cmp.w	ip, #25
 801b6a6:	d804      	bhi.n	801b6b2 <_strtoul_l.constprop.0+0xb6>
 801b6a8:	3c57      	subs	r4, #87	@ 0x57
 801b6aa:	e7d5      	b.n	801b658 <_strtoul_l.constprop.0+0x5c>
 801b6ac:	f04f 36ff 	mov.w	r6, #4294967295
 801b6b0:	e7df      	b.n	801b672 <_strtoul_l.constprop.0+0x76>
 801b6b2:	1c73      	adds	r3, r6, #1
 801b6b4:	d106      	bne.n	801b6c4 <_strtoul_l.constprop.0+0xc8>
 801b6b6:	2322      	movs	r3, #34	@ 0x22
 801b6b8:	f8ce 3000 	str.w	r3, [lr]
 801b6bc:	4630      	mov	r0, r6
 801b6be:	b932      	cbnz	r2, 801b6ce <_strtoul_l.constprop.0+0xd2>
 801b6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6c4:	b107      	cbz	r7, 801b6c8 <_strtoul_l.constprop.0+0xcc>
 801b6c6:	4240      	negs	r0, r0
 801b6c8:	2a00      	cmp	r2, #0
 801b6ca:	d0f9      	beq.n	801b6c0 <_strtoul_l.constprop.0+0xc4>
 801b6cc:	b106      	cbz	r6, 801b6d0 <_strtoul_l.constprop.0+0xd4>
 801b6ce:	1e69      	subs	r1, r5, #1
 801b6d0:	6011      	str	r1, [r2, #0]
 801b6d2:	e7f5      	b.n	801b6c0 <_strtoul_l.constprop.0+0xc4>
 801b6d4:	0806daec 	.word	0x0806daec

0801b6d8 <strtoul>:
 801b6d8:	4613      	mov	r3, r2
 801b6da:	460a      	mov	r2, r1
 801b6dc:	4601      	mov	r1, r0
 801b6de:	4802      	ldr	r0, [pc, #8]	@ (801b6e8 <strtoul+0x10>)
 801b6e0:	6800      	ldr	r0, [r0, #0]
 801b6e2:	f7ff bf8b 	b.w	801b5fc <_strtoul_l.constprop.0>
 801b6e6:	bf00      	nop
 801b6e8:	200000cc 	.word	0x200000cc

0801b6ec <__cvt>:
 801b6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6f0:	ec57 6b10 	vmov	r6, r7, d0
 801b6f4:	2f00      	cmp	r7, #0
 801b6f6:	460c      	mov	r4, r1
 801b6f8:	4619      	mov	r1, r3
 801b6fa:	463b      	mov	r3, r7
 801b6fc:	bfbb      	ittet	lt
 801b6fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801b702:	461f      	movlt	r7, r3
 801b704:	2300      	movge	r3, #0
 801b706:	232d      	movlt	r3, #45	@ 0x2d
 801b708:	700b      	strb	r3, [r1, #0]
 801b70a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b70c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801b710:	4691      	mov	r9, r2
 801b712:	f023 0820 	bic.w	r8, r3, #32
 801b716:	bfbc      	itt	lt
 801b718:	4632      	movlt	r2, r6
 801b71a:	4616      	movlt	r6, r2
 801b71c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b720:	d005      	beq.n	801b72e <__cvt+0x42>
 801b722:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801b726:	d100      	bne.n	801b72a <__cvt+0x3e>
 801b728:	3401      	adds	r4, #1
 801b72a:	2102      	movs	r1, #2
 801b72c:	e000      	b.n	801b730 <__cvt+0x44>
 801b72e:	2103      	movs	r1, #3
 801b730:	ab03      	add	r3, sp, #12
 801b732:	9301      	str	r3, [sp, #4]
 801b734:	ab02      	add	r3, sp, #8
 801b736:	9300      	str	r3, [sp, #0]
 801b738:	ec47 6b10 	vmov	d0, r6, r7
 801b73c:	4653      	mov	r3, sl
 801b73e:	4622      	mov	r2, r4
 801b740:	f000 ffc2 	bl	801c6c8 <_dtoa_r>
 801b744:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801b748:	4605      	mov	r5, r0
 801b74a:	d119      	bne.n	801b780 <__cvt+0x94>
 801b74c:	f019 0f01 	tst.w	r9, #1
 801b750:	d00e      	beq.n	801b770 <__cvt+0x84>
 801b752:	eb00 0904 	add.w	r9, r0, r4
 801b756:	2200      	movs	r2, #0
 801b758:	2300      	movs	r3, #0
 801b75a:	4630      	mov	r0, r6
 801b75c:	4639      	mov	r1, r7
 801b75e:	f7e5 f9cb 	bl	8000af8 <__aeabi_dcmpeq>
 801b762:	b108      	cbz	r0, 801b768 <__cvt+0x7c>
 801b764:	f8cd 900c 	str.w	r9, [sp, #12]
 801b768:	2230      	movs	r2, #48	@ 0x30
 801b76a:	9b03      	ldr	r3, [sp, #12]
 801b76c:	454b      	cmp	r3, r9
 801b76e:	d31e      	bcc.n	801b7ae <__cvt+0xc2>
 801b770:	9b03      	ldr	r3, [sp, #12]
 801b772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b774:	1b5b      	subs	r3, r3, r5
 801b776:	4628      	mov	r0, r5
 801b778:	6013      	str	r3, [r2, #0]
 801b77a:	b004      	add	sp, #16
 801b77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b780:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b784:	eb00 0904 	add.w	r9, r0, r4
 801b788:	d1e5      	bne.n	801b756 <__cvt+0x6a>
 801b78a:	7803      	ldrb	r3, [r0, #0]
 801b78c:	2b30      	cmp	r3, #48	@ 0x30
 801b78e:	d10a      	bne.n	801b7a6 <__cvt+0xba>
 801b790:	2200      	movs	r2, #0
 801b792:	2300      	movs	r3, #0
 801b794:	4630      	mov	r0, r6
 801b796:	4639      	mov	r1, r7
 801b798:	f7e5 f9ae 	bl	8000af8 <__aeabi_dcmpeq>
 801b79c:	b918      	cbnz	r0, 801b7a6 <__cvt+0xba>
 801b79e:	f1c4 0401 	rsb	r4, r4, #1
 801b7a2:	f8ca 4000 	str.w	r4, [sl]
 801b7a6:	f8da 3000 	ldr.w	r3, [sl]
 801b7aa:	4499      	add	r9, r3
 801b7ac:	e7d3      	b.n	801b756 <__cvt+0x6a>
 801b7ae:	1c59      	adds	r1, r3, #1
 801b7b0:	9103      	str	r1, [sp, #12]
 801b7b2:	701a      	strb	r2, [r3, #0]
 801b7b4:	e7d9      	b.n	801b76a <__cvt+0x7e>

0801b7b6 <__exponent>:
 801b7b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b7b8:	2900      	cmp	r1, #0
 801b7ba:	bfba      	itte	lt
 801b7bc:	4249      	neglt	r1, r1
 801b7be:	232d      	movlt	r3, #45	@ 0x2d
 801b7c0:	232b      	movge	r3, #43	@ 0x2b
 801b7c2:	2909      	cmp	r1, #9
 801b7c4:	7002      	strb	r2, [r0, #0]
 801b7c6:	7043      	strb	r3, [r0, #1]
 801b7c8:	dd29      	ble.n	801b81e <__exponent+0x68>
 801b7ca:	f10d 0307 	add.w	r3, sp, #7
 801b7ce:	461d      	mov	r5, r3
 801b7d0:	270a      	movs	r7, #10
 801b7d2:	461a      	mov	r2, r3
 801b7d4:	fbb1 f6f7 	udiv	r6, r1, r7
 801b7d8:	fb07 1416 	mls	r4, r7, r6, r1
 801b7dc:	3430      	adds	r4, #48	@ 0x30
 801b7de:	f802 4c01 	strb.w	r4, [r2, #-1]
 801b7e2:	460c      	mov	r4, r1
 801b7e4:	2c63      	cmp	r4, #99	@ 0x63
 801b7e6:	f103 33ff 	add.w	r3, r3, #4294967295
 801b7ea:	4631      	mov	r1, r6
 801b7ec:	dcf1      	bgt.n	801b7d2 <__exponent+0x1c>
 801b7ee:	3130      	adds	r1, #48	@ 0x30
 801b7f0:	1e94      	subs	r4, r2, #2
 801b7f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b7f6:	1c41      	adds	r1, r0, #1
 801b7f8:	4623      	mov	r3, r4
 801b7fa:	42ab      	cmp	r3, r5
 801b7fc:	d30a      	bcc.n	801b814 <__exponent+0x5e>
 801b7fe:	f10d 0309 	add.w	r3, sp, #9
 801b802:	1a9b      	subs	r3, r3, r2
 801b804:	42ac      	cmp	r4, r5
 801b806:	bf88      	it	hi
 801b808:	2300      	movhi	r3, #0
 801b80a:	3302      	adds	r3, #2
 801b80c:	4403      	add	r3, r0
 801b80e:	1a18      	subs	r0, r3, r0
 801b810:	b003      	add	sp, #12
 801b812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b814:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b818:	f801 6f01 	strb.w	r6, [r1, #1]!
 801b81c:	e7ed      	b.n	801b7fa <__exponent+0x44>
 801b81e:	2330      	movs	r3, #48	@ 0x30
 801b820:	3130      	adds	r1, #48	@ 0x30
 801b822:	7083      	strb	r3, [r0, #2]
 801b824:	70c1      	strb	r1, [r0, #3]
 801b826:	1d03      	adds	r3, r0, #4
 801b828:	e7f1      	b.n	801b80e <__exponent+0x58>
	...

0801b82c <_printf_float>:
 801b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b830:	b08d      	sub	sp, #52	@ 0x34
 801b832:	460c      	mov	r4, r1
 801b834:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801b838:	4616      	mov	r6, r2
 801b83a:	461f      	mov	r7, r3
 801b83c:	4605      	mov	r5, r0
 801b83e:	f000 fdff 	bl	801c440 <_localeconv_r>
 801b842:	6803      	ldr	r3, [r0, #0]
 801b844:	9304      	str	r3, [sp, #16]
 801b846:	4618      	mov	r0, r3
 801b848:	f7e4 fd2a 	bl	80002a0 <strlen>
 801b84c:	2300      	movs	r3, #0
 801b84e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b850:	f8d8 3000 	ldr.w	r3, [r8]
 801b854:	9005      	str	r0, [sp, #20]
 801b856:	3307      	adds	r3, #7
 801b858:	f023 0307 	bic.w	r3, r3, #7
 801b85c:	f103 0208 	add.w	r2, r3, #8
 801b860:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b864:	f8d4 b000 	ldr.w	fp, [r4]
 801b868:	f8c8 2000 	str.w	r2, [r8]
 801b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b870:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801b874:	9307      	str	r3, [sp, #28]
 801b876:	f8cd 8018 	str.w	r8, [sp, #24]
 801b87a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801b87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b882:	4b9c      	ldr	r3, [pc, #624]	@ (801baf4 <_printf_float+0x2c8>)
 801b884:	f04f 32ff 	mov.w	r2, #4294967295
 801b888:	f7e5 f968 	bl	8000b5c <__aeabi_dcmpun>
 801b88c:	bb70      	cbnz	r0, 801b8ec <_printf_float+0xc0>
 801b88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b892:	4b98      	ldr	r3, [pc, #608]	@ (801baf4 <_printf_float+0x2c8>)
 801b894:	f04f 32ff 	mov.w	r2, #4294967295
 801b898:	f7e5 f942 	bl	8000b20 <__aeabi_dcmple>
 801b89c:	bb30      	cbnz	r0, 801b8ec <_printf_float+0xc0>
 801b89e:	2200      	movs	r2, #0
 801b8a0:	2300      	movs	r3, #0
 801b8a2:	4640      	mov	r0, r8
 801b8a4:	4649      	mov	r1, r9
 801b8a6:	f7e5 f931 	bl	8000b0c <__aeabi_dcmplt>
 801b8aa:	b110      	cbz	r0, 801b8b2 <_printf_float+0x86>
 801b8ac:	232d      	movs	r3, #45	@ 0x2d
 801b8ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b8b2:	4a91      	ldr	r2, [pc, #580]	@ (801baf8 <_printf_float+0x2cc>)
 801b8b4:	4b91      	ldr	r3, [pc, #580]	@ (801bafc <_printf_float+0x2d0>)
 801b8b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b8ba:	bf94      	ite	ls
 801b8bc:	4690      	movls	r8, r2
 801b8be:	4698      	movhi	r8, r3
 801b8c0:	2303      	movs	r3, #3
 801b8c2:	6123      	str	r3, [r4, #16]
 801b8c4:	f02b 0304 	bic.w	r3, fp, #4
 801b8c8:	6023      	str	r3, [r4, #0]
 801b8ca:	f04f 0900 	mov.w	r9, #0
 801b8ce:	9700      	str	r7, [sp, #0]
 801b8d0:	4633      	mov	r3, r6
 801b8d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 801b8d4:	4621      	mov	r1, r4
 801b8d6:	4628      	mov	r0, r5
 801b8d8:	f000 f9d2 	bl	801bc80 <_printf_common>
 801b8dc:	3001      	adds	r0, #1
 801b8de:	f040 808d 	bne.w	801b9fc <_printf_float+0x1d0>
 801b8e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b8e6:	b00d      	add	sp, #52	@ 0x34
 801b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ec:	4642      	mov	r2, r8
 801b8ee:	464b      	mov	r3, r9
 801b8f0:	4640      	mov	r0, r8
 801b8f2:	4649      	mov	r1, r9
 801b8f4:	f7e5 f932 	bl	8000b5c <__aeabi_dcmpun>
 801b8f8:	b140      	cbz	r0, 801b90c <_printf_float+0xe0>
 801b8fa:	464b      	mov	r3, r9
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	bfbc      	itt	lt
 801b900:	232d      	movlt	r3, #45	@ 0x2d
 801b902:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801b906:	4a7e      	ldr	r2, [pc, #504]	@ (801bb00 <_printf_float+0x2d4>)
 801b908:	4b7e      	ldr	r3, [pc, #504]	@ (801bb04 <_printf_float+0x2d8>)
 801b90a:	e7d4      	b.n	801b8b6 <_printf_float+0x8a>
 801b90c:	6863      	ldr	r3, [r4, #4]
 801b90e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801b912:	9206      	str	r2, [sp, #24]
 801b914:	1c5a      	adds	r2, r3, #1
 801b916:	d13b      	bne.n	801b990 <_printf_float+0x164>
 801b918:	2306      	movs	r3, #6
 801b91a:	6063      	str	r3, [r4, #4]
 801b91c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801b920:	2300      	movs	r3, #0
 801b922:	6022      	str	r2, [r4, #0]
 801b924:	9303      	str	r3, [sp, #12]
 801b926:	ab0a      	add	r3, sp, #40	@ 0x28
 801b928:	e9cd a301 	strd	sl, r3, [sp, #4]
 801b92c:	ab09      	add	r3, sp, #36	@ 0x24
 801b92e:	9300      	str	r3, [sp, #0]
 801b930:	6861      	ldr	r1, [r4, #4]
 801b932:	ec49 8b10 	vmov	d0, r8, r9
 801b936:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801b93a:	4628      	mov	r0, r5
 801b93c:	f7ff fed6 	bl	801b6ec <__cvt>
 801b940:	9b06      	ldr	r3, [sp, #24]
 801b942:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b944:	2b47      	cmp	r3, #71	@ 0x47
 801b946:	4680      	mov	r8, r0
 801b948:	d129      	bne.n	801b99e <_printf_float+0x172>
 801b94a:	1cc8      	adds	r0, r1, #3
 801b94c:	db02      	blt.n	801b954 <_printf_float+0x128>
 801b94e:	6863      	ldr	r3, [r4, #4]
 801b950:	4299      	cmp	r1, r3
 801b952:	dd41      	ble.n	801b9d8 <_printf_float+0x1ac>
 801b954:	f1aa 0a02 	sub.w	sl, sl, #2
 801b958:	fa5f fa8a 	uxtb.w	sl, sl
 801b95c:	3901      	subs	r1, #1
 801b95e:	4652      	mov	r2, sl
 801b960:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b964:	9109      	str	r1, [sp, #36]	@ 0x24
 801b966:	f7ff ff26 	bl	801b7b6 <__exponent>
 801b96a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b96c:	1813      	adds	r3, r2, r0
 801b96e:	2a01      	cmp	r2, #1
 801b970:	4681      	mov	r9, r0
 801b972:	6123      	str	r3, [r4, #16]
 801b974:	dc02      	bgt.n	801b97c <_printf_float+0x150>
 801b976:	6822      	ldr	r2, [r4, #0]
 801b978:	07d2      	lsls	r2, r2, #31
 801b97a:	d501      	bpl.n	801b980 <_printf_float+0x154>
 801b97c:	3301      	adds	r3, #1
 801b97e:	6123      	str	r3, [r4, #16]
 801b980:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801b984:	2b00      	cmp	r3, #0
 801b986:	d0a2      	beq.n	801b8ce <_printf_float+0xa2>
 801b988:	232d      	movs	r3, #45	@ 0x2d
 801b98a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b98e:	e79e      	b.n	801b8ce <_printf_float+0xa2>
 801b990:	9a06      	ldr	r2, [sp, #24]
 801b992:	2a47      	cmp	r2, #71	@ 0x47
 801b994:	d1c2      	bne.n	801b91c <_printf_float+0xf0>
 801b996:	2b00      	cmp	r3, #0
 801b998:	d1c0      	bne.n	801b91c <_printf_float+0xf0>
 801b99a:	2301      	movs	r3, #1
 801b99c:	e7bd      	b.n	801b91a <_printf_float+0xee>
 801b99e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801b9a2:	d9db      	bls.n	801b95c <_printf_float+0x130>
 801b9a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801b9a8:	d118      	bne.n	801b9dc <_printf_float+0x1b0>
 801b9aa:	2900      	cmp	r1, #0
 801b9ac:	6863      	ldr	r3, [r4, #4]
 801b9ae:	dd0b      	ble.n	801b9c8 <_printf_float+0x19c>
 801b9b0:	6121      	str	r1, [r4, #16]
 801b9b2:	b913      	cbnz	r3, 801b9ba <_printf_float+0x18e>
 801b9b4:	6822      	ldr	r2, [r4, #0]
 801b9b6:	07d0      	lsls	r0, r2, #31
 801b9b8:	d502      	bpl.n	801b9c0 <_printf_float+0x194>
 801b9ba:	3301      	adds	r3, #1
 801b9bc:	440b      	add	r3, r1
 801b9be:	6123      	str	r3, [r4, #16]
 801b9c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 801b9c2:	f04f 0900 	mov.w	r9, #0
 801b9c6:	e7db      	b.n	801b980 <_printf_float+0x154>
 801b9c8:	b913      	cbnz	r3, 801b9d0 <_printf_float+0x1a4>
 801b9ca:	6822      	ldr	r2, [r4, #0]
 801b9cc:	07d2      	lsls	r2, r2, #31
 801b9ce:	d501      	bpl.n	801b9d4 <_printf_float+0x1a8>
 801b9d0:	3302      	adds	r3, #2
 801b9d2:	e7f4      	b.n	801b9be <_printf_float+0x192>
 801b9d4:	2301      	movs	r3, #1
 801b9d6:	e7f2      	b.n	801b9be <_printf_float+0x192>
 801b9d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801b9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9de:	4299      	cmp	r1, r3
 801b9e0:	db05      	blt.n	801b9ee <_printf_float+0x1c2>
 801b9e2:	6823      	ldr	r3, [r4, #0]
 801b9e4:	6121      	str	r1, [r4, #16]
 801b9e6:	07d8      	lsls	r0, r3, #31
 801b9e8:	d5ea      	bpl.n	801b9c0 <_printf_float+0x194>
 801b9ea:	1c4b      	adds	r3, r1, #1
 801b9ec:	e7e7      	b.n	801b9be <_printf_float+0x192>
 801b9ee:	2900      	cmp	r1, #0
 801b9f0:	bfd4      	ite	le
 801b9f2:	f1c1 0202 	rsble	r2, r1, #2
 801b9f6:	2201      	movgt	r2, #1
 801b9f8:	4413      	add	r3, r2
 801b9fa:	e7e0      	b.n	801b9be <_printf_float+0x192>
 801b9fc:	6823      	ldr	r3, [r4, #0]
 801b9fe:	055a      	lsls	r2, r3, #21
 801ba00:	d407      	bmi.n	801ba12 <_printf_float+0x1e6>
 801ba02:	6923      	ldr	r3, [r4, #16]
 801ba04:	4642      	mov	r2, r8
 801ba06:	4631      	mov	r1, r6
 801ba08:	4628      	mov	r0, r5
 801ba0a:	47b8      	blx	r7
 801ba0c:	3001      	adds	r0, #1
 801ba0e:	d12b      	bne.n	801ba68 <_printf_float+0x23c>
 801ba10:	e767      	b.n	801b8e2 <_printf_float+0xb6>
 801ba12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801ba16:	f240 80dd 	bls.w	801bbd4 <_printf_float+0x3a8>
 801ba1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ba1e:	2200      	movs	r2, #0
 801ba20:	2300      	movs	r3, #0
 801ba22:	f7e5 f869 	bl	8000af8 <__aeabi_dcmpeq>
 801ba26:	2800      	cmp	r0, #0
 801ba28:	d033      	beq.n	801ba92 <_printf_float+0x266>
 801ba2a:	4a37      	ldr	r2, [pc, #220]	@ (801bb08 <_printf_float+0x2dc>)
 801ba2c:	2301      	movs	r3, #1
 801ba2e:	4631      	mov	r1, r6
 801ba30:	4628      	mov	r0, r5
 801ba32:	47b8      	blx	r7
 801ba34:	3001      	adds	r0, #1
 801ba36:	f43f af54 	beq.w	801b8e2 <_printf_float+0xb6>
 801ba3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ba3e:	4543      	cmp	r3, r8
 801ba40:	db02      	blt.n	801ba48 <_printf_float+0x21c>
 801ba42:	6823      	ldr	r3, [r4, #0]
 801ba44:	07d8      	lsls	r0, r3, #31
 801ba46:	d50f      	bpl.n	801ba68 <_printf_float+0x23c>
 801ba48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba4c:	4631      	mov	r1, r6
 801ba4e:	4628      	mov	r0, r5
 801ba50:	47b8      	blx	r7
 801ba52:	3001      	adds	r0, #1
 801ba54:	f43f af45 	beq.w	801b8e2 <_printf_float+0xb6>
 801ba58:	f04f 0900 	mov.w	r9, #0
 801ba5c:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba60:	f104 0a1a 	add.w	sl, r4, #26
 801ba64:	45c8      	cmp	r8, r9
 801ba66:	dc09      	bgt.n	801ba7c <_printf_float+0x250>
 801ba68:	6823      	ldr	r3, [r4, #0]
 801ba6a:	079b      	lsls	r3, r3, #30
 801ba6c:	f100 8103 	bmi.w	801bc76 <_printf_float+0x44a>
 801ba70:	68e0      	ldr	r0, [r4, #12]
 801ba72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba74:	4298      	cmp	r0, r3
 801ba76:	bfb8      	it	lt
 801ba78:	4618      	movlt	r0, r3
 801ba7a:	e734      	b.n	801b8e6 <_printf_float+0xba>
 801ba7c:	2301      	movs	r3, #1
 801ba7e:	4652      	mov	r2, sl
 801ba80:	4631      	mov	r1, r6
 801ba82:	4628      	mov	r0, r5
 801ba84:	47b8      	blx	r7
 801ba86:	3001      	adds	r0, #1
 801ba88:	f43f af2b 	beq.w	801b8e2 <_printf_float+0xb6>
 801ba8c:	f109 0901 	add.w	r9, r9, #1
 801ba90:	e7e8      	b.n	801ba64 <_printf_float+0x238>
 801ba92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	dc39      	bgt.n	801bb0c <_printf_float+0x2e0>
 801ba98:	4a1b      	ldr	r2, [pc, #108]	@ (801bb08 <_printf_float+0x2dc>)
 801ba9a:	2301      	movs	r3, #1
 801ba9c:	4631      	mov	r1, r6
 801ba9e:	4628      	mov	r0, r5
 801baa0:	47b8      	blx	r7
 801baa2:	3001      	adds	r0, #1
 801baa4:	f43f af1d 	beq.w	801b8e2 <_printf_float+0xb6>
 801baa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801baac:	ea59 0303 	orrs.w	r3, r9, r3
 801bab0:	d102      	bne.n	801bab8 <_printf_float+0x28c>
 801bab2:	6823      	ldr	r3, [r4, #0]
 801bab4:	07d9      	lsls	r1, r3, #31
 801bab6:	d5d7      	bpl.n	801ba68 <_printf_float+0x23c>
 801bab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801babc:	4631      	mov	r1, r6
 801babe:	4628      	mov	r0, r5
 801bac0:	47b8      	blx	r7
 801bac2:	3001      	adds	r0, #1
 801bac4:	f43f af0d 	beq.w	801b8e2 <_printf_float+0xb6>
 801bac8:	f04f 0a00 	mov.w	sl, #0
 801bacc:	f104 0b1a 	add.w	fp, r4, #26
 801bad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bad2:	425b      	negs	r3, r3
 801bad4:	4553      	cmp	r3, sl
 801bad6:	dc01      	bgt.n	801badc <_printf_float+0x2b0>
 801bad8:	464b      	mov	r3, r9
 801bada:	e793      	b.n	801ba04 <_printf_float+0x1d8>
 801badc:	2301      	movs	r3, #1
 801bade:	465a      	mov	r2, fp
 801bae0:	4631      	mov	r1, r6
 801bae2:	4628      	mov	r0, r5
 801bae4:	47b8      	blx	r7
 801bae6:	3001      	adds	r0, #1
 801bae8:	f43f aefb 	beq.w	801b8e2 <_printf_float+0xb6>
 801baec:	f10a 0a01 	add.w	sl, sl, #1
 801baf0:	e7ee      	b.n	801bad0 <_printf_float+0x2a4>
 801baf2:	bf00      	nop
 801baf4:	7fefffff 	.word	0x7fefffff
 801baf8:	0806dbec 	.word	0x0806dbec
 801bafc:	0806dbf0 	.word	0x0806dbf0
 801bb00:	0806dbf4 	.word	0x0806dbf4
 801bb04:	0806dbf8 	.word	0x0806dbf8
 801bb08:	0806dbfc 	.word	0x0806dbfc
 801bb0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bb0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801bb12:	4553      	cmp	r3, sl
 801bb14:	bfa8      	it	ge
 801bb16:	4653      	movge	r3, sl
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	4699      	mov	r9, r3
 801bb1c:	dc36      	bgt.n	801bb8c <_printf_float+0x360>
 801bb1e:	f04f 0b00 	mov.w	fp, #0
 801bb22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb26:	f104 021a 	add.w	r2, r4, #26
 801bb2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bb2c:	9306      	str	r3, [sp, #24]
 801bb2e:	eba3 0309 	sub.w	r3, r3, r9
 801bb32:	455b      	cmp	r3, fp
 801bb34:	dc31      	bgt.n	801bb9a <_printf_float+0x36e>
 801bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb38:	459a      	cmp	sl, r3
 801bb3a:	dc3a      	bgt.n	801bbb2 <_printf_float+0x386>
 801bb3c:	6823      	ldr	r3, [r4, #0]
 801bb3e:	07da      	lsls	r2, r3, #31
 801bb40:	d437      	bmi.n	801bbb2 <_printf_float+0x386>
 801bb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb44:	ebaa 0903 	sub.w	r9, sl, r3
 801bb48:	9b06      	ldr	r3, [sp, #24]
 801bb4a:	ebaa 0303 	sub.w	r3, sl, r3
 801bb4e:	4599      	cmp	r9, r3
 801bb50:	bfa8      	it	ge
 801bb52:	4699      	movge	r9, r3
 801bb54:	f1b9 0f00 	cmp.w	r9, #0
 801bb58:	dc33      	bgt.n	801bbc2 <_printf_float+0x396>
 801bb5a:	f04f 0800 	mov.w	r8, #0
 801bb5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb62:	f104 0b1a 	add.w	fp, r4, #26
 801bb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb68:	ebaa 0303 	sub.w	r3, sl, r3
 801bb6c:	eba3 0309 	sub.w	r3, r3, r9
 801bb70:	4543      	cmp	r3, r8
 801bb72:	f77f af79 	ble.w	801ba68 <_printf_float+0x23c>
 801bb76:	2301      	movs	r3, #1
 801bb78:	465a      	mov	r2, fp
 801bb7a:	4631      	mov	r1, r6
 801bb7c:	4628      	mov	r0, r5
 801bb7e:	47b8      	blx	r7
 801bb80:	3001      	adds	r0, #1
 801bb82:	f43f aeae 	beq.w	801b8e2 <_printf_float+0xb6>
 801bb86:	f108 0801 	add.w	r8, r8, #1
 801bb8a:	e7ec      	b.n	801bb66 <_printf_float+0x33a>
 801bb8c:	4642      	mov	r2, r8
 801bb8e:	4631      	mov	r1, r6
 801bb90:	4628      	mov	r0, r5
 801bb92:	47b8      	blx	r7
 801bb94:	3001      	adds	r0, #1
 801bb96:	d1c2      	bne.n	801bb1e <_printf_float+0x2f2>
 801bb98:	e6a3      	b.n	801b8e2 <_printf_float+0xb6>
 801bb9a:	2301      	movs	r3, #1
 801bb9c:	4631      	mov	r1, r6
 801bb9e:	4628      	mov	r0, r5
 801bba0:	9206      	str	r2, [sp, #24]
 801bba2:	47b8      	blx	r7
 801bba4:	3001      	adds	r0, #1
 801bba6:	f43f ae9c 	beq.w	801b8e2 <_printf_float+0xb6>
 801bbaa:	9a06      	ldr	r2, [sp, #24]
 801bbac:	f10b 0b01 	add.w	fp, fp, #1
 801bbb0:	e7bb      	b.n	801bb2a <_printf_float+0x2fe>
 801bbb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbb6:	4631      	mov	r1, r6
 801bbb8:	4628      	mov	r0, r5
 801bbba:	47b8      	blx	r7
 801bbbc:	3001      	adds	r0, #1
 801bbbe:	d1c0      	bne.n	801bb42 <_printf_float+0x316>
 801bbc0:	e68f      	b.n	801b8e2 <_printf_float+0xb6>
 801bbc2:	9a06      	ldr	r2, [sp, #24]
 801bbc4:	464b      	mov	r3, r9
 801bbc6:	4442      	add	r2, r8
 801bbc8:	4631      	mov	r1, r6
 801bbca:	4628      	mov	r0, r5
 801bbcc:	47b8      	blx	r7
 801bbce:	3001      	adds	r0, #1
 801bbd0:	d1c3      	bne.n	801bb5a <_printf_float+0x32e>
 801bbd2:	e686      	b.n	801b8e2 <_printf_float+0xb6>
 801bbd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801bbd8:	f1ba 0f01 	cmp.w	sl, #1
 801bbdc:	dc01      	bgt.n	801bbe2 <_printf_float+0x3b6>
 801bbde:	07db      	lsls	r3, r3, #31
 801bbe0:	d536      	bpl.n	801bc50 <_printf_float+0x424>
 801bbe2:	2301      	movs	r3, #1
 801bbe4:	4642      	mov	r2, r8
 801bbe6:	4631      	mov	r1, r6
 801bbe8:	4628      	mov	r0, r5
 801bbea:	47b8      	blx	r7
 801bbec:	3001      	adds	r0, #1
 801bbee:	f43f ae78 	beq.w	801b8e2 <_printf_float+0xb6>
 801bbf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbf6:	4631      	mov	r1, r6
 801bbf8:	4628      	mov	r0, r5
 801bbfa:	47b8      	blx	r7
 801bbfc:	3001      	adds	r0, #1
 801bbfe:	f43f ae70 	beq.w	801b8e2 <_printf_float+0xb6>
 801bc02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bc06:	2200      	movs	r2, #0
 801bc08:	2300      	movs	r3, #0
 801bc0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc0e:	f7e4 ff73 	bl	8000af8 <__aeabi_dcmpeq>
 801bc12:	b9c0      	cbnz	r0, 801bc46 <_printf_float+0x41a>
 801bc14:	4653      	mov	r3, sl
 801bc16:	f108 0201 	add.w	r2, r8, #1
 801bc1a:	4631      	mov	r1, r6
 801bc1c:	4628      	mov	r0, r5
 801bc1e:	47b8      	blx	r7
 801bc20:	3001      	adds	r0, #1
 801bc22:	d10c      	bne.n	801bc3e <_printf_float+0x412>
 801bc24:	e65d      	b.n	801b8e2 <_printf_float+0xb6>
 801bc26:	2301      	movs	r3, #1
 801bc28:	465a      	mov	r2, fp
 801bc2a:	4631      	mov	r1, r6
 801bc2c:	4628      	mov	r0, r5
 801bc2e:	47b8      	blx	r7
 801bc30:	3001      	adds	r0, #1
 801bc32:	f43f ae56 	beq.w	801b8e2 <_printf_float+0xb6>
 801bc36:	f108 0801 	add.w	r8, r8, #1
 801bc3a:	45d0      	cmp	r8, sl
 801bc3c:	dbf3      	blt.n	801bc26 <_printf_float+0x3fa>
 801bc3e:	464b      	mov	r3, r9
 801bc40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801bc44:	e6df      	b.n	801ba06 <_printf_float+0x1da>
 801bc46:	f04f 0800 	mov.w	r8, #0
 801bc4a:	f104 0b1a 	add.w	fp, r4, #26
 801bc4e:	e7f4      	b.n	801bc3a <_printf_float+0x40e>
 801bc50:	2301      	movs	r3, #1
 801bc52:	4642      	mov	r2, r8
 801bc54:	e7e1      	b.n	801bc1a <_printf_float+0x3ee>
 801bc56:	2301      	movs	r3, #1
 801bc58:	464a      	mov	r2, r9
 801bc5a:	4631      	mov	r1, r6
 801bc5c:	4628      	mov	r0, r5
 801bc5e:	47b8      	blx	r7
 801bc60:	3001      	adds	r0, #1
 801bc62:	f43f ae3e 	beq.w	801b8e2 <_printf_float+0xb6>
 801bc66:	f108 0801 	add.w	r8, r8, #1
 801bc6a:	68e3      	ldr	r3, [r4, #12]
 801bc6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bc6e:	1a5b      	subs	r3, r3, r1
 801bc70:	4543      	cmp	r3, r8
 801bc72:	dcf0      	bgt.n	801bc56 <_printf_float+0x42a>
 801bc74:	e6fc      	b.n	801ba70 <_printf_float+0x244>
 801bc76:	f04f 0800 	mov.w	r8, #0
 801bc7a:	f104 0919 	add.w	r9, r4, #25
 801bc7e:	e7f4      	b.n	801bc6a <_printf_float+0x43e>

0801bc80 <_printf_common>:
 801bc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc84:	4616      	mov	r6, r2
 801bc86:	4698      	mov	r8, r3
 801bc88:	688a      	ldr	r2, [r1, #8]
 801bc8a:	690b      	ldr	r3, [r1, #16]
 801bc8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bc90:	4293      	cmp	r3, r2
 801bc92:	bfb8      	it	lt
 801bc94:	4613      	movlt	r3, r2
 801bc96:	6033      	str	r3, [r6, #0]
 801bc98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bc9c:	4607      	mov	r7, r0
 801bc9e:	460c      	mov	r4, r1
 801bca0:	b10a      	cbz	r2, 801bca6 <_printf_common+0x26>
 801bca2:	3301      	adds	r3, #1
 801bca4:	6033      	str	r3, [r6, #0]
 801bca6:	6823      	ldr	r3, [r4, #0]
 801bca8:	0699      	lsls	r1, r3, #26
 801bcaa:	bf42      	ittt	mi
 801bcac:	6833      	ldrmi	r3, [r6, #0]
 801bcae:	3302      	addmi	r3, #2
 801bcb0:	6033      	strmi	r3, [r6, #0]
 801bcb2:	6825      	ldr	r5, [r4, #0]
 801bcb4:	f015 0506 	ands.w	r5, r5, #6
 801bcb8:	d106      	bne.n	801bcc8 <_printf_common+0x48>
 801bcba:	f104 0a19 	add.w	sl, r4, #25
 801bcbe:	68e3      	ldr	r3, [r4, #12]
 801bcc0:	6832      	ldr	r2, [r6, #0]
 801bcc2:	1a9b      	subs	r3, r3, r2
 801bcc4:	42ab      	cmp	r3, r5
 801bcc6:	dc26      	bgt.n	801bd16 <_printf_common+0x96>
 801bcc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bccc:	6822      	ldr	r2, [r4, #0]
 801bcce:	3b00      	subs	r3, #0
 801bcd0:	bf18      	it	ne
 801bcd2:	2301      	movne	r3, #1
 801bcd4:	0692      	lsls	r2, r2, #26
 801bcd6:	d42b      	bmi.n	801bd30 <_printf_common+0xb0>
 801bcd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bcdc:	4641      	mov	r1, r8
 801bcde:	4638      	mov	r0, r7
 801bce0:	47c8      	blx	r9
 801bce2:	3001      	adds	r0, #1
 801bce4:	d01e      	beq.n	801bd24 <_printf_common+0xa4>
 801bce6:	6823      	ldr	r3, [r4, #0]
 801bce8:	6922      	ldr	r2, [r4, #16]
 801bcea:	f003 0306 	and.w	r3, r3, #6
 801bcee:	2b04      	cmp	r3, #4
 801bcf0:	bf02      	ittt	eq
 801bcf2:	68e5      	ldreq	r5, [r4, #12]
 801bcf4:	6833      	ldreq	r3, [r6, #0]
 801bcf6:	1aed      	subeq	r5, r5, r3
 801bcf8:	68a3      	ldr	r3, [r4, #8]
 801bcfa:	bf0c      	ite	eq
 801bcfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bd00:	2500      	movne	r5, #0
 801bd02:	4293      	cmp	r3, r2
 801bd04:	bfc4      	itt	gt
 801bd06:	1a9b      	subgt	r3, r3, r2
 801bd08:	18ed      	addgt	r5, r5, r3
 801bd0a:	2600      	movs	r6, #0
 801bd0c:	341a      	adds	r4, #26
 801bd0e:	42b5      	cmp	r5, r6
 801bd10:	d11a      	bne.n	801bd48 <_printf_common+0xc8>
 801bd12:	2000      	movs	r0, #0
 801bd14:	e008      	b.n	801bd28 <_printf_common+0xa8>
 801bd16:	2301      	movs	r3, #1
 801bd18:	4652      	mov	r2, sl
 801bd1a:	4641      	mov	r1, r8
 801bd1c:	4638      	mov	r0, r7
 801bd1e:	47c8      	blx	r9
 801bd20:	3001      	adds	r0, #1
 801bd22:	d103      	bne.n	801bd2c <_printf_common+0xac>
 801bd24:	f04f 30ff 	mov.w	r0, #4294967295
 801bd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd2c:	3501      	adds	r5, #1
 801bd2e:	e7c6      	b.n	801bcbe <_printf_common+0x3e>
 801bd30:	18e1      	adds	r1, r4, r3
 801bd32:	1c5a      	adds	r2, r3, #1
 801bd34:	2030      	movs	r0, #48	@ 0x30
 801bd36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bd3a:	4422      	add	r2, r4
 801bd3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bd40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bd44:	3302      	adds	r3, #2
 801bd46:	e7c7      	b.n	801bcd8 <_printf_common+0x58>
 801bd48:	2301      	movs	r3, #1
 801bd4a:	4622      	mov	r2, r4
 801bd4c:	4641      	mov	r1, r8
 801bd4e:	4638      	mov	r0, r7
 801bd50:	47c8      	blx	r9
 801bd52:	3001      	adds	r0, #1
 801bd54:	d0e6      	beq.n	801bd24 <_printf_common+0xa4>
 801bd56:	3601      	adds	r6, #1
 801bd58:	e7d9      	b.n	801bd0e <_printf_common+0x8e>
	...

0801bd5c <_printf_i>:
 801bd5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd60:	7e0f      	ldrb	r7, [r1, #24]
 801bd62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bd64:	2f78      	cmp	r7, #120	@ 0x78
 801bd66:	4691      	mov	r9, r2
 801bd68:	4680      	mov	r8, r0
 801bd6a:	460c      	mov	r4, r1
 801bd6c:	469a      	mov	sl, r3
 801bd6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bd72:	d807      	bhi.n	801bd84 <_printf_i+0x28>
 801bd74:	2f62      	cmp	r7, #98	@ 0x62
 801bd76:	d80a      	bhi.n	801bd8e <_printf_i+0x32>
 801bd78:	2f00      	cmp	r7, #0
 801bd7a:	f000 80d2 	beq.w	801bf22 <_printf_i+0x1c6>
 801bd7e:	2f58      	cmp	r7, #88	@ 0x58
 801bd80:	f000 80b9 	beq.w	801bef6 <_printf_i+0x19a>
 801bd84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bd88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bd8c:	e03a      	b.n	801be04 <_printf_i+0xa8>
 801bd8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bd92:	2b15      	cmp	r3, #21
 801bd94:	d8f6      	bhi.n	801bd84 <_printf_i+0x28>
 801bd96:	a101      	add	r1, pc, #4	@ (adr r1, 801bd9c <_printf_i+0x40>)
 801bd98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bd9c:	0801bdf5 	.word	0x0801bdf5
 801bda0:	0801be09 	.word	0x0801be09
 801bda4:	0801bd85 	.word	0x0801bd85
 801bda8:	0801bd85 	.word	0x0801bd85
 801bdac:	0801bd85 	.word	0x0801bd85
 801bdb0:	0801bd85 	.word	0x0801bd85
 801bdb4:	0801be09 	.word	0x0801be09
 801bdb8:	0801bd85 	.word	0x0801bd85
 801bdbc:	0801bd85 	.word	0x0801bd85
 801bdc0:	0801bd85 	.word	0x0801bd85
 801bdc4:	0801bd85 	.word	0x0801bd85
 801bdc8:	0801bf09 	.word	0x0801bf09
 801bdcc:	0801be33 	.word	0x0801be33
 801bdd0:	0801bec3 	.word	0x0801bec3
 801bdd4:	0801bd85 	.word	0x0801bd85
 801bdd8:	0801bd85 	.word	0x0801bd85
 801bddc:	0801bf2b 	.word	0x0801bf2b
 801bde0:	0801bd85 	.word	0x0801bd85
 801bde4:	0801be33 	.word	0x0801be33
 801bde8:	0801bd85 	.word	0x0801bd85
 801bdec:	0801bd85 	.word	0x0801bd85
 801bdf0:	0801becb 	.word	0x0801becb
 801bdf4:	6833      	ldr	r3, [r6, #0]
 801bdf6:	1d1a      	adds	r2, r3, #4
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	6032      	str	r2, [r6, #0]
 801bdfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801be00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801be04:	2301      	movs	r3, #1
 801be06:	e09d      	b.n	801bf44 <_printf_i+0x1e8>
 801be08:	6833      	ldr	r3, [r6, #0]
 801be0a:	6820      	ldr	r0, [r4, #0]
 801be0c:	1d19      	adds	r1, r3, #4
 801be0e:	6031      	str	r1, [r6, #0]
 801be10:	0606      	lsls	r6, r0, #24
 801be12:	d501      	bpl.n	801be18 <_printf_i+0xbc>
 801be14:	681d      	ldr	r5, [r3, #0]
 801be16:	e003      	b.n	801be20 <_printf_i+0xc4>
 801be18:	0645      	lsls	r5, r0, #25
 801be1a:	d5fb      	bpl.n	801be14 <_printf_i+0xb8>
 801be1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801be20:	2d00      	cmp	r5, #0
 801be22:	da03      	bge.n	801be2c <_printf_i+0xd0>
 801be24:	232d      	movs	r3, #45	@ 0x2d
 801be26:	426d      	negs	r5, r5
 801be28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be2c:	4859      	ldr	r0, [pc, #356]	@ (801bf94 <_printf_i+0x238>)
 801be2e:	230a      	movs	r3, #10
 801be30:	e011      	b.n	801be56 <_printf_i+0xfa>
 801be32:	6821      	ldr	r1, [r4, #0]
 801be34:	6833      	ldr	r3, [r6, #0]
 801be36:	0608      	lsls	r0, r1, #24
 801be38:	f853 5b04 	ldr.w	r5, [r3], #4
 801be3c:	d402      	bmi.n	801be44 <_printf_i+0xe8>
 801be3e:	0649      	lsls	r1, r1, #25
 801be40:	bf48      	it	mi
 801be42:	b2ad      	uxthmi	r5, r5
 801be44:	2f6f      	cmp	r7, #111	@ 0x6f
 801be46:	4853      	ldr	r0, [pc, #332]	@ (801bf94 <_printf_i+0x238>)
 801be48:	6033      	str	r3, [r6, #0]
 801be4a:	bf14      	ite	ne
 801be4c:	230a      	movne	r3, #10
 801be4e:	2308      	moveq	r3, #8
 801be50:	2100      	movs	r1, #0
 801be52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801be56:	6866      	ldr	r6, [r4, #4]
 801be58:	60a6      	str	r6, [r4, #8]
 801be5a:	2e00      	cmp	r6, #0
 801be5c:	bfa2      	ittt	ge
 801be5e:	6821      	ldrge	r1, [r4, #0]
 801be60:	f021 0104 	bicge.w	r1, r1, #4
 801be64:	6021      	strge	r1, [r4, #0]
 801be66:	b90d      	cbnz	r5, 801be6c <_printf_i+0x110>
 801be68:	2e00      	cmp	r6, #0
 801be6a:	d04b      	beq.n	801bf04 <_printf_i+0x1a8>
 801be6c:	4616      	mov	r6, r2
 801be6e:	fbb5 f1f3 	udiv	r1, r5, r3
 801be72:	fb03 5711 	mls	r7, r3, r1, r5
 801be76:	5dc7      	ldrb	r7, [r0, r7]
 801be78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801be7c:	462f      	mov	r7, r5
 801be7e:	42bb      	cmp	r3, r7
 801be80:	460d      	mov	r5, r1
 801be82:	d9f4      	bls.n	801be6e <_printf_i+0x112>
 801be84:	2b08      	cmp	r3, #8
 801be86:	d10b      	bne.n	801bea0 <_printf_i+0x144>
 801be88:	6823      	ldr	r3, [r4, #0]
 801be8a:	07df      	lsls	r7, r3, #31
 801be8c:	d508      	bpl.n	801bea0 <_printf_i+0x144>
 801be8e:	6923      	ldr	r3, [r4, #16]
 801be90:	6861      	ldr	r1, [r4, #4]
 801be92:	4299      	cmp	r1, r3
 801be94:	bfde      	ittt	le
 801be96:	2330      	movle	r3, #48	@ 0x30
 801be98:	f806 3c01 	strble.w	r3, [r6, #-1]
 801be9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bea0:	1b92      	subs	r2, r2, r6
 801bea2:	6122      	str	r2, [r4, #16]
 801bea4:	f8cd a000 	str.w	sl, [sp]
 801bea8:	464b      	mov	r3, r9
 801beaa:	aa03      	add	r2, sp, #12
 801beac:	4621      	mov	r1, r4
 801beae:	4640      	mov	r0, r8
 801beb0:	f7ff fee6 	bl	801bc80 <_printf_common>
 801beb4:	3001      	adds	r0, #1
 801beb6:	d14a      	bne.n	801bf4e <_printf_i+0x1f2>
 801beb8:	f04f 30ff 	mov.w	r0, #4294967295
 801bebc:	b004      	add	sp, #16
 801bebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bec2:	6823      	ldr	r3, [r4, #0]
 801bec4:	f043 0320 	orr.w	r3, r3, #32
 801bec8:	6023      	str	r3, [r4, #0]
 801beca:	4833      	ldr	r0, [pc, #204]	@ (801bf98 <_printf_i+0x23c>)
 801becc:	2778      	movs	r7, #120	@ 0x78
 801bece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bed2:	6823      	ldr	r3, [r4, #0]
 801bed4:	6831      	ldr	r1, [r6, #0]
 801bed6:	061f      	lsls	r7, r3, #24
 801bed8:	f851 5b04 	ldr.w	r5, [r1], #4
 801bedc:	d402      	bmi.n	801bee4 <_printf_i+0x188>
 801bede:	065f      	lsls	r7, r3, #25
 801bee0:	bf48      	it	mi
 801bee2:	b2ad      	uxthmi	r5, r5
 801bee4:	6031      	str	r1, [r6, #0]
 801bee6:	07d9      	lsls	r1, r3, #31
 801bee8:	bf44      	itt	mi
 801beea:	f043 0320 	orrmi.w	r3, r3, #32
 801beee:	6023      	strmi	r3, [r4, #0]
 801bef0:	b11d      	cbz	r5, 801befa <_printf_i+0x19e>
 801bef2:	2310      	movs	r3, #16
 801bef4:	e7ac      	b.n	801be50 <_printf_i+0xf4>
 801bef6:	4827      	ldr	r0, [pc, #156]	@ (801bf94 <_printf_i+0x238>)
 801bef8:	e7e9      	b.n	801bece <_printf_i+0x172>
 801befa:	6823      	ldr	r3, [r4, #0]
 801befc:	f023 0320 	bic.w	r3, r3, #32
 801bf00:	6023      	str	r3, [r4, #0]
 801bf02:	e7f6      	b.n	801bef2 <_printf_i+0x196>
 801bf04:	4616      	mov	r6, r2
 801bf06:	e7bd      	b.n	801be84 <_printf_i+0x128>
 801bf08:	6833      	ldr	r3, [r6, #0]
 801bf0a:	6825      	ldr	r5, [r4, #0]
 801bf0c:	6961      	ldr	r1, [r4, #20]
 801bf0e:	1d18      	adds	r0, r3, #4
 801bf10:	6030      	str	r0, [r6, #0]
 801bf12:	062e      	lsls	r6, r5, #24
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	d501      	bpl.n	801bf1c <_printf_i+0x1c0>
 801bf18:	6019      	str	r1, [r3, #0]
 801bf1a:	e002      	b.n	801bf22 <_printf_i+0x1c6>
 801bf1c:	0668      	lsls	r0, r5, #25
 801bf1e:	d5fb      	bpl.n	801bf18 <_printf_i+0x1bc>
 801bf20:	8019      	strh	r1, [r3, #0]
 801bf22:	2300      	movs	r3, #0
 801bf24:	6123      	str	r3, [r4, #16]
 801bf26:	4616      	mov	r6, r2
 801bf28:	e7bc      	b.n	801bea4 <_printf_i+0x148>
 801bf2a:	6833      	ldr	r3, [r6, #0]
 801bf2c:	1d1a      	adds	r2, r3, #4
 801bf2e:	6032      	str	r2, [r6, #0]
 801bf30:	681e      	ldr	r6, [r3, #0]
 801bf32:	6862      	ldr	r2, [r4, #4]
 801bf34:	2100      	movs	r1, #0
 801bf36:	4630      	mov	r0, r6
 801bf38:	f7e4 f962 	bl	8000200 <memchr>
 801bf3c:	b108      	cbz	r0, 801bf42 <_printf_i+0x1e6>
 801bf3e:	1b80      	subs	r0, r0, r6
 801bf40:	6060      	str	r0, [r4, #4]
 801bf42:	6863      	ldr	r3, [r4, #4]
 801bf44:	6123      	str	r3, [r4, #16]
 801bf46:	2300      	movs	r3, #0
 801bf48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf4c:	e7aa      	b.n	801bea4 <_printf_i+0x148>
 801bf4e:	6923      	ldr	r3, [r4, #16]
 801bf50:	4632      	mov	r2, r6
 801bf52:	4649      	mov	r1, r9
 801bf54:	4640      	mov	r0, r8
 801bf56:	47d0      	blx	sl
 801bf58:	3001      	adds	r0, #1
 801bf5a:	d0ad      	beq.n	801beb8 <_printf_i+0x15c>
 801bf5c:	6823      	ldr	r3, [r4, #0]
 801bf5e:	079b      	lsls	r3, r3, #30
 801bf60:	d413      	bmi.n	801bf8a <_printf_i+0x22e>
 801bf62:	68e0      	ldr	r0, [r4, #12]
 801bf64:	9b03      	ldr	r3, [sp, #12]
 801bf66:	4298      	cmp	r0, r3
 801bf68:	bfb8      	it	lt
 801bf6a:	4618      	movlt	r0, r3
 801bf6c:	e7a6      	b.n	801bebc <_printf_i+0x160>
 801bf6e:	2301      	movs	r3, #1
 801bf70:	4632      	mov	r2, r6
 801bf72:	4649      	mov	r1, r9
 801bf74:	4640      	mov	r0, r8
 801bf76:	47d0      	blx	sl
 801bf78:	3001      	adds	r0, #1
 801bf7a:	d09d      	beq.n	801beb8 <_printf_i+0x15c>
 801bf7c:	3501      	adds	r5, #1
 801bf7e:	68e3      	ldr	r3, [r4, #12]
 801bf80:	9903      	ldr	r1, [sp, #12]
 801bf82:	1a5b      	subs	r3, r3, r1
 801bf84:	42ab      	cmp	r3, r5
 801bf86:	dcf2      	bgt.n	801bf6e <_printf_i+0x212>
 801bf88:	e7eb      	b.n	801bf62 <_printf_i+0x206>
 801bf8a:	2500      	movs	r5, #0
 801bf8c:	f104 0619 	add.w	r6, r4, #25
 801bf90:	e7f5      	b.n	801bf7e <_printf_i+0x222>
 801bf92:	bf00      	nop
 801bf94:	0806dbfe 	.word	0x0806dbfe
 801bf98:	0806dc0f 	.word	0x0806dc0f

0801bf9c <std>:
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	b510      	push	{r4, lr}
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	e9c0 3300 	strd	r3, r3, [r0]
 801bfa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bfaa:	6083      	str	r3, [r0, #8]
 801bfac:	8181      	strh	r1, [r0, #12]
 801bfae:	6643      	str	r3, [r0, #100]	@ 0x64
 801bfb0:	81c2      	strh	r2, [r0, #14]
 801bfb2:	6183      	str	r3, [r0, #24]
 801bfb4:	4619      	mov	r1, r3
 801bfb6:	2208      	movs	r2, #8
 801bfb8:	305c      	adds	r0, #92	@ 0x5c
 801bfba:	f000 fa13 	bl	801c3e4 <memset>
 801bfbe:	4b0d      	ldr	r3, [pc, #52]	@ (801bff4 <std+0x58>)
 801bfc0:	6263      	str	r3, [r4, #36]	@ 0x24
 801bfc2:	4b0d      	ldr	r3, [pc, #52]	@ (801bff8 <std+0x5c>)
 801bfc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bfc6:	4b0d      	ldr	r3, [pc, #52]	@ (801bffc <std+0x60>)
 801bfc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bfca:	4b0d      	ldr	r3, [pc, #52]	@ (801c000 <std+0x64>)
 801bfcc:	6323      	str	r3, [r4, #48]	@ 0x30
 801bfce:	4b0d      	ldr	r3, [pc, #52]	@ (801c004 <std+0x68>)
 801bfd0:	6224      	str	r4, [r4, #32]
 801bfd2:	429c      	cmp	r4, r3
 801bfd4:	d006      	beq.n	801bfe4 <std+0x48>
 801bfd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bfda:	4294      	cmp	r4, r2
 801bfdc:	d002      	beq.n	801bfe4 <std+0x48>
 801bfde:	33d0      	adds	r3, #208	@ 0xd0
 801bfe0:	429c      	cmp	r4, r3
 801bfe2:	d105      	bne.n	801bff0 <std+0x54>
 801bfe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bfe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfec:	f000 baac 	b.w	801c548 <__retarget_lock_init_recursive>
 801bff0:	bd10      	pop	{r4, pc}
 801bff2:	bf00      	nop
 801bff4:	0801c201 	.word	0x0801c201
 801bff8:	0801c223 	.word	0x0801c223
 801bffc:	0801c25b 	.word	0x0801c25b
 801c000:	0801c27f 	.word	0x0801c27f
 801c004:	20013eb0 	.word	0x20013eb0

0801c008 <stdio_exit_handler>:
 801c008:	4a02      	ldr	r2, [pc, #8]	@ (801c014 <stdio_exit_handler+0xc>)
 801c00a:	4903      	ldr	r1, [pc, #12]	@ (801c018 <stdio_exit_handler+0x10>)
 801c00c:	4803      	ldr	r0, [pc, #12]	@ (801c01c <stdio_exit_handler+0x14>)
 801c00e:	f000 b869 	b.w	801c0e4 <_fwalk_sglue>
 801c012:	bf00      	nop
 801c014:	200000c0 	.word	0x200000c0
 801c018:	0801dd75 	.word	0x0801dd75
 801c01c:	200000d0 	.word	0x200000d0

0801c020 <cleanup_stdio>:
 801c020:	6841      	ldr	r1, [r0, #4]
 801c022:	4b0c      	ldr	r3, [pc, #48]	@ (801c054 <cleanup_stdio+0x34>)
 801c024:	4299      	cmp	r1, r3
 801c026:	b510      	push	{r4, lr}
 801c028:	4604      	mov	r4, r0
 801c02a:	d001      	beq.n	801c030 <cleanup_stdio+0x10>
 801c02c:	f001 fea2 	bl	801dd74 <_fflush_r>
 801c030:	68a1      	ldr	r1, [r4, #8]
 801c032:	4b09      	ldr	r3, [pc, #36]	@ (801c058 <cleanup_stdio+0x38>)
 801c034:	4299      	cmp	r1, r3
 801c036:	d002      	beq.n	801c03e <cleanup_stdio+0x1e>
 801c038:	4620      	mov	r0, r4
 801c03a:	f001 fe9b 	bl	801dd74 <_fflush_r>
 801c03e:	68e1      	ldr	r1, [r4, #12]
 801c040:	4b06      	ldr	r3, [pc, #24]	@ (801c05c <cleanup_stdio+0x3c>)
 801c042:	4299      	cmp	r1, r3
 801c044:	d004      	beq.n	801c050 <cleanup_stdio+0x30>
 801c046:	4620      	mov	r0, r4
 801c048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c04c:	f001 be92 	b.w	801dd74 <_fflush_r>
 801c050:	bd10      	pop	{r4, pc}
 801c052:	bf00      	nop
 801c054:	20013eb0 	.word	0x20013eb0
 801c058:	20013f18 	.word	0x20013f18
 801c05c:	20013f80 	.word	0x20013f80

0801c060 <global_stdio_init.part.0>:
 801c060:	b510      	push	{r4, lr}
 801c062:	4b0b      	ldr	r3, [pc, #44]	@ (801c090 <global_stdio_init.part.0+0x30>)
 801c064:	4c0b      	ldr	r4, [pc, #44]	@ (801c094 <global_stdio_init.part.0+0x34>)
 801c066:	4a0c      	ldr	r2, [pc, #48]	@ (801c098 <global_stdio_init.part.0+0x38>)
 801c068:	601a      	str	r2, [r3, #0]
 801c06a:	4620      	mov	r0, r4
 801c06c:	2200      	movs	r2, #0
 801c06e:	2104      	movs	r1, #4
 801c070:	f7ff ff94 	bl	801bf9c <std>
 801c074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c078:	2201      	movs	r2, #1
 801c07a:	2109      	movs	r1, #9
 801c07c:	f7ff ff8e 	bl	801bf9c <std>
 801c080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c084:	2202      	movs	r2, #2
 801c086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c08a:	2112      	movs	r1, #18
 801c08c:	f7ff bf86 	b.w	801bf9c <std>
 801c090:	20013fe8 	.word	0x20013fe8
 801c094:	20013eb0 	.word	0x20013eb0
 801c098:	0801c009 	.word	0x0801c009

0801c09c <__sfp_lock_acquire>:
 801c09c:	4801      	ldr	r0, [pc, #4]	@ (801c0a4 <__sfp_lock_acquire+0x8>)
 801c09e:	f000 ba54 	b.w	801c54a <__retarget_lock_acquire_recursive>
 801c0a2:	bf00      	nop
 801c0a4:	20013ff1 	.word	0x20013ff1

0801c0a8 <__sfp_lock_release>:
 801c0a8:	4801      	ldr	r0, [pc, #4]	@ (801c0b0 <__sfp_lock_release+0x8>)
 801c0aa:	f000 ba4f 	b.w	801c54c <__retarget_lock_release_recursive>
 801c0ae:	bf00      	nop
 801c0b0:	20013ff1 	.word	0x20013ff1

0801c0b4 <__sinit>:
 801c0b4:	b510      	push	{r4, lr}
 801c0b6:	4604      	mov	r4, r0
 801c0b8:	f7ff fff0 	bl	801c09c <__sfp_lock_acquire>
 801c0bc:	6a23      	ldr	r3, [r4, #32]
 801c0be:	b11b      	cbz	r3, 801c0c8 <__sinit+0x14>
 801c0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0c4:	f7ff bff0 	b.w	801c0a8 <__sfp_lock_release>
 801c0c8:	4b04      	ldr	r3, [pc, #16]	@ (801c0dc <__sinit+0x28>)
 801c0ca:	6223      	str	r3, [r4, #32]
 801c0cc:	4b04      	ldr	r3, [pc, #16]	@ (801c0e0 <__sinit+0x2c>)
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d1f5      	bne.n	801c0c0 <__sinit+0xc>
 801c0d4:	f7ff ffc4 	bl	801c060 <global_stdio_init.part.0>
 801c0d8:	e7f2      	b.n	801c0c0 <__sinit+0xc>
 801c0da:	bf00      	nop
 801c0dc:	0801c021 	.word	0x0801c021
 801c0e0:	20013fe8 	.word	0x20013fe8

0801c0e4 <_fwalk_sglue>:
 801c0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0e8:	4607      	mov	r7, r0
 801c0ea:	4688      	mov	r8, r1
 801c0ec:	4614      	mov	r4, r2
 801c0ee:	2600      	movs	r6, #0
 801c0f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c0f4:	f1b9 0901 	subs.w	r9, r9, #1
 801c0f8:	d505      	bpl.n	801c106 <_fwalk_sglue+0x22>
 801c0fa:	6824      	ldr	r4, [r4, #0]
 801c0fc:	2c00      	cmp	r4, #0
 801c0fe:	d1f7      	bne.n	801c0f0 <_fwalk_sglue+0xc>
 801c100:	4630      	mov	r0, r6
 801c102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c106:	89ab      	ldrh	r3, [r5, #12]
 801c108:	2b01      	cmp	r3, #1
 801c10a:	d907      	bls.n	801c11c <_fwalk_sglue+0x38>
 801c10c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c110:	3301      	adds	r3, #1
 801c112:	d003      	beq.n	801c11c <_fwalk_sglue+0x38>
 801c114:	4629      	mov	r1, r5
 801c116:	4638      	mov	r0, r7
 801c118:	47c0      	blx	r8
 801c11a:	4306      	orrs	r6, r0
 801c11c:	3568      	adds	r5, #104	@ 0x68
 801c11e:	e7e9      	b.n	801c0f4 <_fwalk_sglue+0x10>

0801c120 <iprintf>:
 801c120:	b40f      	push	{r0, r1, r2, r3}
 801c122:	b507      	push	{r0, r1, r2, lr}
 801c124:	4906      	ldr	r1, [pc, #24]	@ (801c140 <iprintf+0x20>)
 801c126:	ab04      	add	r3, sp, #16
 801c128:	6808      	ldr	r0, [r1, #0]
 801c12a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c12e:	6881      	ldr	r1, [r0, #8]
 801c130:	9301      	str	r3, [sp, #4]
 801c132:	f001 fc83 	bl	801da3c <_vfiprintf_r>
 801c136:	b003      	add	sp, #12
 801c138:	f85d eb04 	ldr.w	lr, [sp], #4
 801c13c:	b004      	add	sp, #16
 801c13e:	4770      	bx	lr
 801c140:	200000cc 	.word	0x200000cc

0801c144 <_puts_r>:
 801c144:	6a03      	ldr	r3, [r0, #32]
 801c146:	b570      	push	{r4, r5, r6, lr}
 801c148:	6884      	ldr	r4, [r0, #8]
 801c14a:	4605      	mov	r5, r0
 801c14c:	460e      	mov	r6, r1
 801c14e:	b90b      	cbnz	r3, 801c154 <_puts_r+0x10>
 801c150:	f7ff ffb0 	bl	801c0b4 <__sinit>
 801c154:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c156:	07db      	lsls	r3, r3, #31
 801c158:	d405      	bmi.n	801c166 <_puts_r+0x22>
 801c15a:	89a3      	ldrh	r3, [r4, #12]
 801c15c:	0598      	lsls	r0, r3, #22
 801c15e:	d402      	bmi.n	801c166 <_puts_r+0x22>
 801c160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c162:	f000 f9f2 	bl	801c54a <__retarget_lock_acquire_recursive>
 801c166:	89a3      	ldrh	r3, [r4, #12]
 801c168:	0719      	lsls	r1, r3, #28
 801c16a:	d502      	bpl.n	801c172 <_puts_r+0x2e>
 801c16c:	6923      	ldr	r3, [r4, #16]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d135      	bne.n	801c1de <_puts_r+0x9a>
 801c172:	4621      	mov	r1, r4
 801c174:	4628      	mov	r0, r5
 801c176:	f000 f8cf 	bl	801c318 <__swsetup_r>
 801c17a:	b380      	cbz	r0, 801c1de <_puts_r+0x9a>
 801c17c:	f04f 35ff 	mov.w	r5, #4294967295
 801c180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c182:	07da      	lsls	r2, r3, #31
 801c184:	d405      	bmi.n	801c192 <_puts_r+0x4e>
 801c186:	89a3      	ldrh	r3, [r4, #12]
 801c188:	059b      	lsls	r3, r3, #22
 801c18a:	d402      	bmi.n	801c192 <_puts_r+0x4e>
 801c18c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c18e:	f000 f9dd 	bl	801c54c <__retarget_lock_release_recursive>
 801c192:	4628      	mov	r0, r5
 801c194:	bd70      	pop	{r4, r5, r6, pc}
 801c196:	2b00      	cmp	r3, #0
 801c198:	da04      	bge.n	801c1a4 <_puts_r+0x60>
 801c19a:	69a2      	ldr	r2, [r4, #24]
 801c19c:	429a      	cmp	r2, r3
 801c19e:	dc17      	bgt.n	801c1d0 <_puts_r+0x8c>
 801c1a0:	290a      	cmp	r1, #10
 801c1a2:	d015      	beq.n	801c1d0 <_puts_r+0x8c>
 801c1a4:	6823      	ldr	r3, [r4, #0]
 801c1a6:	1c5a      	adds	r2, r3, #1
 801c1a8:	6022      	str	r2, [r4, #0]
 801c1aa:	7019      	strb	r1, [r3, #0]
 801c1ac:	68a3      	ldr	r3, [r4, #8]
 801c1ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c1b2:	3b01      	subs	r3, #1
 801c1b4:	60a3      	str	r3, [r4, #8]
 801c1b6:	2900      	cmp	r1, #0
 801c1b8:	d1ed      	bne.n	801c196 <_puts_r+0x52>
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	da11      	bge.n	801c1e2 <_puts_r+0x9e>
 801c1be:	4622      	mov	r2, r4
 801c1c0:	210a      	movs	r1, #10
 801c1c2:	4628      	mov	r0, r5
 801c1c4:	f000 f86a 	bl	801c29c <__swbuf_r>
 801c1c8:	3001      	adds	r0, #1
 801c1ca:	d0d7      	beq.n	801c17c <_puts_r+0x38>
 801c1cc:	250a      	movs	r5, #10
 801c1ce:	e7d7      	b.n	801c180 <_puts_r+0x3c>
 801c1d0:	4622      	mov	r2, r4
 801c1d2:	4628      	mov	r0, r5
 801c1d4:	f000 f862 	bl	801c29c <__swbuf_r>
 801c1d8:	3001      	adds	r0, #1
 801c1da:	d1e7      	bne.n	801c1ac <_puts_r+0x68>
 801c1dc:	e7ce      	b.n	801c17c <_puts_r+0x38>
 801c1de:	3e01      	subs	r6, #1
 801c1e0:	e7e4      	b.n	801c1ac <_puts_r+0x68>
 801c1e2:	6823      	ldr	r3, [r4, #0]
 801c1e4:	1c5a      	adds	r2, r3, #1
 801c1e6:	6022      	str	r2, [r4, #0]
 801c1e8:	220a      	movs	r2, #10
 801c1ea:	701a      	strb	r2, [r3, #0]
 801c1ec:	e7ee      	b.n	801c1cc <_puts_r+0x88>
	...

0801c1f0 <puts>:
 801c1f0:	4b02      	ldr	r3, [pc, #8]	@ (801c1fc <puts+0xc>)
 801c1f2:	4601      	mov	r1, r0
 801c1f4:	6818      	ldr	r0, [r3, #0]
 801c1f6:	f7ff bfa5 	b.w	801c144 <_puts_r>
 801c1fa:	bf00      	nop
 801c1fc:	200000cc 	.word	0x200000cc

0801c200 <__sread>:
 801c200:	b510      	push	{r4, lr}
 801c202:	460c      	mov	r4, r1
 801c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c208:	f000 f940 	bl	801c48c <_read_r>
 801c20c:	2800      	cmp	r0, #0
 801c20e:	bfab      	itete	ge
 801c210:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c212:	89a3      	ldrhlt	r3, [r4, #12]
 801c214:	181b      	addge	r3, r3, r0
 801c216:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c21a:	bfac      	ite	ge
 801c21c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c21e:	81a3      	strhlt	r3, [r4, #12]
 801c220:	bd10      	pop	{r4, pc}

0801c222 <__swrite>:
 801c222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c226:	461f      	mov	r7, r3
 801c228:	898b      	ldrh	r3, [r1, #12]
 801c22a:	05db      	lsls	r3, r3, #23
 801c22c:	4605      	mov	r5, r0
 801c22e:	460c      	mov	r4, r1
 801c230:	4616      	mov	r6, r2
 801c232:	d505      	bpl.n	801c240 <__swrite+0x1e>
 801c234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c238:	2302      	movs	r3, #2
 801c23a:	2200      	movs	r2, #0
 801c23c:	f000 f914 	bl	801c468 <_lseek_r>
 801c240:	89a3      	ldrh	r3, [r4, #12]
 801c242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c24a:	81a3      	strh	r3, [r4, #12]
 801c24c:	4632      	mov	r2, r6
 801c24e:	463b      	mov	r3, r7
 801c250:	4628      	mov	r0, r5
 801c252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c256:	f000 b93b 	b.w	801c4d0 <_write_r>

0801c25a <__sseek>:
 801c25a:	b510      	push	{r4, lr}
 801c25c:	460c      	mov	r4, r1
 801c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c262:	f000 f901 	bl	801c468 <_lseek_r>
 801c266:	1c43      	adds	r3, r0, #1
 801c268:	89a3      	ldrh	r3, [r4, #12]
 801c26a:	bf15      	itete	ne
 801c26c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c26e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c272:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c276:	81a3      	strheq	r3, [r4, #12]
 801c278:	bf18      	it	ne
 801c27a:	81a3      	strhne	r3, [r4, #12]
 801c27c:	bd10      	pop	{r4, pc}

0801c27e <__sclose>:
 801c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c282:	f000 b8e1 	b.w	801c448 <_close_r>
	...

0801c288 <viprintf>:
 801c288:	460b      	mov	r3, r1
 801c28a:	4903      	ldr	r1, [pc, #12]	@ (801c298 <viprintf+0x10>)
 801c28c:	4602      	mov	r2, r0
 801c28e:	6808      	ldr	r0, [r1, #0]
 801c290:	6881      	ldr	r1, [r0, #8]
 801c292:	f001 bbd3 	b.w	801da3c <_vfiprintf_r>
 801c296:	bf00      	nop
 801c298:	200000cc 	.word	0x200000cc

0801c29c <__swbuf_r>:
 801c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c29e:	460e      	mov	r6, r1
 801c2a0:	4614      	mov	r4, r2
 801c2a2:	4605      	mov	r5, r0
 801c2a4:	b118      	cbz	r0, 801c2ae <__swbuf_r+0x12>
 801c2a6:	6a03      	ldr	r3, [r0, #32]
 801c2a8:	b90b      	cbnz	r3, 801c2ae <__swbuf_r+0x12>
 801c2aa:	f7ff ff03 	bl	801c0b4 <__sinit>
 801c2ae:	69a3      	ldr	r3, [r4, #24]
 801c2b0:	60a3      	str	r3, [r4, #8]
 801c2b2:	89a3      	ldrh	r3, [r4, #12]
 801c2b4:	071a      	lsls	r2, r3, #28
 801c2b6:	d501      	bpl.n	801c2bc <__swbuf_r+0x20>
 801c2b8:	6923      	ldr	r3, [r4, #16]
 801c2ba:	b943      	cbnz	r3, 801c2ce <__swbuf_r+0x32>
 801c2bc:	4621      	mov	r1, r4
 801c2be:	4628      	mov	r0, r5
 801c2c0:	f000 f82a 	bl	801c318 <__swsetup_r>
 801c2c4:	b118      	cbz	r0, 801c2ce <__swbuf_r+0x32>
 801c2c6:	f04f 37ff 	mov.w	r7, #4294967295
 801c2ca:	4638      	mov	r0, r7
 801c2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2ce:	6823      	ldr	r3, [r4, #0]
 801c2d0:	6922      	ldr	r2, [r4, #16]
 801c2d2:	1a98      	subs	r0, r3, r2
 801c2d4:	6963      	ldr	r3, [r4, #20]
 801c2d6:	b2f6      	uxtb	r6, r6
 801c2d8:	4283      	cmp	r3, r0
 801c2da:	4637      	mov	r7, r6
 801c2dc:	dc05      	bgt.n	801c2ea <__swbuf_r+0x4e>
 801c2de:	4621      	mov	r1, r4
 801c2e0:	4628      	mov	r0, r5
 801c2e2:	f001 fd47 	bl	801dd74 <_fflush_r>
 801c2e6:	2800      	cmp	r0, #0
 801c2e8:	d1ed      	bne.n	801c2c6 <__swbuf_r+0x2a>
 801c2ea:	68a3      	ldr	r3, [r4, #8]
 801c2ec:	3b01      	subs	r3, #1
 801c2ee:	60a3      	str	r3, [r4, #8]
 801c2f0:	6823      	ldr	r3, [r4, #0]
 801c2f2:	1c5a      	adds	r2, r3, #1
 801c2f4:	6022      	str	r2, [r4, #0]
 801c2f6:	701e      	strb	r6, [r3, #0]
 801c2f8:	6962      	ldr	r2, [r4, #20]
 801c2fa:	1c43      	adds	r3, r0, #1
 801c2fc:	429a      	cmp	r2, r3
 801c2fe:	d004      	beq.n	801c30a <__swbuf_r+0x6e>
 801c300:	89a3      	ldrh	r3, [r4, #12]
 801c302:	07db      	lsls	r3, r3, #31
 801c304:	d5e1      	bpl.n	801c2ca <__swbuf_r+0x2e>
 801c306:	2e0a      	cmp	r6, #10
 801c308:	d1df      	bne.n	801c2ca <__swbuf_r+0x2e>
 801c30a:	4621      	mov	r1, r4
 801c30c:	4628      	mov	r0, r5
 801c30e:	f001 fd31 	bl	801dd74 <_fflush_r>
 801c312:	2800      	cmp	r0, #0
 801c314:	d0d9      	beq.n	801c2ca <__swbuf_r+0x2e>
 801c316:	e7d6      	b.n	801c2c6 <__swbuf_r+0x2a>

0801c318 <__swsetup_r>:
 801c318:	b538      	push	{r3, r4, r5, lr}
 801c31a:	4b29      	ldr	r3, [pc, #164]	@ (801c3c0 <__swsetup_r+0xa8>)
 801c31c:	4605      	mov	r5, r0
 801c31e:	6818      	ldr	r0, [r3, #0]
 801c320:	460c      	mov	r4, r1
 801c322:	b118      	cbz	r0, 801c32c <__swsetup_r+0x14>
 801c324:	6a03      	ldr	r3, [r0, #32]
 801c326:	b90b      	cbnz	r3, 801c32c <__swsetup_r+0x14>
 801c328:	f7ff fec4 	bl	801c0b4 <__sinit>
 801c32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c330:	0719      	lsls	r1, r3, #28
 801c332:	d422      	bmi.n	801c37a <__swsetup_r+0x62>
 801c334:	06da      	lsls	r2, r3, #27
 801c336:	d407      	bmi.n	801c348 <__swsetup_r+0x30>
 801c338:	2209      	movs	r2, #9
 801c33a:	602a      	str	r2, [r5, #0]
 801c33c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c340:	81a3      	strh	r3, [r4, #12]
 801c342:	f04f 30ff 	mov.w	r0, #4294967295
 801c346:	e033      	b.n	801c3b0 <__swsetup_r+0x98>
 801c348:	0758      	lsls	r0, r3, #29
 801c34a:	d512      	bpl.n	801c372 <__swsetup_r+0x5a>
 801c34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c34e:	b141      	cbz	r1, 801c362 <__swsetup_r+0x4a>
 801c350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c354:	4299      	cmp	r1, r3
 801c356:	d002      	beq.n	801c35e <__swsetup_r+0x46>
 801c358:	4628      	mov	r0, r5
 801c35a:	f000 ff79 	bl	801d250 <_free_r>
 801c35e:	2300      	movs	r3, #0
 801c360:	6363      	str	r3, [r4, #52]	@ 0x34
 801c362:	89a3      	ldrh	r3, [r4, #12]
 801c364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c368:	81a3      	strh	r3, [r4, #12]
 801c36a:	2300      	movs	r3, #0
 801c36c:	6063      	str	r3, [r4, #4]
 801c36e:	6923      	ldr	r3, [r4, #16]
 801c370:	6023      	str	r3, [r4, #0]
 801c372:	89a3      	ldrh	r3, [r4, #12]
 801c374:	f043 0308 	orr.w	r3, r3, #8
 801c378:	81a3      	strh	r3, [r4, #12]
 801c37a:	6923      	ldr	r3, [r4, #16]
 801c37c:	b94b      	cbnz	r3, 801c392 <__swsetup_r+0x7a>
 801c37e:	89a3      	ldrh	r3, [r4, #12]
 801c380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c388:	d003      	beq.n	801c392 <__swsetup_r+0x7a>
 801c38a:	4621      	mov	r1, r4
 801c38c:	4628      	mov	r0, r5
 801c38e:	f001 fd51 	bl	801de34 <__smakebuf_r>
 801c392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c396:	f013 0201 	ands.w	r2, r3, #1
 801c39a:	d00a      	beq.n	801c3b2 <__swsetup_r+0x9a>
 801c39c:	2200      	movs	r2, #0
 801c39e:	60a2      	str	r2, [r4, #8]
 801c3a0:	6962      	ldr	r2, [r4, #20]
 801c3a2:	4252      	negs	r2, r2
 801c3a4:	61a2      	str	r2, [r4, #24]
 801c3a6:	6922      	ldr	r2, [r4, #16]
 801c3a8:	b942      	cbnz	r2, 801c3bc <__swsetup_r+0xa4>
 801c3aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c3ae:	d1c5      	bne.n	801c33c <__swsetup_r+0x24>
 801c3b0:	bd38      	pop	{r3, r4, r5, pc}
 801c3b2:	0799      	lsls	r1, r3, #30
 801c3b4:	bf58      	it	pl
 801c3b6:	6962      	ldrpl	r2, [r4, #20]
 801c3b8:	60a2      	str	r2, [r4, #8]
 801c3ba:	e7f4      	b.n	801c3a6 <__swsetup_r+0x8e>
 801c3bc:	2000      	movs	r0, #0
 801c3be:	e7f7      	b.n	801c3b0 <__swsetup_r+0x98>
 801c3c0:	200000cc 	.word	0x200000cc

0801c3c4 <memcmp>:
 801c3c4:	b510      	push	{r4, lr}
 801c3c6:	3901      	subs	r1, #1
 801c3c8:	4402      	add	r2, r0
 801c3ca:	4290      	cmp	r0, r2
 801c3cc:	d101      	bne.n	801c3d2 <memcmp+0xe>
 801c3ce:	2000      	movs	r0, #0
 801c3d0:	e005      	b.n	801c3de <memcmp+0x1a>
 801c3d2:	7803      	ldrb	r3, [r0, #0]
 801c3d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c3d8:	42a3      	cmp	r3, r4
 801c3da:	d001      	beq.n	801c3e0 <memcmp+0x1c>
 801c3dc:	1b18      	subs	r0, r3, r4
 801c3de:	bd10      	pop	{r4, pc}
 801c3e0:	3001      	adds	r0, #1
 801c3e2:	e7f2      	b.n	801c3ca <memcmp+0x6>

0801c3e4 <memset>:
 801c3e4:	4402      	add	r2, r0
 801c3e6:	4603      	mov	r3, r0
 801c3e8:	4293      	cmp	r3, r2
 801c3ea:	d100      	bne.n	801c3ee <memset+0xa>
 801c3ec:	4770      	bx	lr
 801c3ee:	f803 1b01 	strb.w	r1, [r3], #1
 801c3f2:	e7f9      	b.n	801c3e8 <memset+0x4>

0801c3f4 <strncmp>:
 801c3f4:	b510      	push	{r4, lr}
 801c3f6:	b16a      	cbz	r2, 801c414 <strncmp+0x20>
 801c3f8:	3901      	subs	r1, #1
 801c3fa:	1884      	adds	r4, r0, r2
 801c3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c400:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c404:	429a      	cmp	r2, r3
 801c406:	d103      	bne.n	801c410 <strncmp+0x1c>
 801c408:	42a0      	cmp	r0, r4
 801c40a:	d001      	beq.n	801c410 <strncmp+0x1c>
 801c40c:	2a00      	cmp	r2, #0
 801c40e:	d1f5      	bne.n	801c3fc <strncmp+0x8>
 801c410:	1ad0      	subs	r0, r2, r3
 801c412:	bd10      	pop	{r4, pc}
 801c414:	4610      	mov	r0, r2
 801c416:	e7fc      	b.n	801c412 <strncmp+0x1e>

0801c418 <strncpy>:
 801c418:	b510      	push	{r4, lr}
 801c41a:	3901      	subs	r1, #1
 801c41c:	4603      	mov	r3, r0
 801c41e:	b132      	cbz	r2, 801c42e <strncpy+0x16>
 801c420:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c424:	f803 4b01 	strb.w	r4, [r3], #1
 801c428:	3a01      	subs	r2, #1
 801c42a:	2c00      	cmp	r4, #0
 801c42c:	d1f7      	bne.n	801c41e <strncpy+0x6>
 801c42e:	441a      	add	r2, r3
 801c430:	2100      	movs	r1, #0
 801c432:	4293      	cmp	r3, r2
 801c434:	d100      	bne.n	801c438 <strncpy+0x20>
 801c436:	bd10      	pop	{r4, pc}
 801c438:	f803 1b01 	strb.w	r1, [r3], #1
 801c43c:	e7f9      	b.n	801c432 <strncpy+0x1a>
	...

0801c440 <_localeconv_r>:
 801c440:	4800      	ldr	r0, [pc, #0]	@ (801c444 <_localeconv_r+0x4>)
 801c442:	4770      	bx	lr
 801c444:	2000020c 	.word	0x2000020c

0801c448 <_close_r>:
 801c448:	b538      	push	{r3, r4, r5, lr}
 801c44a:	4d06      	ldr	r5, [pc, #24]	@ (801c464 <_close_r+0x1c>)
 801c44c:	2300      	movs	r3, #0
 801c44e:	4604      	mov	r4, r0
 801c450:	4608      	mov	r0, r1
 801c452:	602b      	str	r3, [r5, #0]
 801c454:	f7e8 ff74 	bl	8005340 <_close>
 801c458:	1c43      	adds	r3, r0, #1
 801c45a:	d102      	bne.n	801c462 <_close_r+0x1a>
 801c45c:	682b      	ldr	r3, [r5, #0]
 801c45e:	b103      	cbz	r3, 801c462 <_close_r+0x1a>
 801c460:	6023      	str	r3, [r4, #0]
 801c462:	bd38      	pop	{r3, r4, r5, pc}
 801c464:	20013fec 	.word	0x20013fec

0801c468 <_lseek_r>:
 801c468:	b538      	push	{r3, r4, r5, lr}
 801c46a:	4d07      	ldr	r5, [pc, #28]	@ (801c488 <_lseek_r+0x20>)
 801c46c:	4604      	mov	r4, r0
 801c46e:	4608      	mov	r0, r1
 801c470:	4611      	mov	r1, r2
 801c472:	2200      	movs	r2, #0
 801c474:	602a      	str	r2, [r5, #0]
 801c476:	461a      	mov	r2, r3
 801c478:	f7e8 ff89 	bl	800538e <_lseek>
 801c47c:	1c43      	adds	r3, r0, #1
 801c47e:	d102      	bne.n	801c486 <_lseek_r+0x1e>
 801c480:	682b      	ldr	r3, [r5, #0]
 801c482:	b103      	cbz	r3, 801c486 <_lseek_r+0x1e>
 801c484:	6023      	str	r3, [r4, #0]
 801c486:	bd38      	pop	{r3, r4, r5, pc}
 801c488:	20013fec 	.word	0x20013fec

0801c48c <_read_r>:
 801c48c:	b538      	push	{r3, r4, r5, lr}
 801c48e:	4d07      	ldr	r5, [pc, #28]	@ (801c4ac <_read_r+0x20>)
 801c490:	4604      	mov	r4, r0
 801c492:	4608      	mov	r0, r1
 801c494:	4611      	mov	r1, r2
 801c496:	2200      	movs	r2, #0
 801c498:	602a      	str	r2, [r5, #0]
 801c49a:	461a      	mov	r2, r3
 801c49c:	f7e8 ff17 	bl	80052ce <_read>
 801c4a0:	1c43      	adds	r3, r0, #1
 801c4a2:	d102      	bne.n	801c4aa <_read_r+0x1e>
 801c4a4:	682b      	ldr	r3, [r5, #0]
 801c4a6:	b103      	cbz	r3, 801c4aa <_read_r+0x1e>
 801c4a8:	6023      	str	r3, [r4, #0]
 801c4aa:	bd38      	pop	{r3, r4, r5, pc}
 801c4ac:	20013fec 	.word	0x20013fec

0801c4b0 <_sbrk_r>:
 801c4b0:	b538      	push	{r3, r4, r5, lr}
 801c4b2:	4d06      	ldr	r5, [pc, #24]	@ (801c4cc <_sbrk_r+0x1c>)
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	4604      	mov	r4, r0
 801c4b8:	4608      	mov	r0, r1
 801c4ba:	602b      	str	r3, [r5, #0]
 801c4bc:	f7e8 ff74 	bl	80053a8 <_sbrk>
 801c4c0:	1c43      	adds	r3, r0, #1
 801c4c2:	d102      	bne.n	801c4ca <_sbrk_r+0x1a>
 801c4c4:	682b      	ldr	r3, [r5, #0]
 801c4c6:	b103      	cbz	r3, 801c4ca <_sbrk_r+0x1a>
 801c4c8:	6023      	str	r3, [r4, #0]
 801c4ca:	bd38      	pop	{r3, r4, r5, pc}
 801c4cc:	20013fec 	.word	0x20013fec

0801c4d0 <_write_r>:
 801c4d0:	b538      	push	{r3, r4, r5, lr}
 801c4d2:	4d07      	ldr	r5, [pc, #28]	@ (801c4f0 <_write_r+0x20>)
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	4608      	mov	r0, r1
 801c4d8:	4611      	mov	r1, r2
 801c4da:	2200      	movs	r2, #0
 801c4dc:	602a      	str	r2, [r5, #0]
 801c4de:	461a      	mov	r2, r3
 801c4e0:	f7e8 ff12 	bl	8005308 <_write>
 801c4e4:	1c43      	adds	r3, r0, #1
 801c4e6:	d102      	bne.n	801c4ee <_write_r+0x1e>
 801c4e8:	682b      	ldr	r3, [r5, #0]
 801c4ea:	b103      	cbz	r3, 801c4ee <_write_r+0x1e>
 801c4ec:	6023      	str	r3, [r4, #0]
 801c4ee:	bd38      	pop	{r3, r4, r5, pc}
 801c4f0:	20013fec 	.word	0x20013fec

0801c4f4 <__errno>:
 801c4f4:	4b01      	ldr	r3, [pc, #4]	@ (801c4fc <__errno+0x8>)
 801c4f6:	6818      	ldr	r0, [r3, #0]
 801c4f8:	4770      	bx	lr
 801c4fa:	bf00      	nop
 801c4fc:	200000cc 	.word	0x200000cc

0801c500 <__libc_init_array>:
 801c500:	b570      	push	{r4, r5, r6, lr}
 801c502:	4d0d      	ldr	r5, [pc, #52]	@ (801c538 <__libc_init_array+0x38>)
 801c504:	4c0d      	ldr	r4, [pc, #52]	@ (801c53c <__libc_init_array+0x3c>)
 801c506:	1b64      	subs	r4, r4, r5
 801c508:	10a4      	asrs	r4, r4, #2
 801c50a:	2600      	movs	r6, #0
 801c50c:	42a6      	cmp	r6, r4
 801c50e:	d109      	bne.n	801c524 <__libc_init_array+0x24>
 801c510:	4d0b      	ldr	r5, [pc, #44]	@ (801c540 <__libc_init_array+0x40>)
 801c512:	4c0c      	ldr	r4, [pc, #48]	@ (801c544 <__libc_init_array+0x44>)
 801c514:	f001 fd56 	bl	801dfc4 <_init>
 801c518:	1b64      	subs	r4, r4, r5
 801c51a:	10a4      	asrs	r4, r4, #2
 801c51c:	2600      	movs	r6, #0
 801c51e:	42a6      	cmp	r6, r4
 801c520:	d105      	bne.n	801c52e <__libc_init_array+0x2e>
 801c522:	bd70      	pop	{r4, r5, r6, pc}
 801c524:	f855 3b04 	ldr.w	r3, [r5], #4
 801c528:	4798      	blx	r3
 801c52a:	3601      	adds	r6, #1
 801c52c:	e7ee      	b.n	801c50c <__libc_init_array+0xc>
 801c52e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c532:	4798      	blx	r3
 801c534:	3601      	adds	r6, #1
 801c536:	e7f2      	b.n	801c51e <__libc_init_array+0x1e>
 801c538:	0806de4c 	.word	0x0806de4c
 801c53c:	0806de4c 	.word	0x0806de4c
 801c540:	0806de4c 	.word	0x0806de4c
 801c544:	0806de50 	.word	0x0806de50

0801c548 <__retarget_lock_init_recursive>:
 801c548:	4770      	bx	lr

0801c54a <__retarget_lock_acquire_recursive>:
 801c54a:	4770      	bx	lr

0801c54c <__retarget_lock_release_recursive>:
 801c54c:	4770      	bx	lr

0801c54e <strcpy>:
 801c54e:	4603      	mov	r3, r0
 801c550:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c554:	f803 2b01 	strb.w	r2, [r3], #1
 801c558:	2a00      	cmp	r2, #0
 801c55a:	d1f9      	bne.n	801c550 <strcpy+0x2>
 801c55c:	4770      	bx	lr

0801c55e <memcpy>:
 801c55e:	440a      	add	r2, r1
 801c560:	4291      	cmp	r1, r2
 801c562:	f100 33ff 	add.w	r3, r0, #4294967295
 801c566:	d100      	bne.n	801c56a <memcpy+0xc>
 801c568:	4770      	bx	lr
 801c56a:	b510      	push	{r4, lr}
 801c56c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c570:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c574:	4291      	cmp	r1, r2
 801c576:	d1f9      	bne.n	801c56c <memcpy+0xe>
 801c578:	bd10      	pop	{r4, pc}
	...

0801c57c <__assert_func>:
 801c57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c57e:	4614      	mov	r4, r2
 801c580:	461a      	mov	r2, r3
 801c582:	4b09      	ldr	r3, [pc, #36]	@ (801c5a8 <__assert_func+0x2c>)
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	4605      	mov	r5, r0
 801c588:	68d8      	ldr	r0, [r3, #12]
 801c58a:	b954      	cbnz	r4, 801c5a2 <__assert_func+0x26>
 801c58c:	4b07      	ldr	r3, [pc, #28]	@ (801c5ac <__assert_func+0x30>)
 801c58e:	461c      	mov	r4, r3
 801c590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c594:	9100      	str	r1, [sp, #0]
 801c596:	462b      	mov	r3, r5
 801c598:	4905      	ldr	r1, [pc, #20]	@ (801c5b0 <__assert_func+0x34>)
 801c59a:	f001 fc13 	bl	801ddc4 <fiprintf>
 801c59e:	f001 fca7 	bl	801def0 <abort>
 801c5a2:	4b04      	ldr	r3, [pc, #16]	@ (801c5b4 <__assert_func+0x38>)
 801c5a4:	e7f4      	b.n	801c590 <__assert_func+0x14>
 801c5a6:	bf00      	nop
 801c5a8:	200000cc 	.word	0x200000cc
 801c5ac:	0806dc5b 	.word	0x0806dc5b
 801c5b0:	0806dc2d 	.word	0x0806dc2d
 801c5b4:	0806dc20 	.word	0x0806dc20

0801c5b8 <quorem>:
 801c5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5bc:	6903      	ldr	r3, [r0, #16]
 801c5be:	690c      	ldr	r4, [r1, #16]
 801c5c0:	42a3      	cmp	r3, r4
 801c5c2:	4607      	mov	r7, r0
 801c5c4:	db7e      	blt.n	801c6c4 <quorem+0x10c>
 801c5c6:	3c01      	subs	r4, #1
 801c5c8:	f101 0814 	add.w	r8, r1, #20
 801c5cc:	00a3      	lsls	r3, r4, #2
 801c5ce:	f100 0514 	add.w	r5, r0, #20
 801c5d2:	9300      	str	r3, [sp, #0]
 801c5d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c5d8:	9301      	str	r3, [sp, #4]
 801c5da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c5de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	429a      	cmp	r2, r3
 801c5e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c5ea:	fbb2 f6f3 	udiv	r6, r2, r3
 801c5ee:	d32e      	bcc.n	801c64e <quorem+0x96>
 801c5f0:	f04f 0a00 	mov.w	sl, #0
 801c5f4:	46c4      	mov	ip, r8
 801c5f6:	46ae      	mov	lr, r5
 801c5f8:	46d3      	mov	fp, sl
 801c5fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c5fe:	b298      	uxth	r0, r3
 801c600:	fb06 a000 	mla	r0, r6, r0, sl
 801c604:	0c02      	lsrs	r2, r0, #16
 801c606:	0c1b      	lsrs	r3, r3, #16
 801c608:	fb06 2303 	mla	r3, r6, r3, r2
 801c60c:	f8de 2000 	ldr.w	r2, [lr]
 801c610:	b280      	uxth	r0, r0
 801c612:	b292      	uxth	r2, r2
 801c614:	1a12      	subs	r2, r2, r0
 801c616:	445a      	add	r2, fp
 801c618:	f8de 0000 	ldr.w	r0, [lr]
 801c61c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c620:	b29b      	uxth	r3, r3
 801c622:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c626:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c62a:	b292      	uxth	r2, r2
 801c62c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c630:	45e1      	cmp	r9, ip
 801c632:	f84e 2b04 	str.w	r2, [lr], #4
 801c636:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c63a:	d2de      	bcs.n	801c5fa <quorem+0x42>
 801c63c:	9b00      	ldr	r3, [sp, #0]
 801c63e:	58eb      	ldr	r3, [r5, r3]
 801c640:	b92b      	cbnz	r3, 801c64e <quorem+0x96>
 801c642:	9b01      	ldr	r3, [sp, #4]
 801c644:	3b04      	subs	r3, #4
 801c646:	429d      	cmp	r5, r3
 801c648:	461a      	mov	r2, r3
 801c64a:	d32f      	bcc.n	801c6ac <quorem+0xf4>
 801c64c:	613c      	str	r4, [r7, #16]
 801c64e:	4638      	mov	r0, r7
 801c650:	f001 f8c2 	bl	801d7d8 <__mcmp>
 801c654:	2800      	cmp	r0, #0
 801c656:	db25      	blt.n	801c6a4 <quorem+0xec>
 801c658:	4629      	mov	r1, r5
 801c65a:	2000      	movs	r0, #0
 801c65c:	f858 2b04 	ldr.w	r2, [r8], #4
 801c660:	f8d1 c000 	ldr.w	ip, [r1]
 801c664:	fa1f fe82 	uxth.w	lr, r2
 801c668:	fa1f f38c 	uxth.w	r3, ip
 801c66c:	eba3 030e 	sub.w	r3, r3, lr
 801c670:	4403      	add	r3, r0
 801c672:	0c12      	lsrs	r2, r2, #16
 801c674:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c678:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c67c:	b29b      	uxth	r3, r3
 801c67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c682:	45c1      	cmp	r9, r8
 801c684:	f841 3b04 	str.w	r3, [r1], #4
 801c688:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c68c:	d2e6      	bcs.n	801c65c <quorem+0xa4>
 801c68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c696:	b922      	cbnz	r2, 801c6a2 <quorem+0xea>
 801c698:	3b04      	subs	r3, #4
 801c69a:	429d      	cmp	r5, r3
 801c69c:	461a      	mov	r2, r3
 801c69e:	d30b      	bcc.n	801c6b8 <quorem+0x100>
 801c6a0:	613c      	str	r4, [r7, #16]
 801c6a2:	3601      	adds	r6, #1
 801c6a4:	4630      	mov	r0, r6
 801c6a6:	b003      	add	sp, #12
 801c6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ac:	6812      	ldr	r2, [r2, #0]
 801c6ae:	3b04      	subs	r3, #4
 801c6b0:	2a00      	cmp	r2, #0
 801c6b2:	d1cb      	bne.n	801c64c <quorem+0x94>
 801c6b4:	3c01      	subs	r4, #1
 801c6b6:	e7c6      	b.n	801c646 <quorem+0x8e>
 801c6b8:	6812      	ldr	r2, [r2, #0]
 801c6ba:	3b04      	subs	r3, #4
 801c6bc:	2a00      	cmp	r2, #0
 801c6be:	d1ef      	bne.n	801c6a0 <quorem+0xe8>
 801c6c0:	3c01      	subs	r4, #1
 801c6c2:	e7ea      	b.n	801c69a <quorem+0xe2>
 801c6c4:	2000      	movs	r0, #0
 801c6c6:	e7ee      	b.n	801c6a6 <quorem+0xee>

0801c6c8 <_dtoa_r>:
 801c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6cc:	69c7      	ldr	r7, [r0, #28]
 801c6ce:	b099      	sub	sp, #100	@ 0x64
 801c6d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c6d4:	ec55 4b10 	vmov	r4, r5, d0
 801c6d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801c6da:	9109      	str	r1, [sp, #36]	@ 0x24
 801c6dc:	4683      	mov	fp, r0
 801c6de:	920e      	str	r2, [sp, #56]	@ 0x38
 801c6e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c6e2:	b97f      	cbnz	r7, 801c704 <_dtoa_r+0x3c>
 801c6e4:	2010      	movs	r0, #16
 801c6e6:	f7fe fe95 	bl	801b414 <malloc>
 801c6ea:	4602      	mov	r2, r0
 801c6ec:	f8cb 001c 	str.w	r0, [fp, #28]
 801c6f0:	b920      	cbnz	r0, 801c6fc <_dtoa_r+0x34>
 801c6f2:	4ba7      	ldr	r3, [pc, #668]	@ (801c990 <_dtoa_r+0x2c8>)
 801c6f4:	21ef      	movs	r1, #239	@ 0xef
 801c6f6:	48a7      	ldr	r0, [pc, #668]	@ (801c994 <_dtoa_r+0x2cc>)
 801c6f8:	f7ff ff40 	bl	801c57c <__assert_func>
 801c6fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c700:	6007      	str	r7, [r0, #0]
 801c702:	60c7      	str	r7, [r0, #12]
 801c704:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c708:	6819      	ldr	r1, [r3, #0]
 801c70a:	b159      	cbz	r1, 801c724 <_dtoa_r+0x5c>
 801c70c:	685a      	ldr	r2, [r3, #4]
 801c70e:	604a      	str	r2, [r1, #4]
 801c710:	2301      	movs	r3, #1
 801c712:	4093      	lsls	r3, r2
 801c714:	608b      	str	r3, [r1, #8]
 801c716:	4658      	mov	r0, fp
 801c718:	f000 fe24 	bl	801d364 <_Bfree>
 801c71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c720:	2200      	movs	r2, #0
 801c722:	601a      	str	r2, [r3, #0]
 801c724:	1e2b      	subs	r3, r5, #0
 801c726:	bfb9      	ittee	lt
 801c728:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c72c:	9303      	strlt	r3, [sp, #12]
 801c72e:	2300      	movge	r3, #0
 801c730:	6033      	strge	r3, [r6, #0]
 801c732:	9f03      	ldr	r7, [sp, #12]
 801c734:	4b98      	ldr	r3, [pc, #608]	@ (801c998 <_dtoa_r+0x2d0>)
 801c736:	bfbc      	itt	lt
 801c738:	2201      	movlt	r2, #1
 801c73a:	6032      	strlt	r2, [r6, #0]
 801c73c:	43bb      	bics	r3, r7
 801c73e:	d112      	bne.n	801c766 <_dtoa_r+0x9e>
 801c740:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c742:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c746:	6013      	str	r3, [r2, #0]
 801c748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c74c:	4323      	orrs	r3, r4
 801c74e:	f000 854d 	beq.w	801d1ec <_dtoa_r+0xb24>
 801c752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c754:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801c9ac <_dtoa_r+0x2e4>
 801c758:	2b00      	cmp	r3, #0
 801c75a:	f000 854f 	beq.w	801d1fc <_dtoa_r+0xb34>
 801c75e:	f10a 0303 	add.w	r3, sl, #3
 801c762:	f000 bd49 	b.w	801d1f8 <_dtoa_r+0xb30>
 801c766:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c76a:	2200      	movs	r2, #0
 801c76c:	ec51 0b17 	vmov	r0, r1, d7
 801c770:	2300      	movs	r3, #0
 801c772:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801c776:	f7e4 f9bf 	bl	8000af8 <__aeabi_dcmpeq>
 801c77a:	4680      	mov	r8, r0
 801c77c:	b158      	cbz	r0, 801c796 <_dtoa_r+0xce>
 801c77e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c780:	2301      	movs	r3, #1
 801c782:	6013      	str	r3, [r2, #0]
 801c784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c786:	b113      	cbz	r3, 801c78e <_dtoa_r+0xc6>
 801c788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c78a:	4b84      	ldr	r3, [pc, #528]	@ (801c99c <_dtoa_r+0x2d4>)
 801c78c:	6013      	str	r3, [r2, #0]
 801c78e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801c9b0 <_dtoa_r+0x2e8>
 801c792:	f000 bd33 	b.w	801d1fc <_dtoa_r+0xb34>
 801c796:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801c79a:	aa16      	add	r2, sp, #88	@ 0x58
 801c79c:	a917      	add	r1, sp, #92	@ 0x5c
 801c79e:	4658      	mov	r0, fp
 801c7a0:	f001 f8ca 	bl	801d938 <__d2b>
 801c7a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801c7a8:	4681      	mov	r9, r0
 801c7aa:	2e00      	cmp	r6, #0
 801c7ac:	d077      	beq.n	801c89e <_dtoa_r+0x1d6>
 801c7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c7b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801c7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c7bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c7c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c7c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801c7c8:	4619      	mov	r1, r3
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	4b74      	ldr	r3, [pc, #464]	@ (801c9a0 <_dtoa_r+0x2d8>)
 801c7ce:	f7e3 fd73 	bl	80002b8 <__aeabi_dsub>
 801c7d2:	a369      	add	r3, pc, #420	@ (adr r3, 801c978 <_dtoa_r+0x2b0>)
 801c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d8:	f7e3 ff26 	bl	8000628 <__aeabi_dmul>
 801c7dc:	a368      	add	r3, pc, #416	@ (adr r3, 801c980 <_dtoa_r+0x2b8>)
 801c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7e2:	f7e3 fd6b 	bl	80002bc <__adddf3>
 801c7e6:	4604      	mov	r4, r0
 801c7e8:	4630      	mov	r0, r6
 801c7ea:	460d      	mov	r5, r1
 801c7ec:	f7e3 feb2 	bl	8000554 <__aeabi_i2d>
 801c7f0:	a365      	add	r3, pc, #404	@ (adr r3, 801c988 <_dtoa_r+0x2c0>)
 801c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7f6:	f7e3 ff17 	bl	8000628 <__aeabi_dmul>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	460b      	mov	r3, r1
 801c7fe:	4620      	mov	r0, r4
 801c800:	4629      	mov	r1, r5
 801c802:	f7e3 fd5b 	bl	80002bc <__adddf3>
 801c806:	4604      	mov	r4, r0
 801c808:	460d      	mov	r5, r1
 801c80a:	f7e4 f9bd 	bl	8000b88 <__aeabi_d2iz>
 801c80e:	2200      	movs	r2, #0
 801c810:	4607      	mov	r7, r0
 801c812:	2300      	movs	r3, #0
 801c814:	4620      	mov	r0, r4
 801c816:	4629      	mov	r1, r5
 801c818:	f7e4 f978 	bl	8000b0c <__aeabi_dcmplt>
 801c81c:	b140      	cbz	r0, 801c830 <_dtoa_r+0x168>
 801c81e:	4638      	mov	r0, r7
 801c820:	f7e3 fe98 	bl	8000554 <__aeabi_i2d>
 801c824:	4622      	mov	r2, r4
 801c826:	462b      	mov	r3, r5
 801c828:	f7e4 f966 	bl	8000af8 <__aeabi_dcmpeq>
 801c82c:	b900      	cbnz	r0, 801c830 <_dtoa_r+0x168>
 801c82e:	3f01      	subs	r7, #1
 801c830:	2f16      	cmp	r7, #22
 801c832:	d851      	bhi.n	801c8d8 <_dtoa_r+0x210>
 801c834:	4b5b      	ldr	r3, [pc, #364]	@ (801c9a4 <_dtoa_r+0x2dc>)
 801c836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c842:	f7e4 f963 	bl	8000b0c <__aeabi_dcmplt>
 801c846:	2800      	cmp	r0, #0
 801c848:	d048      	beq.n	801c8dc <_dtoa_r+0x214>
 801c84a:	3f01      	subs	r7, #1
 801c84c:	2300      	movs	r3, #0
 801c84e:	9312      	str	r3, [sp, #72]	@ 0x48
 801c850:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c852:	1b9b      	subs	r3, r3, r6
 801c854:	1e5a      	subs	r2, r3, #1
 801c856:	bf44      	itt	mi
 801c858:	f1c3 0801 	rsbmi	r8, r3, #1
 801c85c:	2300      	movmi	r3, #0
 801c85e:	9208      	str	r2, [sp, #32]
 801c860:	bf54      	ite	pl
 801c862:	f04f 0800 	movpl.w	r8, #0
 801c866:	9308      	strmi	r3, [sp, #32]
 801c868:	2f00      	cmp	r7, #0
 801c86a:	db39      	blt.n	801c8e0 <_dtoa_r+0x218>
 801c86c:	9b08      	ldr	r3, [sp, #32]
 801c86e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801c870:	443b      	add	r3, r7
 801c872:	9308      	str	r3, [sp, #32]
 801c874:	2300      	movs	r3, #0
 801c876:	930a      	str	r3, [sp, #40]	@ 0x28
 801c878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c87a:	2b09      	cmp	r3, #9
 801c87c:	d864      	bhi.n	801c948 <_dtoa_r+0x280>
 801c87e:	2b05      	cmp	r3, #5
 801c880:	bfc4      	itt	gt
 801c882:	3b04      	subgt	r3, #4
 801c884:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801c886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c888:	f1a3 0302 	sub.w	r3, r3, #2
 801c88c:	bfcc      	ite	gt
 801c88e:	2400      	movgt	r4, #0
 801c890:	2401      	movle	r4, #1
 801c892:	2b03      	cmp	r3, #3
 801c894:	d863      	bhi.n	801c95e <_dtoa_r+0x296>
 801c896:	e8df f003 	tbb	[pc, r3]
 801c89a:	372a      	.short	0x372a
 801c89c:	5535      	.short	0x5535
 801c89e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801c8a2:	441e      	add	r6, r3
 801c8a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801c8a8:	2b20      	cmp	r3, #32
 801c8aa:	bfc1      	itttt	gt
 801c8ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801c8b0:	409f      	lslgt	r7, r3
 801c8b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801c8b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801c8ba:	bfd6      	itet	le
 801c8bc:	f1c3 0320 	rsble	r3, r3, #32
 801c8c0:	ea47 0003 	orrgt.w	r0, r7, r3
 801c8c4:	fa04 f003 	lslle.w	r0, r4, r3
 801c8c8:	f7e3 fe34 	bl	8000534 <__aeabi_ui2d>
 801c8cc:	2201      	movs	r2, #1
 801c8ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801c8d2:	3e01      	subs	r6, #1
 801c8d4:	9214      	str	r2, [sp, #80]	@ 0x50
 801c8d6:	e777      	b.n	801c7c8 <_dtoa_r+0x100>
 801c8d8:	2301      	movs	r3, #1
 801c8da:	e7b8      	b.n	801c84e <_dtoa_r+0x186>
 801c8dc:	9012      	str	r0, [sp, #72]	@ 0x48
 801c8de:	e7b7      	b.n	801c850 <_dtoa_r+0x188>
 801c8e0:	427b      	negs	r3, r7
 801c8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	eba8 0807 	sub.w	r8, r8, r7
 801c8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c8ec:	e7c4      	b.n	801c878 <_dtoa_r+0x1b0>
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	dc35      	bgt.n	801c964 <_dtoa_r+0x29c>
 801c8f8:	2301      	movs	r3, #1
 801c8fa:	9300      	str	r3, [sp, #0]
 801c8fc:	9307      	str	r3, [sp, #28]
 801c8fe:	461a      	mov	r2, r3
 801c900:	920e      	str	r2, [sp, #56]	@ 0x38
 801c902:	e00b      	b.n	801c91c <_dtoa_r+0x254>
 801c904:	2301      	movs	r3, #1
 801c906:	e7f3      	b.n	801c8f0 <_dtoa_r+0x228>
 801c908:	2300      	movs	r3, #0
 801c90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c90e:	18fb      	adds	r3, r7, r3
 801c910:	9300      	str	r3, [sp, #0]
 801c912:	3301      	adds	r3, #1
 801c914:	2b01      	cmp	r3, #1
 801c916:	9307      	str	r3, [sp, #28]
 801c918:	bfb8      	it	lt
 801c91a:	2301      	movlt	r3, #1
 801c91c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801c920:	2100      	movs	r1, #0
 801c922:	2204      	movs	r2, #4
 801c924:	f102 0514 	add.w	r5, r2, #20
 801c928:	429d      	cmp	r5, r3
 801c92a:	d91f      	bls.n	801c96c <_dtoa_r+0x2a4>
 801c92c:	6041      	str	r1, [r0, #4]
 801c92e:	4658      	mov	r0, fp
 801c930:	f000 fcd8 	bl	801d2e4 <_Balloc>
 801c934:	4682      	mov	sl, r0
 801c936:	2800      	cmp	r0, #0
 801c938:	d13c      	bne.n	801c9b4 <_dtoa_r+0x2ec>
 801c93a:	4b1b      	ldr	r3, [pc, #108]	@ (801c9a8 <_dtoa_r+0x2e0>)
 801c93c:	4602      	mov	r2, r0
 801c93e:	f240 11af 	movw	r1, #431	@ 0x1af
 801c942:	e6d8      	b.n	801c6f6 <_dtoa_r+0x2e>
 801c944:	2301      	movs	r3, #1
 801c946:	e7e0      	b.n	801c90a <_dtoa_r+0x242>
 801c948:	2401      	movs	r4, #1
 801c94a:	2300      	movs	r3, #0
 801c94c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c94e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c950:	f04f 33ff 	mov.w	r3, #4294967295
 801c954:	9300      	str	r3, [sp, #0]
 801c956:	9307      	str	r3, [sp, #28]
 801c958:	2200      	movs	r2, #0
 801c95a:	2312      	movs	r3, #18
 801c95c:	e7d0      	b.n	801c900 <_dtoa_r+0x238>
 801c95e:	2301      	movs	r3, #1
 801c960:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c962:	e7f5      	b.n	801c950 <_dtoa_r+0x288>
 801c964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c966:	9300      	str	r3, [sp, #0]
 801c968:	9307      	str	r3, [sp, #28]
 801c96a:	e7d7      	b.n	801c91c <_dtoa_r+0x254>
 801c96c:	3101      	adds	r1, #1
 801c96e:	0052      	lsls	r2, r2, #1
 801c970:	e7d8      	b.n	801c924 <_dtoa_r+0x25c>
 801c972:	bf00      	nop
 801c974:	f3af 8000 	nop.w
 801c978:	636f4361 	.word	0x636f4361
 801c97c:	3fd287a7 	.word	0x3fd287a7
 801c980:	8b60c8b3 	.word	0x8b60c8b3
 801c984:	3fc68a28 	.word	0x3fc68a28
 801c988:	509f79fb 	.word	0x509f79fb
 801c98c:	3fd34413 	.word	0x3fd34413
 801c990:	0806da7c 	.word	0x0806da7c
 801c994:	0806dc69 	.word	0x0806dc69
 801c998:	7ff00000 	.word	0x7ff00000
 801c99c:	0806dbfd 	.word	0x0806dbfd
 801c9a0:	3ff80000 	.word	0x3ff80000
 801c9a4:	0806dd60 	.word	0x0806dd60
 801c9a8:	0806dcc1 	.word	0x0806dcc1
 801c9ac:	0806dc65 	.word	0x0806dc65
 801c9b0:	0806dbfc 	.word	0x0806dbfc
 801c9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c9b8:	6018      	str	r0, [r3, #0]
 801c9ba:	9b07      	ldr	r3, [sp, #28]
 801c9bc:	2b0e      	cmp	r3, #14
 801c9be:	f200 80a4 	bhi.w	801cb0a <_dtoa_r+0x442>
 801c9c2:	2c00      	cmp	r4, #0
 801c9c4:	f000 80a1 	beq.w	801cb0a <_dtoa_r+0x442>
 801c9c8:	2f00      	cmp	r7, #0
 801c9ca:	dd33      	ble.n	801ca34 <_dtoa_r+0x36c>
 801c9cc:	4bad      	ldr	r3, [pc, #692]	@ (801cc84 <_dtoa_r+0x5bc>)
 801c9ce:	f007 020f 	and.w	r2, r7, #15
 801c9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c9d6:	ed93 7b00 	vldr	d7, [r3]
 801c9da:	05f8      	lsls	r0, r7, #23
 801c9dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c9e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801c9e4:	d516      	bpl.n	801ca14 <_dtoa_r+0x34c>
 801c9e6:	4ba8      	ldr	r3, [pc, #672]	@ (801cc88 <_dtoa_r+0x5c0>)
 801c9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c9f0:	f7e3 ff44 	bl	800087c <__aeabi_ddiv>
 801c9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c9f8:	f004 040f 	and.w	r4, r4, #15
 801c9fc:	2603      	movs	r6, #3
 801c9fe:	4da2      	ldr	r5, [pc, #648]	@ (801cc88 <_dtoa_r+0x5c0>)
 801ca00:	b954      	cbnz	r4, 801ca18 <_dtoa_r+0x350>
 801ca02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ca06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ca0a:	f7e3 ff37 	bl	800087c <__aeabi_ddiv>
 801ca0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ca12:	e028      	b.n	801ca66 <_dtoa_r+0x39e>
 801ca14:	2602      	movs	r6, #2
 801ca16:	e7f2      	b.n	801c9fe <_dtoa_r+0x336>
 801ca18:	07e1      	lsls	r1, r4, #31
 801ca1a:	d508      	bpl.n	801ca2e <_dtoa_r+0x366>
 801ca1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ca20:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ca24:	f7e3 fe00 	bl	8000628 <__aeabi_dmul>
 801ca28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ca2c:	3601      	adds	r6, #1
 801ca2e:	1064      	asrs	r4, r4, #1
 801ca30:	3508      	adds	r5, #8
 801ca32:	e7e5      	b.n	801ca00 <_dtoa_r+0x338>
 801ca34:	f000 80d2 	beq.w	801cbdc <_dtoa_r+0x514>
 801ca38:	427c      	negs	r4, r7
 801ca3a:	4b92      	ldr	r3, [pc, #584]	@ (801cc84 <_dtoa_r+0x5bc>)
 801ca3c:	4d92      	ldr	r5, [pc, #584]	@ (801cc88 <_dtoa_r+0x5c0>)
 801ca3e:	f004 020f 	and.w	r2, r4, #15
 801ca42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca4e:	f7e3 fdeb 	bl	8000628 <__aeabi_dmul>
 801ca52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ca56:	1124      	asrs	r4, r4, #4
 801ca58:	2300      	movs	r3, #0
 801ca5a:	2602      	movs	r6, #2
 801ca5c:	2c00      	cmp	r4, #0
 801ca5e:	f040 80b2 	bne.w	801cbc6 <_dtoa_r+0x4fe>
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d1d3      	bne.n	801ca0e <_dtoa_r+0x346>
 801ca66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ca68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	f000 80b7 	beq.w	801cbe0 <_dtoa_r+0x518>
 801ca72:	4b86      	ldr	r3, [pc, #536]	@ (801cc8c <_dtoa_r+0x5c4>)
 801ca74:	2200      	movs	r2, #0
 801ca76:	4620      	mov	r0, r4
 801ca78:	4629      	mov	r1, r5
 801ca7a:	f7e4 f847 	bl	8000b0c <__aeabi_dcmplt>
 801ca7e:	2800      	cmp	r0, #0
 801ca80:	f000 80ae 	beq.w	801cbe0 <_dtoa_r+0x518>
 801ca84:	9b07      	ldr	r3, [sp, #28]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	f000 80aa 	beq.w	801cbe0 <_dtoa_r+0x518>
 801ca8c:	9b00      	ldr	r3, [sp, #0]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	dd37      	ble.n	801cb02 <_dtoa_r+0x43a>
 801ca92:	1e7b      	subs	r3, r7, #1
 801ca94:	9304      	str	r3, [sp, #16]
 801ca96:	4620      	mov	r0, r4
 801ca98:	4b7d      	ldr	r3, [pc, #500]	@ (801cc90 <_dtoa_r+0x5c8>)
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	4629      	mov	r1, r5
 801ca9e:	f7e3 fdc3 	bl	8000628 <__aeabi_dmul>
 801caa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801caa6:	9c00      	ldr	r4, [sp, #0]
 801caa8:	3601      	adds	r6, #1
 801caaa:	4630      	mov	r0, r6
 801caac:	f7e3 fd52 	bl	8000554 <__aeabi_i2d>
 801cab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cab4:	f7e3 fdb8 	bl	8000628 <__aeabi_dmul>
 801cab8:	4b76      	ldr	r3, [pc, #472]	@ (801cc94 <_dtoa_r+0x5cc>)
 801caba:	2200      	movs	r2, #0
 801cabc:	f7e3 fbfe 	bl	80002bc <__adddf3>
 801cac0:	4605      	mov	r5, r0
 801cac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801cac6:	2c00      	cmp	r4, #0
 801cac8:	f040 808d 	bne.w	801cbe6 <_dtoa_r+0x51e>
 801cacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cad0:	4b71      	ldr	r3, [pc, #452]	@ (801cc98 <_dtoa_r+0x5d0>)
 801cad2:	2200      	movs	r2, #0
 801cad4:	f7e3 fbf0 	bl	80002b8 <__aeabi_dsub>
 801cad8:	4602      	mov	r2, r0
 801cada:	460b      	mov	r3, r1
 801cadc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cae0:	462a      	mov	r2, r5
 801cae2:	4633      	mov	r3, r6
 801cae4:	f7e4 f830 	bl	8000b48 <__aeabi_dcmpgt>
 801cae8:	2800      	cmp	r0, #0
 801caea:	f040 828b 	bne.w	801d004 <_dtoa_r+0x93c>
 801caee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801caf2:	462a      	mov	r2, r5
 801caf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801caf8:	f7e4 f808 	bl	8000b0c <__aeabi_dcmplt>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	f040 8128 	bne.w	801cd52 <_dtoa_r+0x68a>
 801cb02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801cb06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801cb0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	f2c0 815a 	blt.w	801cdc6 <_dtoa_r+0x6fe>
 801cb12:	2f0e      	cmp	r7, #14
 801cb14:	f300 8157 	bgt.w	801cdc6 <_dtoa_r+0x6fe>
 801cb18:	4b5a      	ldr	r3, [pc, #360]	@ (801cc84 <_dtoa_r+0x5bc>)
 801cb1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cb1e:	ed93 7b00 	vldr	d7, [r3]
 801cb22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	ed8d 7b00 	vstr	d7, [sp]
 801cb2a:	da03      	bge.n	801cb34 <_dtoa_r+0x46c>
 801cb2c:	9b07      	ldr	r3, [sp, #28]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	f340 8101 	ble.w	801cd36 <_dtoa_r+0x66e>
 801cb34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801cb38:	4656      	mov	r6, sl
 801cb3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cb3e:	4620      	mov	r0, r4
 801cb40:	4629      	mov	r1, r5
 801cb42:	f7e3 fe9b 	bl	800087c <__aeabi_ddiv>
 801cb46:	f7e4 f81f 	bl	8000b88 <__aeabi_d2iz>
 801cb4a:	4680      	mov	r8, r0
 801cb4c:	f7e3 fd02 	bl	8000554 <__aeabi_i2d>
 801cb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cb54:	f7e3 fd68 	bl	8000628 <__aeabi_dmul>
 801cb58:	4602      	mov	r2, r0
 801cb5a:	460b      	mov	r3, r1
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	4629      	mov	r1, r5
 801cb60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801cb64:	f7e3 fba8 	bl	80002b8 <__aeabi_dsub>
 801cb68:	f806 4b01 	strb.w	r4, [r6], #1
 801cb6c:	9d07      	ldr	r5, [sp, #28]
 801cb6e:	eba6 040a 	sub.w	r4, r6, sl
 801cb72:	42a5      	cmp	r5, r4
 801cb74:	4602      	mov	r2, r0
 801cb76:	460b      	mov	r3, r1
 801cb78:	f040 8117 	bne.w	801cdaa <_dtoa_r+0x6e2>
 801cb7c:	f7e3 fb9e 	bl	80002bc <__adddf3>
 801cb80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cb84:	4604      	mov	r4, r0
 801cb86:	460d      	mov	r5, r1
 801cb88:	f7e3 ffde 	bl	8000b48 <__aeabi_dcmpgt>
 801cb8c:	2800      	cmp	r0, #0
 801cb8e:	f040 80f9 	bne.w	801cd84 <_dtoa_r+0x6bc>
 801cb92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cb96:	4620      	mov	r0, r4
 801cb98:	4629      	mov	r1, r5
 801cb9a:	f7e3 ffad 	bl	8000af8 <__aeabi_dcmpeq>
 801cb9e:	b118      	cbz	r0, 801cba8 <_dtoa_r+0x4e0>
 801cba0:	f018 0f01 	tst.w	r8, #1
 801cba4:	f040 80ee 	bne.w	801cd84 <_dtoa_r+0x6bc>
 801cba8:	4649      	mov	r1, r9
 801cbaa:	4658      	mov	r0, fp
 801cbac:	f000 fbda 	bl	801d364 <_Bfree>
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	7033      	strb	r3, [r6, #0]
 801cbb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cbb6:	3701      	adds	r7, #1
 801cbb8:	601f      	str	r7, [r3, #0]
 801cbba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	f000 831d 	beq.w	801d1fc <_dtoa_r+0xb34>
 801cbc2:	601e      	str	r6, [r3, #0]
 801cbc4:	e31a      	b.n	801d1fc <_dtoa_r+0xb34>
 801cbc6:	07e2      	lsls	r2, r4, #31
 801cbc8:	d505      	bpl.n	801cbd6 <_dtoa_r+0x50e>
 801cbca:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cbce:	f7e3 fd2b 	bl	8000628 <__aeabi_dmul>
 801cbd2:	3601      	adds	r6, #1
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	1064      	asrs	r4, r4, #1
 801cbd8:	3508      	adds	r5, #8
 801cbda:	e73f      	b.n	801ca5c <_dtoa_r+0x394>
 801cbdc:	2602      	movs	r6, #2
 801cbde:	e742      	b.n	801ca66 <_dtoa_r+0x39e>
 801cbe0:	9c07      	ldr	r4, [sp, #28]
 801cbe2:	9704      	str	r7, [sp, #16]
 801cbe4:	e761      	b.n	801caaa <_dtoa_r+0x3e2>
 801cbe6:	4b27      	ldr	r3, [pc, #156]	@ (801cc84 <_dtoa_r+0x5bc>)
 801cbe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cbea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cbee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cbf2:	4454      	add	r4, sl
 801cbf4:	2900      	cmp	r1, #0
 801cbf6:	d053      	beq.n	801cca0 <_dtoa_r+0x5d8>
 801cbf8:	4928      	ldr	r1, [pc, #160]	@ (801cc9c <_dtoa_r+0x5d4>)
 801cbfa:	2000      	movs	r0, #0
 801cbfc:	f7e3 fe3e 	bl	800087c <__aeabi_ddiv>
 801cc00:	4633      	mov	r3, r6
 801cc02:	462a      	mov	r2, r5
 801cc04:	f7e3 fb58 	bl	80002b8 <__aeabi_dsub>
 801cc08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cc0c:	4656      	mov	r6, sl
 801cc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc12:	f7e3 ffb9 	bl	8000b88 <__aeabi_d2iz>
 801cc16:	4605      	mov	r5, r0
 801cc18:	f7e3 fc9c 	bl	8000554 <__aeabi_i2d>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	460b      	mov	r3, r1
 801cc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc24:	f7e3 fb48 	bl	80002b8 <__aeabi_dsub>
 801cc28:	3530      	adds	r5, #48	@ 0x30
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	460b      	mov	r3, r1
 801cc2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cc32:	f806 5b01 	strb.w	r5, [r6], #1
 801cc36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cc3a:	f7e3 ff67 	bl	8000b0c <__aeabi_dcmplt>
 801cc3e:	2800      	cmp	r0, #0
 801cc40:	d171      	bne.n	801cd26 <_dtoa_r+0x65e>
 801cc42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cc46:	4911      	ldr	r1, [pc, #68]	@ (801cc8c <_dtoa_r+0x5c4>)
 801cc48:	2000      	movs	r0, #0
 801cc4a:	f7e3 fb35 	bl	80002b8 <__aeabi_dsub>
 801cc4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cc52:	f7e3 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 801cc56:	2800      	cmp	r0, #0
 801cc58:	f040 8095 	bne.w	801cd86 <_dtoa_r+0x6be>
 801cc5c:	42a6      	cmp	r6, r4
 801cc5e:	f43f af50 	beq.w	801cb02 <_dtoa_r+0x43a>
 801cc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cc66:	4b0a      	ldr	r3, [pc, #40]	@ (801cc90 <_dtoa_r+0x5c8>)
 801cc68:	2200      	movs	r2, #0
 801cc6a:	f7e3 fcdd 	bl	8000628 <__aeabi_dmul>
 801cc6e:	4b08      	ldr	r3, [pc, #32]	@ (801cc90 <_dtoa_r+0x5c8>)
 801cc70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cc74:	2200      	movs	r2, #0
 801cc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc7a:	f7e3 fcd5 	bl	8000628 <__aeabi_dmul>
 801cc7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc82:	e7c4      	b.n	801cc0e <_dtoa_r+0x546>
 801cc84:	0806dd60 	.word	0x0806dd60
 801cc88:	0806dd38 	.word	0x0806dd38
 801cc8c:	3ff00000 	.word	0x3ff00000
 801cc90:	40240000 	.word	0x40240000
 801cc94:	401c0000 	.word	0x401c0000
 801cc98:	40140000 	.word	0x40140000
 801cc9c:	3fe00000 	.word	0x3fe00000
 801cca0:	4631      	mov	r1, r6
 801cca2:	4628      	mov	r0, r5
 801cca4:	f7e3 fcc0 	bl	8000628 <__aeabi_dmul>
 801cca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ccac:	9415      	str	r4, [sp, #84]	@ 0x54
 801ccae:	4656      	mov	r6, sl
 801ccb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ccb4:	f7e3 ff68 	bl	8000b88 <__aeabi_d2iz>
 801ccb8:	4605      	mov	r5, r0
 801ccba:	f7e3 fc4b 	bl	8000554 <__aeabi_i2d>
 801ccbe:	4602      	mov	r2, r0
 801ccc0:	460b      	mov	r3, r1
 801ccc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ccc6:	f7e3 faf7 	bl	80002b8 <__aeabi_dsub>
 801ccca:	3530      	adds	r5, #48	@ 0x30
 801cccc:	f806 5b01 	strb.w	r5, [r6], #1
 801ccd0:	4602      	mov	r2, r0
 801ccd2:	460b      	mov	r3, r1
 801ccd4:	42a6      	cmp	r6, r4
 801ccd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ccda:	f04f 0200 	mov.w	r2, #0
 801ccde:	d124      	bne.n	801cd2a <_dtoa_r+0x662>
 801cce0:	4bac      	ldr	r3, [pc, #688]	@ (801cf94 <_dtoa_r+0x8cc>)
 801cce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cce6:	f7e3 fae9 	bl	80002bc <__adddf3>
 801ccea:	4602      	mov	r2, r0
 801ccec:	460b      	mov	r3, r1
 801ccee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ccf2:	f7e3 ff29 	bl	8000b48 <__aeabi_dcmpgt>
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	d145      	bne.n	801cd86 <_dtoa_r+0x6be>
 801ccfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ccfe:	49a5      	ldr	r1, [pc, #660]	@ (801cf94 <_dtoa_r+0x8cc>)
 801cd00:	2000      	movs	r0, #0
 801cd02:	f7e3 fad9 	bl	80002b8 <__aeabi_dsub>
 801cd06:	4602      	mov	r2, r0
 801cd08:	460b      	mov	r3, r1
 801cd0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cd0e:	f7e3 fefd 	bl	8000b0c <__aeabi_dcmplt>
 801cd12:	2800      	cmp	r0, #0
 801cd14:	f43f aef5 	beq.w	801cb02 <_dtoa_r+0x43a>
 801cd18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801cd1a:	1e73      	subs	r3, r6, #1
 801cd1c:	9315      	str	r3, [sp, #84]	@ 0x54
 801cd1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cd22:	2b30      	cmp	r3, #48	@ 0x30
 801cd24:	d0f8      	beq.n	801cd18 <_dtoa_r+0x650>
 801cd26:	9f04      	ldr	r7, [sp, #16]
 801cd28:	e73e      	b.n	801cba8 <_dtoa_r+0x4e0>
 801cd2a:	4b9b      	ldr	r3, [pc, #620]	@ (801cf98 <_dtoa_r+0x8d0>)
 801cd2c:	f7e3 fc7c 	bl	8000628 <__aeabi_dmul>
 801cd30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cd34:	e7bc      	b.n	801ccb0 <_dtoa_r+0x5e8>
 801cd36:	d10c      	bne.n	801cd52 <_dtoa_r+0x68a>
 801cd38:	4b98      	ldr	r3, [pc, #608]	@ (801cf9c <_dtoa_r+0x8d4>)
 801cd3a:	2200      	movs	r2, #0
 801cd3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cd40:	f7e3 fc72 	bl	8000628 <__aeabi_dmul>
 801cd44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cd48:	f7e3 fef4 	bl	8000b34 <__aeabi_dcmpge>
 801cd4c:	2800      	cmp	r0, #0
 801cd4e:	f000 8157 	beq.w	801d000 <_dtoa_r+0x938>
 801cd52:	2400      	movs	r4, #0
 801cd54:	4625      	mov	r5, r4
 801cd56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd58:	43db      	mvns	r3, r3
 801cd5a:	9304      	str	r3, [sp, #16]
 801cd5c:	4656      	mov	r6, sl
 801cd5e:	2700      	movs	r7, #0
 801cd60:	4621      	mov	r1, r4
 801cd62:	4658      	mov	r0, fp
 801cd64:	f000 fafe 	bl	801d364 <_Bfree>
 801cd68:	2d00      	cmp	r5, #0
 801cd6a:	d0dc      	beq.n	801cd26 <_dtoa_r+0x65e>
 801cd6c:	b12f      	cbz	r7, 801cd7a <_dtoa_r+0x6b2>
 801cd6e:	42af      	cmp	r7, r5
 801cd70:	d003      	beq.n	801cd7a <_dtoa_r+0x6b2>
 801cd72:	4639      	mov	r1, r7
 801cd74:	4658      	mov	r0, fp
 801cd76:	f000 faf5 	bl	801d364 <_Bfree>
 801cd7a:	4629      	mov	r1, r5
 801cd7c:	4658      	mov	r0, fp
 801cd7e:	f000 faf1 	bl	801d364 <_Bfree>
 801cd82:	e7d0      	b.n	801cd26 <_dtoa_r+0x65e>
 801cd84:	9704      	str	r7, [sp, #16]
 801cd86:	4633      	mov	r3, r6
 801cd88:	461e      	mov	r6, r3
 801cd8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cd8e:	2a39      	cmp	r2, #57	@ 0x39
 801cd90:	d107      	bne.n	801cda2 <_dtoa_r+0x6da>
 801cd92:	459a      	cmp	sl, r3
 801cd94:	d1f8      	bne.n	801cd88 <_dtoa_r+0x6c0>
 801cd96:	9a04      	ldr	r2, [sp, #16]
 801cd98:	3201      	adds	r2, #1
 801cd9a:	9204      	str	r2, [sp, #16]
 801cd9c:	2230      	movs	r2, #48	@ 0x30
 801cd9e:	f88a 2000 	strb.w	r2, [sl]
 801cda2:	781a      	ldrb	r2, [r3, #0]
 801cda4:	3201      	adds	r2, #1
 801cda6:	701a      	strb	r2, [r3, #0]
 801cda8:	e7bd      	b.n	801cd26 <_dtoa_r+0x65e>
 801cdaa:	4b7b      	ldr	r3, [pc, #492]	@ (801cf98 <_dtoa_r+0x8d0>)
 801cdac:	2200      	movs	r2, #0
 801cdae:	f7e3 fc3b 	bl	8000628 <__aeabi_dmul>
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	4604      	mov	r4, r0
 801cdb8:	460d      	mov	r5, r1
 801cdba:	f7e3 fe9d 	bl	8000af8 <__aeabi_dcmpeq>
 801cdbe:	2800      	cmp	r0, #0
 801cdc0:	f43f aebb 	beq.w	801cb3a <_dtoa_r+0x472>
 801cdc4:	e6f0      	b.n	801cba8 <_dtoa_r+0x4e0>
 801cdc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cdc8:	2a00      	cmp	r2, #0
 801cdca:	f000 80db 	beq.w	801cf84 <_dtoa_r+0x8bc>
 801cdce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cdd0:	2a01      	cmp	r2, #1
 801cdd2:	f300 80bf 	bgt.w	801cf54 <_dtoa_r+0x88c>
 801cdd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cdd8:	2a00      	cmp	r2, #0
 801cdda:	f000 80b7 	beq.w	801cf4c <_dtoa_r+0x884>
 801cdde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801cde2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801cde4:	4646      	mov	r6, r8
 801cde6:	9a08      	ldr	r2, [sp, #32]
 801cde8:	2101      	movs	r1, #1
 801cdea:	441a      	add	r2, r3
 801cdec:	4658      	mov	r0, fp
 801cdee:	4498      	add	r8, r3
 801cdf0:	9208      	str	r2, [sp, #32]
 801cdf2:	f000 fb6b 	bl	801d4cc <__i2b>
 801cdf6:	4605      	mov	r5, r0
 801cdf8:	b15e      	cbz	r6, 801ce12 <_dtoa_r+0x74a>
 801cdfa:	9b08      	ldr	r3, [sp, #32]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	dd08      	ble.n	801ce12 <_dtoa_r+0x74a>
 801ce00:	42b3      	cmp	r3, r6
 801ce02:	9a08      	ldr	r2, [sp, #32]
 801ce04:	bfa8      	it	ge
 801ce06:	4633      	movge	r3, r6
 801ce08:	eba8 0803 	sub.w	r8, r8, r3
 801ce0c:	1af6      	subs	r6, r6, r3
 801ce0e:	1ad3      	subs	r3, r2, r3
 801ce10:	9308      	str	r3, [sp, #32]
 801ce12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce14:	b1f3      	cbz	r3, 801ce54 <_dtoa_r+0x78c>
 801ce16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	f000 80b7 	beq.w	801cf8c <_dtoa_r+0x8c4>
 801ce1e:	b18c      	cbz	r4, 801ce44 <_dtoa_r+0x77c>
 801ce20:	4629      	mov	r1, r5
 801ce22:	4622      	mov	r2, r4
 801ce24:	4658      	mov	r0, fp
 801ce26:	f000 fc11 	bl	801d64c <__pow5mult>
 801ce2a:	464a      	mov	r2, r9
 801ce2c:	4601      	mov	r1, r0
 801ce2e:	4605      	mov	r5, r0
 801ce30:	4658      	mov	r0, fp
 801ce32:	f000 fb61 	bl	801d4f8 <__multiply>
 801ce36:	4649      	mov	r1, r9
 801ce38:	9004      	str	r0, [sp, #16]
 801ce3a:	4658      	mov	r0, fp
 801ce3c:	f000 fa92 	bl	801d364 <_Bfree>
 801ce40:	9b04      	ldr	r3, [sp, #16]
 801ce42:	4699      	mov	r9, r3
 801ce44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce46:	1b1a      	subs	r2, r3, r4
 801ce48:	d004      	beq.n	801ce54 <_dtoa_r+0x78c>
 801ce4a:	4649      	mov	r1, r9
 801ce4c:	4658      	mov	r0, fp
 801ce4e:	f000 fbfd 	bl	801d64c <__pow5mult>
 801ce52:	4681      	mov	r9, r0
 801ce54:	2101      	movs	r1, #1
 801ce56:	4658      	mov	r0, fp
 801ce58:	f000 fb38 	bl	801d4cc <__i2b>
 801ce5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce5e:	4604      	mov	r4, r0
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	f000 81cf 	beq.w	801d204 <_dtoa_r+0xb3c>
 801ce66:	461a      	mov	r2, r3
 801ce68:	4601      	mov	r1, r0
 801ce6a:	4658      	mov	r0, fp
 801ce6c:	f000 fbee 	bl	801d64c <__pow5mult>
 801ce70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce72:	2b01      	cmp	r3, #1
 801ce74:	4604      	mov	r4, r0
 801ce76:	f300 8095 	bgt.w	801cfa4 <_dtoa_r+0x8dc>
 801ce7a:	9b02      	ldr	r3, [sp, #8]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	f040 8087 	bne.w	801cf90 <_dtoa_r+0x8c8>
 801ce82:	9b03      	ldr	r3, [sp, #12]
 801ce84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	f040 8089 	bne.w	801cfa0 <_dtoa_r+0x8d8>
 801ce8e:	9b03      	ldr	r3, [sp, #12]
 801ce90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ce94:	0d1b      	lsrs	r3, r3, #20
 801ce96:	051b      	lsls	r3, r3, #20
 801ce98:	b12b      	cbz	r3, 801cea6 <_dtoa_r+0x7de>
 801ce9a:	9b08      	ldr	r3, [sp, #32]
 801ce9c:	3301      	adds	r3, #1
 801ce9e:	9308      	str	r3, [sp, #32]
 801cea0:	f108 0801 	add.w	r8, r8, #1
 801cea4:	2301      	movs	r3, #1
 801cea6:	930a      	str	r3, [sp, #40]	@ 0x28
 801cea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	f000 81b0 	beq.w	801d210 <_dtoa_r+0xb48>
 801ceb0:	6923      	ldr	r3, [r4, #16]
 801ceb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ceb6:	6918      	ldr	r0, [r3, #16]
 801ceb8:	f000 fabc 	bl	801d434 <__hi0bits>
 801cebc:	f1c0 0020 	rsb	r0, r0, #32
 801cec0:	9b08      	ldr	r3, [sp, #32]
 801cec2:	4418      	add	r0, r3
 801cec4:	f010 001f 	ands.w	r0, r0, #31
 801cec8:	d077      	beq.n	801cfba <_dtoa_r+0x8f2>
 801ceca:	f1c0 0320 	rsb	r3, r0, #32
 801cece:	2b04      	cmp	r3, #4
 801ced0:	dd6b      	ble.n	801cfaa <_dtoa_r+0x8e2>
 801ced2:	9b08      	ldr	r3, [sp, #32]
 801ced4:	f1c0 001c 	rsb	r0, r0, #28
 801ced8:	4403      	add	r3, r0
 801ceda:	4480      	add	r8, r0
 801cedc:	4406      	add	r6, r0
 801cede:	9308      	str	r3, [sp, #32]
 801cee0:	f1b8 0f00 	cmp.w	r8, #0
 801cee4:	dd05      	ble.n	801cef2 <_dtoa_r+0x82a>
 801cee6:	4649      	mov	r1, r9
 801cee8:	4642      	mov	r2, r8
 801ceea:	4658      	mov	r0, fp
 801ceec:	f000 fc08 	bl	801d700 <__lshift>
 801cef0:	4681      	mov	r9, r0
 801cef2:	9b08      	ldr	r3, [sp, #32]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	dd05      	ble.n	801cf04 <_dtoa_r+0x83c>
 801cef8:	4621      	mov	r1, r4
 801cefa:	461a      	mov	r2, r3
 801cefc:	4658      	mov	r0, fp
 801cefe:	f000 fbff 	bl	801d700 <__lshift>
 801cf02:	4604      	mov	r4, r0
 801cf04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d059      	beq.n	801cfbe <_dtoa_r+0x8f6>
 801cf0a:	4621      	mov	r1, r4
 801cf0c:	4648      	mov	r0, r9
 801cf0e:	f000 fc63 	bl	801d7d8 <__mcmp>
 801cf12:	2800      	cmp	r0, #0
 801cf14:	da53      	bge.n	801cfbe <_dtoa_r+0x8f6>
 801cf16:	1e7b      	subs	r3, r7, #1
 801cf18:	9304      	str	r3, [sp, #16]
 801cf1a:	4649      	mov	r1, r9
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	220a      	movs	r2, #10
 801cf20:	4658      	mov	r0, fp
 801cf22:	f000 fa41 	bl	801d3a8 <__multadd>
 801cf26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf28:	4681      	mov	r9, r0
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	f000 8172 	beq.w	801d214 <_dtoa_r+0xb4c>
 801cf30:	2300      	movs	r3, #0
 801cf32:	4629      	mov	r1, r5
 801cf34:	220a      	movs	r2, #10
 801cf36:	4658      	mov	r0, fp
 801cf38:	f000 fa36 	bl	801d3a8 <__multadd>
 801cf3c:	9b00      	ldr	r3, [sp, #0]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	4605      	mov	r5, r0
 801cf42:	dc67      	bgt.n	801d014 <_dtoa_r+0x94c>
 801cf44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf46:	2b02      	cmp	r3, #2
 801cf48:	dc41      	bgt.n	801cfce <_dtoa_r+0x906>
 801cf4a:	e063      	b.n	801d014 <_dtoa_r+0x94c>
 801cf4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801cf52:	e746      	b.n	801cde2 <_dtoa_r+0x71a>
 801cf54:	9b07      	ldr	r3, [sp, #28]
 801cf56:	1e5c      	subs	r4, r3, #1
 801cf58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf5a:	42a3      	cmp	r3, r4
 801cf5c:	bfbf      	itttt	lt
 801cf5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801cf60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801cf62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801cf64:	1ae3      	sublt	r3, r4, r3
 801cf66:	bfb4      	ite	lt
 801cf68:	18d2      	addlt	r2, r2, r3
 801cf6a:	1b1c      	subge	r4, r3, r4
 801cf6c:	9b07      	ldr	r3, [sp, #28]
 801cf6e:	bfbc      	itt	lt
 801cf70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801cf72:	2400      	movlt	r4, #0
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	bfb5      	itete	lt
 801cf78:	eba8 0603 	sublt.w	r6, r8, r3
 801cf7c:	9b07      	ldrge	r3, [sp, #28]
 801cf7e:	2300      	movlt	r3, #0
 801cf80:	4646      	movge	r6, r8
 801cf82:	e730      	b.n	801cde6 <_dtoa_r+0x71e>
 801cf84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801cf86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801cf88:	4646      	mov	r6, r8
 801cf8a:	e735      	b.n	801cdf8 <_dtoa_r+0x730>
 801cf8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cf8e:	e75c      	b.n	801ce4a <_dtoa_r+0x782>
 801cf90:	2300      	movs	r3, #0
 801cf92:	e788      	b.n	801cea6 <_dtoa_r+0x7de>
 801cf94:	3fe00000 	.word	0x3fe00000
 801cf98:	40240000 	.word	0x40240000
 801cf9c:	40140000 	.word	0x40140000
 801cfa0:	9b02      	ldr	r3, [sp, #8]
 801cfa2:	e780      	b.n	801cea6 <_dtoa_r+0x7de>
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 801cfa8:	e782      	b.n	801ceb0 <_dtoa_r+0x7e8>
 801cfaa:	d099      	beq.n	801cee0 <_dtoa_r+0x818>
 801cfac:	9a08      	ldr	r2, [sp, #32]
 801cfae:	331c      	adds	r3, #28
 801cfb0:	441a      	add	r2, r3
 801cfb2:	4498      	add	r8, r3
 801cfb4:	441e      	add	r6, r3
 801cfb6:	9208      	str	r2, [sp, #32]
 801cfb8:	e792      	b.n	801cee0 <_dtoa_r+0x818>
 801cfba:	4603      	mov	r3, r0
 801cfbc:	e7f6      	b.n	801cfac <_dtoa_r+0x8e4>
 801cfbe:	9b07      	ldr	r3, [sp, #28]
 801cfc0:	9704      	str	r7, [sp, #16]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	dc20      	bgt.n	801d008 <_dtoa_r+0x940>
 801cfc6:	9300      	str	r3, [sp, #0]
 801cfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfca:	2b02      	cmp	r3, #2
 801cfcc:	dd1e      	ble.n	801d00c <_dtoa_r+0x944>
 801cfce:	9b00      	ldr	r3, [sp, #0]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	f47f aec0 	bne.w	801cd56 <_dtoa_r+0x68e>
 801cfd6:	4621      	mov	r1, r4
 801cfd8:	2205      	movs	r2, #5
 801cfda:	4658      	mov	r0, fp
 801cfdc:	f000 f9e4 	bl	801d3a8 <__multadd>
 801cfe0:	4601      	mov	r1, r0
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	4648      	mov	r0, r9
 801cfe6:	f000 fbf7 	bl	801d7d8 <__mcmp>
 801cfea:	2800      	cmp	r0, #0
 801cfec:	f77f aeb3 	ble.w	801cd56 <_dtoa_r+0x68e>
 801cff0:	4656      	mov	r6, sl
 801cff2:	2331      	movs	r3, #49	@ 0x31
 801cff4:	f806 3b01 	strb.w	r3, [r6], #1
 801cff8:	9b04      	ldr	r3, [sp, #16]
 801cffa:	3301      	adds	r3, #1
 801cffc:	9304      	str	r3, [sp, #16]
 801cffe:	e6ae      	b.n	801cd5e <_dtoa_r+0x696>
 801d000:	9c07      	ldr	r4, [sp, #28]
 801d002:	9704      	str	r7, [sp, #16]
 801d004:	4625      	mov	r5, r4
 801d006:	e7f3      	b.n	801cff0 <_dtoa_r+0x928>
 801d008:	9b07      	ldr	r3, [sp, #28]
 801d00a:	9300      	str	r3, [sp, #0]
 801d00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d00e:	2b00      	cmp	r3, #0
 801d010:	f000 8104 	beq.w	801d21c <_dtoa_r+0xb54>
 801d014:	2e00      	cmp	r6, #0
 801d016:	dd05      	ble.n	801d024 <_dtoa_r+0x95c>
 801d018:	4629      	mov	r1, r5
 801d01a:	4632      	mov	r2, r6
 801d01c:	4658      	mov	r0, fp
 801d01e:	f000 fb6f 	bl	801d700 <__lshift>
 801d022:	4605      	mov	r5, r0
 801d024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d026:	2b00      	cmp	r3, #0
 801d028:	d05a      	beq.n	801d0e0 <_dtoa_r+0xa18>
 801d02a:	6869      	ldr	r1, [r5, #4]
 801d02c:	4658      	mov	r0, fp
 801d02e:	f000 f959 	bl	801d2e4 <_Balloc>
 801d032:	4606      	mov	r6, r0
 801d034:	b928      	cbnz	r0, 801d042 <_dtoa_r+0x97a>
 801d036:	4b84      	ldr	r3, [pc, #528]	@ (801d248 <_dtoa_r+0xb80>)
 801d038:	4602      	mov	r2, r0
 801d03a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d03e:	f7ff bb5a 	b.w	801c6f6 <_dtoa_r+0x2e>
 801d042:	692a      	ldr	r2, [r5, #16]
 801d044:	3202      	adds	r2, #2
 801d046:	0092      	lsls	r2, r2, #2
 801d048:	f105 010c 	add.w	r1, r5, #12
 801d04c:	300c      	adds	r0, #12
 801d04e:	f7ff fa86 	bl	801c55e <memcpy>
 801d052:	2201      	movs	r2, #1
 801d054:	4631      	mov	r1, r6
 801d056:	4658      	mov	r0, fp
 801d058:	f000 fb52 	bl	801d700 <__lshift>
 801d05c:	f10a 0301 	add.w	r3, sl, #1
 801d060:	9307      	str	r3, [sp, #28]
 801d062:	9b00      	ldr	r3, [sp, #0]
 801d064:	4453      	add	r3, sl
 801d066:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d068:	9b02      	ldr	r3, [sp, #8]
 801d06a:	f003 0301 	and.w	r3, r3, #1
 801d06e:	462f      	mov	r7, r5
 801d070:	930a      	str	r3, [sp, #40]	@ 0x28
 801d072:	4605      	mov	r5, r0
 801d074:	9b07      	ldr	r3, [sp, #28]
 801d076:	4621      	mov	r1, r4
 801d078:	3b01      	subs	r3, #1
 801d07a:	4648      	mov	r0, r9
 801d07c:	9300      	str	r3, [sp, #0]
 801d07e:	f7ff fa9b 	bl	801c5b8 <quorem>
 801d082:	4639      	mov	r1, r7
 801d084:	9002      	str	r0, [sp, #8]
 801d086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d08a:	4648      	mov	r0, r9
 801d08c:	f000 fba4 	bl	801d7d8 <__mcmp>
 801d090:	462a      	mov	r2, r5
 801d092:	9008      	str	r0, [sp, #32]
 801d094:	4621      	mov	r1, r4
 801d096:	4658      	mov	r0, fp
 801d098:	f000 fbba 	bl	801d810 <__mdiff>
 801d09c:	68c2      	ldr	r2, [r0, #12]
 801d09e:	4606      	mov	r6, r0
 801d0a0:	bb02      	cbnz	r2, 801d0e4 <_dtoa_r+0xa1c>
 801d0a2:	4601      	mov	r1, r0
 801d0a4:	4648      	mov	r0, r9
 801d0a6:	f000 fb97 	bl	801d7d8 <__mcmp>
 801d0aa:	4602      	mov	r2, r0
 801d0ac:	4631      	mov	r1, r6
 801d0ae:	4658      	mov	r0, fp
 801d0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d0b2:	f000 f957 	bl	801d364 <_Bfree>
 801d0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d0ba:	9e07      	ldr	r6, [sp, #28]
 801d0bc:	ea43 0102 	orr.w	r1, r3, r2
 801d0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0c2:	4319      	orrs	r1, r3
 801d0c4:	d110      	bne.n	801d0e8 <_dtoa_r+0xa20>
 801d0c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d0ca:	d029      	beq.n	801d120 <_dtoa_r+0xa58>
 801d0cc:	9b08      	ldr	r3, [sp, #32]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	dd02      	ble.n	801d0d8 <_dtoa_r+0xa10>
 801d0d2:	9b02      	ldr	r3, [sp, #8]
 801d0d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d0d8:	9b00      	ldr	r3, [sp, #0]
 801d0da:	f883 8000 	strb.w	r8, [r3]
 801d0de:	e63f      	b.n	801cd60 <_dtoa_r+0x698>
 801d0e0:	4628      	mov	r0, r5
 801d0e2:	e7bb      	b.n	801d05c <_dtoa_r+0x994>
 801d0e4:	2201      	movs	r2, #1
 801d0e6:	e7e1      	b.n	801d0ac <_dtoa_r+0x9e4>
 801d0e8:	9b08      	ldr	r3, [sp, #32]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	db04      	blt.n	801d0f8 <_dtoa_r+0xa30>
 801d0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d0f0:	430b      	orrs	r3, r1
 801d0f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d0f4:	430b      	orrs	r3, r1
 801d0f6:	d120      	bne.n	801d13a <_dtoa_r+0xa72>
 801d0f8:	2a00      	cmp	r2, #0
 801d0fa:	dded      	ble.n	801d0d8 <_dtoa_r+0xa10>
 801d0fc:	4649      	mov	r1, r9
 801d0fe:	2201      	movs	r2, #1
 801d100:	4658      	mov	r0, fp
 801d102:	f000 fafd 	bl	801d700 <__lshift>
 801d106:	4621      	mov	r1, r4
 801d108:	4681      	mov	r9, r0
 801d10a:	f000 fb65 	bl	801d7d8 <__mcmp>
 801d10e:	2800      	cmp	r0, #0
 801d110:	dc03      	bgt.n	801d11a <_dtoa_r+0xa52>
 801d112:	d1e1      	bne.n	801d0d8 <_dtoa_r+0xa10>
 801d114:	f018 0f01 	tst.w	r8, #1
 801d118:	d0de      	beq.n	801d0d8 <_dtoa_r+0xa10>
 801d11a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d11e:	d1d8      	bne.n	801d0d2 <_dtoa_r+0xa0a>
 801d120:	9a00      	ldr	r2, [sp, #0]
 801d122:	2339      	movs	r3, #57	@ 0x39
 801d124:	7013      	strb	r3, [r2, #0]
 801d126:	4633      	mov	r3, r6
 801d128:	461e      	mov	r6, r3
 801d12a:	3b01      	subs	r3, #1
 801d12c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d130:	2a39      	cmp	r2, #57	@ 0x39
 801d132:	d052      	beq.n	801d1da <_dtoa_r+0xb12>
 801d134:	3201      	adds	r2, #1
 801d136:	701a      	strb	r2, [r3, #0]
 801d138:	e612      	b.n	801cd60 <_dtoa_r+0x698>
 801d13a:	2a00      	cmp	r2, #0
 801d13c:	dd07      	ble.n	801d14e <_dtoa_r+0xa86>
 801d13e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d142:	d0ed      	beq.n	801d120 <_dtoa_r+0xa58>
 801d144:	9a00      	ldr	r2, [sp, #0]
 801d146:	f108 0301 	add.w	r3, r8, #1
 801d14a:	7013      	strb	r3, [r2, #0]
 801d14c:	e608      	b.n	801cd60 <_dtoa_r+0x698>
 801d14e:	9b07      	ldr	r3, [sp, #28]
 801d150:	9a07      	ldr	r2, [sp, #28]
 801d152:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d158:	4293      	cmp	r3, r2
 801d15a:	d028      	beq.n	801d1ae <_dtoa_r+0xae6>
 801d15c:	4649      	mov	r1, r9
 801d15e:	2300      	movs	r3, #0
 801d160:	220a      	movs	r2, #10
 801d162:	4658      	mov	r0, fp
 801d164:	f000 f920 	bl	801d3a8 <__multadd>
 801d168:	42af      	cmp	r7, r5
 801d16a:	4681      	mov	r9, r0
 801d16c:	f04f 0300 	mov.w	r3, #0
 801d170:	f04f 020a 	mov.w	r2, #10
 801d174:	4639      	mov	r1, r7
 801d176:	4658      	mov	r0, fp
 801d178:	d107      	bne.n	801d18a <_dtoa_r+0xac2>
 801d17a:	f000 f915 	bl	801d3a8 <__multadd>
 801d17e:	4607      	mov	r7, r0
 801d180:	4605      	mov	r5, r0
 801d182:	9b07      	ldr	r3, [sp, #28]
 801d184:	3301      	adds	r3, #1
 801d186:	9307      	str	r3, [sp, #28]
 801d188:	e774      	b.n	801d074 <_dtoa_r+0x9ac>
 801d18a:	f000 f90d 	bl	801d3a8 <__multadd>
 801d18e:	4629      	mov	r1, r5
 801d190:	4607      	mov	r7, r0
 801d192:	2300      	movs	r3, #0
 801d194:	220a      	movs	r2, #10
 801d196:	4658      	mov	r0, fp
 801d198:	f000 f906 	bl	801d3a8 <__multadd>
 801d19c:	4605      	mov	r5, r0
 801d19e:	e7f0      	b.n	801d182 <_dtoa_r+0xaba>
 801d1a0:	9b00      	ldr	r3, [sp, #0]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	bfcc      	ite	gt
 801d1a6:	461e      	movgt	r6, r3
 801d1a8:	2601      	movle	r6, #1
 801d1aa:	4456      	add	r6, sl
 801d1ac:	2700      	movs	r7, #0
 801d1ae:	4649      	mov	r1, r9
 801d1b0:	2201      	movs	r2, #1
 801d1b2:	4658      	mov	r0, fp
 801d1b4:	f000 faa4 	bl	801d700 <__lshift>
 801d1b8:	4621      	mov	r1, r4
 801d1ba:	4681      	mov	r9, r0
 801d1bc:	f000 fb0c 	bl	801d7d8 <__mcmp>
 801d1c0:	2800      	cmp	r0, #0
 801d1c2:	dcb0      	bgt.n	801d126 <_dtoa_r+0xa5e>
 801d1c4:	d102      	bne.n	801d1cc <_dtoa_r+0xb04>
 801d1c6:	f018 0f01 	tst.w	r8, #1
 801d1ca:	d1ac      	bne.n	801d126 <_dtoa_r+0xa5e>
 801d1cc:	4633      	mov	r3, r6
 801d1ce:	461e      	mov	r6, r3
 801d1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d1d4:	2a30      	cmp	r2, #48	@ 0x30
 801d1d6:	d0fa      	beq.n	801d1ce <_dtoa_r+0xb06>
 801d1d8:	e5c2      	b.n	801cd60 <_dtoa_r+0x698>
 801d1da:	459a      	cmp	sl, r3
 801d1dc:	d1a4      	bne.n	801d128 <_dtoa_r+0xa60>
 801d1de:	9b04      	ldr	r3, [sp, #16]
 801d1e0:	3301      	adds	r3, #1
 801d1e2:	9304      	str	r3, [sp, #16]
 801d1e4:	2331      	movs	r3, #49	@ 0x31
 801d1e6:	f88a 3000 	strb.w	r3, [sl]
 801d1ea:	e5b9      	b.n	801cd60 <_dtoa_r+0x698>
 801d1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d1ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801d24c <_dtoa_r+0xb84>
 801d1f2:	b11b      	cbz	r3, 801d1fc <_dtoa_r+0xb34>
 801d1f4:	f10a 0308 	add.w	r3, sl, #8
 801d1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d1fa:	6013      	str	r3, [r2, #0]
 801d1fc:	4650      	mov	r0, sl
 801d1fe:	b019      	add	sp, #100	@ 0x64
 801d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d206:	2b01      	cmp	r3, #1
 801d208:	f77f ae37 	ble.w	801ce7a <_dtoa_r+0x7b2>
 801d20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d20e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d210:	2001      	movs	r0, #1
 801d212:	e655      	b.n	801cec0 <_dtoa_r+0x7f8>
 801d214:	9b00      	ldr	r3, [sp, #0]
 801d216:	2b00      	cmp	r3, #0
 801d218:	f77f aed6 	ble.w	801cfc8 <_dtoa_r+0x900>
 801d21c:	4656      	mov	r6, sl
 801d21e:	4621      	mov	r1, r4
 801d220:	4648      	mov	r0, r9
 801d222:	f7ff f9c9 	bl	801c5b8 <quorem>
 801d226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d22a:	f806 8b01 	strb.w	r8, [r6], #1
 801d22e:	9b00      	ldr	r3, [sp, #0]
 801d230:	eba6 020a 	sub.w	r2, r6, sl
 801d234:	4293      	cmp	r3, r2
 801d236:	ddb3      	ble.n	801d1a0 <_dtoa_r+0xad8>
 801d238:	4649      	mov	r1, r9
 801d23a:	2300      	movs	r3, #0
 801d23c:	220a      	movs	r2, #10
 801d23e:	4658      	mov	r0, fp
 801d240:	f000 f8b2 	bl	801d3a8 <__multadd>
 801d244:	4681      	mov	r9, r0
 801d246:	e7ea      	b.n	801d21e <_dtoa_r+0xb56>
 801d248:	0806dcc1 	.word	0x0806dcc1
 801d24c:	0806dc5c 	.word	0x0806dc5c

0801d250 <_free_r>:
 801d250:	b538      	push	{r3, r4, r5, lr}
 801d252:	4605      	mov	r5, r0
 801d254:	2900      	cmp	r1, #0
 801d256:	d041      	beq.n	801d2dc <_free_r+0x8c>
 801d258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d25c:	1f0c      	subs	r4, r1, #4
 801d25e:	2b00      	cmp	r3, #0
 801d260:	bfb8      	it	lt
 801d262:	18e4      	addlt	r4, r4, r3
 801d264:	f7fe f980 	bl	801b568 <__malloc_lock>
 801d268:	4a1d      	ldr	r2, [pc, #116]	@ (801d2e0 <_free_r+0x90>)
 801d26a:	6813      	ldr	r3, [r2, #0]
 801d26c:	b933      	cbnz	r3, 801d27c <_free_r+0x2c>
 801d26e:	6063      	str	r3, [r4, #4]
 801d270:	6014      	str	r4, [r2, #0]
 801d272:	4628      	mov	r0, r5
 801d274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d278:	f7fe b97c 	b.w	801b574 <__malloc_unlock>
 801d27c:	42a3      	cmp	r3, r4
 801d27e:	d908      	bls.n	801d292 <_free_r+0x42>
 801d280:	6820      	ldr	r0, [r4, #0]
 801d282:	1821      	adds	r1, r4, r0
 801d284:	428b      	cmp	r3, r1
 801d286:	bf01      	itttt	eq
 801d288:	6819      	ldreq	r1, [r3, #0]
 801d28a:	685b      	ldreq	r3, [r3, #4]
 801d28c:	1809      	addeq	r1, r1, r0
 801d28e:	6021      	streq	r1, [r4, #0]
 801d290:	e7ed      	b.n	801d26e <_free_r+0x1e>
 801d292:	461a      	mov	r2, r3
 801d294:	685b      	ldr	r3, [r3, #4]
 801d296:	b10b      	cbz	r3, 801d29c <_free_r+0x4c>
 801d298:	42a3      	cmp	r3, r4
 801d29a:	d9fa      	bls.n	801d292 <_free_r+0x42>
 801d29c:	6811      	ldr	r1, [r2, #0]
 801d29e:	1850      	adds	r0, r2, r1
 801d2a0:	42a0      	cmp	r0, r4
 801d2a2:	d10b      	bne.n	801d2bc <_free_r+0x6c>
 801d2a4:	6820      	ldr	r0, [r4, #0]
 801d2a6:	4401      	add	r1, r0
 801d2a8:	1850      	adds	r0, r2, r1
 801d2aa:	4283      	cmp	r3, r0
 801d2ac:	6011      	str	r1, [r2, #0]
 801d2ae:	d1e0      	bne.n	801d272 <_free_r+0x22>
 801d2b0:	6818      	ldr	r0, [r3, #0]
 801d2b2:	685b      	ldr	r3, [r3, #4]
 801d2b4:	6053      	str	r3, [r2, #4]
 801d2b6:	4408      	add	r0, r1
 801d2b8:	6010      	str	r0, [r2, #0]
 801d2ba:	e7da      	b.n	801d272 <_free_r+0x22>
 801d2bc:	d902      	bls.n	801d2c4 <_free_r+0x74>
 801d2be:	230c      	movs	r3, #12
 801d2c0:	602b      	str	r3, [r5, #0]
 801d2c2:	e7d6      	b.n	801d272 <_free_r+0x22>
 801d2c4:	6820      	ldr	r0, [r4, #0]
 801d2c6:	1821      	adds	r1, r4, r0
 801d2c8:	428b      	cmp	r3, r1
 801d2ca:	bf04      	itt	eq
 801d2cc:	6819      	ldreq	r1, [r3, #0]
 801d2ce:	685b      	ldreq	r3, [r3, #4]
 801d2d0:	6063      	str	r3, [r4, #4]
 801d2d2:	bf04      	itt	eq
 801d2d4:	1809      	addeq	r1, r1, r0
 801d2d6:	6021      	streq	r1, [r4, #0]
 801d2d8:	6054      	str	r4, [r2, #4]
 801d2da:	e7ca      	b.n	801d272 <_free_r+0x22>
 801d2dc:	bd38      	pop	{r3, r4, r5, pc}
 801d2de:	bf00      	nop
 801d2e0:	20013eac 	.word	0x20013eac

0801d2e4 <_Balloc>:
 801d2e4:	b570      	push	{r4, r5, r6, lr}
 801d2e6:	69c6      	ldr	r6, [r0, #28]
 801d2e8:	4604      	mov	r4, r0
 801d2ea:	460d      	mov	r5, r1
 801d2ec:	b976      	cbnz	r6, 801d30c <_Balloc+0x28>
 801d2ee:	2010      	movs	r0, #16
 801d2f0:	f7fe f890 	bl	801b414 <malloc>
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	61e0      	str	r0, [r4, #28]
 801d2f8:	b920      	cbnz	r0, 801d304 <_Balloc+0x20>
 801d2fa:	4b18      	ldr	r3, [pc, #96]	@ (801d35c <_Balloc+0x78>)
 801d2fc:	4818      	ldr	r0, [pc, #96]	@ (801d360 <_Balloc+0x7c>)
 801d2fe:	216b      	movs	r1, #107	@ 0x6b
 801d300:	f7ff f93c 	bl	801c57c <__assert_func>
 801d304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d308:	6006      	str	r6, [r0, #0]
 801d30a:	60c6      	str	r6, [r0, #12]
 801d30c:	69e6      	ldr	r6, [r4, #28]
 801d30e:	68f3      	ldr	r3, [r6, #12]
 801d310:	b183      	cbz	r3, 801d334 <_Balloc+0x50>
 801d312:	69e3      	ldr	r3, [r4, #28]
 801d314:	68db      	ldr	r3, [r3, #12]
 801d316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d31a:	b9b8      	cbnz	r0, 801d34c <_Balloc+0x68>
 801d31c:	2101      	movs	r1, #1
 801d31e:	fa01 f605 	lsl.w	r6, r1, r5
 801d322:	1d72      	adds	r2, r6, #5
 801d324:	0092      	lsls	r2, r2, #2
 801d326:	4620      	mov	r0, r4
 801d328:	f7fe f860 	bl	801b3ec <_calloc_r>
 801d32c:	b160      	cbz	r0, 801d348 <_Balloc+0x64>
 801d32e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d332:	e00e      	b.n	801d352 <_Balloc+0x6e>
 801d334:	2221      	movs	r2, #33	@ 0x21
 801d336:	2104      	movs	r1, #4
 801d338:	4620      	mov	r0, r4
 801d33a:	f7fe f857 	bl	801b3ec <_calloc_r>
 801d33e:	69e3      	ldr	r3, [r4, #28]
 801d340:	60f0      	str	r0, [r6, #12]
 801d342:	68db      	ldr	r3, [r3, #12]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d1e4      	bne.n	801d312 <_Balloc+0x2e>
 801d348:	2000      	movs	r0, #0
 801d34a:	bd70      	pop	{r4, r5, r6, pc}
 801d34c:	6802      	ldr	r2, [r0, #0]
 801d34e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d352:	2300      	movs	r3, #0
 801d354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d358:	e7f7      	b.n	801d34a <_Balloc+0x66>
 801d35a:	bf00      	nop
 801d35c:	0806da7c 	.word	0x0806da7c
 801d360:	0806dcd2 	.word	0x0806dcd2

0801d364 <_Bfree>:
 801d364:	b570      	push	{r4, r5, r6, lr}
 801d366:	69c6      	ldr	r6, [r0, #28]
 801d368:	4605      	mov	r5, r0
 801d36a:	460c      	mov	r4, r1
 801d36c:	b976      	cbnz	r6, 801d38c <_Bfree+0x28>
 801d36e:	2010      	movs	r0, #16
 801d370:	f7fe f850 	bl	801b414 <malloc>
 801d374:	4602      	mov	r2, r0
 801d376:	61e8      	str	r0, [r5, #28]
 801d378:	b920      	cbnz	r0, 801d384 <_Bfree+0x20>
 801d37a:	4b09      	ldr	r3, [pc, #36]	@ (801d3a0 <_Bfree+0x3c>)
 801d37c:	4809      	ldr	r0, [pc, #36]	@ (801d3a4 <_Bfree+0x40>)
 801d37e:	218f      	movs	r1, #143	@ 0x8f
 801d380:	f7ff f8fc 	bl	801c57c <__assert_func>
 801d384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d388:	6006      	str	r6, [r0, #0]
 801d38a:	60c6      	str	r6, [r0, #12]
 801d38c:	b13c      	cbz	r4, 801d39e <_Bfree+0x3a>
 801d38e:	69eb      	ldr	r3, [r5, #28]
 801d390:	6862      	ldr	r2, [r4, #4]
 801d392:	68db      	ldr	r3, [r3, #12]
 801d394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d398:	6021      	str	r1, [r4, #0]
 801d39a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d39e:	bd70      	pop	{r4, r5, r6, pc}
 801d3a0:	0806da7c 	.word	0x0806da7c
 801d3a4:	0806dcd2 	.word	0x0806dcd2

0801d3a8 <__multadd>:
 801d3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ac:	690d      	ldr	r5, [r1, #16]
 801d3ae:	4607      	mov	r7, r0
 801d3b0:	460c      	mov	r4, r1
 801d3b2:	461e      	mov	r6, r3
 801d3b4:	f101 0c14 	add.w	ip, r1, #20
 801d3b8:	2000      	movs	r0, #0
 801d3ba:	f8dc 3000 	ldr.w	r3, [ip]
 801d3be:	b299      	uxth	r1, r3
 801d3c0:	fb02 6101 	mla	r1, r2, r1, r6
 801d3c4:	0c1e      	lsrs	r6, r3, #16
 801d3c6:	0c0b      	lsrs	r3, r1, #16
 801d3c8:	fb02 3306 	mla	r3, r2, r6, r3
 801d3cc:	b289      	uxth	r1, r1
 801d3ce:	3001      	adds	r0, #1
 801d3d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d3d4:	4285      	cmp	r5, r0
 801d3d6:	f84c 1b04 	str.w	r1, [ip], #4
 801d3da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d3de:	dcec      	bgt.n	801d3ba <__multadd+0x12>
 801d3e0:	b30e      	cbz	r6, 801d426 <__multadd+0x7e>
 801d3e2:	68a3      	ldr	r3, [r4, #8]
 801d3e4:	42ab      	cmp	r3, r5
 801d3e6:	dc19      	bgt.n	801d41c <__multadd+0x74>
 801d3e8:	6861      	ldr	r1, [r4, #4]
 801d3ea:	4638      	mov	r0, r7
 801d3ec:	3101      	adds	r1, #1
 801d3ee:	f7ff ff79 	bl	801d2e4 <_Balloc>
 801d3f2:	4680      	mov	r8, r0
 801d3f4:	b928      	cbnz	r0, 801d402 <__multadd+0x5a>
 801d3f6:	4602      	mov	r2, r0
 801d3f8:	4b0c      	ldr	r3, [pc, #48]	@ (801d42c <__multadd+0x84>)
 801d3fa:	480d      	ldr	r0, [pc, #52]	@ (801d430 <__multadd+0x88>)
 801d3fc:	21ba      	movs	r1, #186	@ 0xba
 801d3fe:	f7ff f8bd 	bl	801c57c <__assert_func>
 801d402:	6922      	ldr	r2, [r4, #16]
 801d404:	3202      	adds	r2, #2
 801d406:	f104 010c 	add.w	r1, r4, #12
 801d40a:	0092      	lsls	r2, r2, #2
 801d40c:	300c      	adds	r0, #12
 801d40e:	f7ff f8a6 	bl	801c55e <memcpy>
 801d412:	4621      	mov	r1, r4
 801d414:	4638      	mov	r0, r7
 801d416:	f7ff ffa5 	bl	801d364 <_Bfree>
 801d41a:	4644      	mov	r4, r8
 801d41c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d420:	3501      	adds	r5, #1
 801d422:	615e      	str	r6, [r3, #20]
 801d424:	6125      	str	r5, [r4, #16]
 801d426:	4620      	mov	r0, r4
 801d428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d42c:	0806dcc1 	.word	0x0806dcc1
 801d430:	0806dcd2 	.word	0x0806dcd2

0801d434 <__hi0bits>:
 801d434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d438:	4603      	mov	r3, r0
 801d43a:	bf36      	itet	cc
 801d43c:	0403      	lslcc	r3, r0, #16
 801d43e:	2000      	movcs	r0, #0
 801d440:	2010      	movcc	r0, #16
 801d442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d446:	bf3c      	itt	cc
 801d448:	021b      	lslcc	r3, r3, #8
 801d44a:	3008      	addcc	r0, #8
 801d44c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d450:	bf3c      	itt	cc
 801d452:	011b      	lslcc	r3, r3, #4
 801d454:	3004      	addcc	r0, #4
 801d456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d45a:	bf3c      	itt	cc
 801d45c:	009b      	lslcc	r3, r3, #2
 801d45e:	3002      	addcc	r0, #2
 801d460:	2b00      	cmp	r3, #0
 801d462:	db05      	blt.n	801d470 <__hi0bits+0x3c>
 801d464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d468:	f100 0001 	add.w	r0, r0, #1
 801d46c:	bf08      	it	eq
 801d46e:	2020      	moveq	r0, #32
 801d470:	4770      	bx	lr

0801d472 <__lo0bits>:
 801d472:	6803      	ldr	r3, [r0, #0]
 801d474:	4602      	mov	r2, r0
 801d476:	f013 0007 	ands.w	r0, r3, #7
 801d47a:	d00b      	beq.n	801d494 <__lo0bits+0x22>
 801d47c:	07d9      	lsls	r1, r3, #31
 801d47e:	d421      	bmi.n	801d4c4 <__lo0bits+0x52>
 801d480:	0798      	lsls	r0, r3, #30
 801d482:	bf49      	itett	mi
 801d484:	085b      	lsrmi	r3, r3, #1
 801d486:	089b      	lsrpl	r3, r3, #2
 801d488:	2001      	movmi	r0, #1
 801d48a:	6013      	strmi	r3, [r2, #0]
 801d48c:	bf5c      	itt	pl
 801d48e:	6013      	strpl	r3, [r2, #0]
 801d490:	2002      	movpl	r0, #2
 801d492:	4770      	bx	lr
 801d494:	b299      	uxth	r1, r3
 801d496:	b909      	cbnz	r1, 801d49c <__lo0bits+0x2a>
 801d498:	0c1b      	lsrs	r3, r3, #16
 801d49a:	2010      	movs	r0, #16
 801d49c:	b2d9      	uxtb	r1, r3
 801d49e:	b909      	cbnz	r1, 801d4a4 <__lo0bits+0x32>
 801d4a0:	3008      	adds	r0, #8
 801d4a2:	0a1b      	lsrs	r3, r3, #8
 801d4a4:	0719      	lsls	r1, r3, #28
 801d4a6:	bf04      	itt	eq
 801d4a8:	091b      	lsreq	r3, r3, #4
 801d4aa:	3004      	addeq	r0, #4
 801d4ac:	0799      	lsls	r1, r3, #30
 801d4ae:	bf04      	itt	eq
 801d4b0:	089b      	lsreq	r3, r3, #2
 801d4b2:	3002      	addeq	r0, #2
 801d4b4:	07d9      	lsls	r1, r3, #31
 801d4b6:	d403      	bmi.n	801d4c0 <__lo0bits+0x4e>
 801d4b8:	085b      	lsrs	r3, r3, #1
 801d4ba:	f100 0001 	add.w	r0, r0, #1
 801d4be:	d003      	beq.n	801d4c8 <__lo0bits+0x56>
 801d4c0:	6013      	str	r3, [r2, #0]
 801d4c2:	4770      	bx	lr
 801d4c4:	2000      	movs	r0, #0
 801d4c6:	4770      	bx	lr
 801d4c8:	2020      	movs	r0, #32
 801d4ca:	4770      	bx	lr

0801d4cc <__i2b>:
 801d4cc:	b510      	push	{r4, lr}
 801d4ce:	460c      	mov	r4, r1
 801d4d0:	2101      	movs	r1, #1
 801d4d2:	f7ff ff07 	bl	801d2e4 <_Balloc>
 801d4d6:	4602      	mov	r2, r0
 801d4d8:	b928      	cbnz	r0, 801d4e6 <__i2b+0x1a>
 801d4da:	4b05      	ldr	r3, [pc, #20]	@ (801d4f0 <__i2b+0x24>)
 801d4dc:	4805      	ldr	r0, [pc, #20]	@ (801d4f4 <__i2b+0x28>)
 801d4de:	f240 1145 	movw	r1, #325	@ 0x145
 801d4e2:	f7ff f84b 	bl	801c57c <__assert_func>
 801d4e6:	2301      	movs	r3, #1
 801d4e8:	6144      	str	r4, [r0, #20]
 801d4ea:	6103      	str	r3, [r0, #16]
 801d4ec:	bd10      	pop	{r4, pc}
 801d4ee:	bf00      	nop
 801d4f0:	0806dcc1 	.word	0x0806dcc1
 801d4f4:	0806dcd2 	.word	0x0806dcd2

0801d4f8 <__multiply>:
 801d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4fc:	4614      	mov	r4, r2
 801d4fe:	690a      	ldr	r2, [r1, #16]
 801d500:	6923      	ldr	r3, [r4, #16]
 801d502:	429a      	cmp	r2, r3
 801d504:	bfa8      	it	ge
 801d506:	4623      	movge	r3, r4
 801d508:	460f      	mov	r7, r1
 801d50a:	bfa4      	itt	ge
 801d50c:	460c      	movge	r4, r1
 801d50e:	461f      	movge	r7, r3
 801d510:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d514:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d518:	68a3      	ldr	r3, [r4, #8]
 801d51a:	6861      	ldr	r1, [r4, #4]
 801d51c:	eb0a 0609 	add.w	r6, sl, r9
 801d520:	42b3      	cmp	r3, r6
 801d522:	b085      	sub	sp, #20
 801d524:	bfb8      	it	lt
 801d526:	3101      	addlt	r1, #1
 801d528:	f7ff fedc 	bl	801d2e4 <_Balloc>
 801d52c:	b930      	cbnz	r0, 801d53c <__multiply+0x44>
 801d52e:	4602      	mov	r2, r0
 801d530:	4b44      	ldr	r3, [pc, #272]	@ (801d644 <__multiply+0x14c>)
 801d532:	4845      	ldr	r0, [pc, #276]	@ (801d648 <__multiply+0x150>)
 801d534:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d538:	f7ff f820 	bl	801c57c <__assert_func>
 801d53c:	f100 0514 	add.w	r5, r0, #20
 801d540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d544:	462b      	mov	r3, r5
 801d546:	2200      	movs	r2, #0
 801d548:	4543      	cmp	r3, r8
 801d54a:	d321      	bcc.n	801d590 <__multiply+0x98>
 801d54c:	f107 0114 	add.w	r1, r7, #20
 801d550:	f104 0214 	add.w	r2, r4, #20
 801d554:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801d558:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801d55c:	9302      	str	r3, [sp, #8]
 801d55e:	1b13      	subs	r3, r2, r4
 801d560:	3b15      	subs	r3, #21
 801d562:	f023 0303 	bic.w	r3, r3, #3
 801d566:	3304      	adds	r3, #4
 801d568:	f104 0715 	add.w	r7, r4, #21
 801d56c:	42ba      	cmp	r2, r7
 801d56e:	bf38      	it	cc
 801d570:	2304      	movcc	r3, #4
 801d572:	9301      	str	r3, [sp, #4]
 801d574:	9b02      	ldr	r3, [sp, #8]
 801d576:	9103      	str	r1, [sp, #12]
 801d578:	428b      	cmp	r3, r1
 801d57a:	d80c      	bhi.n	801d596 <__multiply+0x9e>
 801d57c:	2e00      	cmp	r6, #0
 801d57e:	dd03      	ble.n	801d588 <__multiply+0x90>
 801d580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d584:	2b00      	cmp	r3, #0
 801d586:	d05b      	beq.n	801d640 <__multiply+0x148>
 801d588:	6106      	str	r6, [r0, #16]
 801d58a:	b005      	add	sp, #20
 801d58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d590:	f843 2b04 	str.w	r2, [r3], #4
 801d594:	e7d8      	b.n	801d548 <__multiply+0x50>
 801d596:	f8b1 a000 	ldrh.w	sl, [r1]
 801d59a:	f1ba 0f00 	cmp.w	sl, #0
 801d59e:	d024      	beq.n	801d5ea <__multiply+0xf2>
 801d5a0:	f104 0e14 	add.w	lr, r4, #20
 801d5a4:	46a9      	mov	r9, r5
 801d5a6:	f04f 0c00 	mov.w	ip, #0
 801d5aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d5ae:	f8d9 3000 	ldr.w	r3, [r9]
 801d5b2:	fa1f fb87 	uxth.w	fp, r7
 801d5b6:	b29b      	uxth	r3, r3
 801d5b8:	fb0a 330b 	mla	r3, sl, fp, r3
 801d5bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801d5c0:	f8d9 7000 	ldr.w	r7, [r9]
 801d5c4:	4463      	add	r3, ip
 801d5c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d5ca:	fb0a c70b 	mla	r7, sl, fp, ip
 801d5ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801d5d2:	b29b      	uxth	r3, r3
 801d5d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d5d8:	4572      	cmp	r2, lr
 801d5da:	f849 3b04 	str.w	r3, [r9], #4
 801d5de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d5e2:	d8e2      	bhi.n	801d5aa <__multiply+0xb2>
 801d5e4:	9b01      	ldr	r3, [sp, #4]
 801d5e6:	f845 c003 	str.w	ip, [r5, r3]
 801d5ea:	9b03      	ldr	r3, [sp, #12]
 801d5ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d5f0:	3104      	adds	r1, #4
 801d5f2:	f1b9 0f00 	cmp.w	r9, #0
 801d5f6:	d021      	beq.n	801d63c <__multiply+0x144>
 801d5f8:	682b      	ldr	r3, [r5, #0]
 801d5fa:	f104 0c14 	add.w	ip, r4, #20
 801d5fe:	46ae      	mov	lr, r5
 801d600:	f04f 0a00 	mov.w	sl, #0
 801d604:	f8bc b000 	ldrh.w	fp, [ip]
 801d608:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801d60c:	fb09 770b 	mla	r7, r9, fp, r7
 801d610:	4457      	add	r7, sl
 801d612:	b29b      	uxth	r3, r3
 801d614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d618:	f84e 3b04 	str.w	r3, [lr], #4
 801d61c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d624:	f8be 3000 	ldrh.w	r3, [lr]
 801d628:	fb09 330a 	mla	r3, r9, sl, r3
 801d62c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801d630:	4562      	cmp	r2, ip
 801d632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d636:	d8e5      	bhi.n	801d604 <__multiply+0x10c>
 801d638:	9f01      	ldr	r7, [sp, #4]
 801d63a:	51eb      	str	r3, [r5, r7]
 801d63c:	3504      	adds	r5, #4
 801d63e:	e799      	b.n	801d574 <__multiply+0x7c>
 801d640:	3e01      	subs	r6, #1
 801d642:	e79b      	b.n	801d57c <__multiply+0x84>
 801d644:	0806dcc1 	.word	0x0806dcc1
 801d648:	0806dcd2 	.word	0x0806dcd2

0801d64c <__pow5mult>:
 801d64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d650:	4615      	mov	r5, r2
 801d652:	f012 0203 	ands.w	r2, r2, #3
 801d656:	4607      	mov	r7, r0
 801d658:	460e      	mov	r6, r1
 801d65a:	d007      	beq.n	801d66c <__pow5mult+0x20>
 801d65c:	4c25      	ldr	r4, [pc, #148]	@ (801d6f4 <__pow5mult+0xa8>)
 801d65e:	3a01      	subs	r2, #1
 801d660:	2300      	movs	r3, #0
 801d662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d666:	f7ff fe9f 	bl	801d3a8 <__multadd>
 801d66a:	4606      	mov	r6, r0
 801d66c:	10ad      	asrs	r5, r5, #2
 801d66e:	d03d      	beq.n	801d6ec <__pow5mult+0xa0>
 801d670:	69fc      	ldr	r4, [r7, #28]
 801d672:	b97c      	cbnz	r4, 801d694 <__pow5mult+0x48>
 801d674:	2010      	movs	r0, #16
 801d676:	f7fd fecd 	bl	801b414 <malloc>
 801d67a:	4602      	mov	r2, r0
 801d67c:	61f8      	str	r0, [r7, #28]
 801d67e:	b928      	cbnz	r0, 801d68c <__pow5mult+0x40>
 801d680:	4b1d      	ldr	r3, [pc, #116]	@ (801d6f8 <__pow5mult+0xac>)
 801d682:	481e      	ldr	r0, [pc, #120]	@ (801d6fc <__pow5mult+0xb0>)
 801d684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d688:	f7fe ff78 	bl	801c57c <__assert_func>
 801d68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d690:	6004      	str	r4, [r0, #0]
 801d692:	60c4      	str	r4, [r0, #12]
 801d694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d69c:	b94c      	cbnz	r4, 801d6b2 <__pow5mult+0x66>
 801d69e:	f240 2171 	movw	r1, #625	@ 0x271
 801d6a2:	4638      	mov	r0, r7
 801d6a4:	f7ff ff12 	bl	801d4cc <__i2b>
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	f8c8 0008 	str.w	r0, [r8, #8]
 801d6ae:	4604      	mov	r4, r0
 801d6b0:	6003      	str	r3, [r0, #0]
 801d6b2:	f04f 0900 	mov.w	r9, #0
 801d6b6:	07eb      	lsls	r3, r5, #31
 801d6b8:	d50a      	bpl.n	801d6d0 <__pow5mult+0x84>
 801d6ba:	4631      	mov	r1, r6
 801d6bc:	4622      	mov	r2, r4
 801d6be:	4638      	mov	r0, r7
 801d6c0:	f7ff ff1a 	bl	801d4f8 <__multiply>
 801d6c4:	4631      	mov	r1, r6
 801d6c6:	4680      	mov	r8, r0
 801d6c8:	4638      	mov	r0, r7
 801d6ca:	f7ff fe4b 	bl	801d364 <_Bfree>
 801d6ce:	4646      	mov	r6, r8
 801d6d0:	106d      	asrs	r5, r5, #1
 801d6d2:	d00b      	beq.n	801d6ec <__pow5mult+0xa0>
 801d6d4:	6820      	ldr	r0, [r4, #0]
 801d6d6:	b938      	cbnz	r0, 801d6e8 <__pow5mult+0x9c>
 801d6d8:	4622      	mov	r2, r4
 801d6da:	4621      	mov	r1, r4
 801d6dc:	4638      	mov	r0, r7
 801d6de:	f7ff ff0b 	bl	801d4f8 <__multiply>
 801d6e2:	6020      	str	r0, [r4, #0]
 801d6e4:	f8c0 9000 	str.w	r9, [r0]
 801d6e8:	4604      	mov	r4, r0
 801d6ea:	e7e4      	b.n	801d6b6 <__pow5mult+0x6a>
 801d6ec:	4630      	mov	r0, r6
 801d6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6f2:	bf00      	nop
 801d6f4:	0806dd2c 	.word	0x0806dd2c
 801d6f8:	0806da7c 	.word	0x0806da7c
 801d6fc:	0806dcd2 	.word	0x0806dcd2

0801d700 <__lshift>:
 801d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d704:	460c      	mov	r4, r1
 801d706:	6849      	ldr	r1, [r1, #4]
 801d708:	6923      	ldr	r3, [r4, #16]
 801d70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d70e:	68a3      	ldr	r3, [r4, #8]
 801d710:	4607      	mov	r7, r0
 801d712:	4691      	mov	r9, r2
 801d714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d718:	f108 0601 	add.w	r6, r8, #1
 801d71c:	42b3      	cmp	r3, r6
 801d71e:	db0b      	blt.n	801d738 <__lshift+0x38>
 801d720:	4638      	mov	r0, r7
 801d722:	f7ff fddf 	bl	801d2e4 <_Balloc>
 801d726:	4605      	mov	r5, r0
 801d728:	b948      	cbnz	r0, 801d73e <__lshift+0x3e>
 801d72a:	4602      	mov	r2, r0
 801d72c:	4b28      	ldr	r3, [pc, #160]	@ (801d7d0 <__lshift+0xd0>)
 801d72e:	4829      	ldr	r0, [pc, #164]	@ (801d7d4 <__lshift+0xd4>)
 801d730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d734:	f7fe ff22 	bl	801c57c <__assert_func>
 801d738:	3101      	adds	r1, #1
 801d73a:	005b      	lsls	r3, r3, #1
 801d73c:	e7ee      	b.n	801d71c <__lshift+0x1c>
 801d73e:	2300      	movs	r3, #0
 801d740:	f100 0114 	add.w	r1, r0, #20
 801d744:	f100 0210 	add.w	r2, r0, #16
 801d748:	4618      	mov	r0, r3
 801d74a:	4553      	cmp	r3, sl
 801d74c:	db33      	blt.n	801d7b6 <__lshift+0xb6>
 801d74e:	6920      	ldr	r0, [r4, #16]
 801d750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d754:	f104 0314 	add.w	r3, r4, #20
 801d758:	f019 091f 	ands.w	r9, r9, #31
 801d75c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d764:	d02b      	beq.n	801d7be <__lshift+0xbe>
 801d766:	f1c9 0e20 	rsb	lr, r9, #32
 801d76a:	468a      	mov	sl, r1
 801d76c:	2200      	movs	r2, #0
 801d76e:	6818      	ldr	r0, [r3, #0]
 801d770:	fa00 f009 	lsl.w	r0, r0, r9
 801d774:	4310      	orrs	r0, r2
 801d776:	f84a 0b04 	str.w	r0, [sl], #4
 801d77a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d77e:	459c      	cmp	ip, r3
 801d780:	fa22 f20e 	lsr.w	r2, r2, lr
 801d784:	d8f3      	bhi.n	801d76e <__lshift+0x6e>
 801d786:	ebac 0304 	sub.w	r3, ip, r4
 801d78a:	3b15      	subs	r3, #21
 801d78c:	f023 0303 	bic.w	r3, r3, #3
 801d790:	3304      	adds	r3, #4
 801d792:	f104 0015 	add.w	r0, r4, #21
 801d796:	4584      	cmp	ip, r0
 801d798:	bf38      	it	cc
 801d79a:	2304      	movcc	r3, #4
 801d79c:	50ca      	str	r2, [r1, r3]
 801d79e:	b10a      	cbz	r2, 801d7a4 <__lshift+0xa4>
 801d7a0:	f108 0602 	add.w	r6, r8, #2
 801d7a4:	3e01      	subs	r6, #1
 801d7a6:	4638      	mov	r0, r7
 801d7a8:	612e      	str	r6, [r5, #16]
 801d7aa:	4621      	mov	r1, r4
 801d7ac:	f7ff fdda 	bl	801d364 <_Bfree>
 801d7b0:	4628      	mov	r0, r5
 801d7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 801d7ba:	3301      	adds	r3, #1
 801d7bc:	e7c5      	b.n	801d74a <__lshift+0x4a>
 801d7be:	3904      	subs	r1, #4
 801d7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7c4:	f841 2f04 	str.w	r2, [r1, #4]!
 801d7c8:	459c      	cmp	ip, r3
 801d7ca:	d8f9      	bhi.n	801d7c0 <__lshift+0xc0>
 801d7cc:	e7ea      	b.n	801d7a4 <__lshift+0xa4>
 801d7ce:	bf00      	nop
 801d7d0:	0806dcc1 	.word	0x0806dcc1
 801d7d4:	0806dcd2 	.word	0x0806dcd2

0801d7d8 <__mcmp>:
 801d7d8:	690a      	ldr	r2, [r1, #16]
 801d7da:	4603      	mov	r3, r0
 801d7dc:	6900      	ldr	r0, [r0, #16]
 801d7de:	1a80      	subs	r0, r0, r2
 801d7e0:	b530      	push	{r4, r5, lr}
 801d7e2:	d10e      	bne.n	801d802 <__mcmp+0x2a>
 801d7e4:	3314      	adds	r3, #20
 801d7e6:	3114      	adds	r1, #20
 801d7e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d7ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d7f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d7f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d7f8:	4295      	cmp	r5, r2
 801d7fa:	d003      	beq.n	801d804 <__mcmp+0x2c>
 801d7fc:	d205      	bcs.n	801d80a <__mcmp+0x32>
 801d7fe:	f04f 30ff 	mov.w	r0, #4294967295
 801d802:	bd30      	pop	{r4, r5, pc}
 801d804:	42a3      	cmp	r3, r4
 801d806:	d3f3      	bcc.n	801d7f0 <__mcmp+0x18>
 801d808:	e7fb      	b.n	801d802 <__mcmp+0x2a>
 801d80a:	2001      	movs	r0, #1
 801d80c:	e7f9      	b.n	801d802 <__mcmp+0x2a>
	...

0801d810 <__mdiff>:
 801d810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d814:	4689      	mov	r9, r1
 801d816:	4606      	mov	r6, r0
 801d818:	4611      	mov	r1, r2
 801d81a:	4648      	mov	r0, r9
 801d81c:	4614      	mov	r4, r2
 801d81e:	f7ff ffdb 	bl	801d7d8 <__mcmp>
 801d822:	1e05      	subs	r5, r0, #0
 801d824:	d112      	bne.n	801d84c <__mdiff+0x3c>
 801d826:	4629      	mov	r1, r5
 801d828:	4630      	mov	r0, r6
 801d82a:	f7ff fd5b 	bl	801d2e4 <_Balloc>
 801d82e:	4602      	mov	r2, r0
 801d830:	b928      	cbnz	r0, 801d83e <__mdiff+0x2e>
 801d832:	4b3f      	ldr	r3, [pc, #252]	@ (801d930 <__mdiff+0x120>)
 801d834:	f240 2137 	movw	r1, #567	@ 0x237
 801d838:	483e      	ldr	r0, [pc, #248]	@ (801d934 <__mdiff+0x124>)
 801d83a:	f7fe fe9f 	bl	801c57c <__assert_func>
 801d83e:	2301      	movs	r3, #1
 801d840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d844:	4610      	mov	r0, r2
 801d846:	b003      	add	sp, #12
 801d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d84c:	bfbc      	itt	lt
 801d84e:	464b      	movlt	r3, r9
 801d850:	46a1      	movlt	r9, r4
 801d852:	4630      	mov	r0, r6
 801d854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d858:	bfba      	itte	lt
 801d85a:	461c      	movlt	r4, r3
 801d85c:	2501      	movlt	r5, #1
 801d85e:	2500      	movge	r5, #0
 801d860:	f7ff fd40 	bl	801d2e4 <_Balloc>
 801d864:	4602      	mov	r2, r0
 801d866:	b918      	cbnz	r0, 801d870 <__mdiff+0x60>
 801d868:	4b31      	ldr	r3, [pc, #196]	@ (801d930 <__mdiff+0x120>)
 801d86a:	f240 2145 	movw	r1, #581	@ 0x245
 801d86e:	e7e3      	b.n	801d838 <__mdiff+0x28>
 801d870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d874:	6926      	ldr	r6, [r4, #16]
 801d876:	60c5      	str	r5, [r0, #12]
 801d878:	f109 0310 	add.w	r3, r9, #16
 801d87c:	f109 0514 	add.w	r5, r9, #20
 801d880:	f104 0e14 	add.w	lr, r4, #20
 801d884:	f100 0b14 	add.w	fp, r0, #20
 801d888:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d88c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d890:	9301      	str	r3, [sp, #4]
 801d892:	46d9      	mov	r9, fp
 801d894:	f04f 0c00 	mov.w	ip, #0
 801d898:	9b01      	ldr	r3, [sp, #4]
 801d89a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d89e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d8a2:	9301      	str	r3, [sp, #4]
 801d8a4:	fa1f f38a 	uxth.w	r3, sl
 801d8a8:	4619      	mov	r1, r3
 801d8aa:	b283      	uxth	r3, r0
 801d8ac:	1acb      	subs	r3, r1, r3
 801d8ae:	0c00      	lsrs	r0, r0, #16
 801d8b0:	4463      	add	r3, ip
 801d8b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d8b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d8ba:	b29b      	uxth	r3, r3
 801d8bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d8c0:	4576      	cmp	r6, lr
 801d8c2:	f849 3b04 	str.w	r3, [r9], #4
 801d8c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d8ca:	d8e5      	bhi.n	801d898 <__mdiff+0x88>
 801d8cc:	1b33      	subs	r3, r6, r4
 801d8ce:	3b15      	subs	r3, #21
 801d8d0:	f023 0303 	bic.w	r3, r3, #3
 801d8d4:	3415      	adds	r4, #21
 801d8d6:	3304      	adds	r3, #4
 801d8d8:	42a6      	cmp	r6, r4
 801d8da:	bf38      	it	cc
 801d8dc:	2304      	movcc	r3, #4
 801d8de:	441d      	add	r5, r3
 801d8e0:	445b      	add	r3, fp
 801d8e2:	461e      	mov	r6, r3
 801d8e4:	462c      	mov	r4, r5
 801d8e6:	4544      	cmp	r4, r8
 801d8e8:	d30e      	bcc.n	801d908 <__mdiff+0xf8>
 801d8ea:	f108 0103 	add.w	r1, r8, #3
 801d8ee:	1b49      	subs	r1, r1, r5
 801d8f0:	f021 0103 	bic.w	r1, r1, #3
 801d8f4:	3d03      	subs	r5, #3
 801d8f6:	45a8      	cmp	r8, r5
 801d8f8:	bf38      	it	cc
 801d8fa:	2100      	movcc	r1, #0
 801d8fc:	440b      	add	r3, r1
 801d8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d902:	b191      	cbz	r1, 801d92a <__mdiff+0x11a>
 801d904:	6117      	str	r7, [r2, #16]
 801d906:	e79d      	b.n	801d844 <__mdiff+0x34>
 801d908:	f854 1b04 	ldr.w	r1, [r4], #4
 801d90c:	46e6      	mov	lr, ip
 801d90e:	0c08      	lsrs	r0, r1, #16
 801d910:	fa1c fc81 	uxtah	ip, ip, r1
 801d914:	4471      	add	r1, lr
 801d916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d91a:	b289      	uxth	r1, r1
 801d91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d920:	f846 1b04 	str.w	r1, [r6], #4
 801d924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d928:	e7dd      	b.n	801d8e6 <__mdiff+0xd6>
 801d92a:	3f01      	subs	r7, #1
 801d92c:	e7e7      	b.n	801d8fe <__mdiff+0xee>
 801d92e:	bf00      	nop
 801d930:	0806dcc1 	.word	0x0806dcc1
 801d934:	0806dcd2 	.word	0x0806dcd2

0801d938 <__d2b>:
 801d938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d93c:	460f      	mov	r7, r1
 801d93e:	2101      	movs	r1, #1
 801d940:	ec59 8b10 	vmov	r8, r9, d0
 801d944:	4616      	mov	r6, r2
 801d946:	f7ff fccd 	bl	801d2e4 <_Balloc>
 801d94a:	4604      	mov	r4, r0
 801d94c:	b930      	cbnz	r0, 801d95c <__d2b+0x24>
 801d94e:	4602      	mov	r2, r0
 801d950:	4b23      	ldr	r3, [pc, #140]	@ (801d9e0 <__d2b+0xa8>)
 801d952:	4824      	ldr	r0, [pc, #144]	@ (801d9e4 <__d2b+0xac>)
 801d954:	f240 310f 	movw	r1, #783	@ 0x30f
 801d958:	f7fe fe10 	bl	801c57c <__assert_func>
 801d95c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d964:	b10d      	cbz	r5, 801d96a <__d2b+0x32>
 801d966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d96a:	9301      	str	r3, [sp, #4]
 801d96c:	f1b8 0300 	subs.w	r3, r8, #0
 801d970:	d023      	beq.n	801d9ba <__d2b+0x82>
 801d972:	4668      	mov	r0, sp
 801d974:	9300      	str	r3, [sp, #0]
 801d976:	f7ff fd7c 	bl	801d472 <__lo0bits>
 801d97a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d97e:	b1d0      	cbz	r0, 801d9b6 <__d2b+0x7e>
 801d980:	f1c0 0320 	rsb	r3, r0, #32
 801d984:	fa02 f303 	lsl.w	r3, r2, r3
 801d988:	430b      	orrs	r3, r1
 801d98a:	40c2      	lsrs	r2, r0
 801d98c:	6163      	str	r3, [r4, #20]
 801d98e:	9201      	str	r2, [sp, #4]
 801d990:	9b01      	ldr	r3, [sp, #4]
 801d992:	61a3      	str	r3, [r4, #24]
 801d994:	2b00      	cmp	r3, #0
 801d996:	bf0c      	ite	eq
 801d998:	2201      	moveq	r2, #1
 801d99a:	2202      	movne	r2, #2
 801d99c:	6122      	str	r2, [r4, #16]
 801d99e:	b1a5      	cbz	r5, 801d9ca <__d2b+0x92>
 801d9a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d9a4:	4405      	add	r5, r0
 801d9a6:	603d      	str	r5, [r7, #0]
 801d9a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d9ac:	6030      	str	r0, [r6, #0]
 801d9ae:	4620      	mov	r0, r4
 801d9b0:	b003      	add	sp, #12
 801d9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d9b6:	6161      	str	r1, [r4, #20]
 801d9b8:	e7ea      	b.n	801d990 <__d2b+0x58>
 801d9ba:	a801      	add	r0, sp, #4
 801d9bc:	f7ff fd59 	bl	801d472 <__lo0bits>
 801d9c0:	9b01      	ldr	r3, [sp, #4]
 801d9c2:	6163      	str	r3, [r4, #20]
 801d9c4:	3020      	adds	r0, #32
 801d9c6:	2201      	movs	r2, #1
 801d9c8:	e7e8      	b.n	801d99c <__d2b+0x64>
 801d9ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d9ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d9d2:	6038      	str	r0, [r7, #0]
 801d9d4:	6918      	ldr	r0, [r3, #16]
 801d9d6:	f7ff fd2d 	bl	801d434 <__hi0bits>
 801d9da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d9de:	e7e5      	b.n	801d9ac <__d2b+0x74>
 801d9e0:	0806dcc1 	.word	0x0806dcc1
 801d9e4:	0806dcd2 	.word	0x0806dcd2

0801d9e8 <__sfputc_r>:
 801d9e8:	6893      	ldr	r3, [r2, #8]
 801d9ea:	3b01      	subs	r3, #1
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	b410      	push	{r4}
 801d9f0:	6093      	str	r3, [r2, #8]
 801d9f2:	da08      	bge.n	801da06 <__sfputc_r+0x1e>
 801d9f4:	6994      	ldr	r4, [r2, #24]
 801d9f6:	42a3      	cmp	r3, r4
 801d9f8:	db01      	blt.n	801d9fe <__sfputc_r+0x16>
 801d9fa:	290a      	cmp	r1, #10
 801d9fc:	d103      	bne.n	801da06 <__sfputc_r+0x1e>
 801d9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da02:	f7fe bc4b 	b.w	801c29c <__swbuf_r>
 801da06:	6813      	ldr	r3, [r2, #0]
 801da08:	1c58      	adds	r0, r3, #1
 801da0a:	6010      	str	r0, [r2, #0]
 801da0c:	7019      	strb	r1, [r3, #0]
 801da0e:	4608      	mov	r0, r1
 801da10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da14:	4770      	bx	lr

0801da16 <__sfputs_r>:
 801da16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da18:	4606      	mov	r6, r0
 801da1a:	460f      	mov	r7, r1
 801da1c:	4614      	mov	r4, r2
 801da1e:	18d5      	adds	r5, r2, r3
 801da20:	42ac      	cmp	r4, r5
 801da22:	d101      	bne.n	801da28 <__sfputs_r+0x12>
 801da24:	2000      	movs	r0, #0
 801da26:	e007      	b.n	801da38 <__sfputs_r+0x22>
 801da28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da2c:	463a      	mov	r2, r7
 801da2e:	4630      	mov	r0, r6
 801da30:	f7ff ffda 	bl	801d9e8 <__sfputc_r>
 801da34:	1c43      	adds	r3, r0, #1
 801da36:	d1f3      	bne.n	801da20 <__sfputs_r+0xa>
 801da38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801da3c <_vfiprintf_r>:
 801da3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da40:	460d      	mov	r5, r1
 801da42:	b09d      	sub	sp, #116	@ 0x74
 801da44:	4614      	mov	r4, r2
 801da46:	4698      	mov	r8, r3
 801da48:	4606      	mov	r6, r0
 801da4a:	b118      	cbz	r0, 801da54 <_vfiprintf_r+0x18>
 801da4c:	6a03      	ldr	r3, [r0, #32]
 801da4e:	b90b      	cbnz	r3, 801da54 <_vfiprintf_r+0x18>
 801da50:	f7fe fb30 	bl	801c0b4 <__sinit>
 801da54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da56:	07d9      	lsls	r1, r3, #31
 801da58:	d405      	bmi.n	801da66 <_vfiprintf_r+0x2a>
 801da5a:	89ab      	ldrh	r3, [r5, #12]
 801da5c:	059a      	lsls	r2, r3, #22
 801da5e:	d402      	bmi.n	801da66 <_vfiprintf_r+0x2a>
 801da60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da62:	f7fe fd72 	bl	801c54a <__retarget_lock_acquire_recursive>
 801da66:	89ab      	ldrh	r3, [r5, #12]
 801da68:	071b      	lsls	r3, r3, #28
 801da6a:	d501      	bpl.n	801da70 <_vfiprintf_r+0x34>
 801da6c:	692b      	ldr	r3, [r5, #16]
 801da6e:	b99b      	cbnz	r3, 801da98 <_vfiprintf_r+0x5c>
 801da70:	4629      	mov	r1, r5
 801da72:	4630      	mov	r0, r6
 801da74:	f7fe fc50 	bl	801c318 <__swsetup_r>
 801da78:	b170      	cbz	r0, 801da98 <_vfiprintf_r+0x5c>
 801da7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da7c:	07dc      	lsls	r4, r3, #31
 801da7e:	d504      	bpl.n	801da8a <_vfiprintf_r+0x4e>
 801da80:	f04f 30ff 	mov.w	r0, #4294967295
 801da84:	b01d      	add	sp, #116	@ 0x74
 801da86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da8a:	89ab      	ldrh	r3, [r5, #12]
 801da8c:	0598      	lsls	r0, r3, #22
 801da8e:	d4f7      	bmi.n	801da80 <_vfiprintf_r+0x44>
 801da90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da92:	f7fe fd5b 	bl	801c54c <__retarget_lock_release_recursive>
 801da96:	e7f3      	b.n	801da80 <_vfiprintf_r+0x44>
 801da98:	2300      	movs	r3, #0
 801da9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801da9c:	2320      	movs	r3, #32
 801da9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801daa2:	f8cd 800c 	str.w	r8, [sp, #12]
 801daa6:	2330      	movs	r3, #48	@ 0x30
 801daa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dc58 <_vfiprintf_r+0x21c>
 801daac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dab0:	f04f 0901 	mov.w	r9, #1
 801dab4:	4623      	mov	r3, r4
 801dab6:	469a      	mov	sl, r3
 801dab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dabc:	b10a      	cbz	r2, 801dac2 <_vfiprintf_r+0x86>
 801dabe:	2a25      	cmp	r2, #37	@ 0x25
 801dac0:	d1f9      	bne.n	801dab6 <_vfiprintf_r+0x7a>
 801dac2:	ebba 0b04 	subs.w	fp, sl, r4
 801dac6:	d00b      	beq.n	801dae0 <_vfiprintf_r+0xa4>
 801dac8:	465b      	mov	r3, fp
 801daca:	4622      	mov	r2, r4
 801dacc:	4629      	mov	r1, r5
 801dace:	4630      	mov	r0, r6
 801dad0:	f7ff ffa1 	bl	801da16 <__sfputs_r>
 801dad4:	3001      	adds	r0, #1
 801dad6:	f000 80a7 	beq.w	801dc28 <_vfiprintf_r+0x1ec>
 801dada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dadc:	445a      	add	r2, fp
 801dade:	9209      	str	r2, [sp, #36]	@ 0x24
 801dae0:	f89a 3000 	ldrb.w	r3, [sl]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	f000 809f 	beq.w	801dc28 <_vfiprintf_r+0x1ec>
 801daea:	2300      	movs	r3, #0
 801daec:	f04f 32ff 	mov.w	r2, #4294967295
 801daf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801daf4:	f10a 0a01 	add.w	sl, sl, #1
 801daf8:	9304      	str	r3, [sp, #16]
 801dafa:	9307      	str	r3, [sp, #28]
 801dafc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801db00:	931a      	str	r3, [sp, #104]	@ 0x68
 801db02:	4654      	mov	r4, sl
 801db04:	2205      	movs	r2, #5
 801db06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db0a:	4853      	ldr	r0, [pc, #332]	@ (801dc58 <_vfiprintf_r+0x21c>)
 801db0c:	f7e2 fb78 	bl	8000200 <memchr>
 801db10:	9a04      	ldr	r2, [sp, #16]
 801db12:	b9d8      	cbnz	r0, 801db4c <_vfiprintf_r+0x110>
 801db14:	06d1      	lsls	r1, r2, #27
 801db16:	bf44      	itt	mi
 801db18:	2320      	movmi	r3, #32
 801db1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db1e:	0713      	lsls	r3, r2, #28
 801db20:	bf44      	itt	mi
 801db22:	232b      	movmi	r3, #43	@ 0x2b
 801db24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db28:	f89a 3000 	ldrb.w	r3, [sl]
 801db2c:	2b2a      	cmp	r3, #42	@ 0x2a
 801db2e:	d015      	beq.n	801db5c <_vfiprintf_r+0x120>
 801db30:	9a07      	ldr	r2, [sp, #28]
 801db32:	4654      	mov	r4, sl
 801db34:	2000      	movs	r0, #0
 801db36:	f04f 0c0a 	mov.w	ip, #10
 801db3a:	4621      	mov	r1, r4
 801db3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db40:	3b30      	subs	r3, #48	@ 0x30
 801db42:	2b09      	cmp	r3, #9
 801db44:	d94b      	bls.n	801dbde <_vfiprintf_r+0x1a2>
 801db46:	b1b0      	cbz	r0, 801db76 <_vfiprintf_r+0x13a>
 801db48:	9207      	str	r2, [sp, #28]
 801db4a:	e014      	b.n	801db76 <_vfiprintf_r+0x13a>
 801db4c:	eba0 0308 	sub.w	r3, r0, r8
 801db50:	fa09 f303 	lsl.w	r3, r9, r3
 801db54:	4313      	orrs	r3, r2
 801db56:	9304      	str	r3, [sp, #16]
 801db58:	46a2      	mov	sl, r4
 801db5a:	e7d2      	b.n	801db02 <_vfiprintf_r+0xc6>
 801db5c:	9b03      	ldr	r3, [sp, #12]
 801db5e:	1d19      	adds	r1, r3, #4
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	9103      	str	r1, [sp, #12]
 801db64:	2b00      	cmp	r3, #0
 801db66:	bfbb      	ittet	lt
 801db68:	425b      	neglt	r3, r3
 801db6a:	f042 0202 	orrlt.w	r2, r2, #2
 801db6e:	9307      	strge	r3, [sp, #28]
 801db70:	9307      	strlt	r3, [sp, #28]
 801db72:	bfb8      	it	lt
 801db74:	9204      	strlt	r2, [sp, #16]
 801db76:	7823      	ldrb	r3, [r4, #0]
 801db78:	2b2e      	cmp	r3, #46	@ 0x2e
 801db7a:	d10a      	bne.n	801db92 <_vfiprintf_r+0x156>
 801db7c:	7863      	ldrb	r3, [r4, #1]
 801db7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801db80:	d132      	bne.n	801dbe8 <_vfiprintf_r+0x1ac>
 801db82:	9b03      	ldr	r3, [sp, #12]
 801db84:	1d1a      	adds	r2, r3, #4
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	9203      	str	r2, [sp, #12]
 801db8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801db8e:	3402      	adds	r4, #2
 801db90:	9305      	str	r3, [sp, #20]
 801db92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dc68 <_vfiprintf_r+0x22c>
 801db96:	7821      	ldrb	r1, [r4, #0]
 801db98:	2203      	movs	r2, #3
 801db9a:	4650      	mov	r0, sl
 801db9c:	f7e2 fb30 	bl	8000200 <memchr>
 801dba0:	b138      	cbz	r0, 801dbb2 <_vfiprintf_r+0x176>
 801dba2:	9b04      	ldr	r3, [sp, #16]
 801dba4:	eba0 000a 	sub.w	r0, r0, sl
 801dba8:	2240      	movs	r2, #64	@ 0x40
 801dbaa:	4082      	lsls	r2, r0
 801dbac:	4313      	orrs	r3, r2
 801dbae:	3401      	adds	r4, #1
 801dbb0:	9304      	str	r3, [sp, #16]
 801dbb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbb6:	4829      	ldr	r0, [pc, #164]	@ (801dc5c <_vfiprintf_r+0x220>)
 801dbb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dbbc:	2206      	movs	r2, #6
 801dbbe:	f7e2 fb1f 	bl	8000200 <memchr>
 801dbc2:	2800      	cmp	r0, #0
 801dbc4:	d03f      	beq.n	801dc46 <_vfiprintf_r+0x20a>
 801dbc6:	4b26      	ldr	r3, [pc, #152]	@ (801dc60 <_vfiprintf_r+0x224>)
 801dbc8:	bb1b      	cbnz	r3, 801dc12 <_vfiprintf_r+0x1d6>
 801dbca:	9b03      	ldr	r3, [sp, #12]
 801dbcc:	3307      	adds	r3, #7
 801dbce:	f023 0307 	bic.w	r3, r3, #7
 801dbd2:	3308      	adds	r3, #8
 801dbd4:	9303      	str	r3, [sp, #12]
 801dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbd8:	443b      	add	r3, r7
 801dbda:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbdc:	e76a      	b.n	801dab4 <_vfiprintf_r+0x78>
 801dbde:	fb0c 3202 	mla	r2, ip, r2, r3
 801dbe2:	460c      	mov	r4, r1
 801dbe4:	2001      	movs	r0, #1
 801dbe6:	e7a8      	b.n	801db3a <_vfiprintf_r+0xfe>
 801dbe8:	2300      	movs	r3, #0
 801dbea:	3401      	adds	r4, #1
 801dbec:	9305      	str	r3, [sp, #20]
 801dbee:	4619      	mov	r1, r3
 801dbf0:	f04f 0c0a 	mov.w	ip, #10
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dbfa:	3a30      	subs	r2, #48	@ 0x30
 801dbfc:	2a09      	cmp	r2, #9
 801dbfe:	d903      	bls.n	801dc08 <_vfiprintf_r+0x1cc>
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d0c6      	beq.n	801db92 <_vfiprintf_r+0x156>
 801dc04:	9105      	str	r1, [sp, #20]
 801dc06:	e7c4      	b.n	801db92 <_vfiprintf_r+0x156>
 801dc08:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc0c:	4604      	mov	r4, r0
 801dc0e:	2301      	movs	r3, #1
 801dc10:	e7f0      	b.n	801dbf4 <_vfiprintf_r+0x1b8>
 801dc12:	ab03      	add	r3, sp, #12
 801dc14:	9300      	str	r3, [sp, #0]
 801dc16:	462a      	mov	r2, r5
 801dc18:	4b12      	ldr	r3, [pc, #72]	@ (801dc64 <_vfiprintf_r+0x228>)
 801dc1a:	a904      	add	r1, sp, #16
 801dc1c:	4630      	mov	r0, r6
 801dc1e:	f7fd fe05 	bl	801b82c <_printf_float>
 801dc22:	4607      	mov	r7, r0
 801dc24:	1c78      	adds	r0, r7, #1
 801dc26:	d1d6      	bne.n	801dbd6 <_vfiprintf_r+0x19a>
 801dc28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dc2a:	07d9      	lsls	r1, r3, #31
 801dc2c:	d405      	bmi.n	801dc3a <_vfiprintf_r+0x1fe>
 801dc2e:	89ab      	ldrh	r3, [r5, #12]
 801dc30:	059a      	lsls	r2, r3, #22
 801dc32:	d402      	bmi.n	801dc3a <_vfiprintf_r+0x1fe>
 801dc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dc36:	f7fe fc89 	bl	801c54c <__retarget_lock_release_recursive>
 801dc3a:	89ab      	ldrh	r3, [r5, #12]
 801dc3c:	065b      	lsls	r3, r3, #25
 801dc3e:	f53f af1f 	bmi.w	801da80 <_vfiprintf_r+0x44>
 801dc42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dc44:	e71e      	b.n	801da84 <_vfiprintf_r+0x48>
 801dc46:	ab03      	add	r3, sp, #12
 801dc48:	9300      	str	r3, [sp, #0]
 801dc4a:	462a      	mov	r2, r5
 801dc4c:	4b05      	ldr	r3, [pc, #20]	@ (801dc64 <_vfiprintf_r+0x228>)
 801dc4e:	a904      	add	r1, sp, #16
 801dc50:	4630      	mov	r0, r6
 801dc52:	f7fe f883 	bl	801bd5c <_printf_i>
 801dc56:	e7e4      	b.n	801dc22 <_vfiprintf_r+0x1e6>
 801dc58:	0806de28 	.word	0x0806de28
 801dc5c:	0806de32 	.word	0x0806de32
 801dc60:	0801b82d 	.word	0x0801b82d
 801dc64:	0801da17 	.word	0x0801da17
 801dc68:	0806de2e 	.word	0x0806de2e

0801dc6c <__sflush_r>:
 801dc6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc74:	0716      	lsls	r6, r2, #28
 801dc76:	4605      	mov	r5, r0
 801dc78:	460c      	mov	r4, r1
 801dc7a:	d454      	bmi.n	801dd26 <__sflush_r+0xba>
 801dc7c:	684b      	ldr	r3, [r1, #4]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	dc02      	bgt.n	801dc88 <__sflush_r+0x1c>
 801dc82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	dd48      	ble.n	801dd1a <__sflush_r+0xae>
 801dc88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc8a:	2e00      	cmp	r6, #0
 801dc8c:	d045      	beq.n	801dd1a <__sflush_r+0xae>
 801dc8e:	2300      	movs	r3, #0
 801dc90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dc94:	682f      	ldr	r7, [r5, #0]
 801dc96:	6a21      	ldr	r1, [r4, #32]
 801dc98:	602b      	str	r3, [r5, #0]
 801dc9a:	d030      	beq.n	801dcfe <__sflush_r+0x92>
 801dc9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dc9e:	89a3      	ldrh	r3, [r4, #12]
 801dca0:	0759      	lsls	r1, r3, #29
 801dca2:	d505      	bpl.n	801dcb0 <__sflush_r+0x44>
 801dca4:	6863      	ldr	r3, [r4, #4]
 801dca6:	1ad2      	subs	r2, r2, r3
 801dca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dcaa:	b10b      	cbz	r3, 801dcb0 <__sflush_r+0x44>
 801dcac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dcae:	1ad2      	subs	r2, r2, r3
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dcb4:	6a21      	ldr	r1, [r4, #32]
 801dcb6:	4628      	mov	r0, r5
 801dcb8:	47b0      	blx	r6
 801dcba:	1c43      	adds	r3, r0, #1
 801dcbc:	89a3      	ldrh	r3, [r4, #12]
 801dcbe:	d106      	bne.n	801dcce <__sflush_r+0x62>
 801dcc0:	6829      	ldr	r1, [r5, #0]
 801dcc2:	291d      	cmp	r1, #29
 801dcc4:	d82b      	bhi.n	801dd1e <__sflush_r+0xb2>
 801dcc6:	4a2a      	ldr	r2, [pc, #168]	@ (801dd70 <__sflush_r+0x104>)
 801dcc8:	410a      	asrs	r2, r1
 801dcca:	07d6      	lsls	r6, r2, #31
 801dccc:	d427      	bmi.n	801dd1e <__sflush_r+0xb2>
 801dcce:	2200      	movs	r2, #0
 801dcd0:	6062      	str	r2, [r4, #4]
 801dcd2:	04d9      	lsls	r1, r3, #19
 801dcd4:	6922      	ldr	r2, [r4, #16]
 801dcd6:	6022      	str	r2, [r4, #0]
 801dcd8:	d504      	bpl.n	801dce4 <__sflush_r+0x78>
 801dcda:	1c42      	adds	r2, r0, #1
 801dcdc:	d101      	bne.n	801dce2 <__sflush_r+0x76>
 801dcde:	682b      	ldr	r3, [r5, #0]
 801dce0:	b903      	cbnz	r3, 801dce4 <__sflush_r+0x78>
 801dce2:	6560      	str	r0, [r4, #84]	@ 0x54
 801dce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dce6:	602f      	str	r7, [r5, #0]
 801dce8:	b1b9      	cbz	r1, 801dd1a <__sflush_r+0xae>
 801dcea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dcee:	4299      	cmp	r1, r3
 801dcf0:	d002      	beq.n	801dcf8 <__sflush_r+0x8c>
 801dcf2:	4628      	mov	r0, r5
 801dcf4:	f7ff faac 	bl	801d250 <_free_r>
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	6363      	str	r3, [r4, #52]	@ 0x34
 801dcfc:	e00d      	b.n	801dd1a <__sflush_r+0xae>
 801dcfe:	2301      	movs	r3, #1
 801dd00:	4628      	mov	r0, r5
 801dd02:	47b0      	blx	r6
 801dd04:	4602      	mov	r2, r0
 801dd06:	1c50      	adds	r0, r2, #1
 801dd08:	d1c9      	bne.n	801dc9e <__sflush_r+0x32>
 801dd0a:	682b      	ldr	r3, [r5, #0]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d0c6      	beq.n	801dc9e <__sflush_r+0x32>
 801dd10:	2b1d      	cmp	r3, #29
 801dd12:	d001      	beq.n	801dd18 <__sflush_r+0xac>
 801dd14:	2b16      	cmp	r3, #22
 801dd16:	d11e      	bne.n	801dd56 <__sflush_r+0xea>
 801dd18:	602f      	str	r7, [r5, #0]
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	e022      	b.n	801dd64 <__sflush_r+0xf8>
 801dd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd22:	b21b      	sxth	r3, r3
 801dd24:	e01b      	b.n	801dd5e <__sflush_r+0xf2>
 801dd26:	690f      	ldr	r7, [r1, #16]
 801dd28:	2f00      	cmp	r7, #0
 801dd2a:	d0f6      	beq.n	801dd1a <__sflush_r+0xae>
 801dd2c:	0793      	lsls	r3, r2, #30
 801dd2e:	680e      	ldr	r6, [r1, #0]
 801dd30:	bf08      	it	eq
 801dd32:	694b      	ldreq	r3, [r1, #20]
 801dd34:	600f      	str	r7, [r1, #0]
 801dd36:	bf18      	it	ne
 801dd38:	2300      	movne	r3, #0
 801dd3a:	eba6 0807 	sub.w	r8, r6, r7
 801dd3e:	608b      	str	r3, [r1, #8]
 801dd40:	f1b8 0f00 	cmp.w	r8, #0
 801dd44:	dde9      	ble.n	801dd1a <__sflush_r+0xae>
 801dd46:	6a21      	ldr	r1, [r4, #32]
 801dd48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dd4a:	4643      	mov	r3, r8
 801dd4c:	463a      	mov	r2, r7
 801dd4e:	4628      	mov	r0, r5
 801dd50:	47b0      	blx	r6
 801dd52:	2800      	cmp	r0, #0
 801dd54:	dc08      	bgt.n	801dd68 <__sflush_r+0xfc>
 801dd56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd5e:	81a3      	strh	r3, [r4, #12]
 801dd60:	f04f 30ff 	mov.w	r0, #4294967295
 801dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd68:	4407      	add	r7, r0
 801dd6a:	eba8 0800 	sub.w	r8, r8, r0
 801dd6e:	e7e7      	b.n	801dd40 <__sflush_r+0xd4>
 801dd70:	dfbffffe 	.word	0xdfbffffe

0801dd74 <_fflush_r>:
 801dd74:	b538      	push	{r3, r4, r5, lr}
 801dd76:	690b      	ldr	r3, [r1, #16]
 801dd78:	4605      	mov	r5, r0
 801dd7a:	460c      	mov	r4, r1
 801dd7c:	b913      	cbnz	r3, 801dd84 <_fflush_r+0x10>
 801dd7e:	2500      	movs	r5, #0
 801dd80:	4628      	mov	r0, r5
 801dd82:	bd38      	pop	{r3, r4, r5, pc}
 801dd84:	b118      	cbz	r0, 801dd8e <_fflush_r+0x1a>
 801dd86:	6a03      	ldr	r3, [r0, #32]
 801dd88:	b90b      	cbnz	r3, 801dd8e <_fflush_r+0x1a>
 801dd8a:	f7fe f993 	bl	801c0b4 <__sinit>
 801dd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d0f3      	beq.n	801dd7e <_fflush_r+0xa>
 801dd96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dd98:	07d0      	lsls	r0, r2, #31
 801dd9a:	d404      	bmi.n	801dda6 <_fflush_r+0x32>
 801dd9c:	0599      	lsls	r1, r3, #22
 801dd9e:	d402      	bmi.n	801dda6 <_fflush_r+0x32>
 801dda0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dda2:	f7fe fbd2 	bl	801c54a <__retarget_lock_acquire_recursive>
 801dda6:	4628      	mov	r0, r5
 801dda8:	4621      	mov	r1, r4
 801ddaa:	f7ff ff5f 	bl	801dc6c <__sflush_r>
 801ddae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddb0:	07da      	lsls	r2, r3, #31
 801ddb2:	4605      	mov	r5, r0
 801ddb4:	d4e4      	bmi.n	801dd80 <_fflush_r+0xc>
 801ddb6:	89a3      	ldrh	r3, [r4, #12]
 801ddb8:	059b      	lsls	r3, r3, #22
 801ddba:	d4e1      	bmi.n	801dd80 <_fflush_r+0xc>
 801ddbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddbe:	f7fe fbc5 	bl	801c54c <__retarget_lock_release_recursive>
 801ddc2:	e7dd      	b.n	801dd80 <_fflush_r+0xc>

0801ddc4 <fiprintf>:
 801ddc4:	b40e      	push	{r1, r2, r3}
 801ddc6:	b503      	push	{r0, r1, lr}
 801ddc8:	4601      	mov	r1, r0
 801ddca:	ab03      	add	r3, sp, #12
 801ddcc:	4805      	ldr	r0, [pc, #20]	@ (801dde4 <fiprintf+0x20>)
 801ddce:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddd2:	6800      	ldr	r0, [r0, #0]
 801ddd4:	9301      	str	r3, [sp, #4]
 801ddd6:	f7ff fe31 	bl	801da3c <_vfiprintf_r>
 801ddda:	b002      	add	sp, #8
 801dddc:	f85d eb04 	ldr.w	lr, [sp], #4
 801dde0:	b003      	add	sp, #12
 801dde2:	4770      	bx	lr
 801dde4:	200000cc 	.word	0x200000cc

0801dde8 <__swhatbuf_r>:
 801dde8:	b570      	push	{r4, r5, r6, lr}
 801ddea:	460c      	mov	r4, r1
 801ddec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddf0:	2900      	cmp	r1, #0
 801ddf2:	b096      	sub	sp, #88	@ 0x58
 801ddf4:	4615      	mov	r5, r2
 801ddf6:	461e      	mov	r6, r3
 801ddf8:	da0d      	bge.n	801de16 <__swhatbuf_r+0x2e>
 801ddfa:	89a3      	ldrh	r3, [r4, #12]
 801ddfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801de00:	f04f 0100 	mov.w	r1, #0
 801de04:	bf14      	ite	ne
 801de06:	2340      	movne	r3, #64	@ 0x40
 801de08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801de0c:	2000      	movs	r0, #0
 801de0e:	6031      	str	r1, [r6, #0]
 801de10:	602b      	str	r3, [r5, #0]
 801de12:	b016      	add	sp, #88	@ 0x58
 801de14:	bd70      	pop	{r4, r5, r6, pc}
 801de16:	466a      	mov	r2, sp
 801de18:	f000 f848 	bl	801deac <_fstat_r>
 801de1c:	2800      	cmp	r0, #0
 801de1e:	dbec      	blt.n	801ddfa <__swhatbuf_r+0x12>
 801de20:	9901      	ldr	r1, [sp, #4]
 801de22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801de26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801de2a:	4259      	negs	r1, r3
 801de2c:	4159      	adcs	r1, r3
 801de2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801de32:	e7eb      	b.n	801de0c <__swhatbuf_r+0x24>

0801de34 <__smakebuf_r>:
 801de34:	898b      	ldrh	r3, [r1, #12]
 801de36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801de38:	079d      	lsls	r5, r3, #30
 801de3a:	4606      	mov	r6, r0
 801de3c:	460c      	mov	r4, r1
 801de3e:	d507      	bpl.n	801de50 <__smakebuf_r+0x1c>
 801de40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801de44:	6023      	str	r3, [r4, #0]
 801de46:	6123      	str	r3, [r4, #16]
 801de48:	2301      	movs	r3, #1
 801de4a:	6163      	str	r3, [r4, #20]
 801de4c:	b003      	add	sp, #12
 801de4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de50:	ab01      	add	r3, sp, #4
 801de52:	466a      	mov	r2, sp
 801de54:	f7ff ffc8 	bl	801dde8 <__swhatbuf_r>
 801de58:	9f00      	ldr	r7, [sp, #0]
 801de5a:	4605      	mov	r5, r0
 801de5c:	4639      	mov	r1, r7
 801de5e:	4630      	mov	r0, r6
 801de60:	f7fd fb02 	bl	801b468 <_malloc_r>
 801de64:	b948      	cbnz	r0, 801de7a <__smakebuf_r+0x46>
 801de66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de6a:	059a      	lsls	r2, r3, #22
 801de6c:	d4ee      	bmi.n	801de4c <__smakebuf_r+0x18>
 801de6e:	f023 0303 	bic.w	r3, r3, #3
 801de72:	f043 0302 	orr.w	r3, r3, #2
 801de76:	81a3      	strh	r3, [r4, #12]
 801de78:	e7e2      	b.n	801de40 <__smakebuf_r+0xc>
 801de7a:	89a3      	ldrh	r3, [r4, #12]
 801de7c:	6020      	str	r0, [r4, #0]
 801de7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de82:	81a3      	strh	r3, [r4, #12]
 801de84:	9b01      	ldr	r3, [sp, #4]
 801de86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801de8a:	b15b      	cbz	r3, 801dea4 <__smakebuf_r+0x70>
 801de8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de90:	4630      	mov	r0, r6
 801de92:	f000 f81d 	bl	801ded0 <_isatty_r>
 801de96:	b128      	cbz	r0, 801dea4 <__smakebuf_r+0x70>
 801de98:	89a3      	ldrh	r3, [r4, #12]
 801de9a:	f023 0303 	bic.w	r3, r3, #3
 801de9e:	f043 0301 	orr.w	r3, r3, #1
 801dea2:	81a3      	strh	r3, [r4, #12]
 801dea4:	89a3      	ldrh	r3, [r4, #12]
 801dea6:	431d      	orrs	r5, r3
 801dea8:	81a5      	strh	r5, [r4, #12]
 801deaa:	e7cf      	b.n	801de4c <__smakebuf_r+0x18>

0801deac <_fstat_r>:
 801deac:	b538      	push	{r3, r4, r5, lr}
 801deae:	4d07      	ldr	r5, [pc, #28]	@ (801decc <_fstat_r+0x20>)
 801deb0:	2300      	movs	r3, #0
 801deb2:	4604      	mov	r4, r0
 801deb4:	4608      	mov	r0, r1
 801deb6:	4611      	mov	r1, r2
 801deb8:	602b      	str	r3, [r5, #0]
 801deba:	f7e7 fa4d 	bl	8005358 <_fstat>
 801debe:	1c43      	adds	r3, r0, #1
 801dec0:	d102      	bne.n	801dec8 <_fstat_r+0x1c>
 801dec2:	682b      	ldr	r3, [r5, #0]
 801dec4:	b103      	cbz	r3, 801dec8 <_fstat_r+0x1c>
 801dec6:	6023      	str	r3, [r4, #0]
 801dec8:	bd38      	pop	{r3, r4, r5, pc}
 801deca:	bf00      	nop
 801decc:	20013fec 	.word	0x20013fec

0801ded0 <_isatty_r>:
 801ded0:	b538      	push	{r3, r4, r5, lr}
 801ded2:	4d06      	ldr	r5, [pc, #24]	@ (801deec <_isatty_r+0x1c>)
 801ded4:	2300      	movs	r3, #0
 801ded6:	4604      	mov	r4, r0
 801ded8:	4608      	mov	r0, r1
 801deda:	602b      	str	r3, [r5, #0]
 801dedc:	f7e7 fa4c 	bl	8005378 <_isatty>
 801dee0:	1c43      	adds	r3, r0, #1
 801dee2:	d102      	bne.n	801deea <_isatty_r+0x1a>
 801dee4:	682b      	ldr	r3, [r5, #0]
 801dee6:	b103      	cbz	r3, 801deea <_isatty_r+0x1a>
 801dee8:	6023      	str	r3, [r4, #0]
 801deea:	bd38      	pop	{r3, r4, r5, pc}
 801deec:	20013fec 	.word	0x20013fec

0801def0 <abort>:
 801def0:	b508      	push	{r3, lr}
 801def2:	2006      	movs	r0, #6
 801def4:	f000 f84a 	bl	801df8c <raise>
 801def8:	2001      	movs	r0, #1
 801defa:	f7e7 f9dd 	bl	80052b8 <_exit>

0801defe <__ascii_mbtowc>:
 801defe:	b082      	sub	sp, #8
 801df00:	b901      	cbnz	r1, 801df04 <__ascii_mbtowc+0x6>
 801df02:	a901      	add	r1, sp, #4
 801df04:	b142      	cbz	r2, 801df18 <__ascii_mbtowc+0x1a>
 801df06:	b14b      	cbz	r3, 801df1c <__ascii_mbtowc+0x1e>
 801df08:	7813      	ldrb	r3, [r2, #0]
 801df0a:	600b      	str	r3, [r1, #0]
 801df0c:	7812      	ldrb	r2, [r2, #0]
 801df0e:	1e10      	subs	r0, r2, #0
 801df10:	bf18      	it	ne
 801df12:	2001      	movne	r0, #1
 801df14:	b002      	add	sp, #8
 801df16:	4770      	bx	lr
 801df18:	4610      	mov	r0, r2
 801df1a:	e7fb      	b.n	801df14 <__ascii_mbtowc+0x16>
 801df1c:	f06f 0001 	mvn.w	r0, #1
 801df20:	e7f8      	b.n	801df14 <__ascii_mbtowc+0x16>

0801df22 <__ascii_wctomb>:
 801df22:	4603      	mov	r3, r0
 801df24:	4608      	mov	r0, r1
 801df26:	b141      	cbz	r1, 801df3a <__ascii_wctomb+0x18>
 801df28:	2aff      	cmp	r2, #255	@ 0xff
 801df2a:	d904      	bls.n	801df36 <__ascii_wctomb+0x14>
 801df2c:	228a      	movs	r2, #138	@ 0x8a
 801df2e:	601a      	str	r2, [r3, #0]
 801df30:	f04f 30ff 	mov.w	r0, #4294967295
 801df34:	4770      	bx	lr
 801df36:	700a      	strb	r2, [r1, #0]
 801df38:	2001      	movs	r0, #1
 801df3a:	4770      	bx	lr

0801df3c <_raise_r>:
 801df3c:	291f      	cmp	r1, #31
 801df3e:	b538      	push	{r3, r4, r5, lr}
 801df40:	4605      	mov	r5, r0
 801df42:	460c      	mov	r4, r1
 801df44:	d904      	bls.n	801df50 <_raise_r+0x14>
 801df46:	2316      	movs	r3, #22
 801df48:	6003      	str	r3, [r0, #0]
 801df4a:	f04f 30ff 	mov.w	r0, #4294967295
 801df4e:	bd38      	pop	{r3, r4, r5, pc}
 801df50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801df52:	b112      	cbz	r2, 801df5a <_raise_r+0x1e>
 801df54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df58:	b94b      	cbnz	r3, 801df6e <_raise_r+0x32>
 801df5a:	4628      	mov	r0, r5
 801df5c:	f000 f830 	bl	801dfc0 <_getpid_r>
 801df60:	4622      	mov	r2, r4
 801df62:	4601      	mov	r1, r0
 801df64:	4628      	mov	r0, r5
 801df66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df6a:	f000 b817 	b.w	801df9c <_kill_r>
 801df6e:	2b01      	cmp	r3, #1
 801df70:	d00a      	beq.n	801df88 <_raise_r+0x4c>
 801df72:	1c59      	adds	r1, r3, #1
 801df74:	d103      	bne.n	801df7e <_raise_r+0x42>
 801df76:	2316      	movs	r3, #22
 801df78:	6003      	str	r3, [r0, #0]
 801df7a:	2001      	movs	r0, #1
 801df7c:	e7e7      	b.n	801df4e <_raise_r+0x12>
 801df7e:	2100      	movs	r1, #0
 801df80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801df84:	4620      	mov	r0, r4
 801df86:	4798      	blx	r3
 801df88:	2000      	movs	r0, #0
 801df8a:	e7e0      	b.n	801df4e <_raise_r+0x12>

0801df8c <raise>:
 801df8c:	4b02      	ldr	r3, [pc, #8]	@ (801df98 <raise+0xc>)
 801df8e:	4601      	mov	r1, r0
 801df90:	6818      	ldr	r0, [r3, #0]
 801df92:	f7ff bfd3 	b.w	801df3c <_raise_r>
 801df96:	bf00      	nop
 801df98:	200000cc 	.word	0x200000cc

0801df9c <_kill_r>:
 801df9c:	b538      	push	{r3, r4, r5, lr}
 801df9e:	4d07      	ldr	r5, [pc, #28]	@ (801dfbc <_kill_r+0x20>)
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	4604      	mov	r4, r0
 801dfa4:	4608      	mov	r0, r1
 801dfa6:	4611      	mov	r1, r2
 801dfa8:	602b      	str	r3, [r5, #0]
 801dfaa:	f7e7 f975 	bl	8005298 <_kill>
 801dfae:	1c43      	adds	r3, r0, #1
 801dfb0:	d102      	bne.n	801dfb8 <_kill_r+0x1c>
 801dfb2:	682b      	ldr	r3, [r5, #0]
 801dfb4:	b103      	cbz	r3, 801dfb8 <_kill_r+0x1c>
 801dfb6:	6023      	str	r3, [r4, #0]
 801dfb8:	bd38      	pop	{r3, r4, r5, pc}
 801dfba:	bf00      	nop
 801dfbc:	20013fec 	.word	0x20013fec

0801dfc0 <_getpid_r>:
 801dfc0:	f7e7 b962 	b.w	8005288 <_getpid>

0801dfc4 <_init>:
 801dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfc6:	bf00      	nop
 801dfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfca:	bc08      	pop	{r3}
 801dfcc:	469e      	mov	lr, r3
 801dfce:	4770      	bx	lr

0801dfd0 <_fini>:
 801dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfd2:	bf00      	nop
 801dfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfd6:	bc08      	pop	{r3}
 801dfd8:	469e      	mov	lr, r3
 801dfda:	4770      	bx	lr
